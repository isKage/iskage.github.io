<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（6）：GPU 加速：CUDA 的使用</title>
      <link href="/posts/a6d6e67c.html"/>
      <url>/posts/a6d6e67c.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（6）GPU 加速：CUDA 的使用</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><p>使用 GPU 加速技术，可以大幅减少训练时间。Pytorch 中的 <code>Tensor</code> 张量和 <code>nn.Module</code> 类就分为 CPU 和 GPU 两种版本。一般使用 <code>.cuda()</code> 和 <code>.to(device)</code> 方法实现从 CPU 迁移到 GPU ，从设备迁移到设备。</p><blockquote><p>但 <code>Tensor</code> 和 <code>nn.Module</code> 使用 <code>.cuda()</code> 方法时返回的对象不同。</p><ul><li><code>Tensor.cuda()</code> 返回一个新对象，即拷贝了一份张量到 GPU ，之前的张量仍然储存在 CPU</li><li><code>nn.Module</code> 实例化后的 <code>module</code> 使用 <code>module.cuda()</code> 直接将所有数据推送到 GPU 不备份自己，即 <code>module.cuda()</code> 与 <code>module = module.cuda()</code> 等价</li></ul></blockquote><blockquote><p><code>.to(device)</code> 可以更灵活地在不同设备上迁移</p></blockquote><h2 id="1-cuda-方法">1 .cuda() 方法</h2><h3 id="1-1-张量-cuda-返回新的对象">1.1 张量 .cuda() 返回新的对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():  <span class="comment"># 检查 CUDA 是否可用</span></span><br><span class="line">    t_cuda = t.cuda()  <span class="comment"># 将张量 t 移动到 CUDA 设备</span></span><br><span class="line">    <span class="built_in">print</span>(t.is_cuda)</span><br><span class="line">    <span class="built_in">print</span>(t_cuda.is_cuda)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">False</span></span><br><span class="line">   <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p><code>.cuda()</code> 等价于 <code>.cuda(0)</code>  or <code>.cuda(device=0)</code> 迁移到第 0 块 GPU 上</p></blockquote><h3 id="1-2-module-cuda-返回自己">1.2 module.cuda() 返回自己</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">module = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    module.cuda(device=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(module.weight.is_cuda)  <span class="comment"># True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>迁移到 GPU 本质都是对张量 Tensor 做变换，所以对于模型 module ，也是其权重等参数进行迁移</p></blockquote><h2 id="2-to-device-方法">2 .to(device) 方法</h2><p><code>.to(device)</code> 方法可以指定设备</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.to方法，将 Tensor 转移至第 0 块GPU上</span></span><br><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    t_cuda = t.to(<span class="string">&#x27;cuda:0&#x27;</span>)  <span class="comment"># device: &#x27;cuda:0&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(t_cuda.is_cuda)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="3-损失函数迁移到-GPU">3 损失函数迁移到 GPU</h2><p>大部分的损失函数都属于 <code>nn.Module</code> ，在使用 GPU 时，建议使用 <code>.cuda</code> 或 <code>.to</code> 迁移到 GPU 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    <span class="comment"># 以交叉熵损失函数为例</span></span><br><span class="line">    criterion = torch.nn.CrossEntropyLoss(weight=torch.Tensor([<span class="number">1</span>, <span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 张量 Tensor 迁移到 GPU</span></span><br><span class="line">    inputs = torch.randn(<span class="number">4</span>, <span class="number">2</span>).cuda()</span><br><span class="line">    target = torch.Tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]).long().cuda()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># loss = criterion(input, target)  # 报错：计算损失函数的参数为迁移到 GPU</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正确：迁移损失函数</span></span><br><span class="line">    criterion.cuda()</span><br><span class="line">    loss = criterion(inputs, target)</span><br><span class="line">    <span class="built_in">print</span>(criterion._buffers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: OrderedDict([(<span class="string">&#x27;weight&#x27;</span>, tensor([<span class="number">1.</span>, <span class="number">3.</span>], device=<span class="string">&#x27;cuda:0&#x27;</span>))])</span><br></pre></td></tr></table></figure><h2 id="4-torch-cuda-device-指定默认设备">4 torch.cuda.device() 指定默认设备</h2><p>使用 <code>torch.cuda.device()</code> 指定默认设备，则不需要每次调用 <code>.cuda</code> 或 <code>.to</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定默认使用GPU &quot;cuda:0&quot;</span></span><br><span class="line"><span class="keyword">with</span> torch.cuda.device(<span class="number">0</span>):</span><br><span class="line">    <span class="comment"># 在 GPU 上构建Tensor</span></span><br><span class="line">    a = torch.cuda.FloatTensor(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 Tensor 转移至 GPU</span></span><br><span class="line">    b = torch.FloatTensor(<span class="number">2</span>, <span class="number">3</span>).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a.get_device)</span><br><span class="line">    <span class="built_in">print</span>(b.get_device)</span><br><span class="line"></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c.get_device)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C70C59CC0</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C04443930</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C04441360</span>&gt;</span><br></pre></td></tr></table></figure><p>或者使用 <code>torch.set_default_tensor_type()</code> 方法，指定张量类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">torch.set_default_tensor_type(<span class="string">&#x27;torch.cuda.FloatTensor&#x27;</span>) <span class="comment"># 指定默认 Tensor 的类型为GPU上的FloatTensor</span></span><br><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a.is_cuda)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">torch.set_default_tensor_type(<span class="string">&#x27;torch.FloatTensor&#x27;</span>) <span class="comment"># 恢复默认</span></span><br></pre></td></tr></table></figure><h2 id="5-多-GPU-操作">5 多 GPU 操作</h2><p>多个 GPU 方便快捷地指定迁移设备。</p><h3 id="5-1-方法一：调用-torch-cuda-set-device">5.1 方法一：调用 <code>torch.cuda.set_device()</code></h3><p>例如：指定先调用 <code>torch.cuda.set_device(1)</code> 指定默认使用 GPU “cuda:1” ，后续的 <code>.cuda()</code> 都无需更改，切换 GPU 只需修改这一行代码</p><h3 id="5-2-方法二：设置环境变量-CUDA-VISIBLE-DEVICES">5.2 方法二：设置环境变量 <code>CUDA_VISIBLE_DEVICES</code></h3><p>例如当 <code>CUDA_VISIBLE_DEVICE=1</code> 时，代表优先使用 GPU “cuda:1” 而不是 GPU “cuda:0” 。此时调用<code>tensor.cuda()</code> 会将Tensor转移至 GPU “cuda:1”</p><p><code>CUDA_VISIBLE_DEVICES</code> 还可以指定多个 GPU 。例如 <code>CUDA_VISIBLE_DEVICES=0,2,3</code> 代表按照 GPU “cuda:0”, “cuda:2”, “cuda:3” 的顺序使用 GPU 。此时 <code>cuda(0)</code> 迁移到 GPU “cuda:0” ，而 <code>.cuda(1)</code> 迁移到 GPU “cuda:2” ，<code>.cuda(2)</code> 迁移到 GPU “cuda:3” 。</p><h3 id="5-3-设置-CUDA-VISIBLE-DEVICES-的方法：">5.3 设置 <code>CUDA_VISIBLE_DEVICES</code> 的方法：</h3><ul><li>法一：命令行中执行 <code>CUDA_VISIBLE_DEVICES=0,1 python main.py</code> 来运行主程序</li><li>法二：程序中编写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="string">&#x27;0,1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>法三：IPython 或者 Jupyter notebook 中（即 <code>.ipynb</code> 文件），则可以使用魔法方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%env CUDA_VISIBLE_DEVICES=<span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="6-CPU-与-GPU-并存">6 CPU 与 GPU 并存</h2><p>考虑到不同电脑可能会有差异，例如当遇到无 GPU 的主机时，容易出现不兼容。（例如：无法迁移到 GPU），所以建议判断是否存在 GPU ，再迁移数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【推荐】如果用户具有 GPU 设备，那么使用GPU，否则使用CPU</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure><p>确定了设备之后，再迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x_to = x.to(device)</span><br><span class="line"><span class="built_in">print</span>(x_to.device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># device(type=&#x27;cuda&#x27;, index=0)</span></span><br></pre></td></tr></table></figure><h2 id="7-张量指定设备">7 张量指定设备</h2><h3 id="7-1-创建张量时指定设备">7.1 创建张量时指定设备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">x_cpu = torch.empty(<span class="number">2</span>, device=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x_cpu, x_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">x_gpu = torch.empty(<span class="number">2</span>, device=device)</span><br><span class="line"><span class="built_in">print</span>(x_gpu, x_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="7-2-new-保留原属性">7.2 new_* 保留原属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># new_*() : 保留原 Tensor 的设备属性</span></span><br><span class="line"></span><br><span class="line">y_cpu = x_cpu.new_full((<span class="number">3</span>, <span class="number">4</span>), <span class="number">9</span>)  <span class="comment"># new_full : 用 9 填充形状 [3, 4] 的张量</span></span><br><span class="line"><span class="built_in">print</span>(y_cpu, y_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">y_gpu = x_gpu.new_zeros(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># new_zeros : 填充 0</span></span><br><span class="line"><span class="built_in">print</span>(y_gpu, y_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="7-3-like-保留原属性">7.3 *_like 保留原属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ones_like或zeros_like可以创建与原Tensor大小类别均相同的新Tensor</span></span><br><span class="line"></span><br><span class="line">z_cpu = torch.ones_like(x_cpu)  <span class="comment"># 大小相同，设备相同</span></span><br><span class="line"><span class="built_in">print</span>(z_cpu, z_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z_gpu = torch.zeros_like(x_gpu)  <span class="comment"># 大小相同，设备相同</span></span><br><span class="line"><span class="built_in">print</span>(z_gpu, z_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（5）：可视化工具：TensorBoard</title>
      <link href="/posts/ef3d3872.html"/>
      <url>/posts/ef3d3872.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（5）可视化工具：TensorBoard</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><p>为了更直观地、实时地观察训练过程，使用一些可视化工具实现训练过程的图形化表达，以便直观地展现结果。</p><p>TensorBoard ：只要用户保存的数据遵循相应的格式，TensorBoard 就能读取这些数据，进行可视化。</p><h2 id="1-下载-TensorBoard">1 下载 TensorBoard</h2><p>最新版本的 Pytorch 在下载时已经配置了 TensorBoard 无需特别下载。如果没有下载 TensorBoard 包需要先在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br></pre></td></tr></table></figure><h2 id="2-创建-logger-对象">2 创建 logger 对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter  <span class="comment"># 导入 tensorboard</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建 logger 对象，指定 log 文件的保存路径 log_dir=&#x27;logs&#x27;</span></span><br><span class="line">logger = SummaryWriter(log_dir=<span class="string">&#x27;logs&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>此时已经可以通过执行：<code>tensorboard --logdir=path</code> 来访问可视化界面。</p></li><li><p><code>path</code> 填入 logger 对象文件保存路径 例如此处的 <code>'./logs'</code> 或 <code>'log'</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端输入以查看结果</span></span><br><span class="line">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739386419718.png" alt=""></p><ul><li>打开浏览器，输入 <code>http://localhost:6006/</code> 查看</li></ul><blockquote><p>此时没有加入任何数据和图像，故界面如下</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739386180385.png" alt=""></p><blockquote><p>或者在 notebook 中查看</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%load_ext tensorboard</span><br><span class="line">%tensorboard --logdir=<span class="string">&#x27;logs&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-添加数据-绘制图像">3 添加数据 &amp; 绘制图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_scalar 记录标量</span></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/train&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/test&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739416635199.png" alt=""></p><blockquote><p>如果不中断 <code>tensorboard --logdir=logs</code> 则可以通过刷新网页来查看。或者可以关闭 (<code>CTRL + C</code>) 后重新启动。</p></blockquote><ul><li>结束后，删除之前的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clear any logs from previous runs</span></span><br><span class="line"><span class="built_in">rm</span> -rf ./logs/</span><br></pre></td></tr></table></figure><h2 id="4-下载数据集-MNIST">4 下载数据集 MNIST</h2><p>以 <code>MNIST</code> 手写识别体数据集为例，首先先下载。可以直接调用 <code>torchvision.datasets.MNIST</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))  <span class="comment"># MNIST 是灰度图，单通道</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;./data/&#x27; 指定下载的路径，download=True 表示下载，train=False 表示下载测试集，transform 指定变换</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>, transform=transform)</span><br></pre></td></tr></table></figure><p>如果无法下载可以前往官网手动下载：</p><p>训练集：<a href="https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz">train-images</a>, <a href="https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz">train-labels</a></p><p>测试集：<a href="https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz">t10k-images</a>, <a href="https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz">t10k-labels</a></p><p>然后放入目录 <code>MNIST</code> 下的 <code>raw</code> 文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── MNIST</span><br><span class="line">    └── raw</span><br><span class="line">        ├── t10k-images-idx3-ubyte.gz</span><br><span class="line">        ├── t10k-labels-idx1-ubyte.gz</span><br><span class="line">        ├── train-images-idx3-ubyte.gz</span><br><span class="line">        └── train-labels-idx1-ubyte.gz</span><br></pre></td></tr></table></figure><p>然后再运行之前的下载代码，将 <code>download=False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">False</span>, train=<span class="literal">False</span>, transform=transform)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── MNIST</span><br><span class="line">    └── raw</span><br><span class="line">        ├── t10k-images-idx3-ubyte</span><br><span class="line">        ├── t10k-images-idx3-ubyte.gz</span><br><span class="line">        ├── t10k-labels-idx1-ubyte</span><br><span class="line">        ├── t10k-labels-idx1-ubyte.gz</span><br><span class="line">        ├── train-images-idx3-ubyte</span><br><span class="line">        ├── train-images-idx3-ubyte.gz</span><br><span class="line">        ├── train-labels-idx1-ubyte</span><br><span class="line">        └── train-labels-idx1-ubyte.gz</span><br></pre></td></tr></table></figure><h2 id="5-常用函数">5 常用函数</h2><h3 id="5-1-add-scalar-添加标量">5.1 add_scalar 添加标量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_scalar(<span class="variable language_">self</span>, tag, scalar_value, global_step=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>tag</code> ：标题名</li><li><code>scalar_value</code> ：标量数值</li><li><code>global_step</code> ：迭代批次</li></ul><p>例如：从 [0, 99] 随机产生标量绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_scalar 记录标量</span></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/train&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/test&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br></pre></td></tr></table></figure><h3 id="5-2-add-image-显示图像">5.2 add_image 显示图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))  <span class="comment"># MNIST 是灰度图，单通道</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;./data/&#x27; 指定下载的路径，download=True 表示下载，train=False 表示下载测试集，transform 指定变换</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, shuffle=<span class="literal">True</span>, batch_size=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">images, labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataloader))</span><br><span class="line">grid = torchvision.utils.make_grid(images)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_image 显示图像</span></span><br><span class="line">logger.add_image(<span class="string">&#x27;images&#x27;</span>, grid, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">%load_ext tensorboard</span><br><span class="line">%tensorboard --logdir=<span class="string">&#x27;logs&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739418831074.png" alt=""></p><h3 id="5-3-add-graph-显示网络结构">5.3 add_graph 显示网络结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_size=<span class="number">28</span>, hidden_size=<span class="number">500</span>, num_classes=<span class="number">10</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(input_size, hidden_size)</span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(hidden_size, num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        out = <span class="variable language_">self</span>.relu(out)</span><br><span class="line">        out = <span class="variable language_">self</span>.fc2(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = myModel()</span><br><span class="line">logger.add_graph(model, images)  <span class="comment"># 代入具体的数值计算 torch.Size([16, 1, 28, 28])</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420352341.png" alt=""></p><h3 id="5-4-add-histogram-显示直方图">5.4 add_histogram 显示直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.add_histogram(<span class="string">&#x27;normal&#x27;</span>, np.random.normal(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1000</span>), global_step=<span class="number">1</span>)</span><br><span class="line">logger.add_histogram(<span class="string">&#x27;normal&#x27;</span>, np.random.normal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1000</span>), global_step=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420726898.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420601056.png" alt=""></p><h3 id="5-5-add-embedding-可视化">5.5 add_embedding 可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_embedding 进行 embedding 可视化</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>)  <span class="comment"># PIL Image 对象可以可视化</span></span><br><span class="line">images = dataset.data[:<span class="number">100</span>].<span class="built_in">float</span>()  <span class="comment"># 提取前 100 张图像并转为浮点数类型</span></span><br><span class="line">label = dataset.targets[:<span class="number">100</span>]  <span class="comment"># 提取前 100 张图像的标签</span></span><br><span class="line">features = images.view(<span class="number">100</span>, <span class="number">28</span> * <span class="number">28</span>)  <span class="comment"># 将图像展平为 100 x 784 的矩阵</span></span><br><span class="line">logger.add_embedding(features, metadata=label, label_img=images.unsqueeze(<span class="number">1</span>))  <span class="comment"># 将嵌入数据记录到 TensorBoard</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（4）：数据处理 Dataset 和 Dataloader</title>
      <link href="/posts/bffdebd7.html"/>
      <url>/posts/bffdebd7.html</url>
      
        <content type="html"><![CDATA[<h1>数据处理 Dataset 和 Dataloader</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的数据处理。相比于搭建已知的神经网络，对数据的处理更为复杂困难。【数据处理非常重要且困难！！】</p><p>Pytorch 针对数据处理，提供了两个重要的类 <code>Dataset</code> 和 <code>Dataloader</code></p><h2 id="1-Dataset-类">1 Dataset 类</h2><p>在 PyTorch 中，数据加载可以通过 <code>Dataset</code>类加载。如果要自定义的数据集，需要继承 <code>Dataset</code> 类，并且必须实现：</p><ul><li><code>__getitem__()</code> ：返回一条数据，或一个样本。<code>obj[index]</code> 等价于 <code>obj.__getitem__(index)</code></li><li><code>__len__()</code> ：返回样本量。<code>len(obj)</code> 等价于 <code>obj.__len__()</code></li></ul><h3 id="1-1-准备数据">1.1 准备数据</h3><p>以 <a href="https://www.kaggle.com/competitions/dogs-vs-cats">Kaggle 经典案例 “Dogs vs. Cats”</a> 的数据为例，构造数据集。有关数据下载，可以前往 <a href="https://www.kaggle.com/competitions/dogs-vs-cats/data">Kaggle 比赛官网下载</a> 。但完整数据集太大，可以下载部分图片，或者<a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/cat_dog.zip">点击链接</a>下载我存储的小部分样本。或者去往来我的 GitHub 库中下载 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><p>Kaggle 比赛 “Dogs vs. Cats” 是一个分类问题：判断一张图片是狗还是猫。在该问题中，所有图片都存放在一个文件夹下，可以根据文件名的前缀得到它们的标签值（ <code>dog</code> 或者 <code>cat</code> ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog/</span><br><span class="line">data/cat_dog/</span><br><span class="line">├── cat.13.jpg</span><br><span class="line">├── cat.14.jpg</span><br><span class="line">├── cat.16.jpg</span><br><span class="line">├── cat.18.jpg</span><br><span class="line">├── dog.2.jpg</span><br><span class="line">├── dog.3.jpg</span><br><span class="line">├── dog.4.jpg</span><br><span class="line">└── dog.5.jpg</span><br></pre></td></tr></table></figure><h3 id="1-2-自定义数据集">1.2 自定义数据集</h3><ul><li>导入必要的库：<code>PIL</code> 库用于读取图片，<code>os</code> 库用于给出路径（以免不同电脑路径组合方式不同）</li><li>自定义数据集：继承 <code>torch.utils.data</code> 的 <code>Dataset</code> 类</li><li>编写 <code>__init__</code> 方法：先初始化图片路径，但暂时不读取图片</li><li>编写 <code>__getitem__</code> 方法：真正读取图片，并定义标签，并转为张量</li><li>编写 <code>__len()__</code> 方法：返回样本量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogCat</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root</span>):</span><br><span class="line">        imgs = os.listdir(root)  <span class="comment"># 所有图片前的绝对路径表</span></span><br><span class="line">        <span class="comment"># 不实际加载图片，只指定路径，当调用 __getitem__ 时才读取图片，以节省内存</span></span><br><span class="line">        <span class="variable language_">self</span>.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_path = <span class="variable language_">self</span>.imgs[index]</span><br><span class="line">        <span class="comment"># 标签设置：dog -&gt; 1， cat -&gt; 0</span></span><br><span class="line">        label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> img_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 真正读取图片</span></span><br><span class="line">        pil_img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        array = np.asarray(pil_img)</span><br><span class="line">        data = torch.tensor(array)  <span class="comment"># 转为张量</span></span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.imgs)  <span class="comment"># 返回样本数</span></span><br></pre></td></tr></table></figure><h3 id="1-3-读取数据集">1.3 读取数据集</h3><p>实例化自定义的数据集 <code>DogCat</code> ，因为 <code>__init__(self, root)</code> 初始化方法里需要参数图片存储的文件夹/路径 <code>root</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>)  <span class="comment"># 图片存储在 ./data/cat_dog/ 文件夹内</span></span><br></pre></td></tr></table></figure><h3 id="1-4-读取数据集里的数据">1.4 读取数据集里的数据</h3><p>使用方法 <code>__getitem__</code> 获取真实数据（此处为图片）<code>img</code> 和标签 <code>label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第一个数据，包含标签和图片</span></span><br><span class="line">img, label = dataset[<span class="number">0</span>]  <span class="comment"># 相当于 dataset.__getitem__(0)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># torch.Size([374, 500, 3]) 说明图片已转为张量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(label)</span><br><span class="line"><span class="comment"># 0 说明是 cat</span></span><br></pre></td></tr></table></figure><p>逐个批量读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tensor&#x27;s shape: &#123;&#125;, label: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(img.shape, label))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739264855512.png" alt=""></p><blockquote><p>但是，我们注意到，图片大小形状不一致，且没有进行标准化，所以需要数据预处理</p></blockquote><h2 id="2-torchvision-库">2 torchvision 库</h2><p>Pytorch 的 <code>torchvision</code> 包提供了许多工具用来处理计算机视觉问题。其中 <code>torchvison.transforms</code> 可以方便快速地对图像进行操作。</p><h3 id="2-1-torchvison-transforms-的常见操作">2.1 torchvison.transforms 的常见操作</h3><p>可以去往 <a href="https://pytorch.org/vision/stable/transforms.html">Pytorch 官网</a> 查询具体使用。</p><h4 id="2-1-1-仅支持-PIL-Image">2.1.1 仅支持 PIL Image</h4><ul><li><code>RandomChoice</code> ：在一系列 transforms 操作中随机执行一个操作</li><li><code>RandomOrder</code> ：以随意顺序执行一系列 transforms 操作</li></ul><h4 id="2-1-2-仅支持-Tensor">2.1.2 仅支持 Tensor</h4><ul><li><code>Normalize</code> ：标准化，即减去均值，除以标准差</li><li><code>RandomErasing</code> ：随机擦除 Tensor 中一个矩形区域的像素。</li><li><code>ConvertImageDtype</code> ：将 Tensor 转换为指定的类型，并进行相应的缩放</li></ul><h4 id="2-1-3-PIL-Image-与-Tensor-相互转换">2.1.3  PIL Image 与 Tensor 相互转换</h4><ul><li><code>ToTensor</code> ：将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">H \times W \times C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 形状的 <code>PIL Image</code> 对象转换成形状为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">C \times H \times W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> 的 <code>Tensor</code> 。同时会自动将像素值从 [0, 255] 归一化至 [0, 1] （C 位通道数）</li><li><code>ToPILImage</code> ：将 <code>Tensor</code> 转为 <code>PIL Image</code> 对象</li></ul><h4 id="2-1-4-既支持-PIL-Image-，又支持-Tensor">2.1.4 既支持 PIL Image ，又支持 Tensor</h4><ul><li><code>Resize</code> ：调整图片尺寸</li><li><code>CenterCrop</code> <code>RandomCrop</code> <code>RandomResizedCrop</code> <code>FiveCrop</code> ： 按照不同规则对图像进行裁剪</li><li><code>RandomAffine</code> ：随机进行仿射变换，保持图像中心不变</li><li><code>RandomGrayscale</code> ：随机将图像变为灰度图</li><li><code>RandomHorizontalFlip</code> <code>RandomVerticalFlip</code> <code>RandomRotation</code> ：随机水平翻转、垂直翻转、旋转图像</li></ul><blockquote><p>如果需要对图片进行多个操作，可以通过 <code>transforms.Compose</code> 将这些操作拼接起来。</p></blockquote><blockquote><p>注意，这些操作定义后以对象的形式存在，真正使用时需要调用 <code>__call__</code> 方法。例如，要将图片的大小调整至 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>×</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">10 \times 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span> ，首先应构建操作 <code>trans = Resize((10, 10))</code> ，然后调用 <code>trans(img)</code></p></blockquote><h3 id="2-2-transforms-操作">2.2 transforms 操作</h3><h4 id="2-2-1-定义变化操作序列">2.2.1 定义变化操作序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变换操作</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">224</span>),  <span class="comment"># 缩放图片 (PIL Image), 保持长宽比不变, 使最短边缩放到 224 像素</span></span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从图片中间切出 224x224 的图片</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图片 (PIL Image) 转成 Tensor , 自动归一化至 [0, 1]</span></span><br><span class="line">    transforms.Normalize(mean=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>], std=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>])  <span class="comment"># 标准化至 [-1, 1] , 规定均值和标准差 , 因为图片为 3 维</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="2-2-2-自定义数据集中加入变化与否参数">2.2.2 自定义数据集中加入变化与否参数</h4><p>将有关变换序列参数加入初始化方法里，同时在 <code>__getitem()__</code> 里加入变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加参数 transform 传入变化序列</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogCat</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root, transform=<span class="literal">None</span></span>):</span><br><span class="line">        imgs = os.listdir(root)</span><br><span class="line">        <span class="variable language_">self</span>.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line">        <span class="variable language_">self</span>.transform = transform  <span class="comment"># 初始化 transforms 操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_path = <span class="variable language_">self</span>.imgs[index]</span><br><span class="line">        <span class="comment"># 标签设置：dog -&gt; 1， cat -&gt; 0</span></span><br><span class="line">        label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> img_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 真正读取图片</span></span><br><span class="line">        data = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.transform:</span><br><span class="line">            data = <span class="variable language_">self</span>.transform(data)  <span class="comment"># 直接进行 transform 变化</span></span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.imgs)  <span class="comment"># 返回样本数</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-实例化数据集">2.2.3 实例化数据集</h4><p>传入变化序列 <code>transform=transform</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>, transform=transform)  <span class="comment"># 使用 transform 进行变换</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-展示结果">2.2.4 展示结果</h4><p>可以发现数据格式统一成了我们需要的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    <span class="built_in">print</span>(img.shape, label)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739276735119.png" alt=""></p><blockquote><p>注意：自定义数据集需要考虑到当 <code>transform = None</code> 时的情形。在上述定义的数据集里，当默认<code>transform = None</code> 时不会报错，此时 <code>img</code> 是 <code>PIL Image</code> 对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">no_transform = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>)</span><br><span class="line">img, label = no_transform[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739276821066.png" alt=""></p><h3 id="2-3-torchvision-封装的常见数据集">2.3 torchvision 封装的常见数据集</h3><p><code>torchvision</code> 封装了常用的 dataset ，例如：<code>CIFAR-10</code>、<code>ImageNet</code>、<code>COCO</code>、<code>MNIST</code>、<code>LSUN</code> 等数据集。可以通过诸如 <code>torchvision.datasets.CIFAR10</code> 的命令进行调用，具体使用方法参考<a href="https://pytorch.org/vision/stable/datasets.html">官方文档</a>。</p><h4 id="2-3-1-ImageFolder-结构">2.3.1 ImageFolder 结构</h4><p>常见数据集结构 <code>ImageFolder</code> ：数据集假设所有的图片按文件夹保存，每个文件夹下存储同一个类别的图片，文件夹名为类名。即需要目录结构为：【可将上文的 cat_dog 数据集自主修改为符合 ImageFolder 要求的目录结构】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog_imagefolder/</span><br><span class="line">data/cat_dog_imagefolder/</span><br><span class="line">├── <span class="built_in">cat</span></span><br><span class="line">│   ├── cat.13.jpg</span><br><span class="line">│   ├── cat.14.jpg</span><br><span class="line">│   ├── cat.16.jpg</span><br><span class="line">│   └── cat.18.jpg</span><br><span class="line">└── dog</span><br><span class="line">    ├── dog.2.jpg</span><br><span class="line">    ├── dog.3.jpg</span><br><span class="line">    ├── dog.4.jpg</span><br><span class="line">    └── dog.5.jpg</span><br></pre></td></tr></table></figure><ul><li><code>ImageFolder</code> 类的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ImageFolder(root, transform=<span class="literal">None</span>, target_transform=<span class="literal">None</span>, loader=default_loader, is_valid_file=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">- root</span><br><span class="line">root 路径目录下存放着不同类别的文件夹</span><br><span class="line"></span><br><span class="line">- transform</span><br><span class="line">对 PIL Image 进行相关操作，transform 的输入是使用 loader 读取图片的返回对象 (一般是 PIL Image)</span><br><span class="line"></span><br><span class="line">- target_transform</span><br><span class="line">对 label 的操作</span><br><span class="line"></span><br><span class="line">- loader</span><br><span class="line">指定加载图片的函数，默认操作是读取为 PIL Image 对象</span><br><span class="line"></span><br><span class="line">- is_valid_file</span><br><span class="line">获取图像路径，检查文件的有效性</span><br></pre></td></tr></table></figure><blockquote><p><code>target_transform</code> 对标签的操作默认，则会返回一个字典。形如 <code>&#123;文件夹1名: 0, 文件夹2名: 1, 文件夹3名: 2, ...&#125;</code> 的字典，每个类的文件夹名和数字对应。可以通过 <code>.class_to_idx</code> 查看对应关系。</p></blockquote><h4 id="2-3-2-ImageFolder-创建数据集-Dataset">2.3.2 ImageFolder 创建数据集 Dataset</h4><ul><li>实例化数据集（未指定变换，直接读取 PIL Image）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> ImageFolder</span><br><span class="line">dataset = ImageFolder(<span class="string">&#x27;./data/cat_dog_imagefolder&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取一下标签 <code>label</code> 对应关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset.class_to_idx</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;cat&#x27;: 0, &#x27;dog&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><p>于是我们知道：<code>0</code> 对应 <code>'cat'</code> ，<code>1</code> 对应 <code>'dog'</code></p><ul><li>查看数据集：返回图片路径和对应的标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset.imgs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739278461256.png" alt=""></p><ul><li>查看具体数据（图片）：因为没有进行操作，默认读取的是 PIL Image 对象</li></ul><p><code>dataset[0]</code> 获取数据集第 0 个样本，包括 <code>img</code> 和 <code>label</code> ，其中第 0 个是 <code>img</code> ，第 1 个是 <code>label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset.__getitem__(<span class="number">0</span>)[<span class="number">0</span>]  <span class="comment"># 等价于 dataset[0][0], 获取 img</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739279152983.png" alt=""></p><ul><li>获取标签，返回类别名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 辅助返回类别名，不重要</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_class_by_idx</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">for</span> key_class, val_idx <span class="keyword">in</span> dataset.class_to_idx.items():</span><br><span class="line">        <span class="keyword">if</span> val_idx == idx:</span><br><span class="line">            <span class="keyword">return</span> key_class</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Not found&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签 dataset[0][1]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The label is: &#123;&#125; meaning &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    dataset.__getitem__(<span class="number">0</span>)[<span class="number">1</span>],</span><br><span class="line">    get_class_by_idx(dataset[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; [Out]: The label is: 0 meaning cat &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>【加入变换】：一般情况下，我们会加入变换 transforms</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入变换</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">224</span>),  <span class="comment"># 缩放图片 (PIL Image), 保持长宽比不变, 使最短边缩放到 224 像素</span></span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从图片中间切出 224x224 的图片</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图片 (PIL Image) 转成 Tensor , 自动归一化至 [0, 1]</span></span><br><span class="line">    transforms.Normalize(mean=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>], std=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>])  <span class="comment"># 标准化至 [-1, 1] , 规定均值和标准差 , 因为图片为 3 维</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新构造数据集</span></span><br><span class="line">dataset = ImageFolder(<span class="string">&#x27;./data/cat_dog_imagefolder&#x27;</span>, transform=transform)</span><br></pre></td></tr></table></figure><p>结果：查看图片张量形状，因为神经网络中一般图像的通道数在第一个维度，而 PIL Image 类型通道数在第三个维度，所以变换十分必要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset.__getitem__(<span class="number">0</span>)[<span class="number">0</span>].shape  <span class="comment"># or dataset[0][0].shape</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; [Out]: torch.Size([3, 224, 224]) &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>也正是因为 Tensor 和 PIL Image 对通道数位置要求的不同，二者转换往往需要多一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">to_img = transforms.ToPILImage()</span><br><span class="line">to_img(dataset[<span class="number">0</span>][<span class="number">0</span>] * <span class="number">0.5</span> + <span class="number">0.5</span>)  <span class="comment"># 因为变换指定了均值和方差后进行了归一化，所以要返归一化</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739279681882.png" alt=""></p><h2 id="2-DataLoader-类">2 DataLoader 类</h2><p>在训练神经网络时，一次处理的对象是一个 <code>batch</code> 的数据，同时还需要对一批数据进行打乱顺序和并行加速等操作。为此，PyTorch提供了 <code>DataLoader</code> 实现这些功能。</p><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataLoader(dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">False</span>, sampler=<span class="literal">None</span>,</span><br><span class="line">           batch_sampler=<span class="literal">None</span>, num_workers=<span class="number">0</span>, collate_fn=<span class="literal">None</span>,</span><br><span class="line">           pin_memory=<span class="literal">False</span>, drop_last=<span class="literal">False</span>, timeout=<span class="number">0</span>,</span><br><span class="line">           worker_init_fn=<span class="literal">None</span>, *, prefetch_factor=<span class="number">2</span>,</span><br><span class="line">           persistent_workers=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><code>dataset</code> : 数据集 Dataset 类</li><li><code>batch_size=1</code> :  批量 batch 的大小</li><li><code>shuffle=False</code> : 是否打乱数据顺序</li><li><code>sampler=None</code> : 用于从数据集中抽取样本的采样器，可以自定义采样策略</li><li><code>batch_sampler=None</code> : 定义如何批量抽取样本</li><li><code>num_workers=0</code> : 用多进程加载的进程数，0 代表不使用多进程</li><li><code>collate_fn=None</code> : 多样本拼接 batch 的方法，一般默认</li><li><code>pin_memory=False</code> : 是否将数据保存在 pin memory 区，pin memory 中的数据转移到 GPU 速度更快</li><li><code>drop_last=False</code> : Dataset 中的数据不一定被 batch_size 整除时，若 drop_last 为 True ，则将多出来的数据丢弃</li><li><code>timeout=0</code> : 进程读取数据的最大时间，若超时则丢弃数据</li><li><code>worker_init_fn=None</code> : 每个 worker 的初始化函数（num_workers=0 则无影响）</li><li><code>prefetch_factor=2</code> : 每个 worker 预先加载的样本数</li></ul><h3 id="2-1-Dataloader-的使用">2.1 Dataloader 的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataloader</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">False</span>)  <span class="comment"># 加载 dataset, 批量大小为 3, 打乱顺序, 单进程, 不丢弃最后数据</span></span><br></pre></td></tr></table></figure><ul><li>每个 batch 数据形如 <code>torch.Size([3, 3, 224, 224])</code> ：第一个 3 代表批量 batch 大小，第二个 3 代表图片通道数，最后代表 224x224 的图片大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739329118058.png" alt=""></p><blockquote><p>最后一个批量为 2 是因为图片总共 8 张，而批量按 3 个数据一取，剩余 2 个数据</p></blockquote><ul><li>安装迭代器的方式取数据：dataloader 可以通过迭代器的方式取数据 <code>iter(Dataloader)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataiter = <span class="built_in">iter</span>(dataloader)</span><br><span class="line">imgs, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"><span class="built_in">print</span>(imgs.shape)  <span class="comment"># torch.Size([3, 3, 224, 224])</span></span><br></pre></td></tr></table></figure><blockquote><p>迭代器 <code>iter()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 迭代器补充</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="built_in">iter</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(b)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(b)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h3 id="2-2-自定义-collate-fn-避免读取失败">2.2 自定义 collate_fn 避免读取失败</h3><p>若某个样本无法读取，此时利用 Dataset 类时， <code>__getitem__</code>函数中会抛出异常。</p><ul><li>例如：可手动创建一个新的文件夹，添加一个空文件命名为 <code>dog.fail.jpg</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog_fail/</span><br><span class="line">data/cat_dog_fail/</span><br><span class="line">├── cat.13.jpg</span><br><span class="line">├── cat.14.jpg</span><br><span class="line">├── cat.16.jpg</span><br><span class="line">├── cat.18.jpg</span><br><span class="line">├── dog.2.jpg</span><br><span class="line">├── dog.3.jpg</span><br><span class="line">├── dog.4.jpg</span><br><span class="line">├── dog.5.jpg</span><br><span class="line">└── dog.fail.jpg</span><br></pre></td></tr></table></figure><p>此时如果仍然利用之前自定义的 Dataset 类 <code>DogCat</code> ，则会在后面真正读取数据时报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错 : UnidentifiedImageError: cannot identify image file</span></span><br><span class="line"><span class="comment"># for img, label in dataset:</span></span><br><span class="line"><span class="comment">#     print(img.shape, label)</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-解决方法一：返回-None">2.2.1 解决方法一：返回 None</h4><p>当读取失败时，返回 None ，然后自定义 <code>collate_fn</code> 让 Dataloader 加载时跳过</p><p>定义新的 Dataset 类，继承之前自定义的 <code>DogCat</code> ，尝试使用父类的 <code>__getitem__()</code> ，如果失败则返回 <code>(None, None)</code> 代表 <code>(数据, 标签)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewDogCat</span>(<span class="title class_ inherited__">DogCat</span>):  <span class="comment"># 继承之前自定义的 Dataset 类 DogCat</span></span><br><span class="line">    <span class="comment"># 修改 __getitem__() 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 调用父类读取图片的方法 __getitem__() 等价于 DogCat.__getitem__(self, index)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># 数据=None, 标签=None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>自定义 <code>collate_fn</code> 解决 Dataloader 读取数据异常：collate_fn 的传入参数 batch 是一个列表，形如 <code>[(data1, label1), (data2, label2), ...]</code> 删去里面为空的元祖，然后采用 Dataloader 默认的拼接方式返回最终的批量数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data.dataloader <span class="keyword">import</span> default_collate  <span class="comment"># 导入 Dataloader 默认的拼接方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 collate_fn 函数，删去 None 值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_fail_sample</span>(<span class="params">batch</span>):</span><br><span class="line">    <span class="comment"># batch 是一个 list，每个元素是 dataset 的返回值，形如 (data, label)</span></span><br><span class="line">    batch = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> batch <span class="keyword">if</span> _[<span class="number">0</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]  <span class="comment"># 过滤为 None 的数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(batch) == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> torch.Tensor()  <span class="comment"># 如果整个数据集都是空的</span></span><br><span class="line">    <span class="keyword">return</span> default_collate(batch)  <span class="comment"># 用默认方式拼接过滤后的batch数据</span></span><br></pre></td></tr></table></figure><p>开始读取数据：实例化新的 dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset = NewDogCat(<span class="string">&#x27;data/cat_dog_fail/&#x27;</span>, transform=transform)</span><br><span class="line">dataset[<span class="number">5</span>] <span class="comment"># (None, None) 第 5 个读取了错误的图片</span></span><br></pre></td></tr></table></figure><p>Dataloader 读取数据：批量为 2 ，使用自定义 collate_fn 函数，单进程，打乱顺序，不丢弃最后数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataloader = DataLoader(dataset, <span class="number">2</span>, collate_fn=delete_fail_sample, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739330925980.png" alt=""></p><blockquote><p>此处有 2 个批量不统一：一个是由于有一个图片没有读取成功；另一个是因为总共 9 张图片，无法整除 2</p></blockquote><h4 id="2-2-2-解决方法二：随机读取正常数据-【推荐】">2.2.2 解决方法二：随机读取正常数据 【推荐】</h4><p>不再返回 <code>(None, None)</code> 而是随机返回其他正常数据，这样可以避免因读取失败带来的形状不统一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机读取数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewDogCat</span>(<span class="title class_ inherited__">DogCat</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            new_index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>) - <span class="number">1</span>)  <span class="comment"># 随机返回一张正常数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>[new_index]</span><br></pre></td></tr></table></figure><p>Dataloader 读取数据时不再需要自定义 collate_fn</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = NewDogCat(<span class="string">&#x27;data/cat_dog_fail/&#x27;</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, <span class="number">2</span>, collate_fn=<span class="literal">None</span>, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739331306790.png" alt=""></p><blockquote><p>此处唯一一个不统一形状是由于 9 不能被 2 整除，可以通过丢弃实现 <code>drop_last=True</code>）</p></blockquote><h3 id="2-3-随机采样">2.3 随机采样</h3><p>当 <code>DataLoader</code> 的 <code>shuffle=True</code> 时，会自动调用采样器 <code>RandomSampler</code> 打乱数据。默认的采样器是<code>SequentialSampler</code>，它会按顺序一个一个进行采样。除此之外，<code>WeightedRandomSampler</code> 也是一个很常见的采样器，它会根据每个样本的权重选取数据。</p><p><strong>参数</strong></p><ul><li><p><code>weights</code> ：每个样本的权重，权重越大的样本被选中的概率越大</p></li><li><p><code>num_samples</code> ：选取的样本总数，一般小于总数据量（可以大于）</p></li><li><p><code>replacement</code> （可选）：默认/建议为 True，即允许重复采样同一个数据。当为 True 时，此时就算总样本数不足 <code>num_samples</code> 也会依靠重复取样达到</p></li></ul><p><strong>使用案例</strong></p><ul><li>首先读取数据集，并设置权重列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataset = DogCat(<span class="string">&#x27;data/cat_dog/&#x27;</span>, transform=transform)  <span class="comment"># 总共 8 张图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权重：假设 cat 的图片被取出的概率是 dog 的概率的 2 倍</span></span><br><span class="line">weights = [<span class="number">2</span> <span class="keyword">if</span> label == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> data, label <span class="keyword">in</span> dataset]</span><br><span class="line"><span class="comment"># 两类图片被取出的概率与 weights 的绝对大小无关，只和比值有关</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(weights)</span><br><span class="line"><span class="comment"># [2, 1, 1, 1, 1, 2, 2, 2] -&gt; cat (label=0) 设权重为 2 ; dog (label=1) 设权重为 1</span></span><br></pre></td></tr></table></figure><ul><li>设定取样样本总数为 9（大于总图片数 8）选择 <code>replacement=True</code> 允许重复取样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data.sampler <span class="keyword">import</span> WeightedRandomSampler</span><br><span class="line"></span><br><span class="line">sampler = WeightedRandomSampler(weights=weights, num_samples=<span class="number">9</span>, replacement=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, sampler=sampler)</span><br></pre></td></tr></table></figure><ul><li>结果：<code>cat (label=0)</code> 的数量大约为 <code>dog (label)</code> 的 2 倍</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739333471748.png" alt=""></p><blockquote><p>【注意】注意次数样本数为 9 已经大于总图片数 8，说明当允许重复取样 <code>replacement=True</code> 时可以自行补充样本。同时原来 Dataloader 中的 <code>shuffle</code> 操作也会失效，因为随机取样完全由取样器决定</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（7）聚合函数</title>
      <link href="/posts/b266e599.html"/>
      <url>/posts/b266e599.html</url>
      
        <content type="html"><![CDATA[<h1>聚合函数</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>不同的数据库管理系统 DBMS 的函数使用差异极大，SQL 语言函数的可移植性很差。</p><p>MySQL 提供的内置函数包括<em>单行函数</em>和<em>聚合函数</em>，这章讲解聚合函数。</p><p><strong>聚合函数</strong> ：对一组数据进行操作，输入一组数据的集合，返回结果值</p><h2 id="1-基础聚合函数">1 基础聚合函数</h2><p>对一组数据进行操作，输入一组数据的集合，返回结果值——例如：求一组数据的最大值，平均值，个数等</p><h3 id="1-1-AVG-和-SUM-均值和加和">1.1 AVG 和 SUM 均值和加和</h3><p>对于数值型数据：使用 <code>AVG</code> 求这一列数据的平均值；使用 <code>SUM</code> 求这一列数据的加和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(e.salary) &quot;avg_salary&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(e.salary) &quot;sum_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> avg_salary  <span class="operator">|</span> sum_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682243</span> <span class="operator">|</span>  <span class="number">691400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-2-MIN-和-MAX-最小和最大">1.2 MIN 和 MAX 最小和最大</h3><p>对于数值型数据：使用 <code>MIN</code> 求这一列数据的最小值；使用 <code>MAX</code> 求这一列数据的最大值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.salary) &quot;min_salary&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.salary) &quot;max_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="operator">|</span> min_salary <span class="operator">|</span> max_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2100.00</span> <span class="operator">|</span>   <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于日期数据：使用 <code>MIN</code> 求这一列最早的日期；使用 <code>MAX</code> 求这一列最晚的日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.hire_date) &quot;early_salary&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.hire_date) &quot;late_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> early_salary <span class="operator">|</span> late_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span>   <span class="operator">|</span> <span class="number">2000</span><span class="number">-04</span><span class="number">-21</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于字符串数据： <code>MIN</code> 代表这一列在字符表中最早出现； <code>MAX</code> 代表这一列在字符表中最晚出现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.last_name) &quot;A...&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.last_name) &quot;Z...&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> A... <span class="operator">|</span> Z...    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> Abel <span class="operator">|</span> Zlotkey <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>其他的类型均可使用 <code>MIN</code> 和 <code>MAX</code> ，可以自己尝试</p></blockquote><h3 id="1-3-COUNT-返回记录数">1.3 COUNT 返回记录数</h3><p><code>COUNT(*)</code> 返回表中记录总数，适用于任意数据类型，可以理解为对行计数。</p><blockquote><p>可以使用 <code>WHERE</code>增加限制条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;=</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">58</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><code>COUNT(列名)</code> 返回不为空的行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(e.commission_pct) &quot;commission_pct not null&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="keyword">not null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                      <span class="number">35</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><code>COUNT(*)</code> 会统计值为 <code>NULL</code> 的行，而 <code>COUNT(列名)</code> 不会统计此列值为 <code>NULL</code> 的行</p></blockquote><h2 id="2-GROUP-BY-分组查询">2 GROUP BY 分组查询</h2><p><code>GROUP BY</code> 可以依照某些条件/某列对数据进行分组输出</p><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 函数(列名<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件] <span class="comment">-- 可加限制条件</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名];  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><blockquote><p><code>WHERE 条件</code>  一定紧跟表后，无论是 <code>FROM 表名</code> 还是 <code>FROM 表名1 JOIN 表名2 ON ...</code> ，总之 <code>WHERE</code> 一定在表之后</p></blockquote><h3 id="2-1-以单个列为依据分组">2.1 以单个列为依据分组</h3><ul><li>例：按照 employees.department_id 分组，并连接表 departments 查询部门名。</li></ul><p>展示的列新增 <code>department_name</code> 和平均工资 <code>AVG(e.salary)</code> （此处使用格式化输出，保留 2 位小数，并命名为 “avg_salary_dept”）。采用内连接，去除 <code>NULL</code> ，因为我们要查的是切实存在的部门。<code>GROUP BY</code> 指定按照 <code>e.department_id</code> 分组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id, d.department_name, FORMAT(<span class="built_in">AVG</span>(e.salary), <span class="number">2</span>) &quot;avg_salary_dept&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"># <span class="keyword">WHERE</span> e.department_id <span class="operator">!=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id <span class="comment">-- 按照 employees.department_id 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary_dept <span class="keyword">DESC</span>; <span class="comment">-- 按照 avg_salary_dept 列排序</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739253575646.png" alt=""></p><h3 id="2-2-以多个列为依据分组">2.2 以多个列为依据分组</h3><ul><li>例：按 department_id, job_id 分组，并计算 salary</li></ul><p>简单的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id dept_id, e.job_id, <span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"># <span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id; <span class="comment">-- 按照 department_id, job_id 分组 </span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739253597610.png" alt=""></p><p>如果想要展示部门名，和工作职位名，同样可以多表连接，下面这个例子综合使用之前章节的知识：<code>GROUP BY</code> 依据 <code>e.department_id, e.job_id</code> 分组，<code>AVG</code> 函数分组计算平均薪水；<code>JOIN</code> 连接多表，查询 <code>dept_name</code> 和 <code>job_name</code> 字段并展示；<code>WHERE</code> 紧跟表后添加限制条件，<code>REGEXP</code> 使用正则表达寻找字段 <code>d.department_name</code> 以 <code>S</code> 开头的字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id        dept_id,</span><br><span class="line">       d.department_name      dept_name,</span><br><span class="line">       e.job_id,</span><br><span class="line">       j.job_title            job_name,</span><br><span class="line">       FORMAT(<span class="built_in">AVG</span>(salary), <span class="number">2</span>) avg_salary <span class="comment">-- 分组计算平均薪水</span></span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="comment">-- 多表连接，查询 dept_name 和 job_name</span></span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">         <span class="keyword">JOIN</span> jobs j</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id <span class="keyword">AND</span> e.job_id <span class="operator">=</span> j.job_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_name REGEXP <span class="string">&#x27;^S&#x27;</span> <span class="comment">-- 匹配以 S 开头的字符串</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id, e.job_id <span class="comment">-- 按照 e.department_id, e.job_id 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary <span class="keyword">DESC</span>; <span class="comment">-- 根据 avg_salary 降序</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739254720337.png" alt=""></p><h3 id="2-3-WITH-ROLLUP-添加记录">2.3 WITH ROLLUP 添加记录</h3><p>在 <code>GROUP BY</code> 后加上 <code>WITH ROLLUP</code> 会为结果添加一条记录（行数据）。</p><ul><li>分组依据列返回 <code>NULL</code></li><li>被操作的列，会再次操作，以下面代码为例</li></ul><p>当按照 <code>e.department_id</code> 分组且剔除 <code>e.department_id &lt; 30</code> 行数据后，会对计算完新表的 <code>sum_id</code> 和 <code>avg_salary</code> 再进行一次 <code>SUM</code> 和 <code>AVG</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id      id,</span><br><span class="line">       <span class="built_in">SUM</span>(e.department_id) sum_id,</span><br><span class="line">       <span class="built_in">AVG</span>(e.salary)        avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>; <span class="comment">-- 添加一行数据：再进行一次 SUM(sum_id) AVG(avg_salary) 操作</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739255721920.png" alt=""></p><blockquote><p>【注意】分组时选择查询的表一定要保证查询后数量相同</p><p>【注意】<code>WITH ROLLUP</code> 和 <code>ORDER BY</code> 不能同时使用</p><p>【注意】<code>WHERE</code> 可以在查表时进行约束，但不能对 <code>GROUP BY</code> 分组时进行约束</p></blockquote><h2 id="3-GROUP-BY-…-HAVING-有约束的分组">3 GROUP BY … HAVING 有约束的分组</h2><h3 id="3-1-HAVING-使用聚合函数进行限制">3.1 HAVING 使用聚合函数进行限制</h3><p>在行已经被分组后，且保证查询列中使用了聚合函数：则满足 <code>HAVING 条件</code> 子句中条件的分组将被显示。</p><blockquote><p>注意：<code>HAVING</code> 不能单独使用，必须和 <code>GROUP BY</code> 一起使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 函数(列名<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件] <span class="comment">-- 可加限制条件</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line"><span class="keyword">HAVING</span> 条件 <span class="comment">-- 分组的过滤条件</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名];  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>例：按部门分组，返回最大工资。然后查询这些最大工资大于 10000 的部门 id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) &quot;max_larger_than_10000&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> max_larger_than_10000 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>              <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>              <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span>              <span class="number">14000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span>              <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>              <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span>              <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-2-HAVING-和-WHERE">3.2 HAVING 和 WHERE</h3><blockquote><p>【注意】不可使用 <code>WHERE</code> 对聚合函数进行约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) &quot;max_larger_than_10000&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>  <span class="comment">-- WHERE 后不可加聚合函数</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">1111</span> (HY000): Invalid use <span class="keyword">of</span> <span class="keyword">group</span> <span class="keyword">function</span></span><br></pre></td></tr></table></figure><ul><li><code>WHERE</code> 可以直接使用表中的字段作为筛选条件，但不能使用分组中的聚合函数作为筛选条件</li><li><code>HAVING</code> 必须要与 <code>GROUP BY</code>配合使用，可以把分组中的聚合函数和分组字段作为筛选条件</li><li>多表连接时，<code>WHERE</code> 是先筛选后连接，而 <code>HAVING</code> 是先连接后筛选。所以 <code>WHERE</code> 会效率更高</li></ul><h2 id="4-SELECT-语句【总结】">4 SELECT 语句【总结】</h2><h3 id="4-1-查询的常见格式">4.1 查询的常见格式</h3><p>结合之前章节的知识（<a href="https://blog.iskage.online/posts/151eef00.html">SELECT 语句</a>、<a href="https://blog.iskage.online/posts/a7d82995.html">运算符与 SQL 的正则表达式</a>、<a href="https://blog.iskage.online/posts/c8719e79.html">排序与分页：ORDER BY 子句 和 LIMIT 子句</a>、<a href="https://blog.iskage.online/posts/b4103c0f.html">多表查询</a>、<a href="https://blog.iskage.online/posts/35d72c0b.html">单行函数</a>），我们可以总结常见的 <code>SELECT</code> 语句查询格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式1 : 使用 WHERE 连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span>, 表名<span class="number">2</span>, 表名<span class="number">3</span></span><br><span class="line"><span class="keyword">WHERE</span> 多表的连接条件 (不含聚合函数)</span><br><span class="line"><span class="keyword">AND</span> 条件</span><br><span class="line"><span class="keyword">AND</span> 条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件 (可含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT 起始行数, 行数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式2 : 使用 JOIN 连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span> </span><br><span class="line"><span class="keyword">JOIN</span> 表名<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">JOIN</span> 表名<span class="number">3</span></span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件 (不含聚合函数)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件 (可含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT 起始行数, 行数</span><br></pre></td></tr></table></figure><h3 id="4-2-SELECT-语句的执行顺序">4.2 SELECT 语句的执行顺序</h3><ul><li>关键字必须按照</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ... [<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ...]</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT ..., ...</span><br></pre></td></tr></table></figure><ul><li>SQL 实际执行顺序为</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ... [<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ...]</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">DISTINCT</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT ..., ...</span><br></pre></td></tr></table></figure><p>即：先找到表（<em>FROM</em>） ，然后根据条件过滤（<em>WHERE</em>）得到虚拟的一张表，然后分组（<em>GROUP BY</em>），分组后再依照聚合函数或分组依据的列等条件进行过滤（<em>HAVING</em>），最后锁定需要输出的字段/列（<em>SELECT</em>），去除重复行数据（<em>DISTINCT</em>）排序（<em>ORDER BY</em>）分页（<em>LIMIT</em>）输出。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（6）单行函数</title>
      <link href="/posts/35d72c0b.html"/>
      <url>/posts/35d72c0b.html</url>
      
        <content type="html"><![CDATA[<h1>单行函数</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>不同的数据库管理系统 DBMS 的函数使用差异极大，SQL 语言函数的可移植性很差。下面我们介绍的是 SQL 语言的内置函数。</p><p>MySQL 提供的内置函数包括<em>单行函数</em>和<em>聚合函数</em>，这章讲解单行函数。</p><p><strong>单行函数</strong>：对行数据进行操作；输入参数，返回结果；对每行进行操作。</p><h1>1 数值函数</h1><h2 id="1-1-基本数值函数">1.1 基本数值函数</h2><ul><li><code>ABS(x)</code> ：返回 x 的绝对值</li><li><code>SIGN(x)</code> ：返回 x 的符号，正数返回 1 ，负数返回 -1 ， 0 返回 0</li><li><code>PI()</code> ：返回圆周率的值</li><li><code>CEIL(x), CEILING(x)</code> ：返回大于或等于 x 的最小整数</li><li><code>FLOOR(x)</code> ：返回小于或等于 x 的最大整数</li><li><code>LEAST(x1, x2, x3, ...)</code> ：返回列表中的最小值</li><li><code>GREATEST(x1, x2, x3, ...)</code> ：返回列表中的最大值</li><li><code>MOD(x, y)</code> ：返回 x 除以 y 后的余数</li><li><code>RAND()</code> ：返回 0-1 的随机值</li><li><code>RAND(x)</code> ：返回 0-1 的随机值，其中 x 的值用作种子值，相同的X值会产生相同的随机数</li><li><code>ROUND(x)</code> ：返回一个对 x 的值进行四舍五入后，最接近于 x 的整数</li><li><code>ROUND(x, y)</code> ：返回一个对 x 的值进行四舍五入后最接近 x 的值，并保留到小数点后面 y 位</li><li><code>TRUNCATE(x, y)</code> ：返回数字 x 截断为 y 位小数的结果</li><li><code>SQRT(x)</code> ：返回 x 的平方根，当 x 的值为负数时，返回NULL</li><li><code>RADIANS(x)</code> ：将角度转化为弧度，其中参数 x 为角度值</li><li><code>DEGREES(x)</code> ：将弧度转化为角度，其中参数 x 为弧度值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-10</span>),            <span class="comment">-- 10</span></span><br><span class="line">       SIGN(<span class="number">-20</span>),           <span class="comment">-- -1</span></span><br><span class="line">       SIGN(<span class="number">30</span>),            <span class="comment">-- 1</span></span><br><span class="line">       PI(),                <span class="comment">-- 3.141593</span></span><br><span class="line">       <span class="built_in">CEIL</span>(<span class="number">40.2</span>),          <span class="comment">-- 41</span></span><br><span class="line">       <span class="built_in">CEILING</span>(<span class="number">-40.3</span>),      <span class="comment">-- 40</span></span><br><span class="line">       <span class="built_in">FLOOR</span>(<span class="number">50.4</span>),         <span class="comment">-- 50</span></span><br><span class="line">       <span class="built_in">FLOOR</span>(<span class="number">-60.5</span>),        <span class="comment">-- -61</span></span><br><span class="line">       <span class="built_in">MOD</span>(<span class="number">12</span>, <span class="number">5</span>),          <span class="comment">-- 2</span></span><br><span class="line">       RAND(),<span class="comment">-- 0.5452342969786695</span></span><br><span class="line">       RAND(<span class="number">10</span>),            <span class="comment">-- 0.6570515219653505</span></span><br><span class="line">       RAND(<span class="number">10</span>),            <span class="comment">-- 0.6570515219653505</span></span><br><span class="line">       ROUND(<span class="number">12.33</span>),        <span class="comment">-- 12</span></span><br><span class="line">       ROUND(<span class="number">12.348</span>, <span class="number">2</span>),    <span class="comment">-- 12.35</span></span><br><span class="line">       ROUND(<span class="number">12.324</span>, <span class="number">-1</span>),   <span class="comment">-- 10</span></span><br><span class="line">       <span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>, <span class="number">1</span>),  <span class="comment">-- 12.6</span></span><br><span class="line">       <span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>, <span class="number">-1</span>), <span class="comment">-- 10</span></span><br><span class="line">       RADIANS(<span class="number">180</span>),        <span class="comment">-- 3.141592653589793</span></span><br><span class="line">       DEGREES(<span class="number">2</span> <span class="operator">*</span> PI()),   <span class="comment">-- 360</span></span><br><span class="line">       DEGREES(RADIANS(<span class="number">90</span>)); <span class="comment">-- 90</span></span><br></pre></td></tr></table></figure><h2 id="1-2-三角函数">1.2 三角函数</h2><p>以下 x 均为弧度值</p><ul><li><code>SIN(x)</code> ：正弦值</li><li><code>ASIN(x)</code> ：反正弦值，即获取正弦为 x 的弧度，如果 x 的值不在 [-1, 1] ，则返回 NULL</li><li><code>COS(x)</code> ：余弦值</li><li><code>ACOS(x)</code> ：返回 x 的反余弦值，即获取余弦为 x 的弧度，如果 x 的值不在 [-1, 1] ，则返回 NULL</li><li><code>TAN(x)</code> ：正切值</li><li><code>ATAN(x)</code> ：返回 x。的反正切值，即获取正切值为 x 的弧度</li><li><code>ATAN2(m,n)</code> ：返回点 (m, n) 到 (0, 0) 的连线构成的角度的弧度值</li><li><code>COT(x)</code> ：余切值</li></ul><blockquote><p>反三角函数返回的就是角度的弧度值，可以方便的得到角度大小</p></blockquote><p><code>ATAN2(m, n)</code> 函数返回 (m, n) 到 (0, 0) 的连线构成的角度的弧度值。如果使用 <code>ATAN(x)</code> 则会出现报错，例如当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">x=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span> 时，即求点 (1, 0) 到 (0, 0) 的连线构成的角度的弧度值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SIN</span>(RADIANS(<span class="number">30</span>)), <span class="comment">-- sin(π/6) = 0.5</span></span><br><span class="line">       DEGREES(<span class="built_in">ASIN</span>(<span class="number">1</span>)), <span class="comment">-- arcsin(90º) = 1</span></span><br><span class="line">       <span class="built_in">TAN</span>(RADIANS(<span class="number">45</span>)), <span class="comment">-- tan(45º) = tan(π/4) = 1</span></span><br><span class="line">       DEGREES(<span class="built_in">ATAN</span>(<span class="number">1</span>)), <span class="comment">-- arctan(1) = 45º</span></span><br><span class="line">       DEGREES(ATAN2(<span class="number">1</span>, <span class="number">1</span>)); <span class="comment">-- arctan(1) = 45º (1, 1) 与 (0, 0) 的连线角度</span></span><br></pre></td></tr></table></figure><h2 id="1-3-指数与对数">1.3 指数与对数</h2><ul><li><code>POW(x, y), POWER(x, y)</code> ：返回 x 的 y 次方</li><li><code>EXP(X)</code> ：返回 e 的 x 次方，e 为自然对数</li><li><code>LN(x), LOG(x)</code> ：返回以 e 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li><li><code>LOG10(x)</code> ：返回以 10 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li><li><code>LOG2(x)</code> ：返回以 2 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> POW(<span class="number">2</span>, <span class="number">5</span>),  <span class="comment">-- 2^5 = 32</span></span><br><span class="line">       <span class="built_in">POWER</span>(<span class="number">2</span>, <span class="number">4</span>),<span class="comment">-- 2^4 = 16</span></span><br><span class="line">       <span class="built_in">EXP</span>(<span class="number">2</span>),     <span class="comment">-- e^2 = 7.3891</span></span><br><span class="line">       <span class="built_in">LN</span>(<span class="number">10</span>),     <span class="comment">-- ln(10) = 2.303</span></span><br><span class="line">       <span class="built_in">LOG10</span>(<span class="number">10</span>),  <span class="comment">-- log_10(10) = 1</span></span><br><span class="line">       LOG2(<span class="number">4</span>); <span class="comment">-- log_2(2) = 2</span></span><br></pre></td></tr></table></figure><h2 id="1-4-进制转换">1.4 进制转换</h2><ul><li><code>BIN(x)</code> ：返回 x 的二进制编码</li><li><code>HEX(x)</code> ：返回 x 的十六进制编码</li><li><code>OCT(x)</code> ：返回 x 的八进制编码</li><li><code>CONV(x, f1, f2)</code> ：返回 x 从 f1 进制数变成 f2 进制数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">1</span>),  <span class="comment">-- 1</span></span><br><span class="line">       HEX(<span class="number">15</span>), <span class="comment">-- F</span></span><br><span class="line">       OCT(<span class="number">7</span>),  <span class="comment">-- 7</span></span><br><span class="line">       CONV(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>); <span class="comment">-- 1</span></span><br></pre></td></tr></table></figure><h1>2 字符串函数</h1><blockquote><p>MySQL 中，字符串的位置是从 1 开始计数</p></blockquote><ul><li><p><code>ASCII(s)</code> ：返回字符串 s 中的第一个字符的 ASCII 码</p></li><li><p><code>CHAR_LENGTH(s)</code>：返回字符串 <code>s</code> 的字符数，作用与 <code>CHARACTER_LENGTH(s)</code> 相同</p></li><li><p><code>LENGTH(s)</code>：返回字符串 <code>s</code> 的字节数（与字符集有关）</p></li><li><p><code>CONCAT(s1, s2, ..., sn)</code>：将 <code>s1, s2, ..., sn</code> 连接为一个字符串</p></li><li><p><code>CONCAT_WS(x, s1, s2, ..., sn)</code>：用分隔符 <code>x</code> 连接 <code>s1, s2, ..., sn</code>（每个字符串间插入 <code>x</code>）</p></li><li><p><code>INSERT(str, idx, len, replacestr)</code>：从字符串 <code>str</code> 的 <code>idx</code> 位置开始，替换 <code>len</code> 个字符为 <code>replacestr</code></p></li><li><p><code>REPLACE(str, a, b)</code>：将字符串 <code>str</code> 中所有子串 <code>a</code> 替换为 <code>b</code></p></li><li><p><code>UPPER(s)</code> 或 <code>UCASE(s)</code>：将字符串 <code>s</code> 全部转为大写</p></li><li><p><code>LOWER(s)</code> 或 <code>LCASE(s)</code>：将字符串 <code>s</code> 全部转为小写</p></li><li><p><code>LEFT(str, n)</code>：返回字符串 <code>str</code> 最左侧的 <code>n</code> 个字符</p></li><li><p><code>RIGHT(str, n)</code>：返回字符串 <code>str</code> 最右侧的 <code>n</code> 个字符</p></li><li><p><code>LPAD(str, len, pad)</code>：用 <code>pad</code> 从左侧填充 <code>str</code>，直到总长度为 <code>len</code></p></li><li><p><code>RPAD(str, len, pad)</code>：用 <code>pad</code> 从右侧填充 <code>str</code>，直到总长度为 <code>len</code></p></li><li><p><code>LTRIM(s)</code>：去掉字符串 <code>s</code> 左侧的空格</p></li><li><p><code>RTRIM(s)</code>：去掉字符串 <code>s</code> 右侧的空格</p></li><li><p><code>TRIM(s)</code>：去掉字符串 <code>s</code> 开头和结尾的空格</p></li><li><p><code>TRIM(s1 FROM s)</code>：去掉字符串 <code>s</code> 开头和结尾的 <code>s1</code></p></li><li><p><code>TRIM(LEADING s1 FROM s)</code>：去掉字符串 <code>s</code> 开头的 <code>s1</code></p></li><li><p><code>TRIM(TRAILING s1 FROM s)</code>：去掉字符串 <code>s</code> 结尾的 <code>s1</code></p></li><li><p><code>REPEAT(str, n)</code>：返回 <code>str</code> 重复 <code>n</code> 次的结果</p></li><li><p><code>SPACE(n)</code>：返回由 <code>n</code> 个空格组成的字符串</p></li><li><p><code>STRCMP(s1, s2)</code>：比较字符串 <code>s1</code> 和 <code>s2</code> 的 ASCII 码值大小</p></li><li><p><code>SUBSTR(s, index, len)</code>：从 <code>s</code> 的 <code>index</code> 位置截取 <code>len</code> 个字符，作用同 <code>SUBSTRING(s, n, len)</code> 和 <code>MID(s, n, len)</code></p></li><li><p><code>LOCATE(substr, str)</code>：返回 <code>substr</code> 在 <code>str</code> 中首次出现的位置，作用同 <code>POSITION(substr IN str)</code> 和 <code>INSTR(str, substr)</code>（未找到返回 <code>0</code>）</p></li><li><p><code>ELT(m, s1, s2, ..., sn)</code>：返回第 <code>m</code> 个字符串（如 <code>m=1</code> 返回 <code>s1</code>）</p></li><li><p><code>FIELD(s, s1, s2, ..., sn)</code>：返回 <code>s</code> 在列表 <code>s1, s2, ..., sn</code> 中第一次出现的位置</p></li><li><p><code>FIND_IN_SET(s1, s2)</code>：返回 <code>s1</code> 在逗号分隔的字符串 <code>s2</code> 中的位置</p></li><li><p><code>REVERSE(s)</code>：返回 <code>s</code> 反转后的字符串</p></li><li><p><code>NULLIF(value1, value2)</code>：若 <code>value1</code> 与 <code>value2</code> 相等则返回 <code>NULL</code>，否则返回 <code>value1</code></p></li></ul><p>例：<code>FIND_IN_SET(s1, s2)</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIELD(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;msm&#x27;</span>, <span class="string">&#x27;amma&#x27;</span>), <span class="comment">-- 0 : 因为 mm 没有出现在字符串列表中</span></span><br><span class="line">       FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello,mm,amma&#x27;</span>); <span class="comment">-- 2 : 出现在第 2 个，从 1 开始计数</span></span><br></pre></td></tr></table></figure><blockquote><p><code>FIND_IN_SET(s1, s2)</code>：返回 <code>s1</code> 在逗号分隔的字符串 <code>s2</code> 中的位置。<code>s2</code> 是里的元素只能以逗号为间隔</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello,mm,amma&#x27;</span>), <span class="comment">-- 2 : 出现在第 2 个，从 1 开始计数</span></span><br><span class="line">       FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello, mm, amma&#x27;</span>); <span class="comment">-- 0 : 因为出现了空格，此时第 2 个是 &#x27;mm &#x27;</span></span><br></pre></td></tr></table></figure><p>例：<code>NULLIF()</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">NULLIF</span>(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>),  <span class="comment">-- 相同返回 NULL</span></span><br><span class="line">       <span class="built_in">NULLIF</span>(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;sql&#x27;</span>);  <span class="comment">-- 不同返回第一个值 mysql</span></span><br></pre></td></tr></table></figure><h1>3 日期和时间函数</h1><h2 id="3-1-获取日期和时间">3.1 获取日期和时间</h2><ul><li><p><code>CURDATE(), CURRENT_DATE()</code> ：返回当前日期，只包含年、月、日</p></li><li><p><code>CURTIME(), CURRENT_TIME()</code> ：返回当前时间，只包含时、分、秒</p></li><li><p><code>NOW()</code> <code>SYSDATE()</code> <code>CURRENT_TIMESTAMP()</code> <code>LOCALTIME()</code> <code>LOCALTIMESTAMP()</code> ：返回当前系统日期和时间</p></li><li><p><code>UTC_DATE()</code> ：返回 UTC（世界标准时间）日期</p></li><li><p><code>UTC_TIME()</code> ：返回UTC（世界标准时间）时间</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURDATE(),        <span class="comment">-- 2025-02-10</span></span><br><span class="line">       CURTIME(),        <span class="comment">-- 18:15:16</span></span><br><span class="line">       NOW(),            <span class="comment">-- 2025-02-10 18:15:16</span></span><br><span class="line">       <span class="built_in">LOCALTIMESTAMP</span>(), <span class="comment">-- 2025-02-10 18:15:16</span></span><br><span class="line">       UTC_DATE(),       <span class="comment">-- 2025-02-10</span></span><br><span class="line">       UTC_TIME(); <span class="comment">-- 10:15:16</span></span><br></pre></td></tr></table></figure><h2 id="3-2-日期与时间戳的转换">3.2 日期与时间戳的转换</h2><ul><li><code>UNIX_TIMESTAMP()</code> ：以 UNIX 时间戳的形式返回当前时间</li><li><code>UNIX_TIMESTAMP(date)</code> ：将时间 date 以 UNIX 时间戳的形式返回</li><li><code>FROM_UNIXTIME(timestamp)</code> ：将 UNIX 时间戳的时间转换为普通格式的时间</li></ul><blockquote><p>UNIX 时间戳（UNIX Timestamp）是指从 1970 年 1 月 1 日 00:00:00 UTC（协调世界时）开始所经过的秒数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP(now()),                 <span class="comment">-- 1739182869 精确到时分秒</span></span><br><span class="line">       UNIX_TIMESTAMP(CURTIME()),             <span class="comment">-- 1739182869 与第一个相同</span></span><br><span class="line">       UNIX_TIMESTAMP(CURDATE()),             <span class="comment">-- 1739116800 日期转时间戳</span></span><br><span class="line">       UNIX_TIMESTAMP(<span class="string">&#x27;2011-11-11 11:11:11&#x27;</span>), <span class="comment">-- 特定日期时间</span></span><br><span class="line">       FROM_UNIXTIME(<span class="number">1739182869</span>); <span class="comment">-- 2025-02-10 18:21:09</span></span><br></pre></td></tr></table></figure><h2 id="3-3-获取月份、星期、星期数、天数等">3.3 获取月份、星期、星期数、天数等</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739183106529.png" alt=""></p><h2 id="3-4-日期的操作函数">3.4 日期的操作函数</h2><ul><li><code>EXTRACT(type FROM date)</code> ：返回指定日期中特定的部分，type 指定返回的值</li></ul><p>具体的 type 类型可以自行查询</p><h2 id="3-5-日期的格式化与解析">3.5 日期的格式化与解析</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 格式化输出</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%M-%D-%W %H:%i:%s&#x27;</span>);</span><br><span class="line"><span class="comment">-- 2025-February-10th-Monday 18:30:58</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 解析为标准日期形式</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;09/01/2009&#x27;</span>, <span class="string">&#x27;%m/%d/%Y&#x27;</span>),</span><br><span class="line">       STR_TO_DATE(<span class="string">&#x27;20140422154706&#x27;</span>, <span class="string">&#x27;%Y%m%d%H%i%s&#x27;</span>),</span><br><span class="line">       STR_TO_DATE(<span class="string">&#x27;2014-04-22 15:47:06&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure><h1>4 流程控制函数【重要】</h1><p>根据不同的条件，执行不同的处理流程，类似于其他语言中的 <code>if</code> <code>for</code> <code>while</code></p><h2 id="4-1-IF-函数">4.1 <code>IF()</code> 函数</h2><ul><li><code>IF(value, value1, value2)</code> ：如果 <code>value</code> 的值为 <code>TRUE</code> ，返回 <code>value1</code>，否则返回 <code>value2</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(<span class="literal">TRUE</span>, <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>);  <span class="comment">-- &#x27;value1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-IFNULL-value1-value2-函数">4.2 <code>IFNULL(value1, value2)</code> 函数</h2><ul><li><code>IFNULL(value1, value2)</code> ：如果 <code>value1</code> 不为 <code>NULL</code>，返回 <code>value1</code>，否则返回 <code>value2</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IFNULL(<span class="keyword">NULL</span>, <span class="string">&#x27;value2&#x27;</span>); <span class="comment">-- NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> IFNULL(<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>); <span class="comment">-- &#x27;value1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-按条件返回结果">4.3 按条件返回结果</h2><ul><li><code>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 [ELSE 结果3] END 列名</code> ：如果 <code>条件1</code> 成立，则返回 <code>结果1</code> ；如果 <code>条件2</code> 成立，则返回 <code>结果2</code> ；如果 <code>条件3</code> 成立，则返回 <code>结果3</code></li></ul><p>格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>,</span><br><span class="line">       列名<span class="number">2</span>,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">3</span> <span class="keyword">THEN</span> 结果<span class="number">3</span></span><br><span class="line">           <span class="keyword">ELSE</span> 结果<span class="number">4</span> </span><br><span class="line">           <span class="keyword">END</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>例如：按照 <code>salary</code> 给员工增加一个字段 <code>&quot;level of salary&quot;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       salary,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;high&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;average&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">8000</span> <span class="keyword">THEN</span> <span class="string">&#x27;low&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;too low&#x27;</span> </span><br><span class="line">           <span class="keyword">END</span> &quot;level of salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739188034628.png" alt=""></p><h2 id="4-4-按数值返回结果">4.4 按数值返回结果</h2><ul><li><code>CASE 列名1 WHEN num1 THEN 结果1 WHEN num2 THEN 结果2 ELSE 结果3 END 列名2</code> ：如果 <code>列名1</code> 这行的值等于 <code>num1</code> 则返回 <code>结果1</code> ；若这行的值等于 <code>num2</code> 则返回 <code>结果2</code> ；否则返回 <code>结果3</code> ，最终存入 <code>列名2</code></li></ul><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>,</span><br><span class="line">       列名<span class="number">2</span>,</span><br><span class="line">       <span class="keyword">CASE</span> 列名<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> 结果<span class="number">3</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> 结果<span class="number">4</span></span><br><span class="line">           <span class="keyword">ELSE</span> 结果<span class="number">5</span> </span><br><span class="line">           <span class="keyword">END</span> 新列名</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>例如：按照 <code>region_id</code> 填充 <code>region_name</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：多表连接</span></span><br><span class="line"><span class="keyword">SELECT</span> c.country_name,</span><br><span class="line">       c.region_id,</span><br><span class="line">       r.region_name</span><br><span class="line"><span class="keyword">FROM</span> countries <span class="keyword">AS</span> c</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> regions <span class="keyword">as</span> r</span><br><span class="line">                   <span class="keyword">ON</span> c.region_id <span class="operator">=</span> r.region_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：按数值返回结果 CASE WHEN THEN</span></span><br><span class="line"><span class="keyword">SELECT</span> c.country_name,</span><br><span class="line">       c.region_id,</span><br><span class="line">       <span class="keyword">CASE</span> c.region_id</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;Europe&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;Americas&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">&#x27;Asia&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> <span class="string">&#x27;Middle East and Africa&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;Not find&#x27;</span> </span><br><span class="line">           <span class="keyword">END</span> &quot;region name&quot;</span><br><span class="line"><span class="keyword">FROM</span> countries <span class="keyword">AS</span> c;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739189297048.png" alt=""></p><h2 id="4-5-一些练习">4.5 一些练习</h2><ul><li>计算年工资，考虑到奖金</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       <span class="number">12</span> <span class="operator">*</span> salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> IFNULL(commission_pct, <span class="number">0</span>)) <span class="keyword">AS</span> &quot;annual salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>按照职位调整薪水，同时补充职位全程</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name,</span><br><span class="line">       e.job_id,</span><br><span class="line">       e.salary,</span><br><span class="line">       j.job_title,</span><br><span class="line">       <span class="keyword">CASE</span> e.job_id</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;IT_PROG&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.10</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;ST_CLERK&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.15</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;SA_REP&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.20</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">ELSE</span> salary</span><br><span class="line">           <span class="keyword">END</span> &quot;REVISED_SALARY&quot; <span class="comment">-- 按照职位调整薪水</span></span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> jobs <span class="keyword">AS</span> j</span><br><span class="line">                   <span class="keyword">ON</span> e.job_id <span class="operator">=</span> j.job_id; <span class="comment">-- 补充职位全程，多表连接</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739189717705.png" alt=""></p><h1>5 加密与解密函数【数据库安全】</h1><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739190256675.png" alt=""></p><blockquote><p>因为安全性问题，在 <code>MySQL 8.0</code> 版本后 <code>PASSWORD(str)</code> <code>ENCODE()</code> <code>DECODE()</code> 函数均被移除</p></blockquote><h2 id="5-1-MD5-和-SHA-加密">5.1 MD5 和 SHA 加密</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MD5(<span class="string">&#x27;mysql&#x27;</span>) <span class="keyword">AS</span> &quot;md5 key&quot;; <span class="comment">-- 81c3b080dad537de7e10e0987a4bf52e</span></span><br><span class="line"><span class="keyword">SELECT</span> SHA(<span class="string">&#x27;mysql&#x27;</span>) <span class="keyword">AS</span> &quot;sha key&quot;; <span class="comment">-- f460c882a18c1304d88854e902e11b85d71e7e1b</span></span><br></pre></td></tr></table></figure><h2 id="5-2-加密和解密">5.2 加密和解密</h2><p>使用 <code>AES_ENCRYPT()</code> 和 <code>AES_DECRYPT()</code> 函数实现 <code>ENCODE</code> 和 <code>DECODE</code> 功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> encrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> encrypted_data                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x0F46E6F2FE63CD819E2AD70B1919B9C5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> AES_DECRYPT(AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>), <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> decrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> decrypted_data                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x6D7973716C</span>                   <span class="operator">|</span>  <span class="comment">-- &#x27;mysql&#x27; 的十六进制</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">CAST</span>(AES_DECRYPT(AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>), <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> <span class="type">CHAR</span>) <span class="keyword">AS</span> decrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> decrypted_data <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> mysql          <span class="operator">|</span>  <span class="comment">-- CAST() 函数转格式</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>容易得知，<code>AES_ENCRYPT</code> <code>AES_DECRYPT</code> 互为反函数</p></blockquote><h1>6 获取 MySQL 相关信息</h1><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739190639244.png" alt=""></p><ul><li>MySQL 版本号</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> VERSION();</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> VERSION() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8.0</span><span class="number">.31</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>当前数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> DATABASE() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> dbtest1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>当前连接 MySQL 的用户名，返回结果格式为 <code>&quot;主机名@用户名&quot;</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">USER</span>(), <span class="built_in">CURRENT_USER</span>(), <span class="built_in">SYSTEM_USER</span>(), <span class="built_in">SESSION_USER</span>();</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">USER</span>()         <span class="operator">|</span> <span class="built_in">CURRENT_USER</span>() <span class="operator">|</span> <span class="built_in">SYSTEM_USER</span>()  <span class="operator">|</span> <span class="built_in">SESSION_USER</span>() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>字符集和比较规则</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CHARSET(<span class="string">&#x27;ABC&#x27;</span>), <span class="keyword">COLLATION</span>(<span class="string">&#x27;ABC&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> CHARSET(<span class="string">&#x27;ABC&#x27;</span>) <span class="operator">|</span> <span class="keyword">COLLATION</span>(<span class="string">&#x27;ABC&#x27;</span>)   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> utf8mb4        <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1>7 其他函数</h1><ul><li>格式化输出</li></ul><p><code>FORMAT(value, n)</code> ：返回对数字 <code>value</code> 进行格式化后的结果数据，<code>n</code>表示四舍五入保留到小数点后 <code>n</code> 位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- n &lt;= 0 均表示保留整数</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> FORMAT(<span class="number">1.124</span>, <span class="number">2</span>), FORMAT(<span class="number">10.523</span>, <span class="number">0</span>), FORMAT(<span class="number">100.123</span>, <span class="number">-2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> FORMAT(<span class="number">1.124</span>, <span class="number">2</span>) <span class="operator">|</span> FORMAT(<span class="number">10.523</span>, <span class="number">0</span>) <span class="operator">|</span> FORMAT(<span class="number">100.123</span>, <span class="number">-2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1.12</span>             <span class="operator">|</span> <span class="number">11</span>                <span class="operator">|</span> <span class="number">100</span>                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>IP 转换</li></ul><p><code>INET_ATON(ipvalue)</code> ：将以点分隔的IP地址转化为一个数字</p><p><code>INET_NTOA(value)</code> ：将数字形式的IP地址转化为以点分隔的IP地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> INET_ATON(<span class="string">&#x27;192.168.1.100&#x27;</span>) &quot;IP - Num&quot;, INET_NTOA(<span class="number">3232235876</span>) &quot;Num - IP&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> IP <span class="operator">-</span> Num   <span class="operator">|</span> Num <span class="operator">-</span> IP      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3232235876</span> <span class="operator">|</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># IP 按照 <span class="number">256</span> 进制计算: <span class="number">192</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">3</span> <span class="operator">+</span> <span class="number">168</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">1</span> <span class="operator">+</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>重复执行</li></ul><p><code>BENCHMARK(n,expr)</code> ：将表达式 <code>expr</code> 重复执行n次。用于测试 MySQL 处理 <code>expr</code> 表达式所耗费的时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BENCHMARK(<span class="number">1000000</span>, MD5(<span class="string">&#x27;mysql&#x27;</span>)) &quot;Once&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> Once <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.25</span> sec) <span class="comment">-- 0.25 sec</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BENCHMARK(<span class="number">10000000</span>, MD5(<span class="string">&#x27;mysql&#x27;</span>)) &quot;Many times&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> Many times <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">2.32</span> sec) <span class="comment">-- 2.32 sec</span></span><br></pre></td></tr></table></figure><ul><li>修改编码方式</li></ul><p><code>CONVERT(value USING char_code)</code> ：将 <code>value</code> 所使用的字符编码修改为 <code>char_code</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CHARSET(<span class="string">&#x27;mysql&#x27;</span>) &quot;Origin&quot;, CHARSET(<span class="keyword">CONVERT</span>(<span class="string">&#x27;mysql&#x27;</span> <span class="keyword">USING</span> <span class="string">&#x27;utf8&#x27;</span>)) &quot;Convert to utf8&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> Origin  <span class="operator">|</span> <span class="keyword">Convert</span> <span class="keyword">to</span> utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> utf8mb4 <span class="operator">|</span> utf8mb3         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（3）：利用 torch.nn 便捷搭建神经网络</title>
      <link href="/posts/e6c3766c.html"/>
      <url>/posts/e6c3766c.html</url>
      
        <content type="html"><![CDATA[<p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的结构和功能，关注实践，理论较少。</p><p><code>nn</code> 模块是 Pytorch 提供的神经网络模块，可以快速便捷地搭建神经网络或神经网络里的各个层（layer）。</p><h1>1 利用 nn.Module 实现全连接层和多层感知机</h1><p>在实际应用中，我们往往继承类 <code>torch.nn.Module</code> ，然后便携自己的网络层。下面以实现全连接层作为简单引入。</p><h2 id="1-1-全连接层">1.1 全连接层</h2><p>全连接层可以简单理解为一个线性层，它接受输入的张量 <code>x.shape = (?, in_features)</code> 并返回结果 <code>y.shape = (?, out_features)</code> ，利用的就是简单的线性组合。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = W x + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mtext>in_features</mtext><mo>×</mo><mtext>out_features</mtext></mrow></msup></mrow><annotation encoding="application/x-tex">W \in \R^{\text{in\_features}\times\text{out\_features}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">in_features</span></span><span class="mbin mtight">×</span><span class="mord text mtight"><span class="mord mtight">out_features</span></span></span></span></span></span></span></span></span></span></span></span></span> 而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mtext>out_features</mtext></msup></mrow><annotation encoding="application/x-tex">b \in \R^{\text{out\_features}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">out_features</span></span></span></span></span></span></span></span></span></span></span></span></span>。</p><blockquote><p>注意：此处的乘是类似矩阵乘法，而【不是逐元素相乘】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 定义线性层 Linear 用来计算 y = W x + b &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linear</span>(nn.Module):  <span class="comment"># 继承 nn.Module</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, out_features</span>):</span><br><span class="line">        <span class="comment"># in_features 输入的形状，out_features 输出的形状</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()  <span class="comment"># 等价于 nn.Module.__init__(self)</span></span><br><span class="line">        <span class="comment"># nn.Parameter 指定需要网络学习的参数</span></span><br><span class="line">        <span class="variable language_">self</span>.W = nn.Parameter(torch.randn(in_features, out_features))</span><br><span class="line">        <span class="variable language_">self</span>.b = nn.Parameter(torch.randn(out_features))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 计算 y = xW + b : 利用了广播机制，b 会复制成 y 一般大小，即 (out_features,)</span></span><br><span class="line">        y = x @ <span class="variable language_">self</span>.W + <span class="variable language_">self</span>.b  <span class="comment"># @ 代表矩阵乘法</span></span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><ul><li>需要使用 <code>super()</code> 方法调用父类的 <code>__init__()</code> 方法。或者直接使用 <code>nn.Module.__init__(self)</code></li><li>注意在定义自己的 <code>__init__()</code> 时，需要声明参数。例如这里的 <code>in_features</code> 和 <code>out_features</code></li><li><code>in_features</code> 和 <code>out_features</code> 指定输入输出的形状</li><li><code>nn.Parameter()</code> 指定网络需要学习的参数，用来告诉网络之后需要更新的对象</li><li>注意参数的形状，需要满足 <code>(?, in_features) @ (in_features, out_features) -&gt; (?, out_features)</code> 这类似矩阵乘法，不过此处是张量</li></ul><p>调用上述定义的线性层/全连接层，检查维度是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用上述定义的线性层/全连接层，检查维度</span></span><br><span class="line">linear_layer = Linear(in_features=<span class="number">4</span>, out_features=<span class="number">3</span>)</span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">outputs = linear_layer(inputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 3]) : (2, 4) @ (4, 3) -&gt; (2, 3)</span></span><br></pre></td></tr></table></figure><p>使用 <code>.named_parameters()</code> 方法检查参数 <code>W, b</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, parameter <span class="keyword">in</span> linear_layer.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. It is parameter: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2.&quot;</span>, parameter)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3. The shape is: &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(parameter.shape))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上述检查参数的返回结果</span></span><br><span class="line">[Out]:  <span class="number">1.</span> It <span class="keyword">is</span> parameter: W</span><br><span class="line">        <span class="number">2.</span> Parameter containing:</span><br><span class="line">        tensor([[ <span class="number">1.1711</span>,  <span class="number">0.4335</span>, -<span class="number">1.7343</span>],</span><br><span class="line">                [-<span class="number">1.3360</span>,  <span class="number">0.8871</span>,  <span class="number">0.7680</span>],</span><br><span class="line">                [ <span class="number">0.0571</span>,  <span class="number">0.2240</span>,  <span class="number">0.5520</span>],</span><br><span class="line">                [-<span class="number">0.5788</span>,  <span class="number">0.0177</span>,  <span class="number">0.1318</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">        <span class="number">3.</span> The shape <span class="keyword">is</span>: torch.Size([<span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        <span class="number">1.</span> It <span class="keyword">is</span> parameter: b</span><br><span class="line">        <span class="number">2.</span> Parameter containing:</span><br><span class="line">        tensor([ <span class="number">1.0198</span>, -<span class="number">0.4468</span>,  <span class="number">0.4520</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">        <span class="number">3.</span> The shape <span class="keyword">is</span>: torch.Size([<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="1-2-多层感知机">1.2 多层感知机</h2><p>由多个线性层/全连接层通过某些激活函数构成的网络，称为多层感知机。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739156093597.png" alt=""></p><p>根据上图的网络结构搭建多层感知机：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiPerceptron</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, hidden_features, out_features</span>):</span><br><span class="line">        <span class="comment"># 新增参数：隐藏层神经元个数（形状）</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 直接使用之前定义的线性层/全连接层 Linear</span></span><br><span class="line">        <span class="variable language_">self</span>.layer1 = Linear(in_features, hidden_features) </span><br><span class="line">        <span class="variable language_">self</span>.layer2 = Linear(hidden_features, out_features)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.layer1(x)</span><br><span class="line">        x = torch.sigmoid(x)  <span class="comment"># 使用激活函数，增加非线性因素（此处是逐个元素计算）</span></span><br><span class="line">        y = <span class="variable language_">self</span>.layer2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><ul><li>之前定义的层 Layer 可以在后续重复使用</li><li>注意传入参数，用以确认形状</li></ul><p>调用上述定义的多层感知机，检查维度是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查维度</span></span><br><span class="line">mlp = MultiPerceptron(<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">outputs = mlp(inputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 1]) ： (2, 3) @ (3, 4) @ (4, 1) -&gt; (2, 1)</span></span><br></pre></td></tr></table></figure><p>检查参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查参数</span></span><br><span class="line"><span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(name, param.size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># layer1.W torch.Size([3, 4])</span></span><br><span class="line"><span class="comment"># layer1.b torch.Size([4])</span></span><br><span class="line"><span class="comment"># layer2.W torch.Size([4, 1])</span></span><br><span class="line"><span class="comment"># layer2.b torch.Size([1])</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意输入形状】输入的形状一般为 <code>(?, in_features)</code> 其中 <code>?</code> 一般为 <code>batch_size</code> 即样本集个数。</p><p>当输入单一数据时，即只输入一个样本时，需要扩展维度，利用<a href="https://blog.iskage.online/posts/652f5539.html#8-3-%E7%BB%B4%E5%BA%A6%E5%8E%8B%E7%BC%A9%E3%80%81%E6%89%A9%E5%B1%95%E3%80%81%E6%8B%BC%E6%8E%A5-squeeze-unsqueeze-cat">第一章</a>介绍的 <code>unsqueeze()</code> 函数。向前扩展一个维度 <code>tensor.unsqueeze(0)</code> ，例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># batch_size = 1</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>)</span><br><span class="line">x.unsqueeze_(<span class="number">0</span>)  <span class="comment"># 需要向前扩展 1 个维度 （`_` 表示 inplace 操作，直接替换 x）</span></span><br><span class="line">y = mlp(x)</span><br><span class="line"><span class="built_in">print</span>(y.shape)  <span class="comment"># 正确 torch.Size([1, 1])</span></span><br></pre></td></tr></table></figure><p>总结：Pytorch 的 nn 封装了非常多网络层，可以直接前往<a href="https://pytorch.org/docs/stable/nn.html">官方文档</a>查看。下面介绍常见的网络层。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739157306136.png" alt=""></p><h1>2 常见神经网络层</h1><h2 id="2-1-以图像处理为例">2.1 以图像处理为例</h2><p>图像相关层主要包括：卷积层 <code>Conv</code>、池化层 <code>Pool</code> 等。往往还有不同维度图像处理的分类，同时池化方法也有最大池化、均值池化等。</p><blockquote><p>建议先学习卷积的原理，参考课程</p><p>中文，更专业：b站 <a href="https://www.bilibili.com/video/BV1L64y1m7Nh/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【19 卷积层【动手学深度学习v2】】</a></p><p>中文，更易懂：b站 <a href="https://www.bilibili.com/video/BV1K7411W7So/?p=5&amp;share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【【子豪兄】精讲CS231N斯坦福计算机视觉公开课（2020最新）】</a></p><p>英文，更专业：<a href="https://cs231n.stanford.edu/">cs231n</a></p></blockquote><h3 id="2-1-1-卷积层">2.1.1 卷积层</h3><p>图像处理相关的神经网络层，最最重要的就是卷积层。以 <code>Conv2d</code> 为例，介绍里面的参数和使用方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias, padding_mode)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_channels: 输入</span></span><br><span class="line">- in_channels (<span class="built_in">int</span>) – 图片的通道数，例如RGB图片就是 <span class="number">3</span> 通道，灰度图只有 <span class="number">1</span> 通道</span><br><span class="line"></span><br><span class="line"><span class="comment"># out_channels: 输出</span></span><br><span class="line">- out_channels (<span class="built_in">int</span>) – 输出结果的通道数</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel_size: 卷积核的大小</span></span><br><span class="line">- kernel_size (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>) – 卷积核的大小，只需输入T 则会自动生成一个 (T, T, channels) 大小的卷积核</span><br><span class="line"></span><br><span class="line"><span class="comment"># stride: 步数</span></span><br><span class="line">- stride (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 卷积核每次移动的步数，默认为 <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding: 填充层数</span></span><br><span class="line">- padding (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 填充层数，用以维持图片大小的参数，默认为 <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># padding_mode: 填充方式</span></span><br><span class="line">- padding_mode (string, optional) – 填充方式，一般默认即可，有 <span class="string">&#x27;zeros&#x27;</span>, <span class="string">&#x27;reflect&#x27;</span>, <span class="string">&#x27;replicate&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;circular&#x27;</span> 多种选择，默认为 <span class="string">&#x27;zeros&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dilation: 卷积核中元素的对应位置</span></span><br><span class="line">- dilation (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 默认为 <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># groups: 可选</span></span><br><span class="line">- groups (<span class="built_in">int</span>, optional) – Number of blocked connections <span class="keyword">from</span> <span class="built_in">input</span> channels to output channels. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bias: 可选</span></span><br><span class="line">- bias (<span class="built_in">bool</span>, optional) – 是否增加偏倚项，默认为 <span class="literal">True</span> : If <span class="literal">True</span>, adds a learnable bias to the output. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>如果希望卷积后，通道变多，但尺寸不变，则需要填充 <code>padding</code> ，公式</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><p>卷积过程的动画展示可参考 <a href="https://github.com/vdumoulin/conv_arithmetic">https://github.com/vdumoulin/conv_arithmetic</a></p><p>原理简单理解【卷积】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88101819072.png" alt=""></p><p>原理简单理解【padding】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102514146.png" alt=""></p><h3 id="2-1-2-代码：使用卷积层">2.1.2 代码：使用卷积层</h3><p>导入库，进行图片处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor, ToPILImage</span><br><span class="line"></span><br><span class="line">to_tensor = ToTensor()  <span class="comment"># img -&gt; Tensor</span></span><br><span class="line">to_pil = ToPILImage()  <span class="comment"># Tensor -&gt; PIL</span></span><br></pre></td></tr></table></figure><p>选择一张图片（图源网络）点此下载 <a href="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena.png">lena’s photo</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example = Image.<span class="built_in">open</span>(<span class="string">&#x27;imgs/lena.png&#x27;</span>)</span><br><span class="line">example <span class="comment"># 可视化输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena.png" alt="lena"></p><p>查看输入图片形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example = to_tensor(example).unsqueeze(<span class="number">0</span>)  <span class="comment"># 补充 batch_size</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Input Size:&quot;</span>,example.size()) <span class="comment"># 查看 input 维度</span></span><br><span class="line"><span class="comment"># Input Size: torch.Size([1, 1, 200, 200])</span></span><br></pre></td></tr></table></figure><p>查看卷积后输出图片形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conv = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">1</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">out = conv(example)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Output Size:&quot;</span>,out.size())</span><br><span class="line"><span class="comment"># Output Size: torch.Size([1, 1, 198, 198])</span></span><br><span class="line"><span class="comment"># 198 = (200 + 2 * 0 - 3 )/1 + 1 = 198</span></span><br></pre></td></tr></table></figure><p>以图片形式输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>))  <span class="comment"># 去除 batch_size 转换为图片输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_conv.png" alt="lena_conv"></p><blockquote><p>拓展：指定卷积核</p></blockquote><p>指定卷积核可以达到不同的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拓展：指定卷积核</span></span><br><span class="line">kernel = torch.tensor([</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>],</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>],</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>]</span><br><span class="line">], dtype=torch.float32)  <span class="comment"># 提取竖直边缘特征</span></span><br><span class="line"></span><br><span class="line">conv = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>)</span><br><span class="line">conv.weight.data = kernel.view(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># (batch_size, in_channels, height, width)</span></span><br><span class="line"></span><br><span class="line">out = conv(example)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Output Size:&quot;</span>, out.size())  <span class="comment"># torch.Size([1, 1, 198, 198])</span></span><br><span class="line"></span><br><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>))  <span class="comment"># 去除 batch_size 转换为图片输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_kernel.png" alt="lena_conv_with_certain_kernel"></p><h3 id="2-1-3-池化层">2.1.3 池化层</h3><p>池化层模糊选取某些特征，某些意义上可以防止过拟合。以最大池化为例，他选取范围内最大值替换整个范围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.MaxPool2d(kernel_size, stride=<span class="literal">None</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, return_indices=<span class="literal">False</span>, ceil_mode=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取最大值的窗口</span></span><br><span class="line">- kernel_size – the size of the window to take a <span class="built_in">max</span> over</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向纵向的步长，default = kernel_size</span></span><br><span class="line">- stride – the stride of the window. Default value <span class="keyword">is</span> kernel_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充图像边缘</span></span><br><span class="line">- padding – implicit zero padding to be added on both sides</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空洞</span></span><br><span class="line">- dilation – a parameter that controls the stride of elements <span class="keyword">in</span> the window</span><br><span class="line"></span><br><span class="line">- return_indices – <span class="keyword">if</span> <span class="literal">True</span>, will <span class="keyword">return</span> the <span class="built_in">max</span> indices along <span class="keyword">with</span> the outputs. Useful <span class="keyword">for</span> torch.nn.MaxUnpool2d later</span><br><span class="line"></span><br><span class="line"><span class="comment"># floor向下取整 ceil向上取整，例如ceil_mode = True，保留超出部分</span></span><br><span class="line">- ceil_mode – when <span class="literal">True</span>, will use ceil instead of floor to compute the output shape</span><br></pre></td></tr></table></figure><p>结合下图例理解最大池化原理</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8832249522.png" alt=""></p><p>代码实现上述案例，进行验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"></span><br><span class="line">inputs = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 batch_size，1 通道，5x5 大小，-1 表示自动计算</span></span><br><span class="line">inputs = torch.reshape(inputs, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line">max_pool = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">output = max_pool(inputs)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Out]: tensor([[[[<span class="number">3.</span>, <span class="number">2.</span>],</span><br><span class="line">                 [<span class="number">5.</span>, <span class="number">1.</span>]]]])  <span class="comment"># 确实与手算结果相同</span></span><br></pre></td></tr></table></figure><blockquote><p>根据池化原理，只是做了简单的取值替换，故【没有可学习的参数】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(max_pool.parameters())</span><br><span class="line">[Out]: []</span><br></pre></td></tr></table></figure><h3 id="2-1-4-代码：使用池化层">2.1.4 代码：使用池化层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out = max_pool(example)</span><br><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>)) <span class="comment"># 输出池化后的lena</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_pool.png" alt="lena_max_pool"></p><p>容易发现，经过最大池化后，图片变小，变模糊。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out.shape</span><br><span class="line"><span class="comment"># torch.Size([1, 1, 67, 67])</span></span><br></pre></td></tr></table></figure><h2 id="2-2-其他常见层">2.2 其他常见层</h2><h3 id="2-2-1-线性层-全连接层">2.2.1 线性层/全连接层</h3><p><code>nn.Linear</code> 层提供了类似计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = Wx+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性层</span></span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">linear_out = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">out = linear_out(inputs)</span><br><span class="line">out.shape</span><br><span class="line"><span class="comment"># torch.Size([2, 4]) : (2, 3) @ (3, 4) -&gt; (2, 4) where 2 is batch_size</span></span><br></pre></td></tr></table></figure><p>更多可参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#1-Linear">Pytorch 搭建神经网络（2）网络搭建 - 线性层</a></p><h3 id="2-2-2-批量归一化层">2.2.2 批量归一化层</h3><p><code>nn.BatchNorm1d</code> 层提供对 1 维数据进行归一化，填入的参数为特征数（例如上一个输出的维度）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc = nn.Linear(<span class="number">256</span>, <span class="number">512</span>)</span><br><span class="line">        <span class="variable language_">self</span>.bn = nn.BatchNorm1d(<span class="number">512</span>)  <span class="comment"># 全连接层后接BatchNorm1d</span></span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.bn(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>更多可参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#7-%E6%AD%A3%E5%88%99%E5%8C%96%E5%B1%82">Pytorch 搭建神经网络（2）网络搭建 - 正则化层</a></p><h3 id="2-2-3-Dropout-层">2.2.3 Dropout 层</h3><p><code>nn.Dropout</code> 层用于防止过拟合，按照概率遗弃一些神经元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">784</span>, <span class="number">128</span>)</span><br><span class="line">        <span class="variable language_">self</span>.dropout = nn.Dropout(<span class="number">0.5</span>)  <span class="comment"># 以 0.5 的概率遗弃</span></span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">128</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.dropout(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="2-3-循环神经网络">2.3 循环神经网络</h2><p>PyTorch 中提供了最常用的三种循环神经网络：<code>RNN</code>、<code>LSTM</code> 和 <code>GRU</code> 。</p><p>推荐学习 <a href="https://zh-v2.d2l.ai/chapter_recurrent-neural-networks/index.html">《动手学深度学习》</a> 中关于循环神经网络的知识，十分详细。也可结合李沐老师的讲解[b站连接](【54 循环神经网络 RNN【动手学深度学习v2】】 <a href="https://www.bilibili.com/video/BV1D64y1z7CA/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">https://www.bilibili.com/video/BV1D64y1z7CA/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2</a>)</p><h2 id="3-激活函数">3 激活函数</h2><p>激活函数可以为模型加入非线性性。</p><p>这部分可以参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#6-%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%BF%80%E6%B4%BB%EF%BC%88%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%89">Pytorch 搭建神经网络（2）网络搭建 - 激活函数</a></p><h2 id="4-前馈传播网络的便捷构建">4 前馈传播网络的便捷构建</h2><p>上述的网络结构均为：前一层的输出是下一层的输入。这样的网络结构称为<strong>前馈传播网络</strong>（Feedforward Neural Network，FFN）。</p><p>针对这样的网络结构，可以使用 <code>ModuleList</code> 和 <code>Sequential</code> 来组合各个层。</p><h3 id="4-1-Sequential">4.1 Sequential</h3><p>使用 <code>Sequential</code> 的三种方法：将卷积层、归一化层和激活函数层组合成一个网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法一</span></span><br><span class="line">net1 = nn.Sequential()</span><br><span class="line">net1.add_module(<span class="string">&#x27;conv&#x27;</span>, nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">net1.add_module(<span class="string">&#x27;batchnorm&#x27;</span>, nn.BatchNorm2d(<span class="number">3</span>))</span><br><span class="line">net1.add_module(<span class="string">&#x27;relu&#x27;</span>, nn.ReLU())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net1:&#x27;</span>, net1)</span><br><span class="line"><span class="comment"># net1: Sequential(</span></span><br><span class="line"><span class="comment">#   (conv): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (batchnorm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (relu): ReLU()</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法二</span></span><br><span class="line">net2 = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">    nn.BatchNorm2d(<span class="number">3</span>),</span><br><span class="line">    nn.ReLU()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net2:&#x27;</span>, net2)</span><br><span class="line"><span class="comment"># net2: Sequential(</span></span><br><span class="line"><span class="comment">#   (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (1): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (2): ReLU()</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法三</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">net3 = nn.Sequential(OrderedDict([</span><br><span class="line">    (<span class="string">&#x27;conv&#x27;</span>, nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">    (<span class="string">&#x27;batchnorm&#x27;</span>, nn.BatchNorm2d(<span class="number">3</span>)),</span><br><span class="line">    (<span class="string">&#x27;relu&#x27;</span>, nn.ReLU())</span><br><span class="line">]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net3:&#x27;</span>, net3)</span><br><span class="line"><span class="comment"># net3: Sequential(</span></span><br><span class="line"><span class="comment">#   (conv): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (batchnorm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (relu): ReLU()</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure><ul><li>可以根据名字和序号取出对应的层</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">net1.conv</span><br><span class="line"><span class="comment"># Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"></span><br><span class="line">net2[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"></span><br><span class="line">net3.relu</span><br><span class="line"><span class="comment"># ReLU()</span></span><br></pre></td></tr></table></figure><h3 id="4-2-ModuleList">4.2 ModuleList</h3><p>使用 <code>nn.ModuleList</code> 连接三个层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model_list = nn.ModuleList([nn.Linear(<span class="number">3</span>,<span class="number">4</span>), nn.ReLU(), nn.Linear(<span class="number">4</span>,<span class="number">2</span>)])</span><br><span class="line">inputs = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> model_list:</span><br><span class="line">    inputs = model(inputs)  <span class="comment"># 一步一步执行，相当于前向传播 forward</span></span><br><span class="line">inputs.shape</span><br><span class="line"><span class="comment"># torch.Size([1, 2])</span></span><br></pre></td></tr></table></figure><blockquote><p>不可以直接调用 <code>modellist(inputs)</code> ，因为没有定义前向传播</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputs = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">output = modellist(inputs)  <span class="comment"># 报错，没有定义 forward 函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NotImplementedError: Module [ModuleList] is missing the required &quot;forward&quot; function</span></span><br></pre></td></tr></table></figure><blockquote><p>【不能直接使用 list 类型】必须使用 <code>nn.ModuleList</code> 连接各个层，直接使用 <code>list</code> 类型是无法继承 <code>nn.Module</code> 从而无法被识别</p></blockquote><h2 id="5-损失函数">5 损失函数</h2><p>Pytorch 提供简单计算损失的函数，例如均方误差、交叉熵损失等。</p><ul><li>均方误差损失 <code>nn.MSELoss()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成预测值和真实值</span></span><br><span class="line">y_pred = torch.randn(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">y_real = torch.randn(<span class="number">4</span>).squeeze(-<span class="number">1</span>)  <span class="comment"># 将 y_real 的形状调整为 (4, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 MSE 损失函数</span></span><br><span class="line">mse = nn.MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失</span></span><br><span class="line">loss = mse(y_pred, y_real)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(loss)  <span class="comment"># tensor(1.2719)</span></span><br></pre></td></tr></table></figure><ul><li>交叉熵损失 <code>nn.CrossEntropyLoss()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># batch_size=4，即这一组共 4 个样本，类别为 2</span></span><br><span class="line">score = torch.randn(<span class="number">4</span>, <span class="number">2</span>)  <span class="comment"># 4 个样本，每个样本对应 2 个数值，代表属于第 0 or 1 类的概率</span></span><br><span class="line"><span class="comment"># 假设 4 个样本的真实类为：1, 0, 1, 1 </span></span><br><span class="line">label = torch.Tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]).long()  <span class="comment"># label 必须为 LongTensor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉熵损失 CrossEntropyLoss （常用与计算分类问题的损失）</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">loss = criterion(score, label)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(loss)  <span class="comment"># tensor(0.5944)</span></span><br></pre></td></tr></table></figure><h2 id="6-nn-functional-模块">6 nn.functional 模块</h2><p>使用 <code>nn.Module</code> 实现的层是一个特殊的类，其由 <code>class layer(nn.Module)</code> 定义，会自动提取可学习的参数；使用<code>nn.functional</code>实现的层更像是纯函数，由<code>def function(input)</code>定义。</p><p>也就是说，当这一层无需学习参数时，使用 <code>nn.functional</code> 是合理的。</p><h3 id="6-1-使用-nn-functional-的函数">6.1 使用 nn.functional 的函数</h3><p>以 <code>nn.functional.linear()</code> 为例，其他函数可参考官网 <a href="https://pytorch.org/docs/stable/nn.functional.html">https://pytorch.org/docs/stable/nn.functional.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.functional.linear(<span class="built_in">input</span>, weight, bias=<span class="literal">None</span>) -&gt; Tensor</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">input</span>: (batch_size, in_features)</span><br><span class="line">输入值，需要为 tensor</span><br><span class="line"></span><br><span class="line">- weight: (in_features, out_features)</span><br><span class="line">权重，需要为 tensor</span><br><span class="line"></span><br><span class="line">- bias: (out_features) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line">偏倚，需要为 tensor，或者为空</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 使用 nn.Module</span></span><br><span class="line">model = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">output1 = model(inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 使用 nn.functional</span></span><br><span class="line">output2 = nn.functional.linear(inputs, model.weight, model.bias)  <span class="comment"># 这里使用与 1 相同的参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output1)</span><br><span class="line"><span class="built_in">print</span>(output2)</span><br><span class="line"><span class="comment"># 二者值完全一样</span></span><br></pre></td></tr></table></figure><h3 id="6-2-nn-Module-和-nn-functional-结合使用">6.2 nn.Module 和 nn.functional 结合使用</h3><ul><li>如果模型具有可学习的参数，最好用 <code>nn.Module</code></li><li>否则既可以使用 <code>nn.functional</code>，也可以使用 <code>nn.Module</code></li></ul><blockquote><p>例如：激活函数、池化层没有可学习参数，可以使用对应的 <code>functional</code> 函数代替。而卷积层、线性层/全连接层需要学习参数，所以使用 <code>nn.Module</code></p><p>【推荐】dropout 虽然无参数学习，但推荐使用 <code>nn.Module</code></p></blockquote><p>例：混合使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 混合使用</span></span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 不需要声明那些没有参数学习的层：池化等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.max_pool2d(F.relu(<span class="variable language_">self</span>.conv1(x)), <span class="number">2</span>)  <span class="comment"># 池化直接写在前向传播里即可</span></span><br><span class="line">        x = F.max_pool2d(F.relu(<span class="variable language_">self</span>.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)  <span class="comment"># 计算池化后的大小</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">x = torch.randn(<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)  <span class="comment"># batch_size=64, channels=3, height=32, width=32</span></span><br><span class="line">model = myNet()</span><br><span class="line">out = model(x)</span><br><span class="line"><span class="built_in">print</span>(out.shape)  <span class="comment"># torch.Size([64, 10])</span></span><br></pre></td></tr></table></figure><h2 id="7-优化器">7 优化器</h2><p>PyTorch 将提供常用的优化方法，这些方法全部封装在 <code>torch.optim</code> 中</p><p>以 [1.2 多层感知机](#1.2 多层感知机) 为例，首先构建网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiPerceptron</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, hidden_features, out_features</span>):</span><br><span class="line">        <span class="comment"># 新增参数：隐藏层神经元个数（形状）</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 直接使用之前定义的线性层/全连接层 Linear</span></span><br><span class="line">        <span class="variable language_">self</span>.layer1 = Linear(in_features, hidden_features)</span><br><span class="line">        <span class="variable language_">self</span>.layer2 = Linear(hidden_features, out_features)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.layer1(x)</span><br><span class="line">        x = torch.sigmoid(x)  <span class="comment"># 使用激活函数，增加非线性因素（此处是逐个元素计算）</span></span><br><span class="line">        y = <span class="variable language_">self</span>.layer2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p>然后实例化网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_features=3, hidden_features=4, out_features=1</span></span><br><span class="line">mlp = MultiPerceptron(<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>设置优化器和学习率（使用随机梯度下降优化器 SGD）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置优化器和学习率</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为网络设置学习率，使用随机梯度下降优化器 SGD</span></span><br><span class="line">optimizer = optim.SGD(params=mlp.parameters(), lr=learning_rate)  <span class="comment"># 【重点】</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面就是网络的训练过程，这里我们只模仿更新一次</span></span><br><span class="line">optimizer.zero_grad()  <span class="comment"># 梯度清零，因为梯度累计效应</span></span><br><span class="line"></span><br><span class="line">inputs = torch.randn(<span class="number">32</span>, <span class="number">3</span>)  <span class="comment"># batch_size=32, in_features=3</span></span><br><span class="line">output = mlp(inputs)</span><br><span class="line">output.backward(output)  <span class="comment"># fake backward</span></span><br><span class="line"></span><br><span class="line">optimizer.step()  <span class="comment"># 执行优化</span></span><br></pre></td></tr></table></figure><blockquote><p>如果想为不同参数设置不同学习率</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为不同的参数分别设置不同的学习率</span></span><br><span class="line">weight_params = [param <span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters() <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.W&#x27;</span>)]</span><br><span class="line">bias_params = [param <span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters() <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.b&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD([</span><br><span class="line">    &#123;<span class="string">&#x27;params&#x27;</span>: bias_params&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;params&#x27;</span>: weight_params, <span class="string">&#x27;lr&#x27;</span>: <span class="number">1e-2</span>&#125;</span><br><span class="line">], lr=<span class="number">1e-5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（5）多表查询</title>
      <link href="/posts/b4103c0f.html"/>
      <url>/posts/b4103c0f.html</url>
      
        <content type="html"><![CDATA[<h1>多表查询</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>多表查询，关联查询，指对多个表进行查询。</p><blockquote><p>前提：被查询的多表之间存在联系，即存在关键字段、相同字段（例如：外键）</p></blockquote><h1>1 笛卡尔积</h1><h2 id="1-1-错误的查询">1.1 错误的查询</h2><p>如果直接查询，则会出现<strong>笛卡尔积错误</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br><span class="line"># <span class="number">2889</span> <span class="keyword">rows</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(last_name) <span class="keyword">FROM</span> employees;  <span class="comment">-- 107 rows</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(department_name) <span class="keyword">FROM</span> departments;  <span class="comment">-- 27 rows</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">107</span> <span class="operator">*</span> <span class="number">27</span>;  <span class="comment">-- 2889</span></span><br></pre></td></tr></table></figure><p>即将两个表的所有行进行了组合，将所有非重复组合一同输出。</p><h2 id="1-2-笛卡尔积">1.2 笛卡尔积</h2><p><strong>定义</strong>：对于集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding="application/x-tex">A,\ B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 称由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding="application/x-tex">A,\ B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 则称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 的笛卡尔积是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 的所有可能组合。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>=</mo><mrow><mo fence="true">{</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">∣</mi><mtext> </mtext><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>b</mi><mo>∈</mo><mi>B</mi><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">A \times B = \left\{ (a,\ b)\ |\ a \in A,\ b \in B \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">∣</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span></p><p>则容易得知新的集合元素个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mo>×</mo><mi mathvariant="normal">∣</mi><mi>B</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|A| \times |B|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|\cdot|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span></span></span></span> 表示元素个数。</p><h2 id="1-3-CROSS-JOIN-交叉连接">1.3 <code>CROSS JOIN</code> 交叉连接</h2><p>笛卡尔积也称为<strong>交叉连接</strong>，可以使用 <code>CROSS JOIN</code> <code>INNER JOIN</code> <code>JOIN</code>链接二表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure><blockquote><p>不通过 <code>WHERE</code> 或 <code>ON</code> 添加条件，则会出现笛卡尔积错误</p></blockquote><h2 id="1-4-WHERE-加入链接条件">1.4 <code>WHERE</code> 加入链接条件</h2><p>为了避免笛卡尔积， 可以<strong>在</strong> <code>WHERE</code> 加入有效的连接条件。格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 表<span class="number">1.</span>列名, 表<span class="number">1.</span>列名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span>, 表<span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> 表<span class="number">1.</span>列名<span class="number">1</span> <span class="operator">=</span> 表<span class="number">2.</span>列名<span class="number">2</span>;  <span class="comment">-- 有效的连接条件</span></span><br></pre></td></tr></table></figure><ul><li>例：根据部门 id 筛选</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">WHERE</span> 加入条件</span><br><span class="line"><span class="keyword">SELECT</span> employees.last_name, departments.department_name, employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br></pre></td></tr></table></figure><blockquote><p>在表中有相同列时，在列名之前加上表名前缀。【推荐使用，方便标注各表各列】</p></blockquote><h1>2 多表查询概念</h1><h2 id="2-1-等值连接-非等值连接">2.1 等值连接 &amp; 非等值连接</h2><h3 id="2-1-1-键的类型">2.1.1 键的类型</h3><blockquote><p>主键 <code>PRI</code> &amp; 唯一标识 <code>UNI</code> &amp; 外键 <code>MUL</code></p></blockquote><p>在SQL中，<code>key</code> 是用于标识表中列的属性，常见的类型包括 <code>PRI</code>、<code>MUL</code> 和 <code>UNI</code>。这些属性描述了列在表中的角色和约束。以下是它们的详细区别：</p><ul><li><code>PRI</code> (Primary Key)：表示该列为表的主键。</li></ul><p>值唯一，不能有重复；不为空；唯一标识；可作为唯一索引；</p><ul><li><code>UNI</code> (Unique Key)：表示该列具有唯一约束。</li></ul><p>值唯一，不能有重复；允许空值；也可作为唯一索引；</p><ul><li><code>MUL</code> (Multiple)：表示该列是外键或普通索引。</li></ul><p>非唯一性，值可以重复；如果该列是外键，它引用另一个表的主键或唯一键；</p><p>使用 <code>DESC</code> 查询表的属性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739081118663.png" alt=""></p><h3 id="2-1-2-等值连接">2.1.2 等值连接</h3><p>一般通过外键寻找另一个表的唯一索引（<code>PRI</code> 或 <code>UNI</code>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据 job_id 外键连接 jobs 表的 job_title</span></span><br><span class="line"><span class="keyword">SELECT</span> employees.last_name, jobs.job_title, employees.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees, jobs</span><br><span class="line"><span class="keyword">WHERE</span> employees.job_id <span class="operator">=</span> jobs.job_id;</span><br></pre></td></tr></table></figure><ul><li>多个条件 <code>AND</code> 连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.last_name, departments.department_name, employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id <span class="keyword">AND</span> departments.department_name <span class="operator">=</span> <span class="string">&#x27;Shipping&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>多个表中有相同列时，必须在列名之前加上表名前缀</li></ul><p>【推荐使用，方便标注各表各列，提高查询效率】</p><ul><li>使用别名可以简化查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e, departments <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><blockquote><p>一但使用了别名，这一个语句中必须使用别名替代</p></blockquote><ul><li>连接多个表</li></ul><p>例如：展示员工 <code>last_name, department_name, city</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, lc.city</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e,</span><br><span class="line">     departments <span class="keyword">as</span> d,</span><br><span class="line">     locations <span class="keyword">as</span> lc</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">  <span class="keyword">AND</span> d.location_id <span class="operator">=</span> lc.location_id;</span><br></pre></td></tr></table></figure><blockquote><p>连接 N 个表，至少需要 N-1 个条件</p></blockquote><h3 id="2-1-3-非等值连接">2.1.3 非等值连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, j.grade_level <span class="keyword">AS</span> GRADE</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e,</span><br><span class="line">     job_grades <span class="keyword">AS</span> j</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="keyword">BETWEEN</span> j.lowest_sal <span class="keyword">AND</span> j.highest_sal  <span class="comment">-- 按工资分档</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;  <span class="comment">-- 按照工资排序</span></span><br></pre></td></tr></table></figure><h2 id="2-2-自连接-非自连接">2.2 自连接 &amp; 非自连接</h2><p>使用别名的方式把 <strong>1</strong> 张表虚拟成 <strong>2</strong> 张表，而后两表可以进行内连接和外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(worker.last_name, <span class="string">&#x27; works for &#x27;</span></span><br><span class="line">           , manager.last_name) <span class="keyword">AS</span> relationship <span class="comment">-- 连接为长字符串</span></span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> worker,</span><br><span class="line">     employees <span class="keyword">AS</span> manager</span><br><span class="line"><span class="keyword">WHERE</span> worker.manager_id <span class="operator">=</span> manager.employee_id;</span><br></pre></td></tr></table></figure><blockquote><p>将 employees 表虚拟为 表 worker 和 manager，然后自连接</p></blockquote><h2 id="2-3-内连接-外连接">2.3 内连接 &amp; 外连接</h2><ul><li>内连接：合并的表存在联系，即存在相同列。结果中<strong>不包含一个表与另一个表不匹配的行</strong></li></ul><p>内连接使用 <code>INNER JOIN</code></p><ul><li>外连接：两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回不满足条件的行</strong></li></ul><p>外连接使用 <code>LEFT JOIN</code> <code>RIGHT JOIN</code>，特别地，对 MySQL 而言全外连接需要使用 <code>UNION</code> 方法</p><blockquote><p>不满足条件的行 —— 相应的列为空 <code>NULL</code></p><p>当返回不满足条件的行来自<u>左表</u>时，则为<u>左外连接</u>，左边的表也称为<u>主表</u> ，右边的表称为<u>从表</u></p><p>当返回不满足条件的行来自<u>右表</u>时，则为<u>右外连接</u>，右边的表也称为<u>主表</u> ，左边的表称为<u>从表</u></p></blockquote><h1>3 多表查询代码</h1><p>使用 <code>SQL99</code> 语法实现</p><h2 id="3-1-基础语法-JOIN-ON">3.1 基础语法 <code>JOIN ON</code></h2><p>标准格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column, </span><br><span class="line">   table2.column,</span><br><span class="line">   table3.column</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2 </span><br><span class="line"><span class="keyword">ON</span> table1 和 table2 的连接条件</span><br><span class="line">    <span class="keyword">JOIN</span> table3 </span><br><span class="line">        <span class="keyword">ON</span> table2 和 table3 的连接条件</span><br></pre></td></tr></table></figure><ul><li>各个条件相互独立</li><li>使用 <code>JOIN</code> <code>CROSS JOIN</code> <code>INNER JOIN</code> 含义相同，均代表内连接</li></ul><p>下面看具体内连接案例：</p><h2 id="3-2-内连接">3.2 内连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column,</span><br><span class="line">       table2.column,</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：查询 <code>last_name, department_name, city</code> 员工为 <code>'Chen'</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, lc.city</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">         <span class="keyword">JOIN</span> locations lc</span><br><span class="line">              <span class="keyword">ON</span> d.location_id <span class="operator">=</span> lc.location_id;</span><br><span class="line"><span class="keyword">WHERE</span> e.last_name <span class="operator">=</span> <span class="string">&#x27;Chen&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;&gt;</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> city    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> Chen      <span class="operator">|</span> Finance         <span class="operator">|</span> Seattle <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="3-3-外连接">3.3 外连接</h2><h3 id="3-3-1-左外连接-LEFT-JOIN-ON">3.3.1 左外连接 <code>LEFT JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- A 为主表，B 表向 A 表插入</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：<code>employees</code> 表中 <code>Grant</code> 对应 <code>department_id</code> 为 <code>NULL</code> 故在表 <code>departments</code> 检索不到</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.department_id, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                         <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739087518109.png" alt=""></p><h3 id="3-3-2-右外连接-RIGHT-JOIN-ON">3.3.2 右外连接 <code>RIGHT JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- B 为主表，A 表向 B 表插入</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：<code>employees</code> 表中没有处于 <code>departments</code> 表中 <code>Treasury</code> 部门的，故向 <code>departments</code> 插入时补空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.department_name, e.last_name, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                          <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739087735674.png" alt=""></p><h3 id="3-3-3-满外连接-FULL-JOIN-ON">3.3.3 满外连接 <code>FULL JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满外连接的结果 <span class="operator">=</span> 左右表匹配到的数据 <span class="operator">+</span> 左表没有匹配到的数据 <span class="operator">+</span> 右表没有匹配到的数据</span><br></pre></td></tr></table></figure><p>标准语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 互相charity</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>MySQL</code> 不支持 <code>FULL JOIN</code> ，但可以通过<strong>合并左外连接和右外连接的方式</strong>实现。</p><p>可以简单理解：<code>FULL JOIN &lt;=&gt; LEFT JOIN UNION RIGHT JOIN</code></p></blockquote><h1>4 合并查询结果 <code>UNION</code></h1><p><code>UNION</code> 可以将多个 SELECT 语句得到的结果合并成一个表输出：</p><ul><li>匹配：多个 SELECT 语句得到的结果集列数和数据类型必须相同</li><li>去重与否：使用 <code>UNION</code> 会去除重复数据；使用 <code>UNION ALL</code> 不会去除重复数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]  <span class="comment">-- UNION 或者 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... <span class="keyword">FROM</span> table2</span><br></pre></td></tr></table></figure><ul><li>例：查询部门编号 <code>department_id &gt; 90</code> 或 邮箱 <code>email</code> 包含 <code>a</code> 的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：使用 WHERE</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line">   <span class="keyword">OR</span> department_id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：使用 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h1>5 JOIN 实现的几种关系（总结）</h1><h2 id="5-1-内连接：A-交-B">5.1 内连接：A 交 B</h2><p>A 表与 B 表内连接，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="5-2-左外连接：A-交-A-交-B">5.2 左外连接：A 交 (A 交 B)</h2><p>A 表作为主表，B 表作为从表插入 A ，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A + A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="5-3-右外连接：B-交-A-交-B">5.3 右外连接：B 交 (A 交 B)</h2><p>B 表作为主表，A 表作为从表插入 B ，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>+</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">B + A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><blockquote><p>左外连接和右外连接本质相同</p></blockquote><h2 id="5-4-WHERE-找出空值-IS-NULL：只属于-A">5.4 WHERE 找出空值 IS NULL：只属于 A</h2><p>A 表作为主表，B 表插入，但去除完美匹配的，即 A 表中与 B 表无关的部分。相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>−</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A - A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> B.column <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><ul><li>例：查询 部门表中无员工的部门</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.department_name, d.department_id, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e</span><br><span class="line">                   <span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739090941337.png" alt=""></p><h2 id="5-5-UNION-合并：A-并-B">5.5 UNION 合并：A 并 B</h2><p>UNION 可以将多个 SELECT 语句得到的结果合并成一个表输出，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cup B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> B.col <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line">    <span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br></pre></td></tr></table></figure><ul><li>例：两张方法，推荐第一种【先手动去重，再使用 UNION ALL 效率高】</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：利用 WHERE d.department_id IS NULL 手动去重</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：直接使用 UNION 自动去重</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><h2 id="5-6-找出空值后-UNION-合并：对称差">5.6 找出空值后 UNION 合并：对称差</h2><p>查询所有匹配失败的行数据，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi><mo>−</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cup B - A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> B.col <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line">    <span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> A.col <span class="keyword">IS</span> <span class="keyword">NULL</span>  <span class="comment">-- 全部加上 IS NULL 判断</span></span><br></pre></td></tr></table></figure><ul><li>例：查询所有失败行数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739091754343.png" alt=""></p><h1>6 特殊等值连接</h1><h2 id="6-1-自然连接">6.1 自然连接</h2><p><code>NATURAL JOIN</code> 会自动查询两张表中<strong>所有相同的字段</strong>，然后进行等值连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是 SQL99 新语法</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d;</span><br></pre></td></tr></table></figure><blockquote><p>注：自然连接使用 <code>AND</code> 连接各个条件。即只有当所有相同列名的值都相等时，才会放入结果集。</p><p>例如：当表 employees 和表 departments 有相同列 department_id 和 manager_id 时</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 上面自然连接等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">                  <span class="keyword">AND</span> e.manager_id <span class="operator">=</span> d.manager_id;  <span class="comment">-- 是 AND 而不是 OR</span></span><br></pre></td></tr></table></figure><h2 id="6-2-USING-连接">6.2 USING 连接</h2><p>当有多个同名字段时，<code>USING</code> 可以指定同名字段进行连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,</span><br><span class="line">     departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;  <span class="comment">-- 利用 USING 简化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以简化为</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">USING</span> (department_id);  <span class="comment">-- 指定 department_id</span></span><br></pre></td></tr></table></figure><h2 id="6-3-总结：等值连接的三种写法">6.3 总结：等值连接的三种写法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：WHERE 限制条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,</span><br><span class="line">     departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：JOIN ... ON + 条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line">                  </span><br><span class="line"><span class="comment">-- 法三：USING 指定同名字段</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">USING</span> (department_id);  <span class="comment">-- 指定 department_id</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>WHERE</code> 的使用没有限制，目的就是增加约束条件</li><li><code>ON</code> 只能和 <code>JOIN</code> 连用</li><li><code>USING</code> 只能和 <code>JOIN</code>，且要求字段必须同名</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（2）：自动求导 autograd 反向传播 backward 与计算图</title>
      <link href="/posts/421f3bd1.html"/>
      <url>/posts/421f3bd1.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch搭建神经网络（2）自动求导autograd、反向传播backward与计算图</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p><code>torch.autograd</code> 提供了一套自动求导方式，它能够根据前向传播过程自动构建计算图，执行反向传播。</p><h2 id="1-autograd-的数学原理：计算图">1 autograd 的数学原理：计算图</h2><p>计算图原理可以查看 <strong>cs231n</strong> 课程讲解：【计算图的原理非常重要！】或者见<a href="#3">后文分析</a></p><p>英文官网 <a href="https://cs231n.github.io/">https://cs231n.github.io/</a></p><p>b站 课程整理 <a href="https://www.bilibili.com/video/BV1nJ411z7fe?p=8&amp;spm_id_from=333.788.videopod.episodes">BV1nJ411z7fe</a> 【反向传播章节】</p><p>b站 中文讲解 <a href="https://www.bilibili.com/video/BV1K7411W7So?p=4&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【子豪兄】精讲CS231N斯坦福计算机视觉公开课（2020最新）</a></p><h2 id="2-autograd-的使用：requires-grad-backward">2 autograd 的使用：requires_grad &amp; backward</h2><h3 id="2-1-requires-grad-属性">2.1 requires_grad 属性</h3><p>只需要对Tensor增加一个 <code>requires_grad=True</code> 属性，Pytorch就会自动计算 <code>requires_grad=True</code> 属性的 Tensor，并保留计算图，从而快速实现反向传播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Method 1</span></span><br><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2</span></span><br><span class="line">x = torch.rand(<span class="number">2</span>, <span class="number">3</span>).requires_grad_()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 3</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">x.requires_grad = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.requires_grad)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-2-backward-反向传播">2.2 backward 反向传播</h3><p>反向传播函数的使用：其中第一个参数 <code>tensors</code> 传入用于计算梯度的张量，格式和各个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.autograd.backward(tensors, grad_tensors=<span class="literal">None</span>, retain_graph=<span class="literal">None</span>, create_graph=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>tensors</code>：用于计算梯度的Tensor，如<code>torch.autograd.backward(y)</code>，等价于<code>y.backward()</code>。</p></li><li><p><code>grad_tensors</code>：形状与tensors一致，对于<code>y.backward(grad_tensors)</code>，grad_tensors相当于链式法则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow></mfrac><mo>×</mo><mfrac><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">{\mathrm{d}z \over \mathrm{d}x}={\mathrm{d}z \over \mathrm{d}y} \times {\mathrm{d}y \over \mathrm{d}x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3612em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">{\mathrm{d}z} \over {\mathrm{d}y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3612em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。【结合例子理解见后】</p></li><li><p><code>retain_graph</code>：计算计算图里每一个导数值时需要保留各个变量的值，retain_graph 为 True 时会保存。【结合例子理解见后】</p></li></ul><h4 id="2-2-1-requires-grad-属性的传递">2.2.1 requires_grad 属性的传递</h4><ul><li>例：<code>a</code> 需要求导，<code>b</code> 不需要，<code>c</code> 定义为 <code>a + b</code> 的元素加和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">c = (a + b).<span class="built_in">sum</span>()  <span class="comment"># c 受 a 的影响，c.requires_grad = True</span></span><br><span class="line"></span><br><span class="line">a.requires_grad, b.requires_grad, c.requires_grad</span><br><span class="line"><span class="comment"># (True, False, True)</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-is-leaf-叶子结点">2.2.2 is_leaf 叶子结点</h4><p>对于计算图中的Tensor而言， <code>is_leaf=True</code> 的Tensor称为Leaf Tensor，也就是计算图中的叶子节点。</p><ul><li><code>requires_grad=False</code> 时，无需求导，故为叶子结点。</li><li>即使 <code>requires_grad=True</code> 但是由用户创建的时，此时它位于计算图的头部（叶子结点），它的梯度会被保留下来。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仍然是上面的例子</span></span><br><span class="line">a.is_leaf, b.is_leaf, c.is_leaf</span><br><span class="line"><span class="comment"># (True, True, False)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-autograd-利用计算图计算导数">2.3 autograd 利用计算图计算导数</h3><p>利用 autograd 计算导数，对于函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">y=x^2e^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span>，它的导函数解析式为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mrow><mi>d</mi><mtext> </mtext><mi>y</mi></mrow><mrow><mi>d</mi><mtext> </mtext><mi>x</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mi>x</mi><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><msup><mi>e</mi><mi>x</mi></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation}\dfrac{d\ y}{d\ x} = 2xe^x + x^2e^x\end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.7787em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2787em;"><span style="top:-3.2787em;"><span class="pstrut" style="height:3.3714em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7787em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2787em;"><span style="top:-3.2787em;"><span class="pstrut" style="height:3.3714em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7787em;"><span></span></span></span></span></span></span></span></span></p><p>定义计算 y 函数和计算解析式导数结果函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autograd 求导</span></span><br><span class="line"><span class="comment"># y = x^2 * e^x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y = x * x * torch.exp(x)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">df</span>(<span class="params">x</span>):</span><br><span class="line">    df = <span class="number">2</span> * x * torch.exp(x) + x * x * torch.exp(x)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><ul><li>例：随机赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = f(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y = </span></span><br><span class="line"><span class="comment"># tensor([[0.1387, 0.4465, 0.4825],</span></span><br><span class="line"><span class="comment">#         [0.1576, 4.1902, 0.5185]], grad_fn=&lt;MulBackward0&gt;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y.backward(gradient=torch.ones(y.size()))  <span class="comment"># 指定 dy/dx = dy/dx * 1 的 dy/dx</span></span><br><span class="line"><span class="comment"># torch.autograd.backward(y, grad_tensors=torch.ones(y.size()))  # 或者</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.grad)  <span class="comment"># 反向传播后才能取到 y 关于 x 的导数（已经代入了此时 x 的值）</span></span><br><span class="line"><span class="comment"># tensor([[-0.4497,  2.1766, -0.2087],</span></span><br><span class="line"><span class="comment">#         [-0.4567, 11.4700, -0.1244]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df(x))   <span class="comment"># 解析求出的导数值</span></span><br><span class="line"><span class="comment"># tensor([[-0.4497,  2.1766, -0.2087],</span></span><br><span class="line"><span class="comment">#         [-0.4567, 11.4700, -0.1244]], grad_fn=&lt;AddBackward0&gt;)</span></span><br></pre></td></tr></table></figure><p><code>x.grad &amp; df(x)</code> 二者是在数值上是一样的</p><h2 id="3-反向传播与计算图-a-id-3-a">3 反向传播与计算图<a id='3'></a></h2><h3 id="3-1-计算图原理：链式法则">3.1 计算图原理：链式法则</h3><p>根据链式法则</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dz/dy = 1,\ dz/db = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>x</mi><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">dy/dw = x,\ dy/dx = w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>×</mo><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mn>1</mn><mo>×</mo><mi>w</mi><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>×</mo><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mn>1</mn><mo>×</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">dz/dx = dz/dy \times dy/dx = 1 \times w,\ dz/dw = dz/dy \times dy/dw = 1 \times x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></p><p>只要存储结点的导数和值便可通过简单的乘法计算所有导数</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739002830328.png" alt=""></p><p>按照上图构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算图</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">b = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = w * x <span class="comment"># 等价于 y = w.mul(x)</span></span><br><span class="line">z = y + b <span class="comment"># 等价于 z = y.add(b)</span></span><br><span class="line"></span><br><span class="line">x.requires_grad, b.requires_grad, w.requires_grad, y.requires_grad, z.requires_grad</span><br><span class="line"><span class="comment"># (False, True, True, True, True)</span></span><br></pre></td></tr></table></figure><h3 id="3-2-grad-fn-查看反向传播函数">3.2 grad_fn 查看反向传播函数</h3><p><code>grad_fn</code> 可以查看这个结点的函数类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z.grad_fn  <span class="comment"># &lt;AddBackward0 at 0x7f96b951ba90&gt;  Add 加法，因为 z = y + b</span></span><br><span class="line">y.grad_fn  <span class="comment"># &lt;MulBackward0 at 0x7f96b951b400&gt;  Mul 乘法，因为 y = w * x</span></span><br><span class="line"></span><br><span class="line">w.grad_fn, x.grad_fn, b.grad_fn <span class="comment"># (None, None, None) 叶子结点是 grad_fn=None</span></span><br></pre></td></tr></table></figure><p><code>grad_fn.next_functions</code> 获取 grad_fn 的输入，返回上一步的反向传播函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">z.grad_fn.next_functions  <span class="comment"># z 前是 y 和 b</span></span><br><span class="line"><span class="comment"># ((&lt;MulBackward0 at 0x7f96b951b400&gt;, 0),  # y = w * x 是 mul</span></span><br><span class="line"><span class="comment">#  (&lt;AccumulateGrad at 0x7f96b95c6af0&gt;, 0))  # b 是叶子结点，需要求导 AccumulateGrad</span></span><br><span class="line"></span><br><span class="line">y.grad_fn.next_functions  <span class="comment"># y 前是 w 和 x</span></span><br><span class="line"><span class="comment"># ((&lt;AccumulateGrad at 0x7f9678466160&gt;, 0),  # w 是叶子结点，需要求导 AccumulateGrad</span></span><br><span class="line"><span class="comment">#  (None, 0)  # x 是叶子节点，x.requires_grad=False 不需要求导 None</span></span><br></pre></td></tr></table></figure><h3 id="3-3-retain-graph-的使用（仅叶子结点）">3.3 retain_graph 的使用（仅叶子结点）</h3><p>如果不指定 <code>retain_graph=True</code> ，则在反向传播后，会自动清除变量值。</p><p>例如：计算 <code>w.grad</code> w 的梯度时，需要 x 的值 （<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">dy/dw = x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>）</p><blockquote><p>注意：x.requires_grad=False 不需要求导，故 <code>x.grad</code> 报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z.backward(retain_graph=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="comment"># tensor([1.])  # 确实是我们之前设的 x = torch.ones(1) 相匹配</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再次运行，梯度累加</span></span><br><span class="line">z.backward()</span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="comment"># tensor([1.])  # 1 + 1 = 2 累加，所以之前 grad_fn 取名为 AccumulateGrad</span></span><br></pre></td></tr></table></figure><h3 id="3-4-关闭反向传播">3.4 关闭反向传播</h3><p>某一个节点 <code>requires_grad </code>被设置为 <code>True</code> ，那么所有依赖它的节点 <code>requires_grad</code> 都是 <code>True</code>。有时不需要对所有结点都反向传播（求导），从而来节省内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line"></span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = True</span></span><br><span class="line"><span class="comment"># (False, True, True)</span></span><br></pre></td></tr></table></figure><p>下面我们来关闭关于 <code>y</code> 的反向传播</p><ul><li>法一：<code>with torch.no_grad():</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    x = torch.ones(<span class="number">1</span>)</span><br><span class="line">    w = torch.rand(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">    y = x * w</span><br><span class="line">    </span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = False</span></span><br><span class="line"><span class="comment"># (False, True, False)</span></span><br></pre></td></tr></table></figure><ul><li>法二：设置默认 <code>torch.set_grad_enabled(False)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">torch.set_grad_enabled(<span class="literal">False</span>) <span class="comment"># 更改默认设置</span></span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line"></span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = False</span></span><br><span class="line"><span class="comment"># (False, True, False)</span></span><br><span class="line"></span><br><span class="line">torch.set_grad_enabled(<span class="literal">True</span>) <span class="comment"># 恢复默认设置</span></span><br></pre></td></tr></table></figure><h3 id="3-5-data-从计算图取出Tensor的值">3.5 <code>.data</code> 从计算图取出Tensor的值</h3><p>修改张量的数值，又不影响计算图，使用 <code>tensor.data</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">x_clone = x.data</span><br><span class="line"></span><br><span class="line">x.requires_grad, x_clone.requires_grad  <span class="comment"># x_clone 独立于原来的计算图</span></span><br><span class="line"><span class="comment"># (True, False)</span></span><br></pre></td></tr></table></figure><h3 id="3-6-存储非叶子结点的梯度">3.6 存储非叶子结点的梯度</h3><p>在计算图流程中，非叶子结点求导后其导数值便立刻被清除。可以使用 <code>autograd.grad</code> 或 <code>hook</code> 方法保留</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autograd.grad &amp; hook</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = w * x  <span class="comment"># 非叶子结点</span></span><br><span class="line">z = y.<span class="built_in">sum</span>()  <span class="comment"># 非叶子结点</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z.backward()</span><br><span class="line">x.grad, w.grad, y.grad  <span class="comment"># 非叶子结点 y.grad = None</span></span><br><span class="line"><span class="comment"># (tensor([1.]), tensor([1.]), None)</span></span><br></pre></td></tr></table></figure><blockquote><p>若为叶子结点可以采用 <code>z.backward(retain_graph=True)</code> 的方式</p></blockquote><ul><li>法一：<code>torch.autograd.grad()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 torch.autograd.grad() 直接取梯度</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line">z = y.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">torch.autograd.grad(z, y)  <span class="comment"># z.backward() 并直接取 y.grad()</span></span><br><span class="line"><span class="comment"># (tensor([1.]),)</span></span><br></pre></td></tr></table></figure><ul><li>法二：<code>hook</code></li></ul><p>标准格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hook是一个函数，输入是梯度，不应该有返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variable_hook</span>(<span class="params">grad</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;y.grad：&#x27;</span>, grad)</span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y = x * w</span><br><span class="line"><span class="comment"># 注册hook</span></span><br><span class="line">hook_handle = y.register_hook(variable_hook)</span><br><span class="line"></span><br><span class="line">z = y.<span class="built_in">sum</span>()</span><br><span class="line">z.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除非每次都要使用 hook，否则用完之后记得移除 hook</span></span><br><span class="line">hook_handle.remove()</span><br><span class="line"></span><br><span class="line"><span class="comment"># y.grad： tensor([1.])</span></span><br></pre></td></tr></table></figure><h2 id="4-案例：线性回归">4 案例：线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fake_data</span>(<span class="params">batch_size=<span class="number">16</span></span>):</span><br><span class="line">    <span class="comment"># 产生随机数据：y = 2 * x + 3，加上噪声</span></span><br><span class="line">    x = torch.rand(batch_size, <span class="number">1</span>) * <span class="number">5</span>  <span class="comment"># 扩大一些，以免噪声太明显</span></span><br><span class="line">    y = x * <span class="number">2</span> + <span class="number">3</span> + torch.randn(batch_size, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机数种子，保证结果可复现</span></span><br><span class="line">torch.manual_seed(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">x, y = get_fake_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.scatter(x.squeeze().numpy(), y.squeeze().numpy())</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">w = torch.rand(<span class="number">1</span>, <span class="number">1</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># w.shape = torch.Size([1, 1]) 因为 [8, 1] * [1, 1] -&gt; [batch_size, 1] 和 y 维度相同</span></span><br><span class="line">b = torch.zeros(<span class="number">1</span>, <span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">losses = np.zeros(<span class="number">200</span>)  <span class="comment"># 存储损失值</span></span><br><span class="line">lr = <span class="number">0.005</span>  <span class="comment"># 学习率</span></span><br><span class="line">EPOCHS = <span class="number">200</span>  <span class="comment"># 迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCHS):</span><br><span class="line">    x, y = get_fake_data(batch_size=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播 计算损失</span></span><br><span class="line">    y_pred = x.mm(w) + b.expand_as(y)  <span class="comment"># expand_as(y) 是广播机制，即将 b 复制成和 y 相同性质的张量 [1, 1] -&gt; [batch_size, 1]</span></span><br><span class="line">    loss = <span class="number">0.5</span> * (y_pred - y) ** <span class="number">2</span>  <span class="comment"># MSE 均方误差，这是对张量 y 逐元素计算</span></span><br><span class="line">    loss = loss.<span class="built_in">sum</span>()  <span class="comment"># 累和成一个数</span></span><br><span class="line">    losses[epoch] = loss.item()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 取 .data 是因为每一轮是根据随机生成的 batch_size 个点训练，但我们希望存储的是全局参数 w, b &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 故每次依据样本点更新全局参数，而不是改批次的参数 &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    w.data.sub_(lr * w.grad.data)  <span class="comment"># 或者 w.data = w.data - lr * w.grad.data</span></span><br><span class="line">    b.data.sub_(lr * b.grad.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 梯度清零</span></span><br><span class="line">    w.grad.data.zero_()  <span class="comment"># 不清零，梯度会不断累加</span></span><br><span class="line">    b.grad.data.zero_()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">10</span> == <span class="number">0</span>:  <span class="comment"># 每隔 10 次扔出当前训练情况</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Epoch: &#123;&#125; / &#123;&#125;, Parameters: w is &#123;&#125;, b is &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, EPOCHS, w.item(), b.item(), losses[epoch]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Epoch: &#123;&#125; / &#123;&#125;, Parameters: w is &#123;&#125;, b is &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(EPOCHS, EPOCHS, w.item(), b.item(), losses[-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739010576001.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（4）排序与分页：ORDER BY 子句 和 LIMIT 子句</title>
      <link href="/posts/c8719e79.html"/>
      <url>/posts/c8719e79.html</url>
      
        <content type="html"><![CDATA[<h1>排序与分页：ORDER BY 子句 和 LIMIT 子句</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h1>1 排序</h1><p>为了使数据按照设定的规则排序输出，可以使用 <code>ORDER BY</code></p><ul><li><p>使用 <code>ORDER BY 字段名 ASC</code> 表示按照 <code>字段</code> <strong>生序</strong> 展示</p></li><li><p>使用 <code>ORDER BY 字段名 DESC</code> 表示按照 <code>字段</code> <strong>降序</strong> 展示</p></li><li><p><code>ORDER BY</code> 位于  <code>SELECT</code> 语句结尾</p></li></ul><h2 id="1-1-按照某一列排序">1.1 按照某一列排序</h2><ul><li>例如按照 <code>hire_date</code> 升序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date;  # 按照 hire_date 排序输出，默认升序 <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">ASC</span>;  # 按照 hire_date 升序输出</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738994927454.png" alt=""></p><ul><li>按照 <code>hire_date</code> 降序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span>;  # 按照 hire_date 降序输出</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995009057.png" alt=""></p><ul><li>列别名同样可以使用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, salary <span class="operator">*</span> <span class="number">12</span> <span class="keyword">AS</span> &quot;annual salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &quot;annual salary&quot; <span class="keyword">DESC</span>;  # 按照别名 annual salary 降序</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995074331.png" alt=""></p><h2 id="1-2-按照多列排序">1.2 按照多列排序</h2><p>根据多个列进行数据行排序，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列<span class="number">2</span>, 列<span class="number">4</span>;</span><br></pre></td></tr></table></figure><ul><li>排序依据列可以不在展示列中：即 <code>ORDER BY</code> 后的列可以不是 <code>SELECT</code> 后的列，只要是表中的列即可</li><li>多列排序，按照从左到右的方式排序 <code>ORDER BY</code> 后面的列，只有前面列存在相同元素时，才会参考后一列进行排序：即先按照 <code>列2</code> 排，如果 <code>列2</code> 各异，则完全按照 <code>列2</code> 拍；否则参考 <code>列4</code></li></ul><p>例如：按照部门降序，聘请日期升序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_id, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>, hire_date <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995708094.png" alt=""></p><h1>2 分页</h1><p>返回特定范围（行）的数据，以免占据页面过多</p><blockquote><p>也可以使用图形化工具，例如 <code>jetBrains</code> 的 <a href="https://www.jetbrains.com.cn/datagrip/"><code>DataGrip</code> 产品</a>。</p></blockquote><p>MySQL 中使用 <code>LIMIT</code> 实现分页，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT 起始行数, 行数  <span class="comment">-- 从 0 开始计数，起始行数可省略，默认为 0</span></span><br></pre></td></tr></table></figure><ul><li><code>LIMIT</code> 语句放在 <code>SELECT</code> 语句结尾</li><li>不同数据库管理系统 DBMS 的语句存在差异</li></ul><p>例如：选取前 5 行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">5</span>;  <span class="comment">-- 前 5 行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">0</span>, <span class="number">5</span>;  <span class="comment">-- [0, 1, 2, 3, 4] 从第 0 行开始往后查 5 行</span></span><br></pre></td></tr></table></figure><p>例如：选取第 11 到第 15 行数据（从 0 计数则是：从第 10 行到第 14 行）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">10</span>, <span class="number">10</span>;  <span class="comment">-- [10, 11, 12, 13, 14] 从 0 计数: 从第 10 行到第 14 行</span></span><br></pre></td></tr></table></figure><blockquote><p><code>MySQL 8.0</code>中可以使用 <code>LIMIT 3 OFFSET 4</code> 等价于 <code>LIMIT 4, 3</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为搭建神经网络创建虚拟环境全流程：下载 Python，利用 conda 创建虚拟环境，激活与安装 Pytorch</title>
      <link href="/posts/7d8f6610.html"/>
      <url>/posts/7d8f6610.html</url>
      
        <content type="html"><![CDATA[<h1>1 下载 Python</h1><blockquote><p>注：这一部分已不需要，可以直接使用 conda 下载</p></blockquote><p>MacOS 和 Windows 下载 Python 全流程见 <a href="https://blog.iskage.online/posts/7d46a7ea.html">全平台下载安装 Python 全流程指南：Windows &amp; MacOS</a></p><h1>2 Conda 下载</h1><p>利用 Conda 更好的管理开发环境，全流程见 <a href="https://blog.iskage.online/posts/2c3265b7.html">Conda 创建虚拟环境全流程</a></p><h1>3 创建环境并激活</h1><h2 id="3-1-首先创建环境">3.1 首先创建环境</h2><p>例如我们创建一个环境名为 <code>pytorch</code> 的虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pytorch</span><br></pre></td></tr></table></figure><h2 id="3-2-激活环境">3.2 激活环境</h2><p>而后激活这个环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure><p>激活后会在命令后/终端前显示环境名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(pytorch) Username/@xx %   <span class="comment"># macOS</span></span><br><span class="line">(pytorch) PC C:\xx\xx&gt;     <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h2 id="3-3-下载-python-和-pip">3.3 下载 python 和 pip</h2><p>在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pip</span><br></pre></td></tr></table></figure><blockquote><p>注：需要先激活环境。此时 conda 会自动为该环境配置 python 和 pip，为之后使用 pip 下载 torch 作准备。</p></blockquote><h1>4 官网查询下载 Pytorch 命令</h1><p>去往 <a href="https://pytorch.org/">Pytorch 官网</a>，向下滑动找到【Install PyTorch】</p><h2 id="4-1-macOS-安装指令">4.1 macOS 安装指令</h2><p>根据实际情况，选择对应配置，复制代码后在【终端】运行即可。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986071255.png" alt=""></p><ul><li>一定要在【步骤三：创建环境并激活】后执行</li><li>目前 Pytorch 官方已不提供 conda 下载方式，但 conda 的环境管理仍然有效，采用 pip 安装同样可行</li></ul><h2 id="4-2-Windows-安装指令">4.2 Windows 安装指令</h2><p>根据实际情况，选择对应配置，复制代码后在【PowerShell】运行即可。</p><h3 id="4-2-1-安装在-CPU">4.2.1 安装在 CPU</h3><p>选择 CPU 后复制命令</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986244205.png" alt=""></p><h3 id="4-2-2-安装在-GPU">4.2.2 安装在 GPU</h3><p>在命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>则会返回英伟达显卡的 <code>CUDA</code> 版本，根据版本号选择</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/22a53eeea951769ba92e14a70427c89a_720.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986564831.png" alt=""></p><h1>5 删除环境</h1><p>因为是虚拟环境，删除环境不会对其他配置造成影响，在终端或命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> conda </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全平台下载安装 Python 全流程指南：Windows &amp; MacOS</title>
      <link href="/posts/7d46a7ea.html"/>
      <url>/posts/7d46a7ea.html</url>
      
        <content type="html"><![CDATA[<h1>1 MacOS 系统安装 Python</h1><p>一般而言，macOS 系统默认安装了 Python，可通过打开【终端】/【Terminal】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>此时会显示 <code>Python 3.12.8</code> 则说明已经配置且加入了环境变量。</p><p>如果没有，则需要前往官网下载。</p><h2 id="1-1-官网下载">1.1 官网下载</h2><ul><li>打开 <a href="https://www.python.org/">Python 官方网站</a></li><li>点击顶部菜单<a href="https://www.python.org/downloads/">Downloads</a> 选择 <a href="https://www.python.org/downloads/macos/">macOS</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738982544046.png" alt=""></p><ul><li>向下滑动，选择版本并下载【推荐】选择 Stable Releases，更为稳定</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738982629264.png" alt=""></p><blockquote><p>注：macOS 的安装程序以 <code>.pkg</code> 为后缀，例如如果选择图中版本，下载的文件名应该为 <code>python-3.12.9-macos11.pkg</code></p></blockquote><p>或者直接点击我的 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/python-3.12.9-macos11.pkg">链接</a> 下载版本为 <code>Python 3.12.9</code></p><h2 id="1-2-运行安装包">1.2 运行安装包</h2><ul><li><p>双击下载的 <code>.pkg</code> 文件（如 <code>python-3.12.9-macos11.pkg</code>）</p></li><li><p>macOS 的下载不需要配置，会自动推荐到环境变量，故一直默认即可</p></li></ul><h2 id="1-3-验证是否安装成功">1.3 验证是否安装成功</h2><p>打开【终端】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>此时会显示 <code>Python 3.12.9</code> 则说明成功</p><h1>2 Windows 系统安装 Python</h1><h2 id="2-1-官网下载">2.1 官网下载</h2><ul><li>打开 <a href="https://www.python.org/">Python 官方网站</a></li><li>点击顶部菜单<a href="https://www.python.org/downloads/">Downloads</a> 选择 <a href="https://www.python.org/downloads/windows/">Windows</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738983514762.png" alt=""></p><ul><li>向下滑动，选择版本并下载【推荐】选择 Stable Releases，更为稳定</li></ul><p>注意查看自己的电脑配置，选择合适的安装包，可以前往 <a href="https://support.microsoft.com/zh-cn/topic/%E7%A1%AE%E5%AE%9A%E6%82%A8%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E6%98%AF-32-%E4%BD%8D%E7%89%88%E6%9C%AC%E8%BF%98%E6%98%AF-64-%E4%BD%8D%E7%89%88%E6%9C%AC%E7%9A%84-windows-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1b03ca69-ac5e-4b04-827b-c0c47145944b">微软 Microsoft 官网</a>查询</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738983582659.png" alt=""></p><blockquote><p>Windows 的安装包为可执行文件，以 <code>.exe</code> 为文件后缀</p></blockquote><p>或者直接点击我的 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/python-3.12.9-amd64.exe">链接</a> 下载，版本为 <code>Python 3.12.9</code> 架构为 <code>amd64</code></p><h2 id="2-1-运行安装包">2.1 运行安装包</h2><ul><li>双击下载的 <code>.exe</code> 文件（如 <code>python-3.12.9-amd64.exe</code>）</li></ul><blockquote><p>因为我已经下载安装了 <code>Python 3.12</code> 故后文使用 <code>Python 3.13</code> 展示安装和配置流程，二者的安装和配置没有区别</p></blockquote><ul><li>【注意】一定要勾选 【Add python.exe to PATH】以增加环境变量</li><li>可以直接点击【Install Now】</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/9b2fd9c56f7b91c26f2c6b4c7a82472c_720.png" alt=""></p><blockquote><p>如果需要配置其他可选【Customize installation】：可以配置安装路径，选择性安装一些产品。</p></blockquote><h2 id="2-3-验证是否安装成功">2.3 验证是否安装成功</h2><p>打开【命令提示符 CMD】或 【PowerShell】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><h1>3 在终端使用 Python</h1><p>直接在【Terminal (MacOS)】和【PowerShell (Windows)】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br></pre></td></tr></table></figure><p>即可进入终端的 <code>Python</code> 编程环境</p><h1>4 创建虚拟环境</h1><p>利用 <code>Conda</code> 创建虚拟环境，可以更好的管理一些包。详细教程见 <a href="https://blog.iskage.online/posts/2c3265b7.html">Conda 创建虚拟环境全流程</a></p><p>或者直接使用 conda 下载，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名</span><br><span class="line">conda activate 环境名</span><br><span class="line">conda install pip</span><br></pre></td></tr></table></figure><p>其中 <code>conda install pip</code> 会自动下载 python 和 pip</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟环境 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（1）：Tensor 张量数据结构</title>
      <link href="/posts/652f5539.html"/>
      <url>/posts/652f5539.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（1）Tensor 张量数据结构</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>参考 <a href="https://www.deepseek.com/">DeepSeek</a> 整理补充</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>首先，检查 <code>Pytorch</code> 是否安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.2</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><p><code>Tensor</code> 是可以理解为一个类似 <code>Numpy</code> 中的高维数组。</p><h2 id="1-创建">1 创建</h2><ul><li><code>torch.Tensor()</code> 分配空间</li></ul><p>生成维度2x3的张量，并未赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.Tensor(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[0., 0., 0.],</span></span><br><span class="line"><span class="comment">#         [0., 0., 0.]])</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.tensor()</code> 需要具体的值进行创建</li></ul><p>输入具体的值，直接生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># dtype 指定类型</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[1., 2., 3.],</span></span><br><span class="line"><span class="comment">#         [4., 5., 6.]])</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.rand()</code> 使用正态分布随机初始化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">z = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[0.1587, 0.9499, 0.1939],</span></span><br><span class="line"><span class="comment">#         [0.9741, 0.9309, 0.7463]])</span></span><br></pre></td></tr></table></figure><h2 id="2-查看形状">2 查看形状</h2><ul><li>调用方法 <code>.shape</code> 或 <code>.size()</code>查看张量形状/维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 3])</span></span><br></pre></td></tr></table></figure><ul><li>产看具体某个维度数（例如列数）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.size()[<span class="number">1</span>])  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x.size(<span class="number">1</span>))   <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x.shape[<span class="number">1</span>])  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="3-加法">3 加法</h2><ul><li>使用<code>+</code> 作加法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 或者 torch.ones(2, 3)</span></span><br><span class="line">y = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[2., 3., 4.],</span></span><br><span class="line"><span class="comment">#         [5., 6., 7.]])</span></span><br></pre></td></tr></table></figure><blockquote><p>这种加法不改变 <code>x, y</code> 的值</p></blockquote><ul><li>使用 <code>torch.add(x, y)</code> 作加法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z = torch.Tensor(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 先分配好一个空间，不赋值</span></span><br><span class="line">torch.add(x, y, out=z)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[2., 3., 4.],</span></span><br><span class="line"><span class="comment">#         [5., 6., 7.]])</span></span><br></pre></td></tr></table></figure><blockquote><p>这种加法不改变 <code>x, y</code> 的值</p></blockquote><ul><li>调用方法 <code>.add()</code> 和 <code>.add_()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(y.add(x))  <span class="comment"># y 不变</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y.add_(x)) <span class="comment"># y 变为 x + y</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><blockquote><p>增加了 <code>_</code> 的方法会进行替换操作</p></blockquote><h2 id="4-索引">4 索引</h2><p>Tensor 的索引操作与 NumPy 类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引</span></span><br><span class="line">x = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># tensor([[0.3479, 0.8074, 0.2170],</span></span><br><span class="line"><span class="comment">#         [0.3419, 0.9281, 0.1364]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x[:, <span class="number">1</span>])  <span class="comment"># tensor([0.8074, 0.9281]) # 行全取，列取第一列（从0计数）</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>, :])  <span class="comment"># tensor([0.3419, 0.9281, 0.1364])  # 列全取，行取第一行（从0计数）</span></span><br></pre></td></tr></table></figure><h2 id="5-和-Numpy-的转换">5 和 <code>Numpy</code> 的转换</h2><ul><li><code>torch.Tensor -&gt; numpy.ndarray</code></li></ul><p>使用 <code>.numpy()</code> 方法从Tensor变为numpy.ndarray</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy 相互转换</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">y = x.numpy()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># tensor([[1., 1., 1.]])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))<span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))  <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray -&gt; torch.Tensor</code></li></ul><p>使用 <code>torch.from_numpy()</code> 函数从numpy.ndarray变为Tensor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">y = np.ones((<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">x = torch.from_numpy(y)</span><br><span class="line"><span class="built_in">print</span>(y)        <span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))  <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># tensor([[1., 1., 1.]], dtype=torch.float64)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>共享内存，通过上面方式转换后，<code>x, y</code> 是共享内存的，tenor改变，numpy.ndarray也改变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># tensor([[1., 1., 1.]])</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line">temp = torch.rand(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">x.add_(temp)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># tensor([[1.5567, 1.5514, 1.0607]])</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># [[1.5567319 1.5514015 1.0607271]]</span></span><br></pre></td></tr></table></figure><h2 id="6-零维度张量-标量">6 零维度张量/标量</h2><p>Tensor 数据类型中维度为 <code>0</code> 称为标量（注意，虽然维度为0，但仍然不是 <code>int</code> 或是 <code>float</code> 这些一般 Python 数据类型）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scaler = torch.tensor(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(scaler)          <span class="comment"># tensor(9)</span></span><br><span class="line"><span class="built_in">print</span>(scaler.shape)   <span class="comment"># torch.Size([])</span></span><br></pre></td></tr></table></figure><p>如果想获得一般 Python 数据类型，可以使用方法 <code>.item()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(scaler.item())        <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(scaler.item()))   <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt; 变为 int</span></span><br></pre></td></tr></table></figure><blockquote><p>注意区分 0 维度标量和 1 维度张量</p><p>但是针对 1 维度张量，也可以使用 <code>.item()</code> 方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector = torch.tensor([<span class="number">9</span>])</span><br><span class="line">scaler = torch.tensor(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(vector)  <span class="comment"># tensor([9])</span></span><br><span class="line"><span class="built_in">print</span>(vector.shape)  <span class="comment"># torch.Size([1])</span></span><br><span class="line"><span class="built_in">print</span>(scaler)        <span class="comment"># tensor(9)</span></span><br><span class="line"><span class="built_in">print</span>(scaler.shape)  <span class="comment"># torch.Size([])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 1 维度张量，也可以使用 `.item()` 方法 </span></span><br><span class="line"><span class="built_in">print</span>(vector.item()) <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(vector.item()))  <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt; 变为 int</span></span><br></pre></td></tr></table></figure><h2 id="7-张量间的复制-detach-clone">7 张量间的复制 <code>.detach()</code> <code>.clone()</code></h2><ul><li><code>.clone()</code> 不共享内存，二者互不影响</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">old = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">new = old.clone()  <span class="comment"># 不共享内存，二者互不影响</span></span><br><span class="line">new[<span class="number">0</span>] = <span class="number">233</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(old)</span><br><span class="line"><span class="comment"># tensor([[1, 2, 3],</span></span><br><span class="line"><span class="comment">#          [4, 5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br></pre></td></tr></table></figure><ul><li><code>.detach()</code> 共享内存，一者变则全变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">old = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">new = old.detach() <span class="comment"># 共享内存，一者变则全变</span></span><br><span class="line">new[<span class="number">0</span>] = <span class="number">233</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(old)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br></pre></td></tr></table></figure><h2 id="8-维度转变">8 维度转变</h2><p>PyTorch提供了许多维度变换方式：<code>view, reshape, permute, transpose</code></p><h3 id="8-1-维度交换-permute-transpose">8.1 维度交换 <code>permute</code> <code> transpose</code></h3><p>使用 <code>permute</code> <code> transpose</code> 对张量维度进行交换，例如维度为 2x3x4x5 ，希望变为 3x2x5x4，可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment"># .randn 标准正态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># permute</span></span><br><span class="line">new1 = previous.permute((<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>))  <span class="comment"># 填入一个元组，元组里的每个数字对应原来张量的维度序号，新的维度为(第1维度,第0维度,第3维度,第2维度)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># transpose</span></span><br><span class="line">new2 = previous.transpose(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># 第0维度和第1维度交换</span></span><br><span class="line">new2 = new2.transpose(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 第2维度和第3维度交换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new1.shape)  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br><span class="line"><span class="built_in">print</span>(new2.shape)  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br></pre></td></tr></table></figure><h3 id="8-2-维度变换-view-reshape">8.2 维度变换 <code>view</code> <code>reshape</code></h3><ul><li><code>reshape</code> 无要求，可直接使用</li><li><code>view</code>只能用于内存中连续存储的 Tensor</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意总维度要正确：例如 2x3x4x5 = 120 = 6x20</span></span><br><span class="line">new1 = previous.reshape(-<span class="number">1</span>, <span class="number">10</span>)  <span class="comment"># -1 表示自动计算维度，reshape 和 view 均可使用</span></span><br><span class="line">new2 = previous.view(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new1.shape)  <span class="comment"># torch.Size([12, 10])</span></span><br><span class="line"><span class="built_in">print</span>(new2.shape)  <span class="comment"># torch.Size([6, 20])</span></span><br></pre></td></tr></table></figure><blockquote><p>如果经过了 <code>permute</code> <code> transpose</code> 维度交换，则需要先连续化内存，使用 <code>.contiguous()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存不连续</span></span><br><span class="line">new = previous.permute((<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>))  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续化然后变换维度</span></span><br><span class="line">current = new.contiguous().view(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># current = new.reshape(6, 20)  # 或者直接 reshape</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(current.shape)  <span class="comment"># torch.Size([6, 20])</span></span><br></pre></td></tr></table></figure><h3 id="8-3-维度压缩、扩展、拼接-squeeze-unsqueeze-cat">8.3 维度压缩、扩展、拼接 <code>squeeze</code> <code>unsqueeze</code> <code>cat</code></h3><ul><li>维度压缩 <code>torch.squeeze()</code></li></ul><p><code>torch.squeeze(input, dim=None)</code> 用于移除张量中大小为1的维度。如果不指定 <code>dim</code>，则会移除所有大小为1的维度；如果指定了 <code>dim</code>，则只会移除该维度（如果该维度大小为1）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">x = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># torch.Size([1, 3, 1, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除所有大小为1的维度</span></span><br><span class="line">y = torch.squeeze(x)</span><br><span class="line"><span class="built_in">print</span>(y.shape)   <span class="comment"># torch.Size([3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只移除第2个维度（索引从0开始）</span></span><br><span class="line">z = torch.squeeze(x, dim=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)  <span class="comment"># torch.Size([1, 3, 2])</span></span><br></pre></td></tr></table></figure><ul><li>维度扩展 <code>torch.unsqueeze()</code></li></ul><p><code>torch.unsqueeze(input, dim)</code> 用于在指定的位置插入一个大小为1的维度。<code>dim</code> 参数指定了新维度插入的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">2</span>)    <span class="comment"># torch.Size([3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第0维插入一个大小为1的维度</span></span><br><span class="line">y = torch.unsqueeze(x, dim=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(y.shape)           <span class="comment"># torch.Size([1, 3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第1维插入一个大小为1的维度</span></span><br><span class="line">z = torch.unsqueeze(x, dim=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)           <span class="comment"># torch.Size([3, 1, 2])</span></span><br></pre></td></tr></table></figure><ul><li>维度拼接 <code>torch.cat()</code></li></ul><p><code>torch.cat(tensors, dim=d)</code> 用于在指定的维度上拼接多个张量。所有张量在除了 <code>dim=d</code> 维度之外的其它维度上<strong>必须具有相同的形状</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">1</span>, <span class="number">4</span>)       <span class="comment"># dim=1 维度均为 3 故可以在dim=0上拼接</span></span><br><span class="line">y = torch.randn(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第0维上拼接</span></span><br><span class="line">z = torch.cat((x, y), dim=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)           <span class="comment"># torch.Size([3, 4])  # 1 + 2 = 3</span></span><br></pre></td></tr></table></figure><h2 id="9-GPU-加速">9 GPU 加速</h2><p>利用 GPU 的并行计算能力能加速模型的计算。Pytorch提供了2种将tensor推至GPU的方法。</p><ul><li><code>.cuda()</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x.cuda()  <span class="comment"># 将 Tensor 转移到默认的 GPU</span></span><br></pre></td></tr></table></figure><ul><li><code>.to(device)</code> 方法【推荐】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">x = x.to(device)  <span class="comment"># 将 Tensor 转移到指定的设备，如果失败则继续在CPU计算</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> torch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(torch.cuda.is_available)</span><br><span class="line">&lt;function is_available at <span class="number">0x0000024B63F50720</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>device</span><br><span class="line">device(<span class="built_in">type</span>=<span class="string">&#x27;cuda&#x27;</span>, index=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.to(device)</span><br><span class="line">tensor([[-<span class="number">0.1888</span>,  <span class="number">0.0827</span>, -<span class="number">1.2929</span>],</span><br><span class="line">        [ <span class="number">2.1295</span>,  <span class="number">1.6174</span>, -<span class="number">1.4917</span>]], device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（3）运算符与 SQL 的正则表达式</title>
      <link href="/posts/a7d82995.html"/>
      <url>/posts/a7d82995.html</url>
      
        <content type="html"><![CDATA[<h1>运算符与 SQL 的正则表达式</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h2 id="1-算术运算符">1 算术运算符</h2><p>包括：<code>+, -, *, /, %</code> 加、减、乘、除、取模运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a <span class="operator">+</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">-</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">*</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">/</span> b; <span class="comment">-- or SELECT a DIV b;</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">%</span> b; <span class="comment">-- or SELECT a MOD b;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-加减运算">1.1 加减运算 <code>+ -</code></h3><ul><li><p><code>int + int = int</code> <code>float + float = float</code> 但 <code>int + float = float</code></p></li><li><p>只针对数值型计算，若为字符串，则先转化，若转换失败，则按照 <code>0</code> 计算</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">1.2</span>, <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="number">4</span>, <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">1.2</span> <span class="operator">|</span> <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="number">4</span> <span class="operator">|</span> <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;4&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="number">3</span> <span class="operator">|</span> <span class="comment">-- &#x27;a&#x27; 转换失败，按照 0 计算</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">101.2</span> <span class="operator">|</span>       <span class="number">7</span> <span class="operator">|</span>         <span class="number">7</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-2-乘除运算">1.2 乘除运算 <code>* /</code></h3><ul><li><code>int * int = int</code> <code>int * float = float</code> 而 <code>/</code> 除法最后一定是 <code>float</code> 类型结果</li><li><code>number / 0 = NULL</code> 除以 <code>0</code> 则为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1</span>, <span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span>, <span class="number">100</span> <span class="operator">/</span> <span class="number">1</span>, <span class="number">100</span> DIV <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">/</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">100</span> DIV <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span>     <span class="number">100.0</span> <span class="operator">|</span> <span class="number">100.0000</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-3-取模运算">1.3 取模运算 <code>%</code></h3><ul><li><code>A % B</code> 表示 <code>A</code> 除以 <code>B</code> 的余数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">20</span>, <span class="number">100</span> <span class="operator">%</span> <span class="number">99</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">20</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="2-比较运算符">2 比较运算符</h2><p>比较结果为<strong>真</strong>返回<code>1</code></p><p>比较结果为<strong>假</strong>返回<code>0</code></p><p><strong>其他情况</strong>返回 <code>NULL</code></p><p>包括：<code>=, &lt;=&gt;, &lt;&gt;(!=), &lt;, &lt;=, &gt;, &gt;=</code> 等号、安全等号、不等号、小于、小于等于、大于、大于等于</p><h3 id="2-1-等号比较">2.1 等号比较 <code>=</code></h3><p>判断等号两边的值、字符串或表达式是否相等，如果相等则返回 <code>1</code>，不相等则返回 <code>0</code></p><ul><li>字符串与字符串比较，值与值比较</li><li>若为字符串与值比较，则将字符串转换为值 <code>int = str -&gt; int = int(str)</code> 注意：转换失败则为 <code>0</code></li><li>有一个为 <code>NULL</code> 则返回 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span>, <span class="number">2</span> <span class="operator">=</span> <span class="number">3</span>, <span class="number">2</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bc&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bc&#x27;</span>, <span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> <span class="comment">-- &#x27;a&#x27; 转换失败则为 0</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-2-安全等号">2.2 安全等号 <code>&lt;=&gt;</code></h3><p><code>&lt;=&gt;</code> 会把 <code>NULL</code> 当作一个特殊的元素，参与比较，不再返回 <code>NULL</code> 。其他返回结果与等于运算符相同。</p><ul><li>安全等号 <code>&lt;=&gt;</code> 两边的操作数的值都为<code>NULL</code> 时，返回的结果为 <code>1</code> 。</li><li>安全等号 <code>&lt;=&gt;</code> 一边为 <code>NULL</code> ，一边不为 <code>NULL</code> 时，返回 <code>0</code> 。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-3-不等于比较-or">2.3 不等于比较 <code>!= or &lt;&gt;</code></h3><p>判断等号两边的值、字符串或表达式是否不相等，如果不相等则返回 <code>1</code>，相等则返回 <code>0</code></p><ul><li>与等号比较类似，面对 <code>NULL</code> 无论比较结果如何，最后均返回 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">2</span>, <span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span>, <span class="number">2</span> <span class="operator">!=</span> <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bc&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;bc&#x27;</span>, <span class="number">0</span> <span class="operator">!=</span><span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="string">&#x27;2&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">!=</span><span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-4-大于小于">2.4 大于小于 <code>&gt;, &lt;, &gt;=, &lt;=</code></h3><p>性质和等于 <code>=</code>，不等于 <code>!= or &lt;&gt;</code> 相同</p><ul><li>比较结果为<strong>真</strong>返回<code>1</code> 比较结果为<strong>假</strong>返回<code>0</code> <strong>其他情况</strong>返回 <code>NULL</code></li><li>面对 <code>NULL</code> 无论比较结果如何，最后均返回 <code>NULL</code></li></ul><h2 id="3-其他类型运算符">3 其他类型运算符</h2><h3 id="3-1-空运算符-ISNULL-IS-NULL">3.1 空运算符 <code>ISNULL, IS NULL</code></h3><p>是否为 <code>NULL</code> ，如果为 <code>NULL</code> 则返回 <code>1</code> ，否则返回 <code>0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>, ISNULL(<span class="keyword">NULL</span>), ISNULL(<span class="string">&#x27;a&#x27;</span>), <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span> ISNULL(<span class="keyword">NULL</span>) <span class="operator">|</span> ISNULL(<span class="string">&#x27;a&#x27;</span>) <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>结合之前的安全等号，从表中寻找 <code>NULL</code> 有如下方法 （注：等号，不等号，大小于符号无法处理空值问题）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> ISNULL(commission_pct);</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">=</span> <span class="keyword">NULL</span>; <span class="comment">-- 查询失败</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738900575560.png" alt=""></p><h3 id="3-2-非空运算符-IS-NOT-NULL">3.2 非空运算符 <code>IS NOT NULL</code></h3><p>是否为 <code>NULL</code> ，如果为 <code>NULL</code> 则返回 <code>0</code> ，否则返回 <code>1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>, <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>, <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-最小值运算符-LEAST">3.3 最小值运算符 <code>LEAST()</code></h3><p>返回 <code>LEAST(a1, a2, ..., ai, ..., an)</code> 中的最小值</p><ul><li>当 <code>ai</code> 是 <code>int</code> 或者 <code>float</code> 时，<code>LEAST</code> 将返回其中最小的值</li><li>当 <code>ai</code> 为 <code>str</code> 时，返回字母表中顺序最靠前的字符</li><li>当列表中有 <code>NULL</code> 时，返回值为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> LEAST(<span class="number">1</span>, <span class="number">2</span>), LEAST(<span class="number">1.2</span>, <span class="number">3</span>), LEAST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>), LEAST(<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> LEAST(<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> LEAST(<span class="number">1.2</span>, <span class="number">3</span>) <span class="operator">|</span> LEAST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>) <span class="operator">|</span> LEAST(<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>           <span class="number">1.2</span> <span class="operator">|</span> ac               <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-4-最大值运算符-GREATEST">3.4 最大值运算符 <code>GREATEST()</code></h3><p>返回 <code>GREATEST(a1, a2, ..., ai, ..., an)</code> 中的最大值</p><ul><li>当 <code>ai</code> 是 <code>int</code> 或者 <code>float</code> 时，<code>GREATEST</code> 将返回其中最大的值</li><li>当 <code>ai</code> 为 <code>str</code> 时，返回字母表中顺序最靠后的字符</li><li>当列表中有 <code>NULL</code> 时，返回值为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> GREATEST(<span class="number">1</span>, <span class="number">2</span>), GREATEST(<span class="number">1.2</span>, <span class="number">3</span>), GREATEST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>), GREATEST(<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> GREATEST(<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> GREATEST(<span class="number">1.2</span>, <span class="number">3</span>) <span class="operator">|</span> GREATEST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>) <span class="operator">|</span> GREATEST(<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span>              <span class="number">2</span> <span class="operator">|</span>              <span class="number">3.0</span> <span class="operator">|</span> b                   <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-5-判断是否区间中的值-BETWEEN-AND">3.5 判断是否区间中的值 <code>BETWEEN ... AND ...</code></h3><p>寻找位于 <code>[a, b]</code> 中与否，即大于等于 <code>a</code> 小于等于 <code>b</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">BETWEEN</span> a <span class="keyword">AND</span> b;</span><br></pre></td></tr></table></figure><p>例如，是则为 <code>1</code> 否则返回 <code>0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">5</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span>, <span class="number">0.4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">6</span>, <span class="string">&#x27;x&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">0.4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">6</span> <span class="operator">|</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;z&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span>                   <span class="number">0</span> <span class="operator">|</span>                       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>完整的查表运用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">2500</span> <span class="keyword">AND</span> <span class="number">3500</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738901321018.png" alt=""></p><h3 id="3-6-属于运算符-IN">3.6 属于运算符 <code>IN</code></h3><p>判断元素是否属于列表中，类似的，只要存在 <code>NULL</code> 则返回值为 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>                 <span class="number">1</span> <span class="operator">|</span>            <span class="keyword">NULL</span> <span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-7-不属于运算符-NOT-IN">3.7 不属于运算符 <code>NOT IN</code></h3><p>判断元素是否不属于列表，类似的，只要存在 <code>NULL</code> 则返回值为 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>), <span class="keyword">NULL</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-8-模糊匹配-LIKE">3.8 模糊匹配 <code>LIKE</code></h3><p>模糊匹配<u>字符串</u>，如果满足条件则返回 <code>1</code> ，否则返回 <code>0</code> 。同样，遇 <code>NULL</code> 则 <code>NULL</code></p><ul><li>通配符：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;%&#x27;</span> <span class="comment">-- 匹配 0 个或多个字符。</span></span><br><span class="line"><span class="string">&#x27;_&#x27;</span> <span class="comment">-- 只能匹配一个字符。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;  <span class="comment">-- 匹配 first_name 字段以 S 开头的字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738903197390.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;  <span class="comment">-- 匹配 last_name 字段形如 &#x27;一个字母 + o&#x27; 开头的字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738903166457.png" alt=""></p><h3 id="3-9-利用-ESCAPE-处理特殊字符">3.9 利用 <code>ESCAPE</code> 处理特殊字符</h3><p>当需要查询的元素中包含特殊字符，如 <code>%, _, $</code> 等。可以使用 <code>\</code> 或其他字符（除 <code>\</code> 其他字符需要 <code>ESCAPE</code> 指明为转义字符）处理。</p><ul><li>例如：我们需要查询形如 <code>增长50%左右</code> ，即匹配以任意字符开头，接着是 <code>50%</code>，最后是任意字符的字符串。所以可以采取 <code>'%50\%%'</code> 或 <code>'%50$%%' ESCAPE '$'</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;IT$_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;$&#x27;</span>;  <span class="comment">-- 指定 &#x27;$&#x27; 为转义字符，&#x27;$&#x27; 后的 &#x27;_&#x27; 为普通字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;IT@_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;@&#x27;</span>;  <span class="comment">-- 指定 &#x27;@&#x27; 为转义字符，&#x27;@&#x27; 后的 &#x27;_&#x27; 为普通字符</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> job_id  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> IT_PROG <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-逻辑运算符">4 逻辑运算符</h2><p>逻辑运算符的返回结果为 <code>1, 0, NULL</code></p><p>逻辑运算符大多符合直觉，并不复杂</p><h3 id="4-1-非-运算符-NOT-或">4.1 非 运算符 <code>NOT</code> 或 <code>!</code></h3><ul><li><code>!0 -&gt; 1</code> 值为0时返回1</li><li><code>!非0 -&gt; 0</code> 值为非0值时返回0</li><li><code>!NULL -&gt; NULL</code> 值为NULL时，返回NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NOT</span> <span class="number">1</span>, <span class="keyword">NOT</span> <span class="number">0</span>, <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>), <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span>, <span class="keyword">NOT NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>) <span class="operator">|</span> <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-2-与-运算符-AND-或">4.2 与 运算符 <code>AND</code> 或 <code>&amp;&amp;</code></h3><ul><li><p><code>非0非NULL &amp;&amp; 非0非NULL -&gt; 1</code> 所有值均为非0值，并且都不为NULL时，返回1</p></li><li><p><code>0 &amp;&amp; ... -&gt; 0</code>一个值或者多个值为0时则返回0</p></li><li><p><code>NULL &amp;&amp; ... -&gt; NULL</code>否则返回NULL</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>例如：查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;=</span><span class="number">10000</span></span><br><span class="line">  <span class="keyword">AND</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%MAN%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738906355775.png" alt=""></p><h3 id="4-3-或-运算符-OR-或">4.3 或 运算符 <code>OR</code> 或 <code>||</code></h3><ul><li><code>非0非NULL || 非NULL -&gt; 1</code> 值都不为NULL，并且任何一个值为非0值时，则返回1</li><li><code>0 || 0 -&gt; 0</code> 否则返回0；</li><li><code>非0非NULL || NULL -&gt; 1</code> 当一个值为NULL，并且另一个值为非0值时，返回1，否则为NULL</li><li><code>NULL || NULL</code> 当两个值都为NULL时，返回NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">3</span>, <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span>, <span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">NULL</span>, <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>         <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">2</span> warnings (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>AND</code> 的优先级高于 <code>OR</code> ，先处理与逻辑，再考虑或逻辑</p></blockquote><h3 id="4-4-异或-运算符-XOR">4.4 异或 运算符 <code>XOR</code></h3><ul><li>存在 <code>NULL</code>时，则返回 <code>NULL</code></li><li>都<code>非0非NULL</code>，则返回 <code>0</code></li><li><code>0 XOR 0 -&gt; 0</code> 都 <code>0</code> 则返回 <code>0</code></li><li>一个为 <code>0</code>，另一个 <code>非0非NULL</code> ，则返回 <code>1</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> XOR <span class="number">1</span>, <span class="number">2</span> XOR <span class="number">3</span>, <span class="number">0</span> XOR <span class="number">0</span>, <span class="number">0</span> XOR <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> XOR <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span> XOR <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">0</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="5-位运算符">5 位运算符</h2><p>位运算符会先将操作数变成<strong>二进制数</strong>，然后进行位运算，最后将计算结果从二进制变回<strong>十进制数</strong></p><p>位运算在所有语言中均类似，不过多介绍。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&amp;</span> b;   <span class="comment">-- 按位与</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">|</span> b;   <span class="comment">-- 按位或</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">^</span> b;   <span class="comment">-- 按位异或</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">~</span> a;     <span class="comment">-- 按位取反</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&gt;&gt;</span> <span class="number">2</span>;  <span class="comment">-- 按位右移</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&lt;&lt;</span> <span class="number">2</span>;  <span class="comment">-- 按位左移</span></span><br></pre></td></tr></table></figure><h2 id="6-优先级">6 优先级</h2><p>优先级越高，越先运算</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738911612091.png" alt="优先级由高到低 1-&gt;8"></p><blockquote><p>建议使用多个计算式，均使用 <code>()</code></p></blockquote><h2 id="7-正则表达式">7 正则表达式</h2><p>正则表达式在各种语言中均类似，下面介绍 <code>SQL</code> 语言中 <code>REGEXP</code> 的使用</p><h3 id="7-1-REGEXP-的使用">7.1 <code>REGEXP</code> 的使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 REGEXP 匹配条件(正则表达式);</span><br></pre></td></tr></table></figure><h3 id="7-2-常见正则表达式">7.2 常见正则表达式</h3><h4 id="7-2-1-匹配起始字符">7.2.1 匹配起始字符 <code>^</code></h4><ul><li>表达式 <code>^K</code> 以 <code>K</code> 起始的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^K&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912114205.png" alt=""></p><h4 id="7-2-2-匹配结尾字符">7.2.2 匹配结尾字符 <code>$</code></h4><ul><li>表达式 <code>t$</code> 以 <code>t</code> 结尾的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> first_name REGEXP <span class="string">&#x27;t$&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912256452.png" alt=""></p><h4 id="7-2-3-匹配单个字符">7.2.3 匹配单个字符 <code>.</code></h4><ul><li>表达式 <code>a.b</code> 包含字母 <code>a</code> 和 <code>b</code> 且 <code>a</code> 和 <code>b</code> 之间只有一个字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;a.b&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912435878.png" alt=""></p><h4 id="7-2-4-匹配多个字符">7.2.4 匹配多个字符 <code>+</code> <code>*</code></h4><ul><li>表达式 <code>ba+</code> 包含字符串 <code>...ba...</code> 其中 <code>+</code> 要求多个 <code>a</code></li></ul><blockquote><p><code>+</code> 要求 <strong>1次或多次</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^ba+&#x27;</span>; <span class="comment">-- 包含 ba... ^b 要求必须以 b 开头</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912757500.png" alt=""></p><ul><li>表达式 <code>b*an</code> 包含 <code>...b...an</code> 其中 <code>*</code> 要求多个 <code>b</code></li></ul><blockquote><p><code>*</code> 要求 <strong>0次或多次</strong></p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913126980.png" alt=""></p><h4 id="7-2-5-匹配特定字符串">7.2.5 匹配特定字符串 <code>''</code></h4><ul><li>表达式 <code>'un'</code> 包含 <code>un</code> 即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;un&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注：可以使用逻辑运算符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;un|am&#x27;</span>;  <span class="comment">-- 包含 un 或 am</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913338905.png" alt=""></p><h4 id="7-2-6-匹配集合中任一元素">7.2.6 匹配集合中任一元素 <code>[]</code></h4><ul><li>表达式 <code>[orz]</code> 包含<code>o</code> <code>r</code> <code>z</code> 任一一个即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;[orz]&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913543623.png" alt=""></p><h4 id="7-2-7-匹配完全由集合外的元素构成">7.2.7 匹配完全由集合外的元素构成 <code>[^]</code></h4><ul><li>表达式 <code>[^A-Y]</code> 表示只有当元素是有A-Y以外的元素构成时才被查询到。注意：大小写敏感。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email REGEXP <span class="string">&#x27;[^A-Y]&#x27;</span>; <span class="comment">-- 查询存在 小写字母 或 Z</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738914108381.png" alt=""></p><h4 id="7-2-8-使用-n-或者-n-m-来指定字符串连续出现的次数">7.2.8 使用 <code>&#123;n,&#125;</code> 或者 <code>&#123;n,m&#125;</code> 来指定字符串连续出现的次数</h4><ul><li>表达式 <code>a&#123;2,&#125;</code> 表示字母 <code>a</code> 连续出现至少2次</li><li>表达式 <code>a&#123;2,4&#125;</code> 表示字母 <code>a</code> 连续出现最少2次，最多不能超过4次</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary REGEXP <span class="string">&#x27;0&#123;2,3&#125;&#x27;</span>; <span class="comment">-- 连续 2-3 个 0</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738914541747.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（2）SELECT 语句</title>
      <link href="/posts/151eef00.html"/>
      <url>/posts/151eef00.html</url>
      
        <content type="html"><![CDATA[<h1>SELECT语句</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h2 id="1-SQL-语言">1 SQL 语言</h2><h3 id="1-1-书写规则">1.1 书写规则</h3><ul><li>一行或多行</li><li>以 <code>;</code> 分隔</li><li>字符串型 和 日期时间类型 的数据使用 <code>''</code> 表示</li><li>列的别名使用 <code>&quot;&quot;</code> 表示</li><li>建议关键字、函数名大写</li></ul><h3 id="1-2-注释">1.2 注释</h3><p>单行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注释文字 (MySQL特有)</span><br><span class="line"><span class="comment">-- 注释文字</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释文字 */</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数据导入-运行-sql文件">1.3 数据导入 (运行<code>.sql</code>文件)</h3><p>登陆 <code>MySQL</code> 后，输入指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source xx.sql  <span class="comment">-- 输入路径</span></span><br></pre></td></tr></table></figure><p>在学习语句前，先下载 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/docs/mydb.sql">mydb.sql 文件</a> ，之后使用数据导入的方式，运行 <code>mydb.sql</code> 创建数据库 <code>atguigudb</code> 以便后续操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source .<span class="operator">/</span>xxx<span class="operator">/</span>mydb.sql  <span class="comment">-- mac 电脑</span></span><br><span class="line">mysql<span class="operator">&gt;</span> source C:\Users\Username\xxx\mydb.sql  <span class="comment">-- windows 电脑</span></span><br></pre></td></tr></table></figure><blockquote><p>该文件来自 <a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a></p></blockquote><h2 id="2-基本-SELECT-语句">2 基本 SELECT 语句</h2><blockquote><p>首先先进入刚刚创建的数据库 <code>atguigudb</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> USE atguigudb;</span><br></pre></td></tr></table></figure><h3 id="2-1-SELECT-…-FROM-…">2.1 SELECT … FROM …</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 选择哪些列</span><br><span class="line"><span class="keyword">FROM</span> 从哪个表中选择</span><br></pre></td></tr></table></figure><ul><li>选择所有列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>选择表中特定的列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-2-列的别名">2.2 列的别名</h3><p>可以在列名后紧跟别名，也可以使用关键字 <code>AS</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id emp_id,</span><br><span class="line">    last_name <span class="keyword">AS</span> lname,</span><br><span class="line">    department_id &quot;dept_id&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738834180268.png" alt=""></p><p>也可以对整列进行计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id emp_id,</span><br><span class="line">    salary <span class="operator">*</span> <span class="number">12</span> &quot;annual salary&quot;  <span class="comment">-- 对 salary 整列计算</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-3-去除重复行">2.3 去除重复行</h3><p>默认情况不会去除重复行</p><p>在 <code>SELECT</code> 语句中增加关键字 <code>DISTINCT</code> 即可返回去除重复行后的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 12 rows</span></span><br></pre></td></tr></table></figure><blockquote><p>注：若 <code>DISTINCT</code> 后存在多个字段，只要两行之间有某个字段不同，则不认为重复</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 74 rows</span></span><br></pre></td></tr></table></figure><p>例如：对 <code>department_id, salary</code> 去重，虽然部门只有 <code>12</code> 个，但因为 <code>salary</code> 仍有一些不同，故认为并不重复。</p><h3 id="2-4-空值-null-参与计算">2.4 空值 <code>null</code> 参与计算</h3><p>遇到 <code>null</code> 值，运算的结果都为 <code>null</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, salary &quot;月工资&quot;, salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> commission_pct) <span class="operator">*</span> <span class="number">12</span> &quot;年工资&quot;, commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738834695370.png" alt=""></p><h3 id="2-5-着重号-解决关键字冲突">2.5 着重号 <code>``</code> 解决关键字冲突</h3><p>如果不得不使用关键字命名，则可以使用 <code>``</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">order</span>;</span><br><span class="line"><span class="comment">-- 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">order</span>`;</span><br><span class="line"><span class="comment">-- 正确</span></span><br></pre></td></tr></table></figure><h3 id="2-6-增加常值列">2.6 增加常值列</h3><p>增加一列命名为 <code>temp_const</code> （字符串用 <code>''</code>）用数字 <code>123</code> 填充</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">123</span> <span class="keyword">AS</span> <span class="string">&#x27;temp_const&#x27;</span>, employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738835171143.png" alt=""></p><h2 id="3-查询表结构">3 查询表结构</h2><p>使用 <code>DESCRIBE</code> 或 <code>DESC</code> 命令，查询表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field          <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date      <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary         <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-WHERE-过滤条件">4 <code>WHERE</code> 过滤条件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;King&#x27;</span> <span class="keyword">and</span> first_name <span class="operator">=</span> <span class="string">&#x27;Steven&#x27;</span>; <span class="comment">-- 过滤条件</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">90</span>; <span class="comment">-- 过滤条件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda 创建虚拟环境全流程</title>
      <link href="/posts/2c3265b7.html"/>
      <url>/posts/2c3265b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载-Miniconda">1 下载 Miniconda</h2><p>前往<a href="https://www.anaconda.com/download">官网 https://www.anaconda.com/download</a>下载，需要提交邮箱，验证下载。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738812320257.png" alt=""></p><p>提交成功后，滑至底部，选择 [Miniconda Installers] ，因为它相比 [Anaconda] 更为精简。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/976615dc8f3b26708fe5dd4d932c3b4d_720.png" alt=""></p><blockquote><p>注：需要提前下载 <code>Python</code> ，可前去 <a href="https://www.python.org/downloads/">Python 官网</a> 下载</p></blockquote><h2 id="2-安装-Miniconda">2 安装 Miniconda</h2><p>先点击 [Next] ，而后点击 [I Agree] ，而后选择 [All Users] ，这将为电脑的所有用户安装【推荐】，然后选择 [Next]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/91d3b0a80dc3f5f623c41fb89a44a4f7.png" alt=""></p><p>之后，选择安装路径，可以根据自己的情况来，但要记住安装路径，因为之后要添加【环境变量】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/12b49c1abc490ecd4ca7a9fe63c6436f_720.png" alt=""></p><p>之后，三项【全部勾选】后安装即可。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f6f67e69c09729405b20ae42d4cbf2c2_720.png" alt=""></p><h2 id="3-配置环境变量">3 配置环境变量</h2><p>右键 [此电脑] ，选择 [属性] ，打开 [系统] 窗口，点击 [高级系统设置]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4ba1d54ca6830505fae9a8bc721ad076_720.png" alt=""></p><p>打开 [系统属性] ，选择 [高级] 选项，点击 [环境变量] 在 [环境变量] 窗口，选择 [path] 点击 [编辑] ，在 [编辑环境变量] 窗口中，将 Miniconda 如图所示配置。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/bf764dcc6b2bd4b546cf7fa43530c07e.png" alt=""></p><p>配置【三个路径】一般默认情况为，根据之前安装时的具体路径选择</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\miniconda3</span><br><span class="line">C:\ProgramData\miniconda3\Scripts</span><br><span class="line">C:\ProgramData\miniconda3\Library\bin</span><br></pre></td></tr></table></figure><blockquote><p>注：一定要点击确认，进行保存</p></blockquote><h2 id="4-Conda-的使用">4 Conda 的使用</h2><p>首先检查是否已经成功配置，在命令行/终端中输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; conda -V</span><br><span class="line">conda <span class="number">24.11</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>如果输出版本号，则说明环境配置成功，可正常使用</p><h2 id="5-创建环境">5 创建环境</h2><p>创建虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名 python=<span class="number">3.12</span></span><br></pre></td></tr></table></figure><p><code>环境名</code> 可自己定义，<code>python=x.x</code> 可省略</p><blockquote><p>注：必须在全局已经下载安装了 <code>Python</code></p></blockquote><h2 id="6-激活环境">6 激活环境</h2><p>激活已经创建的虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>退出激活的虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h2 id="7-常见问题：Run-‘conda-init’-before-‘conda-activate’">7 常见问题：Run ‘conda init’ before ‘conda activate’</h2><p>当执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>时会遇到报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CondaError: Run <span class="string">&#x27;conda init&#x27;</span> before <span class="string">&#x27;conda activate&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>解决方法</p></blockquote><p>使用【管理员身份】打开【终端】，执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init</span><br></pre></td></tr></table></figure><p>然后回到重新执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><blockquote><p>如若仍然失败，则检查是否为下文的常见问题：无法加载文件 profile.ps1</p></blockquote><h2 id="8-常见问题：无法加载文件-profile-ps1">8 常见问题：无法加载文件 profile.ps1</h2><p>如果【已经使用管理员身份执行完】命令 <code>conda init</code> ，在重新打开终端时出现以下报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">. : 无法加载文件 C:\Users\Username\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=<span class="number">135170</span> 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:<span class="number">1</span> 字符: <span class="number">3</span></span><br><span class="line">+ . <span class="string">&#x27;C:\Users\15056\Documents\WindowsPowerShell\profile.ps1&#x27;</span></span><br><span class="line">+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>则可以【使用管理员身份】打开终端，执行以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Set</span>-ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure><p>而后关闭终端，重新打开</p><p>如果此时命令行前显示 <code>(base)</code> 则说明配置完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\...</span><br></pre></td></tr></table></figure><p>此时使用，即可成功激活虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><h2 id="9-其他-conda-命令">9 其他 conda 命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs  <span class="comment"># 显示所有环境信息</span></span><br><span class="line">conda remove -n 环境名 --<span class="built_in">all</span>  <span class="comment"># 根据环境名删除虚拟环境，删除环境和所有该环境里安装的包</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> conda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> conda </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（1）如何安装 MySQL</title>
      <link href="/posts/8b09a768.html"/>
      <url>/posts/8b09a768.html</url>
      
        <content type="html"><![CDATA[<h1>详细教程：如何安装 MySQL</h1><p>MySQL 是数据库管理系统 DSMS 之一，本文介绍如何 <strong>下载、安装、配置、登陆、使用</strong> MySQL</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h2 id="1-下载">1 下载</h2><ol><li>前往官网：<a href="https://www.mysql.com">https://www.mysql.com</a></li><li>点击 - <a href="https://www.mysql.com/downloads/">Downloads</a></li></ol><p>点击 - <a href="https://dev.mysql.com/downloads/">MySQL Community (GPL) Downloads</a></p><p>社区版免费，且功能近似，适合学习使用。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738735763767.png" alt=""></p><ol start="3"><li>点击 - <a href="https://dev.mysql.com/downloads/mysql/">MySQL Community Server</a></li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738735912017.png" alt=""></p><ol start="4"><li>选择版本</li></ol><p>推荐使用 <code>8.0.x</code> 版本，相比旧版本 <code>5.0.x</code> 更为完善。点击 - <a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">Go to Download Page</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738736158523.png" alt=""></p><p>选择 <code>.msi</code> 的安装程序。选择图中的程序下载，配有图形化安装流程，支持离线安装。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738736235034.png" alt=""></p><blockquote><p>注：下载需要注册 ORACLE 甲骨文公司账户</p></blockquote><h2 id="2-安装">2 安装</h2><ol><li>找到文件 <code>mysql-installer-community-8.0.41.0.msi</code> ，双击进入安装。</li><li>在 [Choosing a Setup Type] - 窗口中选择 自定义安装 [Custom]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/6fb510a37d115e06be126a4e7bde91eb.png" alt=""></p><ol start="3"><li>在 [Select Products] 窗口中，选择产品。从左边选择想要安装的产品，而后显示在右边。</li></ol><blockquote><p>注：如想自定义安装路径，见后。</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/0dddb331420bff1755778e44b880e51b_720.png" alt=""></p><p>自定义安装路径，则需要选择产品，点击 [Advanced Options]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/ba921bd680af66e88223a0b7e3720285_720.png" alt=""></p><ol start="4"><li>在 [Installation] 窗口，点击 [Execute] 开始安装</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f32f54e134c74322b24711806c2996ce_720.png" alt=""></p><p>安装完成点击 [Next]</p><ol start="5"><li>在 [Product Configuration] 窗口，开始配置，点击 [Next]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/29078465616e9aff29a15b4119d4f07a_720.png" alt=""></p><p>保持默认即可，点击 [Next]</p><p>[Config Type] 为主机类型，[Port: 3306] 为端口号</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/9bcda347f6bbca58df8843f38c178a78_720.png" alt=""></p><ol start="6"><li>在 [Authentication Method] 窗口，可以设置授权方式。默认，直接点击 [Next]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f1754354d7e0302717a9c1fc4c528c02_720.png" alt=""></p><ol start="7"><li>在 [Accounts and Roles] 界面设置管理员密码。用于登陆 MySQL 服务</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/dfb3117e767af332e6b2822ff27a0654_720.png" alt=""></p><ol start="8"><li>在 [Windows Service] 界面设置 [服务] ，保持默认即可。</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/d3129dd2ba331425f9e7892a0b81b087_720.png" alt=""></p><ol start="9"><li>在 [Server File Permissions] 中授权，保持默认即可</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/33bcd45652a5178ddd35788211bbfc93_720.png" alt=""></p><ol start="10"><li>在 [Apply Configuration] 点击 [Execute] 执行之前的配置</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/79ce3831a4322e41691869175c54a604_720.png" alt=""></p><p>点击 [Finish] 完成配置</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/e7357753070eaa02ec50024aa28556a2_720.png" alt=""></p><ol start="11"><li>完成安装</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/40579a68dcdadf9f09e6c3c517e83525_720.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/494e644125931e21cf86124bb5e9d67c.png" alt=""></p><h2 id="3-环境变量">3 环境变量</h2><p>没有配置 MySQL 到环境变量中，终端无法运行 MySQL 命令。</p><ol><li>右键 [此电脑] ，选择 [属性]</li><li>打开 [系统] 窗口，点击 [高级系统设置]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4ba1d54ca6830505fae9a8bc721ad076_720.png" alt=""></p><ol start="3"><li>打开 [系统属性] ，选择 [高级] 选项，点击 [环境变量]</li><li>在 [环境变量] 窗口，选择 [path]</li><li>点击 [编辑] ，在 [编辑环境变量] 窗口中，将 MySQL 的 bin 目录添加进去，使用分号 <code>;</code> 划分</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/3648923a3ca1b07903f3e18b967dd1f9.png" alt=""></p><p>输入 MySQL 的 bin 目录 (根据自己的目录输入)，如果没有更改默认下载路径，则一般为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 8.0\bin</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/e1c8475465d768bc72da4b2b085ae4a1.png" alt=""></p><ol start="6"><li>点击 [确认] ，回到终端尝试使用 MySQL 指令</li></ol><p>检查是否成功，输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> mysql <span class="operator">-</span>V</span><br></pre></td></tr></table></figure><p>返回版本信息则代表成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server <span class="number">8.0</span>\bin\mysql.exe  Ver <span class="number">8.0</span><span class="number">.41</span> <span class="keyword">for</span> Win64 <span class="keyword">on</span> x86_64 (MySQL Community Server <span class="operator">-</span> GPL)</span><br></pre></td></tr></table></figure><h2 id="4-查看服务">4 查看服务</h2><p>需要启动服务，才能登陆 MySQL 并连接数据库。在之前配置时，已经默认服务启动。</p><p>可以检查一下：右键 [此电脑] 点击 [管理] ，双击 [服务和应用程序] ，双击 [服务] ，找到 MySQL 的服务 （默认情况下为 <code>MySQL80</code>）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/c94326af2e1953a05b2a0a087f366e8c_720.png" alt=""></p><p>也可以使用终端实现。右键 [终端]/[命令行工具] 使用 <strong>以管理员身份运行</strong> ，而后使用如下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务 MySQL80 为 MySQL 的服务名</span><br><span class="line"><span class="operator">&gt;</span> net <span class="keyword">start</span> MySQL80</span><br><span class="line"></span><br><span class="line"># 停止服务 MySQL80 为 MySQL 的服务名</span><br><span class="line"><span class="operator">&gt;</span> net stop MySQL80</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4639db1363ba088fad5f91904369a021_720.png" alt=""></p><h2 id="5-登陆-MySQL">5 登陆 MySQL</h2><p>打开 [终端] 输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h 主机名 <span class="operator">-</span>P 端口名 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p密码</span><br></pre></td></tr></table></figure><p>一般而言 主机名为 <code>localhost</code> ，端口名为 <code>3306</code> ，用户名为 <code>root</code> ，密码和 <code>-p</code> 之间不能有空格。</p><p>推荐使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>进行登陆，之后输入密码即可登陆。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><p>登陆成功后为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">8</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.41</span> MySQL Community Server <span class="operator">-</span> GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2025</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-简单尝试">6 简单尝试</h2><ol><li>查看已有数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;  </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名</span><br></pre></td></tr></table></figure><ol start="3"><li>删除数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><ol start="4"><li>进入数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><ol start="5"><li>查看数据库下所有数据表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_test <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> tb1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><ol start="6"><li>创建表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>不能为空/允许为空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>, <span class="comment">-- 不能为空</span></span><br><span class="line">    age <span class="type">int</span> <span class="keyword">null</span>         <span class="comment">-- 可以为空</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>默认值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">3</span>        <span class="comment">-- 设置默认为3</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>主键</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span>,       <span class="comment">-- 不能为空，不能重复</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>一般设置，主键+自增 <code>标准</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ol start="7"><li>删除表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><ol start="8"><li>展示表信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">16</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络 目录</title>
      <link href="/posts/8a1b9ca7.html"/>
      <url>/posts/8a1b9ca7.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主自学 Pytorch 整理的笔记。点击链接即可前往对应文章查看。更多信息，可前往本人的<a href="https://github.com/isKage/iskage.github.io">Github库</a>中查询。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>Pytorch 官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>Pytorch 官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="./3f7272cd.html">1 下载 Pytorch 和数据处理</a></p><p><a href="./ae1c954d.html">2 网络搭建</a></p><p><a href="./119f3166.html">3 损失函数 反向传播 优化器</a></p><p><a href="./bd02f045.html">4 网络调用和保存</a></p><p><a href="./2d229fe6.html">5 完整模型训练</a></p></div>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（5）完整模型训练</title>
      <link href="/posts/2d229fe6.html"/>
      <url>/posts/2d229fe6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch-CIFAR10"><a href="#Pytorch-CIFAR10" class="headerlink" title="Pytorch (CIFAR10)"></a>Pytorch (CIFAR10)</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-Structure"><a href="#1-Structure" class="headerlink" title="1. Structure"></a>1. Structure</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8882617716.png" alt=""></p><h2 id="2-Code"><a href="#2-Code" class="headerlink" title="2 Code"></a>2 Code</h2><h3 id="train-model-py"><a href="#train-model-py" class="headerlink" title="train_model.py"></a>train_model.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建神经网络(output_features=10)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证网络正确性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    classification = Classification10Class()</span><br><span class="line">    <span class="comment"># 按照batch_size=64，channel=3，size=32*32输入，即64张图片，RGB颜色通道，32*32的大小输入</span></span><br><span class="line">    inputs = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    ouputs = classification(inputs)</span><br><span class="line">    <span class="built_in">print</span>(ouputs.shape)</span><br></pre></td></tr></table></figure><h3 id="train-py"><a href="#train-py" class="headerlink" title="train.py"></a>train.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Dataset &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br></pre></td></tr></table></figure><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----------第 1 轮训练开始----------</span><br><span class="line">训练次数: 100, loss: 2.2914345264434814</span><br><span class="line">训练次数: 200, loss: 2.2848589420318604</span><br><span class="line">训练次数: 300, loss: 2.2572102546691895</span><br><span class="line">训练次数: 400, loss: 2.1692259311676025</span><br><span class="line">训练次数: 500, loss: 2.0409679412841797</span><br><span class="line">训练次数: 600, loss: 2.0187602043151855</span><br><span class="line">训练次数: 700, loss: 2.009617567062378</span><br><span class="line">测试集loss: 313.149169921875</span><br><span class="line">----------第 2 轮训练开始----------</span><br><span class="line">训练次数: 800, loss: 1.878823161125183</span><br><span class="line">训练次数: 900, loss: 1.8439174890518188</span><br><span class="line">训练次数: 1000, loss: 1.9330165386199951</span><br><span class="line">训练次数: 1100, loss: 1.9703041315078735</span><br><span class="line">训练次数: 1200, loss: 1.7066203355789185</span><br><span class="line">训练次数: 1300, loss: 1.668871521949768</span><br><span class="line">训练次数: 1400, loss: 1.7355754375457764</span><br><span class="line">训练次数: 1500, loss: 1.7841742038726807</span><br><span class="line">测试集loss: 309.877685546875</span><br><span class="line">----------第 3 轮训练开始----------</span><br><span class="line">训练次数: 1600, loss: 1.7344536781311035</span><br><span class="line">训练次数: 1700, loss: 1.621435284614563</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3-Visualization-amp-Save"><a href="#3-Visualization-amp-Save" class="headerlink" title="3 Visualization &amp; Save"></a>3 Visualization &amp; Save</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Dataset &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(</span><br><span class="line">                tag=<span class="string">&quot;train_loss (every 100): &quot;</span>,</span><br><span class="line">                scalar_value=loss.item(),</span><br><span class="line">                global_step=total_train_step,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 测试集loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_loss (every epoch): &quot;</span>,</span><br><span class="line">        scalar_value=total_test_loss,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">    torch.save(classification, <span class="string">&quot;./models_cifar/classification_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103240716.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103319943.png" style="zoom:80%;"/><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103407633.png" style="zoom:80%;" /><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103503420.png" style="zoom:80%;" /></p><h2 id="4-Full-Code"><a href="#4-Full-Code" class="headerlink" title="4 Full Code"></a>4 Full Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Classification &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数 == epoch</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    classification.train()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(</span><br><span class="line">                tag=<span class="string">&quot;train_loss (every 100 steps)&quot;</span>,</span><br><span class="line">                scalar_value=loss.item(),</span><br><span class="line">                global_step=total_train_step,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    classification.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    total_accuracy = <span class="number">0</span>  <span class="comment"># 分类问题正确率</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 正确率</span></span><br><span class="line">            accuracy = (outputs.argmax(axis=<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在测试集上的损失</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_loss (every epoch)&quot;</span>,</span><br><span class="line">        scalar_value=total_test_loss,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在测试集上的正确率</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的正确率: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_accuracy / test_data_size))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_accuracy (every epoch)&quot;</span>,</span><br><span class="line">        scalar_value=total_accuracy / test_data_size,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">    torch.save(classification, <span class="string">&quot;./models_cifar/classification_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line">    <span class="comment"># torch.save(classification.state_dict(), &quot;./models_cifar/classification_&#123;&#125;.pth&quot;.format(epoch)) # 推荐</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="5-GPU"><a href="#5-GPU" class="headerlink" title="5 GPU"></a>5 GPU</h2><h3 id="1-Google-Colab"><a href="#1-Google-Colab" class="headerlink" title="1. Google Colab"></a>1. Google Colab</h3><ul><li>Google Colab: <a href="https://colab.research.google.com/">https://colab.research.google.com/</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110119717.png" alt=""></p><ul><li>配置</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110154640.png" alt=""></p><ul><li>cpu 大约42s    gpu 大约8s</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110318142.png" alt=""></p><h3 id="2-Method-1-cuda"><a href="#2-Method-1-cuda" class="headerlink" title="2. Method 1: .cuda()"></a>2. Method 1: .cuda()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; GPU &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    model_name = model_name.cuda()  <span class="comment"># GPU</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    loss_fn = loss_fn.cuda()  <span class="comment"># GPU</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    images = images.cuda()</span><br><span class="line">    targets = targets.cuda()</span><br></pre></td></tr></table></figure><h3 id="3-Method-2-to-device"><a href="#3-Method-2-to-device" class="headerlink" title="3. Method 2: .to(device)"></a>3. Method 2: .to(device)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">model_name = model_name.to(device)</span><br><span class="line">loss_fn = loss_fn.to(device)</span><br><span class="line">images = images.to(device)</span><br><span class="line">targets = targets.to(device)</span><br></pre></td></tr></table></figure><h2 id="6-Validation-and-Test"><a href="#6-Validation-and-Test" class="headerlink" title="6 Validation and Test"></a>6 Validation and Test</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;./image/dog.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载图片并转化类型</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">image = image.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">    torchvision.transforms.ToTensor(),</span><br><span class="line">])</span><br><span class="line">image = transform(image)  <span class="comment"># torch.Size([3, 32, 32])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 加载神经网络(因为是方式1, 所以要申明网络模型)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. load参数</span></span><br><span class="line">model = torch.load(<span class="string">&quot;./models_cifar/classification_gpu_29.pth&quot;</span>, map_location=torch.device(<span class="string">&#x27;cpu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 测试</span></span><br><span class="line">image = torch.reshape(image, (<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    outputs = model(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(outputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.argmax(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88114418117.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88114552561.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（4）网络调用和保存</title>
      <link href="/posts/bd02f045.html"/>
      <url>/posts/bd02f045.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-torchvision-models"><a href="#1-torchvision-models" class="headerlink" title="1 torchvision.models"></a>1 torchvision.models</h2><p>有关图像处理的模型</p><p>torchvision.models: <a href="https://pytorch.org/vision/0.9/models.html">https://pytorch.org/vision/0.9/models.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8860250011.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8861010016.png" alt=""></p><h2 id="2-Example-Classification-VGG"><a href="#2-Example-Classification-VGG" class="headerlink" title="2 Example: Classification VGG"></a>2 Example: Classification VGG</h2><h3 id="1-Download-ImageNet"><a href="#1-Download-ImageNet" class="headerlink" title="1. Download ImageNet"></a>1. Download ImageNet</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8861138161.png" alt=""></p><p>too large</p><h3 id="2-Download-the-model"><a href="#2-Download-the-model" class="headerlink" title="2. Download the model"></a>2. Download the model</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8862514836.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16_pretrained_false = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16_pretrained_true = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_true)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8862722432.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model: out_features=<span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="3-Add-Layers"><a href="#3-Add-Layers" class="headerlink" title="3. Add Layers"></a>3. Add Layers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 增加层 &quot;&quot;&quot;</span></span><br><span class="line">vgg16_pretrained_true.classifier.add_module(</span><br><span class="line">    name=<span class="string">&quot;add_linear&quot;</span>,  <span class="comment"># 增加新的层名</span></span><br><span class="line">    module=nn.Linear(</span><br><span class="line">        in_features=<span class="number">1000</span>,</span><br><span class="line">        out_features=<span class="number">10</span>,</span><br><span class="line">    ),  <span class="comment"># 增加新的层</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_true)  <span class="comment"># out_features=10</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8863539832.png" alt=""></p><h3 id="4-Modify-Layers"><a href="#4-Modify-Layers" class="headerlink" title="4. Modify Layers"></a>4. Modify Layers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 修改层 &quot;&quot;&quot;</span></span><br><span class="line">vgg16_pretrained_false.classifier[<span class="number">6</span>] = nn.Linear(</span><br><span class="line">    in_features=<span class="number">1000</span>,</span><br><span class="line">    out_features=<span class="number">10</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_false)  <span class="comment"># out_features=10</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8863840763.png" alt=""></p><h2 id="3-Save-amp-Load-Models"><a href="#3-Save-amp-Load-Models" class="headerlink" title="3 Save &amp; Load Models"></a>3 Save &amp; Load Models</h2><h3 id="1-Save"><a href="#1-Save" class="headerlink" title="1. Save"></a>1. Save</h3><h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h4><ul><li>save()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. save method 1: save -&gt; structure + parameters</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">torch.save(vgg16, <span class="string">&quot;./models/vgg16_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Method-2-Recommend"><a href="#Method-2-Recommend" class="headerlink" title="Method 2 (Recommend)"></a>Method 2 (Recommend)</h4><ul><li>save(model.state_dict())</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2. save method 2: save as dict -&gt; parameters (better)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">torch.save(vgg16.state_dict(), <span class="string">&quot;./models/vgg16_method2.pth&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-Load"><a href="#2-Load" class="headerlink" title="2. Load"></a>2. Load</h3><h4 id="Method-1-1"><a href="#Method-1-1" class="headerlink" title="Method 1"></a>Method 1</h4><ul><li>load()</li></ul><p>structure + parameters</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># load method 1:</span></span><br><span class="line">model1 = torch.load(<span class="string">&quot;./models/vgg16_method1.pth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(model1)</span><br></pre></td></tr></table></figure><h4 id="Method-2-Recommend-1"><a href="#Method-2-Recommend-1" class="headerlink" title="Method 2 (Recommend)"></a>Method 2 (Recommend)</h4><ul><li>load_state_dict()</li></ul><p>parameters -&gt; models</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># load method 2:</span></span><br><span class="line">vgg16 = torchvision.models.vgg16()</span><br><span class="line">model2_param_dict = torch.load(<span class="string">&quot;./models/vgg16_method2.pth&quot;</span>)  <span class="comment"># parameters&#x27; dict</span></span><br><span class="line">vgg16.load_state_dict(model2_param_dict)</span><br><span class="line"><span class="built_in">print</span>(vgg16)</span><br></pre></td></tr></table></figure><h3 id="3-Some-Errors"><a href="#3-Some-Errors" class="headerlink" title="3. Some Errors"></a>3. Some Errors</h3><ul><li>save the model with method 1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; python_file_name: model_save.py &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNet</span>(nn.Module):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">super</span>(MyNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">      x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">my_net = MyNet()</span><br><span class="line">torch.save(my_net, <span class="string">&quot;my_net_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>load the model in another python file</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">error</span></span><br><span class="line"><span class="string">model = torch.load(&quot;my_net_method1.pth&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model_save <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">model = torch.load(<span class="string">&quot;my_net_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（3）损失函数 反向传播 优化器</title>
      <link href="/posts/119f3166.html"/>
      <url>/posts/119f3166.html</url>
      
        <content type="html"><![CDATA[<h1 id="Loss-Backward-Optimizer-损失函数-反向传播-优化器"><a href="#Loss-Backward-Optimizer-损失函数-反向传播-优化器" class="headerlink" title="Loss Backward Optimizer 损失函数 反向传播 优化器"></a>Loss Backward Optimizer 损失函数 反向传播 优化器</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-Loss-Function"><a href="#1-Loss-Function" class="headerlink" title="1 Loss Function"></a>1 Loss Function</h2><h3 id="1-Loss-Functions"><a href="#1-Loss-Functions" class="headerlink" title="1. Loss Functions"></a>1. Loss Functions</h3><p><a href="https://pytorch.org/docs/1.8.1/nn.html#loss-functions">https://pytorch.org/docs/1.8.1/nn.html#loss-functions</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8834542085.png" alt=""></p><h3 id="2-Some-Loss-Functions"><a href="#2-Some-Loss-Functions" class="headerlink" title="2. Some Loss Functions"></a>2. Some Loss Functions</h3><h4 id="L1Loss"><a href="#L1Loss" class="headerlink" title="L1Loss"></a>L1Loss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8835511919.png" alt=""></p><ul><li>examples</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">target = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">target = torch.reshape(target, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss_sum = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)  <span class="comment"># tensor(2.)</span></span><br><span class="line">loss_mean = L1Loss(reduction=<span class="string">&#x27;mean&#x27;</span>)  <span class="comment"># tensor(0.6667)</span></span><br><span class="line">res_sum = loss_sum(<span class="built_in">input</span>, target)</span><br><span class="line">res_mean = loss_mean(<span class="built_in">input</span>, target)</span><br><span class="line"><span class="built_in">print</span>(res_sum)</span><br><span class="line"><span class="built_in">print</span>(res_mean)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input -&gt; (N, *)</span><br><span class="line">target -&gt; (N, *)</span><br></pre></td></tr></table></figure><h4 id="MSELoss"><a href="#MSELoss" class="headerlink" title="MSELoss"></a>MSELoss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8835620468.png" alt=""></p><ul><li>example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MSELoss</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">target = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">target = torch.reshape(target, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = MSELoss()</span><br><span class="line">res = loss(<span class="built_in">input</span>, target)  <span class="comment"># tensor(1.3333)</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input -&gt; (N, *)</span><br><span class="line">target -&gt; (N, *)</span><br></pre></td></tr></table></figure><h4 id="CrossEntropyLoss"><a href="#CrossEntropyLoss" class="headerlink" title="CrossEntropyLoss"></a>CrossEntropyLoss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8840106382.png" alt=""></p><ul><li>example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> CrossEntropyLoss</span><br><span class="line"></span><br><span class="line">input_predict = torch.tensor([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 模型返回了对3个种类的概率预测</span></span><br><span class="line">target = torch.tensor([<span class="number">1</span>])   <span class="comment"># 实际属于第1+1种，返回1</span></span><br><span class="line"></span><br><span class="line">input_predict = torch.reshape(input_predict, (<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = CrossEntropyLoss()</span><br><span class="line">res = loss(input_predict, target)  <span class="comment"># tensor(1.1019)</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input  -&gt; (N, C)    最后得到的各个种类的概率</span><br><span class="line">target -&gt; (N)      实际属于哪一种</span><br><span class="line"></span><br><span class="line">output -&gt; 返回标量: If reduction is &#x27;none&#x27;, then the same size as the target: (N) </span><br><span class="line"></span><br><span class="line"># C = number of classes</span><br></pre></td></tr></table></figure><h3 id="3-Loss-of-CIFAR10"><a href="#3-Loss-of-CIFAR10" class="headerlink" title="3. Loss of CIFAR10"></a>3. Loss of CIFAR10</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cifar</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Cifar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model1 = Sequential(</span><br><span class="line">            Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;测试&#x27;&#x27;&#x27;</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    outputs = my_net(imgs)</span><br><span class="line">    <span class="comment"># print(outputs)  # [p0, p1, ..., p9]  每张图片的类的预测的概率</span></span><br><span class="line">    <span class="comment"># print(targets)  # [t0, t1, ..., t63] 真实每张图片对应的类标号</span></span><br><span class="line"></span><br><span class="line">    res_loss = loss(outputs, targets)</span><br><span class="line">    <span class="built_in">print</span>(res_loss)   <span class="comment"># tensor(2.2994, grad_fn=&lt;NllLossBackward0&gt;) 误差</span></span><br></pre></td></tr></table></figure><h2 id="2-Backward"><a href="#2-Backward" class="headerlink" title="2 Backward"></a>2 Backward</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; network &#x27;&#x27;&#x27;</span></span><br><span class="line">    imgs, targets = data</span><br><span class="line">    outputs = my_net(imgs)</span><br><span class="line">    <span class="comment"># print(outputs)  # [p0, p1, ..., p9]  每张图片的类的预测的概率</span></span><br><span class="line">    <span class="comment"># print(targets)  # [t0, t1, ..., t63] 真实每张图片对应的类标号</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; loss function &#x27;&#x27;&#x27;</span></span><br><span class="line">    res_loss = loss(outputs, targets)</span><br><span class="line">    <span class="comment"># print(res_loss)   # tensor(2.2994, grad_fn=&lt;NllLossBackward0&gt;) 误差</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; backward &#x27;&#x27;&#x27;</span></span><br><span class="line">    res_loss.backward()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8843712009.png" alt=""></p><h2 id="3-Optimizer"><a href="#3-Optimizer" class="headerlink" title="3 Optimizer"></a>3 Optimizer</h2><p>Pytorch Docs: <a href="https://pytorch.org/docs/1.8.1/optim.html">https://pytorch.org/docs/1.8.1/optim.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8844003825.png" alt=""></p><h3 id="1-Basical-Usage"><a href="#1-Basical-Usage" class="headerlink" title="1. Basical Usage"></a>1. Basical Usage</h3><ol><li>Constructing it</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; 参数parameters和学习率lr(learning rate)是必须传入的，其他由特定算法决定 &#x27;&#x27;&#x27;</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">optimizer = optim.Adam([var1, var2], lr=<span class="number">0.0001</span>)</span><br></pre></td></tr></table></figure><ol><li>Taking an optimization step</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">input</span>, target <span class="keyword">in</span> dataset:</span><br><span class="line">  <span class="comment"># 清零</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 模型训练</span></span><br><span class="line">    output = model(<span class="built_in">input</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 损失函数</span></span><br><span class="line">    loss = loss_fn(output, target)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 优化器更新参数</span></span><br><span class="line">    optimizer.step()</span><br></pre></td></tr></table></figure><h2 id="4-完整网络代码-Full-Example-for-NN"><a href="#4-完整网络代码-Full-Example-for-NN" class="headerlink" title="4 完整网络代码 Full  Example for NN"></a>4 完整网络代码 Full  Example for NN</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 加载数据 &#x27;&#x27;&#x27;</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cifar</span>(nn.Module):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 创建网络 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Cifar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model1 = Sequential(</span><br><span class="line">            Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 实例化网络 选择损失函数 优化器 &#x27;&#x27;&#x27;</span></span><br><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optim = torch.optim.SGD(my_net.parameters(), lr=<span class="number">0.01</span>)  <span class="comment"># 随机梯度下降</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 开始训练 &#x27;&#x27;&#x27;</span></span><br><span class="line">epochs = <span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 每次训练起始损失</span></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; network &#x27;&#x27;&#x27;</span></span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = my_net(imgs)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; loss function &#x27;&#x27;&#x27;</span></span><br><span class="line">        res_loss = loss(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; zero_grad &#x27;&#x27;&#x27;</span></span><br><span class="line">        optim.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; backward &#x27;&#x27;&#x27;</span></span><br><span class="line">        res_loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; optim_step updated &#x27;&#x27;&#x27;</span></span><br><span class="line">        optim.step()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; each epoch loss sum &#x27;&#x27;&#x27;</span></span><br><span class="line">        running_loss += res_loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;every epoch, the loss is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(running_loss))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">360.25927734375</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">354.6569519042969</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">336.74420166015625</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">319.4207458496094</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">310.6980285644531</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">302.37701416015625</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">292.7424011230469</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">284.93902587890625</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（2）网络搭建</title>
      <link href="/posts/ae1c954d.html"/>
      <url>/posts/ae1c954d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch-搭建网络"><a href="#Pytorch-搭建网络" class="headerlink" title="Pytorch 搭建网络"></a>Pytorch 搭建网络</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-神经网络"><a href="#1-神经网络" class="headerlink" title="1 神经网络"></a>1 神经网络</h2><p>官方文档：<a href="https://pytorch.org/docs/1.8.1/nn.html">https://pytorch.org/docs/1.8.1/nn.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%8893656667.png" alt=""></p><h2 id="2-Containers框架"><a href="#2-Containers框架" class="headerlink" title="2 Containers框架"></a>2 Containers框架</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%8893741302.png" alt=""></p><ul><li>官方示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Model, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.conv1(x))<span class="comment"># 卷积conv1、非线性relu</span></span><br><span class="line">        <span class="keyword">return</span> F.relu(<span class="variable language_">self</span>.conv2(x))<span class="comment"># 卷积conv2、非线性relu</span></span><br></pre></td></tr></table></figure><ul><li>简单尝试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModel, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_model = MyModel()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output = my_model(x)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h2 id="3-stride-amp-padding"><a href="#3-stride-amp-padding" class="headerlink" title="3 stride &amp; padding"></a>3 stride &amp; padding</h2><p><strong>torch.nn.functional.conv2d</strong></p><h3 id="1-stride"><a href="#1-stride" class="headerlink" title="1. stride"></a>1. stride</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入图像 5x5 每个数字表示颜色</span></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积核 3x3</span></span><br><span class="line">kernel = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为torch.nn.functional.conv2d默认输入为4维的，所以转化</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="built_in">input</span>.shape[<span class="number">0</span>], <span class="built_in">input</span>.shape[<span class="number">1</span>]))</span><br><span class="line">kernel = torch.reshape(kernel, (<span class="number">1</span>, <span class="number">1</span>, kernel.shape[<span class="number">0</span>], kernel.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) → Tensor</span></span><br><span class="line"><span class="string">input: 就是输入数据集</span></span><br><span class="line"><span class="string">weight: 卷积核</span></span><br><span class="line"><span class="string">stride: 卷积核每次移动的步数</span></span><br><span class="line"><span class="string">padding: 对输入图像的填充</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">output_stride1 = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(output_stride1)</span><br><span class="line"></span><br><span class="line">output_stride2 = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(output_stride2)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88101819072.png" alt=""></p><h3 id="2-padding"><a href="#2-padding" class="headerlink" title="2. padding"></a>2. padding</h3><p>对输入图像的填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output_padding1 = F.conv2d(<span class="built_in">input</span>, kernel, padding=<span class="number">1</span>, stride=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(output_padding1)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102514146.png" alt=""></p><h2 id="4-卷积层"><a href="#4-卷积层" class="headerlink" title="4 卷积层"></a>4 卷积层</h2><h3 id="1-Convolution"><a href="#1-Convolution" class="headerlink" title="1. Convolution"></a>1. Convolution</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102701065.png" alt=""></p><h3 id="2-调用和参数"><a href="#2-调用和参数" class="headerlink" title="2. 调用和参数"></a>2. 调用和参数</h3><ul><li>调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">torch</span>.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, groups=<span class="number">1</span>, bias=<span class="literal">True</span>, padding_mode=<span class="string">&#x27;zeros&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_channels: 输入</span></span><br><span class="line">- in_channels (<span class="built_in">int</span>) – Number of channels <span class="keyword">in</span> the <span class="built_in">input</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># out_channels: 输出</span></span><br><span class="line">- out_channels (<span class="built_in">int</span>) – Number of channels produced by the convolution</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel_size: 卷积核的大小</span></span><br><span class="line">- kernel_size (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>) – Size of the convolving kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># stride: 步数</span></span><br><span class="line">- stride (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Stride of the convolution. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding: 填充层数</span></span><br><span class="line">- padding (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Zero-padding added to both sides of the <span class="built_in">input</span>. Default: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding_mode: 填充方式</span></span><br><span class="line">- padding_mode (string, optional) – <span class="string">&#x27;zeros&#x27;</span>, <span class="string">&#x27;reflect&#x27;</span>, <span class="string">&#x27;replicate&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;circular&#x27;</span>. Default: <span class="string">&#x27;zeros&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dilation: 卷积核中元素的对应位置</span></span><br><span class="line">- dilation (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Spacing between kernel elements. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">- groups (<span class="built_in">int</span>, optional) – Number of blocked connections <span class="keyword">from</span> <span class="built_in">input</span> channels to output channels. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">- bias (<span class="built_in">bool</span>, optional) – If <span class="literal">True</span>, adds a learnable bias to the output. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>dilation</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738725222605.png" alt=""></p><h3 id="3-简单原理"><a href="#3-简单原理" class="headerlink" title="3. 简单原理"></a>3. 简单原理</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88103543577.png" alt=""></p><ul><li>in_channels &amp; out_channels</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88104218535.png" alt=""></p><h3 id="4-示例代码"><a href="#4-示例代码" class="headerlink" title="4. 示例代码"></a>4. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                       download=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">my_net = Net()</span><br><span class="line"><span class="built_in">print</span>(my_net)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络结构</span></span><br><span class="line">Net(</span><br><span class="line">  (conv1): Conv2d(<span class="number">3</span>, <span class="number">6</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在tensorboard展示</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs_conv&quot;</span>)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">my_net = Net()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    output = my_net(imgs)</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    <span class="comment"># writer.add_images(&quot;output&quot;, output, step)  # torch.Size([64, 6, 30, 30]) output的channel=6，报错</span></span><br><span class="line">    output = torch.reshape(output, (-<span class="number">1</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果希望卷积后，通道变多，但尺寸不变，则需要填充padding，公式</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><h2 id="5-池化层"><a href="#5-池化层" class="headerlink" title="5 池化层"></a>5 池化层</h2><h3 id="1-Pooling"><a href="#1-Pooling" class="headerlink" title="1. Pooling"></a>1. Pooling</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8830453528.png" alt=""></p><h3 id="2-调用和参数-1"><a href="#2-调用和参数-1" class="headerlink" title="2. 调用和参数"></a>2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.MaxPool2d(kernel_size, stride=<span class="literal">None</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, return_indices=<span class="literal">False</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取最大值的窗口</span></span><br><span class="line">- kernel_size – the size of the window to take a <span class="built_in">max</span> over</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向纵向的步长，default = kernel_size</span></span><br><span class="line">- stride – the stride of the window. Default value <span class="keyword">is</span> kernel_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充图像边缘</span></span><br><span class="line">- padding – implicit zero padding to be added on both sides</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空洞</span></span><br><span class="line">- dilation – a parameter that controls the stride of elements <span class="keyword">in</span> the window</span><br><span class="line"></span><br><span class="line">- return_indices – <span class="keyword">if</span> <span class="literal">True</span>, will <span class="keyword">return</span> the <span class="built_in">max</span> indices along <span class="keyword">with</span> the outputs. Useful <span class="keyword">for</span> torch.nn.MaxUnpool2d later</span><br><span class="line"></span><br><span class="line"><span class="comment"># floor向下取整 ceil向上取整，例如ceil_mode = True，保留超出部分</span></span><br><span class="line">- ceil_mode – when <span class="literal">True</span>, will use ceil instead of floor to compute the output shape</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8832249522.png" alt=""></p><ul><li>注意输入的input和输出output均为</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(N, C, H, W)  <span class="comment"># (batch_size层数, Channel通道数, Height高, Width宽)</span></span><br></pre></td></tr></table></figure><ul><li>注意池化不可对long操作，故</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 转为float</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码"><a href="#3-示例代码" class="headerlink" title="3. 示例代码"></a>3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1层，1通道，5x5大小，-1表示自动计算</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxPoolNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MaxPoolNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.maxpool1 = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.maxpool1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = MaxPoolNet()</span><br><span class="line">output = my_net(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line">&gt;&gt; tensor([[[[<span class="number">3.</span>, <span class="number">2.</span>],</span><br><span class="line">             [<span class="number">5.</span>, <span class="number">1.</span>]]]])</span><br></pre></td></tr></table></figure><h2 id="6-非线性激活（激活函数）"><a href="#6-非线性激活（激活函数）" class="headerlink" title="6 非线性激活（激活函数）"></a>6 非线性激活（激活函数）</h2><h3 id="1-Non-linear-Activations"><a href="#1-Non-linear-Activations" class="headerlink" title="1. Non-linear Activations"></a>1. Non-linear Activations</h3><p>relu, sigmoid…</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8835228634.png" alt=""></p><h3 id="2-调用和参数-2"><a href="#2-调用和参数-2" class="headerlink" title="2. 调用和参数"></a>2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否内存拷贝</span></span><br><span class="line">inplace – can optionally do the operation <span class="keyword">in</span>-place. Default: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">ReLu(<span class="built_in">input</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">&gt;&gt; <span class="built_in">input</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">output = ReLu(<span class="built_in">input</span>, inplace = <span class="literal">False</span>)</span><br><span class="line">&gt;&gt; <span class="built_in">input</span> = -<span class="number">1</span></span><br><span class="line">&gt;&gt; output = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码-1"><a href="#3-示例代码-1" class="headerlink" title="3. 示例代码"></a>3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, -<span class="number">0.5</span>],</span><br><span class="line">    [-<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonLinearActivationsRelu</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(NonLinearActivationsRelu, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.relu1 = ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.relu1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = NonLinearActivationsRelu()</span><br><span class="line">output = my_net(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line">&gt;&gt; tensor([[ <span class="number">1.0000</span>, -<span class="number">0.5000</span>],</span><br><span class="line">           [-<span class="number">1.0000</span>,  <span class="number">3.0000</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line">&gt;&gt; tensor([[<span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">           [<span class="number">0.</span>, <span class="number">3.</span>]])</span><br></pre></td></tr></table></figure><h2 id="7-正则化层"><a href="#7-正则化层" class="headerlink" title="7 正则化层"></a>7 正则化层</h2><h3 id="1-Normalization"><a href="#1-Normalization" class="headerlink" title="1. Normalization"></a>1. Normalization</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8840656515.png" alt=""></p><h3 id="2-调用和参数-3"><a href="#2-调用和参数-3" class="headerlink" title="2. 调用和参数"></a>2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.BatchNorm2d(num_features, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">- num_features – C <span class="keyword">from</span> an expected <span class="built_in">input</span> of size (N,C,H,W)</span><br><span class="line"></span><br><span class="line">- eps – a value added to the denominator <span class="keyword">for</span> numerical stability. Default: <span class="number">1e-5</span></span><br><span class="line"></span><br><span class="line">- momentum – the value used <span class="keyword">for</span> the running_mean <span class="keyword">and</span> running_var computation. Can be <span class="built_in">set</span> to <span class="literal">None</span> <span class="keyword">for</span> cumulative moving average (i.e. simple average). Default: <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">- affine – a boolean value that when <span class="built_in">set</span> to <span class="literal">True</span>, this module has learnable affine parameters. Default: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">- track_running_stats – a boolean value that when <span class="built_in">set</span> to <span class="literal">True</span>, this module tracks the running mean <span class="keyword">and</span> variance, <span class="keyword">and</span> when <span class="built_in">set</span> to <span class="literal">False</span>, this module does <span class="keyword">not</span> track such statistics, <span class="keyword">and</span> initializes statistics buffers running_mean <span class="keyword">and</span> running_var <span class="keyword">as</span> <span class="literal">None</span>. When these buffers are <span class="literal">None</span>, this module always uses batch statistics. <span class="keyword">in</span> both training <span class="keyword">and</span> <span class="built_in">eval</span> modes. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">input</span> - (N, C, H, W)</span><br><span class="line">- output - (N, C, H, W)</span><br></pre></td></tr></table></figure><h3 id="3-示例代码-2"><a href="#3-示例代码-2" class="headerlink" title="3. 示例代码"></a>3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># With Learnable Parameters</span></span><br><span class="line">m = nn.BatchNorm2d(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># Without Learnable Parameters</span></span><br><span class="line">m = nn.BatchNorm2d(<span class="number">100</span>, affine=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">20</span>, <span class="number">100</span>, <span class="number">35</span>, <span class="number">45</span>)</span><br><span class="line">output = m(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure><h2 id="8-线性层"><a href="#8-线性层" class="headerlink" title="8 线性层"></a>8 线性层</h2><h3 id="1-Linear"><a href="#1-Linear" class="headerlink" title="1. Linear"></a>1. Linear</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8841333231.png" alt=""></p><h3 id="2-调用和参数-4"><a href="#2-调用和参数-4" class="headerlink" title="2. 调用和参数"></a>2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Linear(in_features, out_features, bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入层的神经元个数</span></span><br><span class="line">- in_features – size of each <span class="built_in">input</span> sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出层的神经元个数</span></span><br><span class="line">- out_features – size of each output sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否 w_i*x_i 后加上 b_i</span></span><br><span class="line">- bias – If <span class="built_in">set</span> to <span class="literal">False</span>, the layer will <span class="keyword">not</span> learn an additive bias. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码-3"><a href="#3-示例代码-3" class="headerlink" title="3. 示例代码"></a>3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">False</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearLayers</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LinearLayers, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.linear1 = Linear(in_features=<span class="number">64</span> * <span class="number">3</span> * <span class="number">32</span> * <span class="number">32</span>, out_features=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.linear1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = LinearLayers()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    <span class="comment"># print(imgs.shape)  # torch.Size([64, 3, 32, 32])  64一组，3个通道，32x32图片</span></span><br><span class="line">    <span class="comment"># output = torch.reshape(imgs, (1, 1, 1, -1))  # 每64个图片平铺为一个一维向量</span></span><br><span class="line">    <span class="comment"># output = my_net(output)  # torch.Size([1, 1, 1, 10])</span></span><br><span class="line"></span><br><span class="line">    output = torch.flatten(imgs)  <span class="comment"># torch.Size([196608])</span></span><br><span class="line">    output = my_net(output)  <span class="comment"># torch.Size([10])</span></span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h2 id="9-pytorch提供的模型"><a href="#9-pytorch提供的模型" class="headerlink" title="9 pytorch提供的模型"></a>9 pytorch提供的模型</h2><p><a href="https://pytorch.org/docs/1.8.1/nn.html">https://pytorch.org/docs/1.8.1/nn.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8843352338.png" alt=""></p><h2 id="10-Sequential"><a href="#10-Sequential" class="headerlink" title="10 Sequential"></a>10 Sequential</h2><h3 id="1-Sequential简化"><a href="#1-Sequential简化" class="headerlink" title="1. Sequential简化"></a>1. Sequential简化</h3><p>torch.nn -&gt; container -&gt; Sequential</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Sequential(*args)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example of using Sequential</span></span><br><span class="line">model = nn.Sequential(</span><br><span class="line">          nn.Conv2d(<span class="number">1</span>,<span class="number">20</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU(),</span><br><span class="line">          nn.Conv2d(<span class="number">20</span>,<span class="number">64</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of using Sequential with OrderedDict</span></span><br><span class="line">model = nn.Sequential(OrderedDict([</span><br><span class="line">          (<span class="string">&#x27;conv1&#x27;</span>, nn.Conv2d(<span class="number">1</span>,<span class="number">20</span>,<span class="number">5</span>)),</span><br><span class="line">          (<span class="string">&#x27;relu1&#x27;</span>, nn.ReLU()),</span><br><span class="line">          (<span class="string">&#x27;conv2&#x27;</span>, nn.Conv2d(<span class="number">20</span>,<span class="number">64</span>,<span class="number">5</span>)),</span><br><span class="line">          (<span class="string">&#x27;relu2&#x27;</span>, nn.ReLU())</span><br><span class="line">        ]))</span><br></pre></td></tr></table></figure><h3 id="2-案例：CIFAR分类"><a href="#2-案例：CIFAR分类" class="headerlink" title="2. 案例：CIFAR分类"></a>2. 案例：CIFAR分类</h3><ul><li>CIFAR Model 结构</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/Structure-of-CIFAR10-quick-model.png" alt="Structure-of-CIFAR10-quick-model"></p><ul><li>Note: 计算padding和stride</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><ul><li>tensorboard可视化结构</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x_test = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs_cifar&quot;</span>)</span><br><span class="line">writer.add_graph(cifar_net, x_test)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8850621811.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（1）下载 Pytorch 和数据处理</title>
      <link href="/posts/3f7272cd.html"/>
      <url>/posts/3f7272cd.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载Pytorch和数据处理"><a href="#下载Pytorch和数据处理" class="headerlink" title="下载Pytorch和数据处理"></a>下载Pytorch和数据处理</h1><h2 id="0-创建环境并下载Pytorch"><a href="#0-创建环境并下载Pytorch" class="headerlink" title="0 创建环境并下载Pytorch"></a>0 创建环境并下载Pytorch</h2><p>官网：<a href="https://pytorch.org">https://pytorch.org</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8A%E5%8D%88110530197.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch::pytorch torchvision torchaudio -c pytorch</span><br></pre></td></tr></table></figure><h2 id="1-加载数据"><a href="#1-加载数据" class="headerlink" title="1 加载数据"></a>1 加载数据</h2><h3 id="1-Dataset"><a href="#1-Dataset" class="headerlink" title="1. Dataset"></a>1. Dataset</h3><p>提取数据并获取label</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root_dir = root_dir</span><br><span class="line">        <span class="variable language_">self</span>.label_dir = label_dir</span><br><span class="line">        <span class="variable language_">self</span>.path = os.path.join(<span class="variable language_">self</span>.root_dir, <span class="variable language_">self</span>.label_dir)</span><br><span class="line">        <span class="variable language_">self</span>.img_path = os.listdir(<span class="variable language_">self</span>.path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_name = <span class="variable language_">self</span>.img_path[index]</span><br><span class="line">        img_item_path = os.path.join(<span class="variable language_">self</span>.root_dir, <span class="variable language_">self</span>.label_dir, img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        label = <span class="variable language_">self</span>.label_dir</span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">&#x27;dataset/train&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 蚂蚁数据集</span></span><br><span class="line">ants_label_dir = <span class="string">&#x27;ants_image&#x27;</span></span><br><span class="line">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蜜蜂数据集</span></span><br><span class="line">bees_label_dir = <span class="string">&#x27;bees_image&#x27;</span></span><br><span class="line">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整合 简单的拼接，按照谁在前整合后仍然在前的原则</span></span><br><span class="line">train_dataset = ants_dataset + bees_dataset</span><br></pre></td></tr></table></figure><p>常见数据集形式</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88122404428.png" alt=""></p><h3 id="2-Dataloader"><a href="#2-Dataloader" class="headerlink" title="2. Dataloader"></a>2. Dataloader</h3><p>为后面的网络提供不同的数据形式（打包）</p><h2 id="2-TensorBoard"><a href="#2-TensorBoard" class="headerlink" title="2 TensorBoard"></a>2 TensorBoard</h2><h3 id="1-尝试"><a href="#1-尝试" class="headerlink" title="1. 尝试"></a>1. 尝试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;y=x&#x27;</span>, i, i)  <span class="comment"># 第一个是标题，第二个是y轴，第三个是x轴</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=文件夹名</span><br><span class="line">tensorboard --logdir=logs</span><br><span class="line"><span class="comment"># 改端口</span></span><br><span class="line">tensorboard --logdir=logs --port=<span class="number">6007</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88123602383.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88123851459.png" alt=""></p><h3 id="2-训练集练习"><a href="#2-训练集练习" class="headerlink" title="2. 训练集练习"></a>2. 训练集练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line">image_path1 = <span class="string">&#x27;dataset/train/ants_image/0013035.jpg&#x27;</span></span><br><span class="line">image_PIL1 = Image.<span class="built_in">open</span>(image_path1)</span><br><span class="line">image_array1 = np.array(image_PIL1)</span><br><span class="line"></span><br><span class="line">image_path2 = <span class="string">&#x27;dataset/train/ants_image/5650366_e22b7e1065.jpg&#x27;</span></span><br><span class="line">image_PIL2 = Image.<span class="built_in">open</span>(image_path2)</span><br><span class="line">image_array2 = np.array(image_PIL2)</span><br><span class="line"></span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, image_array1, <span class="number">1</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, image_array2, <span class="number">2</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88125438974.png" alt=""></p><h2 id="3-Transforms"><a href="#3-Transforms" class="headerlink" title="3 Transforms"></a>3 Transforms</h2><blockquote><p>[!NOTE]</p><p>torchvision的模块之一：Transforms</p></blockquote><h3 id="1-ToTensor"><a href="#1-ToTensor" class="headerlink" title="1. ToTensor"></a>1. ToTensor</h3><ol><li>transforms.ToTensor将”PIL Image”和”numpy.ndarray”转化为tensor类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&#x27;dataset/train/ants_image/5650366_e22b7e1065.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PIL Image 类型</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"><span class="built_in">print</span>(img)</span><br><span class="line">&gt;&gt; &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x375 at <span class="number">0x13B2D7970</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.ndarray 类型</span></span><br><span class="line">cv_img = cv2.imread(img_path)</span><br><span class="line"><span class="built_in">print</span>(cv_img)</span><br><span class="line">&gt;&gt; [[[<span class="number">106</span> <span class="number">119</span>  <span class="number">97</span>]</span><br><span class="line">    [<span class="number">106</span> <span class="number">119</span>  <span class="number">97</span>]</span><br><span class="line">    [<span class="number">107</span> <span class="number">120</span>  <span class="number">98</span>]</span><br><span class="line">    ...</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]]]</span><br><span class="line"></span><br><span class="line">tensor_trans = transforms.ToTensor()</span><br><span class="line">tensor_img = tensor_trans(img)</span><br><span class="line"><span class="built_in">print</span>(tensor_img)</span><br><span class="line">&gt;&gt; tensor([[[<span class="number">0.3804</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3412</span>, <span class="number">0.3373</span>, <span class="number">0.3333</span>],</span><br><span class="line">           [<span class="number">0.3765</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3529</span>, <span class="number">0.3490</span>, <span class="number">0.3451</span>],</span><br><span class="line">           [<span class="number">0.3804</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3725</span>, <span class="number">0.3686</span>, <span class="number">0.3647</span>],</span><br><span class="line">           ...,</span><br><span class="line">           [<span class="number">0.5608</span>, <span class="number">0.5608</span>, <span class="number">0.5647</span>,  ..., <span class="number">0.4392</span>, <span class="number">0.4392</span>, <span class="number">0.4392</span>],</span><br><span class="line">           [<span class="number">0.5412</span>, <span class="number">0.5529</span>, <span class="number">0.5608</span>,  ..., <span class="number">0.4353</span>, <span class="number">0.4353</span>, <span class="number">0.4353</span>],</span><br><span class="line">           [<span class="number">0.5333</span>, <span class="number">0.5412</span>, <span class="number">0.5608</span>,  ..., <span class="number">0.4314</span>, <span class="number">0.4314</span>, <span class="number">0.4314</span>]]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-transforms使用"><a href="#2-transforms使用" class="headerlink" title="2. transforms使用"></a>2. transforms使用</h3><p>Note：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__call__函数的作用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, use</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__call__函数：&quot;</span> + use)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self, use</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一般函数：&quot;</span> + use)</span><br><span class="line"></span><br><span class="line">person = Person()</span><br><span class="line">person(<span class="string">&quot;call能直接利用类名括号调用&quot;</span>)</span><br><span class="line">person.func(<span class="string">&quot;必须使用.func方式&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-torchvision数据集"><a href="#4-torchvision数据集" class="headerlink" title="4 torchvision数据集"></a>4 torchvision数据集</h2><p>torchvision.dataset</p><p>查看官方文档：<a href="https://pytorch.org/">https://pytorch.org/</a></p><p>0.9版本：<a href="https://pytorch.org/vision/0.9/">https://pytorch.org/vision/0.9/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%8850535594.png" alt=""></p><h3 id="1-尝试使用"><a href="#1-尝试使用" class="headerlink" title="1. 尝试使用"></a>1. 尝试使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transforms = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor(),  <span class="comment"># 转为tensor类型</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">True</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">img, target = test_set[0]</span></span><br><span class="line"><span class="string">print(img)  # &lt;PIL.Image.Image image mode=RGB size=32x32 at 0x14433FCA0&gt;</span></span><br><span class="line"><span class="string">print(target)  # 3</span></span><br><span class="line"><span class="string">print(test_set.classes[target])  # cat</span></span><br><span class="line"><span class="string">img.show()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(log_dir=<span class="string">&#x27;./logs_cifar&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img, target = test_set[i]</span><br><span class="line">    writer.add_image(<span class="string">&#x27;test_set&#x27;</span>, img, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="2-数据集的下载"><a href="#2-数据集的下载" class="headerlink" title="2. 数据集的下载"></a>2. 数据集的下载</h3><p>进入数据集的源码（CIFAR10），查看url即为下载链接</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%8853613373.png" alt=""></p><h2 id="5-Dataloader"><a href="#5-Dataloader" class="headerlink" title="5 Dataloader"></a>5 Dataloader</h2><p>官方文档：<a href="https://pytorch.org/docs/1.8.1/data.html?highlight=dataloader#torch.utils.data.DataLoader">https://pytorch.org/docs/1.8.1/data.html?highlight=dataloader#torch.utils.data.DataLoader</a></p><h3 id="1-batch-size"><a href="#1-batch-size" class="headerlink" title="1. batch_size"></a>1. batch_size</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240730%E4%B8%8A%E5%8D%8894027575.png" alt=""></p><h3 id="2-shuffle"><a href="#2-shuffle" class="headerlink" title="2. shuffle"></a>2. shuffle</h3><p>shuffle打乱顺序</p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transforms = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor(),  <span class="comment"># 转为tensor类型</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. batch_size=64 每次取4个数据进行打包：test_set[0-63]=dataset[0-63]打包</span></span><br><span class="line"><span class="string">2. shuffle打乱顺序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;dataloader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        writer.add_images(<span class="string">&#x27;Epoch: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch), imgs, step)</span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学 笔记目录</title>
      <link href="/posts/73f9c55d.html"/>
      <url>/posts/73f9c55d.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主根据复旦大学本科课程《微观经济学》整理的课程笔记。点击链接即可前往对应文章查看，笔记以pdf的格式展示。更多信息，可前往本人的<a href="https://github.com/isKage/iskage.github.io">Github库</a>中查询。或者直接右键下载。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>课程书籍为罗伯特·S·平狄克/鲁宾菲尔德编写，中国人民大学出版社出版的<a href="https://book.douban.com/subject/4039368/">《微观经济学》</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="./b1fd752e.html">1 绪论</a></p><p><a href="./ac04a21d.html">2 供给和需求的基本原理</a></p><p><a href="./d039b3c8.html">3 消费者行为</a></p><p><a href="./cd431d80.html">4 个别需求和市场需求</a></p><p><a href="./7bee8e99.html">5 生产</a></p><p><a href="./c4281815.html">6 生产成本</a></p><p><a href="./cfb40b0.html">7 利润的最大化和竞争性供给</a></p><p><a href="./3aba38be.html">8 竞争性市场分析</a></p><p><a href="./c5b9c11f.html">9 市场势力：垄断和买方垄断</a></p><p><a href="./43074da4.html">10 有市场势力的定价</a></p><p><a href="./66ca6135.html">11 垄断竞争和寡头垄断</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(11)垄断竞争和寡头垄断 (完)</title>
      <link href="/posts/66ca6135.html"/>
      <url>/posts/66ca6135.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2012%20Monopolistic%20Competition%20and%20Oligopoly.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(10)有市场势力的定价</title>
      <link href="/posts/43074da4.html"/>
      <url>/posts/43074da4.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2011%20Pricing%20with%20Market%20Power.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(9)市场势力：垄断和买方垄断</title>
      <link href="/posts/c5b9c11f.html"/>
      <url>/posts/c5b9c11f.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2010%20Market%20Power_%20Monopoly%20and%20Monopsony.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(8)竞争性市场分析</title>
      <link href="/posts/3aba38be.html"/>
      <url>/posts/3aba38be.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2009%20Competitive%20Markets.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(7)利润的最大化和竞争性供给</title>
      <link href="/posts/cfb40b0.html"/>
      <url>/posts/cfb40b0.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2008%20Max%20Profit%20and%20Competetive%20Supply.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(6)生产成本</title>
      <link href="/posts/c4281815.html"/>
      <url>/posts/c4281815.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2007%20Costs%20of%20Production.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(5)生产</title>
      <link href="/posts/7bee8e99.html"/>
      <url>/posts/7bee8e99.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2006%20Production.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(4)个别需求和市场需求</title>
      <link href="/posts/cd431d80.html"/>
      <url>/posts/cd431d80.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2004%20Demand%20.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(3)消费者行为</title>
      <link href="/posts/d039b3c8.html"/>
      <url>/posts/d039b3c8.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2003%20Consumer%20Behaviors%20.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(2)供给和需求的基本原理</title>
      <link href="/posts/ac04a21d.html"/>
      <url>/posts/ac04a21d.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2002%20The%20Basics%20of%20Supply%20and%20Demand.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微观经济学(1)绪论</title>
      <link href="/posts/b1fd752e.html"/>
      <url>/posts/b1fd752e.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/微观经济学笔记/Chapter%2001%20Preliminaries.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL入门：简单尝试</title>
      <link href="/posts/9d7c017f.html"/>
      <url>/posts/9d7c017f.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>这篇文章相对入门地介绍了<code>MySQL</code>里的相关语法和使用，并结合<code>Python + Flask</code>框架初步探索里网页开发。</strong></p></div><h2 id="1-MySQL入门">1. MySQL入门</h2><h3 id="1-1-启动MySQL">1.1 启动MySQL:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><h3 id="1-2-查看已有数据库">1.2 查看已有数据库:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><h3 id="1-3-创建数据库">1.3 创建数据库:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;  </span><br></pre></td></tr></table></figure><h3 id="1-4-删除数据库">1.4 删除数据库:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><h3 id="1-5-进入数据库">1.5 进入数据库:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><h3 id="1-6-查看数据库下所有数据表">1.6 查看数据库下所有数据表:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_test <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> tb1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><h3 id="1-7-创建表">1.7 创建表:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>不能为空/允许为空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>, <span class="comment">-- 不能为空</span></span><br><span class="line">    age <span class="type">int</span> <span class="keyword">null</span>         <span class="comment">-- 可以为空</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>默认值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">3</span>        <span class="comment">-- 设置默认为3</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>主键</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span>,       <span class="comment">-- 不能为空，不能重复</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>一般设置，主键+自增 <code>标准</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="1-8-删除表">1.8 删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="1-9-展示表信息">1.9 展示表信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">16</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="2-常见数据类型">2 常见数据类型</h2><h3 id="2-1-int整型">2.1 int整型</h3><ul><li>tinyint</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有符号，取值范围：-128～127（有正有负）[默认]</span><br><span class="line">无符号，取值范围：0～255（只有正）</span><br></pre></td></tr></table></figure><ul><li>有符号，取值范围：-128～127（有正有负）[默认]</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb2(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">age tinyint</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>无符号，取值范围：0～255（只有正）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb2(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">age tinyint unsigned</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>int</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">有符号，-2147483648～2147483647</span><br><span class="line"></span><br><span class="line">int unsigned</span><br><span class="line">无符号，0～4294967295</span><br></pre></td></tr></table></figure><ul><li>bigint</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bigint</span><br><span class="line">有符号，范围更大</span><br><span class="line"></span><br><span class="line">bigint unsigned</span><br><span class="line">无符号，范围更大</span><br></pre></td></tr></table></figure><h4 id="练习：整型">练习：整型</h4><ul><li>创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb2(</span><br><span class="line">id <span class="type">bigint</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  salary <span class="type">int</span>,</span><br><span class="line">  age tinyint</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> tb2(salary, age) <span class="keyword">values</span>(<span class="number">10000</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">insert into</span> tb2(salary, age) <span class="keyword">values</span>(<span class="number">20000</span>, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> tb2(salary, age) <span class="keyword">values</span>(<span class="number">30000</span>, <span class="number">38</span>), (<span class="number">40000</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><ul><li>查看数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb2;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> salary <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>  <span class="number">10000</span> <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>  <span class="number">20000</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span>  <span class="number">30000</span> <span class="operator">|</span>   <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span>  <span class="number">40000</span> <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-2-浮点数">2.2 浮点数</h3><ul><li><p>float</p></li><li><p>double</p></li><li><p>decimal</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">准确的小数，m是数字总个数（负号不算），d是小数后个数。</span><br><span class="line">m最大为65，d最大为30</span><br></pre></td></tr></table></figure><p><code>例如</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb3(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment,</span><br><span class="line">salary <span class="type">decimal</span>(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> tb3(salary) <span class="keyword">values</span>(<span class="number">1.28</span>);</span><br><span class="line"><span class="keyword">insert into</span> tb3(salary) <span class="keyword">values</span>(<span class="number">5.289</span>);</span><br><span class="line"><span class="keyword">insert into</span> tb3(salary) <span class="keyword">values</span>(<span class="number">1.282</span>); <span class="comment">-- 整数部分不能超过m位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb3;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb3;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>   <span class="number">1.28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>   <span class="number">5.29</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span>   <span class="number">1.28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-3-字符串">2.3 字符串</h3><ul><li>char(m)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">定长字符串，速度快</span><br><span class="line">m<span class="operator">&lt;=</span><span class="number">225</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 无论多长，固定11位存储【超出报错】</span></span><br><span class="line"><span class="keyword">create table</span> tb4(</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  mobile <span class="type">char</span>(<span class="number">11</span>)</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>varchar(m)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">变长字符串，节省空间</span><br><span class="line">m<span class="operator">&lt;=</span><span class="number">65535</span>bit</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 真实多长，按照多长存储【超出报错】</span></span><br><span class="line"><span class="keyword">create table</span> tb4(</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  mobile <span class="type">varchar</span>(<span class="number">11</span>)</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>text</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">变长的大字符串，可以有<span class="number">65535</span>（<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">16</span><span class="number">-1</span>）个字符，一般用于长文本</span><br><span class="line"></span><br><span class="line"><span class="keyword">create table</span> news(</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  title <span class="type">varchar</span>(<span class="number">128</span>),</span><br><span class="line">  content text</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>mediumtext</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2**24-1</span><br></pre></td></tr></table></figure><ul><li>longtext</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2**32-1</span><br></pre></td></tr></table></figure><h3 id="2-4-时间">2.4 时间</h3><ul><li>datetime</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD HH:MM:SS (<span class="number">1000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="operator">/</span><span class="number">9999</span><span class="number">-12</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span>)</span><br></pre></td></tr></table></figure><ul><li>date</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD (<span class="number">1000</span><span class="number">-01</span><span class="number">-01</span><span class="operator">/</span><span class="number">9999</span><span class="number">-12</span><span class="number">-31</span>)</span><br></pre></td></tr></table></figure><h4 id="练习题：用户表">练习题：用户表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> account(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span>,</span><br><span class="line">  password <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">not null</span>,</span><br><span class="line">  email <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span>,</span><br><span class="line">  age tinyint,</span><br><span class="line">  salary <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">  ctime datetime</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> account(name, password, email, age, salary, ctime) <span class="keyword">values</span>(&quot;Mike&quot;, &quot;123&quot;, &quot;xx@live.com&quot;, <span class="number">19</span>, <span class="number">1000.20</span>, &quot;2023-12-11 11:11&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> password <span class="operator">|</span> email       <span class="operator">|</span> age  <span class="operator">|</span> salary  <span class="operator">|</span> ctime               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Mike <span class="operator">|</span> <span class="number">123</span>      <span class="operator">|</span> xx<span class="variable">@live</span>.com <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span> <span class="number">1000.20</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-12</span><span class="number">-11</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-数据行操作">3. 数据行操作</h3><h4 id="3-1-增加数据">3.1 增加数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名(列<span class="number">1</span>, 列<span class="number">2</span>) <span class="keyword">values</span>(值, 值);</span><br><span class="line"><span class="keyword">insert into</span> 表名(列<span class="number">1</span>, 列<span class="number">2</span>) <span class="keyword">values</span>(值, 值);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> 表名(列<span class="number">1</span>, 列<span class="number">2</span>) <span class="keyword">values</span>(值, 值), (值, 值), (值, 值), (值, 值);</span><br></pre></td></tr></table></figure><h4 id="3-2-删除数据">3.2 删除数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">and</span> 条件;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">or</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 把account全部删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除account表中id=3的行</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> account <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-修改数据">3.3 修改数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值, 列<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> password<span class="operator">=</span>&quot;hahahah&quot;;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> email<span class="operator">=</span>&quot;qwqwqw&quot; <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">3</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="3-4-查询数据">3.4 查询数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 列名, 列名 <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 列名, 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="keyword">select</span> name, email <span class="keyword">from</span> account;</span><br><span class="line"><span class="keyword">select</span> name, email <span class="keyword">from</span> account <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="4-员工管理案例">4. 员工管理案例</h3><h4 id="4-1-要求">4.1 要求</h4><ul><li><p>使用mysql内置工具</p><ul><li><p>创建数据库：unicom  <code>以建立联通员工管理数据库为例</code></p></li><li><p>数据表：admin</p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表名：admin</span><br><span class="line">列：</span><br><span class="line">    id：主键，自增</span><br><span class="line">    username：字符串，不为空</span><br><span class="line">    password：字符串，不为空</span><br><span class="line">    mobile：字符串，不为空</span><br></pre></td></tr></table></figure><p>​</p><ul><li>python代码实现<ul><li>添加用户</li><li>删除用户</li><li>查看用户</li><li>更新用户信息</li></ul></li></ul><h4 id="4-2-mysql创建">4.2 mysql创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database unicom <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci; </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use unicom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create table</span> admin(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">not null</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span>,</span><br><span class="line">  mobile <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">not null</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h4 id="4-3-python操作">4.3 python操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h5 id="4-3-1-简单创建和操作">4.3.1 简单创建和操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 链接mysql</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;&lt;PASSWORD&gt;&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;insert into admin(username,password,mobile) values(&quot;mike&quot;,&quot;abc123&quot;,&quot;12345678901&quot;)&#x27;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭链接</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><ul><li>格式化发送指令（列表）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 格式化发送指令[]</span></span><br><span class="line">sql = <span class="string">&#x27;insert into admin(username,password,mobile) values(%s,%s,%s)&#x27;</span></span><br><span class="line">cursor.execute(sql, [<span class="string">&quot;Ann&quot;</span>, <span class="string">&quot;qwe456&quot;</span>, <span class="string">&quot;09876543211&quot;</span>])</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><ul><li>格式化发送指令（字典）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 格式化发送指令&#123;&#125;</span></span><br><span class="line">sql = <span class="string">&#x27;insert into admin(username,password,mobile) values(%(n1)s,%(n2)s,%(n3)s)&#x27;</span></span><br><span class="line">cursor.execute(sql, &#123;<span class="string">&quot;n1&quot;</span>:<span class="string">&quot;Cindy&quot;</span>, <span class="string">&quot;n2&quot;</span>:<span class="string">&quot;zxc789&quot;</span>, <span class="string">&quot;n3&quot;</span>:<span class="string">&quot;56473829101&quot;</span>&#125;)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Cindy    <span class="operator">|</span> zxc789   <span class="operator">|</span> <span class="number">56473829101</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><h5 id="4-3-2-在python终端动态创建">4.3.2 在python终端动态创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入信息，输入q退出&quot;</span>)</span><br><span class="line">    user = <span class="built_in">input</span>(<span class="string">&quot;用户名：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;密码：&quot;</span>)</span><br><span class="line">    mobile = <span class="built_in">input</span>(<span class="string">&quot;电话号码：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 链接mysql</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;Silence2004&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 发送指令</span></span><br><span class="line">    sql = <span class="string">&#x27;insert into admin(username,password,mobile) values(%s,%s,%s)&#x27;</span></span><br><span class="line">    cursor.execute(sql, [user, pwd, mobile])</span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 关闭链接</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h5 id="4-3-3-查询数据">4.3.3 查询数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步和第3步不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from admin&quot;</span>)  <span class="comment"># 指令就是mysql命令，格式和使用方式完全相同</span></span><br><span class="line">data_list = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data_list</span></span><br><span class="line">[</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;mike&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;abc123&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;12345678901&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Ann&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;qwe456&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;09876543211&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Cindy&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;zxc789&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;56473829101&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Kage&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;slefln&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;1412344&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>格式化查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from admin where id &gt; %s&quot;</span>, [<span class="number">2</span>, ])</span><br><span class="line">data_list = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Ann&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;qwe456&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;09876543211&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Cindy&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;zxc789&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;56473829101&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Kage&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;slefln&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;1412344&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>fetchone()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from admin where id &gt; %s&quot;</span>, [<span class="number">2</span>, ])</span><br><span class="line">res = cursor.fetchone()  <span class="comment"># 第一条数据</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Ann&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;qwe456&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;09876543211&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-4-删除数据">4.3.4 删除数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步和第3步不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;delete from admin where id = %s&quot;</span>, [<span class="number">5</span>, ])</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Cindy    <span class="operator">|</span> zxc789   <span class="operator">|</span> <span class="number">56473829101</span> <span class="operator">|</span>  <span class="comment">-- 删除</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Kage     <span class="operator">|</span> slefln   <span class="operator">|</span> <span class="number">1412344</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> John     <span class="operator">|</span> adkadkaw <span class="operator">|</span> <span class="number">134231</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Kage     <span class="operator">|</span> slefln   <span class="operator">|</span> <span class="number">1412344</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> John     <span class="operator">|</span> adkadkaw <span class="operator">|</span> <span class="number">134231</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><h5 id="4-3-5-修改数据">4.3.5 修改数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步和第3步不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;update admin set mobile=%s where id=%s&quot;</span>, [<span class="number">123</span>, <span class="number">1</span>, ])</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span>  <span class="comment">-- 修改前</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Kage     <span class="operator">|</span> slefln   <span class="operator">|</span> <span class="number">1412344</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> John     <span class="operator">|</span> adkadkaw <span class="operator">|</span> <span class="number">134231</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">123</span>         <span class="operator">|</span>  <span class="comment">-- 修改后</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Kage     <span class="operator">|</span> slefln   <span class="operator">|</span> <span class="number">1412344</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> John     <span class="operator">|</span> adkadkaw <span class="operator">|</span> <span class="number">134231</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><h4 id="4-4-总结">4.4 总结</h4><ul><li>在<code>新增</code> <code>删除</code> <code>修改</code>一定要commit</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><ul><li>在<code>查询</code>时，不需要commit，但要fetchall/fetchone</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="comment"># 第一条数据，字典，无数据时是空列表</span></span><br><span class="line">ans1 = cursor.fetchone()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有数据，元素为字典的列表，无数据时是None</span></span><br><span class="line">ans2 = cursor.fetchall()</span><br></pre></td></tr></table></figure><ul><li>不要用python的字符串格式化，一定要execute</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;...%s   ...%s   ...%s&quot;</span>, [<span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, ])</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="5-案例：Flask-MySQL">5. 案例：Flask + MySQL</h3><h4 id="5-1-新增用户">5.1 新增用户</h4><ul><li>网页/add/user</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/add/user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;手机号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提 交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>python操作，链接mysql</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add/user&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;add_user.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    user = request.form.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    password = request.form.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    mobile = request.form.get(<span class="string">&quot;mobile&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 链接mysql</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;&lt;PASSWORD&gt;&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 发送指令</span></span><br><span class="line">    sql = <span class="string">&quot;insert into admin(username,password,mobile) values(%s,%s,%s)&quot;</span></span><br><span class="line">    cursor.execute(sql, [user,password,mobile])</span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 关闭链接</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;添加成功&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> somebody <span class="operator">|</span> <span class="number">123</span>      <span class="operator">|</span> <span class="number">12345</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+</span></span><br></pre></td></tr></table></figure><h4 id="5-2-查询并输出到页面">5.2 查询并输出到页面</h4><ul><li>网页show/user</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for item in data_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.password &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.mobile &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>python操作，赠加函数show_user</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/show/user&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user</span>():</span><br><span class="line">    <span class="comment"># 1. 链接mysql</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;&lt;PASSWORD&gt;&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 发送指令</span></span><br><span class="line">    sql = <span class="string">&quot;select * from admin&quot;</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    data_list = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 关闭链接</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;show_user.html&quot;</span>, data_list=data_list)</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240705%E4%B8%8B%E5%8D%8852806819.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240705%E4%B8%8B%E5%8D%8852855131.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理 笔记目录</title>
      <link href="/posts/40c55931.html"/>
      <url>/posts/40c55931.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主根据复旦大学本科课程《经济学原理》整理的课程笔记。点击链接即可前往对应文章查看，笔记以pdf的格式展示。更多信息，可前往本人的<a href="https://github.com/isKage/iskage.github.io">Github库</a>中查询。或者直接右键下载。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>课程书籍为曼昆 (N.Gregory Mankiw) 所著，北京大学出版社出版的<a href="https://book.douban.com/subject/26435630/">《经济学原理》</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="./fb0b40e4.html">经济学十大原理</a></p><p><a href="./ea877fe6.html">像经济学家一样思考</a></p><p><a href="./56499585.html">相互依存和贸易收益</a></p><p><a href="./aca4b9e7.html">税收的代价</a></p><p><a href="./43f60f06.html">国际贸易</a></p><p><a href="./7f1ef3f0.html">外部性</a></p><p><a href="./d0db7a3f.html">垄断竞争</a></p><p><a href="./f62b5ee.html">寡头</a></p><p><a href="./7722b671.html">一国收入的衡量</a></p><p><a href="./a311e5d0.html">生活费用的衡量</a></p><p><a href="./85084a49.html">储蓄、投资和金融体系 金融学的基本工具 货币制度</a></p><p><a href="./2db34bd9.html">货币政策和财政政策对总需求的影响</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(12) 货币政策和财政政策对总需求的影响 (完)</title>
      <link href="/posts/2db34bd9.html"/>
      <url>/posts/2db34bd9.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/34.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/34.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(11) 储蓄、投资和金融体系 金融学的基本工具 货币制度</title>
      <link href="/posts/85084a49.html"/>
      <url>/posts/85084a49.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/26.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/26.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(10) 生活费用的衡量</title>
      <link href="/posts/a311e5d0.html"/>
      <url>/posts/a311e5d0.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/24.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/24.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(9) 一国收入的衡量</title>
      <link href="/posts/7722b671.html"/>
      <url>/posts/7722b671.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/23.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/23.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(8) 寡头</title>
      <link href="/posts/f62b5ee.html"/>
      <url>/posts/f62b5ee.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/17.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/17.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(7) 垄断竞争</title>
      <link href="/posts/d0db7a3f.html"/>
      <url>/posts/d0db7a3f.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/16.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/16.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(6) 外部性</title>
      <link href="/posts/7f1ef3f0.html"/>
      <url>/posts/7f1ef3f0.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/10.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/10.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(5) 国际贸易</title>
      <link href="/posts/43f60f06.html"/>
      <url>/posts/43f60f06.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/09.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/09.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(4) 税收的代价</title>
      <link href="/posts/aca4b9e7.html"/>
      <url>/posts/aca4b9e7.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/08.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/08.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(3) 相互依存和贸易收益</title>
      <link href="/posts/56499585.html"/>
      <url>/posts/56499585.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/03.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/03.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(2) 像经济学家一样思考</title>
      <link href="/posts/ea877fe6.html"/>
      <url>/posts/ea877fe6.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/02.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/02.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学原理(1) 经济学十大原理</title>
      <link href="/posts/fb0b40e4.html"/>
      <url>/posts/fb0b40e4.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./40c55931.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/经济学原理笔记/01.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/经济学原理笔记/01.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论 笔记目录</title>
      <link href="/posts/a6a9785e.html"/>
      <url>/posts/a6a9785e.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主根据复旦大学本科课程《管理学导论》整理的课程笔记。点击链接即可前往对应文章查看，笔记以pdf的格式展示。更多信息，可前往本人的<a href="https://github.com/isKage/iskage.github.io">Github库</a>中查询。或者直接右键下载。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>课程书籍为《管理学》编写组编写，高等教育出版社出版的<a href="https://book.douban.com/subject/30875101/">《管理学》</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="./d0c50e8c.html">1管理与组织导论</a></p><p><a href="./68173e37.html">2管理与管理者</a></p><p><a href="./c68d1930.html">3经典管理理论</a></p><p><a href="./6bb1a7c0.html">4决策</a></p><p><a href="./d147422a.html">5战略管理(上)</a></p><p><a href="./c85c736b.html">5战略管理(下)</a></p><p><a href="./75c3361.html">6组织设计</a></p><p><a href="./e8705652.html">7人员配置</a></p><p><a href="./80a3e173.html">8领导力</a></p><p><a href="./a9f9fa5b.html">9计划和组织文化(上)</a></p><p><a href="./b0e2cb1a.html">9计划和组织文化(下)</a></p><p><a href="./40df443d.html">10激励</a></p><p><a href="./23d62f75.html">11沟通</a></p><p><a href="./4f076b5d.html">12控制与运营</a></p><p><a href="./c1c25776.html">13组织创新与组织变革</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(13)组织创新与组织变革(完)</title>
      <link href="/posts/c1c25776.html"/>
      <url>/posts/c1c25776.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/13组织创新与组织变革.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/15.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(12)控制与运营</title>
      <link href="/posts/4f076b5d.html"/>
      <url>/posts/4f076b5d.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/12控制与运营.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/14.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(11)沟通</title>
      <link href="/posts/23d62f75.html"/>
      <url>/posts/23d62f75.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/11沟通.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/13.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(10)激励</title>
      <link href="/posts/40df443d.html"/>
      <url>/posts/40df443d.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/10激励.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/12.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(9)计划和组织文化(下)</title>
      <link href="/posts/b0e2cb1a.html"/>
      <url>/posts/b0e2cb1a.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/9计划和组织文化(下).pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/11.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(9)计划和组织文化(上)</title>
      <link href="/posts/a9f9fa5b.html"/>
      <url>/posts/a9f9fa5b.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/9计划和组织文化(上).pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/10.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(8)领导力</title>
      <link href="/posts/80a3e173.html"/>
      <url>/posts/80a3e173.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/8领导力.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/09.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(7)人员配置</title>
      <link href="/posts/e8705652.html"/>
      <url>/posts/e8705652.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/7人员配置.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/08.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(6)组织设计</title>
      <link href="/posts/75c3361.html"/>
      <url>/posts/75c3361.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/6组织设计.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/07.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(5)战略管理(下)</title>
      <link href="/posts/c85c736b.html"/>
      <url>/posts/c85c736b.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/5战略管理(下).pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/06.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(5)战略管理(上)</title>
      <link href="/posts/d147422a.html"/>
      <url>/posts/d147422a.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/5战略管理(上).pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/05.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(3)决策</title>
      <link href="/posts/6bb1a7c0.html"/>
      <url>/posts/6bb1a7c0.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/4决策.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/04.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(3)经典管理理论</title>
      <link href="/posts/c68d1930.html"/>
      <url>/posts/c68d1930.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/3经典管理理论.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/03.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(2)管理与管理者</title>
      <link href="/posts/68173e37.html"/>
      <url>/posts/68173e37.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/2管理与管理者.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/02.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理学导论(1)管理与组织导论</title>
      <link href="/posts/d0c50e8c.html"/>
      <url>/posts/d0c50e8c.html</url>
      
        <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./a6a9785e.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div><!--   <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="/pdf/管理学导论笔记/1管理与组织导论.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>   -->  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/管理学导论笔记/01.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/baidu_verify_codeva-Mp1sMZQTvc.html"/>
      <url>/baidu_verify_codeva-Mp1sMZQTvc.html</url>
      
        <content type="html"><![CDATA[aee881fde1ab2586e96db3ff1583b343]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/google15991a1123c5c160.html"/>
      <url>/google15991a1123c5c160.html</url>
      
        <content type="html"><![CDATA[google-site-verification: google15991a1123c5c160.html]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类页</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>以下为已经归档的文章，点击即可跳转至文档目录</p></div><div class="link-container">    <a href="../posts/a6a9785e.html" class="styled-link" style='color:white'>管理学导论笔记</a>    <a href="../posts/40c55931.html" class="styled-link" style='color:white'>经济学原理笔记</a></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  /* 全屏按钮 */  .fullscreen-btn {    position: absolute;    top: 10px;    right: 10px;    z-index: 10;    padding: 6px 10px;    background: linear-gradient(135deg, #007BFF, #0056b3);    color: white;    font-size: 10px;    font-weight: bold;    border: none;    border-radius: 2.5px;    cursor: pointer;    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.2);    transition: all 0.3s ease;  }    .fullscreen-btn:hover {    background: linear-gradient(135deg, #0056b3, #007BFF);    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.3);    transform: scale(1.05);  }    .fullscreen-btn:active {    background: linear-gradient(135deg, #004085, #0069d9);    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);    transform: scale(0.95);  }  /* 分类页样式 */  /* 容器设置 */.link-container {  display: flex;  flex-wrap: wrap; /* 自动换行 */  gap: 15px; /* 间距 */  justify-content: start; /* 左对齐 */  padding: 10px;}/* 单个块样式 */.styled-link {  position: relative;  display: inline-block;  font-size: 1rem; /* 字体大小 */  font-weight: bold;  text-decoration: none; /* 去掉下划线 */  color: #ffffff; /* 字体颜色为白色 */  padding: 10px 20px;  border-radius: 8px; /* 圆角 */  transition: all 0.3s ease; /* 动效 */  overflow: hidden; /* 防止子元素溢出 */  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15); /* 按钮阴影 */}/* 背景颜色设置（随机 4 种颜色） */.styled-link:nth-child(7n+6) { background-color: #3d33ff; }.styled-link:nth-child(7n+1) { background-color: #ff3333; }.styled-link:nth-child(7n+2) { background-color: #33ff36; }.styled-link:nth-child(7n+3) { background-color: #3385FF; }.styled-link:nth-child(7n+4) { background-color: #9933FF; }.styled-link:nth-child(7n+5) { background-color: #33ebff; }.styled-link:nth-child(7n+7) { background-color: #ff3369; }/* 主内容文字 */.styled-link span {  position: relative;  z-index: 1; /* 确保文字在最上层 */  text-shadow: 0px 2px 5px rgba(0, 0, 0, 0.6); /* 字体阴影，增强可见性 */}/* 悬停效果 */.styled-link:hover {  transform: scale(1.05); /* 放大按钮 */  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); /* 悬停时的按钮阴影 */}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/pdf-viewer.js"/>
      <url>/js/pdf-viewer.js</url>
      
        <content type="html"><![CDATA[document.addEventListener("DOMContentLoaded", function () {    const fullscreenBtn = document.querySelector(".fullscreen-btn");    const container = document.querySelector("#pdf-container");    const iframe = document.querySelector("#pdf-frame");      fullscreenBtn.addEventListener("click", function () {      if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {        // 已经在全屏模式，退出全屏        exitFullscreen();      } else {        // 进入全屏模式        enterFullscreen();      }    });      // 进入全屏模式    function enterFullscreen() {      if (container.requestFullscreen) {        container.requestFullscreen();      } else if (container.webkitRequestFullscreen) {        container.webkitRequestFullscreen(); // Safari      } else if (container.msRequestFullscreen) {        container.msRequestFullscreen(); // IE11      }    }      // 退出全屏模式    function exitFullscreen() {      if (document.exitFullscreen) {        document.exitFullscreen();      } else if (document.webkitExitFullscreen) {        document.webkitExitFullscreen(); // Safari      } else if (document.msExitFullscreen) {        document.msExitFullscreen(); // IE11      }    }      // 更新按钮文本并调整 iframe 大小    container.addEventListener("fullscreenchange", updateButtonText);    container.addEventListener("webkitfullscreenchange", updateButtonText);    container.addEventListener("msfullscreenchange", updateButtonText);      function updateButtonText() {      if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {        fullscreenBtn.textContent = "退出全屏"; // 进入全屏时更新按钮文本        iframe.style.width = "100vw"; // 全屏宽度        iframe.style.height = "100vh"; // 全屏高度      } else {        fullscreenBtn.textContent = "全屏模式"; // 退出全屏时恢复按钮文本        iframe.style.width = "100%"; // 恢复正常宽度        iframe.style.height = "600px"; // 恢复正常高度      }    }  });]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签页</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[(window._iconfont_svg_string_4810983 =  '<svg><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M98.21248349 469.39495801L1038.17046641 88.47058818c9.07562988-3.6554625 19.28571417 0.75630234 22.94117666 9.70588213 1.2605045 3.27731133 1.63865566 6.80672286 0.88235243 10.21008428L896.11164247 922.29411729c-1.89075674 9.57983203-11.21848769 15.75630263-20.79831884 13.73949579-2.39495801-0.50420127-4.66386592-1.51260469-6.68067275-2.89915927L619.93517187 756.15966406l-143.31932753 117.73109268c-14.49579815 11.97479004-35.92437011 9.8319331-47.89915928-4.66386592-2.64705908-3.27731133-4.66386592-6.93277295-6.05042051-10.96638662l-90.50420126-275.16806719-233.06722735-80.67226904c-9.20168086-3.15126035-14.11764697-13.23529453-10.84033565-22.43697451 1.63865566-4.78991602 5.29411729-8.69747871 9.9579832-10.58823545z" fill="#FCFDFC" ></path><path d="M878.84273516 961.62184883c-2.77310918 0-5.67226934-0.25210107-8.57142862-0.88235333-5.92436953-1.2605045-11.34453779-3.52941152-16.26050391-7.05882303L620.94357529 787.92436953l-128.44537822 105.50420156c-12.22689111 10.0840333-27.6050417 14.74789922-43.36134434 13.23529453-15.75630263-1.51260469-29.99999971-9.07562988-39.95798291-21.30252099-4.66386592-5.67226934-8.19327744-12.10084013-10.46218534-19.15966406l-86.59663859-263.31932725-221.2184874-76.63865625c-10.84033653-3.7815126-19.53781523-11.47058789-24.57983144-21.80672228s-5.67226934-21.93277325-1.89075674-32.77310887c4.03361367-11.72268896 12.98319346-21.05041991 24.45378222-25.71428585L1028.71668447 65.15126036c21.93277325-8.82352969 46.89075674 1.76470576 55.84033652 23.5714289 3.15126035 7.81512627 3.9075627 16.38655489 2.26890792 24.70588242L920.8175249 927.33613438c-4.15966377 20.29411758-22.05882334 34.28571445-41.97478974 34.28571445z m-258.90756329-205.46218477l248.69747901 176.97478975c2.01680684 1.38655459 4.28571387 2.39495801 6.68067276 2.89915928 9.57983203 1.89075674 18.90756299-4.28571387 20.79831885-13.7394958L1062.12004649 108.38655459c0.75630234-3.40336143 0.37815117-6.93277295-0.88235333-10.21008428-3.6554625-9.07562988-13.99159687-13.36134463-22.94117665-9.70588213L98.21248349 469.39495801c-4.66386592 1.89075674-8.31932754 5.79831943-10.08403417 10.58823545-1.51260469 4.41176484-1.2605045 9.20168086 0.75630322 13.48739472 2.01680684 4.28571387 5.67226934 7.4369751 10.08403331 8.94957979l233.06722646 80.67226904L422.54021445 858.2605042c1.2605045 4.03361367 3.40336143 7.68907529 6.05041963 10.96638662 5.79831943 7.05882393 13.99159687 11.34453779 22.94117667 12.22689111 9.07562988 0.88235332 17.89915957-1.76470576 24.95798349-7.56302519l143.44537763-117.73109268z" fill="#4A4A4A" ></path><path d="M331.90996221 582.96638692l92.89915927 277.81512538c5.54621836 16.51260498 23.31932783 25.46218477 39.83193282 19.91596642 3.6554625-1.2605045 6.93277295-3.02521026 9.8319331-5.42016739l144.8319331-117.73109268-145.33613437-104.49579814c261.05042021-253.10924385 393.27731104-381.42857109 396.55462148-384.8319334 0.50420127-0.50420127 2.26890791-3.02521026 0.37815118-6.1764706-1.13445353-1.38655459-2.89915927-2.89915927-6.17647061-1.89075586-177.73109209 105.75630263-355.33613408 213.40336113-532.81512597 322.81512626z" fill="#90d8f3" ></path><path d="M454.68307109 883.59663887c-5.04201709 0-9.9579832-1.13445353-14.62184823-3.40336143-7.81512627-3.9075627-13.7394958-10.58823545-16.51260499-18.90756299L330.39735753 582.58823487l0.88235243-0.50420128C507.87634854 473.0504205 687.24609628 364.39495771 864.09483594 259.01680713l0.25210107-0.12605098c3.15126035-1.00840342 5.54621836-0.25210107 7.5630252 2.26890791l0.12605009 0.12605009c2.14285693 3.52941152 0.50420127 6.55462177-0.50420126 7.68907618-3.40336143 3.52941152-136.38655459 132.60504199-395.54621895 383.8235291l145.46218535 104.62184825-146.09243671 118.73949609c-3.02521026 2.5210081-6.55462177 4.41176484-10.33613526 5.67226933-3.27731133 1.13445353-6.80672286 1.76470576-10.33613438 1.76470576z m-121.26050419-300.00000059l92.52100898 276.80672286c2.5210081 7.68907529 7.94117637 13.86554589 15.12605039 17.52100839 7.18487402 3.6554625 15.37815146 4.15966377 23.06722676 1.63865566 3.40336143-1.13445353 6.68067187-2.89915927 9.45378105-5.16806718l143.57142861-116.72268926L471.9519793 653.1764706l1.13445351-1.00840341C732.87634854 400.31932783 866.23769287 270.86554619 869.5150042 267.33613467c0 0 1.76470576-2.01680684 0.25210107-4.66386592-0.88235332-1.13445353-2.14285693-2.14285693-4.66386592-1.38655458-176.47058847 105.12605039-355.33613408 213.52941211-531.68067245 322.31092411z" fill="#CAE0EE" ></path><path d="M467.03601231 874.89915927l6.55462177-222.85714218 145.84033652 105.37815059-148.23529453 119.49579844c-1.13445353 0.88235332-2.64705908 0.75630234-3.52941152-0.37815118-0.37815117-0.37815117-0.63025223-1.00840342-0.63025224-1.63865567z" fill="#78bfe5" ></path><path d="M469.55702128 878.80672285c-1.13445353 0-2.14285693-0.50420127-2.89916015-1.38655459-0.50420127-0.75630234-0.88235332-1.63865566-0.88235244-2.52100899l6.68067188-225.25210019 148.99159687 107.7731086-1.26050449 1.00840341-148.23529365 119.49579844c-0.75630234 0.63025223-1.51260469 0.88235332-2.39495802 0.88235333z m5.29411729-224.36974775l-6.55462177 220.46218417c0 0.25210107 0.1260501 0.63025223 0.25210107 0.88235333 0.37815117 0.50420127 1.2605045 0.63025223 1.76470576 0.25210107l146.97479004-118.48739502-142.4369751-103.10924355z" fill="#94C3E2" ></path></symbol><symbol id="icon-music" viewBox="0 0 1024 1024"><path d="M903.108141 64.004733c-183.118598 3.806699-376.940978 48.998971-560.01455 111.995747-0.11154-1.285273 0 559.991014 0 559.991014-33.038464-8.006348-89.207741-2.405793-128.463814 16.297175-72.740698 34.886555-112.499214 105.334024-88.587618 157.412123 23.798009 51.966559 102.141308 65.967434 174.938288 31.139208 66.584488-37.635155 98.110505-92.848665 98.110505-148.84705l0.896416-475.993948c144.275941-44.73997 302.868959-75.821873 447.12034-83.995019l0 447.990151c-42.00058-7.897877-90.718141 3.695159-130.926912 22.960944-72.851215 34.885532-112.554472 105.33607-88.586594 157.298536 23.853267 52.080146 102.140285 66.081021 174.938288 31.194466 51.801806-24.750707 100.57565-67.983347 100.57565-154.560168L903.108141 64.004733 903.108141 64.004733zM903.108141 64.004733" fill="#272636" ></path></symbol><symbol id="icon-university" viewBox="0 0 1024 1024"><path d="M510.543324 126.388549 62.385351 351.059518l64.021106 42.158169 0 405.41345 64.021106 32.007995L190.427562 434.199053l319.821049 204.374714 264.381389-170.96479 184.074366-119.685893L510.543324 126.388549zM510.543324 126.388549" fill="#272636" ></path><path d="M778.900258 510.524392 510.543324 686.124759 239.508397 510.524392l-17.065677 163.115008c32.014134 24.921599 224.078475 156.99973 288.104697 221.020836 64.022129-64.021106 256.087493-196.007139 288.100604-220.952274L778.900258 510.524392 778.900258 510.524392zM778.900258 510.524392" fill="#272636" ></path></symbol><symbol id="icon-data" viewBox="0 0 1024 1024"><path d="M512 0C296.192 0 64 65.056 64 208v608C64 958.88 296.192 1024 512 1024c215.776 0 448-65.12 448-208v-608C960 65.056 727.744 0 512 0z m384 816c0 79.488-171.936 144-384 144-212.096 0-384-64.512-384-144v-119.552C194.112 764.576 353.6 800 512 800s317.888-35.424 384-103.552V816z m0-192h-0.128c0 0.32 0.128 0.672 0.128 0.992C896 704 724.064 768 512 768S128 704 128 624.992c0-0.32 0.128-0.672 0.128-0.992H128v-119.552C194.112 572.576 353.6 608 512 608s317.888-35.424 384-103.552V624z m0-192h-0.128c0 0.32 0.128 0.672 0.128 0.992C896 512 724.064 576 512 576S128 512 128 432.992c0-0.32 0.128-0.672 0.128-0.992H128v-109.952C211.872 385.952 365.6 416 512 416s300.128-30.048 384-93.952V432zM512 352C299.904 352 128 287.488 128 208 128 128.448 299.904 64 512 64c212.064 0 384 64.448 384 144 0 79.488-171.936 144-384 144z" fill="#333333" ></path><path d="M800 832m-32 0a32 32 0 1 0 64 0 32 32 0 1 0-64 0Z" fill="#333333" ></path><path d="M800 640m-32 0a32 32 0 1 0 64 0 32 32 0 1 0-64 0Z" fill="#333333" ></path><path d="M800 448m-32 0a32 32 0 1 0 64 0 32 32 0 1 0-64 0Z" fill="#333333" ></path></symbol><symbol id="icon-fudandaxue" viewBox="0 0 1024 1024"><path d="M93.866667 513.706667a418.133333 418.133333 0 1 0 836.266666 0 418.133333 418.133333 0 1 0-836.266666 0Z" fill="#FFFFFF" ></path><path d="M512 81.92C273.066667 81.92 80.213333 274.773333 80.213333 513.706667S273.066667 947.2 512 947.2s431.786667-194.56 431.786667-433.493333S750.933333 81.92 512 81.92z m0 851.626667c-230.4 0-418.133333-187.733333-418.133333-418.133334s187.733333-418.133333 418.133333-418.133333 418.133333 187.733333 418.133333 418.133333-187.733333 418.133333-418.133333 418.133334z" fill="#D5271C" ></path><path d="M785.066667 293.546667c-1.706667-3.413333-3.413333-3.413333-5.12-1.706667-6.826667 5.12-13.653333 10.24-18.773334 13.653333l-1.706666 1.706667c-3.413333 3.413333-3.413333 5.12-1.706667 10.24 0 1.706667 1.706667 1.706667 0 5.12 0 0-1.706667 0-1.706667-1.706667-3.413333-3.413333-6.826667-6.826667-8.533333-10.24-5.12-6.826667-10.24-13.653333-13.653333-17.066666 0-1.706667-1.706667-1.706667 0-3.413334 1.706667 0 3.413333 1.706667 5.12 3.413334s3.413333 1.706667 5.12 0 3.413333-1.706667 6.826666-3.413334c8.533333-6.826667 13.653333-11.946667 22.186667-17.066666 6.826667-6.826667 13.653333-11.946667 20.48-17.066667 1.706667-1.706667 3.413333-1.706667 5.12-3.413333 3.413333-3.413333 3.413333-6.826667 1.706667-10.24 0-1.706667-1.706667-1.706667-1.706667-3.413334 0 0 1.706667-1.706667 1.706667 0l1.706666 1.706667c8.533333 10.24 15.36 18.773333 22.186667 27.306667 3.413333 3.413333 5.12 6.826667 6.826667 10.24 3.413333 5.12 5.12 8.533333 5.12 11.946666 3.413333 13.653333-11.946667 23.893333-20.48 22.186667-3.413333 0-6.826667-1.706667-10.24-3.413333-1.706667 0-3.413333-1.706667-5.12-1.706667 0 1.706667-1.706667 1.706667-1.706667 3.413333-3.413333 10.24-5.12 17.066667-8.533333 27.306667 0 1.706667-1.706667 5.12-1.706667 6.826667-1.706667 3.413333-1.706667 6.826667-1.706667 11.946666v1.706667H785.066667c-5.12-5.12-10.24-11.946667-11.946667-15.36-1.706667-1.706667-1.706667-3.413333 0-5.12 3.413333-10.24 6.826667-18.773333 10.24-29.013333 0-6.826667 1.706667-11.946667 1.706667-15.36z m40.96-11.946667c0-6.826667-3.413333-11.946667-6.826667-13.653333-1.706667-1.706667-3.413333-1.706667-5.12 0-3.413333 3.413333-6.826667 5.12-10.24 8.533333-5.12 3.413333-10.24 6.826667-13.653333 11.946667-1.706667 1.706667-1.706667 3.413333 0 5.12 3.413333 3.413333 5.12 5.12 8.533333 6.826666 3.413333 3.413333 8.533333 3.413333 11.946667 1.706667 6.826667-3.413333 11.946667-6.826667 13.653333-11.946667 0-5.12 0-6.826667 1.706667-8.533333z" fill="#DA251B" ></path><path d="M196.266667 469.333333v-3.413333c0-5.12-1.706667-8.533333-6.826667-8.533333-13.653333-5.12-29.013333-8.533333-42.666667-11.946667-5.12-1.706667-10.24-3.413333-13.653333-5.12h-1.706667c-3.413333 0-5.12 0-8.533333 3.413333 0 0 0 1.706667-1.706667 1.706667-1.706667 1.706667-1.706667 3.413333-3.413333 3.413333-1.706667-1.706667 0-3.413333 0-3.413333 3.413333-11.946667 6.826667-20.48 10.24-32.426667 1.706667-6.826667 5.12-11.946667 6.826667-15.36 5.12-8.533333 11.946667-13.653333 20.48-15.36 6.826667-1.706667 13.653333-3.413333 18.773333-1.706666 8.533333 1.706667 13.653333 5.12 22.186667 10.24 8.533333 6.826667 13.653333 13.653333 13.653333 25.6 1.706667 6.826667 0 13.653333-1.706667 20.48l-10.24 35.84s0 1.706667-1.706666 1.706666c1.706667-5.12 1.706667-5.12 0-5.12z m-37.546667-73.386666c-3.413333 0-8.533333 0-11.946667 1.706666-8.533333 1.706667-13.653333 6.826667-13.653333 13.653334-1.706667 6.826667 0 8.533333 5.12 10.24 6.826667 3.413333 15.36 5.12 25.6 6.826666 11.946667 3.413333 22.186667 6.826667 34.133333 10.24h3.413334c3.413333 0 5.12 0 6.826666-3.413333 3.413333-6.826667 3.413333-17.066667-5.12-23.893333-3.413333-3.413333-6.826667-5.12-10.24-6.826667-11.946667-5.12-23.893333-8.533333-34.133333-8.533333z" fill="#D5271C" ></path><path d="M774.826667 215.04c-5.12 6.826667-10.24 13.653333-11.946667 18.773333-1.706667-1.706667-3.413333-1.706667-1.706667-3.413333 0-1.706667 1.706667-3.413333 1.706667-5.12 1.706667-6.826667 1.706667-13.653333-3.413333-18.773333-3.413333-3.413333-8.533333-6.826667-11.946667-10.24-1.706667 0-1.706667-1.706667-3.413333-1.706667s-3.413333 0-5.12 1.706667c-1.706667 3.413333-5.12 6.826667-6.826667 10.24-3.413333 5.12-6.826667 10.24-10.24 13.653333 1.706667 3.413333 5.12 3.413333 6.826667 5.12 5.12 1.706667 10.24 1.706667 13.653333-1.706667l5.12-5.12s1.706667 0 3.413333-1.706666c0 1.706667 0 1.706667-1.706666 3.413333-6.826667 10.24-13.653333 18.773333-20.48 30.72h-1.706667v-1.706667-3.413333c0-1.706667 1.706667-3.413333 1.706667-5.12 1.706667-6.826667 0-11.946667-5.12-15.36-1.706667-1.706667-3.413333-1.706667-5.12-3.413333-1.706667 0-1.706667 1.706667-1.706667 1.706666-5.12 8.533333-10.24 13.653333-15.36 22.186667-3.413333 3.413333-3.413333 6.826667 1.706667 10.24 10.24 8.533333 20.48 13.653333 35.84 8.533333 3.413333-1.706667 5.12-1.706667 8.533333-3.413333h3.413333c-1.706667 3.413333-11.946667 11.946667-17.066666 17.066667 0 0-1.706667 0-1.706667-1.706667-17.066667-13.653333-35.84-23.893333-52.906667-37.546667-1.706667 0-1.706667-1.706667-3.413333-1.706666v-1.706667h3.413333c3.413333 3.413333 3.413333 3.413333 8.533334-1.706667 11.946667-15.36 22.186667-32.426667 34.133333-47.786666 3.413333-3.413333 3.413333-6.826667 0-10.24l-3.413333-3.413334V170.666667h1.706666c1.706667 0 1.706667 1.706667 3.413334 1.706666 10.24 6.826667 18.773333 13.653333 29.013333 20.48 8.533333 5.12 15.36 11.946667 22.186667 15.36-1.706667 5.12-1.706667 6.826667 0 6.826667zM279.893333 191.146667c1.706667 1.706667 1.706667 1.706667 0 0v3.413333c-3.413333 5.12-3.413333 8.533333 1.706667 13.653333 13.653333 15.36 29.013333 32.426667 42.666667 49.493334 1.706667 1.706667 1.706667 3.413333 3.413333 5.12 0 1.706667-1.706667 3.413333-3.413333 1.706666-5.12 0-8.533333-1.706667-11.946667-1.706666l-25.6-5.12c-5.12 0-10.24-1.706667-13.653333-1.706667-10.24-1.706667-18.773333-3.413333-29.013334-5.12h-3.413333c0 1.706667 1.706667 1.706667 1.706667 1.706667 10.24 11.946667 20.48 23.893333 32.426666 35.84 0 1.706667 1.706667 1.706667 1.706667 1.706666 3.413333 3.413333 6.826667 3.413333 11.946667 1.706667 1.706667 0 1.706667-1.706667 3.413333-1.706667v1.706667c0 1.706667-1.706667 1.706667-3.413333 3.413333-5.12 5.12-10.24 10.24-15.36 11.946667-1.706667 0-1.706667 1.706667-3.413334 0 0-1.706667 1.706667-3.413333 1.706667-3.413333 3.413333-5.12 1.706667-8.533333 0-11.946667-3.413333-3.413333-5.12-6.826667-8.533333-8.533333-10.24-11.946667-18.773333-22.186667-29.013334-34.133334-1.706667-1.706667-5.12-3.413333-8.533333-3.413333h-8.533333s-1.706667 0-3.413334-1.706667c0-1.706667 1.706667-1.706667 1.706667-1.706666 5.12-5.12 10.24-8.533333 13.653333-13.653334 1.706667-1.706667 5.12-3.413333 6.826667-1.706666 11.946667 1.706667 20.48 3.413333 32.426667 5.12 10.24 1.706667 18.773333 3.413333 29.013333 5.12h3.413333c0-1.706667 0-1.706667-1.706666-1.706667-8.533333-10.24-15.36-17.066667-23.893334-27.306667-3.413333-5.12-8.533333-5.12-13.653333-1.706666h-3.413333V204.8c10.24-1.706667 13.653333-6.826667 22.186666-13.653333 0 1.706667 0 1.706667 0 0zM527.36 199.68h-3.413333c-1.706667 0-1.706667-1.706667-3.413334-3.413333-17.066667-17.066667-35.84-37.546667-52.906666-54.613334l-3.413334-3.413333c-1.706667 0-1.706667 1.706667-1.706666 1.706667 1.706667 15.36 1.706667 30.72 3.413333 46.08v1.706666c0 5.12 3.413333 8.533333 8.533333 8.533334 1.706667 0 3.413333-1.706667 3.413334 1.706666 0 1.706667-1.706667 1.706667-3.413334 1.706667-6.826667 0-11.946667 1.706667-18.773333 1.706667h-3.413333v-1.706667s1.706667-1.706667 3.413333-1.706667 3.413333-1.706667 5.12-1.706666c1.706667-1.706667 3.413333-1.706667 3.413333-5.12V187.733333c0-5.12 0-10.24-1.706666-13.653333-1.706667-13.653333-1.706667-27.306667-3.413334-39.253333 0-3.413333-1.706667-5.12-3.413333-8.533334-1.706667-1.706667-5.12-3.413333-6.826667-5.12l-1.706666-1.706666c0-1.706667 1.706667-1.706667 3.413333-1.706667h13.653333c3.413333 0 6.826667 0 10.24-1.706667l23.893334 23.893334c8.533333 8.533333 13.653333 15.36 22.186666 23.893333 1.706667 0 1.706667-1.706667 1.706667-1.706667v-13.653333c0-6.826667-1.706667-13.653333-1.706667-20.48v-3.413333c-1.706667-5.12-3.413333-6.826667-8.533333-8.533334-1.706667 0-3.413333 0-3.413333-1.706666v-1.706667-1.706667c8.533333-1.706667 15.36-1.706667 23.893333-1.706666 0 1.706667 0 1.706667-1.706667 1.706666H529.066667c-3.413333 1.706667-5.12 5.12-5.12 8.533334 0 5.12 0 10.24 1.706666 15.36 0 11.946667 1.706667 20.48 1.706667 32.426666 0 8.533333 1.706667 15.36 1.706667 22.186667-1.706667 8.533333-1.706667 8.533333-1.706667 10.24zM397.653333 873.813333c3.413333 0 6.826667 0 10.24 1.706667v5.12c6.826667 44.373333 39.253333-10.24 40.96-13.653333v-1.706667c-1.706667-1.706667-1.706667 0-3.413333 0-13.653333 8.533333-27.306667 5.12-37.546667-10.24-3.413333-6.826667-5.12-13.653333-1.706666-20.48 1.706667-3.413333 1.706667-6.826667 3.413333-10.24 3.413333-8.533333 11.946667-13.653333 20.48-15.36 11.946667-3.413333 22.186667 1.706667 30.72 11.946667 6.826667 11.946667 8.533333 23.893333 5.12 37.546666-3.413333 11.946667-6.826667 22.186667-11.946667 32.426667-5.12 6.826667-11.946667 11.946667-17.066666 11.946667-20.48 1.706667-32.426667-5.12-35.84-23.893334-3.413333-1.706667-3.413333-3.413333-3.413334-5.12 3.413333 0 0 1.706667 0 0z m58.026667-37.546666v-3.413334c-1.706667-6.826667-5.12-13.653333-11.946667-13.653333-6.826667-3.413333-13.653333-1.706667-17.066666 3.413333-5.12 3.413333-8.533333 8.533333-10.24 13.653334-1.706667 8.533333 0 13.653333 5.12 18.773333 8.533333 6.826667 20.48 8.533333 29.013333-3.413333 3.413333-3.413333 5.12-8.533333 5.12-15.36zM139.946667 650.24c-1.706667-1.706667-3.413333-3.413333-3.413334-5.12-5.12-15.36-8.533333-32.426667-13.653333-47.786667-1.706667-3.413333-1.706667-8.533333-3.413333-11.946666 1.706667 0 1.706667-1.706667 3.413333-1.706667 6.826667-1.706667 13.653333-3.413333 18.773333-5.12h1.706667s0 1.706667-1.706667 1.706667c-1.706667 1.706667-3.413333 1.706667-5.12 3.413333-3.413333 1.706667-5.12 5.12-6.826666 6.826667-1.706667 1.706667-1.706667 5.12-1.706667 6.826666 0 6.826667 1.706667 13.653333 3.413333 18.773334 1.706667 3.413333 3.413333 5.12 6.826667 3.413333 10.24-1.706667 17.066667-5.12 27.306667-8.533333 0 0 1.706667 0 1.706666-1.706667 0-3.413333-1.706667-6.826667-3.413333-8.533333 0-1.706667-3.413333-3.413333-6.826667-3.413334h-6.826666c-1.706667 0-1.706667 0-1.706667-1.706666 1.706667-1.706667 5.12-1.706667 6.826667-1.706667 10.24-3.413333 18.773333-5.12 27.306666-8.533333h6.826667v1.706666c-1.706667 0-1.706667 1.706667-3.413333 1.706667-1.706667 1.706667-3.413333 1.706667-5.12 3.413333-5.12 5.12-6.826667 10.24-5.12 15.36 0 1.706667 1.706667 1.706667 3.413333 1.706667 6.826667-1.706667 13.653333-3.413333 18.773333-5.12 1.706667 0 5.12-1.706667 6.826667-1.706667 5.12-1.706667 6.826667-5.12 6.826667-10.24v-5.12s0-1.706667 1.706666-1.706666c0 0 1.706667 0 1.706667 1.706666 3.413333 11.946667 8.533333 27.306667 11.946667 39.253334v1.706666s-1.706667 0-1.706667-1.706666c-3.413333 1.706667-3.413333 0-3.413333 0-1.706667-3.413333-5.12-5.12-8.533334-3.413334-1.706667 0-3.413333 0-5.12 1.706667-15.36 5.12-34.133333 10.24-49.493333 13.653333-1.706667 0-5.12 1.706667-6.826667 1.706667-5.12 1.706667-6.826667 3.413333-6.826666 10.24-5.12-1.706667-5.12-1.706667-5.12 0zM552.96 849.92c0-5.12 0-10.24 1.706667-15.36 3.413333-8.533333 8.533333-13.653333 15.36-15.36 5.12-1.706667 10.24-1.706667 13.653333-1.706667 17.066667 5.12 27.306667 17.066667 29.013333 35.84 1.706667 5.12 1.706667 11.946667 3.413334 17.066667 1.706667 8.533333 1.706667 17.066667-1.706667 25.6-3.413333 10.24-11.946667 15.36-20.48 17.066667-5.12 1.706667-10.24 1.706667-13.653333-1.706667-11.946667-5.12-18.773333-13.653333-20.48-25.6-3.413333-11.946667-6.826667-27.306667-6.826667-35.84z m11.946667 0c0 3.413333 0 6.826667 1.706666 10.24 1.706667 10.24 3.413333 18.773333 6.826667 27.306667 1.706667 5.12 3.413333 8.533333 8.533333 11.946666 17.066667 17.066667 29.013333-11.946667 25.6-23.893333 0-5.12-1.706667-11.946667-1.706666-15.36-1.706667-8.533333-3.413333-13.653333-6.826667-22.186667-1.706667-3.413333-5.12-6.826667-8.533333-10.24-6.826667-5.12-17.066667-3.413333-22.186667 6.826667-1.706667 3.413333-3.413333 8.533333-3.413333 15.36zM701.44 819.2c-1.706667 1.706667-5.12 3.413333-8.533333 5.12-3.413333-3.413333-20.48-35.84-23.893334-40.96 3.413333-3.413333 20.48-17.066667 35.84-29.013333 3.413333 1.706667 5.12 3.413333 6.826667 8.533333-10.24 6.826667-18.773333 15.36-29.013333 22.186667 1.706667 5.12 10.24 18.773333 11.946666 22.186666 0-1.706667 1.706667-1.706667 1.706667-3.413333 3.413333-6.826667 6.826667-11.946667 13.653333-13.653333 11.946667-6.826667 25.6-5.12 34.133334 5.12 1.706667 3.413333 5.12 5.12 6.826666 8.533333 6.826667 10.24 6.826667 20.48 1.706667 30.72-3.413333 8.533333-11.946667 13.653333-18.773333 15.36-10.24 3.413333-18.773333 1.706667-27.306667-5.12l-1.706667-1.706667v-1.706666c1.706667-3.413333 5.12-5.12 8.533334-8.533334 1.706667 0 1.706667 1.706667 3.413333 1.706667 11.946667 6.826667 22.186667 3.413333 29.013333-13.653333 1.706667-8.533333-1.706667-13.653333-6.826666-20.48l-5.12-5.12c-15.36-6.826667-25.6-1.706667-32.426667 13.653333-3.413333 3.413333-1.706667 6.826667 0 10.24-1.706667 1.706667 0-1.706667 0 0zM116.053333 518.826667c0 1.706667 0 3.413333 1.706667 5.12 0 3.413333 3.413333 6.826667 6.826667 6.826666H172.373333c3.413333 0 8.533333 0 11.946667-1.706666 8.533333-3.413333 11.946667-10.24 11.946667-17.066667 0-3.413333-1.706667-6.826667-1.706667-8.533333-1.706667-6.826667-6.826667-10.24-13.653333-11.946667-5.12-1.706667-10.24-1.706667-13.653334-1.706667H124.586667c-5.12 0-8.533333 3.413333-8.533334 8.533334v3.413333l-1.706666 1.706667-1.706667-1.706667v-1.706667-23.893333h1.706667c0 1.706667 0 1.706667 1.706666 3.413333 1.706667 3.413333 3.413333 5.12 6.826667 5.12h49.493333c5.12 0 10.24 1.706667 13.653334 3.413334 3.413333 1.706667 5.12 3.413333 6.826666 6.826666l5.12 10.24c1.706667 5.12 1.706667 11.946667 1.706667 15.36s0 8.533333-1.706667 11.946667c-3.413333 8.533333-8.533333 13.653333-17.066666 15.36-3.413333 1.706667-8.533333 1.706667-11.946667 1.706667H124.586667c-3.413333 0-6.826667 1.706667-6.826667 6.826666 0 1.706667 0 1.706667-1.706667 3.413334h-1.706666v-3.413334-29.013333c0-3.413333 0-6.826667 1.706666-8.533333-1.706667 0 0 0 0 0zM395.946667 139.946667c0-1.706667 0-1.706667 0 0 8.533333-5.12 15.36-6.826667 22.186666-10.24h1.706667v1.706666l-1.706667 1.706667c-5.12 3.413333-5.12 5.12-3.413333 11.946667 3.413333 8.533333 5.12 15.36 8.533333 23.893333 1.706667 5.12 3.413333 11.946667 5.12 15.36 1.706667 5.12 1.706667 10.24 3.413334 13.653333 0 6.826667-3.413333 13.653333-8.533334 15.36-11.946667 8.533333-22.186667 13.653333-37.546666 11.946667-6.826667 0-11.946667-5.12-15.36-11.946667 0-1.706667-1.706667-3.413333-1.706667-6.826666-5.12-13.653333-10.24-27.306667-13.653333-39.253334 0-1.706667-1.706667-5.12-3.413334-6.826666-1.706667-3.413333-3.413333-5.12-8.533333-3.413334H341.333333c-1.706667 0-3.413333 1.706667-3.413333 0s1.706667-1.706667 1.706667-1.706666c11.946667-5.12 23.893333-8.533333 35.84-13.653334 1.706667 0 1.706667 1.706667 0 1.706667-1.706667 1.706667-3.413333 1.706667-5.12 1.706667-1.706667 1.706667-3.413333 1.706667-3.413334 5.12s0 5.12 1.706667 8.533333c5.12 11.946667 8.533333 23.893333 13.653333 35.84 1.706667 3.413333 3.413333 6.826667 3.413334 10.24 1.706667 3.413333 3.413333 5.12 5.12 8.533333 3.413333 3.413333 8.533333 5.12 11.946666 5.12 5.12-1.706667 10.24-3.413333 13.653334-6.826666 5.12-5.12 6.826667-10.24 5.12-15.36 0-3.413333-1.706667-6.826667-3.413334-11.946667-5.12-11.946667-8.533333-23.893333-11.946666-35.84 0-1.706667-1.706667-3.413333-1.706667-5.12-3.413333-1.706667-6.826667-3.413333-8.533333-3.413333 1.706667 0 0 0 0 0zM785.066667 363.52c5.12-3.413333 11.946667-8.533333 25.6-11.946667l1.706666 1.706667-6.826666 6.826667c-3.413333 3.413333-6.826667 8.533333-8.533334 13.653333-1.706667 8.533333 1.706667 17.066667 8.533334 22.186667s15.36 1.706667 18.773333-5.12c1.706667-3.413333 1.706667-6.826667 1.706667-10.24 0-6.826667 0-13.653333 1.706666-20.48 0-3.413333 1.706667-8.533333 3.413334-11.946667 3.413333-8.533333 10.24-11.946667 17.066666-13.653333 10.24-1.706667 17.066667 1.706667 23.893334 10.24 3.413333 5.12 6.826667 10.24 6.826666 15.36 0 3.413333 0 5.12 1.706667 8.533333 0 1.706667 1.706667 3.413333 5.12 5.12 1.706667 0 1.706667 0 3.413333 3.413333l-1.706666 1.706667c-6.826667 3.413333-13.653333 5.12-17.066667 8.533333h-3.413333v-1.706666c0-1.706667 1.706667-1.706667 1.706666-1.706667 1.706667-3.413333 5.12-5.12 6.826667-8.533333 3.413333-6.826667 5.12-11.946667 3.413333-18.773334 0-3.413333-1.706667-5.12-3.413333-6.826666-3.413333-5.12-8.533333-6.826667-13.653333-5.12s-8.533333 5.12-10.24 10.24c0 3.413333-1.706667 6.826667-1.706667 10.24v18.773333c0 8.533333-3.413333 15.36-11.946667 20.48-11.946667 8.533333-25.6 6.826667-35.84-6.826667-5.12-6.826667-8.533333-13.653333-10.24-23.893333v-3.413333c0-1.706667-1.706667-5.12-5.12-5.12l-1.706666-1.706667zM887.466667 646.826667c0-1.706667-1.706667-1.706667-1.706667-3.413334 0-3.413333-1.706667-5.12-3.413333-6.826666l-8.533334-8.533334c-6.826667-6.826667-13.653333-13.653333-20.48-18.773333-3.413333-3.413333-5.12-5.12-10.24-5.12-6.826667-1.706667-13.653333-3.413333-18.773333-5.12h-1.706667c-5.12 0-6.826667 0-10.24 5.12 0 1.706667 0 3.413333-3.413333 3.413333v-3.413333c1.706667-5.12 1.706667-11.946667 3.413333-15.36 1.706667-6.826667 3.413333-13.653333 5.12-18.773333v-1.706667h3.413334v3.413333c0 6.826667 1.706667 8.533333 6.826666 10.24 6.826667 1.706667 13.653333 3.413333 18.773334 5.12h6.826666c5.12-1.706667 10.24-3.413333 13.653334-3.413333 8.533333-1.706667 15.36-5.12 25.6-6.826667 5.12-1.706667 8.533333-3.413333 11.946666-8.533333 0 0 1.706667 0 1.706667-1.706667v5.12c-3.413333 11.946667-5.12 22.186667-8.533333 35.84-1.706667-1.706667 0-3.413333 0-3.413333 0-6.826667-1.706667-8.533333-8.533334-6.826667-10.24 3.413333-20.48 5.12-30.72 8.533334-1.706667 0-1.706667 1.706667-3.413333 1.706666 0 1.706667 1.706667 1.706667 1.706667 1.706667l18.773333 18.773333c1.706667 1.706667 5.12 3.413333 8.533333 5.12s5.12 0 6.826667-1.706666c1.706667-1.706667 1.706667-3.413333 3.413333-5.12l1.706667-1.706667c1.706667 0 1.706667 1.706667 1.706667 3.413333-1.706667 5.12-1.706667 10.24-3.413334 13.653334 0 1.706667 0 3.413333-1.706666 5.12-1.706667-1.706667-3.413333 0-5.12 0 1.706667 0 0 0 0 0zM827.733333 482.986667c1.706667 1.706667 1.706667 3.413333 1.706667 5.12 0 3.413333 3.413333 6.826667 8.533333 6.826666h10.24c8.533333 0 15.36 0 23.893334-1.706666 11.946667 0 20.48-1.706667 32.426666-1.706667h5.12c1.706667-13.653333-6.826667-20.48-13.653333-22.186667-1.706667 0-3.413333 0-6.826667-1.706666v-1.706667H887.466667 907.946667v1.706667c1.706667 22.186667 1.706667 44.373333 3.413333 66.56v3.413333c-3.413333 1.706667-8.533333 1.706667-11.946667 1.706667H887.466667c0-3.413333 0-3.413333 1.706666-3.413334 3.413333 0 6.826667-1.706667 8.533334-3.413333 5.12-3.413333 8.533333-6.826667 10.24-11.946667v-5.12-5.12h-6.826667c-10.24 0-18.773333 0-29.013333 1.706667h-34.133334-1.706666c-6.826667 1.706667-8.533333 3.413333-8.533334 10.24v1.706667s0 1.706667-1.706666 1.706666-1.706667 0-1.706667-1.706666v-8.533334c0-10.24 0-18.773333-1.706667-29.013333 3.413333 0 3.413333 0 5.12-3.413333-1.706667 0 0 0 0 0zM267.946667 315.733333c-5.12 8.533333-18.773333 29.013333-20.48 32.426667-1.706667 0-1.706667-1.706667-1.706667-1.706667 0-1.706667 1.706667-3.413333 1.706667-6.826666 0-1.706667 0-5.12-3.413334-5.12-5.12-1.706667-10.24-1.706667-13.653333-3.413334-1.706667 0-3.413333 0-3.413333 1.706667-5.12 6.826667-10.24 13.653333-13.653334 22.186667 3.413333 5.12 5.12 10.24 10.24 13.653333 1.706667 1.706667 3.413333 1.706667 6.826667 0l5.12-5.12h1.706667v3.413333c-3.413333 5.12-6.826667 10.24-10.24 13.653334 0 1.706667-1.706667 1.706667-3.413334 3.413333l-1.706666-1.706667c1.706667-6.826667-1.706667-11.946667-5.12-13.653333-6.826667-8.533333-13.653333-15.36-17.066667-25.6-8.533333-11.946667-15.36-22.186667-23.893333-34.133333 0-1.706667-1.706667-1.706667-1.706667-3.413334s-1.706667-1.706667 0-3.413333 1.706667-1.706667 3.413333-1.706667 5.12 0 6.826667 1.706667c8.533333 1.706667 15.36 3.413333 23.893333 5.12l30.72 5.12c6.826667 1.706667 13.653333 1.706667 20.48 3.413333 3.413333 0 5.12 0 8.533334-1.706666-1.706667 1.706667 0 0 0 1.706666z m-76.8 10.24s0 1.706667 0 0c6.826667 8.533333 13.653333 15.36 17.066666 22.186667l1.706667 1.706667c1.706667-3.413333 11.946667-15.36 13.653333-17.066667v-1.706667c-10.24-3.413333-27.306667-6.826667-32.426666-5.12zM614.4 133.12c1.706667-1.706667 1.706667-1.706667 0 0 1.706667-1.706667 1.706667-1.706667 0 0 13.653333 3.413333 25.6 8.533333 37.546667 11.946667l1.706666 1.706666c0 1.706667-1.706667 1.706667-1.706666 1.706667-1.706667 0-3.413333-1.706667-5.12-1.706667s-3.413333 0-5.12 3.413334c0 1.706667-1.706667 3.413333-1.706667 5.12 0 15.36 0 30.72 1.706667 46.08v1.706666c1.706667 0 1.706667 0 3.413333-1.706666 8.533333-8.533333 13.653333-15.36 22.186667-23.893334l8.533333-8.533333c0-1.706667 1.706667-1.706667 1.706667-3.413333 1.706667-3.413333 1.706667-6.826667-1.706667-8.533334-1.706667-1.706667-3.413333-1.706667-5.12-3.413333 0 0 0-1.706667 1.706667-1.706667h1.706666c6.826667 3.413333 13.653333 5.12 20.48 8.533334l1.706667 1.706666c0 1.706667-1.706667 1.706667-1.706667 1.706667-5.12 0-8.533333 1.706667-11.946666 5.12-5.12 5.12-8.533333 10.24-13.653334 13.653333-10.24 11.946667-18.773333 20.48-29.013333 32.426667-3.413333 3.413333-5.12 6.826667-8.533333 8.533333l-3.413334 3.413334s-1.706667 0-1.706666-1.706667v-5.12c0-6.826667 0-11.946667-1.706667-17.066667 0-10.24 0-18.773333-1.706667-30.72 0-8.533333-1.706667-17.066667-1.706666-25.6 1.706667-6.826667 0-10.24-6.826667-13.653333zM595.626667 131.413333h-5.12c-5.12 0-6.826667 1.706667-8.533334 6.826667 0 3.413333-1.706667 5.12-1.706666 8.533333-1.706667 10.24-3.413333 18.773333-5.12 29.013334-1.706667 6.826667-3.413333 13.653333-3.413334 20.48v5.12c0 3.413333 1.706667 6.826667 5.12 8.533333 1.706667 0 1.706667 0 3.413334 1.706667 1.706667 0 1.706667 1.706667 3.413333 1.706666-1.706667 0-1.706667 1.706667-1.706667 1.706667h-3.413333c-11.946667-1.706667-23.893333-5.12-35.84-6.826667h-1.706667c0-1.706667 0-1.706667 1.706667-1.706666h5.12c5.12 0 6.826667-1.706667 6.826667-6.826667 1.706667-6.826667 1.706667-11.946667 3.413333-17.066667 1.706667-11.946667 3.413333-20.48 5.12-32.426666 0-3.413333 1.706667-8.533333 1.706667-11.946667 1.706667-3.413333-1.706667-8.533333-5.12-10.24-1.706667 0-1.706667 0-3.413334-1.706667l-1.706666-1.706666 1.706666-1.706667c10.24 0 22.186667 3.413333 35.84 5.12 0 0 1.706667 0 3.413334 3.413333zM892.586667 401.066667c1.706667 0 1.706667 1.706667 0 0 1.706667 3.413333 3.413333 5.12 3.413333 8.533333 3.413333 10.24 5.12 20.48 8.533333 30.72v3.413333l-1.706666 1.706667c-1.706667-1.706667-1.706667-3.413333-3.413334-5.12-1.706667-3.413333-5.12-5.12-8.533333-5.12H887.466667c-17.066667 5.12-35.84 10.24-54.613334 13.653333-1.706667 0-3.413333 0-5.12 1.706667-3.413333 1.706667-6.826667 3.413333-6.826666 8.533333v5.12s0 1.706667-1.706667 1.706667c0-1.706667-1.706667-1.706667-1.706667-1.706667-3.413333-11.946667-6.826667-25.6-10.24-37.546666v-1.706667s1.706667 0 1.706667 1.706667c1.706667 1.706667 1.706667 3.413333 1.706667 5.12 1.706667 3.413333 3.413333 3.413333 6.826666 3.413333 1.706667 0 5.12 0 6.826667-1.706667 17.066667-5.12 37.546667-10.24 54.613333-13.653333h3.413334c3.413333-1.706667 5.12-3.413333 5.12-8.533333 5.12-6.826667 5.12-8.533333 5.12-10.24zM343.04 766.293333c-3.413333 5.12-51.2 71.68-56.32 75.093334-3.413333-1.706667-5.12-3.413333-8.533333-6.826667 3.413333-3.413333 6.826667-8.533333 8.533333-11.946667 3.413333-3.413333 6.826667-8.533333 8.533333-11.946666 3.413333-3.413333 6.826667-8.533333 8.533334-11.946667 3.413333-3.413333 6.826667-8.533333 8.533333-11.946667 3.413333-3.413333 6.826667-8.533333 8.533333-11.946666-6.826667-3.413333-13.653333-5.12-22.186666-3.413334h-3.413334c1.706667-3.413333 3.413333-6.826667 6.826667-10.24 6.826667 0 13.653333 1.706667 17.066667 0 6.826667 0 11.946667-1.706667 17.066666-3.413333 3.413333 5.12 5.12 6.826667 6.826667 8.533333-3.413333 5.12-1.706667-1.706667 0 0zM445.44 453.973333c6.826667 0 17.066667-13.653333 22.186667-17.066666 8.533333-10.24 17.066667-18.773333 25.6-29.013334 1.706667-1.706667 3.413333-5.12 3.413333-8.533333 1.706667-11.946667 0-23.893333 0-37.546667-1.706667-1.706667-3.413333-1.706667-5.12-1.706666-10.24 10.24-23.893333 17.066667-37.546667 22.186666-17.066667 8.533333-1.706667-22.186667 0-25.6 10.24-10.24 20.48-22.186667 32.426667-34.133333 6.826667-10.24 8.533333-18.773333 10.24-30.72 1.706667-11.946667 3.413333-32.426667 15.36-37.546667 10.24-10.24 18.773333 20.48 18.773333 27.306667 1.706667 13.653333-5.12 25.6-11.946666 37.546667-3.413333 5.12-6.826667 10.24-10.24 13.653333-3.413333 3.413333 6.826667 11.946667 10.24 15.36 5.12 6.826667 8.533333 17.066667 6.826666 27.306667 0 8.533333-1.706667 15.36-5.12 23.893333 0 8.533333-3.413333 8.533333 3.413334 17.066667 5.12 6.826667 5.12 15.36 5.12 23.893333-1.706667 10.24-3.413333 18.773333-8.533334 29.013333-6.826667 17.066667-15.36 34.133333-20.48 51.2-1.706667 10.24-3.413333 18.773333-5.12 29.013334-3.413333 27.306667 0 54.613333 0 83.626666 1.706667 10.24 1.706667 20.48 3.413334 30.72 1.706667 11.946667 3.413333 20.48 5.12 32.426667 3.413333 17.066667 6.826667 37.546667 11.946666 54.613333 0 1.706667 0 3.413333 1.706667 5.12v5.12c-1.706667 3.413333-3.413333 5.12-6.826667 5.12-8.533333-1.706667-13.653333-5.12-17.066666-13.653333s-6.826667-17.066667-8.533334-25.6c-1.706667-10.24-5.12-18.773333-6.826666-29.013333-1.706667-6.826667-1.706667-11.946667-3.413334-18.773334-1.706667-10.24-3.413333-18.773333-5.12-29.013333 0-5.12-1.706667-8.533333-3.413333-11.946667 0-3.413333-1.706667-5.12-3.413333-8.533333-8.533333-8.533333-30.72-5.12-40.96-3.413333-5.12 0-8.533333 1.706667-13.653334 1.706666-10.24 1.706667-17.066667 3.413333-27.306666 5.12-13.653333 3.413333-29.013333 6.826667-44.373334 10.24-10.24 1.706667-18.773333 3.413333-29.013333 5.12-8.533333 1.706667-15.36 0-23.893333-3.413333-3.413333-3.413333-6.826667-1.706667-8.533334-6.826667-1.706667-3.413333 1.706667-10.24 5.12-10.24 3.413333-1.706667 6.826667-3.413333 8.533334-3.413333 8.533333-3.413333 17.066667-5.12 25.6-6.826667 11.946667-1.706667 22.186667-3.413333 34.133333-5.12h10.24c11.946667-1.706667 20.48-1.706667 32.426667-3.413333 15.36 0 29.013333 0 44.373333-3.413333 5.12 0 8.533333-1.706667 13.653333-1.706667 5.12-1.706667 10.24-3.413333 13.653334-6.826667 3.413333-1.706667 3.413333-5.12 3.413333-8.533333-3.413333-11.946667-3.413333-25.6-1.706667-37.546667 1.706667-13.653333 5.12-29.013333 10.24-40.96s10.24-20.48 15.36-30.72c8.533333-10.24 11.946667-27.306667 8.533334-39.253333 0-1.706667-1.706667-1.706667-1.706667-3.413333-1.706667 1.706667-1.706667 1.706667-3.413333 1.706666-3.413333 5.12-8.533333 10.24-13.653334 11.946667-6.826667 6.826667-13.653333 10.24-22.186666 13.653333-5.12 1.706667-10.24 3.413333-13.653334 5.12-5.12 5.12-1.706667 8.533333-1.706666 13.653334 1.706667 10.24 1.706667 17.066667 1.706666 27.306666-1.706667 17.066667-6.826667 32.426667-18.773333 42.666667-8.533333 8.533333-18.773333 13.653333-30.72 17.066667-13.653333 5.12-29.013333 6.826667-44.373333 5.12-6.826667 0-13.653333 0-18.773334-1.706667-10.24-1.706667-18.773333-3.413333-29.013333-10.24-6.826667-3.413333-13.653333-10.24-17.066667-15.36-8.533333-10.24-11.946667-22.186667-15.36-34.133333-6.826667-20.48-8.533333-40.96-6.826666-64.853334 0-5.12 1.706667-11.946667 5.12-15.36 5.12-11.946667 13.653333-20.48 23.893333-29.013333 13.653333-10.24 25.6-13.653333 39.253333-17.066667 20.48-5.12 46.08-5.12 64.853334 3.413334 1.706667 0 3.413333 1.706667 5.12 1.706666 22.186667 6.826667 29.013333 30.72 35.84 49.493334 0 3.413333 1.706667 6.826667 1.706666 8.533333 5.12 1.706667 5.12 3.413333 6.826667 3.413333z m-133.12 22.186667c13.653333 0 30.72 0 44.373333-3.413333 15.36 0 37.546667 1.706667 52.906667-3.413334 3.413333 0 5.12-1.706667 5.12-3.413333 3.413333-5.12 5.12-11.946667 6.826667-17.066667 1.706667-8.533333 0-13.653333-5.12-20.48-3.413333-5.12-8.533333-8.533333-13.653334-11.946666-13.653333-6.826667-30.72-11.946667-46.08-10.24-10.24 1.706667-18.773333 3.413333-27.306666 6.826666-6.826667 1.706667-11.946667 5.12-18.773334 10.24-15.36 11.946667-18.773333 30.72-13.653333 47.786667 0 3.413333 1.706667 3.413333 5.12 3.413333 1.706667 1.706667 6.826667 1.706667 10.24 1.706667z m109.226667 17.066667c-5.12-1.706667-8.533333 0-11.946667 0-13.653333 1.706667-27.306667 1.706667-40.96 3.413333-22.186667 0-44.373333 3.413333-64.853333 3.413333-1.706667 0-1.706667 1.706667-1.706667 1.706667 0 13.653333 3.413333 25.6 13.653333 35.84 11.946667 11.946667 25.6 13.653333 40.96 17.066667 10.24 1.706667 17.066667 0 27.306667-3.413334 6.826667-1.706667 13.653333-5.12 20.48-8.533333 8.533333-5.12 13.653333-11.946667 17.066667-18.773333 1.706667-10.24 1.706667-22.186667 0-30.72-5.12-1.706667 1.706667 8.533333 0 0z" fill="#DA251B" ></path><path d="M684.373333 643.413333c-8.533333 0-17.066667-1.706667-23.893333 1.706667-1.706667 0-3.413333 1.706667-3.413333 1.706667-8.533333 3.413333-5.12 15.36-1.706667 20.48 3.413333 11.946667 10.24 20.48 13.653333 32.426666 1.706667 3.413333 5.12 6.826667 6.826667 11.946667 1.706667 3.413333 1.706667 6.826667-1.706667 8.533333-13.653333 8.533333-23.893333 1.706667-30.72-10.24-8.533333-13.653333-13.653333-29.013333-17.066666-42.666666-3.413333-8.533333-11.946667-3.413333-18.773334-3.413334-15.36 5.12-30.72 11.946667-44.373333 17.066667-8.533333 3.413333-13.653333 8.533333-22.186667 11.946667-5.12 0-8.533333 3.413333-11.946666-3.413334-1.706667-5.12-1.706667-11.946667 0-15.36 0-1.706667 1.706667-3.413333 3.413333-5.12 3.413333-1.706667 5.12-3.413333 8.533333-5.12 8.533333-3.413333 15.36-6.826667 23.893334-10.24 13.653333-5.12 23.893333-8.533333 37.546666-13.653333 10.24-5.12 17.066667-6.826667 18.773334-18.773333 0-5.12 0-8.533333-3.413334-13.653334-1.706667-1.706667-5.12-1.706667-8.533333-1.706666-22.186667 10.24-44.373333 20.48-66.56 32.426666-6.826667 1.706667-13.653333 0-18.773333-6.826666-6.826667-8.533333 6.826667-15.36 13.653333-15.36 11.946667-3.413333 22.186667-8.533333 34.133333-11.946667 13.653333-5.12 27.306667-8.533333 40.96-13.653333 3.413333-1.706667 8.533333-3.413333 8.533334-8.533334V580.266667c3.413333-10.24-10.24-11.946667-17.066667-8.533334-5.12 1.706667-10.24 1.706667-13.653333 3.413334-5.12 1.706667-8.533333 1.706667-11.946667 3.413333-1.706667 0-5.12 0-6.826667 1.706667-11.946667 0-15.36-13.653333-6.826666-20.48 5.12 0 11.946667-3.413333 17.066666-3.413334 11.946667-1.706667 22.186667-3.413333 34.133334-6.826666 10.24-1.706667 17.066667-5.12 27.306666-6.826667 5.12-1.706667 8.533333-1.706667 13.653334-3.413333 6.826667-1.706667 10.24 1.706667 13.653333 6.826666 6.826667 6.826667-6.826667 11.946667-11.946667 13.653334-1.706667 1.706667-5.12 1.706667-6.826666 3.413333-3.413333 1.706667-5.12 3.413333-3.413334 6.826667 0 5.12 5.12 6.826667 10.24 6.826666 10.24-1.706667 18.773333-1.706667 29.013334-5.12 1.706667 0 3.413333-1.706667 3.413333-1.706666 5.12-1.706667 6.826667-3.413333 8.533333-8.533334 5.12-8.533333 8.533333-20.48 15.36-27.306666 5.12-5.12 20.48 3.413333 17.066667 11.946666-5.12 13.653333-6.826667 29.013333-8.533333 44.373334-1.706667 11.946667-3.413333 22.186667-5.12 34.133333 0 3.413333 0 6.826667-1.706667 10.24 0 3.413333-3.413333 6.826667-6.826667 6.826667-6.826667 3.413333-17.066667 1.706667-25.6 1.706666z m-23.893333-15.36c11.946667 0 18.773333-3.413333 27.306667-8.533333 10.24-6.826667 5.12-15.36 5.12-23.893333s-17.066667-5.12-20.48-3.413334c-6.826667 1.706667-13.653333 3.413333-18.773334 5.12-3.413333 1.706667-6.826667 5.12-8.533333 8.533334 0 1.706667 0 3.413333-1.706667 3.413333 0 3.413333-1.706667 8.533333 0 11.946667 0 3.413333 3.413333 5.12 6.826667 6.826666 5.12-1.706667 8.533333-1.706667 10.24 0 11.946667 0-1.706667-1.706667 0 0zM622.933333 453.973333c-11.946667 0-25.6 1.706667-37.546666-1.706666-6.826667 0-11.946667-1.706667-17.066667-3.413334-3.413333 0-5.12-1.706667-6.826667-1.706666l-5.12-5.12c-6.826667-15.36-1.706667-34.133333 11.946667-44.373334 5.12-3.413333 10.24-6.826667 15.36-8.533333 8.533333-3.413333 17.066667-5.12 25.6-6.826667 6.826667-1.706667 11.946667-1.706667 17.066667-1.706666 10.24-1.706667 17.066667-1.706667 27.306666-3.413334 18.773333 0 35.84-3.413333 52.906667 3.413334s27.306667 25.6 22.186667 44.373333c-6.826667 22.186667-37.546667 23.893333-58.026667 23.893333-11.946667 1.706667-20.48 3.413333-32.426667 3.413334-3.413333 0-10.24 1.706667-15.36 1.706666z m44.373334-56.32c0-1.706667 0-1.706667 0 0-13.653333 0-27.306667 0-39.253334 3.413334-8.533333 0-15.36 1.706667-23.893333 3.413333-5.12 1.706667-11.946667 3.413333-15.36 6.826667-6.826667 5.12-10.24 11.946667-6.826667 17.066666 0 1.706667 1.706667 3.413333 5.12 5.12 10.24 0 20.48 3.413333 30.72 0 23.893333 0 47.786667-5.12 71.68-5.12 10.24-1.706667 13.653333-10.24 11.946667-15.36s-5.12-8.533333-8.533333-10.24c-5.12-3.413333-10.24-5.12-13.653334-5.12-5.12-1.706667-8.533333 0-11.946666 0 0-1.706667 3.413333 0 0 0zM605.866667 529.066667c-15.36 0-29.013333 0-42.666667-3.413334h-1.706667c-15.36-3.413333-17.066667-23.893333-10.24-37.546666 3.413333-5.12 8.533333-8.533333 13.653334-11.946667 8.533333-3.413333 15.36-6.826667 23.893333-8.533333 10.24-1.706667 17.066667-3.413333 27.306667-3.413334 13.653333-1.706667 29.013333-1.706667 40.96-3.413333 17.066667 0 32.426667-1.706667 49.493333 3.413333 11.946667 3.413333 18.773333 10.24 22.186667 20.48 3.413333 6.826667 3.413333 13.653333 0 20.48-1.706667 6.826667-6.826667 10.24-13.653334 11.946667-6.826667 3.413333-17.066667 0-23.893333 3.413333-11.946667 0-23.893333 1.706667-35.84 1.706667-11.946667 5.12-30.72 6.826667-49.493333 6.826667z m73.386666-22.186667c8.533333 0 17.066667 0 23.893334-3.413333 5.12-3.413333 5.12-8.533333 1.706666-11.946667-5.12-11.946667-23.893333-10.24-34.133333-11.946667-17.066667-1.706667-34.133333-1.706667-51.2 0-8.533333 0-13.653333 1.706667-22.186667 3.413334-6.826667 3.413333-13.653333 3.413333-17.066666 11.946666-3.413333 5.12 1.706667 13.653333 8.533333 13.653334 5.12 1.706667 11.946667 1.706667 15.36 0 6.826667 0 13.653333-1.706667 20.48-1.706667 11.946667-1.706667 20.48-1.706667 32.426667-3.413333 6.826667 5.12 15.36 3.413333 22.186666 3.413333zM628.053333 334.506667c15.36 0 32.426667 1.706667 46.08 3.413333 10.24 1.706667 18.773333 3.413333 29.013334 5.12 6.826667 1.706667 13.653333 3.413333 18.773333 6.826667 1.706667 0 3.413333 1.706667 5.12 3.413333 5.12 3.413333 5.12 8.533333 1.706667 13.653333-1.706667 1.706667-5.12 3.413333-8.533334 5.12-3.413333 0-8.533333 0-11.946666-1.706666-20.48-8.533333-49.493333-10.24-69.973334-6.826667-11.946667 0-20.48 0-32.426666 1.706667-8.533333 0-13.653333 1.706667-22.186667 3.413333-11.946667 0-23.893333 3.413333-37.546667 3.413333-5.12 0-13.653333-1.706667-15.36-8.533333-1.706667-3.413333 3.413333-10.24 6.826667-10.24 5.12-1.706667 10.24-3.413333 13.653333-5.12 11.946667-3.413333 23.893333-5.12 37.546667-6.826667h8.533333c11.946667-6.826667 22.186667-6.826667 30.72-6.826666z" fill="#DA251B" ></path><path d="M512 805.546667c-160.426667 0-290.133333-131.413333-290.133333-291.84S351.573333 221.866667 512 221.866667s290.133333 131.413333 290.133333 291.84-129.706667 291.84-290.133333 291.84z m0-570.026667c-153.6 0-278.186667 124.586667-278.186667 278.186667S358.4 791.893333 512 791.893333s278.186667-124.586667 278.186667-278.186666c0-151.893333-124.586667-278.186667-278.186667-278.186667z" fill="#D5271C" ></path><path d="M512 225.28c-158.72 0-288.426667 129.706667-288.426667 290.133333s129.706667 290.133333 288.426667 290.133334 288.426667-129.706667 288.426667-290.133334-129.706667-290.133333-288.426667-290.133333z m0 568.32c-153.6 0-279.893333-124.586667-279.893333-279.893333S358.4 233.813333 512 233.813333 791.893333 358.4 791.893333 513.706667 665.6 793.6 512 793.6z" fill="#D5271C" ></path></symbol><symbol id="icon-computer_fill" viewBox="0 0 1024 1024"><path d="M221.216 588H160v75.712c0 35.456 27.424 64.288 61.184 64.288h260.192v52h-91.808c-16.896 0-30.624 14.336-30.624 32 0 17.696 13.728 32 30.624 32h244.864c16.896 0 30.624-14.304 30.624-32 0-17.664-13.728-32-30.624-32h-91.808V728h260.192c33.76 0 61.184-28.832 61.184-64.288v-75.712H221.216zM802.816 160H221.184C187.424 160 160 188.864 160 224.32v299.68h704V224.32C864 188.864 836.576 160 802.816 160" fill="#969697" ></path></symbol><symbol id="icon-statistics" viewBox="0 0 1024 1024"><path d="M176 384a95.536 95.536 0 0 0 54.24-16.8l170.032 102A95.92 95.92 0 0 0 496.016 560c58.144 0 104.448-51.872 94.608-111.664l216.368-195.744a95.84 95.84 0 0 0 25.04 3.408 96 96 0 1 0-96-96c0 14.56 3.328 28.304 9.12 40.656L545.12 381.616a95.52 95.52 0 0 0-114.688 12.4l-159.056-95.424A96 96 0 1 0 176 384z m208 576h240V656H384v304z m80-224h80v144h-80v-144zM80 960h240V512H80v448z m80-368h80v288h-80V592z m528 368h240V432H688v528z m80-448h80v368h-80V512z" fill="#565D64" ></path></symbol><symbol id="icon-fanju" viewBox="0 0 1024 1024"><path d="M588.8 318.72l-12.032-7.424L727.04 104.704a31.40608 31.40608 0 0 0-7.424-43.776 31.39584 31.39584 0 0 0-43.776 7.424L522.24 278.528 281.6 129.28a31.10912 31.10912 0 0 0-33.024 52.736L486.4 328.96l-22.784 31.488a31.39584 31.39584 0 0 0 51.2 36.352l25.6-35.072 16.128 9.728a30.976 30.976 0 1 0 32.256-52.736zM710.4 809.728a53.21728 53.21728 0 0 0 15.59552 37.65248 53.21728 53.21728 0 0 0 75.30496 0 53.21728 53.21728 0 0 0 0-75.30496 53.21728 53.21728 0 0 0-75.30496 0 53.21728 53.21728 0 0 0-15.59552 37.65248zM261.12 756.48a53.24288 53.24288 0 0 0-37.30432 90.98752 53.26336 53.26336 0 0 0 57.99424 11.42784 53.22752 53.22752 0 0 0 28.73856-69.60128A53.248 53.248 0 0 0 261.12 756.48z" fill="#FB813A" ></path><path d="M234.24 273.408H790.528c61.952 0 92.928 30.976 92.928 92.928V727.04c0 61.952-30.976 92.928-92.928 92.928H234.24c-61.952 0-92.928-30.976-92.928-92.928V366.336c0-61.952 30.976-92.928 92.928-92.928z" fill="#FDDE80" ></path><path d="M392.192 534.272a128.23552 128.23552 0 0 0 79.17568 118.49216A128.24576 128.24576 0 0 0 648.704 534.272a128.23552 128.23552 0 0 0-79.17568-118.49216 128.23552 128.23552 0 0 0-139.77088 27.8016A128.256 128.256 0 0 0 392.192 534.272z" fill="#FFFFFF" ></path><path d="M476.928 505.6c0-26.88 19.2-37.632 42.24-25.6l49.664 28.672a25.62048 25.62048 0 0 1 17.60768 24.32 25.61536 25.61536 0 0 1-17.60768 24.32l-49.664 28.672c-23.04 13.568-42.24 2.56-42.24-24.32V505.6z" fill="#FB813A" ></path></symbol><symbol id="icon-blog" viewBox="0 0 1024 1024"><path d="M384 64c0 35.4 28.6 64 64 64 247.4 0 448 200.6 448 448 0 35.4 28.6 64 64 64s64-28.6 64-64C1024 257.8 766.2 0 448 0c-35.4 0-64 28.6-64 64z m0 192c0 35.4 28.6 64 64 64 141.4 0 256 114.6 256 256 0 35.4 28.6 64 64 64s64-28.6 64-64c0-212-172-384-384-384-35.4 0-64 28.6-64 64z m-192 32c0-53-43-96-96-96S0 235 0 288v448c0 159 129 288 288 288s288-129 288-288-129-288-288-288h-32v192h32c53 0 96 43 96 96s-43 96-96 96-96-43-96-96V288z"  ></path></symbol><symbol id="icon-ins" viewBox="0 0 1024 1024"><path d="M62.947657 63.404052 62.947657 63.404052 62.947657 63.404052 62.947657 63.404052zM793.183054 543.821753c0 137.970328-111.877043 249.816672-249.816672 249.816672-137.970328 0-249.817696-111.846344-249.817696-249.816672 0-16.425088 1.62194-32.487925 4.714372-48.042179L130.206504 495.779573l0 332.058768c0 71.281463 57.740052 129.142266 129.142266 129.142266l568.034201 0c71.281463 0 129.142266-57.800427 129.142266-129.142266L956.525236 495.780597l-167.996179 0C791.562137 511.333828 793.183054 527.397688 793.183054 543.821753L793.183054 543.821753 793.183054 543.821753zM827.38297 130.661875 259.34877 130.661875c-71.342862 0-129.142266 57.830103-129.142266 129.143289L130.206504 399.696238l209.16174 0c45.218878-63.895239 119.713522-105.692181 203.998137-105.692181 84.282568 0 158.778236 41.796942 203.997114 105.692181l209.162764 0L956.526259 259.805164C956.525236 188.522678 898.694109 130.661875 827.38297 130.661875L827.38297 130.661875zM890.556779 290.161542c0 12.730952-10.387581 23.060205-23.059182 23.060205L798.377356 313.221748c-12.671601 0-23.060205-10.389628-23.060205-23.060205l0-69.180616c0-12.730952 10.419304-23.060205 23.060205-23.060205l69.12024 0c12.730952 0 23.059182 10.389628 23.059182 23.060205L890.556779 290.161542 890.556779 290.161542 890.556779 290.161542zM697.098695 543.821753c0-84.943624-68.849064-153.73436-153.733337-153.73436-84.883249 0-153.73436 68.790736-153.73436 153.73436s68.850088 153.733337 153.73436 153.733337C628.249631 697.55509 697.098695 628.7664 697.098695 543.821753L697.098695 543.821753 697.098695 543.821753z" fill="#272536" ></path></symbol><symbol id="icon-Facebook" viewBox="0 0 1024 1024"><path d="M967.601349 1024c31.076808 0 56.398651-25.321843 56.398651-56.398651V56.398651c0-31.076808-25.321843-56.398651-56.398651-56.398651H56.398651C25.321843 0 0 25.321843 0 56.398651v910.819034c0 31.076808 25.321843 56.398651 56.398651 56.398651h911.202698z" fill="#3C5A99" ></path><path d="M706.709629 1024V627.29112h133.13151l19.950543-154.61671h-153.082053V374.072686c0-44.888722 12.277257-75.198202 76.732859-75.198201h81.720494v-138.119146c-14.195579-1.918321-62.920944-6.138629-119.319595-6.138629-118.168602 0-198.738104 72.128887-198.738104 204.109405v113.948295h-133.515174v154.61671h133.515174v396.70888h159.604346z" fill="#FFFFFF" ></path></symbol><symbol id="icon-weibo" viewBox="0 0 1026 1024"><path d="M1012.49 451.553v0.159c-6.697 20.66-28.861 31.99-49.449 25.288a39.352 39.352 0 0 1-25.287-49.582l-0.067-0.031c20.536-63.6 7.516-136.156-40.315-189.363-47.892-53.212-118.502-73.554-183.731-59.659-21.222 4.537-42.133-9.047-46.638-30.3-4.506-21.253 9.021-42.194 30.239-46.73 91.709-19.563 191.114 8.98 258.467 83.881 67.36 74.839 85.515 176.85 56.781 266.337z" fill="#D32024" ></path><path d="M740.429 304.348v-0.03c-18.217 3.973-36.178-7.732-40.06-26.01-3.947-18.31 7.763-36.373 25.98-40.254 44.692-9.548 93.143 4.322 125.885 40.781 32.866 36.496 41.631 86.17 27.607 129.772a33.833 33.833 0 0 1-42.562 21.847c-17.782-5.76-27.484-24.914-21.724-42.69h-0.062c6.887-21.346 2.565-45.635-13.46-63.473-16.026-17.818-39.752-24.546-61.604-19.943z m30.05 192.184c-14.46-4.352-24.352-7.326-16.774-26.352 16.333-41.313 18.027-76.964 0.317-102.385-33.31-47.734-124.451-45.133-228.838-1.28 0-0.061-32.799 14.367-24.412-11.704 16.056-51.774 13.645-95.186-11.361-120.192-56.658-56.878-207.304 2.12-336.477 131.64C56.187 463.32 0 566.14 0 655.1 0 825.18 217.503 928.594 430.28 928.594c278.917 0 464.527-162.504 464.527-291.59 0-77.936-65.546-122.193-124.329-140.472zM430.842 867.62c-169.774 16.84-316.35-60.155-327.368-171.96-11.049-111.74 117.72-216.034 287.488-232.873 169.805-16.84 316.355 60.16 327.368 171.904 11.018 111.866-117.683 216.09-287.488 232.929z" fill="#D32024" ></path><path d="M447.805 548.859c-80.783-21.09-172.119 19.287-207.206 90.65-35.743 72.862-1.188 153.681 80.44 180.1 84.578 27.357 184.233-14.525 218.88-93.148 34.181-76.81-8.478-155.94-92.114-177.602zM386.12 734.792c-16.43 26.29-51.584 37.806-78.065 25.661-26.107-11.889-33.833-42.44-17.403-68.045 16.215-25.538 50.207-36.869 76.498-25.856 26.604 11.392 35.087 41.687 18.97 68.24z" fill="#D32024" ></path></symbol><symbol id="icon-youtube" viewBox="0 0 1024 1024"><path d="M426.666667 682.666667V384l256 149.845333L426.666667 682.666667z m587.093333-355.541334s-10.026667-71.04-40.704-102.357333c-38.954667-41.088-82.602667-41.258667-102.613333-43.648C727.168 170.666667 512.213333 170.666667 512.213333 170.666667h-0.426666s-214.954667 0-358.229334 10.453333c-20.053333 2.389333-63.658667 2.56-102.656 43.648-30.677333 31.317333-40.661333 102.4-40.661333 102.4S0 410.538667 0 493.952v78.293333c0 83.456 10.24 166.912 10.24 166.912s9.984 71.04 40.661333 102.357334c38.997333 41.088 90.154667 39.765333 112.938667 44.074666C245.76 893.568 512 896 512 896s215.168-0.341333 358.442667-10.752c20.053333-2.432 63.658667-2.602667 102.613333-43.690667 30.72-31.317333 40.704-102.4 40.704-102.4s10.24-83.413333 10.24-166.869333v-78.250667c0-83.456-10.24-166.912-10.24-166.912z" fill="#FF0000" ></path></symbol><symbol id="icon-twitter" viewBox="0 0 1025 1024"><path d="M321.828571 928.212916c386.354599 0 597.767515-320.22544 597.767515-597.767515 0-9.017613-0.200391-18.235616-0.601174-27.253229C960.075147 273.534247 995.744814 236.46184 1023.799609 194.379648c-37.673581 16.832877-78.152642 28.054795-120.635617 33.064579 43.28454-26.050881 76.749902-67.131115 92.380431-116.227006-40.679452 24.046967-85.567123 41.481018-133.460666 50.899413-38.274755-40.879843-92.981605-66.32955-153.299413-66.32955-116.026614 0-210.010176 94.183953-210.010176 210.010176 0 16.432094 1.803523 32.463405 5.410568 47.893542C329.643836 344.873581 174.741292 261.310372 71.138943 134.262231c-18.035225 31.060665-28.455577 67.131115-28.455577 105.606262 0 72.942466 37.072407 137.268102 93.582779 174.941683-34.467319-1.001957-66.930724-10.620744-95.18591-26.251272v2.605088c0 101.798826 72.341292 186.764775 168.529158 206.002349-17.634442 4.809393-36.270841 7.414481-55.308023 7.414481-13.426223 0-26.652055-1.40274-39.477104-3.807436 26.652055 83.563209 104.403914 144.2818 196.18317 145.884931-71.940509 56.30998-162.517417 89.975734-260.909589 89.975734-17.033268 0-33.665753-1.001957-50.097847-3.005871 92.781213 59.716634 203.196869 94.584736 321.828571 94.584736" fill="#1DA1F2" ></path></symbol><symbol id="icon-tuiteX" viewBox="0 0 1177 1024"><path d="M927.4368 0h180.5824l-394.496 433.7664L1177.6 1024h-363.3664l-284.672-357.9904L203.9296 1024H23.2448l422.0416-463.9744L0 0h372.6336l257.2288 327.168L927.4368 0z m-63.4368 920.064h100.096L318.208 98.4576H210.8928L864 920.064z"  ></path></symbol><symbol id="icon-weichat" viewBox="0 0 1024 1024"><path d="M306.176 294.7072c-20.48 0-41.984 13.7216-41.984 37.0688 0 22.3232 21.504 37.0688 41.984 37.0688 19.6608 0 35.2256-14.7456 35.2256-37.0688 0-23.3472-15.7696-37.0688-35.2256-37.0688z m193.536 74.1376c21.504 0 35.2256-14.7456 35.2256-37.0688 0-23.3472-13.7216-37.0688-35.2256-37.0688-20.48 0-40.1408 13.7216-40.1408 37.0688 0.2048 22.3232 19.6608 37.0688 40.1408 37.0688zM743.424 512c-14.7456 0-27.4432 13.7216-27.4432 30.72 0 13.7216 12.6976 27.648 27.4432 27.648 19.456 0 34.2016-13.7216 34.2016-27.648 0-16.9984-14.7456-30.72-34.2016-30.72z m259.8912-368.8448A122.7776 122.7776 0 0 0 880.4352 20.48H143.36C75.776 20.48 20.48 75.776 20.48 143.36v737.28c0 67.584 55.296 122.88 122.88 122.88h737.28c67.584 0 122.88-55.296 122.88-122.88V261.9392l-0.2048-118.784zM397.1072 677.2736c-36.2496 0-62.6688-6.3488-96.8704-16.9984l-98.7136 54.0672 28.2624-91.136c-69.4272-53.0432-110.592-119.808-110.592-201.3184 0-144.1792 125.1328-254.3616 277.7088-254.3616 134.9632 0 255.1808 86.8352 278.7328 209.7152a132.4544 132.4544 0 0 0-26.4192-3.2768c-133.12 0-235.7248 108.1344-235.7248 238.3872 0 22.3232 2.8672 42.3936 7.7824 63.6928-7.5776 1.2288-16.384 1.2288-24.1664 1.2288z m407.7568 103.8336l19.6608 76.3904-74.3424-45.4656c-28.2624 6.3488-55.7056 15.9744-84.1728 15.9744-131.072 0-234.7008-97.4848-234.7008-218.3168 0-120.832 103.6288-218.3168 234.7008-218.3168 124.3136 0 235.7248 97.4848 235.7248 218.3168 0 67.584-41.984 128-96.8704 171.4176zM589.824 512c-13.7216 0-27.4432 13.7216-27.4432 30.72 0 13.7216 13.7216 27.648 27.4432 27.648 20.48 0 35.2256-13.7216 35.2256-27.648 0-16.9984-14.7456-30.72-35.2256-30.72z" fill="#4CBD63" ></path></symbol><symbol id="icon-icon-test" viewBox="0 0 1220 1024"><path d="M854.716616 315.732525h-16.580889a392.414361 392.414361 0 0 0-112.04661 12.310054 414.773438 414.773438 0 0 0-175.857909 87.175277 330.864093 330.864093 0 0 0-106.268421 165.306434 262.530735 262.530735 0 0 0-10.8027 102.500038c2.26103 19.093144 6.28064 37.935063 9.546572 58.03311a115.312543 115.312543 0 0 1-17.08334 1.758579 540.888681 540.888681 0 0 1-63.811298-4.52206c-26.881137-4.773286-53.511049-12.310054-80.140961-19.34437a15.827212 15.827212 0 0 0-13.063731 1.507353l-127.120145 76.875029a25.122558 25.122558 0 0 1-5.778188 2.763481c-7.285542 2.512256-11.807602-1.507354-10.049023-8.792895 4.522061-16.580889 9.295347-33.161777 14.068632-50.245117 7.034316-25.122558 14.571084-47.984086 21.354175-72.101743a11.053926 11.053926 0 0 0-4.01961-9.295346c-20.600498-18.339468-42.708349-34.920356-62.052719-54.515952a320.81507 320.81507 0 0 1-67.579682-100.490233A337.144733 337.144733 0 0 1 0.549632 352.41146a320.81507 320.81507 0 0 1 29.644619-115.563768 311.770949 311.770949 0 0 1 51.75247-81.89954 703.431634 703.431634 0 0 1 67.077231-64.062524A334.883703 334.883703 0 0 1 238.711485 38.379481a658.964705 658.964705 0 0 1 72.352968-23.86643A400.202354 400.202354 0 0 1 441.450531 0.695644a667.506375 667.506375 0 0 1 77.37748 8.039218 417.034468 417.034468 0 0 1 88.68263 25.122559 413.51731 413.51731 0 0 1 152.745155 102.751263 373.321217 373.321217 0 0 1 92.199789 167.81869c0 1.507354 0 2.763481 1.256128 4.270835a42.708349 42.708349 0 0 1 1.004903 7.034316zM266.095074 193.888117A57.028207 57.028207 0 1 0 322.62083 251.921227a56.525756 56.525756 0 0 0-56.525756-58.03311z m337.395958 0a57.028207 57.028207 0 0 0-57.530658 55.018403A58.03311 58.03311 0 0 0 603.491032 307.442081a56.776982 56.776982 0 1 0 0-113.553964z" fill="#24B038" ></path><path d="M836.377148 348.140625a457.230562 457.230562 0 0 1 94.209594 12.812505 320.312619 320.312619 0 0 1 73.860321 25.122559c17.08334 8.792895 34.166679 17.08334 50.245117 25.122558a123.100536 123.100536 0 0 1 14.319858 11.305151l17.837017 12.812505a44.215703 44.215703 0 0 1 5.778188 3.517158A361.76484 361.76484 0 0 1 1131.064757 478.024252a401.960933 401.960933 0 0 1 38.437515 59.540463 247.205974 247.205974 0 0 1 26.881137 136.415492 296.697414 296.697414 0 0 1-20.098047 90.692436 340.913117 340.913117 0 0 1-33.664228 60.796591 215.049099 215.049099 0 0 1-22.107851 25.122558c-8.290444 8.792895-16.580889 17.334565-25.122559 25.122559a151.991478 151.991478 0 0 1-18.339467 15.32476 10.049023 10.049023 0 0 0-4.270835 13.314956l13.566181 40.447319c5.526963 17.08334 11.305151 34.417905 16.580889 51.75247 0 2.009805 0 6.029414-1.507354 6.783091a9.295347 9.295347 0 0 1-7.787993 0q-25.122558-14.319858-52.003695-29.393393l-42.70835-25.122559a21.856626 21.856626 0 0 0-19.846821-1.758579 559.479374 559.479374 0 0 1-56.776982 15.827212 359.252584 359.252584 0 0 1-45.974281 8.039219 340.913117 340.913117 0 0 1-86.170375 0c-22.610303-3.768384-45.220605-6.783091-67.328457-12.561279a388.645978 388.645978 0 0 1-57.028207-21.102949 511.997739 511.997739 0 0 1-50.245117-25.122559 311.519723 311.519723 0 0 1-79.136059-69.338261 290.919226 290.919226 0 0 1-30.649521-43.713251 328.351838 328.351838 0 0 1-22.610302-50.245117 219.57116 219.57116 0 0 1-11.053926-48.988989 464.767329 464.767329 0 0 1-3.014707-67.328456 248.713328 248.713328 0 0 1 16.580889-70.845615 279.614074 279.614074 0 0 1 34.920356-63.560072 277.60427 277.60427 0 0 1 46.476733-52.003696 407.236671 407.236671 0 0 1 44.466928-31.905649 263.284411 263.284411 0 0 1 37.935063-22.359077 566.011239 566.011239 0 0 1 62.303945-23.615205 410.502603 410.502603 0 0 1 59.791688-13.314956c21.856626-2.512256 43.462026-4.773286 64.816201-6.783091z m75.367675 189.926542a50.245117 50.245117 0 0 0 50.245117 54.515951 50.245117 50.245117 0 0 0 53.259823-52.757372 53.008598 53.008598 0 0 0-53.259823-52.003696 53.511049 53.511049 0 0 0-50.245117 50.245117z m-211.280716-50.245117a52.254921 52.254921 0 1 0 1.256128 104.509843 50.245117 50.245117 0 0 0 50.245117-54.767178 48.486538 48.486538 0 0 0-51.501245-49.49144z" fill="#24B038" ></path></symbol><symbol id="icon-QQ" viewBox="0 0 1024 1024"><path d="M511.09761 957.257c-80.159 0-153.737-25.019-201.11-62.386-24.057 6.702-54.831 17.489-74.252 30.864-16.617 11.439-14.546 23.106-11.55 27.816 13.15 20.689 225.583 13.211 286.912 6.767v-3.061z" fill="#FAAD08" ></path><path d="M496.65061 957.257c80.157 0 153.737-25.019 201.11-62.386 24.057 6.702 54.83 17.489 74.253 30.864 16.616 11.439 14.543 23.106 11.55 27.816-13.15 20.689-225.584 13.211-286.914 6.767v-3.061z" fill="#FAAD08" ></path><path d="M497.12861 474.524c131.934-0.876 237.669-25.783 273.497-35.34 8.541-2.28 13.11-6.364 13.11-6.364 0.03-1.172 0.542-20.952 0.542-31.155C784.27761 229.833 701.12561 57.173 496.64061 57.162 292.15661 57.173 209.00061 229.832 209.00061 401.665c0 10.203 0.516 29.983 0.547 31.155 0 0 3.717 3.821 10.529 5.67 33.078 8.98 140.803 35.139 276.08 36.034h0.972z" fill="#000000" ></path><path d="M860.28261 619.782c-8.12-26.086-19.204-56.506-30.427-85.72 0 0-6.456-0.795-9.718 0.148-100.71 29.205-222.773 47.818-315.792 46.695h-0.962C410.88561 582.017 289.65061 563.617 189.27961 534.698 185.44461 533.595 177.87261 534.063 177.87261 534.063 166.64961 563.276 155.56661 593.696 147.44761 619.782 108.72961 744.168 121.27261 795.644 130.82461 796.798c20.496 2.474 79.78-93.637 79.78-93.637 0 97.66 88.324 247.617 290.576 248.996a718.01 718.01 0 0 1 5.367 0C708.80161 950.778 797.12261 800.822 797.12261 703.162c0 0 59.284 96.111 79.783 93.637 9.55-1.154 22.093-52.63-16.623-177.017" fill="#000000" ></path><path d="M434.38261 316.917c-27.9 1.24-51.745-30.106-53.24-69.956-1.518-39.877 19.858-73.207 47.764-74.454 27.875-1.224 51.703 30.109 53.218 69.974 1.527 39.877-19.853 73.2-47.742 74.436m206.67-69.956c-1.494 39.85-25.34 71.194-53.24 69.956-27.888-1.238-49.269-34.559-47.742-74.435 1.513-39.868 25.341-71.201 53.216-69.974 27.909 1.247 49.285 34.576 47.767 74.453" fill="#FFFFFF" ></path><path d="M683.94261 368.627c-7.323-17.609-81.062-37.227-172.353-37.227h-0.98c-91.29 0-165.031 19.618-172.352 37.227a6.244 6.244 0 0 0-0.535 2.505c0 1.269 0.393 2.414 1.006 3.386 6.168 9.765 88.054 58.018 171.882 58.018h0.98c83.827 0 165.71-48.25 171.881-58.016a6.352 6.352 0 0 0 1.002-3.395c0-0.897-0.2-1.736-0.531-2.498" fill="#FAAD08" ></path><path d="M467.63161 256.377c1.26 15.886-7.377 30-19.266 31.542-11.907 1.544-22.569-10.083-23.836-25.978-1.243-15.895 7.381-30.008 19.25-31.538 11.927-1.549 22.607 10.088 23.852 25.974m73.097 7.935c2.533-4.118 19.827-25.77 55.62-17.886 9.401 2.07 13.75 5.116 14.668 6.316 1.355 1.77 1.726 4.29 0.352 7.684-2.722 6.725-8.338 6.542-11.454 5.226-2.01-0.85-26.94-15.889-49.905 6.553-1.579 1.545-4.405 2.074-7.085 0.242-2.678-1.834-3.786-5.553-2.196-8.135" fill="#000000" ></path><path d="M504.33261 584.495h-0.967c-63.568 0.752-140.646-7.504-215.286-21.92-6.391 36.262-10.25 81.838-6.936 136.196 8.37 137.384 91.62 223.736 220.118 224.996H506.48461c128.498-1.26 211.748-87.612 220.12-224.996 3.314-54.362-0.547-99.938-6.94-136.203-74.654 14.423-151.745 22.684-215.332 21.927" fill="#FFFFFF" ></path><path d="M323.27461 577.016v137.468s64.957 12.705 130.031 3.91V591.59c-41.225-2.262-85.688-7.304-130.031-14.574" fill="#EB1C26" ></path><path d="M788.09761 432.536s-121.98 40.387-283.743 41.539h-0.962c-161.497-1.147-283.328-41.401-283.744-41.539l-40.854 106.952c102.186 32.31 228.837 53.135 324.598 51.926l0.96-0.002c95.768 1.216 222.4-19.61 324.6-51.924l-40.855-106.952z" fill="#EB1C26" ></path></symbol><symbol id="icon-mail" viewBox="0 0 1024 1024"><path d="M512.711709 440.905802 236.466108 268.246417 187.709661 268.246417 187.709661 755.754606 268.958126 755.754606 268.958126 400.278499 512.711709 552.626279 756.466316 400.278499 756.466316 755.754606 837.717851 755.754606 837.717851 268.246417 788.958334 268.246417Z" fill="#1296db" ></path><path d="M837.717851 166.528758 187.709661 166.528758c-27.173896 0-52.66343 10.592242-71.773673 29.825282-19.054985 19.177781-29.54899 44.709271-29.54899 71.876004l-0.397043 487.524562c0 56.087413 45.63127 101.716636 101.719706 101.716636l650.00819 0c56.087413 0 101.716636-45.630247 101.716636-101.716636L939.434487 268.246417C939.434487 212.159004 893.804241 166.528758 837.717851 166.528758zM898.502239 755.754606c0 33.517371-27.267017 60.784388-60.784388 60.784388L187.709661 816.538995c-33.518395 0-60.787458-27.267017-60.787458-60.768015l0.397043-487.525586c0-33.517371 27.091008-60.785411 60.391439-60.785411l650.00819 0c33.517371 0 60.784388 27.26804 60.784388 60.785411L898.503263 755.754606z" fill="#1296db" ></path></symbol><symbol id="icon-kaggle_" viewBox="0 0 1024 1024"><path d="M803.214 1017.984c-0.928 3.936-4.992 6.016-12 6.016h-133.92c-7.968 0-14.976-3.488-20.992-10.592l-220.928-281.12-61.792 58.624v218.08q0 15.024-14.976 15.008H234.894q-15.12 0-15.1-15.008V15.072C219.79 5.12 224.814 0 234.894 0h103.712c9.984 0 14.976 5.12 14.976 15.072V627.04l264.672-267.616c7.04-7.04 14.08-10.5 21.12-10.5h138.208c6.144 0 10.08 2.56 12.16 7.68 1.952 6.368 1.44 10.88-1.536 13.44L508.522 640.736l291.68 362.976c4.064 4.448 4.992 8.864 2.976 15.264z" fill="#20BEFF" ></path></symbol><symbol id="icon-xiaohongshu" viewBox="0 0 1024 1024"><path d="M726.51776 457.45152c-6.70208-0.0768-13.39392 0-20.00384-0.0768-2.37056 0-3.0464 1.05984-3.0464 3.23072 0.0768 5.10976 0.0768 10.13248 0.0768 15.232v0.01024c0.07168 4.87936 0 9.7536 0.07168 14.56128 0 3.90656 0.68096 4.66944 4.45952 4.66944 7.1424 0.0768 14.27456 0 21.41696 0.0768 2.67776 0 3.72736-1.28 3.65056-3.75808-0.08704-9.1648-0.08704-18.31936-0.15872-27.48416a6.7584 6.7584 0 0 0-6.46656-6.46144z" fill="#FF2E4D" ></path><path d="M849.92 51.2h-675.84c-67.8656 0-122.88 55.0144-122.88 122.88v675.84c0 67.8656 55.0144 122.88 122.88 122.88h675.84c67.8656 0 122.88-55.0144 122.88-122.88V174.08c0-67.8656-55.0144-122.88-122.88-122.88zM250.78784 505.73312c-0.73728 10.59328-1.41312 21.25312-2.60608 31.8464-2.08896 18.39104-6.24128 36.26496-14.6432 52.864-2.16064 4.12672-5.13536 7.79776-8.18176 12.45696-1.85344-3.90656-3.41504-6.97856-4.82816-10.13248a3203.59424 3203.59424 0 0 1-14.79168-33.56672c-0.52736-1.2032-0.896-2.92352-0.36864-3.97824 3.19488-6.83008 3.41504-14.12096 3.85536-21.40672 0.60416-9.15968 1.35168-18.24256 2.01728-27.39712 0.51712-7.00416 0.80896-13.9776 1.39776-20.96128 0.67584-8.10496 1.49504-16.21504 2.16064-24.24832 0.14848-1.96608 1.04448-2.56 2.82624-2.56 11.0848 0 22.07744 0 33.16224-0.07168 2.37056 0 3.0464 0.98304 2.89792 3.23072-0.96768 14.63296-1.86368 29.28128-2.89792 43.92448z m71.29088 87.32672c-0.73728 9.46176-5.13536 17.49504-12.5696 23.5008-5.43232 4.352-11.74528 6.15936-18.6624 6.08256-5.87264 0-11.66848-0.0768-17.54112 0-2.00192 0-3.27168-0.60416-4.09088-2.55488-3.41504-7.6544-6.90688-15.32416-10.32192-22.97344-0.52736-1.13152-0.67584-2.33472-1.13152-3.456-1.63328-4.12672-1.5616-4.28544 2.97472-4.36224h13.90592c5.94944 0 8.47872-2.46784 8.5504-8.56576 0.07168-4.57216 0.07168-9.14944 0.07168-13.73696V494.2336c0.14848 0.15872 0.22016 0.15872 0.29696 0.15872V408.63744c0-4.28544 0.14848-4.43392 4.38784-4.43392h29.21472c5.13536 0 5.20704 0.14848 5.20704 5.40672 0 27.1872 0 54.36416 0.0768 81.47968 0.0768 23.87456 0.29696 47.75936 0.29696 71.6288 0 10.14272 0.14848 20.26496-0.6656 30.34112z m75.58656-28.90752c-4.98688 11.56096-10.19904 22.97344-15.31904 34.4576-0.45568 1.13664-1.19296 2.25792-2.3808 4.42368v0.01024c-2.97472-4.5056-6.0928-8.18176-8.11008-12.39552-2.82624-6.13888-4.5312-12.83584-7.35744-18.9952-3.0464-6.6816-4.15744-13.88032-5.57568-20.94592-1.1776-6.02112-1.40288-12.25216-1.8432-18.3296-1.2032-15.39584-2.23744-30.78656-3.44064-46.09536a2449.95584 2449.95584 0 0 0-2.0736-25.1648c-0.14848-1.50016 0.2304-2.176 1.94048-2.176 11.52512 0 22.97344-0.14848 34.49856-0.22016 2.1504 0 3.0464 0.96768 3.11808 2.9952 0.29696 4.65408 0.51712 9.31328 0.88576 13.97248 0.29696 3.83488 0.73728 7.6544 1.04448 11.41248 0.51712 5.40672 1.04448 10.81344 1.41312 16.14336 0.51712 6.90688 0.51712 13.81888 1.4848 20.63872 1.34144 10.4448 0.29696 21.10464 3.93216 31.32928 0.89088 2.40128-0.96768 6.08768-2.21696 8.93952z m84.28032 22.016c-2.89792 6.6816-6.02112 13.21472-8.99072 19.82464-1.64352 3.74784-3.19488 7.49568-4.76672 11.25376-1.85344 4.51072-3.11808 5.40672-7.87456 5.40672h-22.2976c-7.52128 0-15.0272 0.23552-22.53312-0.0768-3.56352-0.14336-7.0656-1.27488-10.62912-2.02752-1.792-0.36864-2.16064-1.42336-1.41312-3.14368a3709.71648 3709.71648 0 0 0 13.45024-29.21472c1.04448-2.24768 1.85344-4.65408 3.0464-6.90688 0.29696-0.6144 1.41312-1.28 2.00192-1.13152 12.42112 3.15392 25.13408 2.77504 37.76512 2.63168a874.6496 874.6496 0 0 1 20.07552 0c3.19488 0.00512 3.50208 0.45568 2.16576 3.38432z m3.84-21.86752a4.48512 4.48512 0 0 1-2.74944 1.4336c-13.89568 0.0768-27.8784 0.14848-41.77408-0.0768-4.23936-0.08704-8.5504-1.05472-11.74528-4.28544-3.3536-3.3792-4.98688-7.36256-3.28192-11.93984a897.52576 897.52576 0 0 1 9.58464-24.10496c3.88096-9.15456 7.81312-18.31936 12.05248-28.2368-2.30912-0.14848-3.712-0.29696-5.04832-0.29696-4.09088-0.07168-8.18176 0.29696-12.27264-0.2304-4.45952-0.51712-8.99072-1.04448-12.48256-4.79232-3.42528-3.6864-3.94752-8.04352-2.60608-12.32384 2.1504-6.83008 4.97664-13.44 7.80288-20.04992 2.67776-6.15424 5.72416-12.16 8.47872-18.24256 2.97472-6.53824 5.86752-13.07136 8.77056-19.6096a1361.99168 1361.99168 0 0 0 7.6544-17.33632c0.73728-1.80736 1.8688-2.47808 3.87072-2.47808 10.93632 0.07168 21.92896 0 32.86528 0 3.6352 0 3.712 0.36864 2.29888 3.6864-6.31296 14.63296-12.71808 29.20448-18.95936 43.84768a11.52 11.52 0 0 0-1.19296 4.87936c0.22016 3.90656 1.04448 4.5056 5.06368 4.5056 8.17152 0.0768 16.35328 0 24.448 0 1.64864 0 3.3536 0.22016 4.98688 0.29696 2.30912 0.0768 2.60608 1.05984 1.63328 3.072a2455.21408 2455.21408 0 0 0-13.3888 29.21472c-3.03616 6.91712-5.93408 13.89568-8.9088 20.8128a1530.1632 1530.1632 0 0 1-6.1696 13.80864c-1.94048 4.20352-0.60416 6.31296 4.15232 6.38976 6.02112 0 12.04224 0.0768 18.05824 0 2.08896 0 3.13344 0.60416 2.08896 2.85184-3.6352 8.25344-7.21408 16.58368-10.84928 24.85248-0.67072 1.50016-1.408 3.072-2.3808 4.352z m134.81472 58.73664h-125.3376c-1.72032-0.22016-3.48672-0.22016-5.94432-0.22016v-0.01536c0.88064-2.61632 1.41312-4.41856 2.1504-6.0672 4.69504-10.29632 9.4464-20.5056 14.0544-30.79168 1.04448-2.33472 2.52928-2.92352 4.75648-2.92352h28.6976c4.54656 0 4.75648-0.2304 4.75648-4.74112V461.66016c0-3.97824-0.0768-4.05504-4.08064-4.05504-6.10304 0-12.26752-0.0768-18.36544 0-2.30912 0-3.27168-0.51712-3.27168-3.1488 0.14848-10.97216 0.0768-21.92896 0.0768-32.88576 0-3.90656 0.0768-3.90656 3.86048-3.90656h73.00096c4.23936 0 8.5504 0.0768 12.78976 0 2.01728 0 2.82624 0.82432 2.74944 2.85184-0.0768 11.41248-0.0768 22.82496-0.0768 34.31424 0 2.02752-0.73728 2.77504-2.82624 2.77504-6.6048-0.0768-13.14304 0.07168-19.77856 0.07168-2.29376 0-3.33824 1.05984-3.33824 3.46624 0.0768 18.39104 0.14336 36.7104 0.14336 55.11168 0 20.87424 0 41.74848 0.0768 62.6944 0 3.75808 0.36864 4.21376 4.17792 4.21376h31.4368c3.41504 0 3.87072 0.36864 3.93728 3.81952 0.08704 10.97216 0 21.92896 0.08704 32.89088-0.01024 2.8672-1.57184 3.16416-3.73248 3.16416z m198.69696-34.92864c-0.14848 16.37376-11.008 29.21472-26.38848 32.89088-4.31616 1.05472-8.78592 1.35168-13.24544 1.5104-6.83008 0.22016-13.7472 0.07168-20.58752 0.07168-4.23936 0-5.42208-0.83456-6.9888-4.66432-3.33824-7.95136-6.83008-15.90784-10.26048-23.87456l-0.66048-1.57184c-1.19296-3.072-0.81408-3.61472 2.45248-3.61472 9.43616-0.07168 18.95424 0.15872 28.3904-0.29184 5.65248-0.29696 8.03328-2.85696 8.18688-8.64256 0.22016-11.04384-0.29696-22.07744-0.14848-33.11104 0.0768-5.48864-6.84032-11.42272-11.74528-11.71968a32.8448 32.8448 0 0 0-2.74944-0.14336c-18.73408 0-37.54496 0-56.2688 0.07168-5.27872 0-5.65248 0.53248-5.65248 5.8624l0.20992 77.55776c0 4.14208-0.0768 4.21376-4.23936 4.21376h-31.22176c-4.01408 0-4.3008-0.3072-4.3008-4.28544v-39.94112c0.06144 0.14336 0.13312 0.14336 0.20992 0.14336v-40.99584c0-2.78016-1.85344-2.93888-3.78368-2.93888-10.19392 0.08704-20.44416 0.31232-30.62272 0.31232-6.92224 0-6.17984 0.8192-6.25664-6.38976-0.0768-9.90208 0-19.90144 0-29.80352 0-3.59936 0.36864-4.05504 3.94752-4.13184 10.7008-0.07168 21.33504 0 32.04096-0.07168 4.09088 0 4.31104-0.15872 4.38272-4.21376 0.0768-9.90208-0.0768-19.8144 0-29.73184 0-2.4832-1.04448-3.23072-3.41504-3.23072-6.84544 0.0768-13.76256-0.07168-20.60288 0-2.1504 0-2.89792-0.74752-2.89792-2.92352 0.09216-11.26912 0.09216-22.46144-0.06144-33.72544 0-2.70336 1.03424-3.29216 3.41504-3.29216 6.31296 0.0768 12.6464 0 18.95936 0 4.23424 0 4.45952-0.3072 4.5312-4.74112 0-2.61632 0.14848-5.24288 0-7.87456-0.07168-2.4832 1.04448-3.15904 3.34336-3.15904 9.07776 0.0768 18.22208 0.0768 27.28448 0.0768h4.97664c3.94752 0 4.0192 0 4.1728 4.05504 0.06656 2.4064-0.1536 4.87936-0.08704 7.28576 0.0768 3.3792 0.9728 4.2752 4.31616 4.36224 5.65248 0.0768 11.30496 0.0768 17.024 0.0768 14.6432 0.07168 27.3664 5.09952 37.0176 16.29184 5.35552 6.22592 8.69888 13.81888 9.216 22.14912 0.52736 8.47872 0.15872 17.03936 0.3072 25.52832 0 3.15904 0.22016 6.38976 0.36864 9.53344 0.14336 3.15904 0.896 3.97824 4.09088 3.90656a48.56832 48.56832 0 0 1 19.03104 3.15904c13.00992 5.03808 21.03296 14.18752 23.63904 28.01152a44.4416 44.4416 0 0 1 0.73728 8.33024c0.08192 17.88928 0.06656 35.78368-0.06656 53.6832zM810.14272 453.632c-5.94432 3.90656-12.1856 3.75808-19.4048 3.6864-2.23744 0-5.20192 0.07168-8.09984-0.0768-0.7424-0.07168-2.00704-0.98304-2.08896-1.5872-0.6656-8.84736-1.77152-17.792 1.35168-26.35264 2.75456-7.5776 9.58464-12.01664 17.61792-12.16a19.99872 19.99872 0 0 1 19.32288 14.336c2.30912 8.2688-1.55648 17.42336-8.69888 22.15424z" fill="#FF2E4D" ></path></symbol><symbol id="icon-github" viewBox="0 0 1024 1024"><path d="M512 85.333333C276.266667 85.333333 85.333333 276.266667 85.333333 512a426.410667 426.410667 0 0 0 291.754667 404.821333c21.333333 3.712 29.312-9.088 29.312-20.309333 0-10.112-0.554667-43.690667-0.554667-79.445333-107.178667 19.754667-134.912-26.112-143.445333-50.133334-4.821333-12.288-25.6-50.133333-43.733333-60.288-14.933333-7.978667-36.266667-27.733333-0.554667-28.245333 33.621333-0.554667 57.6 30.933333 65.621333 43.733333 38.4 64.512 99.754667 46.378667 124.245334 35.2 3.754667-27.733333 14.933333-46.378667 27.221333-57.045333-94.933333-10.666667-194.133333-47.488-194.133333-210.688 0-46.421333 16.512-84.778667 43.733333-114.688-4.266667-10.666667-19.2-54.4 4.266667-113.066667 0 0 35.712-11.178667 117.333333 43.776a395.946667 395.946667 0 0 1 106.666667-14.421333c36.266667 0 72.533333 4.778667 106.666666 14.378667 81.578667-55.466667 117.333333-43.690667 117.333334-43.690667 23.466667 58.666667 8.533333 102.4 4.266666 113.066667 27.178667 29.866667 43.733333 67.712 43.733334 114.645333 0 163.754667-99.712 200.021333-194.645334 210.688 15.445333 13.312 28.8 38.912 28.8 78.933333 0 57.045333-0.554667 102.912-0.554666 117.333334 0 11.178667 8.021333 24.490667 29.354666 20.224A427.349333 427.349333 0 0 0 938.666667 512c0-235.733333-190.933333-426.666667-426.666667-426.666667z" fill="#000000" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M729.32864 373.94944c-9.79456-5.94432-19.06176-6.784-19.14368-6.784l-1.06496-0.0512c-57.20064-3.8656-121.1648-5.83168-190.12608-5.83168l-13.98784 0.00512c-68.95616 0-132.92544 1.96096-190.12096 5.83168l-1.06496 0.0512c-0.08192 0-9.34912 0.83968-19.14368 6.784-15.04768 9.12896-24.27392 25.94816-27.4176 49.9712-10.07104 76.91264-4.38272 173.64992 0.18944 251.392 2.93888 49.96608 33.408 62.45888 85.04832 67.1488 10.78272 0.98816 69.08928 5.86752 159.50848 5.89312v-0.00512c90.4192-0.02048 148.72576-4.90496 159.5136-5.888 51.64032-4.68992 82.10944-17.18272 85.0432-67.1488 4.57728-77.74208 10.26048-174.47936 0.18944-251.392-3.1488-24.02816-12.37504-40.84736-27.42272-49.97632z m-390.9888 172.71808a23.64928 23.64928 0 0 1-31.68768-10.84416 23.68 23.68 0 0 1 10.84416-31.68768c2.03776-1.00352 50.69312-24.72448 110.5408-43.06432a23.68 23.68 0 1 1 13.88032 45.29152c-56.2944 17.24928-103.11168 40.07424-103.5776 40.30464z m268.89728 35.88608c-0.44032 2.23232-11.26912 54.64064-50.93888 54.64064-21.44256 0-36.10112-14.04928-44.98432-26.77248-8.69376 12.70784-22.80448 26.77248-42.65472 26.77248-35.5328 0-50.13504-48.26624-51.68128-53.77024a11.3664 11.3664 0 0 1 21.87776-6.1696c2.74944 9.6512 14.1312 37.20192 29.7984 37.20192 16.37376 0 28.89216-23.64416 31.98464-31.92832a11.37152 11.37152 0 0 1 10.6496-7.38816h0.06144c4.76672 0.03072 9.0112 3.02592 10.62912 7.50592 0.10752 0.28672 11.96544 31.81568 34.31424 31.81568 20.864 0 28.56448-35.95264 28.64128-36.32128a11.34592 11.34592 0 0 1 13.35808-8.93952 11.36128 11.36128 0 0 1 8.94464 13.35296z m110.11584-46.73536a23.68 23.68 0 0 1-31.68256 10.84416c-0.47104-0.2304-47.47264-23.1168-103.57248-40.30976a23.69024 23.69024 0 0 1-15.70816-29.58336 23.66976 23.66976 0 0 1 29.57824-15.70304c59.84768 18.33984 108.49792 42.0608 110.55104 43.06432a23.68 23.68 0 0 1 10.83392 31.68768z" fill="#F16C8D" ></path><path d="M849.92 51.2H174.08c-67.8656 0-122.88 55.0144-122.88 122.88v675.84c0 67.87072 55.0144 122.88 122.88 122.88h675.84c67.87072 0 122.88-55.00928 122.88-122.88V174.08c0-67.86048-55.00928-122.88-122.88-122.88z m-36.60288 627.45088c-2.62656 44.57984-21.82144 78.63296-55.51616 98.48832-25.68192 15.13472-54.17472 19.48672-81.13664 21.9392-32.45568 2.94912-92.71808 6.09792-164.66432 6.1184-71.94112-0.02048-132.20864-3.16416-164.66432-6.1184-26.96192-2.45248-55.45472-6.80448-81.13152-21.9392-33.69472-19.85536-52.8896-53.90336-55.51104-98.4832-4.70528-80.13312-10.5728-179.85536 0.19456-262.10816C221.5424 335.16544 280.99072 311.57248 311.5008 310.37952a2482.64192 2482.64192 0 0 1 81.42336-4.08576c-7.53664-8.53504-19.88096-23.3216-28.81536-38.11328-13.73696-22.73792 8.52992-41.68704 8.52992-41.68704s23.68-20.36736 44.52864 5.21216c15.69792 19.26656 38.37952 55.99744 48.61952 72.95488l53.20704-0.21504c13.2608 0 26.33216 0.07168 39.2192 0.21504 10.24-16.95744 32.9216-53.6832 48.61952-72.95488 20.84352-25.57952 44.52864-5.21216 44.52864-5.21216s22.26176 18.94912 8.5248 41.68704c-8.9344 14.79168-21.27872 29.57824-28.81536 38.11328 28.35968 0.97792 55.56224 2.33984 81.42336 4.08064 30.5152 1.19808 89.9584 24.79104 100.61312 106.17344 10.7776 82.24768 4.9152 181.96992 0.20992 262.10304z" fill="#F16C8D" ></path></symbol><symbol id="icon-zhihu" viewBox="0 0 1024 1024"><path d="M656.90624 724.29056l47.42144-33.72544h52.68992V344.89856h-143.31904v346.7264h35.82976z" fill="#0066FF" ></path><path d="M849.92 51.2H174.08c-67.8656 0-122.88 55.0144-122.88 122.88v675.84c0 67.8656 55.0144 122.88 122.88 122.88h675.84c67.8656 0 122.88-55.0144 122.88-122.88V174.08c0-67.8656-55.0144-122.88-122.88-122.88zM495.66208 803.34848l-101.1712-157.05088 44.26752-31.616 67.45088 98.00704c-0.00512 0 23.17824 37.99552-10.5472 90.65984z m38.99392-276.10112v25.2928H408.19712C357.61152 876.06784 204.8 807.04512 204.8 807.04512c140.16512-109.86496 142.7968-254.50496 142.7968-254.50496H208.49152c0-57.9584 52.16256-56.91392 52.16256-56.91392h93.79328v-151.7568h-50.5856C284.89728 429.2352 204.8 425.02144 204.8 425.02144s32.67072-50.5856 54.79936-137.00096c22.12864-86.42048 89.5744-76.928 89.5744-76.928-20.0192 35.82976-29.50656 76.928-29.50656 76.928H485.12c40.04864 0 37.9392 25.2928 37.9392 25.2928v29.51168H411.35616v152.8064H503.04c33.72544 0 31.616 31.616 31.616 31.616zM819.2 747.49952h-102.22592l-88.51968 55.84896-8.42752-55.84896h-64.29184V288.01536H819.2v459.48416z" fill="#0066FF" ></path></symbol></svg>'),  ((h) => {    var c = (l = (l = document.getElementsByTagName("script"))[        l.length - 1      ]).getAttribute("data-injectcss"),      l = l.getAttribute("data-disable-injectsvg");    if (!l) {      var a,        t,        i,        o,        s,        e = function (c, l) {          l.parentNode.insertBefore(c, l);        };      if (c && !h.__iconfont__svg__cssinject__) {        h.__iconfont__svg__cssinject__ = !0;        try {          document.write(            "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"          );        } catch (c) {          console && console.log(c);        }      }      (a = function () {        var c,          l = document.createElement("div");        (l.innerHTML = h._iconfont_svg_string_4810983),          (l = l.getElementsByTagName("svg")[0]) &&            (l.setAttribute("aria-hidden", "true"),            (l.style.position = "absolute"),            (l.style.width = 0),            (l.style.height = 0),            (l.style.overflow = "hidden"),            (l = l),            (c = document.body).firstChild              ? e(l, c.firstChild)              : c.appendChild(l));      }),        document.addEventListener          ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)            ? setTimeout(a, 0)            : ((t = function () {                document.removeEventListener("DOMContentLoaded", t, !1), a();              }),              document.addEventListener("DOMContentLoaded", t, !1))          : document.attachEvent &&            ((i = a),            (o = h.document),            (s = !1),            d(),            (o.onreadystatechange = function () {              "complete" == o.readyState &&                ((o.onreadystatechange = null), v());            }));    }    function v() {      s || ((s = !0), i());    }    function d() {      try {        o.documentElement.doScroll("left");      } catch (c) {        return void setTimeout(d, 50);      }      v();    }  })(window);]]></content>
      
    </entry>
    
    
  
</search>
