<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>映射 (Map) 与 哈希 (Hash)</title>
      <link href="/posts/ab7a595d.html"/>
      <url>/posts/ab7a595d.html</url>
      
        <content type="html"><![CDATA[<h1>映射 (Map) 与 哈希 (Hash)</h1><p>本章介绍映射、哈希表、哈希函数、哈希码、压缩函数、冲突处理。核心问题：以最快的速度实现查找、删除、插入键值对的功能。</p><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。<strong>【持续更新中，建议 star !】</strong></p><h2 id="1-映射">1 映射</h2><p><strong>映射 map</strong> ：是由键值对所构成的集合，其中的键是唯一的，但值不一定唯一。映射上的主要操作为查找、插入和删除。其中映射需要解决的核心问题就是<strong>加速查找操作</strong>。</p><p><strong>字典 dict</strong> ：是 Python 中最重要的数据结构。</p><ul><li><p><code>dict</code> 类表示一种被称为字典的抽象概念，其中的每个键是唯一的，且被映射到对应的值上。</p></li><li><p><code>dict</code> 类是一种<strong>无序映射</strong>的实现。</p></li></ul><p>为避免混淆，我们使用 “字典” 这一术语来指代 Python 的 <code>dict</code> 类，而使用 “映射” 这一术语来讨论更为一般的抽象数据类型概念。</p><h3 id="1-1-映射的抽象数据类型-ADT">1.1 映射的抽象数据类型 ADT</h3><p>引入映射 M 的 ADT ，并定义其行为与 dict 类一致：</p><p><strong>映射 M 最重要的 5 类行为（查找、增添、删除、修改、遍历）：</strong></p><ul><li><code>M[k]</code> ：如果存在，返回映射 M 中键 k 对应的值，否则抛出 KeyError 。Python 中该功能由特殊方法 <code>__getitem__</code> 实现。</li><li><code>M[k] = v</code> ：使得映射 M 中键 k 对应于值 v 。如 k 有之前对应的值，则替换掉该值。Python 中该功能由特殊方法 <code>__setitem__</code> 实现。</li><li><code>del M[k]</code> ：从映射 M 中删除键为 k 的键值对。如键 k 不存在则抛出 KeyError 。Python 中该功能由特殊方法 <code>__delitem__</code> 实现。</li><li><code>len(M)</code> ：返回映射 M 中键值对的数量。Python 中该功能由特殊方法 <code>__len__</code> 实现。</li><li><code>iter(M)</code> ：返回一个包含映射 M 所有键的迭代器。Python 中该功能由特殊方法 <code>__iter__</code> 实现。</li></ul><p><strong>为实现其他方便的功能，映射 M 也应支持以下行为：</strong></p><ul><li><code>k in M</code> ：如果映射 M 中包含键 k 则返回 True ，否则返回 False 。Python 中该功能由特殊方法 <code>__contains__</code> 实现。</li><li><code>M.get(k, d=None)</code> ：如映射 M 中存在 k 则返回 M[k] ，否则返回默认值 d 。这提供了一种避免 KeyError 风险的 M[k] 查询方法。</li><li><code>M.setdefault(k, d)</code> ：如映射 M 中存在键 k ，则返回 M[k] ，否则令 M[k] = d 并返回 d 。</li><li><code>M.pop(k, d=None)</code> ：从映射 M 中删除键为 k 的键值对，并将其值 v 返回。如 M 中不存在键 k 则返回默认值 d（如 d 为 None 则抛出 KeyError ）。</li><li><code>M.popitem()</code> ：从映射 M 中随机删除并返回一个键值对 (k, v) 。如 M 为空则抛出 KeyError 。</li><li><code>M.clear()</code> : 删除映射M中所有的键值对。</li><li><code>M.keys()</code> : 返回 M 的所有键。</li><li><code>M.values()</code> : 返回 M 的所有值。</li><li><code>M.items()</code> : 返回 M 的所有键值对。</li><li><code>M.update(M2)</code> : 将 M2 中的所有键值对信息插入 M 中。</li><li><code>M == M2</code> : 如果映射 M 和 M2 中包含的所有键值对完全相同则返回 True ，否则返回 False 。</li><li><code>M != M2</code> : 如果映射 M 和 M2 中有不同的键值对则返回 True ，否则返回 False 。</li></ul><p>例如：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744194185818.png" alt="映射 ADT 的一些操作例子"></p><p><strong>应用</strong> 考虑统计一个文档中单词出现频率的问题。使用 Python 的 dict 类实现该映射：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_word_count</span>(<span class="params">filename: <span class="built_in">str</span></span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]:</span><br><span class="line">    freq = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> piece <span class="keyword">in</span> <span class="built_in">open</span>(filename).read().lower().split():</span><br><span class="line">        <span class="comment"># 只考虑小写字母的单词</span></span><br><span class="line">        word = <span class="string">&#x27;&#x27;</span>.join(c <span class="keyword">for</span> c <span class="keyword">in</span> piece <span class="keyword">if</span> c.isalpha())</span><br><span class="line">        <span class="keyword">if</span> word:  <span class="comment"># 单词存在</span></span><br><span class="line">            freq[word] = <span class="number">1</span> + freq.get(word, <span class="number">0</span>)  <span class="comment"># 有则 +1 无则初始化为 0</span></span><br><span class="line"></span><br><span class="line">    max_word = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    max_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (w, c) <span class="keyword">in</span> freq.items():</span><br><span class="line">        <span class="keyword">if</span> c &gt; max_count:</span><br><span class="line">            max_word = w</span><br><span class="line">            max_count = c</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max_word, max_count</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    file_path = <span class="string">&quot;example.txt&quot;</span></span><br><span class="line">    max_word, max_count = max_word_count(filename=file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;The most frequent word is: \&#x27;&#123;&#125;\&#x27;&#x27;</span>.<span class="built_in">format</span>(max_word))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Its number of occurrences is: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(max_count))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># The most frequent word is: &#x27;file&#x27;</span></span><br><span class="line"><span class="comment"># Its number of occurrences is: 3</span></span><br></pre></td></tr></table></figure><h3 id="1-2-Python-实现映射">1.2 Python 实现映射</h3><p>我们可以使用 Python 自带的抽象基类帮助我们构建自己的映射类。</p><p>Python 的 <code>collections.abc</code> 模块中有以下两个抽象基类：</p><ul><li><code>Mapping</code> ：包含 dict 类支持的所有<strong>不可变方法</strong>。</li><li><code>MutableMapping</code> ：包含 dict 类支持的<strong>不可变及可变方法</strong>。</li></ul><blockquote><p>【注意】在高版本的 Python 中 <code>MutableMapping</code> 已移到 <code>collections.abc</code> 中。</p></blockquote><p><code>MutableMapping</code> 类提供映射 ADT 中<strong>除以下 5 种行为外</strong>所有行为的具体实现：<code>__getitem__</code> ， <code>__setitem__</code> ， <code>__delitem__</code> ，<code>__len__</code> 和 <code>__iter__</code> 。所以我们只需在继承类中给出以上 5 种行为的具体实现即可得到映射 ADT 中所有行为的实现。</p><p>后续实现的类的关系图如下：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744200161055.png" alt="各个类的关系图"></p><h4 id="1-2-1-基于-MutableMapping-自定义实现的-MapBase">1.2.1 基于 MutableMapping 自定义实现的 MapBase</h4><p>继承类 <code>MutableMapping</code> 并定义内嵌类 <code>_Item</code> 存储<strong>键值对</strong>，得到映射的基础类 <code>MapBase</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> collections.abc <span class="keyword">import</span> MutableMapping  <span class="comment"># Python 3.3+</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> MutableMapping  <span class="comment"># Python 2.7 - 3.2 (已废弃)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MapBase</span>(<span class="title class_ inherited__">MutableMapping</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;映射 Map 的基础父类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 嵌套的 _Item 类，存储键值对 ----------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Item</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;存储键值对&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_key&#x27;</span>, <span class="string">&#x27;_value&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, k, v</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;初始化键值对&quot;&quot;&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>._key = k</span><br><span class="line">            <span class="variable language_">self</span>._value = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;a == b 等价于 a 和 b 键值相等&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._key == other._key</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;a != b 等价于 a 和 b 键值不等&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> (<span class="variable language_">self</span> == other)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;比较键值&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._key &lt; other._key</span><br></pre></td></tr></table></figure><h4 id="1-2-2-简单的非有序映射实现-UnsortedTableMap">1.2.2 简单的非有序映射实现 UnsortedTableMap</h4><p>继承映射的基础类 <code>MapBase</code> ，使用列表简单实现可实例化的非有序映射。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnsortedTableMap</span>(<span class="title class_ inherited__">MapBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于未排序列表实现映射&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化列表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._table = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据键取值 M[k]&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>._table:</span><br><span class="line">            <span class="keyword">if</span> k == item._key:</span><br><span class="line">                <span class="keyword">return</span> item._value</span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">&#x27;Key Error: &#x27;</span> + <span class="built_in">repr</span>(k))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, k, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置键为 k 的值为 v 若没有则新建 M[k] = v&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>._table:</span><br><span class="line">            <span class="keyword">if</span> k == item._key:</span><br><span class="line">                item._value = v</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 若没有找到匹配的 key 则新建</span></span><br><span class="line">        <span class="variable language_">self</span>._table.append(<span class="variable language_">self</span>._Item(k, v))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除键为 k 的对象&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>._table)):</span><br><span class="line">            <span class="keyword">if</span> k == <span class="variable language_">self</span>._table[j]._key:</span><br><span class="line">                <span class="variable language_">self</span>._table.pop(j)  <span class="comment"># 找到后使用列表的删除方式</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">raise</span> KeyError(<span class="string">&#x27;Key Error: &#x27;</span> + <span class="built_in">repr</span>(k))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;对象总数目&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._table)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器，指出 for item in M 操作&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>._table:</span><br><span class="line">            <span class="keyword">yield</span> item._key  <span class="comment"># 返回键 key</span></span><br></pre></td></tr></table></figure><p>测试案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m = UnsortedTableMap()</span><br><span class="line">    m[<span class="string">&#x27;test1&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    m[<span class="string">&#x27;test2&#x27;</span>] = <span class="number">2</span></span><br><span class="line">    m[<span class="string">&#x27;test3&#x27;</span>] = <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key: &#123;&#125;, value: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(key, m[key]))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># key: test1, value: 1</span></span><br><span class="line"><span class="comment"># key: test2, value: 2</span></span><br><span class="line"><span class="comment"># key: test3, value: 3</span></span><br></pre></td></tr></table></figure><p><strong>算法分析</strong></p><p><code>UnsortedTableMap</code> 类的性能：</p><ul><li>插入操作只需在无序列表尾增加新元素，故运行时间为 <strong>O(1)</strong> 。</li><li>查找及删除时，最坏情况下需要遍历整个列表，故运行时间为 <strong>O(n)</strong> 。</li><li>基于列表实现的无序映射，只在映射规模较小，或插入操作经常执行，但查找和删除很少执行时，较有效率。</li></ul><h2 id="2-哈希表">2 哈希表</h2><p>实践中最常用来实现映射的数据结构—— <strong>哈希表（hash table）</strong></p><ul><li>在哈希表中，我们直接使用键作为索引来查找键值对</li><li>考虑一种简单情况：映射 M 中含有 n 个元组，如使用 0 到 N-1 的整数作为键（N &gt;= n），则可使用长为 N 的查找表来表示此映射：</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744201795319.png" alt="简单哈希的例子"></p><p>因为记住了索引，此时查找、插入、删除操作均可在 <strong>O(1)</strong> 时间内完成。</p><h3 id="2-1-哈希函数">2.1 哈希函数</h3><p>**哈希函数（hash function）**解决了下面的问题：</p><ul><li>如果 N &gt;&gt; n ，如何减小分配的空间？</li><li>映射的键不为整数的情况下，如何将其转换为索引？</li></ul><p>哈希函数 h(k) 包括两部分：<strong>哈希码 + 压缩函数</strong> 。其中哈希码是将任意输入的的键值 key 转换为整数，而压缩函数则是将得到的哈希码压缩到 [0, N-1] 范围。然后再将对象存储在当下哈希函数值索引对应的位置上，即：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>M</mi><mtext> </mtext><mo stretchy="false">[</mo><mtext> </mtext><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mtext> </mtext><mi>v</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mspace width="1em"/><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>k</mi></mrow><annotation encoding="application/x-tex">M\ [\ h(k)\ ] = (k,\ v), \quad h(k)\in [0,\ N-1]\quad \forall\ k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace"> </span><span class="mopen">[</span><span class="mspace"> </span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace"> </span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span></p><p>理想情况下，哈希函数将键均匀地映射到 [0, N-1] 这一范围内，但实践中可能有两个或更多不同键被映射到同一个索引上，这时需要进行 **冲突（collision）**处理。</p><h3 id="2-2-哈希码">2.2 哈希码</h3><p><strong>哈希码</strong>过程，相当于将任意不可变类型的键值 <code>k</code> 变为一个整数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mn>1</mn></msub><mo>:</mo><mi>k</mi><mo>→</mo><mi mathvariant="double-struck">N</mi></mrow><annotation encoding="application/x-tex">h_1: k \to \N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">N</span></span></span></span></span></p><h4 id="2-2-1-将位作为整数处理">2.2.1 将位作为整数处理</h4><p>设键对应的二进制表达（不可变对象在计算机内部都对应这一个固定的 0 1 数字串）为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mtext> </mtext><msub><mi>x</mi><mn>1</mn></msub><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mtext> </mtext><mo>⋯</mo><mtext> </mtext><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x = (x_0\ x_1\ x_2\ \cdots\ x_{n-1})_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>**分量求和法：**将键的位（二进制表示）表示分为固定长度的几部分（如16或32位），再将各部分相加，忽略溢出。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mtext> </mtext><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">h_1(x) = \sum\limits_{i=0}^{n-1}\ x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>**分量异或法：**将键的位表示分为固定长度的几部分（如16或32位），再将各部分进行位异或运算。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mtext> </mtext><mo>⊕</mo><mtext> </mtext><msub><mi>x</mi><mn>1</mn></msub><mtext> </mtext><mo>⊕</mo><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo>⊕</mo><mtext> </mtext><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">h_1(x) = x_0\ \oplus\ x_1\ \oplus\ x_2\ \cdots\ \oplus\ x_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><strong>按位处理的特点：</strong></p><ul><li><p>适用于键的位数大于整数位数的情况</p></li><li><p>可能存在的问题：忽略了各部分间的顺序，对字符串或可变长度对象不一定是个好选择</p></li></ul><h4 id="2-2-2-多项式哈希码">2.2.2 多项式哈希码</h4><p>类似地，先将键的位表示分为固定长度的几部分（如16或32位）：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mtext> </mtext><msub><mi>x</mi><mn>1</mn></msub><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mtext> </mtext><mo>⋯</mo><mtext> </mtext><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x = (x_0\ x_1\ x_2\ \cdots\ x_{n-1})_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>选择一个非零常数 a ，计算如下多项式的值，忽略溢出：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>⋅</mo><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>⋅</mo><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>⋅</mo><mi>a</mi><mo>+</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">p(a) = x_0 \cdot a^{n-1} + x_1 \cdot a^{n-2} + \cdots + x_{n-2} \cdot a + x_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5945em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5945em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6528em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>处理英文字符串时，33、37、39、41 特别适合选作 a 值，在超过 50000 个英文单词构成的集合上每个哈希码上的冲突小于 7 次。</p><p>为提高性能，利用 <strong>Horner</strong> 规则，多项式的值可以在 <strong>O(n)</strong> 内计算出来：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>a</mi><mo>⋅</mo><msub><mi>p</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mn>2</mn><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p_i(a) = x_i + a\cdot p_{i-1}(a),\quad i=1,\ 2,\ \cdots\ n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><h4 id="2-2-3-循环移位哈希码">2.2.3 循环移位哈希码</h4><p>多项式哈希码的一个变种，将多项式哈希码中乘 a 的操作变为对部分和的循环移位。</p><p>例如，一个32位数 <strong>00111</strong>XX…X 的五位循环移位值取其最左边五位，并且将它们放置到数据的最右边，得到结果 XX…X<strong>00111</strong>。在 Python 中，二进制位循环移位可以通过使用按位运算符 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 完成，从而截取结果 32 位整数。</p><p>5 位循环移位在 230000 个单词构成的集合中哈希码的最大冲突次数为 3 。</p><h4 id="2-2-4-Python-中的哈希码">2.2.4 Python 中的哈希码</h4><p>Python 中使用<strong>内置函数</strong> <code>hash(x)</code> 计算对象 x 的哈希码。只有<strong>不可变数据类型才是可哈希的</strong>：</p><ul><li><code>int</code>、<code>float</code>、<code>str</code>、<code>tuple</code>、<code>frozenset</code> 可哈希</li><li><code>list</code>、<code>dict</code>、<code>set</code> 不可哈希</li></ul><p>默认情况下，用户定义的类不可哈希。但可通过在类中实现一个使用<strong>不可变对象计算哈希码的特殊方法</strong> <code>__hash__</code>，有此方法的类即可哈希，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">x</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;对象存储这 RGB 三色的数值&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">hash</span>((<span class="variable language_">self</span>._red, <span class="variable language_">self</span>._green, <span class="variable language_">self</span>._blue))</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="2-3-压缩函数">2.3 压缩函数</h3><p><strong>压缩函数</strong>的目的是将哈希码压缩到 [0, N-1] 范围：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mn>2</mn></msub><mo>:</mo><mi mathvariant="double-struck">N</mi><mo>→</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">h_2: \N \to [0,\ N-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span></p><p>最终<strong>哈希函数</strong>即为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(k) = h_2(h_1(k))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">))</span></span></span></span></span></p><h4 id="2-3-1-模函数取余-划分方法">2.3.1 模函数取余/划分方法</h4><p>哈希表的大小 <code>N</code> （通常取质数），则对于某个键 <code>k</code> ，用模 N 的方法将其压缩到 [0, N-1]</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>≡</mo><mi>y</mi><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>N</mi><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mi>y</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">h_2(k) \equiv y \mod N \quad \Rightarrow \quad y \in [0,\ N-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span></p><p>如 N 不为质数，则出现冲突的概率大幅提升。例：哈希码为 {200, 205, 210, 215, 220, …, 600}。如 N = 100，则每个哈希码将至少与另三个哈希码冲突；但如 N = 101，则不会发生冲突。</p><h4 id="2-3-2-MAD-方法">2.3.2 MAD 方法</h4><p>有一个更复杂的压缩函数，即 <strong>Multiply-Add-and-Divide, MAD 方法</strong>。这个方法通过</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>a</mi><mo>⋅</mo><mi>k</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi><mo stretchy="false">]</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>N</mi></mrow><annotation encoding="application/x-tex">h_2(k) = [(a\cdot k+b)\mod p] \mod N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mclose">]</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>其中 p 为比 N 大的质数， a 和 b 为区间内任意选择的整数，且 a &gt; 0 。该函数使得哈希函数得到的结果更好地被分散在 [0, N − 1] 中。</p><h3 id="2-4-处理冲突">2.4 处理冲突</h3><p>当两个不同的键被映射到同一个索引时，就发生了<strong>冲突</strong>。哈希函数的设计可以减少冲突，但往往不能完全避免冲突的发生。</p><p>我们将表概念化为<strong>桶数组（bucket array）</strong>，每个桶里可能装着多个由哈希函数映射到该桶的键值对，例如下面的例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744204546431.png" alt="出现冲突时，一种存储方式：桶数组"></p><p>两类常见的冲突处理方式：<strong>链地址法 (sepearate chaining)</strong> 和 <strong>开放寻址法 (open addressing)</strong></p><h4 id="2-4-1-链地址法-分离链表">2.4.1 链地址法/分离链表</h4><p><strong>链地址法（sepearate chaining）</strong>：在桶数组中的每个位置建立一个二级容器，存储所有映射到该位置的键值对，此容器通常为数组或链表。</p><ul><li>链地址法实现简单，但需要额外的空间</li></ul><p>例如下面直观的例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744204591880.png" alt="链地址法"></p><h4 id="2-4-2-开放寻址法">2.4.2 开放寻址法</h4><p>链地址法需要占用额外空间存储链，所以开放寻址法成为了一个替代方法。**开放寻址法（open addressing）**直接将键值对存储在对应索引处，并采取更复杂的机制处理冲突。</p><ul><li>开放寻址法需要哈希表长度 N 始终大于所需存储的键值对数目 n</li><li>冲突发生时，当前键值对的位置已被另一个键值对占据，则根据某种规则探测下一个位置尝试进行插入，而探测的方法有：<strong>线性探测法</strong>、<strong>二次探测法</strong>、<strong>双重哈希法</strong>。</li></ul><h5 id="线性探测法">线性探测法</h5><p>**线性探测法（linear probing）：**冲突发生时，尝试将新键值对插入紧邻的下一个位置。</p><p>例如：不断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi><mo>+</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>N</mi><mo separator="true">,</mo><mtext> </mtext><mi>j</mi><mo>+</mo><mn>2</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>N</mi><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo></mrow><annotation encoding="application/x-tex">j+1\mod N,\ j+2\mod N,\ \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744204839541.png" alt="线性探测"></p><p><strong>可能存在的问题</strong>：</p><ul><li>倾向于将键值对集中连续地存储，很大程度上影响搜索效率。</li><li>冲突时，因为查找和插入会不断向后直到遇到 <code>None</code> ，所以删除元素时不可以简单置空，可以填充一个特殊的对象，例如自定义一个对象 <code>AVAIL</code> 用作删除时填充。同样的，下次插入时 <code>AVAIL</code> 是可插入位置。具体实现可见后文的 Python 实现。</li></ul><p><strong>总结：</strong></p><p>查找操作 <code>get(k)</code> ：从索引 h(k) 处开始探测连续探测下一个位置，直到发生以下某种情况</p><ul><li>找到一个键为 k 的键值对</li><li>找到一个未存储键值对的空位置</li><li>遍历 N 个位置后未出现以上两种情况</li></ul><p>删除操作 <code>remove(k)</code> ：</p><ul><li>使用查找操作 <code>get(k)</code> 寻找键为 k 的元素</li><li>如果找到这样的元素 (k, v) ，则将其替换为 AVAIL ，并返回 v</li><li>否则，返回 None</li></ul><p>插入操作 <code>set(k)</code>：从索引 h(k) 处开始探测，连续探测下一个位置，直到发生以下情况</p><ul><li>找到一个空位置或存储着 AVAIL 的位置。如成功找到插入位置，则将键值对 (k, v) 存在此处。</li><li>遍历 N 个位置后未出现以上情况，插入不成功</li></ul><h5 id="二次探测法">二次探测法</h5><p><strong>二次探测法（quadratic probing）</strong>：冲突发生时，尝试依次探测以下位置，直到发现一个空位置：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mtext> </mtext><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">]</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>N</mi><mo separator="true">,</mo><mspace width="1em"/><mi>i</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mn>2</mn><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo></mrow><annotation encoding="application/x-tex">[\ h(k) + f(i)\ ] \mod N,\quad i = 0,\ 1,\ 2,\ \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mspace"> </span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace"> </span><span class="mclose">]</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> 为哈希码，对与线性探索 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">f(i) = i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 但对于二次探索则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>i</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">f(i) = i^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 。</p><h5 id="双重哈希法">双重哈希法</h5><p><strong>双重哈希法（double hashing）</strong>：使用第二个哈希函数 h’(k) 确定下一个探测的位置。具体来说，冲突发生时，依次探索以下位置，直到发现一个空位置：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><mi>i</mi><mo>⋅</mo><msup><mi>h</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>N</mi><mo separator="true">,</mo><mspace width="1em"/><mi>i</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mn>2</mn><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo></mrow><annotation encoding="application/x-tex">h(k) + i\cdot h&#x27;(k) \mod N,\quad i = 0,\ 1,\ 2,\ \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span></span></p><p>第二个哈希函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>h</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">h&#x27;(k) \neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 以避免原地寻找。哈希表的长度 N 应保证为质数，以使得所有位置都可被探测到。</p><p>常用的第二个哈希函数 h’(k) 为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>h</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>q</mi><mo>−</mo><mo stretchy="false">(</mo><mi>k</mi><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h&#x27;(k) = q - (k \mod q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span></span></p><p>其中 q &lt; N 且为质数。</p><h3 id="2-5-负载因子、重新哈希和效率">2.5 负载因子、重新哈希和效率</h3><h4 id="2-5-1-负载因子">2.5.1 负载因子</h4><p>对需要存放 n 个元素且长为 N 的哈希表，定义其**负载因子（load factor）**为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>λ</mi><mo>=</mo><mfrac><mi>n</mi><mi>N</mi></mfrac></mrow><annotation encoding="application/x-tex">\lambda = \frac{n}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>若 𝜆 为 <strong>O(1)</strong> ，则哈希表的核心操作时间复杂度也为 <strong>O(1)</strong> 。𝜆 应选择较小的常数，最好不大于 1 。</p><ul><li>对于链地址法，冲突发生后找到目标键的时间与链的长度成正比；𝜆 接近 1 时，冲突发生的概率急剧上升。一般来说，建议将链地址法的负载因子控制在 𝜆 &lt; 0.9 。</li><li>当 N 为质数，且负载因子小于 0.5 时，二次探测能保证找到一个空位置。</li><li>随着负载因子 𝜆 增长到 0.5 以上并向 1 逼近时，开放寻址法下桶数组中元素的集群开始增加，这使得各探测策略均需花费较长时间寻找空位置。</li></ul><p>**结论：**实验表明，对于线性探测法，应保持 𝜆 &lt; 0.5，对其他探测法负载因子可略高（Python实现的开放寻址法规定 𝜆 &lt; 2/3）。</p><h4 id="2-5-2-重新哈希">2.5.2 重新哈希</h4><p>当对哈希表的插入操作导致负载因子超过给定阈值时，需要调整哈希表的大小并将所有对象重新插入新的哈希表，这被称为<strong>重新哈希（rehashing）</strong></p><ul><li>不需要重新定义哈希码，但需要基于新哈希表重新设计一个压缩函数</li><li>新哈希表大小通常约为原表大小的 2 倍</li><li>建立新哈希表的时间被摊销到所有插入操作上</li></ul><h4 id="2-5-3-哈希表的效率">2.5.3 哈希表的效率</h4><p><strong>哈希表的时间复杂度：</strong></p><ul><li><p>最坏情况下，哈希表的查找、插入和删除操作均需花费 <strong>O(n)</strong> 的时间。</p></li><li><p>平均情况下，哈希表的查找、插入和删除操作仅需花费 <strong>O(1)</strong> 的时间。</p></li></ul><p><strong>负载因子 𝜆 对哈希表的效率有很大的影响：</strong></p><ul><li><p>假设哈希值的分布是随机的，则在开放寻址法下，期望的探测次数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>λ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{1-\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。</p></li><li><p>在实践中，当负载因子 𝜆 显著小于1时，哈希表的速度非常快</p></li></ul><p><strong>哈希表的应用：</strong></p><ul><li>小型数据库</li><li>编译器</li><li>浏览器缓存</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744206564848.png" alt="哈希表实现映射与列表实现映射的性能比较"></p><h2 id="3-Python-实现哈希表">3 Python 实现哈希表</h2><p>在这部分，根据前面的知识，实现两种哈希表，一种使用<strong>链地址法</strong>，而另一种使用<strong>线性探测的开放寻址</strong>。</p><h3 id="3-1-哈希表基类">3.1 哈希表基类</h3><p>扩展 <code>MapBase</code> 类来定义一个新的哈希表基类 <code>HashMapBase</code> 类。HashMapBase 类主要的设计元素是：</p><ul><li>桶数组由一个 Python 列表表示，名为 <code>self._table</code> ，并且所有的条目初始为 None 。</li><li><code>self._n</code> 的实例变量用来表示当前存储在哈希表中不同元组的个数。</li><li>如果表格的负载因子 <code>n / N</code> 增加到超过 0.5 ，我们会将哈希表的大小扩大 2 倍并且将所有元组重新哈希到新的表中。</li><li>我们定义一个<code>_hash_</code> 方法，该方法依靠 Python 内置哈希函数 <code>hash()</code> 来生成键的哈希码，并用 <code>MAD</code> 公式生成压缩函数。</li></ul><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> .map_base <span class="keyword">import</span> MapBase</span><br><span class="line">    <span class="keyword">from</span> .unsorted_table_map <span class="keyword">import</span> UnsortedTableMap</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> map_base <span class="keyword">import</span> MapBase</span><br><span class="line">    <span class="keyword">from</span> unsorted_table_map <span class="keyword">import</span> UnsortedTableMap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapBase</span>(<span class="title class_ inherited__">MapBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;哈希表基础抽象类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cap=<span class="number">11</span>, p=<span class="number">109345121</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空哈希表</span></span><br><span class="line"><span class="string">        :param cap: 初始表可存储的大小，非实际大小</span></span><br><span class="line"><span class="string">        :param p: 一个充分大的质数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._table = cap * [<span class="literal">None</span>]  <span class="comment"># 可存储空间大小</span></span><br><span class="line">        <span class="variable language_">self</span>._n = <span class="number">0</span>  <span class="comment"># 哈希表内存储的键值对个数</span></span><br><span class="line">        <span class="variable language_">self</span>._prime = p  <span class="comment"># MAD: ax+b mod p 的 p 一个充分大的质数</span></span><br><span class="line">        <span class="variable language_">self</span>._scale = <span class="number">1</span> + randrange(p - <span class="number">1</span>)  <span class="comment"># MAD: ax+b mod p 的 a</span></span><br><span class="line">        <span class="variable language_">self</span>._shift = randrange(p)  <span class="comment"># MAD: ax+b mod p 的 b</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_hash_function</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;自定义哈希函数 MAD 方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># (ax+b mod p) mod N belong to [0, N-1]: N 为实际表的大小 len(_table)</span></span><br><span class="line">        mad = (<span class="built_in">hash</span>(k) * <span class="variable language_">self</span>._scale + <span class="variable language_">self</span>._shift) % <span class="variable language_">self</span>._prime</span><br><span class="line">        <span class="keyword">return</span> mad % <span class="built_in">len</span>(<span class="variable language_">self</span>._table)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;存储的键值对个数 _n &lt;= N&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据键获取值 M[k]&quot;&quot;&quot;</span></span><br><span class="line">        j = <span class="variable language_">self</span>._hash_function(k)  <span class="comment"># calculate hash</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._bucket_getitem(j, k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, k, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置/修改/新增键值对 M[k] = v&quot;&quot;&quot;</span></span><br><span class="line">        j = <span class="variable language_">self</span>._hash_function(k)  <span class="comment"># calculate hash</span></span><br><span class="line">        <span class="variable language_">self</span>._bucket_setitem(j, k, v)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否达到容量的一半，进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._n &gt; <span class="built_in">len</span>(<span class="variable language_">self</span>._table) // <span class="number">2</span>:</span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="built_in">len</span>(<span class="variable language_">self</span>._table) - <span class="number">1</span>)  <span class="comment"># 2 * len - 1 尽可能保证是质数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除元素 del M[k]&quot;&quot;&quot;</span></span><br><span class="line">        j = <span class="variable language_">self</span>._hash_function(k)  <span class="comment"># calculate hash</span></span><br><span class="line">        <span class="variable language_">self</span>._bucket_delitem(j, k)</span><br><span class="line">        <span class="variable language_">self</span>._n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;扩展空间&quot;&quot;&quot;</span></span><br><span class="line">        old = <span class="built_in">list</span>(<span class="variable language_">self</span>.items())  <span class="comment"># 继承自 MutableMapping 类</span></span><br><span class="line">        <span class="variable language_">self</span>._table = c * [<span class="literal">None</span>]  <span class="comment"># 扩容至 c</span></span><br><span class="line">        <span class="variable language_">self</span>._n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (k, v) <span class="keyword">in</span> old:</span><br><span class="line">            <span class="variable language_">self</span>[k] = v  <span class="comment"># 利用已经定义的 __setitem__</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_getitem</span>(<span class="params">self, j, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取桶数组元素，由子类定义&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_setitem</span>(<span class="params">self, j, k, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;修改桶数组元素，由子类定义&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_delitem</span>(<span class="params">self, j, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除桶数组元素，由子类定义&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器的方式返回键值，由子类定义&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在我们的设计中，<code>HashMapBase</code> 类假定有以下抽象方法，且每一个方法必须<strong>在具体子类中实现</strong>：</p><ul><li><code>_bucket_getitem(i, k)</code> ：这个方法在桶 j 中搜索查找键为 k 的元组，如果找到了则返回对应的值，如果找不到则抛出 KeyError 。</li><li><code>_bucket_setitem(i, k, v)</code> ：这个方法将桶 j 中键 k 的值修改为 v 。如键 k 的值已经存在，则新的值覆盖已经存在的值。否则，将这个新元组插入桶中，并且这个方法负责增加 self._n 的值。</li><li><code>_bucket_delitem(i, k)</code> ：这个方法删除桶 j 中键为 k 的元组，如果这样的元组不存在则抛出 KeyError 异常（在这个方法之后 self._n 的值会减小）。</li><li><code>__iter__</code> ：迭代器的方式遍历所有键。</li></ul><h3 id="3-2-链地址法-分离链表">3.2 链地址法/分离链表</h3><p><code>ChainHashMap</code> 类的形式实现链地址法的哈希表。它采用 <code>UnsortedTableMap</code> 类的一个实例来表示单个的桶。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ChainHashMap</span>(<span class="title class_ inherited__">HashMapBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用链址法实习哈希表&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 不需初始化，只需要实现 HashMapBase 未实现的方法 ----------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_getitem</span>(<span class="params">self, j, k</span>):</span><br><span class="line">        bucket = <span class="variable language_">self</span>._table[j]</span><br><span class="line">        <span class="keyword">if</span> bucket <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">&#x27;Key Error&#x27;</span> + <span class="built_in">repr</span>(k))  <span class="comment"># 没有匹配到 k</span></span><br><span class="line">        <span class="keyword">return</span> bucket[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_setitem</span>(<span class="params">self, j, k, v</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._table[j] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>._table[j] = UnsortedTableMap()  <span class="comment"># 用 UnsortedTableMap 实例作为新桶</span></span><br><span class="line"></span><br><span class="line">        oldsize = <span class="built_in">len</span>(<span class="variable language_">self</span>._table[j])  <span class="comment"># 记录 j 位置的原始长度</span></span><br><span class="line">        <span class="comment"># _table[j] 是 UnsortedTableMap 实例，此处调用它的 __getitem__ 方法</span></span><br><span class="line">        <span class="variable language_">self</span>._table[j][k] = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._table[j]) &gt; oldsize:  <span class="comment"># 添加成功</span></span><br><span class="line">            <span class="variable language_">self</span>._n += <span class="number">1</span>  <span class="comment"># 键值对数目加一</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_delitem</span>(<span class="params">self, j, k</span>):</span><br><span class="line">        bucket = <span class="variable language_">self</span>._table[j]</span><br><span class="line">        <span class="keyword">if</span> bucket <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">&#x27;Key Error&#x27;</span> + <span class="built_in">repr</span>(k))</span><br><span class="line">        <span class="keyword">del</span> bucket[k]  <span class="comment"># 使用 UnsortedTableMap 的 __delitem__ 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> bucket <span class="keyword">in</span> <span class="variable language_">self</span>._table:</span><br><span class="line">            <span class="keyword">if</span> bucket <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 使用 UnsortedTableMap 的 __iter__ 方法</span></span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> bucket:</span><br><span class="line">                    <span class="keyword">yield</span> key</span><br></pre></td></tr></table></figure><p>测试：注意到，不同于 <code>UnsortedTableMap</code> 非有序列表实现的映射（使用逐个检索列表的 key 从而找到元素值）。这里的哈希表采用了先计算 hash 值，再寻找键值对的位置，所以顺序由键 <code>key</code> 和哈希函数决定。速度也非常的快，平均意义上的 <strong>O(1)</strong> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    chain_hash_map = ChainHashMap()</span><br><span class="line">    chain_hash_map[<span class="string">&#x27;A&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    chain_hash_map[<span class="string">&#x27;B&#x27;</span>] = <span class="number">2</span></span><br><span class="line">    chain_hash_map[<span class="string">&#x27;C&#x27;</span>] = <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> chain_hash_map:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key: &#123;&#125;, value: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(key, chain_hash_map[key]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># key: B, value: 2</span></span><br><span class="line"><span class="comment"># key: A, value: 1</span></span><br><span class="line"><span class="comment"># key: C, value: 3</span></span><br></pre></td></tr></table></figure><h3 id="3-3-开放寻址法的线性探测法">3.3 开放寻址法的线性探测法</h3><p>使用<strong>线性探测的开放寻址</strong>实现 <code>ProbeHashMap</code> 类。为了支持删除操作，我们使用了在已被删除的表的位置上做一个特殊的标记（声明一个类级的属性 <code>_AVAIL</code> ），以此来将它和一个空 <code>None</code> 的位置区分开来。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProbeHashMap</span>(<span class="title class_ inherited__">HashMapBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;线性探测的开放寻址法实现的哈希表&quot;&quot;&quot;</span></span><br><span class="line">    _AVAIL = <span class="built_in">object</span>()  <span class="comment"># 哨兵对象，用来标记区分与空位置 None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_available</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断 j (对_table 而言的索引) 位置是否可以插入&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._table[j] <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="variable language_">self</span>._table[j] <span class="keyword">is</span> ProbeHashMap._AVAIL</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_slot</span>(<span class="params">self, j, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在桶/索引 j 中搜寻含义键 k 的元组&quot;&quot;&quot;</span></span><br><span class="line">        firstAvail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._is_available(j):  <span class="comment"># 如果可以插入: _table[j] 是 None 或 _AVAIL</span></span><br><span class="line">                <span class="keyword">if</span> firstAvail <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    firstAvail = j  <span class="comment"># 记录可以插入的桶/索引</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>._table[j] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> (<span class="literal">False</span>, firstAvail)  <span class="comment"># 没有找到匹配的 k -&gt; False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> k == <span class="variable language_">self</span>._table[j]._key:  <span class="comment"># 找到匹配的 k -&gt; True</span></span><br><span class="line">                <span class="keyword">return</span> (<span class="literal">True</span>, j)  <span class="comment"># 并且返回此处的索引</span></span><br><span class="line"></span><br><span class="line">            j = (j + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._table)  <span class="comment"># 向后探索</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_getitem</span>(<span class="params">self, j, k</span>):</span><br><span class="line">        found, idx = <span class="variable language_">self</span>._find_slot(j, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:  <span class="comment"># 没找到匹配的 k</span></span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">&#x27;Key Error&#x27;</span> + <span class="built_in">repr</span>(k))</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._table[idx]._value  <span class="comment"># 找到并返回 k 对应的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_setitem</span>(<span class="params">self, j, k, v</span>):</span><br><span class="line">        found, idx = <span class="variable language_">self</span>._find_slot(j, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:  <span class="comment"># 没找到匹配的 k 则插入新元组</span></span><br><span class="line">            <span class="variable language_">self</span>._table[idx] = <span class="variable language_">self</span>._Item(k, v)</span><br><span class="line">            <span class="variable language_">self</span>._n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 否则改变值 _value</span></span><br><span class="line">            <span class="variable language_">self</span>._table[idx]._value = v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_bucket_delitem</span>(<span class="params">self, j, k</span>):</span><br><span class="line">        found, idx = <span class="variable language_">self</span>._find_slot(j, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:  <span class="comment"># 没找到匹配的 k</span></span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">&#x27;Key Error&#x27;</span> + <span class="built_in">repr</span>(k))</span><br><span class="line">        <span class="variable language_">self</span>._table[idx] = ProbeHashMap._AVAIL  <span class="comment"># 删除后特殊标记</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>._table)):  <span class="comment"># 搜索整个存储空间 _table</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._is_available(j):</span><br><span class="line">                <span class="keyword">yield</span> <span class="variable language_">self</span>._table[j]._key</span><br></pre></td></tr></table></figure><p>测试：正如前面所分析的，平均意义下查找、插入、修改、删除均是 <strong>O(1)</strong> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    probe_hash_map = ProbeHashMap()</span><br><span class="line">    probe_hash_map[<span class="string">&#x27;Avail&#x27;</span>] = <span class="number">100</span></span><br><span class="line">    probe_hash_map[<span class="string">&#x27;Bucket&#x27;</span>] = <span class="number">200</span></span><br><span class="line">    probe_hash_map[<span class="string">&#x27;Capacity&#x27;</span>] = <span class="number">300</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> probe_hash_map:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;key: &#123;&#125;, value: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(key, probe_hash_map[key]))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># key: Avail, value: 100</span></span><br><span class="line"><span class="comment"># key: Bucket, value: 200</span></span><br><span class="line"><span class="comment"># key: Capacity, value: 300</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计软件 R 语言学习笔记 (8) 估计与假设检验 t.test 与 cor.test</title>
      <link href="/posts/45dbb3de.html"/>
      <url>/posts/45dbb3de.html</url>
      
        <content type="html"><![CDATA[<h1>统计推断：估计与假设检验 t.test 与 cor.test</h1><p>利用观测样本对总体参数的：点估计、区间估计与假设检验。</p><h2 id="1-统计推断的基本概念">1 统计推断的基本概念</h2><h3 id="1-1-点估计">1.1 点估计</h3><h4 id="1-1-1-估计">1.1.1 估计</h4><p>用于估计的统计量称为<strong>估计量（estimator）</strong>；如果样本已经得到，把数据带入之后，估计量就有了一个数值，称为该估计量的一个<strong>实现（realization）或取值</strong>，也称为一个<strong>估计值（estimate）</strong>。</p><h4 id="1-1-2-抽样分布">1.1.2 抽样分布</h4><p>由于一个统计量对于不同的样本取值不同。所以，估计量也是随机变量，并有其分布，称为：<strong>抽样分布（sampling distribution）</strong>—— 从总体中选取的固定样本量所对应的样本统计量（例如样本均值）的可能值的分布，该分布来源于不同的样本。</p><h4 id="1-1-3-无偏估计">1.1.3 无偏估计</h4><p><strong>无偏估计</strong> ：来自不同样本的平均估计量等于真实参数</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mover accent="true"><mi>θ</mi><mo>^</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">E(\hat{\theta}) = \theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2079em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>θ</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{\theta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9579em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 为总体参数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> 的估计。</p><p>样本均值和样本方差的无偏性：</p><ul><li>样本均值对于总体均值是无偏的：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo>ˉ</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mi>μ</mi></mrow><annotation encoding="application/x-tex">E(\bar{X}) = \mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0701em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></li><li>样本方差对于总体方差是无偏的：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><msup><mi>S</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>=</mo><msup><mi>σ</mi><mn>2</mn></msup><mo separator="true">,</mo><mspace width="1em"/><msup><mi>S</mi><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>X</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E(S^2) = \sigma^2,\quad S^2 = \frac{1}{n-1}\sum\limits_{i=1}^n\ (X_i - \bar{X})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0701em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li></ul><h4 id="1-1-4-标准误差">1.1.4 标准误差</h4><p>点估计的标准误差：该抽样分布的标准差。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>D</mi><mo stretchy="false">(</mo><mover accent="true"><mi>θ</mi><mo>^</mo></mover><mo stretchy="false">)</mo><mo>=</mo><msqrt><msup><mi>S</mi><mn>2</mn></msup></msqrt></mrow><annotation encoding="application/x-tex">SD(\hat{\theta}) = \sqrt{S^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2079em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.0361em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0039em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9639em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0361em;"><span></span></span></span></span></span></span></span></span></span></p><p>样本均值的标准误差：</p><ul><li><p>它衡量了点估计量在不同样本之间的变动程度。样本均值的标准差为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>D</mi><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo>ˉ</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>σ</mi><msqrt><mi>n</mi></msqrt></mfrac><mo>≈</mo><mfrac><mi>s</mi><msqrt><mi>n</mi></msqrt></mfrac></mrow><annotation encoding="application/x-tex">SD(\bar{X}) = \frac{\sigma}{\sqrt{n}} \approx \frac{s}{\sqrt{n}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0701em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2334em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.6259em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8059em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-2.7659em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2341em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2334em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.6259em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8059em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-2.7659em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2341em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>样本量 n 越大，标准误差越小。这意味着增大样本量 n 可能会提高样本均值的稳定性。</p></li></ul><h3 id="1-2-区间估计">1.2 区间估计</h3><h4 id="1-2-1-概念">1.2.1 概念</h4><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">1 - \alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> 置信区间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>c</mi><mn>2</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[c_1,\ c_2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 代表了真值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> 落入区间的概率为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">1 - \alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> 。</p><p>例如常见的区间估计：对于样本均值的置信区间</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>−</mo><msub><mi>t</mi><mrow><mi>α</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>⋅</mo><mfrac><mi>s</mi><msqrt><mi>n</mi></msqrt></mfrac><mo separator="true">,</mo><mtext> </mtext><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>+</mo><msub><mi>t</mi><mrow><mi>α</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>⋅</mo><mfrac><mi>s</mi><msqrt><mi>n</mi></msqrt></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[\bar{x} - t_{\alpha/2}(n-1)\cdot \frac{s}{\sqrt{n}},\ \bar{x} + t_{\alpha/2}(n-1)\cdot \frac{s}{\sqrt{n}}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0376em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0376em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>α</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{\alpha/2}(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mord mtight">/2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 为自由度为 n - 1 的 t 分布的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">\alpha/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">/2</span></span></span></span> 分位数点。</p><h4 id="1-2-2-R-语言模拟">1.2.2 R 语言模拟</h4><p>对于一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>95</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">95\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">95%</span></span></span></span> 的置信区间，代表不断重复抽取（样本量相同的）样本时，产生的大量区间估计，这些区间大约有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>95</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">95\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">95%</span></span></span></span> 会覆盖真正的参数。</p><p>**求解置信区间：**求解对样本均值的区间估计的函数 <code>takeCI</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">takeCI <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>x<span class="punctuation">,</span> beta <span class="operator">=</span> <span class="number">0.95</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    n <span class="operator">&lt;-</span> <span class="built_in">length</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">    alpha <span class="operator">&lt;-</span> 1 <span class="operator">-</span> beta</span><br><span class="line"></span><br><span class="line">    <span class="built_in">c</span> <span class="operator">&lt;-</span> qt<span class="punctuation">(</span>p <span class="operator">=</span> alpha <span class="operator">/</span> <span class="number">2</span><span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> df <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">    xbar <span class="operator">&lt;-</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">    l <span class="operator">&lt;-</span> <span class="built_in">c</span> <span class="operator">*</span> sd<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="operator">/</span> <span class="built_in">sqrt</span><span class="punctuation">(</span>n<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">    left <span class="operator">&lt;-</span> xbar <span class="operator">-</span> l</span><br><span class="line">    right <span class="operator">&lt;-</span> xbar <span class="operator">+</span> l</span><br><span class="line"></span><br><span class="line">    res <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span>left <span class="operator">=</span> left<span class="punctuation">,</span> right <span class="operator">=</span> right<span class="punctuation">)</span></span><br><span class="line">    <span class="built_in">return</span><span class="punctuation">(</span>res<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>**模拟一次：**例如从标准正态中抽样，然后对均值进行区间估计</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span>n <span class="operator">=</span> <span class="number">20</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span>  <span class="comment"># 抽样 20 个</span></span><br><span class="line"><span class="operator">&gt;</span> takeCI<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">       left       right </span><br><span class="line"><span class="operator">-</span><span class="number">0.69806027</span>  <span class="number">0.09131091</span> </span><br></pre></td></tr></table></figure><blockquote><p>【注意】根据单独一个样本集合估计的到的区间不一定包含真实值。</p></blockquote><p>**模拟多次：**重复模拟，并记录包含真实总体均值的频率，注意到大致等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>95</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">95\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">95%</span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟 N 次</span></span><br><span class="line">auc <span class="operator">&lt;-</span> 0</span><br><span class="line">N <span class="operator">&lt;-</span> 1000</span><br><span class="line">sample_size <span class="operator">&lt;-</span> 20</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span>N<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    x <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span>n <span class="operator">=</span> sample_size<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">    ci <span class="operator">&lt;-</span> takeCI<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>ci<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> ci<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span> <span class="operator">&gt;</span> <span class="number">0</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        auc <span class="operator">&lt;-</span> auc <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">coverage_rate <span class="operator">&lt;-</span> auc <span class="operator">/</span> N  <span class="comment"># 0.961</span></span><br></pre></td></tr></table></figure><h3 id="1-3-假设检验">1.3 假设检验</h3><h4 id="1-3-1-概念">1.3.1 概念</h4><p>对于参数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> 的估计为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>θ</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{\theta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9579em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9579em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">^</span></span></span></span></span></span></span></span></span></span> 的参数空间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Θ</span></span></span></span> ，而原假设为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>∈</mo><msub><mi mathvariant="normal">Θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta \in \Theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">Θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 于是假设检验为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>θ</mi><mo>∈</mo><msub><mi mathvariant="normal">Θ</mi><mn>0</mn></msub><mo separator="true">,</mo><mspace width="1em"/><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>θ</mi><mo mathvariant="normal">∉</mo><msub><mi mathvariant="normal">Θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \theta \in \Theta_0,\quad H_1: \theta \notin \Theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">Θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.0556em;"></span></span></span><span class="fix"></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord">Θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>通过检验统计量判断是否异常，若满足拒绝域，则拒绝原假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>例如：对于样本均值的估计为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>X</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8201em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span></span> ，原假设为认为总体均值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi><mo>≥</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\mu \geq \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为常数。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>μ</mi><mo>≥</mo><msub><mi>μ</mi><mn>0</mn></msub><mo separator="true">,</mo><mspace width="1em"/><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>μ</mi><mo>&lt;</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \mu \geq \mu_0,\quad H_1:  \mu &lt; \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>更简单的方式，直接查看 p 值，当</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>≤</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">p \leq \alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span></p><p>即 p 值小于显著性水平，则拒绝原假设。</p><h4 id="1-3-2-R-语言模拟">1.3.2 R 语言模拟</h4><p>假设检验：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>μ</mi><mo>≥</mo><msub><mi>μ</mi><mn>0</mn></msub><mo separator="true">,</mo><mspace width="1em"/><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>μ</mi><mo>&lt;</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \mu \geq \mu_0,\quad H_1:  \mu &lt; \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>的拒绝域为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mi>c</mi></msub><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>:</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mi>c</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">W_c = \{ (x_1,\ x_2,\ \cdots,\ x_n): \bar{x} = \frac{1}{n}\sum\limits_{i=1}^n\ x_i \geq c \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5678em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mclose">}</span></span></span></span></span></p><p>势函数为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>G</mi><mi>W</mi></msub><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">{</mo><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>∈</mo><mi>W</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">G_W(F) = P\{ (X_1,\ X_2,\ \cdots,\ X_n) \in W \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">{(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">}</span></span></span></span></span></p><p>对于这个例子：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>G</mi><mi>c</mi></msub><mo stretchy="false">(</mo><mi>μ</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>P</mi><mi>μ</mi></msub><mo stretchy="false">{</mo><mo stretchy="false">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>X</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>∈</mo><msub><mi>W</mi><mi>c</mi></msub><mo stretchy="false">}</mo><mo>=</mo><msub><mi>P</mi><mi>μ</mi></msub><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo>ˉ</mo></mover><mo>≥</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>P</mi><mi>μ</mi></msub><mo stretchy="false">(</mo><mfrac><mrow><mover accent="true"><mi>X</mi><mo>ˉ</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mrow><mi>s</mi><mi mathvariant="normal">/</mi><msqrt><mi>n</mi></msqrt></mrow></mfrac><mo>≥</mo><mfrac><mrow><mi>c</mi><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mrow><mi>s</mi><mi mathvariant="normal">/</mi><msqrt><mi>n</mi></msqrt></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G_c(\mu) = P_{\mu}\{ (X_1,\ X_2,\ \cdots,\ X_n) \in W_c \} = P_{\mu}(\bar{X}\geq c) = P_{\mu}(\frac{\bar{X} - \mu_0}{s/\sqrt{n}} \geq \frac{c - \mu_0}{s/\sqrt{n}} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">μ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">μ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">{(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1062em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">μ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4374em;vertical-align:-0.9403em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">μ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4971em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1667em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9403em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2006em;vertical-align:-0.9403em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord">/</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9403em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单侧 t 检验</span></span><br><span class="line">alpha <span class="operator">&lt;-</span> 0.05</span><br><span class="line">n <span class="operator">&lt;-</span> 100</span><br><span class="line">N <span class="operator">&lt;-</span> 1000</span><br><span class="line">t_list <span class="operator">&lt;-</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span>N<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    y <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span>n<span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">    t <span class="operator">&lt;-</span> <span class="punctuation">(</span>mean<span class="punctuation">(</span>y<span class="punctuation">)</span> <span class="operator">-</span> <span class="number">0</span><span class="punctuation">)</span> <span class="operator">/</span> <span class="punctuation">(</span>sd<span class="punctuation">(</span>y<span class="punctuation">)</span> <span class="operator">/</span> <span class="built_in">sqrt</span><span class="punctuation">(</span>n<span class="punctuation">)</span><span class="punctuation">)</span> <span class="comment"># t 检验量</span></span><br><span class="line">    t_list <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span>t_list<span class="punctuation">,</span> t<span class="punctuation">)</span> <span class="comment"># t 检验量加入 t_list</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">c</span> <span class="operator">&lt;-</span> qt<span class="punctuation">(</span>alpha<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> df <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>t_list <span class="operator">&lt;=</span> <span class="built_in">c</span><span class="punctuation">)</span> <span class="operator">/</span> N  <span class="comment"># N 个样本拒绝的次数 / 总模拟次数</span></span><br><span class="line"><span class="comment"># 0.948</span></span><br></pre></td></tr></table></figure><p>对于第 <code>I</code> 类错误，控制在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> 的 R 语言模拟验证：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制第 I 类错误：H0 对但拒绝</span></span><br><span class="line">alpha <span class="operator">&lt;-</span> 0.05</span><br><span class="line">n <span class="operator">&lt;-</span> 100</span><br><span class="line">N <span class="operator">&lt;-</span> 1000</span><br><span class="line">p_t_list <span class="operator">&lt;-</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span>N<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    y <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span>n<span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">    t <span class="operator">&lt;-</span> <span class="punctuation">(</span>mean<span class="punctuation">(</span>y<span class="punctuation">)</span> <span class="operator">-</span> <span class="number">0</span><span class="punctuation">)</span> <span class="operator">/</span> <span class="punctuation">(</span>sd<span class="punctuation">(</span>y<span class="punctuation">)</span> <span class="operator">/</span> <span class="built_in">sqrt</span><span class="punctuation">(</span>n<span class="punctuation">)</span><span class="punctuation">)</span> <span class="comment"># t 检验量</span></span><br><span class="line">    p_t <span class="operator">&lt;-</span> pt<span class="punctuation">(</span>t<span class="punctuation">,</span> df <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span><span class="punctuation">)</span> <span class="comment"># P(X &lt; t) = p_t, X ~ t(n-1) 这个问题的 p 值</span></span><br><span class="line">    p_t_list <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span>p_t_list<span class="punctuation">,</span> p_t<span class="punctuation">)</span> <span class="comment"># t 检验量分位数对应的 t(n-1) 分布概率加入 t_list</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">sum</span><span class="punctuation">(</span>p_t_list <span class="operator">&lt;=</span> alpha<span class="punctuation">)</span> <span class="operator">/</span> N <span class="comment"># 犯第 I 类错误</span></span><br><span class="line"><span class="comment"># 0.058</span></span><br></pre></td></tr></table></figure><blockquote><p>p 值是统计量，且满足均匀分布 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">U[0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p></blockquote><h2 id="2-常见的统计推断">2 常见的统计推断</h2><h3 id="2-1-正态总体均值">2.1 正态总体均值</h3><p>第一步验证模型假设，例如使用 Q-Q 图验证是否近似正态。</p><h4 id="2-1-1-t-test-检验函数">2.1.1 t.test() 检验函数</h4><p><strong>t-检验：</strong> <code>t.test()</code> 提供了正态总体均值的 t。检验方法。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t.test<span class="punctuation">(</span>x<span class="punctuation">,</span> y <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span></span><br><span class="line">       alternative <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;two.sided&quot;</span><span class="punctuation">,</span> <span class="string">&quot;less&quot;</span><span class="punctuation">,</span> <span class="string">&quot;greater&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">       mu <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> paired <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> var.equal <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">       conf.level <span class="operator">=</span> <span class="number">0.95</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x<span class="punctuation">,</span> y<span class="operator">:</span> 可以单样本也可以两样本</span><br><span class="line">alternative<span class="operator">:</span> 方向，单侧 <span class="string">&quot;less&quot;</span><span class="punctuation">,</span> <span class="string">&quot;greater&quot;</span> 或是双侧 <span class="string">&quot;two.sided&quot;</span> 与备择假设同向</span><br><span class="line">mu <span class="operator">=</span> <span class="number">0</span><span class="operator">:</span> 检验均值的 mu_0 ，默认 <span class="number">0</span></span><br><span class="line">conf.level <span class="operator">=</span> <span class="number">0.95</span><span class="operator">:</span> 置信水平</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">159</span><span class="punctuation">,</span> <span class="number">280</span><span class="punctuation">,</span> <span class="number">101</span><span class="punctuation">,</span> <span class="number">212</span><span class="punctuation">,</span> <span class="number">224</span><span class="punctuation">,</span> <span class="number">379</span><span class="punctuation">,</span> <span class="number">179</span><span class="punctuation">,</span> <span class="number">264</span><span class="punctuation">,</span> <span class="number">222</span><span class="punctuation">,</span> <span class="number">362</span><span class="punctuation">,</span> <span class="number">168</span><span class="punctuation">,</span> <span class="number">250</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">260</span><span class="punctuation">,</span> <span class="number">485</span><span class="punctuation">,</span> <span class="number">170</span><span class="punctuation">)</span></span><br><span class="line">t.test<span class="punctuation">(</span>X<span class="punctuation">,</span> alternative <span class="operator">=</span> <span class="string">&quot;greater&quot;</span><span class="punctuation">,</span> mu <span class="operator">=</span> <span class="number">225</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        One Sample t<span class="operator">-</span>test</span><br><span class="line"></span><br><span class="line">data<span class="operator">:</span>  X</span><br><span class="line">t <span class="operator">=</span> <span class="number">0.66852</span><span class="punctuation">,</span> df <span class="operator">=</span> <span class="number">15</span><span class="punctuation">,</span> p<span class="operator">-</span>value <span class="operator">=</span> <span class="number">0.257</span></span><br><span class="line">alternative hypothesis<span class="operator">:</span> true mean is greater than <span class="number">225</span></span><br><span class="line"><span class="number">95</span> percent confidence interval<span class="operator">:</span></span><br><span class="line"> <span class="number">198.2321</span>      <span class="literal">Inf</span></span><br><span class="line">sample estimates<span class="operator">:</span></span><br><span class="line">mean of x </span><br><span class="line">    <span class="number">241.5</span> </span><br></pre></td></tr></table></figure><p>T 检验量的值 <code>t = 0.66852</code></p><p>df 自由度 <code>n - 1 = 15</code></p><p>p-value <code>p-value = 0.257</code> 所以拒绝 <code>true mean is greater than 225</code></p><p><code>95%</code> 置信区间 <code>[198.2321, Inf]</code></p><h4 id="2-1-2-两样本均值差的推断">2.1.2 两样本均值差的推断</h4><p>对于两个独立同分布的样本</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>X</mi><mi>n</mi></msub><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mn>1</mn></msub><mo separator="true">,</mo><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X_1,\ X_2,\ \cdots,\ X_n \sim N(\mu_1, \sigma_1^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>Y</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>Y</mi><mi>n</mi></msub><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mn>2</mn></msub><mo separator="true">,</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y_1,\ Y_2,\ \cdots,\ Y_n \sim N(\mu_2, \sigma_2^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>若方差相等 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>σ</mi><mn>1</mn></msub><mo>=</mo><msub><mi>σ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\sigma_1 = \sigma_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p><strong>使用 <code>t.test()</code> 函数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.test<span class="punctuation">(</span>formula<span class="punctuation">,</span> data<span class="punctuation">,</span> subset<span class="punctuation">,</span> na.action <span class="operator">=</span> na.pass<span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">formula<span class="operator">:</span> df<span class="operator">~</span><span class="built_in">class</span> 前者 df 为定量变量，后者 <span class="built_in">class</span> 为定类变量。</span><br><span class="line">data<span class="operator">:</span> 数据框</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span><span class="string">&quot;./Score.csv&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">t.test<span class="punctuation">(</span>score <span class="operator">~</span> Gender<span class="punctuation">,</span> data <span class="operator">=</span> df<span class="punctuation">)</span> <span class="comment"># 数据库 df 的 score 列按照 Gender 分类</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        Welch Two Sample t<span class="operator">-</span>test</span><br><span class="line"></span><br><span class="line">data<span class="operator">:</span>  score by Gender</span><br><span class="line">t <span class="operator">=</span> <span class="number">1.9163</span><span class="punctuation">,</span> df <span class="operator">=</span> <span class="number">97.963</span><span class="punctuation">,</span> p<span class="operator">-</span>value <span class="operator">=</span> <span class="number">0.05824</span>  <span class="comment"># df = m + n - 2</span></span><br><span class="line">alternative hypothesis<span class="operator">:</span> true difference <span class="keyword">in</span> means between group Female and group Male is not equal to <span class="number">0</span></span><br><span class="line"><span class="number">95</span> percent confidence interval<span class="operator">:</span></span><br><span class="line"> <span class="operator">-</span><span class="number">0.1422661</span>  <span class="number">8.1422661</span></span><br><span class="line">sample estimates<span class="operator">:</span></span><br><span class="line">mean <span class="keyword">in</span> group Female   mean <span class="keyword">in</span> group Male </span><br><span class="line">               <span class="number">73.12</span>                <span class="number">69.12</span> </span><br></pre></td></tr></table></figure><p><strong>检验模型近似正态：</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> df<span class="operator">$</span>score<span class="punctuation">[</span>df<span class="operator">$</span>Gender <span class="operator">==</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">]</span></span><br><span class="line">y <span class="operator">&lt;-</span> df<span class="operator">$</span>score<span class="punctuation">[</span>df<span class="operator">$</span>Gender <span class="operator">==</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">]</span></span><br><span class="line">png<span class="punctuation">(</span><span class="string">&quot;./img/qq_score.png&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">2400</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">1200</span><span class="punctuation">,</span> res <span class="operator">=</span> <span class="number">200</span><span class="punctuation">)</span></span><br><span class="line">op <span class="operator">&lt;-</span> par<span class="punctuation">(</span>mfrow <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">qqnorm<span class="punctuation">(</span>x<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">)</span></span><br><span class="line">qqline<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">qqnorm<span class="punctuation">(</span>y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">)</span></span><br><span class="line">qqline<span class="punctuation">(</span>y<span class="punctuation">)</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">par<span class="punctuation">(</span>op<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/qq_score.png" alt="qq-plot"></p><p>**检验方差：**经验直观的方法，比较 IQR</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boxplot<span class="punctuation">(</span>score <span class="operator">~</span> Gender<span class="punctuation">,</span> data <span class="operator">=</span> df<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>或者使用 <code>vat.test()</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Default S3 method:</span></span><br><span class="line">var.test<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">,</span> ratio <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">         alternative <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;two.sided&quot;</span><span class="punctuation">,</span> <span class="string">&quot;less&quot;</span><span class="punctuation">,</span> <span class="string">&quot;greater&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">         conf.level <span class="operator">=</span> <span class="number">0.95</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## S3 method for class &#x27;formula&#x27;</span></span><br><span class="line">var.test<span class="punctuation">(</span>formula<span class="punctuation">,</span> data<span class="punctuation">,</span> subset<span class="punctuation">,</span> na.action<span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var.test<span class="punctuation">(</span>score <span class="operator">~</span> Gender<span class="punctuation">,</span> data <span class="operator">=</span> df<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        <span class="built_in">F</span> test to compare two variances</span><br><span class="line"></span><br><span class="line">data<span class="operator">:</span>  score by Gender</span><br><span class="line"><span class="built_in">F</span> <span class="operator">=</span> <span class="number">1.0397</span><span class="punctuation">,</span> num df <span class="operator">=</span> <span class="number">49</span><span class="punctuation">,</span> denom df <span class="operator">=</span> <span class="number">49</span><span class="punctuation">,</span> p<span class="operator">-</span>value <span class="operator">=</span> <span class="number">0.892</span></span><br><span class="line">alternative hypothesis<span class="operator">:</span> true ratio of variances is not equal to <span class="number">1</span></span><br><span class="line"><span class="number">95</span> percent confidence interval<span class="operator">:</span></span><br><span class="line"> <span class="number">0.5900309</span> <span class="number">1.8322278</span></span><br><span class="line">sample estimates<span class="operator">:</span></span><br><span class="line">ratio of variances </span><br><span class="line">          <span class="number">1.039746</span> </span><br></pre></td></tr></table></figure><p>注意到方差不相等，则</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.test<span class="punctuation">(</span>score <span class="operator">~</span> Gender<span class="punctuation">,</span> data <span class="operator">=</span> df<span class="punctuation">,</span> var.equal <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        Welch Two Sample t<span class="operator">-</span>test</span><br><span class="line"></span><br><span class="line">data<span class="operator">:</span>  score by Gender</span><br><span class="line">t <span class="operator">=</span> <span class="number">1.9163</span><span class="punctuation">,</span> df <span class="operator">=</span> <span class="number">97.963</span><span class="punctuation">,</span> p<span class="operator">-</span>value <span class="operator">=</span> <span class="number">0.05824</span></span><br><span class="line">alternative hypothesis<span class="operator">:</span> true difference <span class="keyword">in</span> means between group Female and group Male is not equal to <span class="number">0</span></span><br><span class="line"><span class="number">95</span> percent confidence interval<span class="operator">:</span></span><br><span class="line"> <span class="operator">-</span><span class="number">0.1422661</span>  <span class="number">8.1422661</span></span><br><span class="line">sample estimates<span class="operator">:</span></span><br><span class="line">mean <span class="keyword">in</span> group Female   mean <span class="keyword">in</span> group Male </span><br><span class="line">               <span class="number">73.12</span>                <span class="number">69.12</span> </span><br></pre></td></tr></table></figure><h4 id="2-1-3-成对正态样本均值差的检验">2.1.3 成对正态样本均值差的检验</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t.test<span class="punctuation">(</span>X <span class="operator">-</span> Y<span class="punctuation">)</span></span><br><span class="line">t.test<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> paired <span class="operator">=</span> TURE<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="2-1-4-正态性检验-shapiro-test">2.1.4 正态性检验 shapiro.test()</h4><p>可以采用直观的 Q-Q 图和直方图检验，更严谨地采用 <code>shapiro.test()</code> 检验。</p><ul><li>p 值小于 0.05 ，总体不是正态</li><li>p 值大于 0.05 ，仅仅不能否认“总体是正态”</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span>n <span class="operator">=</span> <span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">shapiro.test<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        Shapiro<span class="operator">-</span>Wilk normality test</span><br><span class="line"></span><br><span class="line">data<span class="operator">:</span>  x</span><br><span class="line">W <span class="operator">=</span> <span class="number">0.98887</span><span class="punctuation">,</span> p<span class="operator">-</span>value <span class="operator">=</span> <span class="number">0.5745</span>  <span class="comment"># 不能否认 x 是正态</span></span><br></pre></td></tr></table></figure><h3 id="2-2-相关系数推断-cor-test">2.2 相关系数推断 cor.test()</h3><p>相关系数：描述了两变量 X, Y 之间数据的相关性。</p><p>三种相关系数：<code>Pearson</code> <code>Spearman</code> <code>Kendall</code> 。使用函数 <code>cor.test()</code> 进行检验：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Default S3 method:</span></span><br><span class="line">cor.test<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">,</span></span><br><span class="line">         alternative <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;two.sided&quot;</span><span class="punctuation">,</span> <span class="string">&quot;less&quot;</span><span class="punctuation">,</span> <span class="string">&quot;greater&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">         method <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;pearson&quot;</span><span class="punctuation">,</span> <span class="string">&quot;kendall&quot;</span><span class="punctuation">,</span> <span class="string">&quot;spearman&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">         exact <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> conf.level <span class="operator">=</span> <span class="number">0.95</span><span class="punctuation">,</span> continuity <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## S3 method for class &#x27;formula&#x27;</span></span><br><span class="line">cor.test<span class="punctuation">(</span>formula<span class="punctuation">,</span> data<span class="punctuation">,</span> subset<span class="punctuation">,</span> na.action<span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li><code>alternative</code> ：单侧或是双侧</li><li><code>method</code> ：选择三个相关系数之一</li><li><code>conf.level</code> ：置信水平</li></ul><p>有关 <code>alternative</code> （与备择假设同方向）：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>ρ</mi><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_1:\rho \neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>  对应 <code>alternative = c(&quot;two.sided&quot;)</code></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>ρ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_1:\rho &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 对应 <code>alternative = c(&quot;greater&quot;)</code></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>ρ</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_1:\rho &lt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 对应 <code>alternative = c(&quot;less&quot;)</code></li></ul><p>计算相关系数的函数 <code>cor()</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cor<span class="punctuation">(</span>x<span class="punctuation">,</span> y <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> use <span class="operator">=</span> <span class="string">&quot;everything&quot;</span><span class="punctuation">,</span></span><br><span class="line">    method <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;pearson&quot;</span><span class="punctuation">,</span> <span class="string">&quot;kendall&quot;</span><span class="punctuation">,</span> <span class="string">&quot;spearman&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li><code>method</code> ：选择三个相关系数之一</li><li><code>use</code> ：可选 <code>&quot;everything&quot;</code>, <code>&quot;all.obs&quot;</code>, <code>&quot;complete.obs&quot;</code>, <code>&quot;na.or.complete&quot;</code>, or <code>&quot;pairwise.complete.obs&quot;</code></li></ul><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">7.7</span><span class="punctuation">,</span> <span class="number">8.2</span><span class="punctuation">,</span> <span class="number">7.8</span><span class="punctuation">,</span> <span class="number">6.9</span><span class="punctuation">,</span> <span class="number">8.4</span><span class="punctuation">,</span> <span class="number">8.1</span><span class="punctuation">,</span> <span class="number">7.1</span><span class="punctuation">,</span> <span class="number">7.5</span><span class="punctuation">,</span> <span class="number">7.6</span><span class="punctuation">,</span> <span class="number">7.6</span><span class="punctuation">,</span> <span class="number">7.9</span><span class="punctuation">,</span> <span class="number">7.6</span><span class="punctuation">,</span> <span class="number">7.5</span><span class="punctuation">,</span> <span class="number">7.6</span><span class="punctuation">,</span> <span class="number">7.6</span><span class="punctuation">)</span></span><br><span class="line">Y <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">7.2</span><span class="punctuation">,</span> <span class="number">6.7</span><span class="punctuation">,</span> <span class="number">5.7</span><span class="punctuation">,</span> <span class="number">4.0</span><span class="punctuation">,</span> <span class="number">5.7</span><span class="punctuation">,</span> <span class="number">6.4</span><span class="punctuation">,</span> <span class="number">4.5</span><span class="punctuation">,</span> <span class="number">5.5</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">5.4</span><span class="punctuation">,</span> <span class="number">6.1</span><span class="punctuation">,</span> <span class="number">6.9</span><span class="punctuation">,</span> <span class="number">3.9</span><span class="punctuation">,</span> <span class="number">5.7</span><span class="punctuation">,</span> <span class="number">3.7</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">cor<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> use <span class="operator">=</span> <span class="string">&quot;na.or.complete&quot;</span><span class="punctuation">,</span> method <span class="operator">=</span> <span class="string">&quot;pearson&quot;</span><span class="punctuation">)</span>  <span class="comment"># 0.5801752</span></span><br><span class="line"></span><br><span class="line">cor.test<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> method <span class="operator">=</span> <span class="string">&quot;pearson&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        Pearson<span class="string">&#x27;s product-moment correlation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data:  X and Y</span></span><br><span class="line"><span class="string">t = 2.4675, df = 12, p-value = 0.02963</span></span><br><span class="line"><span class="string">alternative hypothesis: true correlation is not equal to 0</span></span><br><span class="line"><span class="string">95 percent confidence interval:</span></span><br><span class="line"><span class="string"> 0.07165242 0.84931184</span></span><br><span class="line"><span class="string">sample estimates:</span></span><br><span class="line"><span class="string">      cor </span></span><br><span class="line"><span class="string">0.5801752 </span></span><br></pre></td></tr></table></figure><blockquote><p>X, Y 存在相同数字，考虑次序的 “kendall”, “spearman” 无法给出精确值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> R 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R 语言 </tag>
            
            <tag> 统计软件 </tag>
            
            <tag> R programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（12）约束</title>
      <link href="/posts/79c2b529.html"/>
      <url>/posts/79c2b529.html</url>
      
        <content type="html"><![CDATA[<h1>约束</h1><p>SQL 对表/列有相关的约束，分别为：NOT NULL 非空约束；UNIQUE 唯一性约束；PRIMARY KEY 主键约束；FOREIGN KEY 外键约束；AUTO_INCREMENT 自增列；CHECK 检查约束；DEFAULT 默认值约束。</p><h2 id="1-约束-constraint">1 约束 constraint</h2><h3 id="1-1-对数据表约束的目的">1.1 对数据表约束的目的</h3><p>为了保证数据的完整性，SQL 规范以约束的方式对<strong>表数据进行额外的条件限制</strong>。从以下四个方面考虑：</p><ul><li>实体完整性（Entity Integrity） ：例如，同一个表中，不能存在两条完全相同无法区分的记录。</li><li>域完整性（Domain Integrity） ：例如，年龄范围 0-120，性别范围 “男/女”。</li><li>引用完整性（Referential Integrity） ：例如，员工所在部门，在部门表中要能找到这个部门。</li><li>用户自定义完整性（User-defined Integrity） ：例如：用户名唯一、密码不能为空等。</li></ul><h3 id="1-2-约束">1.2 约束</h3><p>约束是表级的强制规定。可以在<strong>创建表时规定约束（通过 CREATE TABLE 语句）</strong>，或者在<strong>表创建之后通过 ALTER TABLE 语句规定约束</strong>。</p><p>根据约束数据列的限制，约束可分为：</p><ul><li><p>单列约束：每个约束只约束一列</p></li><li><p>多列约束：每个约束可约束多列数据</p></li></ul><p>根据约束的作用范围，约束可分为：</p><ul><li><p>列级约束：只能作用在一个列上，跟在列的定义后面</p></li><li><p>表级约束：可以作用在多个列上，不与列一起，而是单独定义</p></li></ul><p>根据约束起的作用，约束可分为：</p><ul><li><code>NOT NULL</code> 非空约束，规定某个字段不能为空</li><li><code>UNIQUE</code> 唯一性约束，规定某个字段在整个表中是唯一的</li><li><code>PRIMARY KEY</code> 主键 (非空且唯一) 约束</li><li><code>FOREIGN KEY</code> 外键约束</li><li><code>CHECK</code> 检查约束</li><li><code>DEFAULT</code> 默认值约束</li></ul><blockquote><p>特别地，MySQL8.0 后开始支持 <code>CHECK</code> 约束。</p></blockquote><h3 id="1-3-SQL-查看表的约束情况">1.3 SQL 查看表的约束情况</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- information_schema 数据库名（系统库）</span></span><br><span class="line"><span class="comment">-- table_constraints 表名称（专门存储各个表的约束）</span></span><br><span class="line"></span><br><span class="line">USE 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE atguigudb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;employees&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744108676172.png" alt="数据库 atguigudb 的表 employees 的约束信息"></p><h2 id="2-NOT-NULL-非空约束">2 NOT NULL 非空约束</h2><h3 id="2-1-非空约束">2.1 非空约束</h3><p><code>NOT NULL</code> ：限定某个字段/某列的值不允许为空</p><ul><li>默认所有的类型的值都可以是 NULL</li><li>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</li><li>一个表可以有很多列都分别限定了非空</li><li>空字符串 <code>''</code> 不等于 NULL ， 0 也不等于 NULL</li></ul><h3 id="2-2-具体-SQL-实现">2.2 具体 SQL 实现</h3><h4 id="2-2-1-添加非空约束">2.2.1 添加非空约束</h4><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT NULL</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    MODIFY 字段名 数据类型 <span class="keyword">NOT NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-删除非空约束">2.2.2 删除非空约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    MODIFY 字段名 数据类型 <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    MODIFY 字段名 数据类型;</span><br></pre></td></tr></table></figure><h2 id="3-UNIQUE-唯一性约束">3 UNIQUE 唯一性约束</h2><h3 id="3-1-唯一性约束">3.1 唯一性约束</h3><p><code>UNIQUE</code> ：用来限制某个字段/某列的值不能重复。</p><ul><li>同一个表可以有多个唯一约束。</li><li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li><li>唯一性约束允许列值为空。</li><li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li><li>MySQL 会给唯一约束的列上默认创建一个唯一索引。</li></ul><h3 id="3-2-具体-SQL-实现">3.2 具体 SQL 实现</h3><h4 id="3-2-1-添加唯一性约束">3.2.1 添加唯一性约束</h4><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型 <span class="keyword">UNIQUE</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">UNIQUE</span> KEY,</span><br><span class="line">    字段名 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">UNIQUE</span> KEY (字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例如：多个字段 <code>NAME</code> <code>PASSWORD</code> 均不可重复，为数据表级别的约束。单独</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> <span class="keyword">USER</span></span><br><span class="line">(</span><br><span class="line">    id       <span class="type">INT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    NAME     <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">    PASSWORD <span class="type">VARCHAR</span>(<span class="number">16</span>),</span><br><span class="line">    <span class="comment">-- 表级约束语法</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> uk_name_pwd <span class="keyword">UNIQUE</span> (NAME, PASSWORD)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;user_unique&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744116873047.png" alt="约束名"></p><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式 1</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY (字段名列表);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式 2</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    MODIFY 字段名 字段类型 <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure><blockquote><p>字段名列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> user_unique</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (NAME, PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> user_unique</span><br><span class="line">    <span class="keyword">ADD CONSTRAINT</span> uk_name_pwd <span class="keyword">UNIQUE</span> (NAME, PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER TABLE</span> user_unique</span><br><span class="line">    MODIFY NAME <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-复合唯一性约束">3.2.2 复合唯一性约束</h4><p>上面的 <code>UNIQUE KEY (字段名列表)</code> 多个字段名，表示复合唯一，即多个字段的组合是唯一的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY (字段名列表)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="3-2-3-删除唯一性约束">3.2.3 删除唯一性约束</h4><p>添加唯一性约束的列上也会<strong>自动创建唯一索引</strong>：</p><ul><li>删除唯一约束只能通过删除唯一索引的方式删除。</li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和 <code>(字段名列表)</code> 中排在第一个的列名相同。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看表的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> user_unique;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744117536023.png" alt="查看表的索引"></p><p>也可以使用 <code>information_schema.table_constraints</code> 查看约束名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;user_unique&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744116873047.png" alt="约束名"></p><p><strong>删除唯一性约束</strong> ：无论如何，删除 <code>UNIQUE</code> 需要删除的是索引，索引的名称一般为约束名，用如下 SQL 语句删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名</span><br><span class="line">    <span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> user_unique</span><br><span class="line">    <span class="keyword">DROP</span> INDEX uk_name_pwd;</span><br></pre></td></tr></table></figure><h2 id="4-PRIMARY-KEY-主键约束">4 PRIMARY KEY 主键约束</h2><h3 id="4-1-主键约束">4.1 主键约束</h3><p><code>PRIMARY KEY</code> ：用来唯一标识表中的一行记录。</p><ul><li><p>主键约束相当于<strong>唯一约束 + 非空约束的组合</strong>，主键约束列不允许重复，也不允许出现空值。</p></li><li><p>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</p></li><li><p>主键约束对应着表中的一列或者多列（复合主键）。如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</p></li><li><p>MySQL 的主键名为 <code>PRIMARY</code> ，自定义重命名无用。</p></li><li><p>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的<strong>主键索引</strong>。如果删除主键约束，主键约束对应的索引自动删除。</p></li></ul><blockquote><p>【注意】不要修改主键字段的值</p></blockquote><h3 id="4-2-具体-SQL-实现">4.2 具体 SQL 实现</h3><h4 id="4-2-1-添加主键约束">4.2.1 添加主键约束</h4><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- example 1</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型 <span class="keyword">PRIMARY KEY</span>, <span class="comment">-- 列级模式</span></span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- example 2</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型, </span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">PRIMARY KEY</span> (字段名列表) <span class="comment">-- 表级模式</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> temp</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> temp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span>  <span class="comment">-- 主键 PRI</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> (字段名列表);</span><br></pre></td></tr></table></figure><h4 id="4-2-2-复合主键约束">4.2.2 复合主键约束</h4><p><code>(字段名列表)</code> 多个字段名共同构成主键：如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (字段名列表)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="4-2-3-删除主键约束">4.2.3 删除主键约束</h4><p>删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空约束还存在。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">PRIMARY KEY</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】删除时指定删除的为 <code>PRIMARY KEY</code> 不会存在歧义。即在 <code>[CONSTRAINT 约束名]</code> 自定义的约束名并不会起作用。MySQL 仍然使用 <code>PRIMARY</code> 作为主键约束的索引名和约束名：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> temp_primary</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age  <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> temp_pri <span class="keyword">PRIMARY KEY</span> (id, name)  <span class="comment">-- 自定义约束名 temp_pri</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看索引名</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> temp_primary;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看约束名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;temp_primary&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744120025879.png" alt="索引名仍然为 PRIMARY 不是自定义的 temp_pri"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1744120160431.png" alt="约束名仍然为 PRIMARY 不是自定义的 temp_pri"></p><h2 id="5-FOREIGN-KEY-外键约束">5 FOREIGN KEY 外键约束</h2><h3 id="5-1-外键约束">5.1 外键约束</h3><p><code>FOREIGN KEY</code> ：限定某个表的某个字段的引用完整性。比如：员工表的员工所在部门，必须在部门表能找到对应的部分。</p><ul><li>主表（父表）：被引用的表，被参考的表</li><li>从表（子表）：引用别人的表，参考别人的表</li></ul><p><strong>特点：</strong></p><ul><li>从表的外键列，必须引用主表的主键或唯一约束的列（否则无法对应）。</li><li>在创建外键约束时，如果不给外键约束命名，默认名不是列名，而是自动产生一个外键名。</li><li>若创建表时指定外键约束，要先有主表，再创建从表。</li><li>删表时，先删从表（或先删除外键约束），再删除主表。</li><li>当主表的记录被从表参照时，主表的记录将不允许删除。如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据。</li><li>从表的外键列与主表被参照的列数据类型必须一样，逻辑意义一致。</li><li>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引。索引名是外键的约束名，以此提高外键查询的速度。</li><li>删除外键约束后，必须手动删除对应的索引。</li></ul><p><strong>约束关系是针对双方的：</strong></p><ul><li>添加了外键约束后，主表的修改和删除数据受约束</li><li>添加了外键约束后，从表的添加和修改数据受约束</li><li>在从表上建立外键，要求主表必须存在</li><li>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</li></ul><h3 id="5-2-具体-SQL-实现">5.2 具体 SQL 实现</h3><h4 id="5-2-1-添加外键约束">5.2.1 添加外键约束</h4><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 先有主表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> 主表名称</span><br><span class="line">(</span><br><span class="line">    字段<span class="number">1</span> 数据类型 <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    字段<span class="number">2</span> 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 再指定从表外键</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> 从表名称</span><br><span class="line">(</span><br><span class="line">    字段<span class="number">1</span> 数据类型 <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    字段<span class="number">2</span> 数据类型,</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> 外键约束名] <span class="keyword">FOREIGN KEY</span> (从表的某个字段) <span class="keyword">REFERENCES</span> 主表名 (被参考字段)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 先有主表 部门表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> dept_foreign</span><br><span class="line">(</span><br><span class="line">    d_id   <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    d_name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 再指定从表外键 员工表的部门 id 指向部门表的 id</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> emp_foreign</span><br><span class="line">(</span><br><span class="line">    e_id    <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    e_name  <span class="type">VARCHAR</span>(<span class="number">5</span>),</span><br><span class="line">    dept_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (dept_id) <span class="keyword">REFERENCES</span> dept_foreign (d_id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>索引名默认为列名 <code>dept_id</code> ，但约束名系统自动产生 <code>emp_foreign_ibfk_1</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> emp_foreign;  <span class="comment">-- dept_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;emp_foreign&#x27;</span>;  <span class="comment">-- emp_foreign_ibfk_1</span></span><br></pre></td></tr></table></figure><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 从表名</span><br><span class="line">    <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">FOREIGN KEY</span> (从表某一字段名) <span class="keyword">REFERENCES</span> 主表名 (主表字段名);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_foreign</span><br><span class="line">    <span class="keyword">ADD CONSTRAINT</span> emp_foreign_key <span class="keyword">FOREIGN KEY</span> (dept_id) <span class="keyword">REFERENCES</span> dept_foreign (d_id);</span><br></pre></td></tr></table></figure><p>此时索引名变为自定义的约束名 <code>emp_foreign_key</code> ，但约束名除了系统自动产生的约束名 <code>emp_foreign_ibfk_1</code> 外，新增了自定义的约束名 <code>emp_foreign_key</code> 。</p><h4 id="5-2-2-约束等级">5.2.2 约束等级</h4><p>父表进行数据更新/删除时，子表的不同变化：</p><ul><li><code>Cascade</code> 方式 ：在父表上 update/delete 记录时，同步 update/delete 掉子表的匹配记录。</li><li><code>Set null</code> 方式 ：在父表上 update/delete 记录时，将子表上匹配记录的列设为 null ，但是要注意子表的外键列不能有非空约束。</li><li><code>No action</code> 方式 ：如果子表中有匹配的记录，则不允许对父表对应候选键进行 update/delete 操作。</li><li><code>Restrict</code> 方式 ：同 No action 方式， 都是立即检查外键约束。</li><li><code>Set default</code> 方式 ：父表有变更时，子表将外键列设置成一个默认的值。</li></ul><p>如果没有指定等级，<strong>默认 Restrict 方式</strong>。</p><p>对于<strong>外键约束，最好是采用: <code>ON UPDATE CASCADE ON DELETE RESTRICT</code> 的方式</strong>。即更新时采用 Cascade 方式，删除时采用 Restrict 方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp_foreign</span><br><span class="line">(</span><br><span class="line">    e_id    <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    e_name  <span class="type">VARCHAR</span>(<span class="number">5</span>),</span><br><span class="line">    dept_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (dept_id) <span class="keyword">REFERENCES</span> dept_foreign (d_id) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="5-2-3-删除外键约束">5.2.3 删除外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 查看约束名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 删除外键约束</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> 从表名</span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">FOREIGN KEY</span> 外键约束名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查看索引名</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 删除索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> 从表名</span><br><span class="line">    <span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 查看约束名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;emp_foreign&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 删除外键约束</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> emp_foreign</span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">FOREIGN KEY</span> emp_foreign_ibfk_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查看索引名</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> emp_foreign;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 删除索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> emp_foreign</span><br><span class="line">    <span class="keyword">DROP</span> INDEX dept_id;</span><br></pre></td></tr></table></figure><h2 id="6-AUTO-INCREMENT-自增列">6 AUTO_INCREMENT 自增列</h2><h3 id="6-1-自增列概述">6.1 自增列概述</h3><p><code>AUTO_INCREMENT</code> ：某个字段的值自增。</p><ul><li>一个表最多只能有一个自增长列。当需要产生唯一标识符或顺序值时，可设置自增长。</li><li>自增列约束的列必须是键列（主键列或唯一键列）</li><li>自增约束的列的数据类型必须是整数类型</li><li>如果自增列指定了 0 和 NULL ，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</li></ul><h3 id="6-2-具体-SQL-实现">6.2 具体 SQL 实现</h3><h4 id="6-2-1-添加自增列">6.2.1 添加自增列</h4><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 常见格式</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型 <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> 默认值</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值,</span><br><span class="line">    字段名 数据类型 <span class="keyword">UNIQUE</span> KEY AUTO_INCREMENT,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> 默认值,</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> emp_increment</span><br><span class="line">(</span><br><span class="line">    e_id   <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    e_name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名</span><br><span class="line">    MODIFY 字段名 数据类型 AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_increment</span><br><span class="line">    MODIFY e_id <span class="type">INT</span> AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-删除自增列">6.2.2 删除自增列</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    MODIFY 字段名 数据类型; <span class="comment">-- 去掉 AUTO_INCREMENT 相当于删除</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_increment</span><br><span class="line">    MODIFY e_id <span class="type">INT</span>;</span><br></pre></td></tr></table></figure><h2 id="7-CHECK-检查约束">7 CHECK 检查约束</h2><h3 id="7-1-检查约束">7.1 检查约束</h3><p><code>CHECK</code> ：检查某个字段的值是否符号某些要求。</p><p>例如：对于性别，只有 <code>Male</code> 和 <code>Female</code> ，可以对数据进行初步检查。</p><h3 id="7-2-具体-SQL-实现">7.2 具体 SQL 实现</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型 <span class="keyword">CHECK</span> (约束表达式)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp_check</span><br><span class="line">(</span><br><span class="line">    e_id   <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    e_name <span class="type">VARCHAR</span>(<span class="number">5</span>),</span><br><span class="line">    gender <span class="type">CHAR</span> <span class="keyword">CHECK</span> (gender <span class="keyword">in</span> (<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> emp_check</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 错误数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> emp_check</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;M&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">3819</span> (HY000): <span class="keyword">Check</span> <span class="keyword">constraint</span> <span class="string">&#x27;emp_check_chk_1&#x27;</span> <span class="keyword">is</span> violated.</span><br></pre></td></tr></table></figure><h2 id="8-DEFAULT-默认值约束">8 DEFAULT 默认值约束</h2><h3 id="8-1-默认值约束">8.1 默认值约束</h3><p><code>DEFAULT</code> ：给某个字段/某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p><h3 id="8-2-具体-SQL-实现">8.2 具体 SQL 实现</h3><h4 id="8-2-1-添加默认值约束">8.2.1 添加默认值约束</h4><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名</span><br><span class="line">(</span><br><span class="line">    字段名 数据类型 <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp_default</span><br><span class="line">(</span><br><span class="line">    e_id   <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    e_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    sal    <span class="type">FLOAT</span>                <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">    tel    <span class="type">CHAR</span>(<span class="number">11</span>)    <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    MODIFY 字段名 数据类型 <span class="keyword">default</span> 默认值 [其他约束];</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_default</span><br><span class="line">    MODIFY sal <span class="type">FLOAT</span> <span class="keyword">DEFAULT</span> <span class="number">1.0</span>;</span><br></pre></td></tr></table></figure><h4 id="8-2-2-删除默认值约束">8.2.2 删除默认值约束</h4><p>类似的，当删除某个约束时，重新写一遍约束，但删去这个约束即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名称</span><br><span class="line">    MODIFY 字段名 数据类型 [其他约束];  <span class="comment">-- 删除 DEFAULT 约束</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优先级队列 (Priority Queue) 和堆 (Heap)</title>
      <link href="/posts/78a0681d.html"/>
      <url>/posts/78a0681d.html</url>
      
        <content type="html"><![CDATA[<h1>优先级队列 (Priority Queue) 和堆 (Heap)</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本章讲解优先级队列、基于堆实现的优先级队列、一些常用的排序算法（选择排序、插入排序和高级排序算法——堆排序）。特别地，堆是一种特殊的二叉树，我们基于 Python 数组实现堆；Python 实现排序算法。</p><h2 id="1-优先级队列">1 优先级队列</h2><h3 id="1-1-优先级队列的抽象数据类型">1.1 优先级队列的抽象数据类型</h3><h4 id="1-1-1-优先级">1.1.1 优先级</h4><p>队列这一数据结构，遵循 <strong>FIFO（先入先出）<strong>的规则进行元素的插入和删除。然而，现实生活中有时我们需要一个除 FIFO 功能外还有额外删除功能的队列。我们引入</strong>优先级队列（Priority Queue）<strong>这一概念来描述这一类队列，其删除操作为删除具有</strong>最高优先级</strong>的元素。</p><ul><li>例如：航空公司的候补等待（standby）队列中，优先级更高的乘客即使到的更晚，也有可能更早获得候补机会。</li></ul><h4 id="1-1-2-优先级队列-ADT">1.1.2 优先级队列 ADT</h4><p>优先级队列中存储：一个元素和其优先级，构成键-值对结构 <code>(key, value)</code> 。在优先级队列 <code>P</code> 上定义的优先级队列 ADT 支持以下方法（本章的优先级不妨设为<strong>最小值 min</strong>）：</p><ul><li><code>P.add(k, v)</code> ：向优先级队列 P 中插人一个键值对 <code>(k, v)</code> 。</li><li><code>P.min()</code> ：返回一个元组 <code>(k, v)</code> ，代表优先级队列 P 中一个键值对，该元组的键值是最小值（但是没有移除该元组）；如果队列为空，将发生错误。</li><li><code>P.remove_min()</code> ：从优先级队列 P 中移除一个拥有最小键值的元组，并且返回这个被移除的元组，<code>(k, v)</code> 代表这个被移除的元组的键和值；如果优先级队列为空，将发生错误。</li><li><code>P.is_empty()</code> ：如果优先级队列不包含任何元组，将返回 <code>True</code> 。</li><li><code>len(P)</code> ：返回优先级队列中元组的数量。</li></ul><p>下面的例子展示了这些功能的具体过程：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743831618569.png" alt="优先级队列的 ADT"></p><h3 id="1-2-优先级队列的实现">1.2 优先级队列的实现</h3><h4 id="1-2-1-组合设计模式">1.2.1 组合设计模式</h4><p>组合设计模式：定义一个 <code>_Item</code> 类，用它来确保在主要的数据结构中每个元组保存它相关计数值。</p><p>对于优先级队列，我们将使用组合设计模式来存储内部元组，该元组包含键 <code>k</code> 和值 <code>v</code> 构成的数值对。为后续的构建提供方便，这里构建了一个基础父类，未来的类均继承于 <code>PriorityQueueBase</code> 类，其中包含一个嵌套类 <code>_Item</code> 的定义。对于元组实例 <code>a</code> 和 <code>b</code> ，重载比较符 <code>&lt;</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PriorityQueueBase</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优先级队列的抽象数据类型基础类 ADT</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 嵌套的 _Item 类 ----------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Item</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;每一个元素的存储方式：(k, v)&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_key&#x27;</span>, <span class="string">&#x27;_value&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, k, v</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;初始化键值对 (k, v)&quot;&quot;&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>._key = k</span><br><span class="line">            <span class="variable language_">self</span>._value = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;重载运算符 &lt;&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._key &lt; other._key  <span class="comment"># 根据 key 键值比较大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 优先级队列 ADT ----------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;__len__ 方法暂时未定义，由子类定义&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) == <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的键值需要满足<strong>全序关系</strong>：</p></blockquote><p>**全序关系：**一个集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 上的全序关系需满足</p><ul><li>自反性</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>x</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>≤</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\forall\ x \in A,\quad x \leq x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span></p><ul><li>反对称性</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>x</mi><mo separator="true">,</mo><mtext> </mtext><mi>y</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>≤</mo><mi>y</mi><mtext> </mtext><mo>∧</mo><mtext> </mtext><mi>y</mi><mo>≤</mo><mi>x</mi><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">\forall\ x,\ y \in A,\quad x \leq y\ \wedge\ y \leq x \quad\Rightarrow\quad x = y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span></p><ul><li>传递性</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>x</mi><mo separator="true">,</mo><mtext> </mtext><mi>y</mi><mo separator="true">,</mo><mtext> </mtext><mi>z</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>≤</mo><mi>y</mi><mo separator="true">,</mo><mtext> </mtext><mi>y</mi><mo>≤</mo><mi>z</mi><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mi>x</mi><mo>≤</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">\forall\ x,\ y,\ z \in A,\quad x\leq y,\ y\leq z \quad\Rightarrow\quad x \leq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 中任意两个元素均可比较</li></ul><h4 id="1-2-2-未排序列表实现优先级队列">1.2.2 未排序列表实现优先级队列</h4><p>创建未排序的列表实现优先级队列的 <code>UnsortedPriorityQueue</code> 类，它继承优先级队列 ADT <code>PriorityQueueBase</code> 类。未排序指的是，每次 <code>add</code> 增加新元素时，直接在列表后面加入；但每次查找/删除元素时 <code>min()</code> <code>remove_min()</code> 都需要遍历列表找到最小值。</p><blockquote><p>注意：这里使用了之前章节 <a href="https://zhuanlan.zhihu.com/p/29813136429">链表</a> 定义的 <code>PositionalList</code> 。也可以在我的 <a href="https://github.com/isKage/dsa-notes/blob/main/lec8_priority_queue_heap/utils/positional_list.py">Github 库</a> 中找到代码内容。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnsortedPriorityQueue</span>(<span class="title class_ inherited__">PriorityQueueBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;未排序的列表实现优先级队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化，利用队列类 PositionalList&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = PositionalList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;增加元素 (key, value)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 向 PositionalList 队列类新增 _Item 类实例</span></span><br><span class="line">        <span class="variable language_">self</span>._data.add_last(<span class="variable language_">self</span>._Item(key, value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_min</span>(<span class="params">self</span>) -&gt; PositionalList.Position:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;最小键值元素 _Item&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历</span></span><br><span class="line">        small = <span class="variable language_">self</span>._data.first()</span><br><span class="line">        walk = <span class="variable language_">self</span>._data.after(small)</span><br><span class="line">        <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 这里的 element 返回的是一个 _Item 类</span></span><br><span class="line">            <span class="keyword">if</span> walk.element() &lt; small.element():</span><br><span class="line">                small = walk  <span class="comment"># 记录最小值</span></span><br><span class="line">            walk = <span class="variable language_">self</span>._data.after(walk)  <span class="comment"># 向后更新一步</span></span><br><span class="line">        <span class="keyword">return</span> small  <span class="comment"># 遍历完后得到最小值 (返回的是 PositionalList.Position 类)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">min</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最小 (key, value)&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_min()</span><br><span class="line">        item = p.element()  <span class="comment"># PositionalList.Position._node._element -&gt; _Item 类</span></span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_min</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最小 (key, value) 并删除&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_min()</span><br><span class="line">        item = <span class="variable language_">self</span>._data.delete(p)</span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upq = UnsortedPriorityQueue()</span><br><span class="line">    upq.add(<span class="number">1</span>, <span class="string">&#x27;small&#x27;</span>)</span><br><span class="line">    upq.add(<span class="number">3</span>, <span class="string">&#x27;median&#x27;</span>)</span><br><span class="line">    upq.add(<span class="number">5</span>, <span class="string">&#x27;large&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The min is:&quot;</span>, upq.<span class="built_in">min</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Delete the min:&quot;</span>, upq.remove_min())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Now, the min is:&quot;</span>, upq.<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># The min is: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Delete the min: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Now, the min is: (3, &#x27;median&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-排序列表实现优先级队列">1.2.3 排序列表实现优先级队列</h4><p>创建排序的列表实现优先级队列的 <code>SortedPriorityQueue</code> 类，它继承优先级队列 ADT <code>PriorityQueueBase</code> 类。排序指的是，每次 <code>add</code> 增加新元素时，都进行比较，使得队列一直都是有序状态，例如从小到大；每次查找/删除元素时 <code>min()</code> <code>remove_min()</code> 只需要拿出队列第一个元素即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SortedPriorityQueue</span>(<span class="title class_ inherited__">PriorityQueueBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;排序的列表实现优先级队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化，利用队列类 PositionalList&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = PositionalList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;增加元素 (key, value)&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Item(key, value)  <span class="comment"># 创建新的 _Item 类实例</span></span><br><span class="line">        walk = <span class="variable language_">self</span>._data.last()  <span class="comment"># 从最后开始检查</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到第一个比 newest 大的元素</span></span><br><span class="line">        <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> newest &lt; walk.element():</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.before(walk)  <span class="comment"># go ahead</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向 PositionalList 队列类新增 _Item 类实例</span></span><br><span class="line">        <span class="keyword">if</span> walk <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>._data.add_first(newest)  <span class="comment"># 第一个位置插入</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._data.add_after(walk, newest)  <span class="comment"># 在 walk 后插入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">min</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最小 (key, value)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 有序队列：第一个元素即为最小</span></span><br><span class="line">        p = <span class="variable language_">self</span>._data.first()</span><br><span class="line">        item = p.element()</span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_min</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最小 (key, value) 并删除&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 同理，第一个元素即为最小</span></span><br><span class="line">        item = <span class="variable language_">self</span>._data.delete(<span class="variable language_">self</span>._data.first())</span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br></pre></td></tr></table></figure><p>例如：结果相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">spq = SortedPriorityQueue()</span><br><span class="line">    spq.add(<span class="number">1</span>, <span class="string">&#x27;small&#x27;</span>)</span><br><span class="line">    spq.add(<span class="number">3</span>, <span class="string">&#x27;median&#x27;</span>)</span><br><span class="line">    spq.add(<span class="number">5</span>, <span class="string">&#x27;large&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The min is:&quot;</span>, spq.<span class="built_in">min</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Delete the min:&quot;</span>, spq.remove_min())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Now, the min is:&quot;</span>, spq.<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># The min is: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Delete the min: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Now, the min is: (3, &#x27;median&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4-算法分析-比较">1.2.4 算法分析&amp;比较</h4><p>排序与未排序列表实现优先级队列的主要区别在于 (1) 插入 (2) 删除/查找最小元素</p><ul><li><strong>未排序列表</strong>：每次直接在尾部插入新元素，所以复杂度为 <code>O(1)</code> ；但查找和删除最小元素却需要遍历列表寻找，复杂度为 <code>O(n)</code> 。</li><li><strong>排序列表</strong>：排序列表则相反。每次插入新元素，都需要遍历来找到最佳位置，所以复杂度为 <code>O(n)</code> ；但查找和删除最小元素只需要对队列第一个元素操作，复杂度为 <code>O(1)</code> 。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743837646130.png" alt="排序与否的比较"></p><h2 id="2-堆">2 堆</h2><p><strong>二进制堆的数据结构</strong>：一个更加有效的优先级队列的实现。这个数据结构允许我们以对数时间复杂度 <code>O(log(n))</code> 来实现插人和删除操作。</p><h3 id="2-1-堆的数据结构">2.1 堆的数据结构</h3><p>**堆是一棵二叉树 T **，该树的节点上存储了集合中的元组并且满足两个附加的属性：关系属性以存储键的形式在 T 中定义；结构属性以树 T 自身形状的方式定义。</p><h4 id="2-1-1-Heap-Order-属性">2.1.1 Heap-Order 属性</h4><p><strong>在堆 T 中，对于除了根的每个位置 p ，存储在 p 中的键值大于或等于存储在 p 的父节点的键值。即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">(</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">key(p) \geq key(parent(p))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">re</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">))</span></span></span></span> 。</strong></p><p>作为 Heap-Order 属性的结果，T 中从根到叶子的路径上的键值是以非递减顺序排列的。也就是说，一个<strong>最小的键总是存储在 T 的根节点</strong>中。这使得调用 <code>min</code> 或 <code>remove_min</code> 时，能够比较容易地定位这样的元组，一般情况下它被认为“在堆的顶部”。</p><h4 id="2-1-2-完全二叉树属性">2.1.2 完全二叉树属性</h4><p><strong>一个高度为 h 的堆 T 是一棵完全二叉树：即 T 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mn>2</mn><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>h</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0,\ 1,\ 2,\ \cdots,\ h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 层上尽可能达到节点数的最大值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> ，并且剩余的节点在 h 层尽可能保存在最左的位置。</strong></p><p>完全二叉树属性是为了尽可能提高遍历效率，后面我们会看到，影响高度 h 是影响堆效率的主要因素，而完全二叉树能保证在节点数固定为 n 时使得高度最小，大概为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 。</p><h4 id="2-1-3-堆的高度">2.1.3 堆的高度</h4><p><strong>堆/完全二叉树的高度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy="false">[</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">h = [\log n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span> 。其中 [] 表示取整。</strong></p><p>这是完全二叉树的性质，我们假设节点数为 n 的高度为 h ，则完全二叉树需要满足：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mi>h</mi></msup><mo>≤</mo><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn><mo>+</mo><msup><mn>2</mn><mi>h</mi></msup><mo>=</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1+ (1 + 2 + \cdots + 2^{h-1}) = 2^h \leq n \leq 2^h - 1 + 2^h = 2^{h+1} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0351em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>于是可以推出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo stretchy="false">[</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">n = [\log n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span> 。</p><p>下面是一个标准的堆的例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743840261916.png" alt="堆的完全二叉树结构例子"></p><h3 id="2-2-使用堆实现优先级队列">2.2 使用堆实现优先级队列</h3><p><code>min()</code> 方法的实现很简单，由于堆的 Heap-Order 属性，位于根节点的元素一定是 <code>min()</code> ，所以时间复杂度为 <code>O(1)</code> 。</p><h4 id="2-2-1-插入和向上冒泡">2.2.1 插入和向上冒泡</h4><p>优先级队列的 <code>add(k, v)</code> 操作对应于在堆中插入一个新元组</p><p>堆中元素的插入由三个步骤组成：</p><ul><li>找到插入新节点的位置 z</li><li>将新元组放在位置 z 处</li><li>通过<strong>向上冒泡</strong>恢复堆的 Heap-Order 属性</li></ul><p>插入新元组后，堆可能变得不满足 Heap-Order 性质：</p><ul><li>通过对新节点和其父节点的键值进行比较，并在必要时交换两个节点的位置，不断重复即可恢复其Heap-Order 性质，这种操作被称为<strong>堆向上冒泡 Up-Heap Bubbling</strong></li><li>堆向上冒泡操作在新节点成为根节点或其键值大于其父节点键值时停止</li><li>堆向上冒泡操作的时间复杂度为 <code>O(log n)</code> （即最坏情况要遍历树的每一层，而树的高度为 <code>[log n]</code> ）</li></ul><p>下面的图示，展示了一个插入和向上冒泡的过程：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743927952888.png" alt="a 为原始堆，b 在堆尾部插入元素 (2,T)"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928016199.png" alt="c 对新元素 (2,T) 进行冒泡，因为 2 &lt; 20 ，得到 d"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928073600.png" alt="e 同理进行父子节点比较，向上冒泡，得到 f"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928122435.png" alt="同样操作，直到冒泡到根节点/键值关系满足 Heap-Order 属性"></p><h4 id="2-2-2-删除和向下冒泡">2.2.2 删除和向下冒泡</h4><p>因为 Heap-Order 属性保证了根节点即为 min ，所以优先级队列的 <code>remove_min()</code> 操作对应于在堆中删除根节点。</p><p>堆中元素的删除由三个步骤组成：</p><ul><li>将<strong>根节点用最后一个节点 w 代替</strong></li><li>移除最后一个节点 w</li><li>通过<strong>向下冒泡</strong>恢复堆的 Heap-Order属性</li></ul><p>用最后一个节点将根节点替代后，堆可能变得不满足 Heap-Order 性质：</p><ul><li>通过对新的根节点和其孩子节点的键值进行比较，并在必要时交换根节点和有较小键值的孩子节点的位置，不断重复即可恢复其 Heap-Order 性质，这种操作被称为<strong>堆向下冒泡 Down-Heap Bubbling</strong></li><li>堆向下冒泡操作在最后一个节点成为叶子节点或其键值小于其所有孩子节点键值时停止</li><li>堆向下冒泡操作的时间复杂度为 <code>O(log n)</code> （即最坏情况要遍历树的每一层，而树的高度为 <code>[log n]</code> ）</li></ul><p>下面的图示，展示了一个删除和向下冒泡的过程：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928511145.png" alt="a 将最后节点 (13,W) 替换到根节点，并删除根节点 (4,C) ，得到 b 图"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928578370.png" alt="c 父节点 13 大于子节点最小键值 5 ，故向下冒泡，得到 d"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928664804.png" alt="类似地，重复冒泡过程"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928679120.png" alt="继续冒泡，直到到达叶子节点/键值均小于子节点时，恢复 Heap-Order 性质"></p><blockquote><p>【注意】每次向下冒泡，都需要找 <strong>2 个子节点最小键值</strong> 进行交换。</p></blockquote><h3 id="2-3-基于数组的堆-完全二叉树表示">2.3 基于数组的堆/完全二叉树表示</h3><p>基于数组实现树，对于完全二叉树十分适用。这是因为完全二叉树尽可能的用满了每一层的空间，且剩余的叶子节点都在左侧，这非常符合数组的结构。</p><p>那么假设一个基于数组 A 的完全二叉树 T 已经实现，则对于在 A 中索引为 p 的节点，则有：</p><ul><li>若 p 为根节点，则 <code>p = 0</code></li><li>若 q 为 p 的左子节点，则 <code>q = 2 * p + 1</code></li><li>若 q 为 p 的右子节点，则 <code>q = 2 * p + 2</code></li></ul><p>下面是一个堆/完全二叉树存储在数组里的例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743929197105.png" alt="堆/完全二叉树"></p><p>它存储在数组里为：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743929444547.png" alt=""></p><h3 id="2-4-Python-实现堆">2.4 Python 实现堆</h3><h4 id="2-4-1-Python-实现">2.4.1 Python 实现</h4><p>基于堆的优先级队列的 Python 实现。我们使用基于数组的表示，保存了元组组合表示的 Python 列表。采用递归来实现 <code>_upheap</code> 和 <code>_downheap</code> 中的重复调用。继承之前的 <code>PriorityQueueBase</code> 基础类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapPriorityQueue</span>(<span class="title class_ inherited__">PriorityQueueBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    堆的实现：完全二叉树，根节点为 min</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 非公有方法：二叉树结构 ----------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parent</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回父节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (j - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;当前位置的左子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * j + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;当前位置的右子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * j + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_has_left</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;左子节点是否存在/合法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._left(j) &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_has_right</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;右子节点是否存在/合法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._right(j) &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_swap</span>(<span class="params">self, i, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;交换 i j 位置上的元素 &lt;=&gt; 冒泡&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data[i], <span class="variable language_">self</span>._data[j] = <span class="variable language_">self</span>._data[j], <span class="variable language_">self</span>._data[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_upheap</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向上冒泡&quot;&quot;&quot;</span></span><br><span class="line">        parent = <span class="variable language_">self</span>._parent(j)  <span class="comment"># j 的父节点</span></span><br><span class="line">        <span class="keyword">if</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="variable language_">self</span>._data[j] &lt; <span class="variable language_">self</span>._data[parent]:  <span class="comment"># 非根节点/不满足 Heap-Order</span></span><br><span class="line">            <span class="variable language_">self</span>._swap(j, parent)  <span class="comment"># 冒泡/交换</span></span><br><span class="line">            <span class="variable language_">self</span>._upheap(parent)  <span class="comment"># 递归实现，向上 (parent) 冒泡</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_downheap</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向下冒泡&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 找到最小的子节点 small_child</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._has_left(j):  <span class="comment"># 左/非叶节点</span></span><br><span class="line">            left = <span class="variable language_">self</span>._left(j)</span><br><span class="line">            small_child = left</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._has_right(j):  <span class="comment"># 右/非叶节点</span></span><br><span class="line">                right = <span class="variable language_">self</span>._right(j)</span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>._data[right] &lt; <span class="variable language_">self</span>._data[left]:</span><br><span class="line">                    small_child = right</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 不满足 Heap-Order</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._data[small_child] &lt; <span class="variable language_">self</span>._data[j]:</span><br><span class="line">                <span class="variable language_">self</span>._swap(small_child, j)  <span class="comment"># 冒泡/交换</span></span><br><span class="line">                <span class="variable language_">self</span>._downheap(small_child)  <span class="comment"># 递归实现，向下 (small_child) 冒泡</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 公有方法：堆结构 ----------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;列表用来存储完全二叉树&quot;&quot;&quot;</span>  <span class="comment"># 可优化，见后</span></span><br><span class="line">        <span class="variable language_">self</span>._data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;重载 len()&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;增加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data.append(<span class="variable language_">self</span>._Item(key, value))  <span class="comment"># 尾部新增</span></span><br><span class="line">        <span class="variable language_">self</span>._upheap(<span class="built_in">len</span>(<span class="variable language_">self</span>._data) - <span class="number">1</span>)  <span class="comment"># 从最后一个向上冒泡</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">min</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看 min 不删除&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        item = <span class="variable language_">self</span>._data[<span class="number">0</span>]  <span class="comment"># 由 Heap-Order 性质，第一个元素为 min</span></span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_min</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除 min&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._swap(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>._data) - <span class="number">1</span>)  <span class="comment"># 交换最后一个元素和根节点</span></span><br><span class="line">        item = <span class="variable language_">self</span>._data.pop()  <span class="comment"># 删除最后一个元素，即交换来的根节点/min</span></span><br><span class="line">        <span class="variable language_">self</span>._downheap(<span class="number">0</span>)  <span class="comment"># 从根/第一个开始向下冒泡</span></span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br></pre></td></tr></table></figure><h4 id="2-4-2-基于堆的优先级队列的算法分析">2.4.2 基于堆的优先级队列的算法分析</h4><p>注意到，基于堆的优先级队列，在 <code>min()</code> 操作时，由于 Heap-Order 性质，可以在 <code>O(1)</code> 内完成。而在新增元素和删除/查看最小元素时，最坏的情况都是遍历每一层，而不是每一个节点，这使得对于 n 个节点完全二叉树/堆，其高度/层数仅 <code>log n</code> 级别，故复杂度也只有 <code>O(log n)</code> ，这明显是大大提高了效率。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743931198577.png" alt="算法复杂度分析"></p><p><strong>结论</strong>：堆数据结构都是优先级队列非常有效的实现方式。与基于未排序或已排序列表的实现不同，基于堆的实现在插人和移除操作中均能快速地获得运行结果。</p><h4 id="2-4-3-自底向上构建堆">2.4.3 自底向上构建堆</h4><p>在初始化构建堆时，从一个空堆开始连续调用 n 次 <code>add()</code> 操作的时间复杂度为 <code>O(n log n)</code> （因为每次新增元素在最坏的情况下都是 <code>O(log n)</code> 级别的复杂度，调用 n 次则为 <code>O(n log n)</code> 这是不高效的）。</p><p><strong>自底向上构建堆</strong>可将此操作的时间复杂度降为 <code>O(n)</code> 。初始化的是非空的堆，堆中元素由 n 个。为了叙述简单，我们设：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n = 2^{h+1} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>即这个初始的堆为一个满二叉树（即每一次都满了，每层 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点）。那么，自底向上构建堆进行如下操作：</p><ul><li>第 1 步，任意取 <code>(n + 1)/2</code> 个节点最为最底部的叶子节点；</li><li>第 2 步，再任意取 <code>(n + 1)/4</code> 个节点，作为最后 1 层的父节点，同时对倒数第 2 层每个节点进行一次<strong>向下冒泡</strong>，使得满足 Heap-Order 属性；</li><li>······</li><li>第 i 步，再任意取 <code>(n+1)/2^i</code> 个节点，作为倒数第 i+1 层的父节点，同时对本层（倒数第 i 层）每个节点进行向下冒泡，使得满足 Heap-Order 属性；</li><li>······</li><li>第 h + 1 = log(n + 1) 步，按照同样的方式，此次创建的是根节点，仍然进行最后 1 次向下冒泡，最终得到初始堆。</li></ul><p>例如：如下图，15 = 2^4 - 1 个节点的堆，任意取 8 个元素构成最底部的节点；然后任意取 4 个构成倒数第二层节点，进行向下冒泡，使得满足 Heap-Order 性质；如此重复得到初始化后的堆。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743933519764.png" alt="15 个节点的堆"></p><p><strong>Python 实现</strong>：修改之前的 <code>HeapPriorityQueue</code> 的 <code>__init__()</code> 方法，使得可以根据 <code>contents</code> 序列类快速初始化，复杂度为 <code>O(n)</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapPriorityQueue</span>(<span class="title class_ inherited__">PriorityQueueBase</span>):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="comment"># ---------- 公有方法：堆结构 ----------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, contents=(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;列表用来存储完全二叉树，可根据 contents 自底向上初始化&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(contents[<span class="number">0</span>], <span class="built_in">tuple</span>): <span class="comment"># 若 contents 元素不是元组</span></span><br><span class="line">            <span class="comment"># 则键值对存储 (e, e) for e in contents</span></span><br><span class="line">            <span class="variable language_">self</span>._data = [<span class="variable language_">self</span>._Item(e, e) <span class="keyword">for</span> e <span class="keyword">in</span> contents]</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 为元组就可以正常按照 (k, v) 存储</span></span><br><span class="line">            <span class="variable language_">self</span>._data = [<span class="variable language_">self</span>._Item(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> contents]  </span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data) &gt; <span class="number">1</span>:  <span class="comment"># 确实需要初始化，若为空或只有 1 个则不需要冒泡</span></span><br><span class="line">            <span class="variable language_">self</span>._heapify()  <span class="comment"># 自底向上，逐个冒泡，使得满足 Heap-Order</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_heapify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从底向上初始化堆的冒泡过程&quot;&quot;&quot;</span></span><br><span class="line">        start = <span class="variable language_">self</span>._parent(<span class="built_in">len</span>(<span class="variable language_">self</span>) - <span class="number">1</span>)  <span class="comment"># 从最后一个节点的父节点开始向下冒泡</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 从后向前，一直到根节点</span></span><br><span class="line">            <span class="variable language_">self</span>._downheap(j)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如此可以一开始指定初始化的堆：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment"># a example</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;Heap Priority Queue by Array&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [(<span class="number">1</span>, <span class="string">&#x27;small&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;median&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;large&#x27;</span>)]</span><br><span class="line">    hpq = HeapPriorityQueue(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The min is:&quot;</span>, hpq.<span class="built_in">min</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Delete the min:&quot;</span>, hpq.remove_min())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Now, the min is:&quot;</span>, hpq.<span class="built_in">min</span>())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># =============== Heap Priority Queue by Array ===============</span></span><br><span class="line"><span class="comment"># The min is: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Delete the min: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Now, the min is: (2, &#x27;median&#x27;)</span></span><br></pre></td></tr></table></figure><p><strong>时间复杂度为 <code>O(n)</code> 的证明：</strong></p><p>在最坏的情况下，如何进行冒泡，即冒泡的路径，并不影响复杂度。所以我们不妨假设每个节点处的堆向下泡冒路径均先向右走，然后一直向左走，直到堆底部。</p><p>每个节点最多被两条路径经过，因此所有路径经过的边数总和为 <code>O(n)</code> 。因此，自底向上构建堆的时间为 <code>O(n)</code> 。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743934486425.png" alt="可视化证明图示"></p><h4 id="2-4-4-heapq-模块">2.4.4 heapq 模块</h4><p>Python 的标准分布包含一个 <code>heapq</code> 模块，该模块提供对基于堆的优先级队列的支持。该模块不提供任何优先级队列类，而是提供一些函数，<strong>这些函数把标准 Python 列表作为堆进行管理</strong>。</p><p><strong>heapq</strong> 的一些常见函数，针对列表类 L 操作（假设 L <strong>已经满足</strong> Heap-Order 属性）：</p><ul><li><p><code>heappush(L, e)</code>：将元素 e 存入列表 L ，并重新调整列表以满足 heap-order 属性。该函数执行的时间复杂度为 <code>O(log n)</code> 。</p></li><li><p><code>heappop(L)</code> ：取出并返回列表 L 中拥有最小值的元素，并且重新调整存储以满足 heap-order 属性。该函数执行的时间复杂度为 <code>O(log n)</code> 。</p></li><li><p><code>heappushpop(L, e)</code> ：将元素 e 存人列表 L 中，同时取出和返回最小的元组。该函数执行的时间复杂度为 <code>O(log n)</code> ，但是它较分别调用 push 和 pop 方法的效率稍微高一些。因为如果最新被插入列表的元素值是最小的，那么该函数立刻返回；否则，即为常见的 push + pop 操作。</p></li><li><p><code>heapreplace(L, e)</code> ：与 heappushpop 方法类似。</p></li></ul><p><strong>heapq</strong> 的一些常见函数，针对列表类 L 操作（假设 L <strong>不满足</strong> Heap-Order 属性）：</p><ul><li><code>heapify(L)</code> ：改变未排序的列表，使其满足 heap-order 属性。这个函数使用自底向上的堆构造算法，时间复杂度为 <code>O(n)</code> 。</li><li><code>nlargest(k, iterable)</code>：从一个给定的迭代 <code>iterable</code> 中生成含有 k 个最大值的列表。执行该函数的时间复杂度为 <code>O(n + k log n)</code> 。</li><li><code>nsmallest(k, iterable)</code> ：从一个给定的选代 <code>iterable</code> 中生成含有 k 个最小值的列表。该函数使用与 nlargest 相同的技术，其时间复杂度为 <code>O(n + k log n)</code> 。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">L = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>]  <span class="comment"># 不满足 Heap-Order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 自底向上构建堆</span></span><br><span class="line">heapq.heapify(L)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2 3</span></span><br><span class="line"><span class="string">4 5 6 7</span></span><br><span class="line"><span class="string">10 9 8</span></span><br><span class="line"><span class="string">满足 Heap-Order</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 返回最大最小的 2 个</span></span><br><span class="line"><span class="built_in">print</span>(heapq.nlargest(<span class="number">2</span>, L))</span><br><span class="line"><span class="built_in">print</span>(heapq.nsmallest(<span class="number">2</span>, L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[10, 9]</span></span><br><span class="line"><span class="string">[1, 2]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 去除最小</span></span><br><span class="line"><span class="built_in">print</span>(heapq.heappop(L))</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2, 4, 3, 8, 5, 6, 7, 10, 9]</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">4 3</span></span><br><span class="line"><span class="string">8 5 6 7</span></span><br><span class="line"><span class="string">10 9</span></span><br><span class="line"><span class="string">满足 Heap-Order</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-排序">3 排序</h2><h3 id="3-1-使用优先级队列进行排序">3.1 使用优先级队列进行排序</h3><p>我们可以使用优先级队列对一个可比较元素集合进行排序：</p><ul><li>首先使用 <code>add</code> 操作将集合中的元素一个接一个地插入到优先级队列中</li><li>再使用 <code>remove_min</code> 操作将元素以某种顺序从优先级队列中移出</li></ul><p>此算法的运行时间取决于优先级队列的具体实现方式。</p><p>通用伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pq_sort</span>(<span class="params">C, pq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;伪代码：对 C 排序，借用 pq 优先级队列类&quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(C)</span><br><span class="line">    P = pq()  <span class="comment"># 辅助优先级队列</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        element = C.delete(C.first())  <span class="comment"># 拿出 C 的元素</span></span><br><span class="line">        P.add(element, element)  <span class="comment"># 存储 (e, e)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        (k, v) = P.remove_min()  <span class="comment"># 取出最小的 e</span></span><br><span class="line">        C.add_last(v)  <span class="comment"># 放回原来的 C</span></span><br></pre></td></tr></table></figure><h3 id="3-2-选择排序和插入排序">3.2 选择排序和插入排序</h3><h4 id="3-2-1-选择排序">3.2.1 选择排序</h4><p>当使用<strong>未排序列表</strong>实现优先级队列时，PQ-sort 即为<strong>选择排序</strong>。</p><p><strong>选择排序的复杂度：<code>O(n^2)</code></strong></p><ul><li>将所有元素使用 <code>add</code> 操作插入优先级队列需要 n 次操作，运行时间为 <code>O(n)</code> 。</li><li>将元素按顺序移出长为 n 的优先级队列需要每次使用 <code>remove_min</code> 操作选择优先级最高的元素，其运行时间正比于：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n + (n-1) + (n-2) + \cdots + 1 = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743941045902.png" alt="选择排序示例" style="zoom:50%;" /><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> UnsortedPriorityQueue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">C</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(C)</span><br><span class="line">    P = UnsortedPriorityQueue()  <span class="comment"># 见之前定义的 UnsortedPriorityQueue 类</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        element = C.pop()</span><br><span class="line">        P.add(element, element)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        (k, v) = P.remove_min()</span><br><span class="line">        C.append(v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;Selection Sort&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [<span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Initial list:&quot;</span>, l)</span><br><span class="line">    selection_sort(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After sort:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============== Selection Sort ===============</span></span><br><span class="line"><span class="comment"># Initial list: [7, 4, 8, 2, 5, 3]</span></span><br><span class="line"><span class="comment"># After sort: [2, 3, 4, 5, 7, 8]</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-插入排序">3.2.2 插入排序</h4><p>当使用<strong>排序列表</strong>实现优先级队列时，PQ-sort 即为<strong>插入排序</strong>。</p><p><strong>插入排序的复杂度：<code>O(n^2)</code></strong></p><ul><li>将所有元素使用 <code>add</code> 操作插入优先级队列的运行时间正比于：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1 + 2 +3 + \cdots + n = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>将排好序的元素使用 <code>remove_min</code> 操作从优先级队列中移出需要 n 次操作，运行时间为 <code>O(n)</code></li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743941482500.png" alt="插入排序示例" style="zoom:50%;" /><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> UnsortedPriorityQueue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">C</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(C)</span><br><span class="line">    P = SortedPriorityQueue()  <span class="comment"># 见之前定义的 UnsortedPriorityQueue 类</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        element = C.pop()</span><br><span class="line">        P.add(element, element)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        (k, v) = P.remove_min()</span><br><span class="line">        C.append(v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;Insertion Sort&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [<span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Initial list:&quot;</span>, l)</span><br><span class="line">    insertion_sort(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After sort:&quot;</span>, l)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># =============== Insertion Sort ===============</span></span><br><span class="line"><span class="comment"># Initial list: [7, 4, 8, 2, 5, 3]</span></span><br><span class="line"><span class="comment"># After sort: [2, 3, 4, 5, 7, 8]</span></span><br></pre></td></tr></table></figure><h3 id="3-3-堆排序">3.3 堆排序</h3><p>正如前面所说，使用优先级队列进行排序，其效率完全取决于优先级队列的实现方式；更具体一点，效率取决于优先级序列 <code>add</code> 和 <code>remove_min</code> 操作的复杂度。而对于堆，其插入和删除的复杂度均为 <code>O(log n)</code> 相对于 <code>O(n)</code> 复杂度高效的多。</p><ul><li>add 阶段：由于第 i 次 add 操作完成后堆有 i 个元组，所以第 i 次 add操作的时间复杂度 <code>O(log i)</code> 。因此，这一阶段整体的时间复杂度 <code>O(n log n)</code> ，但通过<strong>自底向上的构建堆</strong>，时间复杂度能够被提升到 <code>O(n)</code> 。</li><li>remove_min 阶段：第 j 次 remove_min 操作执行时堆中有 <code>(n - j + 1)</code> 个元组，因此第 j 次 remove_min 操作的时间复杂度为 <code>O(log (n - j + 1))</code> 。将所有这些 remove_min 操作累加起来，这一阶段的时间复杂度 <code>O(n log n)</code> 。</li></ul><p><strong>结论：当使用堆来实现优先级队列时，整个优先级队列排序算法的时间复杂度为 <code>O(n log n)</code> 。这个排序算法就称为堆排序。</strong></p><h4 id="3-3-1-简单实现堆排序">3.3.1 简单实现堆排序</h4><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utiles <span class="keyword">import</span> HeapPriorityQueue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">C</span>):</span><br><span class="line">    <span class="comment"># 特别地，利用了自底向上构建堆的初始化方法 O(n)</span></span><br><span class="line">    P = HeapPriorityQueue(C)  <span class="comment"># 见之前定义的 HeapPriorityQueue 类</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(C)):  <span class="comment"># O(n log n)</span></span><br><span class="line">        C[j] = P.remove_min()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;Heap Sort&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [<span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Initial list:&quot;</span>, l)</span><br><span class="line">    heap_sort(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After sort:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============== Heap Sort ===============</span></span><br><span class="line"><span class="comment"># Initial list: [7, 4, 8, 2, 5, 3]</span></span><br><span class="line"><span class="comment"># After sort: [2, 3, 4, 5, 7, 8]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-原地堆排序">3.3.2 原地堆排序</h4><p>更进一步，如果需要排序的对象也是用数组存储的，例如上面的例子。则可以原地进行堆排序，如此可以节省空间，也节省了申请一个新空间和摊销的时间成本：</p><ul><li>重新定义堆的操作，使其成为最大堆（maximum-oriented heap）（并不重要，仅仅影响是升序还是降序），即父节点键值不小于孩子节点；算法执行过程中，始终使用<strong>列表的左半部分表示堆，右半部分表示序列</strong>。</li><li>add 阶段：我们从一个空堆开始，从左向右移动堆与序列之间的边界，一次一步；每一步将序列中的下一个元素追加到堆中。</li><li>remove_add 阶段：我们从一个空的序列开始，从右向左移动堆与序列之间的边界，一次一步；每一步将最大值元素从堆中移除并存储到当前序列的最前方。</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743944140925.png" alt="原地堆排序图示" style="zoom: 45%;" /><p><strong>代码实现</strong>：同时实现了升序和降序，只需指定 <code>descend=False</code> 则为升序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heapsort</span>(<span class="params">arr, descend=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;原地堆排序&quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">downheap</span>(<span class="params">start, end</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从 start 开始向下冒泡，堆的范围是 [0, end)&quot;&quot;&quot;</span></span><br><span class="line">        parent = start</span><br><span class="line">        <span class="comment"># while True:</span></span><br><span class="line">        left = <span class="number">2</span> * parent + <span class="number">1</span></span><br><span class="line">        right = <span class="number">2</span> * parent + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> descend:</span><br><span class="line">            <span class="comment"># 从小到大，堆的根节点为 max</span></span><br><span class="line">            largest_child = parent</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left &lt; end <span class="keyword">and</span> arr[left] &gt; arr[largest_child]:</span><br><span class="line">                largest_child = left</span><br><span class="line">            <span class="keyword">if</span> right &lt; end <span class="keyword">and</span> arr[right] &gt; arr[largest_child]:</span><br><span class="line">                largest_child = right</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> largest_child == parent:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果父节点已经是最大的，停止</span></span><br><span class="line"></span><br><span class="line">            arr[parent], arr[largest_child] = arr[largest_child], arr[parent]</span><br><span class="line">            downheap(largest_child, end)  <span class="comment"># 继续向下冒泡</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 从大到小，堆的根节点为 min</span></span><br><span class="line">            smallest_child = parent</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left &lt; end <span class="keyword">and</span> arr[left] &lt; arr[smallest_child]:</span><br><span class="line">                smallest_child = left</span><br><span class="line">            <span class="keyword">if</span> right &lt; end <span class="keyword">and</span> arr[right] &lt; arr[smallest_child]:</span><br><span class="line">                smallest_child = right</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> smallest_child == parent:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果父节点已经是最小的，停止</span></span><br><span class="line"></span><br><span class="line">            arr[parent], arr[smallest_child] = arr[smallest_child], arr[parent]</span><br><span class="line">            downheap(smallest_child, end)  <span class="comment"># 继续向下冒泡</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 构建最大堆（从最后一个非叶子节点开始）</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n // <span class="number">2</span>) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># &lt;=&gt; 整个序列为一个暂未满足 heap-order 的堆，进行冒泡调整</span></span><br><span class="line">        downheap(i, n)  <span class="comment"># 自底向上的构建</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 排序阶段：每次将堆顶（最大值）交换到末尾，并向下冒泡</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        arr[<span class="number">0</span>], arr[i] = arr[i], arr[<span class="number">0</span>]  <span class="comment"># 交换堆顶和当前末尾</span></span><br><span class="line">        downheap(<span class="number">0</span>, i)  <span class="comment"># 向下冒泡</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;The Best! - In-place Heap Sort&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [<span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Initial list:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line">    heapsort(l, descend=<span class="literal">False</span>)  <span class="comment"># 从小到大</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sort not descend:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line">    heapsort(l, descend=<span class="literal">True</span>)  <span class="comment"># 从大到小</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sort descend:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============== The Best! - In-place Heap Sort ===============</span></span><br><span class="line"><span class="comment"># Initial list: [7, 4, 8, 2, 5, 3]</span></span><br><span class="line"><span class="comment"># sort not descend: [2, 3, 4, 5, 7, 8]</span></span><br><span class="line"><span class="comment"># sort descend: [8, 7, 5, 4, 3, 2]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计软件 R 语言学习笔记 (7) 统计量</title>
      <link href="/posts/46a852b4.html"/>
      <url>/posts/46a852b4.html</url>
      
        <content type="html"><![CDATA[<h1>描述统计：统计量</h1><p>在描述行统计中，除了统计图表，统计量可以定量的描述数据。本章介绍常见的统计量：均值、方差、标准差、中位数、四分位数、变异系数、IQR、极差、偏度、峰度、Q-Q 图。以及分类汇总函数 aggregate 。</p><h2 id="1-描述统计：统计量">1 描述统计：统计量</h2><p><strong>定性变量</strong>：频数、比例</p><p><strong>定量变量</strong>：集中信息、波动信息、形状信息</p><h3 id="1-1-集中信息">1.1 集中信息</h3><h4 id="1-1-1-样本均值">1.1.1 样本均值</h4><p>对于数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,\ x_2,\ \cdots,\ x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的<strong>样本均值</strong>为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><mi>n</mi></mfrac><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\bar{x} = \frac{x_1 + x_2 + \cdots + x_n}{n} = \frac{1}{n}\sum\limits_{i = 1}^n\ x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5678em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>缺点：均值容易受到极端值影响。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mean<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="1-1-2-中位数">1.1.2 中位数</h4><p><strong>样本中位数</strong>是对原始数据排序，位于数据中心的数据。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>M</mi><mi>E</mi><mi>D</mi></mrow></msub><mo>=</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow></msub><mspace width="1em"/><mi>o</mi><mi>r</mi><mspace width="1em"/><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow></msub><mo>+</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">x_{MED} = x_{(\frac{n+1}{2})}\quad or\quad (x_{(\frac{n}{2})} + x_{(\frac{n}{2} + 1)})/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">ME</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.237em;vertical-align:-0.487em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.7538em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.487em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.8198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.421em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.171em;vertical-align:-0.421em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.8198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.421em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/2</span></span></span></span></span></p><p>假设有定量数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,\ x_2,\ \cdots,\ x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，定义排序后的数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><mo>⋯</mo><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">x_{(1)} \leq x_{(2)} \leq \cdots \leq x_{(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9912em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9912em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7858em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>优点：稳健，不容易受到极端值影响。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">median<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="1-1-3-示例">1.1.3 示例</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">finalgrades <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span><span class="string">&quot;finalgrades.csv&quot;</span><span class="punctuation">)</span></span><br><span class="line">mydata <span class="operator">&lt;-</span> finalgrades<span class="punctuation">[</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">6</span><span class="operator">:</span><span class="number">9</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 均值</span></span><br><span class="line">grade.mean <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> mean<span class="punctuation">)</span></span><br><span class="line">grade.mean</span><br><span class="line"><span class="comment">#     政治     语文     数学     物理 </span></span><br><span class="line"><span class="comment"># 50.31056 81.64907 41.29503 24.76708 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 中位数</span></span><br><span class="line">grade.median <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> median<span class="punctuation">)</span></span><br><span class="line">grade.median</span><br><span class="line"><span class="comment"># 政治 语文 数学 物理 </span></span><br><span class="line"><span class="comment">#   51   84   40   24 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 左偏/右偏</span></span><br><span class="line">grade.mean <span class="operator">&gt;</span> grade.median</span><br><span class="line"><span class="comment">#  政治  语文  数学  物理 </span></span><br><span class="line"><span class="comment"># FALSE FALSE  TRUE  TRUE </span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/grades.png" alt=""></p><h3 id="1-2-波动信息">1.2 波动信息</h3><h4 id="1-2-1-方差-标准差">1.2.1 方差/标准差</h4><p><strong>样本方差</strong>：反映了所有数据离中心的平均的平方距离</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>s</mi><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">s^2 = \frac{1}{n-1}\sum\limits_{i=1}^n\ (x_i - \bar{x})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>样本标准差</strong>：近似反映了所有数据离中心的平均距离</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mo>=</mo><msqrt><msup><mi>s</mi><mn>2</mn></msup></msqrt><mo>=</mo><msqrt><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">s = \sqrt{s^2} = \sqrt{\frac{1}{n-1}\sum\limits_{i=1}^n\ (x_i - \bar{x})^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.0361em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0039em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9639em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0361em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1568em;vertical-align:-1.2777em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8791em;"><span class="svg-align" style="top:-5.1168em;"><span class="pstrut" style="height:5.1168em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8391em;"><span class="pstrut" style="height:5.1168em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.1968em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="3.1968em" viewBox="0 0 400000 3196" preserveAspectRatio="xMinYMin slice"><path d="M702 80H40000040H742v3062l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667219 661 l218 661zM702 80H400000v40H742z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sd<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-变异系数">1.2.2 变异系数</h4><p><strong>变异系数 Coefficient of Variation</strong> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">CV</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>) ：比较不同单位的数据的离散程度；比较单位相同而平均数相差较大的数据组资料的差异程度。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mi>V</mi><mo>=</mo><mfrac><mi>s</mi><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover></mfrac><mo>×</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">CV = \frac{s}{\bar{x}} \times 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> <span class="operator">*</span> sd<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="operator">/</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-四分位间距-极差">1.2.3 四分位间距/极差</h4><p><strong>四分位差</strong> (Inter - Quartile Range, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>Q</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">IQR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span></span></span></span>) ：中间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>50</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">50\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">50%</span></span></span></span> 数据的范围。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>Q</mi><mi>P</mi><mo>=</mo><msub><mi>Q</mi><mn>3</mn></msub><mo>−</mo><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">IQP = Q_3 - Q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">QP</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IQR<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>极差</strong> ：所有数据的范围</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mo>=</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">range = x_{(n)} - x_{(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9385em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7858em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-形状信息">1.3 形状信息</h3><h4 id="1-3-1-偏度">1.3.1 偏度</h4><p><strong>总体偏度</strong>的定义</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>k</mi><mi>e</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>E</mi><mtext> </mtext><mo stretchy="false">(</mo><mfrac><mrow><mi>X</mi><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac><msup><mo stretchy="false">)</mo><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">Skewness = E\ (\frac{X - \mu}{\sigma})^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">n</span><span class="mord mathnormal">ess</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>样本偏度</strong>的定义</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>g</mi><mn>1</mn></msub><mo>=</mo><mfrac><mi>n</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>⋅</mo><msup><mi>s</mi><mn>3</mn></msup></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">g_1 = \frac{n}{(n-1)(n-2)\cdot s^3} \sum\limits_{i=1}^n\ (x_i - \bar{x})^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p><p>偏度判断：</p><ul><li>对称：Skewness = 0</li><li>右偏：Skewness &gt; 0</li><li>左偏：Skewness &lt; 0</li></ul><h4 id="1-3-2-峰度">1.3.2 峰度</h4><p><strong>峰度</strong>反应了峰部的尖度，总体峰度的定义：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>K</mi><mi>u</mi><mi>r</mi><mi>t</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>=</mo><mi>E</mi><mtext> </mtext><mo stretchy="false">(</mo><mfrac><mrow><mi>X</mi><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac><msup><mo stretchy="false">)</mo><mn>4</mn></msup><mo>−</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">Kurtosis = E\ (\frac{X - \mu}{\sigma})^4 - 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">os</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></span></p><p><strong>样本峰度</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>g</mi><mn>2</mn></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo><mo>⋅</mo><msup><mi>s</mi><mn>4</mn></msup></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>4</mn></msup><mo>−</mo><mn>3</mn><mo>⋅</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">g_2 = \frac{n(n+1)}{(n-1)(n-2)(n-3)\cdot s^4}\sum\limits_{i=1}^n\ (x_i - \bar{x})^4 - 3\cdot \frac{(n-1)^2}{(n-2)(n-3)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4271em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>峰度判断：</p><ul><li><p>正态分布：Kurtosis = 0</p></li><li><p>峰度越大，高峰分布：两端数据多（厚尾），中间数据少，且集中在均值附近。</p></li><li><p>Kurtosis &gt; 0 ，与正态分布相比是高峰</p></li></ul><h4 id="1-3-3-R-语言实现">1.3.3 R 语言实现</h4><p>调用 <code>moments</code> 包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span><span class="string">&quot;moments&quot;</span><span class="punctuation">)</span></span><br><span class="line">grade.skewness <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> skewness<span class="punctuation">)</span></span><br><span class="line">grade.kurtosis <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> kurtosis<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">grade.skewness</span><br><span class="line"><span class="comment">#       政治       语文       数学       物理 </span></span><br><span class="line"><span class="comment"># -0.3105433 -0.6525492  0.5757198  0.5463615 </span></span><br><span class="line"></span><br><span class="line">grade.kurtosis  <span class="comment"># 没有减 3</span></span><br><span class="line"><span class="comment">#     政治     语文     数学     物理 </span></span><br><span class="line"><span class="comment"># 2.832892 3.416347 3.539414 3.308497 </span></span><br><span class="line"></span><br><span class="line">grade.kurtosis <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> kurtosis<span class="punctuation">)</span> <span class="operator">-</span> <span class="number">3</span></span><br><span class="line">grade.kurtosis</span><br><span class="line"><span class="comment">#       政治       语文       数学       物理 </span></span><br><span class="line"><span class="comment"># -0.1671077  0.4163471  0.5394144  0.3084971 </span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】：R 语言的 <code>kurtosis()</code> 函数没有进行 <code>- 3</code> 操作。</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kurtosis<span class="punctuation">(</span>rnorm<span class="punctuation">(</span><span class="number">10000</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 没有减 3</span></span><br><span class="line"><span class="comment"># [1] 2.999622</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-Q-Q-图">1.3.4 Q-Q 图</h4><p><strong>Q-Q Plot</strong> ：对于观测数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,\ x_2,\ \cdots,\ x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 对其排序后得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><mo>⋯</mo><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">x_{(1)} \leq x_{(2)} \leq \cdots \leq x_{(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9912em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9912em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7858em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span> ，它们的概率为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>j</mi><mi>n</mi></mfrac><mo>≈</mo><mfrac><mrow><mi>j</mi><mo>−</mo><mn>0.375</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>0.25</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(X \leq x_{(j)}) = \frac{j}{n} \approx \frac{j - 0.375}{n + 0.25}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0225em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1059em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.25</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.375</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>然后取出标准正态分布的分位数点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>F</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mfrac><mrow><mi>j</mi><mo>−</mo><mn>0.375</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>0.25</mn></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F^{-1}(\frac{j - 0.375}{n + 0.25})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3111em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9078em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">0.25</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">0.375</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span> 。绘制散点图：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>F</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mfrac><mrow><mi>j</mi><mo>−</mo><mn>0.375</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>0.25</mn></mrow></mfrac><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(F^{-1}(\frac{j - 0.375}{n + 0.25}),\ x_{(j)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1059em;vertical-align:-0.7693em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.25</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.375</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>若大致为线性关系/直线，则可以认为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 满足近似正态。</p><p><strong>R 语言实现</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> mydata<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">qqnorm<span class="punctuation">(</span>x<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Q-Q Plot&quot;</span><span class="punctuation">)</span></span><br><span class="line">qqline<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/qq.png" style="zoom:25%;" /><p>对于非正态的 Q-Q 图，有如下的例子：左边为右偏，右边为左偏</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743665372563.png" alt=""></p><h3 id="1-4-其他">1.4 其他</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fivenum<span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># 5 个分位数 min, q1, median, q3, max</span></span><br><span class="line">summary<span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># 5 个分位数 + mean</span></span><br><span class="line">quantile<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 5 个分位数 0%  25%  50%  75% 100%</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> fivenum<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">14</span> <span class="number">42</span> <span class="number">51</span> <span class="number">59</span> <span class="number">79</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> summary<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">   Min. <span class="number">1</span>st Qu.  Median    Mean <span class="number">3</span>rd Qu.    Max. </span><br><span class="line">  <span class="number">14.00</span>   <span class="number">42.00</span>   <span class="number">51.00</span>   <span class="number">50.31</span>   <span class="number">59.00</span>   <span class="number">79.00</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> quantile<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">  <span class="number">0</span><span class="operator">%  25%</span>  <span class="number">50</span><span class="operator">%  75%</span> <span class="number">100</span>% </span><br><span class="line">  <span class="number">14</span>   <span class="number">42</span>   <span class="number">51</span>   <span class="number">59</span>   <span class="number">79</span> </span><br></pre></td></tr></table></figure><h2 id="2-描述统计：分类汇总">2 描述统计：分类汇总</h2><h3 id="2-1-aggregate-函数">2.1 aggregate 函数</h3><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aggregate<span class="punctuation">(</span>x <span class="operator">~</span> by<span class="punctuation">,</span> FUN<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> data<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x<span class="operator">:</span> 列名，或是列序号，多个使用 cbind<span class="punctuation">(</span><span class="punctuation">)</span> 组合</span><br><span class="line">by<span class="operator">:</span> 分类依据的列名，多个使用 <span class="operator">+</span> 组合</span><br><span class="line">FUN<span class="operator">:</span> 表示整合的方式，传入函数</span><br><span class="line">na.rm<span class="operator">:</span> 如果为 <span class="literal">NA</span> 则直接删去行数据</span><br><span class="line">data<span class="operator">:</span> 操作的数据框</span><br></pre></td></tr></table></figure><h3 id="2-2-示例">2.2 示例</h3><p>例：按照 <code>city</code> 和 <code>R</code> 计算 <code>minimumpay, maximumpay, logmeanpay</code> 列的均值</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mydata <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span><span class="string">&quot;jobinfor201xE.csv&quot;</span><span class="punctuation">,</span> encoding <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span><span class="punctuation">)</span></span><br><span class="line">head<span class="punctuation">(</span>mydata<span class="punctuation">)</span></span><br><span class="line">str<span class="punctuation">(</span>mydata<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">aggregate<span class="punctuation">(</span>cbind<span class="punctuation">(</span>minimumpay<span class="punctuation">,</span> maximumpay<span class="punctuation">,</span> logmeanpay<span class="punctuation">)</span> <span class="operator">~</span> city <span class="operator">+</span> R<span class="punctuation">,</span> FUN <span class="operator">=</span> mean<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> data <span class="operator">=</span> mydata<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   city R minimumpay maximumpay logmeanpay</span><br><span class="line"><span class="number">1</span>  北京 <span class="number">0</span>   <span class="number">8245.586</span>  <span class="number">12548.425</span>   <span class="number">9.035330</span></span><br><span class="line"><span class="number">2</span>  河北 <span class="number">0</span>   <span class="number">4536.095</span>   <span class="number">6748.496</span>   <span class="number">8.521607</span></span><br><span class="line"><span class="number">3</span>  山西 <span class="number">0</span>   <span class="number">6045.913</span>   <span class="number">8798.888</span>   <span class="number">8.678785</span></span><br><span class="line"><span class="number">4</span>  陕西 <span class="number">0</span>   <span class="number">5225.994</span>   <span class="number">7964.530</span>   <span class="number">8.610160</span></span><br><span class="line"><span class="number">5</span>  上海 <span class="number">0</span>   <span class="number">7733.406</span>  <span class="number">11325.135</span>   <span class="number">9.018670</span></span><br><span class="line"><span class="number">6</span>  深圳 <span class="number">0</span>   <span class="number">7430.474</span>  <span class="number">11419.152</span>   <span class="number">9.001751</span></span><br><span class="line"><span class="number">7</span>  北京 <span class="number">1</span>   <span class="number">9533.537</span>  <span class="number">14261.561</span>   <span class="number">9.245172</span></span><br><span class="line"><span class="number">8</span>  河北 <span class="number">1</span>   <span class="number">4500.000</span>   <span class="number">5999.000</span>   <span class="number">8.565888</span></span><br><span class="line"><span class="number">9</span>  山西 <span class="number">1</span>   <span class="number">3500.000</span>   <span class="number">5499.500</span>   <span class="number">8.301702</span></span><br><span class="line"><span class="number">10</span> 陕西 <span class="number">1</span>   <span class="number">8318.182</span>  <span class="number">11226.455</span>   <span class="number">9.007055</span></span><br><span class="line"><span class="number">11</span> 上海 <span class="number">1</span>  <span class="number">10665.874</span>  <span class="number">16020.449</span>   <span class="number">9.388033</span></span><br><span class="line"><span class="number">12</span> 深圳 <span class="number">1</span>  <span class="number">10682.540</span>  <span class="number">16854.706</span>   <span class="number">9.418756</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> R 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R 语言 </tag>
            
            <tag> 统计软件 </tag>
            
            <tag> R programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的遍历算法</title>
      <link href="/posts/cb9a2247.html"/>
      <url>/posts/cb9a2247.html</url>
      
        <content type="html"><![CDATA[<h1>树的遍历算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p><strong>树的遍历</strong>常见方案：前序遍历 (preorder traversal) ，后序遍历 (postorder traversal) ，二叉树的中序遍历 (inorder traversal) ，层序遍历/广度优先遍历 (level order traversal/breadth-first traversal) 。</p><h2 id="1-树的遍历算法">1 树的遍历算法</h2><p>树的遍历（traversal）：按某种规则不重复地访问树的所有节点</p><ul><li>前序遍历（preorder traversal）：先访问根，再递归访问子树。如树有序，则按顺序访问子树。</li><li>后序遍历（postorder traversal） ：先递归访问子树，再访问根。如树有序，则按顺序访问子树</li><li>二叉树的中序遍历（inorder traversal）：先递归访问左孩子，再访问根节点，再递归访问右孩子。</li><li>层序遍历/广度优先遍历（level order traversal/breadth-first traversal）：按层为顺序遍历，每一层从左到右遍历。</li></ul><p>以二叉树的遍历算法为例，可直观的理解为：设二叉树由根𝐷 、左子树𝐿和右子树𝑅构成</p><ul><li>前序遍历：<code>D -&gt; L -&gt; R</code></li><li>后序遍历：<code>L -&gt; R -&gt; D</code></li><li>中序遍历：<code>L -&gt; D -&gt; R</code></li><li>层序遍历：从低到高逐层，从左到右遍历</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    D --&gt; L</span><br><span class="line">    D --&gt; R</span><br></pre></td></tr></table></figure><h3 id="1-1-深度优先">1.1 深度优先</h3><h4 id="1-1-1-前序遍历">1.1.1 前序遍历</h4><p>在树 T 的<strong>前序遍历</strong>中，首先访问 T 的根，然后递归地访问子树的根。如果这棵树是有序的，则根据孩子的顺序遍历子树。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Algorithm preOrder(T, p):</span><br><span class="line">visit(p)</span><br><span class="line"><span class="keyword">for</span> each child c <span class="keyword">in</span> T.children(p) do</span><br><span class="line">preOrder(T, c)</span><br></pre></td></tr></table></figure><p>可以递归理解：对每一个节点，逐步进行如下操作</p><ol><li>访问根节点</li><li>前序遍历左子树</li><li>前序遍历右子树</li></ol><p>例如：在打印章节时，按照章节顺序打印</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743585357300.png" alt="前序遍历"></p><h4 id="1-1-2-后序遍历">1.1.2 后序遍历</h4><p><strong>后序遍历</strong>可以看作相反的前序遍历，它优先遍历子树的根，即首先从孩子的根开始，然后访问根（因此叫作后序）。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Algorithm postOrder(T, p):</span><br><span class="line"><span class="keyword">for</span> each child c <span class="keyword">in</span> T.children(p) do</span><br><span class="line">postOrder(T, c)</span><br><span class="line">visit(p)</span><br></pre></td></tr></table></figure><p>可以递归理解：对每一个节点，逐步进行如下操作</p><ol><li>后序遍历左子树</li><li>后序遍历右子树</li><li>访问根节点</li></ol><p>例如：反向打印章节</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743585587312.png" alt="后序遍历"></p><h4 id="1-1-3-二叉树的中序遍历">1.1.3 二叉树的中序遍历</h4><p>在<strong>中序遍历</strong>中，我们通过递归遍历左右子树后再访问根节点。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Algorithm inOrder(T, p):</span><br><span class="line"><span class="keyword">if</span> p has a left child lc then</span><br><span class="line">inOrder(T, lc)</span><br><span class="line">visit(p)</span><br><span class="line"><span class="keyword">if</span> p has a right child rc then</span><br><span class="line">inOrder(T, rc)</span><br></pre></td></tr></table></figure><p>可以递归理解：对每一个节点，逐步进行如下操作</p><ol><li>中序遍历左子树</li><li>访问根节点</li><li>中序遍历右子树</li></ol><p>例如：表达式树</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743586675803.png" alt="中序遍历" style="zoom:50%;" /><h4 id="1-1-4-算法分析">1.1.4 算法分析</h4><p>前/中/后序遍历均为<strong>深度优先</strong>遍历算法，可用递归实现，也可用模拟递归栈的方式进行非递归实现。</p><p>递归栈的最大深度和树的深度保持一致：</p><ul><li>最好情况，空间复杂度 <code>O(log n)</code> 。</li><li>最坏情况，空间复杂度 <code>O(n)</code> 。</li></ul><p>因为是遍历，所以时间复杂度为 <code>O(n)</code> 。</p><h3 id="1-2-广度优先：层序遍历">1.2 广度优先：层序遍历</h3><p>用<strong>广度优先</strong>遍历算法，即<strong>层序遍历</strong>算法。在访问深度 d 的位置之前先访问深度 d+1 的位置。按照层次自低向高，每层从左向右访问。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Algorithm breadthfirst(T):</span><br><span class="line">    Initialize queue Q to contain T.root()</span><br><span class="line">    <span class="keyword">while</span> Q <span class="keyword">not</span> empty do</span><br><span class="line">        p = Q.dequeue()</span><br><span class="line">        visit(p)</span><br><span class="line">        <span class="keyword">for</span> each child c <span class="keyword">in</span> T.children(p) do</span><br><span class="line">        Q.enqueue(c)</span><br></pre></td></tr></table></figure><p>无法用递归实现，借助队列理解：</p><ul><li>先将根节点入队</li><li>每出队一个节点，将其孩子节点依次放入队列</li></ul><p>例如：下面实现了对一个树的逐步层序遍历。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743587103579.png" alt="层序遍历" style="zoom:50%;" /><h2 id="2-Python-实现树遍历">2 Python 实现树遍历</h2><p>首先，继续上一章 <a href="https://blog.iskage.online/posts/7542010b.html#1-5-%E6%A0%91%E7%9A%84%E5%9F%BA%E7%B1%BB-Python-%E5%AE%9E%E7%8E%B0">树与二叉树</a> 定义的 <code>Tree</code> 类进行补充。先定义 <code>__iter__</code> 方法，产生迭代器，其中的 <code>positions()</code> 方法就可以用于指代不同的遍历方式。这个迭代器只是可以使用 <code>for i in obj</code> 的方式直接获取 <code>element</code> 值，而非 <code>Position</code> 节点类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义迭代器：遍历方式可选&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.positions():  <span class="comment"># positions() 可选不同的遍历方式</span></span><br><span class="line">        <span class="keyword">yield</span> p.element()</span><br></pre></td></tr></table></figure><h3 id="2-1-前序遍历">2.1 前序遍历</h3><p>在 <code>Tree</code> 类后继续补充 <code>preorder</code> 方法和 <code>_subtree_preorder</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;前序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_preorder(<span class="variable language_">self</span>.root()):  <span class="comment"># 递归实现</span></span><br><span class="line">            <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_subtree_preorder</span>(<span class="params">self, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;前序遍历子树&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> p  <span class="comment"># 访问根节点</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p):  <span class="comment"># 遍历子树</span></span><br><span class="line">        <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_preorder(c):</span><br><span class="line">            <span class="keyword">yield</span> other</span><br></pre></td></tr></table></figure><p>然后知道 <code>positions()</code> 方法为 <code>preorder()</code> 前序遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">positions</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;指定遍历方法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.preorder()</span><br></pre></td></tr></table></figure><p>或者直接继承 <code>Tree</code> 父类，覆写子类 <code>PreorderTree</code> 类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PreorderTree</span>(<span class="title class_ inherited__">Tree</span>):</span><br><span class="line">    <span class="comment"># ---------------- 遍历算法 ----------------</span></span><br><span class="line">    <span class="comment"># 迭代器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义迭代器：遍历方式可选&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.positions():  <span class="comment"># positions() 可选不同的遍历方式</span></span><br><span class="line">            <span class="keyword">yield</span> p.element()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;前序遍历&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_preorder(<span class="variable language_">self</span>.root()):  <span class="comment"># 递归实现</span></span><br><span class="line">                <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_subtree_preorder</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;前序遍历子树&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">yield</span> p  <span class="comment"># 访问根节点</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p):  <span class="comment"># 遍历子树</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_preorder(c):</span><br><span class="line">                <span class="keyword">yield</span> other</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">positions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;指定遍历方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.preorder()</span><br></pre></td></tr></table></figure><h3 id="2-2-后序遍历">2.2 后序遍历</h3><p>同理，为清晰展示，后面采用继承的方法，子类覆写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostorderTree</span>(<span class="title class_ inherited__">Tree</span>):</span><br><span class="line">    <span class="comment"># ---------------- 遍历算法 ----------------</span></span><br><span class="line">    <span class="comment"># 迭代器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义迭代器：遍历方式可选&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.positions():  <span class="comment"># positions() 可选不同的遍历方式</span></span><br><span class="line">            <span class="keyword">yield</span> p.element()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorder</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;后序遍历&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_postorder(<span class="variable language_">self</span>.root()):  <span class="comment"># 开始递归</span></span><br><span class="line">                <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_subtree_postorder</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;后序遍历子树&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p):  <span class="comment"># 后序遍历子树</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_postorder(c):</span><br><span class="line">                <span class="keyword">yield</span> other</span><br><span class="line">        <span class="keyword">yield</span> p  <span class="comment"># 访问根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">positions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;指定遍历方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.postorder()</span><br></pre></td></tr></table></figure><h3 id="2-3-二叉树的中序遍历">2.3 二叉树的中序遍历</h3><p>此处是在二叉树类 <code>BinaryTree</code> 类中实现，见  <a href="https://blog.iskage.online/posts/7542010b.html#2-6-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0">树与二叉树</a> 。为简单起见，也采用继承 <code>BinaryTree</code> 的方式定义一个新的类 <code>InorderTree</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InorderTree</span>(<span class="title class_ inherited__">BinaryTree</span>):</span><br><span class="line">    <span class="comment"># ---------------- 遍历算法 ----------------</span></span><br><span class="line">    <span class="comment"># 迭代器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义迭代器：遍历方式可选&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.positions():  <span class="comment"># positions() 可选不同的遍历方式</span></span><br><span class="line">            <span class="keyword">yield</span> p.element()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorder</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;中序遍历&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_inorder(<span class="variable language_">self</span>.root()):  <span class="comment"># 递归实现</span></span><br><span class="line">                <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_subtree_inorder</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;中序遍历子树&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.left(p) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 遍历左子树</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_inorder(<span class="variable language_">self</span>.left(p)):</span><br><span class="line">                <span class="keyword">yield</span> other</span><br><span class="line">        <span class="keyword">yield</span> p  <span class="comment"># 访问根节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.right(p) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 遍历右子树</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_inorder(<span class="variable language_">self</span>.right(p)):</span><br><span class="line">                <span class="keyword">yield</span> other</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">positions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;指定遍历方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.inorder()</span><br></pre></td></tr></table></figure><h3 id="2-4-广度优先：层序遍历">2.4 广度优先：层序遍历</h3><p>为简单起见，直接在 <code>Tree</code> 基础类中加入新方法 <code>breadthfirst</code> 。其中 <code>LinkedQueue</code> 类是用链表实现的队列结构，具体可见 <a href="https://blog.iskage.online/posts/583f8c56.html#4-%E5%9F%BA%E4%BA%8E%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0">队列 Queue</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">breadthfirst</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;广度优先：层序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">        fringe = LinkedQueue()  <span class="comment"># 队列实现</span></span><br><span class="line">        fringe.enqueue(<span class="variable language_">self</span>.root())  <span class="comment"># 根节点入队</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> fringe.is_empty():</span><br><span class="line">            p = fringe.dequeue()  <span class="comment"># 取出头部</span></span><br><span class="line">            <span class="keyword">yield</span> p  <span class="comment"># 生成</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p):  <span class="comment"># 将子节点入队</span></span><br><span class="line">                fringe.enqueue(c)</span><br></pre></td></tr></table></figure><h2 id="3-树的遍历的应用">3 树的遍历的应用</h2><h3 id="3-1-前序遍历：目录表">3.1 前序遍历：目录表</h3><p>树的前序遍历可以自然地被用于产生文档或书籍的目录表：</p><ul><li>如不需要缩进，则可直接使用<strong>前序遍历</strong>打印目录表</li><li>如需要缩进，则需要定义一个特殊的前序遍历函数</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743596275805.png" alt="通过前序遍历打印目录表" style="zoom:45%;" /><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder_indent</span>(<span class="params">T, p, d</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;前序遍历：打印目录</span></span><br><span class="line"><span class="string">    :param T: 目录树</span></span><br><span class="line"><span class="string">    :param p: 当前节点</span></span><br><span class="line"><span class="string">    :param d: 记录深度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span> * d * <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(p.element()))  <span class="comment"># 记录深度</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> T.children(p):</span><br><span class="line">        preorder_indent(T, c, d + <span class="number">1</span>)  <span class="comment"># 递归打印子树</span></span><br></pre></td></tr></table></figure><h3 id="3-2-后序遍历：计算磁盘空间">3.2 后序遍历：计算磁盘空间</h3><p>计算磁盘空间：</p><ul><li>计算磁盘空间需要将文件系统表示为树后，使用<strong>后序遍历</strong></li><li>需要定义一个特殊的后序遍历函数记录当前占有的存储空间</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743597039347.png" alt="后序遍历计算磁盘空间"></p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_space</span>(<span class="params">T, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算文件系统树，p 节点后的总磁盘空间</span></span><br><span class="line"><span class="string">    :param T: 文件系统树</span></span><br><span class="line"><span class="string">    :param p: 当前节点</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    subtotal = p.element().space()  <span class="comment"># 节点 p 占有的空间</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> T.children(p):  <span class="comment"># 计算 p 的子树总空间</span></span><br><span class="line">        subtotal += disk_space(T, c)  <span class="comment"># 递归计算子树空间</span></span><br><span class="line">    <span class="keyword">return</span> subtotal</span><br></pre></td></tr></table></figure><h3 id="3-3-中序遍历：打印表达式">3.3 中序遍历：打印表达式</h3><p>表达式树是一棵<strong>二叉树</strong>，使用表达式树输出表达式需要一种特殊的<strong>中序遍历</strong>算法：</p><ul><li>访问节点时输出节点存储的值或运算符</li><li>遍历左子树前输出 <code>(</code></li><li>遍历右子树后输出 <code>)</code></li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743586675803.png" alt="中序遍历打印表达式" style="zoom:50%;" /><p><strong>伪代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm printExpression(v)：</span><br><span class="line">    <span class="keyword">if</span> v has a left child</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">        printExpression(left(v))</span><br><span class="line">    <span class="built_in">print</span>(v.element())</span><br><span class="line">    <span class="keyword">if</span> v has a right child</span><br><span class="line">        printExpression(right(v))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;)&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-4-后序遍历：计算表达式">3.4 后序遍历：计算表达式</h3><p>使用表达式树计算表达式的值需要一种特殊的<strong>后序遍历</strong>：</p><ul><li>使用递归返回子树的值</li><li>访问内部节点时，使用内部节点的运算符对左、右子树的值做运算</li></ul><p><strong>伪代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm evalExpr(v):</span><br><span class="line">    <span class="keyword">if</span> is_leaf (v)</span><br><span class="line">    <span class="keyword">return</span> v.element()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x = evalExpr(left(v))</span><br><span class="line">        y = evalExpr(right(v))</span><br><span class="line">        op = operator stored at v</span><br><span class="line">    <span class="keyword">return</span> x  y</span><br></pre></td></tr></table></figure><h3 id="3-5-后序遍历：剪去值为-0-的子树">3.5 后序遍历：剪去值为 0 的子树</h3><p>给定一棵二叉树，假设其根节点为 <code>root</code> ，此二叉树的所有节点为 <code>0</code> 或 <code>1</code> 。请剪除该二叉树中所有节点的值均为 <code>0</code> 的子树。即若对于 p 节点，它的子节点 q 和以 q 为根节点的子树的值均为 0 ，则删去 q 子树。</p><p><strong>后序遍历</strong>：先对子树进行剪枝、再对当前节点进行剪枝。</p><p>例如：原始左边的树被剪为右边的树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span><span class="number">1</span></span><br><span class="line">   / \ \</span><br><span class="line">  <span class="number">0</span>   <span class="number">1</span>        -&gt;         <span class="number">1</span></span><br><span class="line"> / \ / \   \</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span> <span class="number">0</span>  <span class="number">1</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>代码实现</p><p>为简单起见，先定义节点类（右视图同样沿用这个定义）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">1</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.left = left</span><br><span class="line">        <span class="variable language_">self</span>.right = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_left</span>(<span class="params">self, val</span>):</span><br><span class="line">        new = TreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.left <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.left = new</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_right</span>(<span class="params">self, val</span>):</span><br><span class="line">        new = TreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.right = new</span><br><span class="line">        <span class="keyword">return</span> new</span><br></pre></td></tr></table></figure><p>剪枝函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pruneTree</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">should_prune</span>(<span class="params">node: TreeNode</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理左子树</span></span><br><span class="line">        left_prune = should_prune(node.left)  <span class="comment"># 递归查看是否能剪枝</span></span><br><span class="line">        <span class="keyword">if</span> left_prune:</span><br><span class="line">            node.left = <span class="literal">None</span>  <span class="comment"># 剪去</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理右子树</span></span><br><span class="line">        right_prune = should_prune(node.right)  <span class="comment"># 递归查看是否能剪枝</span></span><br><span class="line">        <span class="keyword">if</span> right_prune:</span><br><span class="line">            node.right = <span class="literal">None</span>  <span class="comment"># 剪去</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断当前节点是否可以被剪掉</span></span><br><span class="line">        <span class="keyword">return</span> node.val == <span class="number">0</span> <span class="keyword">and</span> node.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> node.right <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> should_prune(root):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># root 也被剪去</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=============== Before Prune ===============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">=============== After pruning ===============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-6-树的右视图：深度-广度优先">3.6 树的右视图：深度/广度优先</h3><p>给定一棵<strong>二叉树</strong>，假设其根节点为 <code>root</code> 。想象站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值（即二叉树的“右视图”）。</p><p><strong>思路 1：深度优先搜索</strong></p><ul><li>使用特殊的<strong>前序遍历</strong>：先访问右子树、再访问左子树</li><li>遍历时，同时记录当前节点深度，以及一个记录在不同深度碰到的第一个节点的数组</li><li>遍历结束后，数组中的结果即为树的“右视图”</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DFS_rightSideView</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">    result = []  <span class="comment"># 存放右视图</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node, depth</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> depth == <span class="built_in">len</span>(result):</span><br><span class="line">            result.append(node.val)  <span class="comment"># 最右一个元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        dfs(node.right, depth + <span class="number">1</span>)</span><br><span class="line">        dfs(node.left, depth + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    dfs(root, <span class="number">0</span>)  <span class="comment"># 初始 root 根节点</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=============== Initial Tree ===============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line">=============== Right Side View ===============</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>思路 2：广度优先搜索</strong></p><ul><li>使用特殊的<strong>层序遍历</strong>，每一层最后一个访问的节点即为树“右视图”中能看到的该层节点</li><li>使用队列作为辅助结构，可以同时记录下当前深度，或用不同队列记录不同层的遍历结果</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BFS_rightSideView</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    result = []  <span class="comment"># 存放右视图</span></span><br><span class="line">    queue = [root]  <span class="comment"># 辅助队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:  <span class="comment"># 队列非空</span></span><br><span class="line">        size = <span class="built_in">len</span>(queue)  <span class="comment"># 树这一层的节点数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">            node = queue.pop(<span class="number">0</span>)  <span class="comment"># 头部出队</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i == size - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 最后一个节点：进入右视图结果列表 result</span></span><br><span class="line">                result.append(node.val)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 否则子树进队</span></span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                queue.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                queue.append(node.right)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=============== Initial Tree ===============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line">=============== Right Side View ===============</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（11）MySQL 数据类型</title>
      <link href="/posts/42004b0.html"/>
      <url>/posts/42004b0.html</url>
      
        <content type="html"><![CDATA[<h1>MySQL 数据类型</h1><p>本章详细的介绍了 MySQL 中主要的数据类型，包括：整数类型、浮点类型、定点数类型、位类型、日期时间类型、文本字符串类型、枚举类型、集合类型、二进制字符串类型、JSON 类型。并详细介绍了它们的使用和区别，以及实际中的选择。</p><h2 id="1-MySQL-的数据类型">1 MySQL 的数据类型</h2><h3 id="1-1-常见的数据类型">1.1 常见的数据类型</h3><p>对于任何一个数据表，每一行的每一列对应的元素都是下列数据类型的一种。</p><table><thead><tr><th>类型</th><th>关键字</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code> <code>SMALLINT</code> <code>MEDIUMINT</code> <code>INT</code> (<code>INTEGER</code>) <code>BIGINT</code></td></tr><tr><td>浮点类型</td><td><code>FLOAT</code> <code>DOUBLE</code></td></tr><tr><td>定点数类型</td><td><code>DECIMAL</code></td></tr><tr><td>位类型</td><td><code>BIT</code></td></tr><tr><td>日期时间类型</td><td><code>YEAR</code> <code>TIME</code> <code>DATE</code> <code>DATETIME</code> <code>TIMESTAMP</code></td></tr><tr><td>文本字符串类型</td><td><code>CHAR</code> <code>VARCHAR</code> <code>TINYTEXT</code> <code>TEXT</code> <code>MEDIUMTEXT</code> <code>LONGTEXT</code></td></tr><tr><td>枚举类型</td><td><code>ENUM</code></td></tr><tr><td>集合类型</td><td><code>SET</code></td></tr><tr><td>二进制字符串类型</td><td><code>BINARY</code> <code>VARBINARY</code> <code>TINYBLOB</code> <code>BLOB</code> <code>MEDIUMBLOB</code> <code>LONGBLOB</code></td></tr><tr><td>JSON 类型</td><td><code>JSON对象</code> <code>JSON 数组</code></td></tr><tr><td>空间数据类型 (单值类型)</td><td><code>GEOMETRY</code> <code>POINT</code> <code>LINESTRING</code> <code>POLYGON</code></td></tr><tr><td>空间数据类型 (集合类型)</td><td><code>MULTIPOINT</code> <code>MULTILINESTRING</code> <code>MULTIPOLYGON</code> <code>GEOMETRYCOLLECTION</code></td></tr></tbody></table><h3 id="1-2-常见数据类型的属性">1.2 常见数据类型的属性</h3><p>在常见数据表时，除了可以指定列的数据类型，还可以指定列的属性。</p><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td><code>NULL</code></td><td>数据列可包含 NULL 值</td></tr><tr><td><code>NOT NULL</code></td><td>数据列不允许包含 NULL 值</td></tr><tr><td><code>DEFAULT</code></td><td>默认值</td></tr><tr><td><code>PRIMARY KEY</code></td><td>主键</td></tr><tr><td><code>AUTO_INCREMENT</code></td><td>自动递增，适用于整数类型</td></tr><tr><td><code>UNSIGNED</code></td><td>无符号</td></tr><tr><td><code>CHARACTER SET name</code></td><td>指定一个字符集</td></tr></tbody></table><p><strong>下面分门别类的介绍这些数据类型：</strong></p><h2 id="2-整数类型">2 整数类型</h2><p><strong>整数类型</strong>一共有 5 种，分别是：<code>TINYINT</code> <code>SMALLINT</code> <code>MEDIUMINT</code> <code>INT</code> (<code>INTEGER</code>) <code>BIGINT</code> 。下面的表展示了他们的区别和特征。</p><h3 id="2-1-整数类型概述">2.1 整数类型概述</h3><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td><code>1</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">-2^7 \sim 2^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><code>SMALLINT</code></td><td><code>2</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15} \sim 2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><code>MEDIUMINT</code></td><td><code>3</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>23</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>23</mn></msup></mrow><annotation encoding="application/x-tex">-2^{23} \sim 2^{23}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>24</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^{24}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">24</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><code>INT</code></td><td><code>4</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31} \sim 2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><code>BIGINT</code></td><td><code>8</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63} \sim 2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">64</span></span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table><h3 id="2-2-可选属性">2.2 可选属性</h3><p>整数类型有 3 个可选属性：<code>M</code> <code>UNSIGNED</code> <code>ZEROFILL</code></p><h4 id="2-2-1-M-显示宽度">2.2.1 M 显示宽度</h4><p><code>M</code> : 表示显示宽度，取值范围是 <code>(0, 255)</code> 。例如，<code>int(5)</code> 表示当数据宽度小于 5 位的时候在数字前面需要用字符填满宽度。必须配合 <code>ZEROFILL</code> 表示用 <code>0</code> 填充，否则指定显示宽度无效。</p><blockquote><p>如果数据宽度超过显示宽度限制，不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存。</p></blockquote><p>不过，对于 <code>MySQL8.0</code> ，整数数据类型【不推荐】使用显示宽度属性。如果不指定，则系统为每一种类型指定默认的宽度值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_int1</span><br><span class="line">(</span><br><span class="line">    x TINYINT,</span><br><span class="line">    y <span class="type">SMALLINT</span>,</span><br><span class="line">    z MEDIUMINT,</span><br><span class="line">    m <span class="type">INT</span>,</span><br><span class="line">    n <span class="type">BIGINT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_int1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> x     <span class="operator">|</span> tinyint   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> y     <span class="operator">|</span> <span class="type">smallint</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> z     <span class="operator">|</span> mediumint <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> m     <span class="operator">|</span> <span class="type">int</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> n     <span class="operator">|</span> <span class="type">bigint</span>    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>在 MySQL 8.0 中，不再推荐显式的使用 <code>M</code> 显示宽度属性。</p><h4 id="2-2-2-UNSIGNED-无符号类型-非负">2.2.2 UNSIGNED 无符号类型 (非负)</h4><p><code>UNSIGNED</code> ：无符号类型（非负），无符号整数类型的最小取值为 <code>0</code> 。所以，如果需要保存非负整数值时，可以将整数类型设置为无符号类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_int3</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">INT</span> UNSIGNED</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_int3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1    <span class="operator">|</span> <span class="type">int</span> unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-2-3-ZEROFILL-0-填充">2.2.3 ZEROFILL 0 填充</h4><p><code>ZEROFILL</code> ：0填充，（如果某列设置了 ZEROFILL 属性，那么 MySQL 会自动为当前列添加 UNSIGNED 属性），ZEROFILL 只是表示不够 M 位时，用 0 在左边填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_int2</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">INT</span>,</span><br><span class="line">    f2 <span class="type">INT</span>(<span class="number">5</span>),</span><br><span class="line">    f3 <span class="type">INT</span>(<span class="number">5</span>) ZEROFILL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_int2(f1, f2, f3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">123</span>, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_int2(f1, f2)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">123456</span>, <span class="number">123456</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_int2(f1, f2, f3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">123456</span>, <span class="number">123456</span>, <span class="number">123456</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_int2;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> f1     <span class="operator">|</span> f2     <span class="operator">|</span> f3     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">123</span> <span class="operator">|</span>  <span class="number">00123</span> <span class="operator">|</span>  <span class="comment">-- 填充 0</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span>  <span class="comment">-- 超过显示宽度不影响</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="3-浮点类型">3 浮点类型</h2><p>浮点数和定点数类型的都可以处理<strong>小数</strong>。MySQL 支持的浮点数类型，分别是 <code>FLOAT</code> <code>DOUBLE</code> <code>REAL</code> 。</p><h3 id="3-1-浮点类型概述">3.1 浮点类型概述</h3><ul><li><p><code>FLOAT</code> 表示单精度浮点数；</p></li><li><p><code>DOUBLE</code> 表示双精度浮点数；</p></li><li><p><code>REAL</code> 默认就是 <code>DOUBLE</code> 。</p></li></ul><blockquote><p>若启用 <code>REAL_AS_FLOAT</code> 则 MySQL 就认为 <code>REAL</code> 是 <code>FLOAT</code> 。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> sql_mode <span class="operator">=</span> &quot;REAL_AS_FLOAT&quot;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>类型</th><th>占有字节数</th></tr></thead><tbody><tr><td><code>FLOAT</code></td><td><code>4</code></td></tr><tr><td><code>DOUBLE</code></td><td><code>8</code></td></tr></tbody></table><h3 id="3-2-数据精度【不推荐使用】">3.2 数据精度【不推荐使用】</h3><p>使用 <code>FLOAT(M, D)</code> 或 <code>DOUBLE(M, D)</code> 可以指定浮点数的精度：<code>M</code> 代表<strong>整数位+小数位</strong>，<code>D</code>  代表<strong>小数位</strong>。</p><ul><li>如果存储时，整数部分超出了范围，MySQL 就会报错，不允许存这样的值</li><li>如果存储时，小数点部分若超出范围，则观察四舍五路后是否满足</li></ul><blockquote><p>从 MySQL 8 开始，<code>FLOAT(M, D)</code> 和 <code>DOUBLE(M, D)</code> 用法在官方文档中已经明确【不推荐使用】。另外，关于浮点型的 <code>UNSIGNED</code> 也【不推荐使用】。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_double1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">FLOAT</span>,</span><br><span class="line">    f2 <span class="type">FLOAT</span>(<span class="number">5</span>, <span class="number">2</span>),</span><br><span class="line">    f3 <span class="keyword">DOUBLE</span>,</span><br><span class="line">    f4 <span class="keyword">DOUBLE</span>(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_double1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1    <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f2    <span class="operator">|</span> <span class="type">float</span>(<span class="number">5</span>,<span class="number">2</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f3    <span class="operator">|</span> <span class="keyword">double</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f4    <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>存储报错/警告情况：超出范围</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT INTO</span> test_double1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span> (<span class="number">123.456</span>, <span class="number">1234.456</span>, <span class="number">123.4567</span>, <span class="number">123.45</span>);</span><br><span class="line">ERROR <span class="number">1264</span> (<span class="number">22003</span>): <span class="keyword">Out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;f2&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>正常插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_double1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">123.456</span>, <span class="number">123.456</span>, <span class="number">123.4567</span>, <span class="number">123.45</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> test_double1;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> f1      <span class="operator">|</span> f2     <span class="operator">|</span> f3       <span class="operator">|</span> f4     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123.456</span> <span class="operator">|</span> <span class="number">123.46</span> <span class="operator">|</span> <span class="number">123.4567</span> <span class="operator">|</span> <span class="number">123.45</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-精度误差">3.3 精度误差</h3><p>采用浮点数存储小数会出现明显的精度误差，因为浮点数采用二进制的方式存储小数。以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9.625</mn></mrow><annotation encoding="application/x-tex">9.625</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9.625</span></span></span></span> 为例，其在 MySQL 的浮点数的存储方式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1001.101</mn></mrow><annotation encoding="application/x-tex">1001.101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1001.101</span></span></span></span> 即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.001101</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1.001101 \times 2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.001101</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 。此时如果结尾不是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mn>5</mn></mrow><annotation encoding="application/x-tex">0,\ 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span></span></span></span> ，则无法用二进制精确表达。</p><p>因此，如果用到浮点数，由于浮点数是不准确的，所以避免使用 <code>==</code> 判断两个浮点数是否相等。在一些对精确度要求较高的项目中，不要使用浮点数。</p><p>使用 MySQL 中精准的数据类型：<strong>定点数类型</strong> <code>DECIMAL</code> 。</p><h2 id="4-定点数类型">4 定点数类型</h2><h3 id="4-1-定点数概述">4.1 定点数概述</h3><p>使用 <code>DECIMAL(M, D)</code> 的方式表示<strong>高精度小数</strong>。其中，<code>M</code> 被称为精度，<code>D</code> 被称为标度。其中范围为 <code>0 &lt;= M &lt;= 65</code>  <code>0 &lt;= D &lt;= 30</code> <code>D &lt; M</code> 。例如， <code>DECIMAL(5, 2)</code> 表示该列取值范围是 <code>-999.99~999.99</code> 。</p><table><thead><tr><th>类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td><code>DECIMAL(M, D)</code></td><td><code>M+2</code> 字节</td><td>有效范围由 <code>M</code> 和 <code>D</code> 决定</td></tr></tbody></table><h3 id="4-2-精度">4.2 精度</h3><p><code>DECIMAL(M, D)</code> 的最大取值范围与 <code>DOUBLE</code> 类型一样，但是有效的数据范围是由 <code>M</code> 和 <code>D</code> 决定的</p><ul><li><code>DECIMAL</code> 的存储空间并不是固定的，由精度值 <code>M</code> 决定，总共占用的存储空间为 <code>M+2</code> 个字节。</li><li>定点数在 MySQL 内部以 <code>字符串</code> 的形式进行存储，这就决定了它一定是精准的。</li><li>当 <code>DECIMAL</code> 类型不指定精度和标度时，其默认为 <code>DECIMAL(10, 0)</code> 。当数据的精度超出了定点数类型的精度范围时，同样会进行四舍五入处理。</li></ul><p>浮点数 vs 定点数</p><ul><li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景。</li><li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_decimal1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">DECIMAL</span>,</span><br><span class="line">    f2 <span class="type">DECIMAL</span>(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_decimal1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type          <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1    <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f2    <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="5-位类型">5 位类型</h2><p><code>BIT</code> 类型中存储的是<strong>二进制值</strong>。</p><h3 id="5-1-位类型概述">5.1 位类型概述</h3><table><thead><tr><th>类型</th><th>长度</th><th>长度范围</th><th>占有空间</th></tr></thead><tbody><tr><td><code>BIT(M)</code></td><td><code>M</code></td><td><code>1 &lt;= M &lt;= 64</code></td><td>约 <code>(M + 7) / 8</code> 个字节</td></tr></tbody></table><p>位数 <code>M</code> 的含义：</p><ul><li><p><code>BIT</code> 类型，如果没有指定 <code>M</code> ，默认是 <code>1</code> 位，表示只能存 <code>1</code> 位的二进制值。</p></li><li><p><code>M</code> 是表示二进制的位数，位数最小值为 <code>1</code> ，最大值为 <code>64</code> 。</p></li></ul><h3 id="5-2-实际使用">5.2 实际使用</h3><p>创建表并指定属性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_bit1</span><br><span class="line">(</span><br><span class="line">    f1 BIT,</span><br><span class="line">    f2 BIT(<span class="number">5</span>),</span><br><span class="line">    f3 BIT(<span class="number">64</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_bit1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type    <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1    <span class="operator">|</span> bit(<span class="number">1</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f2    <span class="operator">|</span> bit(<span class="number">5</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f3    <span class="operator">|</span> bit(<span class="number">64</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>在向 <code>BIT</code> 类型的字段中插入数据时，一定要确保插入的数据在 <code>BIT</code> 类型支持的范围内，即位数不可超过 <code>M</code> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT INTO</span> test_bit1(f1)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line">ERROR <span class="number">1406</span> (<span class="number">22001</span>): Data too long <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;f1&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用 <code>SELECT</code> 命令查询位字段时，可以用 <code>BIN()</code> 或 <code>HEX()</code> 或 <code>+ 0</code> 的方法进行读取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_bit1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> f1         <span class="operator">|</span> f2         <span class="operator">|</span> f3         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x01</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="number">0x17</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x01</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BIN(f2), HEX(f2), f2 <span class="operator">+</span> <span class="number">0</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> test_bit1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> BIN(f2) <span class="operator">|</span> HEX(f2) <span class="operator">|</span> f2 <span class="operator">+</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10111</span>   <span class="operator">|</span> <span class="number">17</span>      <span class="operator">|</span>     <span class="number">23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><code>BIN()</code> 查看二进制；<code>HEX()</code> 查看十六进制；<code>+ 0</code> 间接转换为十进制。</p></blockquote><h2 id="6-日期与时间类型">6 日期与时间类型</h2><p><strong>日期和时间类型</strong>主要有：<code>YEAR</code> <code>TIME</code> <code>DATE</code> <code>DATETIME</code> <code>TIMESTAMP</code></p><ul><li><code>YEAR</code> 类型通常用来表示 年</li><li><code>DATE</code> 类型通常用来表示 年、月、日</li><li><code>TIME</code> 类型通常用来表示 时、分、秒</li><li><code>DATETIME</code> 类型通常用来表示 年、月、日、时、分、秒</li><li><code>TIMESTAMP</code> 类型通常用来表示 带时区的年、月、日、时、分、秒</li></ul><h3 id="6-1-日期与时间类型概述">6.1 日期与时间类型概述</h3><table><thead><tr><th>类型</th><th>字节</th><th>日期格式</th><th>最小值</th></tr></thead><tbody><tr><td><code>YEAR</code></td><td><code>1</code></td><td><code>YYYY</code> <code>YY</code></td><td><code>1901</code> - <code>2155</code></td></tr><tr><td><code>TIME</code></td><td><code>3</code></td><td><code>HH:MM:SS</code></td><td><code>-838:59:59</code>- <code>838:59:59</code></td></tr><tr><td><code>DATE</code></td><td><code>3</code></td><td><code>YYYY-MM-DD</code></td><td><code>1000-01-01</code> - <code>9999-12-03</code></td></tr><tr><td><code>DATETIME</code></td><td><code>8</code></td><td><code>YYYY-MM-DD HH:MM:SS</code></td><td><code>1000-01-01 00:00:00</code> - <code>9999-12-31 23:59:59</code></td></tr><tr><td><code>TIMESTAMP</code></td><td><code>4</code></td><td><code>YYYY-MM-DD HH:MM:SS</code></td><td><code>1970-01-01 00:00:00 UTC</code> - <code>2038-01-19 03:14:07 UTC</code></td></tr></tbody></table><blockquote><p><code>TIME</code> 的范围是因为可以用来表示时间间隔。</p></blockquote><h3 id="6-2-各种类型">6.2 各种类型</h3><h4 id="6-2-1-YEAR-类型">6.2.1 YEAR 类型</h4><p><code>YEAR</code> 类型用来表示年份，只需要 <code>1</code> 个字节的存储空间。</p><p>以 4 位字符串或数字格式表示 YEAR 类型，其格式为 <code>YYYY</code> ，最小值为 1901 ，最大值为 2155 。以 2 位字符串格式表示 YEAR 类型，最小值为 00 ，最大值为 99 ：</p><ul><li><p>当取值为 <code>01</code> 到 <code>69</code> 时，表示 2001 到 2069</p></li><li><p>当取值为 <code>70</code> 到 <code>99</code> 时，表示 1970 到 1999</p></li><li><p>当取值为整数的 <code>0</code> 或 <code>00</code> 添加时，表示 0000 年</p></li><li><p>当取值为日期/字符串的 <code>'0'</code> 添加时，表示 2000 年</p></li></ul><blockquote><p>【不推荐】使用 2 位格式。默认 <code>YEAR</code> 就是 <code>YEAR(4)</code> 即为 4 位。同时，也【不推荐】指定显示宽度 <code>(M)</code> 。最好直接使用 <code>YEAR</code> 。</p></blockquote><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_year</span><br><span class="line">(</span><br><span class="line">    f1 <span class="keyword">YEAR</span>,  <span class="comment">-- 推荐</span></span><br><span class="line">    f2 <span class="keyword">YEAR</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_year</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2020&#x27;</span>, <span class="string">&#x27;2021&#x27;</span>);  <span class="comment">-- 推荐</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_year</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;45&#x27;</span>, <span class="string">&#x27;71&#x27;</span>);  <span class="comment">-- 不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_year</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">0</span>, <span class="string">&#x27;0&#x27;</span>);  <span class="comment">-- 0 和 &#x27;0&#x27; 对应 0000 年和 2000 年</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_year;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> f1   <span class="operator">|</span> f2   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span> <span class="operator">|</span> <span class="number">2021</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2045</span> <span class="operator">|</span> <span class="number">1971</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000</span> <span class="operator">|</span> <span class="number">2000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="6-2-2-DATE-类型">6.2.2 DATE 类型</h4><p><code>DATE</code> 类型表示日期，格式为 <code>YYYY-MM-DD</code> ，其中，YYYY 表示年份，MM 表示月份，DD 表示日期。需要 3 个字节的存储空间。</p><p>在向 DATE 类型的字段插入数据时：</p><ul><li>以 <code>YYYY-MM-DD</code> 格式或者 <code>YYYYMMDD</code> 格式表示的字符串日期（<code>YYYYMMDD</code> 格式会被转化为<code>YYYY-MM-DD</code> 格式）</li><li>以 <code>YY-MM-DD</code> 格式或者 <code>YYMMDD</code> 格式表示的字符串日期</li><li>使用 <code>CURRENT_DATE()</code> 或者 <code>NOW()</code> 函数，会插入当前系统的日期</li></ul><blockquote><p>仍然【不推荐】使用 2 位表达年。</p></blockquote><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_date1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据：字符串/整型/<code>CURRENT_DATE()</code> <code>NOW()</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_date1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2024-04-01&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;20240401&#x27;</span>),</span><br><span class="line">       (<span class="number">20201001</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_date1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="built_in">CURRENT_DATE</span>()),</span><br><span class="line">       (NOW());</span><br></pre></td></tr></table></figure><h4 id="6-2-3-TIME-类型">6.2.3 TIME 类型</h4><p><code>TIME</code> 类型用来表示时间。需要 3 个字节的存储空间，格式为 <code>HH:MM:SS</code> 其中，<code>HH</code> 表示小时，<code>MM</code> 表示分钟，<code>SS</code> 表示秒。</p><p>在向 TIME 类型的字段插入数据时：</p><ul><li>可以使用带有冒号的字符串，格式为 <code>'D HH:MM:SS'</code> <code>'HH:MM:SS'</code> <code>'HH:MM'</code> <code>'D HH:MM'</code> <code>'D HH'</code>  <code>'SS'</code> 。其中 <code>D</code> 表示天，其最小值为 <code>0</code> ，最大值为 <code>34</code> ，D 会被转化为小时，<code>D * 24 + HH</code></li><li>可以使用不带有冒号的字符串或者数字，格式为 <code>'HHMMSS'</code> <code>HHMMSS</code> 。特别地，<code>1210</code> 表示 <code>00:12:10</code></li><li>使用 <code>CURRENT_TIME()</code> <code>NOW()</code> 插入当前系统的时间</li></ul><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_time1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">TIME</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_time1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2 12:30:29&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;12:35:29&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_time1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;123520&#x27;</span>),</span><br><span class="line">       (<span class="number">124011</span>),</span><br><span class="line">       (<span class="number">1210</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_time1</span><br><span class="line"><span class="keyword">VALUES</span> (NOW()),</span><br><span class="line">       (<span class="built_in">CURRENT_TIME</span>());</span><br></pre></td></tr></table></figure><h4 id="6-2-4-DATETIME-类型">6.2.4 DATETIME 类型</h4><p><code>DATETIME</code> 总共需要 8 个字节的存储空间。在格式上为 DATE 类型和 TIME 类型的组合，可以表示为 <code>YYYY-MM-DD HH:MM:SS</code> ，其中 YYYY 表示年份，MM 表示月份，DD 表示日期，HH 表示小时，MM 表示分钟，SS 表示秒。</p><p>在向 DATETIME 类型的字段插入数据时：</p><ul><li>以 <code>'YYYY-MM-DD HH:MM:SS'</code> 格式或者 <code>'YYYYMMDDHHMMSS'</code> 格式的字符串插入，被转化为 <code>YYYY-MM-DD HH:MM:SS</code> 格式</li><li>【不推荐】以 <code>'YY-MM-DD HH:MM:SS'</code> 格式或者 <code>'YYMMDDHHMMSS'</code> 格式的字符串插入，被转化为 <code>YYYY-MM-DD HH:MM:SS</code> 格式</li><li>使用 <code>CURRENT_TIME()</code> <code>NOW()</code> 插入当前系统的时间</li></ul><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_datetime1</span><br><span class="line">(</span><br><span class="line">    dt DATETIME</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_datetime1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2024-04-01 06:50:30&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;20240401065030&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_datetime1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">20240402065030</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_datetime1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="built_in">CURRENT_TIMESTAMP</span>()),</span><br><span class="line">       (NOW());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_datetime1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> dt                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2024</span><span class="number">-04</span><span class="number">-01</span> <span class="number">06</span>:<span class="number">50</span>:<span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2024</span><span class="number">-04</span><span class="number">-01</span> <span class="number">06</span>:<span class="number">50</span>:<span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2024</span><span class="number">-04</span><span class="number">-02</span> <span class="number">06</span>:<span class="number">50</span>:<span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2025</span><span class="number">-04</span><span class="number">-01</span> <span class="number">19</span>:<span class="number">56</span>:<span class="number">03</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2025</span><span class="number">-04</span><span class="number">-01</span> <span class="number">19</span>:<span class="number">56</span>:<span class="number">03</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="6-2-5-TIMESTAMP-类型">6.2.5 TIMESTAMP 类型</h4><p><code>TIMESTAMP</code> 显示格式与 DATETIME 类型相同，都是 <code>YYYY-MM-DD HH:MM:SS</code> ，需要 4 个字节的存储空间。但是 TIMESTAMP 存储的时间范围比 DATETIME 要小很多，只能存储 <code>'1970-01-01 00:00:01 UTC'</code> 到 <code>'2038-01-19 03:14:07 UTC'</code> 之间的时间。其中，UTC 表示世界统一时间，也叫作世界标准时间。</p><ul><li>TIMESTAMP 会对当前时间所在的时区进行转换。因此，使用 TIMESTAMP 存储的同一个时间值，在不同的时区查询时会显示不同的时间。</li><li>插入的时间超出了 TIMESTAMP 类型的范围，则报错。</li></ul><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_timestamp1</span><br><span class="line">(</span><br><span class="line">    ts <span class="type">TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_timestamp1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1970-01-02 03:04:50&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;19700102030405&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_timestamp1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="built_in">CURRENT_TIMESTAMP</span>()),</span><br><span class="line">       (NOW());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_timestamp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> ts                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-02</span> <span class="number">03</span>:<span class="number">04</span>:<span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-02</span> <span class="number">03</span>:<span class="number">04</span>:<span class="number">05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2025</span><span class="number">-04</span><span class="number">-01</span> <span class="number">20</span>:<span class="number">02</span>:<span class="number">42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2025</span><span class="number">-04</span><span class="number">-01</span> <span class="number">20</span>:<span class="number">02</span>:<span class="number">42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>超出范围</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT INTO</span> test_timestamp1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;2038-01-20 03:14:07&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1292</span> (<span class="number">22007</span>): Incorrect datetime <span class="keyword">value</span>: <span class="string">&#x27;2038-01-20 03:14:07&#x27;</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;ts&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>修改时区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> time_zone <span class="operator">=</span> <span class="string">&#x27;+9:00&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>TIMESTAMP</code> 底层存储的是距离 <code>1970-1-1 0:0:0</code> 0 毫秒的毫秒值。</p></blockquote><h2 id="7-文本字符串类型">7 文本字符串类型</h2><p><strong>文本字符串</strong>分为： <code>CHAR</code> <code>VARCHAR</code> <code>TINYTEXT</code> <code>TEXT</code> <code>MEDIUMTEXT</code> <code>LONGTEXT</code> <code>ENUM</code> <code>SET</code>类型。除了传统的 <code>CHAR</code> <code>VARCHAR</code> <code>TINYTEXT</code> <code>TEXT</code> <code>MEDIUMTEXT</code> <code>LONGTEXT</code> 类型，<code>ENUM</code> 类型也被称为枚举类型，<code>SET</code> 类型被称为集合类型。</p><h3 id="7-1-CHAR-与-VARCHAR-类型">7.1 CHAR 与 VARCHAR 类型</h3><p><code>CHAR</code> 和 <code>VARCHAR</code> 类型可以存储比较短的字符串。</p><table><thead><tr><th>类型</th><th>特点</th><th>长度范围</th><th>占有存储空间</th></tr></thead><tbody><tr><td><code>CHAR(M)</code></td><td>固定长度</td><td><code>0 &lt;= M &lt;= 255</code></td><td>M 个字节</td></tr><tr><td><code>VARCHAR(M)</code></td><td>可变长度</td><td><code>0 &lt;= M &lt;= 65535</code></td><td>(实际长度 + 1) 个字节</td></tr></tbody></table><h4 id="7-1-1-CHAR-类型">7.1.1 CHAR 类型</h4><p><strong>CHAR 类型：</strong></p><ul><li><code>CHAR(M)</code> 需要预先定义字符串长度。如果不指定，则长度默认是 <code>1</code> 个字符。</li><li>如果数据的实际长度比 CHAR 类型声明的长度小，则会在<strong>右侧填充</strong>空格以达到指定的长度。</li><li>当检索 CHAR 类型的数据时，会<strong>去除尾部的空格</strong>。</li><li>定义 CHAR 类型字段时，声明的 <code>M</code> 即为 CHAR 类型字段所占的存储空间的字节数。</li></ul><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_char1</span><br><span class="line">(</span><br><span class="line">    c1 <span class="type">CHAR</span>,</span><br><span class="line">    c2 <span class="type">CHAR</span>(<span class="number">5</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_char1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_char1(c2)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;a  &#x27;</span>);</span><br></pre></td></tr></table></figure><p>检索数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(c2)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> test_char1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">CHAR_LENGTH</span>(c2) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">4</span> <span class="operator">|</span>  <span class="comment">-- &#x27;test&#x27; 4 个字符</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>  <span class="comment">-- &#x27;a  &#x27;  1 个字符，说明删去了右边的空格</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="7-1-2-VARCHAR-类型">7.1.2 VARCHAR 类型</h4><p><strong>VARCHAR 类型：</strong></p><ul><li><code>VARCHAR(M)</code> 必须指定长度 <code>M</code> ，否则报错。</li><li>MySQL 5.0 以上，<code>VARCHAR(M)</code> 指的是 M 个字符，不是 M 个字节。</li><li>检索 VARCHAR 类型的字段数据时，会<strong>保留数据尾部的空格</strong>。</li><li>VARCHAR 类型的字段所占用的存储空间为<strong>字符串实际长度加1个字节</strong>。</li></ul><p>创建、插入、检索方法与 <code>CHAR</code> 相同，只是检索 VARCHAR 类型的字段数据时，会保留数据尾部的空格，且二者的存储方式不同。</p><blockquote><p><code>CHAR</code> 和 <code>VARCHAR</code> 比较：存储很短的信息、固定长度信息、以及需要频繁修改数据时，都推荐使用 <code>CHAR</code> 。（最后一个是因为，VARCHAR 是可变的，其存储长度需要计算实际字符串长度，频繁修改会增加计算负担）</p></blockquote><h3 id="7-2-TEXT-类型">7.2 TEXT 类型</h3><p><code>TEXT</code> 用来保存文本类型的字符串，总共包含 4 种类型，分别为 <code>TINYTEXT</code> <code>TEXT</code> <code>MEDIUMTEXT</code> <code>LONGTEXT</code> 。保存和查询数据时，自动按照实际长度存储，不需要预先定义长度。</p><ul><li>由于实际存储的长度不确定，<strong>TEXT 类型的字段不能作主键</strong>。</li><li>存储和查询时，都<strong>不删除右边的空格</strong>。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513462778.png" alt=""></p><p>创建、插入和检索</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_text</span><br><span class="line">(</span><br><span class="line">    tx TEXT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_text</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;With space on the right.    &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(tx)</span><br><span class="line"><span class="keyword">FROM</span> test_text;  </span><br><span class="line"># <span class="number">28</span> 没有删除右边的空格</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_text;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> tx                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">With</span> space <span class="keyword">on</span> the right.     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>TEXT 文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用 CHAR、VARCHAR 来代替。</p><p>TEXT 和 BLOB 类型的数据是大文件，删除后容易导致“空洞”，使得文件碎片比较多，所以频繁使用的表不建议包含 TEXT 类型字段，建议单独用一个表。</p></blockquote><h3 id="7-3-ENUM-类型">7.3 ENUM 类型</h3><p><code>ENUM</code> 类型（枚举类型），取值范围需要在定义字段时进行指定。设置字段值时，ENUM 类型只允许从成员中选取单个值，不能一次选取多个值。其所需要的存储空间由定义 ENUM 类型时指定的成员个数决定：</p><ul><li>当 ENUM 类型包含 1 ~ 255 个成员时，需要 1 个字节的存储空间</li><li>当 ENUM 类型包含 256 ~ 65535 个成员时，需要 2 个字节的存储空间</li><li>ENUM 类型的成员个数的上限为 65535 个</li></ul><p>下面使用例子说明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_enum</span><br><span class="line">(</span><br><span class="line">    season ENUM (<span class="string">&#x27;春&#x27;</span>, <span class="string">&#x27;夏&#x27;</span>, <span class="string">&#x27;秋&#x27;</span>, <span class="string">&#x27;冬&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 按照值插入</span><br><span class="line"><span class="keyword">INSERT INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;春&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;秋&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;unknown&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 允许按照数字索引的方式获取指定位置的枚举值</span><br><span class="line"><span class="keyword">INSERT INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 报错：未知数字索引</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_enum;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> season  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> 春      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 秋      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="literal">unknown</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 春      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 秋      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="7-4-SET-类型">7.4 SET 类型</h3><p><code>SET</code> 表示一个字符串对象，可以包含 0 个或多个成员，但成员个数的上限为 64 。当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的。</p><blockquote><p>【注意】<code>SET</code> 类型在选取成员时，可以<strong>一次选择多个成员</strong>，这一点与 <code>ENUM</code> 类型不同。</p></blockquote><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_set</span><br><span class="line">(</span><br><span class="line">    s <span class="keyword">SET</span> (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_set (s)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;A,B&#x27;</span>);  <span class="comment">-- 插入多个成员 &#x27;A&#x27; 和 &#x27;B&#x27;</span></span><br><span class="line"></span><br><span class="line"># 插入重复的 <span class="keyword">SET</span> 类型成员时，自动删除重复的成员</span><br><span class="line"><span class="keyword">INSERT INTO</span> test_set (s)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;A,B,C,A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 报错：插入 SET 成员中不存在的值</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_set (s)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;A, B, C, D&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_set;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> s     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> A     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A,B   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A,B,C <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="8-二进制字符串类型">8 二进制字符串类型</h2><p>MySQL 中的二进制字符串类型主要存储一些二进制数据，比如可以存储<strong>图片、音频和视频</strong>等二进制数据。MySQL 中支持的二进制字符串类型主要包括 <code>BINARY</code> <code>VARBINARY</code> <code>TINYBLOB</code> <code>BLOB</code> <code>MEDIUMBLOB</code> <code>LONGBLOB</code> 。</p><h3 id="8-1-BINARY-与-VARBINARY-类型">8.1 BINARY 与 VARBINARY 类型</h3><p><code>BINARY(M)</code> 为固定长度的二进制字符串，<code>M</code> 表示最多能存储的字节数，取值范围是 <code>0~255</code> 。如果未指定 M ，表示只能存储 1 个字节。如果字段值不足 M 个字节，将<strong>在右边填充 <code>'\0'</code> 以补齐</strong>指定长度。</p><p><code>VARBINARY(M)</code> 为可变长度的二进制字符串，<code>M</code> 表示最多能存储的字节数。VARBINARY 类型的数据除了存储数据本身外，还需要 1 或 2 个字节来存储数据的字节数。VARBINARY类型**必须指定 M **，否则报错。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513410216.png" alt=""></p><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_binary1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">BINARY</span>,</span><br><span class="line">    f2 <span class="type">BINARY</span>(<span class="number">3</span>),</span><br><span class="line">    f3 <span class="type">VARBINARY</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_binary1(f1, f2)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_binary1(f1, f2)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;256&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_binary1(f2, f3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;中文&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_binary1(f2, f3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">1024</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_binary1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> f1         <span class="operator">|</span> f2         <span class="operator">|</span> f3             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x61</span>       <span class="operator">|</span> <span class="number">0x610000</span>   <span class="operator">|</span> <span class="keyword">NULL</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x32</span>       <span class="operator">|</span> <span class="number">0x323536</span>   <span class="operator">|</span> <span class="keyword">NULL</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="number">0x380000</span>   <span class="operator">|</span> <span class="number">0xE4B8ADE69687</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="number">0x380000</span>   <span class="operator">|</span> <span class="number">0x31303234</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="8-2-BLOB-类型">8.2 BLOB 类型</h3><p><code>BLOB</code> 是一个<strong>二进制大对象</strong>，可以容纳可变数量的数据。BLOB 包括 <code>TINYBLOB</code> <code>BLOB</code> <code>MEDIUMBLOB</code> <code>LONGBLOB</code> ，它们可容纳值的最大长度不同。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513381573.png" alt=""></p><blockquote><p>实际上，往往不会在 MySQL 数据库中使用 BLOB 类型存储大对象数据，通常会将图片、音频和视频文件存储到服务器的磁盘上，并将图片、音频和视频的访问路径存储到 MySQL 中。</p></blockquote><p>创建的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_blob1</span><br><span class="line">(</span><br><span class="line">    id  <span class="type">INT</span>,</span><br><span class="line">    img MEDIUMBLOB</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="9-JSON-类型">9 JSON 类型</h2><p><code>JSON (JavaScript Object Notation)</code> 是一种<strong>轻量级的数据交换格式</strong>。</p><p>举例说明：创建数据表，表中包含一个 <code>JSON</code> 类型的字段 <code>js</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_json</span><br><span class="line">(</span><br><span class="line">    js JSON</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>向表中插入 JSON 数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_json (js)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;Mike&quot;,</span></span><br><span class="line"><span class="string">  &quot;age&quot;: 21,</span></span><br><span class="line"><span class="string">  &quot;contact&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;tel&quot;: &quot;123456789&quot;,</span></span><br><span class="line"><span class="string">    &quot;email&quot;: &quot;123@work.com&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查询数据</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513181515.png" alt=""></p><p>**当需要检索 JSON 类型的字段中数据的具体值时，可以使用 <code>-&gt;</code> 或 <code>-&gt;&gt;</code> **</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.name&#x27;</span>          <span class="keyword">AS</span> name,</span><br><span class="line">       js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.age&#x27;</span>           <span class="keyword">AS</span> age,</span><br><span class="line">       js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.contact.tel&#x27;</span></span><br><span class="line">                               <span class="keyword">AS</span> tel,</span><br><span class="line">       js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.contact.email&#x27;</span> <span class="keyword">AS</span> email</span><br><span class="line"><span class="keyword">FROM</span> test_json;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513350224.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树 Tree &amp; 二叉树 Binary Tree</title>
      <link href="/posts/7542010b.html"/>
      <url>/posts/7542010b.html</url>
      
        <content type="html"><![CDATA[<h1>树 Tree &amp; 二叉树 Binary Tree</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本章介绍了重要的数据结构：树。并详细讲解了二叉树。包括：树的定义、树的图论性质。并通过 Python 实现了树（基于链表 vs 基于数组），同时分析了时间复杂度。</p><h2 id="1-树-Tree">1 树 Tree</h2><h3 id="1-1-树的定义">1.1 树的定义</h3><p><strong>树 Tree</strong>是一种将元素分层次存储的抽象数据类型。除了最顶部的元素，每个元素在树中都有一个 <em>双亲节点</em> 和零个或者多个 <em>孩子节点</em> 。</p><p><strong>正式定义</strong>：通常我们将树 T 定义为存储一系列元素的有限节点集合，这些节点具有 parent-children 关系并且满足如下属性：</p><ul><li>如果树 T 不为空，则它一定具有一个称为 <em>根节点</em> root 的特殊节点，并且该节点没有父节点。</li><li>每个非根节点 v 都具有唯一的父节点 w ，每个具有父节点 w 的节点都是节点 w 的一个孩子。</li></ul><h3 id="1-2-相关术语">1.2 相关术语</h3><p><strong>根节点</strong> <code>root</code> ：只有直接后继，没有先驱节点</p><p><strong>节点</strong> <code>node</code> ：树的基本组成单位，包含一个数据元素和指向子树的分支</p><p><strong>节点的度</strong> <code>degree</code> ：每个节点拥有的子树的数目</p><p><strong>叶子节点</strong> <code>leaf</code> ：度为 0 的节点，也称为<strong>外部节点</strong> <code>external node</code></p><p><strong>分支节点</strong> ：度不为 0 的节点，也称为<strong>内部节点</strong> <code>internal node</code></p><p><strong>孩子节点</strong> <code>child</code> ：某个节点的直接后继</p><p><strong>父节点</strong> <code>parent</code> ：一个节点是其孩子节点的父节点，也称为双亲节点</p><p><strong>兄弟节点</strong> <code>sibling</code> ：具有相同父节点的节点</p><p><strong>边</strong> <code>edge</code> ：一对节点 <code>(u, v)</code>，u 是 v 的父节点或反之</p><p><strong>路径</strong> <code>path</code> ：一条从 <code>ni</code> 到 <code>nj</code> 的路径，其中任意两个相邻的节点前者是后者的父节点</p><p><strong>祖先节点</strong> <code>ancestor</code> ：根节点到某节点的路径上所有的节点都是该节点的祖先节点</p><p><strong>子孙节点</strong> <code>descendant</code> ：某节点的所有子树上的节点都是其子孙节点</p><p><strong>树的度</strong> ：树中节点度的最大值</p><p><strong>节点的深度</strong> <code>depth</code> ：节点的祖先节点的个数，也称为<strong>层次</strong> <code>level</code></p><p><strong>节点的高度</strong> <code>height</code> ：节点的高度是连接它与它的子孙节点中叶子节点的最长路径的长度</p><p><strong>树的高度</strong> ：根节点的高度为树的高度</p><p><strong>有序树/无序树</strong> ：树中节点的子树从左到右安排有序/无序，各子树位置不能/可以交换</p><p><strong>森林</strong> <code>forest</code> ：数棵互不相交的树的集合</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742982398986.png" alt="树的例子：文件系统"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742982331017.png" alt="树的例子：有序树"></p><h3 id="1-3-树的图论性质">1.3 树的图论性质</h3><h4 id="1-3-1-节点数与度">1.3.1 节点数与度</h4><p><strong>树的节点数等于所有节点度的总和加 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n\ d_i = n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p><strong>证明</strong> 每个节点的度等于后继节点（子节点）的数量；而除了根节点外，每个节点都有一个分支指向它；总的分支数目等于除根节点外所有节点的数目，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><h4 id="1-3-2-树的第-i-层的节点数">1.3.2 树的第 i 层的节点数</h4><p><strong>节点度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 的树，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层至多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>𝑘</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">𝑘^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>n</mi><mi>i</mi></msub><mo>≤</mo><msup><mi>k</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">n_i \leq k^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8747em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层层的节点数。</p><p><strong>证明</strong> 第 0 层仅有根节点， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k_0 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ；假设结论对第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 层成立，即该层最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>k</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">k^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个节点；而根据定义，树的度为节点度的最大值，即第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 层每个节点最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个后继节点，因此第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层至多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>×</mo><msup><mi>k</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>k</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">k \times k^{i-1} = k^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点。由归纳法，证毕。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><h4 id="1-3-3-树的最大节点数">1.3.3 树的最大节点数</h4><p><strong>度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 且高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 的树，至多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{k^{h+1} - 1}{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 个节点</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>≤</mo><mfrac><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">n \leq \dfrac{k^{h+1} - 1}{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>证明</strong> 由 [性质 1.3.2](####1.3.2 树的度与第 i 层的节点数) 可知，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>k</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">k^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点。则总共节点数不得超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>h</mi></msubsup><mtext> </mtext><msup><mi>k</mi><mi>i</mi></msup><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\sum\limits_{i=0}^{h}\ k^i = \dfrac{k^{h+1} - 1}{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5138em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5361em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。证明完毕。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><h4 id="1-3-4-树的最小高度">1.3.4 树的最小高度</h4><p><strong>节点数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 的树的高度至少为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">[\log_k\ (n(k-1)+1)] -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo>≤</mo><mo stretchy="false">[</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq [\log_k\ (n(k-1)+1)] -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p><strong>证明</strong> 要想达到最小高度，则第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>h</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0,\ 1,\ \cdots,\ h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 层均需尽可能多地存储节点；由 [性质 1.3.3](####1.3.3 树的最大节点数) 可知</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><msup><mi>k</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>&lt;</mo><mi>n</mi><mo>≤</mo><mfrac><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\dfrac{k^{h} - 1}{k - 1}&lt; n \leq \dfrac{k^{h+1} - 1}{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>变换可得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>≤</mo><mo stretchy="false">[</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq [\log_k\ (n(k-1)+1)] -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。证毕。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><h3 id="1-4-树的抽象数据类型-ADT">1.4 树的抽象数据类型 ADT</h3><p>树中的节点 ADT 仅支持一个方法：</p><ul><li><code>p.element()</code> : 返回存储在节点p处的元素</li></ul><p>树的基础抽象数据类型 ADT：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ADT Tree &#123;</span><br><span class="line">数据对象: T</span><br><span class="line">基本操作</span><br><span class="line">        T.root(): 返回树 T 的根节点，如 T 为空则返回 <span class="literal">None</span></span><br><span class="line">        T.parent(p): 返回 p 的父节点，如 p 为根节点则返回 <span class="literal">None</span></span><br><span class="line">        T.children(p): 产生 p 的孩子节点的迭代器</span><br><span class="line">        T.num_children(p): 返回 p 的孩子节点的数目</span><br><span class="line">        T.is_root(p): 如 p 为 T 的根，则返回 <span class="literal">True</span></span><br><span class="line">        T.is_leaf(p): 如 p 为树 T 的叶子节点，则返回 <span class="literal">True</span></span><br><span class="line">        T.depth(p): 返回树 T 中 p 节点的深度</span><br><span class="line">        T.height(p): 返回树 T 中 p 节点的高度</span><br><span class="line">        T.is_empty(): 如 T 为空树则返回 <span class="literal">True</span></span><br><span class="line">        <span class="built_in">len</span>(T): 返回树 T 中元素（节点）个数</span><br><span class="line">        T.nodes(): 生成树 T 所有节点的迭代器</span><br><span class="line">        <span class="built_in">iter</span>(T): 生成树 T 中存储的所有元素的迭代</span><br><span class="line">&#125; ADT Tree</span><br></pre></td></tr></table></figure><h3 id="1-5-树的基类-Python-实现">1.5 树的基类 Python 实现</h3><h4 id="1-5-1-抽象类的实现">1.5.1 抽象类的实现</h4><p>下面实现树的基础抽象类：其中内嵌了节点类 <code>Position</code> 。同时，此处只定义了方法名，并没有具体定义，具体定义需要子类继承时具体定义（针对不同类型的树，子类定义方式不同）。</p><p>特别地，基于暂时没有具体定义的抽象方法，具体定义了一些树的通用方法 <code>is_root()</code> <code>is_leaf()</code> <code>is_empty()</code> <code>depth()</code> <code>height()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;树的抽象基础类，基础方法需要子类定义&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 抽象方法: 节点类 具体实现由子类实现 ----------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Position</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;每个元素的位置/节点类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">element</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="comment"># 由子类定义</span></span><br><span class="line">            <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;比较节点是否相同&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 由子类定义</span></span><br><span class="line">            <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;比较节点是否不同&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> (<span class="variable language_">self</span> == other)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 抽象方法: 树的抽象基础类 具体实现由子类实现 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">root</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回根节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回父节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_children</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回节点 p 下的子节点数目&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器方式返回 p 节点的子类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;树的所有节点数目&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 具体方法: 如果抽象方法被子类定义后 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_root</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断 p 节点是否为根节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.root() == p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断 p 节点是否为叶子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.num_children(p) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断树是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算深度算法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">depth</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回节点 p 的深度，即到根节点的路径距离&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_root(p):</span><br><span class="line">            <span class="comment"># 根节点深度为 0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 递归：当前节点的深度 = 父节点的深度 + 1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + <span class="variable language_">self</span>.depth(<span class="variable language_">self</span>.parent(p))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算高度算法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回节点 p 的高度，即距离其最远叶子节点的路径长&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_root(p):</span><br><span class="line">            <span class="comment"># 叶子节点高度为 0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前节点的高度 = 所有子节点高度最大值 + 1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(<span class="variable language_">self</span>.height(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p))</span><br></pre></td></tr></table></figure><h4 id="1-5-2-递归计算深度和高度">1.5.2 递归计算深度和高度</h4><p><strong>计算深度</strong>：根据树中节点的深度的定义，节点的祖先节点的个数即为深度，故可以使用<strong>递归</strong>的方式计算深度：</p><ul><li>如果 <code>p</code> 为根节点，则其深度为 <code>0</code></li><li>否则，<code>p</code> 的深度为其父节点的深度加 <code>1</code></li></ul><p><strong>时间复杂度</strong>：对于位置 <code>p</code> ，计算深度的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mi>d</mi><mi>p</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d_p + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">d_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 指的是节点 <code>p</code> 的深度，因为该算法对于p的每个祖先节点执行的时间是常数。最坏的情况下运行时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。其中n是树中节点的总个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算深度算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depth</span>(<span class="params">self, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回节点 p 的深度，即到根节点的路径距离&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.is_root(p):</span><br><span class="line">        <span class="comment"># 根节点深度为 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 递归：当前节点的深度 = 父节点的深度 + 1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="variable language_">self</span>.depth(<span class="variable language_">self</span>.parent(p))</span><br></pre></td></tr></table></figure><p><strong>计算高度</strong>：根据树中节点的高度的定义，连接它与它的子孙节点中叶子节点的最长路径的长度即为高度，故可以使用<strong>递归</strong>的方式计算高度：</p><ul><li>如果 <code>p</code> 为叶子节点，则其高度为 <code>0</code></li><li>否则，<code>p</code> 的高度为其孩子节点中最大的高度加 <code>1</code></li></ul><p><strong>时间复杂度</strong>：如以 <code>p</code> 为根节点的子树有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">n_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 个节点，则时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>p</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n_p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算高度算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">self, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回节点 p 的高度，即距离其最远叶子节点的路径长&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.is_root(p):</span><br><span class="line">        <span class="comment"># 叶子节点高度为 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 当前节点的高度 = 所有子节点高度最大值 + 1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(<span class="variable language_">self</span>.height(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p))</span><br></pre></td></tr></table></figure><h2 id="2-二叉树-Binary-Tree">2 二叉树 Binary Tree</h2><h3 id="2-1-二叉树的定义">2.1 二叉树的定义</h3><p><strong>二叉树</strong>：是具有以下属性的有序树</p><ul><li>每个节点最多有两个孩子节点。</li><li>每个孩子节点被命名为左孩子或右孩子。</li><li>对于每个节点的孩子节点，在顺序上，左孩子先于右孩子。</li></ul><p><strong>二叉树的递归定义</strong>：二叉树或为空树，或满足以下<strong>任一条件</strong>：</p><ul><li>为一个单独的节点</li><li>根节点有至多两个有序的孩子节点，且根节点的子树也为二叉树</li></ul><h3 id="2-2-二叉树的例子">2.2 二叉树的例子</h3><p><strong>算式表达树</strong></p><p>二叉树能用于表示算术表达式</p><ul><li>内部节点：存储操作符</li><li>叶子节点：存储变量或常数</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742994629723.png" alt="算式表达树" style="zoom:50%;" /><p><strong>决策树</strong></p><p>二叉树可以用来描述决策过程</p><ul><li>内部节点：存储一个回答为“是”或“否”的问题</li><li>叶子节点：存储决策</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742994742939.png" alt="提供投资决策的决策树" style="zoom:50%;" /><p><strong>搜索树</strong></p><p>二叉树可存储有序序列，并使用此二叉树进行搜索</p><ul><li>节点：存储元素</li><li>节点左子树（右子树）的元素均小于（大于）节点存储的元素</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742994851160.png" alt="实线为搜索36（成功），虚线为搜索70（不成功）"></p><h3 id="2-3-二叉树的图论性质">2.3 二叉树的图论性质</h3><p>记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 表示二叉树的节点总数； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">n_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示二叉树的叶子节点数目； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">n_I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示二叉树的内部节点数目； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 表示二叉树的高度。</p><h4 id="2-3-1-基于树的性质">2.3.1 基于树的性质</h4><p>因为二叉树的每个节点的度最多为 2 ，所以基于树的性质可以推出：</p><p><strong>第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层至多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点</strong></p><p><strong>二叉树的节点总数满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>+</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h + 1 \leq n \leq 2^{h+1} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><strong>二叉树的高度满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>≤</mo><mo stretchy="false">[</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq [\log_k\ (n+1)] -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><strong>二叉树叶子节点数目满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>n</mi><mi>E</mi></msub><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">1 \leq n_E \leq 2^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span></span></span></strong> ：叶子节点最少，当整个二叉树为链式结构时成立，此时只有最后一个叶子节点；叶子节点最多，则对于高度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 的二叉树，每一个节点都是度为 2 ，最后有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">2^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span></span></span> 个叶子节点。</p><p><strong>二叉树内部节点数目满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>≤</mo><msub><mi>n</mi><mi>I</mi></msub><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq n_I \leq 2^h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong> ：内部节点最少，当整个二叉树为链式结构时成立，此时内部节点即为链长 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> ；内部节点最多，与叶子节点最多情况相同，排除根节点，所以为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个。</p><h4 id="2-3-2-二叉树独有性质">2.3.2 二叉树独有性质</h4><p><strong>对任何非空二叉树，设叶子节点数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，度为 2 的节点数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，则有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 = n_2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><strong>证法1</strong> 设二叉树中度为 1 度节点个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，则有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n = n_0 + n_1 + n+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 。</p><p>根据树的 [性质 1.3.1](####1.3.1 节点数与度) ，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn><mo>×</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><mn>1</mn><mo>×</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n = 0 \times n_0 + 1 \times n_1 + 2 \times n_2 = n_1 + 2n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>比较以上两式，可得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 = n_2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。证明完毕 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><p><strong>证法2</strong> 我们从树中取下一个（任意的）外部节点 w 和其父节点 v ，v 为内部节点。若 v 有父节点 u ，则将 u 与 w 之前的兄弟节点 z 连接起来，如图所示。</p><p>重复上述操作，我们最后将会得到仅有一个节点（根节点）的最终树。</p><p>每次操作，叶子节点数目减一；度为 2 的节点数目减一。最后剩下根节点一个孤点（可视作叶子节点），所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 = n_2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。证明完毕 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742998908752.png" alt="归纳过程的变换"></p><h3 id="2-4-二叉树的类别">2.4 二叉树的类别</h3><p><strong>完美二叉树 Perfect Binary Tree</strong> ：高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 且有恰好有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h+1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个节点的二叉树，称为完美二叉树或满二叉树。</p><p><strong>完全二叉树 Complete Binary Tree</strong> ：高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 的完全二叉树，除第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 层外其他各层结点数均达到最大值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> ；第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 层元素尽可能存放在左侧的节点中，使得若某节点右子树高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> ，则其左子树高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。</p><p><strong>完满二叉树 Full Binary Tree</strong> ：也称为 Proper Binary Tree，所有内部节点度均为 2（均有两个孩子）的二叉树。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/tree.png" alt="三种二叉树"></p><h3 id="2-5-二叉树的抽象数据类型-ADT">2.5 二叉树的抽象数据类型 ADT</h3><p>二叉树的 ADT 是对树的 ADT 的拓展，它<strong>继承了树的 ADT 的所有基本操作</strong>，并附加了以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T.left(p): 返回 p 的左孩子节点，若没有则返回 <span class="literal">None</span></span><br><span class="line">T.right(p): 返回 p 的右孩子节点，若没有则返回 <span class="literal">None</span></span><br><span class="line">T.sibling(p): 返回 p 的兄弟节点，若没有则返回 <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="2-6-二叉树新增方法的-Python-实现">2.6 二叉树新增方法的 Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> .basic_tree <span class="keyword">import</span> Tree</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> basic_tree <span class="keyword">import</span> Tree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span>(<span class="title class_ inherited__">Tree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;二叉树的抽象基类，继承 Tree，一些方法暂不定义&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 新增的抽象方法: 具体实现由子类实现 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回当前节点 p 的左孩子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回当前节点 p 的右孩子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 具体方法: 如果抽象方法被子类定义后 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sibling</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回当前节点 p 的兄弟节点&quot;&quot;&quot;</span></span><br><span class="line">        parent = <span class="variable language_">self</span>.parent(p)  <span class="comment"># 获取父节点</span></span><br><span class="line">        <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 根节点无兄弟节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 非左即右</span></span><br><span class="line">            <span class="keyword">if</span> p == <span class="variable language_">self</span>.left(parent):</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.right(parent)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.left(parent)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;以迭代器的方式返回子节点（先左后右）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.left(p) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">self</span>.left(p)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.right(p) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">self</span>.right(p)</span><br></pre></td></tr></table></figure><h2 id="3-树的实际实现">3 树的实际实现</h2><p>之前定义的 <code>Tree</code> 和 <code>BinaryTree</code> 类都只是形式上的抽象基类。尽管给出了许多支持操作，但它们都不能直接被实例化。</p><p>特别地，具体实现树要能提供 <code>Root</code>、<code>parent</code>、<code>num_children</code>、<code>children</code> 和 <code>__len__</code> 这些方法，对于 Binary Tree 类，还要提供 <code>left</code> 和 <code>right</code> 方法。</p><p>我们可以采用<strong>链式结构</strong>存储树，也可采用<strong>数组</strong>存储树。下面基于二叉树的实现介绍：</p><h3 id="3-1-基于链表：链式存储结构">3.1 基于链表：链式存储结构</h3><p>目标：定义 <code>BinaryTree</code> 类的一个具体子类 <code>LinkedBinaryTree</code> ，该类能够实现二叉树 ADT。</p><h4 id="3-1-1-思路">3.1.1 思路</h4><p>定义一个简单、非公开的 <code>_Node</code> 类表示一个节点，再定义一个公开的 <code>Position</code> 类用于封装节点。</p><p>一个节点存储以下信息：</p><ul><li>元素值</li><li>指向父节点的指针</li><li>指向左孩子的指针</li><li>指向右孩子的指针</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743054428079.png" alt="二叉树链式结构的图示"></p><h4 id="3-1-2-Python-实现">3.1.2 Python 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> .binary_tree <span class="keyword">import</span> BinaryTree</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> binary_tree <span class="keyword">import</span> BinaryTree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedBinaryTree</span>(<span class="title class_ inherited__">BinaryTree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;链式结构的二叉树&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 非公开节点类 ----------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;非公开节点类&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_parent&#x27;</span>, <span class="string">&#x27;_left&#x27;</span>, <span class="string">&#x27;_right&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, parent=<span class="literal">None</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._parent = parent</span><br><span class="line">            <span class="variable language_">self</span>._left = left</span><br><span class="line">            <span class="variable language_">self</span>._right = right</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 公有的节点类 ----------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Position</span>(BinaryTree.Position):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写父类 BinaryTree 的显式节点类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, container, node</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;具体初始化&quot;&quot;&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>._container = container  <span class="comment"># 标记属于的树</span></span><br><span class="line">            <span class="variable language_">self</span>._node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">element</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;具体实现返回元素值&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._node._element</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;具体实现 ==&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> <span class="built_in">type</span>(<span class="variable language_">self</span>) <span class="keyword">and</span> other._node <span class="keyword">is</span> <span class="variable language_">self</span>._node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 封装公有节点类 Position ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_validate</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在封装 Position 类前判断节点 p 是否合法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(p, <span class="variable language_">self</span>.Position):</span><br><span class="line">            <span class="comment"># 不是合法的节点类</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;p must be proper Position type&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._container <span class="keyword">is</span> <span class="keyword">not</span> <span class="variable language_">self</span>:</span><br><span class="line">            <span class="comment"># 不属于当前树</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p does not belong to this container&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._node._parent <span class="keyword">is</span> p._node:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p is no longer valid&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> p._node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_position</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据接受的节点类 _Node 封装为一个 Position 类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.Position(<span class="variable language_">self</span>, node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 二叉树具体实现 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个空的二叉树&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._root = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 二叉树公有方法具体实现：覆写父类方法 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回树的节点总数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">root</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回根节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._root)  <span class="comment"># 返回 self.Position 类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parent</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回父节点&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># 判断合法并返回合法对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._parent)  <span class="comment"># 封装为 Position 返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回左子节点&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._left)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回右子节点&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_children</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回孩子节点数目&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> node._left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> node._right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 二叉树非公有方法具体实现：一些对树的操作 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_root</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;填入根元素，并返回封装后的 Position 类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Root exists&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>._root = <span class="variable language_">self</span>._Node(e)  <span class="comment"># 创建节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._root)  <span class="comment"># 封装返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_left</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 p 下加左子节点，并返回封装后的类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># 判断是否合法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node._left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Left node exists&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        node._left = <span class="variable language_">self</span>._Node(e, parent=node)  <span class="comment"># 父节点为 node</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._left)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_right</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 p 下加右子节点，并返回封装后的类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">if</span> node._right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Right node exists&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        node._right = <span class="variable language_">self</span>._Node(e, parent=node)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_replace</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;替换节点 p 的元素值，并返回旧元素&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        old = node._element</span><br><span class="line">        node._element = e</span><br><span class="line">        <span class="keyword">return</span> old</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_delete</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除节点 p 用其孩子替代。当 p 非法或有两个孩子则报错&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># p 非法与否</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.num_children(p) == <span class="number">2</span>:  <span class="comment"># p 有 2 个孩子</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p has two children&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取 p 的孩子节点</span></span><br><span class="line">        child = node._left <span class="keyword">if</span> node._left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> node._right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 子节点连接父节点的父节点</span></span><br><span class="line">            child._parent = node._parent</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="variable language_">self</span>._root:</span><br><span class="line">            <span class="comment"># 父节点为根节点则子节点成为新根节点</span></span><br><span class="line">            <span class="variable language_">self</span>._root = child</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 更新父节点的父节点的孩子节点</span></span><br><span class="line">            parent = node._parent</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> parent._left:</span><br><span class="line">                parent._left = child</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                parent._right = child</span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span>  <span class="comment"># 节点数减一</span></span><br><span class="line">        node._parent = node  <span class="comment"># 惯例：self.parent -&gt; self</span></span><br><span class="line">        <span class="keyword">return</span> node._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_attach</span>(<span class="params">self, p, t1, t2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将子树 t1, t2 作为 p 的左右子节点连入树&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_leaf(p):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;position must be leaf&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">type</span>(<span class="variable language_">self</span>) <span class="keyword">is</span> <span class="built_in">type</span>(t1) <span class="keyword">is</span> <span class="built_in">type</span>(t2):  <span class="comment"># 三个树类型必须相同</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Tree types must match&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="built_in">len</span>(t1) + <span class="built_in">len</span>(t2)  <span class="comment"># 更新节点数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t1.is_empty():</span><br><span class="line">            t1._root._parent = node</span><br><span class="line">            node._left = t1._root</span><br><span class="line">            t1._root = <span class="literal">None</span></span><br><span class="line">            t1._size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t2.is_empty():</span><br><span class="line">            t2._root._parent = node</span><br><span class="line">            node._right = t2._root</span><br><span class="line">            t2._root = <span class="literal">None</span></span><br><span class="line">            t2._size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="3-1-3-算法分析">3.1.3 算法分析</h4><ul><li><p><code>len</code> 方法：在 LinkedBinaryTree 内部实现，使用一个实例变量 <code>self._size</code> 存储T的节点数，花费 <code>O(1)</code> 的时间。</p></li><li><p><code>is_empty</code> 方法：继承自 Tree 类，对 <code>len</code> 方法进行一次调用，因此需要花费 <code>O(1)</code> 的时间。</p></li><li><p>访问方法 <code>root</code>、<code>left</code>、<code>right</code>、<code>parent</code> 和 <code>num_children</code> ：直接在 LinkedBinaryTree 中执行，花费 <code>O(1)</code> 的时间。</p></li><li><p><code>sibling</code> 和 <code>children</code> 方法：从 BinaryTree 类派生，对其他访问方法做固定次的调用，因此，它们的运行时间也是 <code>O(1)</code> 。</p></li><li><p>Tree 类的 <code>is_ root</code> 和 <code>is_leaf</code> 方法：都运行 <code>O(1)</code> 的时间，因为 <code>is_root</code> 调用 <code>root</code> 方法，之后判定两者的位置是否相等；而 <code>is_leaf</code> 调用 <code>left</code> 和 <code>right</code> 方法，并验证二者是否返回 <code>None</code> 。</p></li><li><p><code>depth</code> 和 <code>height</code> 方法：见 [1.5.2 递归计算深度和高度](####1.5.2 递归计算深度和高度) 。</p></li><li><p>各种更新方法 <code>add_root</code>、<code>add_left</code>、<code>add_right</code>、<code>replace</code>、<code>delete</code> 和 <code>attach</code> ：都运行 <code>O(1)</code> 的时间，因为它们每次操作都仅仅重新链接到固定的节点数。</p></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743059677999.png" alt="链式结构的二叉树时间复杂度"></p><h3 id="3-2-基于数组：数组实现二叉树">3.2 基于数组：数组实现二叉树</h3><p>二叉树 T 的一种可供选择的表示法是对 T 的位置进行编号。对于 T 的每个位置 p ，设 f(p) 为整数且定义如下：</p><ul><li>若 p 是 T 的根节点，则 <code>f(p) = 0</code></li><li>若 p 是位置 q 的左孩子，则 <code>f(p) = 2 * f(q) + 1</code></li><li>若 p 是位置 q 的右孩子，则 <code>f(p) = 2 * f(q) + 2</code></li><li>而 p 的父节点的编号为 <code>(f(p) - 1) / 2</code></li></ul><p>编号函数 <code>f</code> 被称二叉树 T 的位置的<strong>层编号</strong>，因为它将 T 每一层的位置从左往右按递增顺序编号。</p><h4 id="3-2-1-思路">3.2.1 思路</h4><p>层编号函数 <code>f</code> 是一种二叉树 T 依据基于数组结构 A（例如，Python 列表）的表示方法，<strong>T 的 p 位置元素存储在数组下标为 <code>f(p)</code> 的内存中</strong>。</p><p>注意，层编号是基于树内的潜在位置，而不是所给树的实际位置，因此编号不一定是连续的。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743060184180.png" alt="数组存储树的示例" style="zoom:67%;" /><h4 id="3-2-2-算法分析-缺点">3.2.2 算法分析/缺点</h4><ul><li>空间使用极大依赖于树的形状，在二叉树为完全二叉树时效率最高；最坏情况下数组长度 N 与节点数 n 有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N = 2^n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 的关系</li><li>删除、插入等更新操作花费时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul><h3 id="3-3-一般树的链式结构">3.3 一般树的链式结构</h3><p>对于一般的树结构，<code>parent</code> 父节点唯一，没有变化；<code>element</code> 元素存储也大致相同；唯一不同的是子节点可以是多个，可以通过<strong>存储一个指向指针数组的指针</strong>来实现指向多个子节点。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743060645944.png" alt="一般树的链式结构"></p><p><strong>算法分析</strong></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743060700401.png" alt="一般树链式结构的时间复杂度"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计软件 R 语言学习笔记 (6) 统计图表</title>
      <link href="/posts/86c8422a.html"/>
      <url>/posts/86c8422a.html</url>
      
        <content type="html"><![CDATA[<h1>统计软件 R 语言笔记 (6)：统计图表</h1><p>本章介绍了常见的统计图表和其 R 语言实现方法：频数频率图表、条形/柱状图、列联表、饼图；直方图、箱线图、散点图。同时介绍了 R 语言绘图的范式：高级&amp;低级绘图函数、常见参数设置、子图、保存图片的方法。</p><h2 id="1-定性变量的统计图表">1 定性变量的统计图表</h2><h3 id="1-1-频率-频数表（Frequency-Table）">1.1 频率/频数表（Frequency Table）</h3><p><strong>定义</strong>：统计各分类出现的次数或比例。</p><p><strong>R实现</strong></p><ul><li>简单频数表：<code>table()</code> 函数</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 示例：性别频数表</span></span><br><span class="line"><span class="operator">&gt;</span> gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> freq_table <span class="operator">&lt;-</span> table<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>freq_table<span class="punctuation">)</span></span><br><span class="line">gender</span><br><span class="line">男 女 </span><br><span class="line"> <span class="number">3</span>  <span class="number">2</span> </span><br></pre></td></tr></table></figure><ul><li><strong>频率表（百分比）</strong>：<code>prop.table()</code> 函数</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> prop_table <span class="operator">&lt;-</span> prop.table<span class="punctuation">(</span>freq_table<span class="punctuation">)</span> <span class="operator">*</span> <span class="number">100</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>prop_table<span class="punctuation">)</span></span><br><span class="line">gender</span><br><span class="line">男 女 </span><br><span class="line"><span class="number">60</span> <span class="number">40</span> </span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：若数据为数值型但需按分类统计，需先转换为因子：<code>factor(data)</code>。</p><h3 id="1-2-条形图-柱状图（Bar-Chart）">1.2 条形图/柱状图（Bar Chart）</h3><p><strong>用途</strong>：展示分类变量的频数分布，支持横向/纵向排列。</p><p><strong>R实现</strong></p><ul><li>基础绘图：<code>barplot()</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">barplot<span class="punctuation">(</span>freq_table<span class="punctuation">,</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;gender bar plot&quot;</span><span class="punctuation">,</span>  <span class="comment"># 标题</span></span><br><span class="line">    xlab <span class="operator">=</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">,</span><span class="comment"># x 轴</span></span><br><span class="line">    ylab <span class="operator">=</span> <span class="string">&quot;freq&quot;</span><span class="punctuation">,</span><span class="comment"># y 轴</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="comment"># 颜色</span></span><br><span class="line">    horiz <span class="operator">=</span> <span class="literal">TRUE</span><span class="comment"># 是否横向</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>堆叠条形图：<code>barplot(height)</code> 当 <code>height</code> 为矩阵时</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">20</span><span class="punctuation">,</span> <span class="number">30</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">35</span><span class="punctuation">,</span> <span class="number">15</span><span class="punctuation">,</span> <span class="number">40</span><span class="punctuation">)</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line">rownames<span class="punctuation">(</span>data<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>data<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制堆叠条形图</span></span><br><span class="line">barplot<span class="punctuation">(</span>data<span class="punctuation">,</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Gender Distribution by Category&quot;</span><span class="punctuation">,</span></span><br><span class="line">    beside <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span>  <span class="comment"># 默认 FALSE ，为 TRUE 则不是堆叠而是并列</span></span><br><span class="line">    xlab <span class="operator">=</span> <span class="string">&quot;Category&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ylab <span class="operator">=</span> <span class="string">&quot;Frequency&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    legend.text <span class="operator">=</span> rownames<span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">,</span> <span class="comment"># 添加图例</span></span><br><span class="line">    args.legend <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span>x <span class="operator">=</span> <span class="string">&quot;topright&quot;</span><span class="punctuation">)</span> <span class="comment"># 图例位置</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/stacked_and_grouped_barplot.png" alt="并列和堆叠"></p><ul><li><code>ggplot2</code> 库</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span></span><br><span class="line">ggplot<span class="punctuation">(</span>data.frame<span class="punctuation">(</span>gender<span class="punctuation">)</span><span class="punctuation">,</span> aes<span class="punctuation">(</span>x <span class="operator">=</span> gender<span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    geom_bar<span class="punctuation">(</span>fill <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    labs<span class="punctuation">(</span>title <span class="operator">=</span> <span class="string">&quot;gender bar plot&quot;</span><span class="punctuation">,</span> x <span class="operator">=</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">,</span> y <span class="operator">=</span> <span class="string">&quot;freq&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-列联表（Contingency-Table）">1.3 列联表（Contingency Table）</h3><p><strong>定义</strong>：分析两个或多个分类变量的交叉分布。</p><p><strong>R实现</strong></p><ul><li>基础方法：<code>table(var1, var2)</code> 或 <code>xtabs(~var1 + var2, data)</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 示例：性别与血型列联表</span></span><br><span class="line"><span class="operator">&gt;</span> blood_type <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;O&quot;</span><span class="punctuation">,</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> cross_table <span class="operator">&lt;-</span> table<span class="punctuation">(</span>gender<span class="punctuation">,</span> blood_type<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>cross_table<span class="punctuation">)</span></span><br><span class="line">      blood_type</span><br><span class="line">gender A B O</span><br><span class="line">    男 <span class="number">2</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">    女 <span class="number">0</span> <span class="number">2</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>添加边际和：<code>addmargins()</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> addmargins<span class="punctuation">(</span>cross_table<span class="punctuation">)</span></span><br><span class="line">      blood_type</span><br><span class="line">gender A B O Sum</span><br><span class="line">   男  <span class="number">2</span> <span class="number">0</span> <span class="number">1</span>   <span class="number">3</span></span><br><span class="line">   女  <span class="number">0</span> <span class="number">2</span> <span class="number">0</span>   <span class="number">2</span></span><br><span class="line">   Sum <span class="number">2</span> <span class="number">2</span> <span class="number">1</span>   <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>比例表：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> prop.table<span class="punctuation">(</span>cross_table<span class="punctuation">,</span> margin <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span>  <span class="comment"># 按行计算比例</span></span><br><span class="line">      blood_type</span><br><span class="line">gender         A         B         O</span><br><span class="line">    男 <span class="number">0.6666667</span> <span class="number">0.0000000</span> <span class="number">0.3333333</span></span><br><span class="line">    女 <span class="number">0.0000000</span> <span class="number">1.0000000</span> <span class="number">0.0000000</span></span><br></pre></td></tr></table></figure><h3 id="1-4-饼图（Pie-Chart）">1.4 饼图（Pie Chart）</h3><p><strong>用途</strong>：展示各类别占比（适用于少量分类）。</p><p><strong>R实现</strong></p><ul><li>基础绘图：<code>pie()</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">)</span></span><br><span class="line">freq_table <span class="operator">&lt;-</span> table<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line">pie<span class="punctuation">(</span>freq_table<span class="punctuation">,</span></span><br><span class="line">    labels <span class="operator">=</span> <span class="built_in">names</span><span class="punctuation">(</span>freq_table<span class="punctuation">)</span><span class="punctuation">,</span> <span class="comment"># 每一块扇形标签 字符型向量</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Pie of gender&quot;</span><span class="punctuation">,</span> <span class="comment"># 表头</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span> <span class="comment"># 颜色</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以展示占比</span></span><br><span class="line">prop_table <span class="operator">&lt;-</span> prop.table<span class="punctuation">(</span>freq_table<span class="punctuation">)</span> <span class="operator">*</span> <span class="number">100</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">)</span></span><br><span class="line">freq_table <span class="operator">&lt;-</span> table<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line">pie<span class="punctuation">(</span>freq_table<span class="punctuation">,</span></span><br><span class="line">    labels <span class="operator">=</span> paste<span class="punctuation">(</span>prop_table<span class="punctuation">,</span> <span class="string">&quot;%&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="comment"># 每一块扇形标签 字符型向量</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Pie of gender&quot;</span><span class="punctuation">,</span> <span class="comment"># 表头</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span> <span class="comment"># 颜色</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/pie.png" alt=""></p><ul><li><code>ggplot2</code> 库</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ggplot<span class="punctuation">(</span>data.frame<span class="punctuation">(</span>gender<span class="punctuation">)</span><span class="punctuation">,</span> aes<span class="punctuation">(</span>x <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> fill <span class="operator">=</span> gender<span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    geom_bar<span class="punctuation">(</span>width <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    coord_polar<span class="punctuation">(</span>theta <span class="operator">=</span> <span class="string">&quot;y&quot;</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    labs<span class="punctuation">(</span>title <span class="operator">=</span> <span class="string">&quot;Pie of gender&quot;</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    theme_void<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="2-定量变量的统计图表">2 定量变量的统计图表</h2><h3 id="2-1-直方图（Histogram）">2.1 直方图（Histogram）</h3><p><strong>用途</strong>：展示连续变量的分布与频数，通过分箱（bin）统计。直方图中，矩形的高度表示每一组的频数或频率，宽度则表示各组的组距，因此其高度与宽度均有意义。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hist<span class="punctuation">(</span>x<span class="punctuation">,</span> breaks <span class="operator">=</span> <span class="string">&quot;Sturges&quot;</span><span class="punctuation">,</span></span><br><span class="line">     freq <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> probability <span class="operator">=</span> <span class="operator">!</span>freq<span class="punctuation">,</span></span><br><span class="line">     include.lowest <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> right <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> fuzz <span class="operator">=</span> <span class="number">1e-7</span><span class="punctuation">,</span></span><br><span class="line">     density <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> angle <span class="operator">=</span> <span class="number">45</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;lightgray&quot;</span><span class="punctuation">,</span> border <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span></span><br><span class="line">     main <span class="operator">=</span> paste<span class="punctuation">(</span><span class="string">&quot;Histogram of&quot;</span> <span class="punctuation">,</span> xname<span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">     xlim <span class="operator">=</span> <span class="built_in">range</span><span class="punctuation">(</span>breaks<span class="punctuation">)</span><span class="punctuation">,</span> ylim <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span></span><br><span class="line">     xlab <span class="operator">=</span> xname<span class="punctuation">,</span> ylab<span class="punctuation">,</span></span><br><span class="line">     axes <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> plot <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> labels <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">     nclass <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> warn.unused <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>参数</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>x</code></td><td style="text-align:left">输入数据，通常为数值型向量。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left"><code>breaks</code></td><td style="text-align:left">定义直方图的区间划分方式。可以是区间数（如 10）、区间向量（如 <code>c(0, 10, 20)</code>）或字符串（如 “Sturges”）。</td><td style="text-align:left"><code>&quot;Sturges&quot;</code></td></tr><tr><td style="text-align:left"><code>freq</code></td><td style="text-align:left">是否显示频数（TRUE）或概率密度（FALSE）。</td><td style="text-align:left"><code>NULL</code></td></tr><tr><td style="text-align:left"><code>probability</code></td><td style="text-align:left">是否绘制概率密度图（TRUE）或频数直方图（FALSE）。</td><td style="text-align:left"><code>!freq</code></td></tr><tr><td style="text-align:left"><code>include.lowest</code></td><td style="text-align:left">是否包含区间的最小值。</td><td style="text-align:left"><code>TRUE</code></td></tr><tr><td style="text-align:left"><code>right</code></td><td style="text-align:left">区间是否右闭合（TRUE）或左闭合（FALSE）。</td><td style="text-align:left"><code>TRUE</code></td></tr><tr><td style="text-align:left"><code>col</code></td><td style="text-align:left">填充颜色。</td><td style="text-align:left"><code>&quot;lightgray&quot;</code></td></tr><tr><td style="text-align:left"><code>main</code></td><td style="text-align:left">图形标题。</td><td style="text-align:left"><code>paste(&quot;Histogram of&quot;, xname)</code></td></tr><tr><td style="text-align:left"><code>xlim</code></td><td style="text-align:left">x轴范围。</td><td style="text-align:left"><code>range(breaks)</code></td></tr><tr><td style="text-align:left"><code>ylim</code></td><td style="text-align:left">y轴范围。</td><td style="text-align:left"><code>NULL</code></td></tr><tr><td style="text-align:left"><code>xlab</code></td><td style="text-align:left">x轴标签。</td><td style="text-align:left"><code>xname</code></td></tr><tr><td style="text-align:left"><code>ylab</code></td><td style="text-align:left">y轴标签。</td><td style="text-align:left">自动生成</td></tr><tr><td style="text-align:left"><code>axes</code></td><td style="text-align:left">是否绘制坐标轴。</td><td style="text-align:left"><code>TRUE</code></td></tr><tr><td style="text-align:left"><code>plot</code></td><td style="text-align:left">是否绘制图形（TRUE）或仅返回计算结果（FALSE）。</td><td style="text-align:left"><code>TRUE</code></td></tr><tr><td style="text-align:left"><code>labels</code></td><td style="text-align:left">是否在条形上方显示标签。</td><td style="text-align:left"><code>FALSE</code></td></tr><tr><td style="text-align:left"><code>nclass</code></td><td style="text-align:left">区间数的替代参数。</td><td style="text-align:left"><code>NULL</code></td></tr></tbody></table><p><strong>示例</strong></p><ul><li>基础绘图：<code>hist()</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">1000</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">50</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">hist<span class="punctuation">(</span>data<span class="punctuation">,</span></span><br><span class="line">    breaks <span class="operator">=</span> <span class="number">20</span><span class="punctuation">,</span> <span class="comment"># 分箱数</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Histogram&quot;</span><span class="punctuation">,</span></span><br><span class="line">    xlab <span class="operator">=</span> <span class="string">&quot;values&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="string">&quot;skyblue&quot;</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加趋势线</span></span><br><span class="line">xfit <span class="operator">&lt;-</span> seq<span class="punctuation">(</span><span class="built_in">min</span><span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">max</span><span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">length</span> <span class="operator">=</span> <span class="number">40</span><span class="punctuation">)</span></span><br><span class="line">yfit <span class="operator">&lt;-</span> dnorm<span class="punctuation">(</span>xfit<span class="punctuation">,</span> mean <span class="operator">=</span> mean<span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">,</span> sd <span class="operator">=</span> sd<span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">lines<span class="punctuation">(</span>xfit<span class="punctuation">,</span> yfit<span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span> lwd <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/hist.png" alt="hist" style="zoom:67%;" /><h3 id="2-2-箱线图（Boxplot）">2.2 箱线图（Boxplot）</h3><p><strong>用途</strong>： 展示数据的中位数、四分位数、离群点，支持分组比较。</p><p><strong>格式</strong></p><table><thead><tr><th style="text-align:center"><strong>参数</strong></th><th style="text-align:center"><strong>说明</strong></th><th style="text-align:center"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">输入数据，可以是向量、列表或公式（如 <code>y ~ group</code>）。</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center"><code>...</code></td><td style="text-align:center">其他图形参数（如 <code>main</code>, <code>xlab</code>, <code>ylab</code> 等）。</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center"><code>range</code></td><td style="text-align:center">定义异常值的范围（默认为 1.5 倍的四分位距）。</td><td style="text-align:center"><code>1.5</code></td></tr><tr><td style="text-align:center"><code>width</code></td><td style="text-align:center">箱线图的宽度。</td><td style="text-align:center"><code>NULL</code></td></tr><tr><td style="text-align:center"><code>varwidth</code></td><td style="text-align:center">是否根据样本量调整箱线图宽度。</td><td style="text-align:center"><code>FALSE</code></td></tr><tr><td style="text-align:center"><code>notch</code></td><td style="text-align:center">是否绘制缺口以比较中位数的显著性。</td><td style="text-align:center"><code>FALSE</code></td></tr><tr><td style="text-align:center"><code>outline</code></td><td style="text-align:center">是否显示异常值。</td><td style="text-align:center"><code>TRUE</code></td></tr><tr><td style="text-align:center"><code>names</code></td><td style="text-align:center">箱线图的组别标签。</td><td style="text-align:center">自动生成</td></tr><tr><td style="text-align:center"><code>col</code></td><td style="text-align:center">箱线图的填充颜色。</td><td style="text-align:center"><code>&quot;lightgray&quot;</code></td></tr><tr><td style="text-align:center"><code>log</code></td><td style="text-align:center">是否对坐标轴取对数。</td><td style="text-align:center"><code>&quot;&quot;</code></td></tr><tr><td style="text-align:center"><code>pars</code></td><td style="text-align:center">图形参数的列表（如 <code>boxwex</code>, <code>staplewex</code>, <code>outwex</code>）。</td><td style="text-align:center"><code>list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5)</code></td></tr><tr><td style="text-align:center"><code>ann</code></td><td style="text-align:center">是否绘制坐标轴标签和标题。</td><td style="text-align:center"><code>!add</code></td></tr><tr><td style="text-align:center"><code>horizontal</code></td><td style="text-align:center">是否绘制水平箱线图。</td><td style="text-align:center"><code>FALSE</code></td></tr><tr><td style="text-align:center"><code>add</code></td><td style="text-align:center">是否将箱线图添加到现有图形中。</td><td style="text-align:center"><code>FALSE</code></td></tr><tr><td style="text-align:center"><code>at</code></td><td style="text-align:center">箱线图的位置（用于并排箱线图）。</td><td style="text-align:center"><code>NULL</code></td></tr></tbody></table><p><strong>示例</strong></p><ul><li>单组箱线图</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">)</span></span><br><span class="line">boxplot<span class="punctuation">(</span>data<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Boxplot of Normal Data&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;skyblue&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>并排箱线图</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 并排箱线图</span></span><br><span class="line">group1 <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">)</span></span><br><span class="line">group2 <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">boxplot<span class="punctuation">(</span></span><br><span class="line">    group1<span class="punctuation">,</span></span><br><span class="line">    group2<span class="punctuation">,</span></span><br><span class="line">    <span class="built_in">names</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Group 1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Group 2&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Side-by-Side Boxplot&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>带缺口的箱线图（只是为了突出中位数）</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">group1 <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">)</span></span><br><span class="line">group2 <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">boxplot<span class="punctuation">(</span></span><br><span class="line">    group1<span class="punctuation">,</span></span><br><span class="line">    group2<span class="punctuation">,</span></span><br><span class="line">    notch <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">    <span class="built_in">names</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Group 1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Group 2&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Notched Boxplot&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/boxplots.png" alt="boxplots"></p><ul><li><code>~</code> 分组绘制</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用内置数据集 mtcars</span></span><br><span class="line">boxplot<span class="punctuation">(</span>mpg <span class="operator">~</span> cyl<span class="punctuation">,</span> <span class="comment"># mpg 按照 cyl 分组画出 boxplot</span></span><br><span class="line">    data <span class="operator">=</span> mtcars<span class="punctuation">,</span> <span class="comment"># mpg, cyl 都是数据框 mtcars 的列</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;MPG by Cylinder&quot;</span><span class="punctuation">,</span></span><br><span class="line">    xlab <span class="operator">=</span> <span class="string">&quot;Number of Cylinders&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ylab <span class="operator">=</span> <span class="string">&quot;Miles per Gallon&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">,</span> <span class="string">&quot;lightgreen&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/grouped_boxplots.png" alt="分组绘制：mpg 按照 cyl 分组画出 boxplot，而 cyl 有三组"></p><h3 id="2-3-散点图（Scatter-Plot）两个定量变量">2.3 散点图（Scatter Plot）两个定量变量</h3><p><strong>用途</strong>：分析两个定量变量的相关性或分布模式。</p><p><strong>基础使用</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot<span class="punctuation">(</span>women<span class="operator">$</span>height<span class="punctuation">,</span> women<span class="operator">$</span>weight<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>下面，借由这个例子，介绍 R 语言绘图的范式。</p><h2 id="3-R-语言绘图">3 R 语言绘图</h2><h3 id="3-1-高级-低级绘图函数">3.1 高级 &amp; 低级绘图函数</h3><p>在R中有两种绘图函数：</p><ul><li><strong>高级绘图函数</strong>：创建一个新的图形，如 <code>hist</code> <code>plot</code> 。</li><li><strong>低级绘图函数</strong>：在现有的图形上添加元素，对原有图进行补充，如 <code>lines</code> 。</li></ul><h4 id="3-1-1-高级绘图函数">3.1.1 高级绘图函数</h4><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td><code>plot(x)</code></td><td>以 x 的元素值为纵坐标、以序号为横坐标绘图</td></tr><tr><td><code>plot(x,y)</code></td><td>x 与 y 的二元作图</td></tr><tr><td><code>pie(x)</code></td><td>饼图</td></tr><tr><td><code>boxplot(x)</code></td><td>盒形图（也称箱线图）</td></tr><tr><td><code>hist(x)</code></td><td>x 的频率直方图</td></tr><tr><td><code>barplot(x)</code></td><td>x 的值的条形图</td></tr><tr><td><code>qqnorm(x)</code></td><td>正态分位数-分位数图</td></tr></tbody></table><h4 id="3-1-2-低级绘图函数">3.1.2 低级绘图函数</h4><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td><code>points(x, y)</code></td><td>添加点</td></tr><tr><td><code>lines(X, Y)</code></td><td>添加线</td></tr><tr><td><code>text(x, y, labels, ...)</code></td><td>加标记，在 (x, y) 处添加用 labels 指定的文字</td></tr><tr><td><code>abline(a, b)</code></td><td>加直线，绘制斜率为 b 和截距为 a 的直线</td></tr><tr><td><code>abline(h = y)</code></td><td>加直线，在纵坐标 y 处画水平线</td></tr><tr><td><code>abline(v = x)</code></td><td>加直线，在横坐标 x 处画垂直线</td></tr><tr><td><code>abline(lm.obj)</code></td><td>加直线，画出 lm.obj 确定的回归线</td></tr><tr><td><code>legend(x, y, legend)</code></td><td>加注释，在点 (x, y) 处，说明内容由 legend 给定</td></tr><tr><td><code>title()</code></td><td>加标题，也可添加一个副标题</td></tr><tr><td><code>axis(side, vect)</code></td><td>加坐标轴</td></tr></tbody></table><h3 id="3-2-参数">3.2 参数</h3><h4 id="3-2-1-共同参数选项">3.2.1 共同参数选项</h4><table><thead><tr><th><strong>选项</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><code>axes=TRUE</code></td><td>如果是 FALSE，不绘制轴与边框</td></tr><tr><td><code>type=&quot;p&quot;</code></td><td>指定图形的类型</td></tr><tr><td><code>xlim=, ylim=</code></td><td>指定轴的显示范围</td></tr><tr><td><code>xlab=, ylab=</code></td><td>坐标轴的标签</td></tr><tr><td><code>main=</code></td><td>主标题</td></tr><tr><td><code>sub=</code></td><td>副标题</td></tr></tbody></table><blockquote><p><code>&quot;p&quot;</code>：点</p><p><code>&quot;l&quot;</code>：线</p><p><code>&quot;b&quot;</code>：点连线</p><p><code>&quot;o&quot;</code>：同上，但是线在点上</p><p><code>&quot;h&quot;</code>：垂直线</p><p><code>&quot;s&quot;</code>：阶梯式，垂直线顶端显示数据</p><p><code>&quot;S&quot;</code>：同上，但是垂直线底端显示数据</p></blockquote><p>示例：一些常见参数的用法</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742892621595.png" alt="共同参数的指代"></p><p>示例：不同的点类型 <code>type</code></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742892676179.png" alt="不同点类型，参数 type"></p><h4 id="3-2-2-其他常用绘图参数">3.2.2 其他常用绘图参数</h4><table><thead><tr><th><strong>选项</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><code>adj</code></td><td>控制关于文字对齐方式（0-左对齐，0.5-居中对齐，1-右对齐）</td></tr><tr><td><code>cex</code></td><td>符号和文字大小：<code>cex.axis</code>, <code>cex.main</code>, <code>cex.axis</code>, <code>cex.main</code></td></tr><tr><td><code>col</code></td><td>颜色： <code>col.axis</code>, <code>col.lab</code>, <code>col.main</code>, <code>col.axis</code>, <code>col.lab</code>, <code>col.main</code></td></tr><tr><td><code>font</code></td><td>文字字体（1-正常，2-粗体，3-斜体，4-粗斜体）：<code>font.axis</code>, <code>font.lab</code>, <code>font.main</code>, <code>font.axis</code>, <code>font.lab</code>, <code>font.main</code></td></tr><tr><td><code>lwd</code></td><td>线的宽度</td></tr><tr><td><code>lty</code></td><td>连线的线型（1-实线，2-虚线，3-点线，4-点虚线，5-长虚线，6-双虚线）</td></tr><tr><td><code>pch</code></td><td>绘图符号的类型（1到25的整数）</td></tr><tr><td><code>pty</code></td><td>绘图区域类型</td></tr><tr><td><code>xaxt</code> <code>yaxt</code></td><td>如果 <code>xaxt=&quot;n&quot;</code>，设置 x 轴不显示；如果 <code>yaxt=&quot;n&quot;</code>，设置 y 轴不显示</td></tr><tr><td><code>srt</code></td><td>文字旋转角度</td></tr></tbody></table><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742893115596.png" alt="pch 不同数字对应的图案" style="zoom:100%;" /><p>特别地，<code>pch</code> 可以传入一个字符串向量，当作图案：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pch_type <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;?&quot;</span><span class="punctuation">,</span> <span class="string">&quot;1&quot;</span><span class="punctuation">)</span></span><br><span class="line">X <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">5</span></span><br><span class="line">Y <span class="operator">&lt;-</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="number">6</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> col <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> pch <span class="operator">=</span> pch_type<span class="punctuation">,</span> cex <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;pch:*aA?1&quot;</span><span class="punctuation">,</span> font.lab <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>pch = pch_type</code> ：图案可以自定义 <code>pch_type</code></p></blockquote><h3 id="3-3-画图面板分割：子图">3.3 画图面板分割：子图</h3><p><code>mfrow</code> 参数：</p><ul><li><p>按<strong>行顺序</strong>填充子面板。</p></li><li><p>语法：<code>par(mfrow = c(nrow, ncol))</code>，其中 <code>nrow</code> 是行数，<code>ncol</code> 是列数。</p></li><li><p>示例：<code>par(mfrow = c(2, 2))</code> 将绘图窗口分割为 2 行 2 列，共 4 个子面板。</p></li></ul><p><code>mfcol</code> 参数：</p><ul><li>按<strong>列顺序</strong>填充子面板。</li><li>语法：<code>par(mfcol = c(nrow, ncol))</code>。</li></ul><p>示例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置绘图面板为 2 行 2 列</span></span><br><span class="line">op <span class="operator">&lt;-</span> par<span class="punctuation">(</span>mfrow <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据</span></span><br><span class="line">X <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">10</span></span><br><span class="line">Y <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制默认点图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制蓝色点图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Blue Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制红色点图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Red Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;red&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制绿色点图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Green Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;green&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">par<span class="punctuation">(</span>op<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p>用 <code>op</code> 对象存储 <code>par()</code> 函数的子图设置，再次使用 <code>par(op)</code> 即可重置默认设置。否则，之后的绘图会一直按照 最开始 <code>par()</code> 的设置放置。</p></blockquote><h3 id="3-4-保存图片">3.4 保存图片</h3><h4 id="3-4-1-png-保存为-PNG-图片">3.4.1 png() 保存为 PNG 图片</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 PNG 设备，设置文件名和尺寸</span></span><br><span class="line">png<span class="punctuation">(</span><span class="string">&quot;my_plot.png&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">800</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">600</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;My Plot&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭设备，保存图片</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>&quot;my_plot.png&quot;</code>：保存的文件名。</li><li><code>width</code> 和 <code>height</code>：图片的宽度和高度（单位：像素）。</li><li><code>dev.off()</code>：关闭图形设备，保存图片。</li></ul><h4 id="3-4-2-pdf-保存为-PDF-文件">3.4.2 pdf() 保存为 PDF 文件</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 PDF 设备，设置文件名和尺寸</span></span><br><span class="line">pdf<span class="punctuation">(</span><span class="string">&quot;my_plot.pdf&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">6</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;My Plot&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭设备，保存文件</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>&quot;my_plot.pdf&quot;</code>：保存的文件名。</li><li><code>width</code> 和 <code>height</code>：图片的宽度和高度（单位：英寸）。</li></ul><hr><h4 id="3-4-3-jpeg-保存为-JPEG-图片">3.4.3 jpeg() 保存为 JPEG 图片</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 JPEG 设备，设置文件名和尺寸</span></span><br><span class="line">jpeg<span class="punctuation">(</span><span class="string">&quot;my_plot.jpg&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">800</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">600</span><span class="punctuation">,</span> quality <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;My Plot&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭设备，保存图片</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>quality</code>：图片质量（0-100），值越大质量越高。</li></ul><h4 id="3-4-4-dev-copy-保存当前图片">3.4.4 dev.copy() 保存当前图片</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;My Plot&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前图形并保存为 PNG</span></span><br><span class="line">dev.copy<span class="punctuation">(</span>png<span class="punctuation">,</span> <span class="string">&quot;my_plot.png&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">800</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">600</span><span class="punctuation">)</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>适用场景</strong>：在已经绘制图形的情况下，直接保存当前图形。</p><h4 id="3-4-5-保存多子图面板">3.4.5 保存多子图面板</h4><p>如果使用 <code>par(mfrow = c(nrow, ncol))</code> 绘制了多子图面板，可以直接保存整个面板：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 PNG 设备</span></span><br><span class="line">png<span class="punctuation">(</span><span class="string">&quot;multi_panel_plot.png&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">1200</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">800</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置面板布局</span></span><br><span class="line">par<span class="punctuation">(</span>mfrow <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制多个子图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Blue Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Red Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;red&quot;</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Green Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;green&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭设备，保存图片</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> R 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R 语言 </tag>
            
            <tag> 统计软件 </tag>
            
            <tag> R programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计软件 R 语言学习笔记 (5) 统计数据类型和日期时间数据</title>
      <link href="/posts/ccdaeb5f.html"/>
      <url>/posts/ccdaeb5f.html</url>
      
        <content type="html"><![CDATA[<h1>统计数据类型和日期时间数据</h1><p>本章介绍统计数据的计量尺度（定类、定序、定距、定比），重点介绍了一种特殊的数据类型：时间和日期。并讲解了一些常用时间日期函数：<code>strptime</code> <code>as.Date</code> ，除此之外还介绍了时间 Times 类型的两种类型 <code>POSIXct</code> 和 <code>POSIXlt</code> 。</p><h2 id="1-统计数据的计量尺度">1 统计数据的计量尺度</h2><p>统计数据的四种计量尺度：</p><ul><li>定类尺度</li><li>定序尺度</li><li>定距尺度</li><li>定比尺度</li></ul><h3 id="1-1-定类尺度">1.1 定类尺度</h3><p><strong>概念</strong>：又称列名尺度或类别尺度，是按照研究对象的某种属性将其划分为若干组或类的一种测度。</p><p><strong>举例</strong>：性别 、籍贯、民族等</p><p><strong>特征</strong>：</p><ol><li>只能区分事物的类别，无法比较优劣或大小，</li><li>对应变量：名义变量，比如用 X 表示性别</li><li>文字，数值（标签）：不能加减乘除</li></ol><h3 id="1-2-定序尺度">1.2 定序尺度</h3><p><strong>概念</strong>：又称顺序尺度，它是对事物之间等级或顺序差别的一种测度。</p><p><strong>举例</strong>：成绩 (A, B, C) 、绩点、学历、年级等。</p><p><strong>特征</strong>：</p><ol><li>对事物可以分类、可以比较优劣和大小，</li><li>对应变量：次序变量</li><li>文字，数值（标签）：不能加减乘除</li></ol><h3 id="1-3-定距尺度">1.3 定距尺度</h3><p><strong>概念</strong>：又称间隔尺度，是对事物类别或次序之间的间隔进行的一种测度。</p><p><strong>举例</strong>：摄氏温度、年份等。</p><p><strong>特征</strong>：</p><ol><li>能分类、比较大小，计量差距</li><li>没有绝对零点，“0”表示“0”水平，不表示“没有”或“不存在”。</li><li>对应变量：定距变量</li><li>数值，可以加减，不能乘除</li></ol><h3 id="1-4-定比尺度">1.4 定比尺度</h3><p><strong>概念</strong>：也称比率尺度，是对事物之间比值的一种测度。</p><p><strong>举例</strong>：成绩（0-100）、年龄、企业的产值利润等</p><p><strong>特征</strong>：</p><ol><li>分类、排序、比较大小、求出差异、计算两个数值之间的比率。</li><li>具有绝对零点，即数字 0 表示 “没有” 或 “不存在” 。</li><li>对应变量：定比变量</li><li>数值，可以加减乘除</li></ol><h3 id="1-5-四种计量尺度的比较">1.5 四种计量尺度的比较</h3><table><thead><tr><th style="text-align:left">数字特征</th><th style="text-align:center">定类尺度</th><th style="text-align:center">定序尺度</th><th style="text-align:center">定距尺度</th><th style="text-align:center">定比尺度</th></tr></thead><tbody><tr><td style="text-align:left">分类 <code>==</code> <code>!=</code></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:left">排序 <code>&gt;</code> <code>&lt;</code></td><td style="text-align:center"></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:left">间距 <code>+</code> <code>-</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:left">比值 <code>*</code> <code>/</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><code>True</code></td></tr></tbody></table><p>四种尺度所包含的信息量是依次递增的，级别由低到高。（ 定类 &lt; 定序 &lt; 定距 &lt; 定比 ）</p><p>根据较高层次的计量尺度可以获得较低层次的计量尺度。</p><p>不同的尺度数据对应着不同数据显示方法和分析方法。</p><h3 id="1-6-统计数据的类型">1.6 统计数据的类型</h3><p><strong>定性数据</strong> ( qualitative data ) ：由 <em>定类</em> 和 <em>定序</em> 尺度计量而成，反映事物的品质特征, 又称为属性数据。</p><p><strong>定量数据</strong> ( quantitative data ) ：由 <em>定距</em> 和 <em>定比</em> 尺度计量而成，反映事物的数量特征。</p><blockquote><p>图 举例：</p><ul><li><p>定性数据：条形图、饼图</p></li><li><p>定量数据：直方图，线图，茎叶图</p></li></ul><p>分析方法 举例</p><ul><li>定性数据：频数，频率表，众数，列联表</li><li>定量数据：均值，方差，相应回归分析</li></ul></blockquote><h2 id="2-特殊的数据类型：时间与日期">2 特殊的数据类型：时间与日期</h2><p>R 语言用了一种特殊的数据类型来表示日期和时间</p><ul><li>日期用Date类来表示</li><li>时间则是由两个不同的类：<code>POS Xct</code> 、 <code>POSIXIt</code></li></ul><p>例如：查看当前日期和时间 <code>date()</code> <code>Sys.Date()</code> <code>Sys.time()</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> date<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Mon Mar 24 21:40:23 2025&quot;</span></span><br><span class="line"><span class="operator">&gt;</span> Sys.Date<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2025-03-24&quot;</span></span><br><span class="line"><span class="operator">&gt;</span> Sys.time<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2025-03-24 21:40:37 CST&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>CST</code> ：英语全称为 Central Standard Time (USA) 、Central Standard Time (Australia)、China Standard Time 或 Cuba Standard Time 等四个地方。</p></blockquote><h3 id="2-1-日期-Date">2.1 日期 Date</h3><ul><li>日期不包括时间，只表示“某年某月某日”。</li><li>内部日期是以 1970年1月1日 至今的天数来存储。</li></ul><h4 id="2-1-1-as-Date-函数基本使用">2.1.1 as.Date() 函数基本使用</h4><ul><li>日期作为 Date 类对象来存储，在 R 里的工作方式是输入一个字符串，比如 <code>'1970-01-01'</code> ，然后用 <code>as.Date()</code> 函数转换成日期。</li><li><code>as.Date()</code> 方法默认传入字符串格式为 <code>'年(4位)-月(2位)-日(2位)'</code>；或者 <code>'年(4位)/月(2位)/日(2位)'</code> 。</li></ul><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> date1 <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2025-03-25&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>date1<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;numeric&quot;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">class</span><span class="punctuation">(</span>date1<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Date&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> date2 <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2025/03/25&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>date2<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;numeric&quot;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">class</span><span class="punctuation">(</span>date2<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Date&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-unclass-Date-计算日期差">2.1.2 unclass(Date) 计算日期差</h4><p>因为 R 语言采用距离 1970年1月1日 的天数来存储日期，所以使用 <code>unclass()</code> 可以检查距离 <code>1970/01/01/</code> 相差的日期数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="built_in">unclass</span><span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;2025/03/25&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">20172</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">unclass</span><span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;1970/01/01&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 距离 0 天</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">unclass</span><span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;1969/12/31&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 相差 -1 天</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="operator">-</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-as-Date-日期格式">2.1.3 as.Date() 日期格式</h4><p><strong>默认格式</strong>：<code>as.Date</code> 函数的默认日期格式为 <code>'年(4位)-月(2位)-日(2位)'</code> 例如<code>&quot;2008-10-24&quot;</code></p><p><strong>自定义格式</strong>：</p><p><code>as.Date</code> 函数支持通过 <code>format</code> 参数指定自定义日期格式。</p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>%d</code></td><td>数字表示的日期</td><td>01~31</td></tr><tr><td><code>%a</code></td><td>缩写的星期名</td><td>Mon</td></tr><tr><td><code>%A</code></td><td>非缩写星期名</td><td>Monday</td></tr><tr><td><code>%m</code></td><td>月份（00-12）</td><td>00~12</td></tr><tr><td><code>%b</code></td><td>缩写的月份</td><td>Jan</td></tr><tr><td><code>%B</code></td><td>非缩写月份</td><td>January</td></tr><tr><td><code>%y</code></td><td>两位数的年份</td><td>07</td></tr><tr><td><code>%Y</code></td><td>四位数的年份</td><td>2007</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as.Date<span class="punctuation">(</span><span class="string">&quot;10/24/08&quot;</span><span class="punctuation">,</span> format<span class="operator">=</span><span class="string">&quot;%m/%d/%y&quot;</span><span class="punctuation">)</span></span><br><span class="line">as.Date<span class="punctuation">(</span><span class="string">&quot;October-24-2008&quot;</span><span class="punctuation">,</span> format<span class="operator">=</span><span class="string">&quot;%B-%d-%Y&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="2-1-4-日期计算">2.1.4 日期计算</h4><p>R 语言支持直接计算两个日期之间的差异，结果为 <code>difftime</code> 类型。</p><p><strong>示例</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T1 <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;October-24-2008&quot;</span><span class="punctuation">,</span> format<span class="operator">=</span><span class="string">&quot;%B-%d-%Y&quot;</span><span class="punctuation">)</span></span><br><span class="line">T2 <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;October-28-2008&quot;</span><span class="punctuation">,</span> format<span class="operator">=</span><span class="string">&quot;%B-%d-%Y&quot;</span><span class="punctuation">)</span></span><br><span class="line">time_diff <span class="operator">&lt;-</span> T2 <span class="operator">-</span> T1</span><br><span class="line">print<span class="punctuation">(</span>time_diff<span class="punctuation">)</span>  <span class="comment"># Time difference of 4 days</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>time_diff<span class="punctuation">)</span>  <span class="comment"># &quot;difftime&quot;</span></span><br><span class="line">mode<span class="punctuation">(</span>time_diff<span class="punctuation">)</span>   <span class="comment"># &quot;numeric&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项</strong></p><ul><li>如果日期字符串格式与 <code>format</code> 参数不匹配，<code>as.Date</code> 函数会返回 <code>NA</code>。</li><li>确保日期格式化符号与日期字符串中的分隔符一致。</li></ul></blockquote><h3 id="2-2-时间-Times">2.2 时间 Times</h3><h4 id="2-2-1-strptime-函数">2.2.1 strptime() 函数</h4><p><code>strptime()</code> 函数用于将字符串解析为时间对象。其语法如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strptime<span class="punctuation">(</span>x<span class="punctuation">,</span> format<span class="punctuation">,</span> tz <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>x</code>: 表示时间的字符串。<br>例如：<code>&quot;October-7-2015 10:40:30&quot;</code>，<code>&quot;December 9, 2011 9:10&quot;</code>。</li><li><code>format</code>: 转换格式，需与字符串格式对应。<br>例如：<code>%B-%d-%Y %H:%M:%S</code>，<code>%B %d, %Y %H:%M</code>。</li><li><code>tz</code>: 表示时区，默认为当前时区。<br>例如：<code>CST</code>（北京时区），<code>GMT</code>（格林威治时间），<code>UTC</code>（世界协调时间）。</li></ul><p><strong>格式化符号</strong></p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>%B</code></td><td>英文全拼月份</td><td>October</td></tr><tr><td><code>%d</code></td><td>第几天（01-31）</td><td>07</td></tr><tr><td><code>%Y</code></td><td>带世纪的年份</td><td>2015</td></tr><tr><td><code>%H</code></td><td>小时（00-24）</td><td>10</td></tr><tr><td><code>%M</code></td><td>分钟（00-59）</td><td>40</td></tr><tr><td><code>%S</code></td><td>秒（00-61）</td><td>30</td></tr></tbody></table><p><strong>示例代码</strong></p><p>解析时间字符串</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> datestring <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;10 7, 2015 10:40&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10 9, 2011 9:10&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> strptime<span class="punctuation">(</span>datestring<span class="punctuation">,</span> <span class="string">&quot;%m %d, %Y %H:%M&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2015-10-07 10:40:00 CST&quot;</span> <span class="string">&quot;2011-10-09 09:10:00 CST&quot;</span></span><br></pre></td></tr></table></figure><p>查看对象类型</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="built_in">class</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;POSIXlt&quot;</span> <span class="string">&quot;POSIXt&quot;</span> </span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>格式匹配：确保 <code>format</code> 参数与时间字符串的格式完全一致，否则会返回 <code>NA</code>。</li><li>时区设置：如果未指定 <code>tz</code> 参数，默认使用当前时区。</li><li>大小写敏感：格式化符号（如 <code>%B</code>）区分大小写，需确保正确使用。</li></ol><h4 id="2-2-2-POSIXct-和-POSIXlt">2.2.2 POSIXct 和 POSIXlt</h4><p>R 语言中，时间用两种类型表示：<code>POSIXct</code> 和 <code>POSIXlt</code>。</p><h5 id="1-POSIXct">1. POSIXct</h5><p><strong>定义</strong>：时间用大整数表示，即从 1970 年 1 月 1 日至今的秒数。</p><p><strong>特点</strong>：</p><ul><li>适合存储在数据框中，因为它本质上是一个很大的整数向量。</li><li>适用于时间戳计算和存储。</li></ul><p><strong>示例</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> time_ct <span class="operator">&lt;-</span> as.POSIXct<span class="punctuation">(</span><span class="string">&quot;2023-10-05 14:30:00&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_ct<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 CST&quot;</span></span><br></pre></td></tr></table></figure><h5 id="2-POSIXlt">2. POSIXlt</h5><p><strong>定义</strong>：时间以列表形式存储，包含更多与时间相关的信息。</p><p><strong>特点</strong>：</p><ul><li>包含星期几、一年中的第几天、月份、日期等详细信息。</li><li>适合需要提取具体时间信息的场景。</li></ul><p><strong>示例</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> time_lt <span class="operator">&lt;-</span> as.POSIXlt<span class="punctuation">(</span><span class="string">&quot;2023-10-05 14:30:00&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 CST&quot;</span></span><br></pre></td></tr></table></figure><p>提取具体信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="operator">$</span>wday<span class="punctuation">)</span> <span class="comment"># 星期几（0=周日，1=周一，...）</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="operator">$</span>yday<span class="punctuation">)</span> <span class="comment"># 一年中的第几天（0-365）</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">277</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="operator">$</span>mon<span class="punctuation">)</span> <span class="comment"># 月份（0-11，0=1月，1=2月，...）</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-类型转换">2.2.3 类型转换</h4><p>使用 <code>as.POSIXct()</code> 和 <code>as.POSIXlt()</code> 函数可以在 <code>POSIXct</code> 和 <code>POSIXlt</code> 之间进行转换。</p><p><strong>示例</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 从 POSIXct 转换为 POSIXlt</span></span><br><span class="line"><span class="operator">&gt;</span> time_lt <span class="operator">&lt;-</span> as.POSIXlt<span class="punctuation">(</span>time_ct<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 CST&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 从 POSIXlt 转换为 POSIXct</span></span><br><span class="line"><span class="operator">&gt;</span> time_ct <span class="operator">&lt;-</span> as.POSIXct<span class="punctuation">(</span>time_lt<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_ct<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 CST&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>时区问题：默认情况下，R 使用当前时区（如 <code>CST</code>）。可以通过 <code>tz</code> 参数指定时区，例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> as.POSIXct<span class="punctuation">(</span><span class="string">&quot;2023-10-05 14:30:00&quot;</span><span class="punctuation">,</span> tz <span class="operator">=</span> <span class="string">&quot;UTC&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 UTC&quot;</span></span><br></pre></td></tr></table></figure><p>时间格式：确保时间字符串与 <code>as.POSIXct()</code> 或 <code>as.POSIXlt()</code> 的默认格式（<code>%Y-%m-%d %H:%M:%S</code>）一致，否则需要指定 <code>format</code> 参数。</p><h4 id="2-2-4-时间处理注意事项">2.2.4 时间处理注意事项</h4><p><code>as.POSIXlt()</code> 函数用于将时间转换为 <code>POSIXlt</code> 类，该类以列表形式存储时间信息，便于提取具体的时间元素（如秒、分钟、小时等）。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 获取当前时间</span></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> Sys.time<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 输出当前时间</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2025-03-25 12:33:14 CST&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 查看时间类型</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">class</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;POSIXct&quot;</span> <span class="string">&quot;POSIXt&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 转换为 POSIXlt 类</span></span><br><span class="line"><span class="operator">&gt;</span> tempx <span class="operator">&lt;-</span> as.POSIXlt<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>tempx<span class="punctuation">)</span> <span class="comment"># 输出转换后的时间</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2025-03-25 12:33:14 CST&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 解构 POSIXlt 对象</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">unclass</span><span class="punctuation">(</span>tempx<span class="punctuation">)</span> <span class="comment"># 查看内部结构</span></span><br><span class="line"><span class="comment"># 包含许多属性，例如：$sec [1] 14.19524 、 $min [1] 33 等</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 提取秒数 （POSIXlt 类 才可以提取秒数）</span></span><br><span class="line"><span class="operator">&gt;</span> seconds <span class="operator">&lt;-</span> tempx<span class="operator">$</span>sec</span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>seconds<span class="punctuation">)</span> <span class="comment"># 输出秒数（可能包含小数部分）</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">14.19524</span></span><br></pre></td></tr></table></figure><p>计算日期差</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 定义两个日期</span></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2012-03-01&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2012-02-28&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 计算日期差</span></span><br><span class="line"><span class="operator">&gt;</span> time_diff <span class="operator">&lt;-</span> x <span class="operator">-</span> y</span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_diff<span class="punctuation">)</span> <span class="comment"># 输出: Time difference of 2 days</span></span><br><span class="line">Time difference of <span class="number">2</span> days</span><br></pre></td></tr></table></figure><p>比较日期大小</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 比较日期</span></span><br><span class="line"><span class="operator">&gt;</span> is_later <span class="operator">&lt;-</span> x <span class="operator">&gt;</span> y</span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>is_later<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><blockquote><p>只有同一类型的时间才可以比较计算等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> R 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R 语言 </tag>
            
            <tag> 统计软件 </tag>
            
            <tag> R programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列 Queue</title>
      <link href="/posts/583f8c56.html"/>
      <url>/posts/583f8c56.html</url>
      
        <content type="html"><![CDATA[<h1>队列 Queue</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本章介绍了队列 (Queue) 数据类型，并实现了队列的抽象数据类型 (Queue ADT) 。并基于<strong>数组和链表</strong>分别实现了<strong>队列、循环队列和双端队列</strong>。由于队列的先进先出性 (FIFO) 能够实现很多应用，本章介绍了两个实际问题的应用：1. 使用队列实现杨辉三角；2. 使用<strong>栈+回溯法</strong>实现了迷宫问题的路径寻找、使用<strong>队列+洪水算法</strong>实现了迷宫问题的最短路寻找。</p><h2 id="1-队列的概念">1 队列的概念</h2><p><strong>队列</strong>：限制数据插入在一端进行、删除在另一端进行的特殊序列（FIFO）</p><ul><li>允许插入的一端称为队尾，允许删除的一端称为队头</li><li>在队尾插入元素称为入队（enqueue），在队头删除元素称为出队（dequeue）</li><li>队列中元素个数称为队列的长度</li></ul><h2 id="2-队列的抽象数据类型">2 队列的抽象数据类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ADT Queue &#123;</span><br><span class="line">数据对象：Q = &#123;Q1, Q2, ..., QN&#125;</span><br><span class="line">基本操作：</span><br><span class="line">Q.enqueue(e): 向队列 Q 的队尾添加一个元素</span><br><span class="line">Q.dequeue(): 从队列 Q 中移除并返回第一个元素</span><br><span class="line">Q.first(): 在不移除的前提下，返回队列的第一个元素</span><br><span class="line">        <span class="built_in">len</span>(Q): 返回队列 Q 的长度</span><br><span class="line">        Q.init(Q0): 使用序列 Q0 初始化队列 Q</span><br><span class="line">        Q.is_empty(): 检查队列 Q 是否为空，如为空则返回 <span class="literal">True</span></span><br><span class="line">        Q.clear(): 清空队列 Q</span><br><span class="line">&#125; ADT Queue</span><br></pre></td></tr></table></figure><p>例如：下面给出了一个队列的例子和一些操作的影响</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742524105408.png" alt="队列操作例子"></p><h2 id="3-基于数组的队列实现">3 基于数组的队列实现</h2><p>对于队列，可以使用<strong>数组</strong>的方式来实现队列：</p><ul><li>潜在的问题：<code>append(e)</code> 高效，但 <code>pop()</code> 很低效。</li><li>解决方案：用一个变量存储当前队头元素的索引，用指针指向 <code>None</code> 表示数组中的离队元素。</li><li>缺点：存储队列的列表长度为 <code>O(m)</code> ，其中 m 为自队列创建以来追加元素操作的数量总和，可能远远大于队列长度。即列表可能长度不足，当队列满时，仍然需要进行动态序列扩展，效率会有所较低（摊销成本）。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742524506790.png" alt=""></p><p>例如：上面 <code>f</code> 指代了队列的头部，如果队列头部元素出队，则 <code>f</code> 指针后移，其前面的元素置空 <code>None</code> 从而实现出队操作。</p><h3 id="3-1-循环使用数组">3.1 循环使用数组</h3><p>上面的方法会出现空间的浪费，例如 <code>f</code> 前面的出队后的空位，这部分的空间也可以利用起来。于是，<strong>循环使用数组</strong>的方法被发现。即：当新的元素入队时，如果列表在 <code>f</code> 的后面全满，则可以将新元素放在列表的头部（之前出队后空出的位置），这一个操作可以通过取模实现 <code>f = (f + 1) % N</code> 。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742524853272.png" alt="循环使用数组"></p><h3 id="3-2-代码实现">3.2 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;队列为空的异常类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;FIFO 队列实现&quot;&quot;&quot;</span></span><br><span class="line">    DEFAULT_CAPACITY = <span class="number">10</span>  <span class="comment"># 默认数组长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列，预留空间 DEFAULT_CAPACITY&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = [<span class="literal">None</span>] * ArrayQueue.DEFAULT_CAPACITY  <span class="comment"># 真实列表内存大小</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 队列大小</span></span><br><span class="line">        <span class="variable language_">self</span>._front = <span class="number">0</span>  <span class="comment"># 头指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():  <span class="comment"># 是否为空</span></span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._data[<span class="variable language_">self</span>._front]  <span class="comment"># 返回队列头部元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从头部出队&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">        answer = <span class="variable language_">self</span>._data[<span class="variable language_">self</span>._front]  <span class="comment"># 获取出队元素值</span></span><br><span class="line">        <span class="variable language_">self</span>._data[<span class="variable language_">self</span>._front] = <span class="literal">None</span>  <span class="comment"># 出队位置置空</span></span><br><span class="line">        <span class="variable language_">self</span>._front = (<span class="variable language_">self</span>._front + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># 循环利用数组</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span>  <span class="comment"># 长度减一</span></span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;队尾插入元素 e&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._size == <span class="built_in">len</span>(<span class="variable language_">self</span>._data):</span><br><span class="line">            <span class="comment"># 如果列表已满，则增倍扩展数组</span></span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="built_in">len</span>(<span class="variable language_">self</span>._data))</span><br><span class="line"></span><br><span class="line">        avail = (<span class="variable language_">self</span>._front + <span class="variable language_">self</span>._size) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># 队尾索引</span></span><br><span class="line">        <span class="variable language_">self</span>._data[avail] = e</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize</span>(<span class="params">self, capacity</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;空间为 capacity 新列表&quot;&quot;&quot;</span></span><br><span class="line">        old = <span class="variable language_">self</span>._data  <span class="comment"># 原始列表</span></span><br><span class="line">        <span class="variable language_">self</span>._data = [<span class="literal">None</span>] * capacity  <span class="comment"># 扩展后的空列表</span></span><br><span class="line"></span><br><span class="line">        walk = <span class="variable language_">self</span>._front  <span class="comment"># 队列的头部</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._size):</span><br><span class="line">            <span class="variable language_">self</span>._data[k] = old[walk]  <span class="comment"># 复制 old 到新的队列</span></span><br><span class="line">            walk = (walk + <span class="number">1</span>) % <span class="built_in">len</span>(old)  <span class="comment"># old 是循环使用的</span></span><br><span class="line">        <span class="variable language_">self</span>._front = <span class="number">0</span>  <span class="comment"># 新队列的头部和列表的 0 (列表头部) 是对齐的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_list</span>(<span class="params">cls, l</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从列表快速产生队列&quot;&quot;&quot;</span></span><br><span class="line">        aq = cls()</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> l:</span><br><span class="line">            aq.enqueue(e)</span><br><span class="line">        <span class="keyword">return</span> aq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;以列表形式展示&quot;&quot;&quot;</span></span><br><span class="line">        tmp = []</span><br><span class="line">        walk = <span class="variable language_">self</span>._front</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._size):</span><br><span class="line">            tmp.append(<span class="variable language_">self</span>._data[walk])</span><br><span class="line">            walk = (walk + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清空队列，保持当前容量，仅清除有效元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():  <span class="comment"># 如果队列非空</span></span><br><span class="line">            walk = <span class="variable language_">self</span>._front</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._size):  <span class="comment"># 遍历所有有效元素</span></span><br><span class="line">                <span class="variable language_">self</span>._data[walk] = <span class="literal">None</span>  <span class="comment"># 将元素置为 None</span></span><br><span class="line">                walk = (walk + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># 循环数组</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 重置队列大小</span></span><br><span class="line">        <span class="variable language_">self</span>._front = <span class="number">0</span>  <span class="comment"># 重置头指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回一个迭代器，用于遍历队列中的元素&quot;&quot;&quot;</span></span><br><span class="line">        walk = <span class="variable language_">self</span>._front  <span class="comment"># 从队列的头部开始</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._size):  <span class="comment"># 遍历所有有效元素</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">self</span>._data[walk]  <span class="comment"># 返回当前元素</span></span><br><span class="line">            walk = (walk + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># 移动到下一个位置（循环数组）</span></span><br></pre></td></tr></table></figure><h3 id="3-3-算法分析">3.3 算法分析</h3><p>基于数组的队列实现，在不考虑数组的前提下， 都是常数级的复杂度。考虑数组的动态扩展，则在摊销成本下常数级的复杂度。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742528402140.png" alt="基于数组实现队列的算法复杂度分析"></p><h2 id="4-基于单向链表的队列实现">4 基于单向链表的队列实现</h2><p>这一部分可见链表章节的介绍 <a href="https://blog.iskage.online/posts/9241942.html#1-7-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">Blog Link</a> 或 <a href="https://zhuanlan.zhihu.com/p/29508680467">知乎链接</a> 。代码实现见下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现队列，先进先出&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回队列长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列第一个节点和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element  <span class="comment"># 获取第一个元素值</span></span><br><span class="line">        <span class="comment"># 头指针指向下一个节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果节点清空，则设置尾指针为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._head = newest  <span class="comment"># 如果为空，则新节点为头节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 否则尾节点的 next 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="5-循环队列">5 循环队列</h2><p><strong>轮转调度</strong>程序：以循环的方式迭代地遍历一个元素的集合，并通过执行一个给定的动作为集合中的每个元素进行“服务”。</p><p>例如：在队列 <code>Q</code> 反复进行下面的步骤，即可轮转调度为每个元素都进行“服务”。</p><ol><li><code>e = Q.dequeue()</code> ：从队列取出元素 e （下一个元素出队）</li><li><code>f(e)</code> ：为元素 e 提供服务、进行操作（“服务”下一个元素）</li><li><code>Q.enqueue(e)</code> ：e 被重新加入队列尾部（所“服务”的元素入队）</li></ol><p>利用循环链表实现循环队列见 <a href="https://blog.iskage.online/posts/9241942.html#2-3-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97">Blog Link</a> 或 <a href="https://zhuanlan.zhihu.com/p/29508680467">知乎链接</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedCircularQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;循环链表实现循环队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现循环队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只需要一个指针</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值 tail.next ，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对循环链表而言，定义尾指针指向节点的下一个节点为头节点</span></span><br><span class="line">        head = <span class="variable language_">self</span>._tail._<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列头节点 tail.next 和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        oldhead = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 获取头节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._size == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只有一个节点，删除后变成空队列</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = oldhead._<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 原来的 tail.next 即 oldhead 被释放，因为没有指针指向它</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> oldhead._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部 tail 增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="comment"># 如果为空，则新节点自己指向自己，后面再由 tail 指向 newest</span></span><br><span class="line">            newest._<span class="built_in">next</span> = newest</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newest._<span class="built_in">next</span> = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 新节点指向头节点</span></span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 原来的尾节点的 next 指针指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;训练轮转一次&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 指示指针 (尾指针) tail 向后移动一位</span></span><br></pre></td></tr></table></figure><h2 id="6-双端队列">6 双端队列</h2><h3 id="6-1-双端队列的概念和抽象数据类型">6.1 双端队列的概念和抽象数据类型</h3><p><strong>双端队列</strong>：类队列数据结构，支持在队列的头部和尾部都进行插入和删除。双端队列被称为 <code>deque</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ADT Deque &#123;</span><br><span class="line">     数据对象：D = &#123;D1, D2, ..., DN&#125;</span><br><span class="line">     基本操作：</span><br><span class="line">D.add_first(e): 向双端队列 D 的队头添加一个元素</span><br><span class="line">        D.add_last(e): 向队列 D 的队尾添加一个元素</span><br><span class="line">        D.delete_first(): 从双端队列 Q 中移除并返回第一个元素</span><br><span class="line">        D.delete_last(): 从双端队列 Q 中移除并返回最后一个元素</span><br><span class="line">        D.first(): 在不移除的前提下，返回双端队列的第一个元素</span><br><span class="line">        D.last(): 在不移除的前提下，返回双端队列的最后一个元素</span><br><span class="line">        <span class="built_in">len</span>(D): 返回双端队列 D 的长度</span><br><span class="line">         D.init(D0): 使用序列 D0 初始化队列 D</span><br><span class="line">        D.is_empty(): 检查双端队列 D 是否为空，如为空则返回 <span class="literal">True</span></span><br><span class="line">        D.clear(): 清空队列 D</span><br><span class="line">&#125; ADT Deque</span><br></pre></td></tr></table></figure><h3 id="6-2-基于双向链表实现双端队列">6.2 基于双向链表实现双端队列</h3><p>详细的搭建可见 <a href="https://blog.iskage.online/posts/9241942.html#3-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8">Blog Link</a> 或 <a href="https://zhuanlan.zhihu.com/p/29508680467">知乎链接</a> 。</p><p>先实现双向链表的基础类 <code>_DoublyLinkedBase</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_DoublyLinkedBase</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表的基础类/父类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;双向链表的节点类，包含元素值、prev 指针和 next 指针&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_prev&#x27;</span>, <span class="string">&#x27;_next&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, prev, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._prev = prev</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现链表 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个空链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建头哨兵、尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._header = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="variable language_">self</span>._trailer = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._header._<span class="built_in">next</span> = <span class="variable language_">self</span>._trailer  <span class="comment"># 头哨兵 next 指向尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._trailer._prev = <span class="variable language_">self</span>._header  <span class="comment"># 尾哨兵 prev 指向头哨兵</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 链表长度，不包括头尾哨兵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;链表长度 len() 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_between</span>(<span class="params">self, e, predecessor, successor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 predecessor, successor 插入插入新节点，并返回这个新节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建新节点，并将其 prev 指向 predecessor | 其 next 指向 successor</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, predecessor, successor)</span><br><span class="line"></span><br><span class="line">        predecessor._<span class="built_in">next</span> = newest  <span class="comment"># predecessor 的 next 指向新节点</span></span><br><span class="line">        successor._prev = newest  <span class="comment"># successor 的 prev 指向新节点</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> newest</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_delete_node</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;传入节点并删除，返回被删除的值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 记录将被删除的节点的前后信息</span></span><br><span class="line">        predecessor = node._prev</span><br><span class="line">        successor = node._<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 连接 predecessor 和 successor</span></span><br><span class="line">        predecessor._<span class="built_in">next</span> = successor</span><br><span class="line">        successor._prev = predecessor</span><br><span class="line"></span><br><span class="line">        element = node._element</span><br><span class="line">        <span class="comment"># 孤立节点 node : 设为空，用于标识这是即将被删除的节点</span></span><br><span class="line">        node._prev, node._<span class="built_in">next</span>, node._element = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p>再实现双向队列 <code>LinkedDeque</code> ，基础父类 <code>_DoublyLinkedBase</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedDeque</span>(<span class="title class_ inherited__">_DoublyLinkedBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表实现双端队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 继承父类 --------------</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;不需要定义 `__init__` `__len__` `is_empty` 方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 添加双端队列的功能 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取第一个元素的值，注意头节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._header._<span class="built_in">next</span>._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取最后一个元素的值，注意尾节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._trailer._prev._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_first</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在头部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在头哨兵和第一个元素节点之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._header, <span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_last</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在最后一个元素节点和尾哨兵之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._trailer._prev, <span class="variable language_">self</span>._trailer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除第一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除头节点的下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除最后一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除尾节点的上一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._trailer._prev)</span><br></pre></td></tr></table></figure><h2 id="7-队列的实际应用">7 队列的实际应用</h2><h3 id="7-1-杨辉三角">7.1 杨辉三角</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">YanghuiTri</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;杨辉三角队列实现&quot;&quot;&quot;</span></span><br><span class="line">    TriQ = ArrayQueue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一行</span></span><br><span class="line">    TriQ.enqueue(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>.center(<span class="number">5</span> * n))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每一次队列中仅仅保存上一行的数据</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):  <span class="comment"># 第 2 到 n 行</span></span><br><span class="line">        Line = <span class="string">&#x27;1&#x27;</span>  <span class="comment"># 展示这一行的结果（字符串形式）</span></span><br><span class="line">        TriQ.enqueue(<span class="number">1</span>)</span><br><span class="line">        p = TriQ.dequeue()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取上一行的两个元素进行加和，放在队尾</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, m):</span><br><span class="line">            q = TriQ.dequeue()</span><br><span class="line">            TriQ.enqueue(p + q)</span><br><span class="line">            Line += <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(p + q)</span><br><span class="line">            p = q</span><br><span class="line">        TriQ.enqueue(<span class="number">1</span>)</span><br><span class="line">        Line += <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(Line.center(<span class="number">5</span> * n))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    YanghuiTri(<span class="number">7</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#    1                 </span></span><br><span class="line"><span class="comment">#             1 1                </span></span><br><span class="line"><span class="comment">#            1 2 1               </span></span><br><span class="line"><span class="comment">#           1 3 3 1              </span></span><br><span class="line"><span class="comment">#          1 4 6 4 1             </span></span><br><span class="line"><span class="comment">#        1 5 10 10 5 1           </span></span><br><span class="line"><span class="comment">#       1 6 15 20 15 6 1      </span></span><br></pre></td></tr></table></figure><h3 id="7-2-迷宫问题">7.2 迷宫问题</h3><p>考虑一个长为 M 宽为 N 的迷官。其入口在 <code>(1, 1)</code> 处，出口在 <code>(M, N)</code> 处。例如，下图中 <code>M = N = 5</code> 。请设计一个算法，找到一条从入口到出口的路（也可能没有这样的路），并给出其运行的时间复杂度。</p><p>问题一：找出一条可能的路径（栈 ｜ 回溯法）</p><p>问题二：找出最短的路径（队列 ｜ 洪水算法）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742550035394.png" alt="迷宫问题样例"></p><h4 id="7-2-1-利用栈：回溯法">7.2.1 利用栈：回溯法</h4><p>回溯法的主要想法是<strong>深度优先</strong>，即一直走知道无路可走再回退。</p><p>考虑用栈来实现这个问题，每次存入经过的格子的坐标 <code>(i, j)</code> ，除去来时的路，下一步有 3 种走法，然后继续将新的位置压入栈。每次进行下一步都要检查是否为墙/是否在栈中，当无路可走时，将栈顶元素出栈，继续寻找。</p><p>有关栈的抽象数据类型见 <a href="https://blog.iskage.online/posts/c69bd6a6.html">Blog Link</a> 或 <a href="https://zhuanlan.zhihu.com/p/30420213013">知乎链接</a> 。代码实现迷宫问题见下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maze_path</span>(<span class="params">maze, M, N</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;找出一条可能的路径: 栈 ｜ 回溯法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化栈</span></span><br><span class="line">    stack = ArrayStack()</span><br><span class="line"></span><br><span class="line">    stack.push((<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># 起始点入栈</span></span><br><span class="line">    visited = <span class="built_in">set</span>()  <span class="comment"># 已经走过的路</span></span><br><span class="line">    visited.add((<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># 起始点入路</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义四个方向：左、右、上、下</span></span><br><span class="line">    directions = [(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后栈空说明无解</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        current = stack.top()  <span class="comment"># 栈顶元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current == (M, N):  <span class="comment"># 到达终点</span></span><br><span class="line">            path = [<span class="literal">None</span>] * <span class="built_in">len</span>(stack)</span><br><span class="line">            i = <span class="built_in">len</span>(stack) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">                path[i] = stack.pop()</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> path  <span class="comment"># 返回路径</span></span><br><span class="line"></span><br><span class="line">        found = <span class="literal">False</span>  <span class="comment"># 是否找到新的位置可走</span></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> directions:</span><br><span class="line">            i, j = current[<span class="number">0</span>] + d[<span class="number">0</span>], current[<span class="number">1</span>] + d[<span class="number">1</span>]  <span class="comment"># 新位置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查新坐标是否未访问，且是否是通路</span></span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="number">0</span> <span class="keyword">and</span> (i, j) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                stack.push((i, j))  <span class="comment"># (i, j) 通路且不在之前的路中</span></span><br><span class="line">                visited.add((i, j))  <span class="comment"># 入路，保证未来不会重走</span></span><br><span class="line">                found = <span class="literal">True</span>  <span class="comment"># 找到下一步</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">            <span class="comment"># 无路可走则回溯</span></span><br><span class="line">            stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 无解</span></span><br></pre></td></tr></table></figure><p>例如：使用 <code>1</code> 代表墙，即不可走；<code>0</code> 表示可以走。最外围的 <code>1</code> 只是为了表示边界，减少对边界判断的繁琐工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># M = N = 5 外面一圈 1 为了方便表示边界</span></span><br><span class="line">    maze = [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    ans = maze_path(maze, <span class="built_in">len</span>(maze) - <span class="number">2</span>, <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p><strong>算法分析</strong> ：按照回溯法，每个位置最多被首次访问一次并入栈，被回溯一次并出栈。在此之间，最多探索该位置周围的位置三次（即常数次操作）故复杂度为 <code>O(MN)</code> 。</p><h4 id="7-2-2-利用队列：洪水算法">7.2.2 利用队列：洪水算法</h4><p>洪水算法主要思想是<strong>广度优先</strong>，即保存每一步可能的所有情况，最后先出最短的路。</p><p>我们可以使用队列，从 <code>(1, 1)</code> 开始，重复以下操作：取出队头元素，将队头元素可以到达但并未走过的相邻点放入队列，并记录下从队头元素可以立即到达某一相邻点这一信息：</p><ul><li>如最终抵达终点，则已找到最短路，可根据之前记录的信息复原出这条路。</li><li>否则，如最终队列为空，则不存在这样的路。</li></ul><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maze_shortest_path</span>(<span class="params">maze, M, N</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;找出最短的路径: 队列 ｜ 洪水算法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack_path</span>(<span class="params">parent: <span class="built_in">dict</span>, start: <span class="built_in">tuple</span>, end: <span class="built_in">tuple</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从 end 回溯到 start，生成路径&quot;&quot;&quot;</span></span><br><span class="line">        path = []</span><br><span class="line">        current = end</span><br><span class="line">        <span class="keyword">while</span> current != start:</span><br><span class="line">            path.append(current)</span><br><span class="line">            current = parent[current]  <span class="comment"># 找到当前点的父节点</span></span><br><span class="line">        path.append(start)  <span class="comment"># 添加起点</span></span><br><span class="line">        path.reverse()  <span class="comment"># 反转路径，使其从 start 到 end</span></span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">    queue = ArrayQueue()</span><br><span class="line">    queue.enqueue((<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    parent = &#123;&#125;  <span class="comment"># 记录当前点的上一个点位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义四个方向：左、右、上、下</span></span><br><span class="line">    directions = [(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> queue.is_empty():</span><br><span class="line">        current = queue.dequeue()  <span class="comment"># 当前位置</span></span><br><span class="line">        maze[current[<span class="number">0</span>]][current[<span class="number">1</span>]] = <span class="number">2</span>  <span class="comment"># 记当前位置为 2 放置重复走</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current == (M, N):  <span class="comment"># 在广度优先下，最先找到终点，即为最短路径</span></span><br><span class="line">            <span class="keyword">return</span> backtrack_path(parent, (<span class="number">1</span>, <span class="number">1</span>), (M, N))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> directions:  <span class="comment"># 四个方向都要考虑并入队</span></span><br><span class="line">            i, j = current[<span class="number">0</span>] + d[<span class="number">0</span>], current[<span class="number">1</span>] + d[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="number">0</span> <span class="keyword">and</span> maze[i][j] != <span class="number">2</span>:  <span class="comment"># 不是墙/且不重复</span></span><br><span class="line">                queue.enqueue((i, j))  <span class="comment"># 入队</span></span><br><span class="line">                parent[(i, j)] = current  <span class="comment"># 记录当前点的上一个点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 无解</span></span><br></pre></td></tr></table></figure><p>例如：仍然是上面的例子，最短路应该为从左边到底然后向右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># M = N = 5 外面一圈 1 为了方便表示边界</span></span><br><span class="line">    maze = [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    ans = maze_path(maze, <span class="built_in">len</span>(maze) - <span class="number">2</span>, <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line">    shortest_ans = maze_shortest_path(maze, <span class="built_in">len</span>(maze) - <span class="number">2</span>, <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(shortest_ans)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Output&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 利用栈：回溯法，不是最短</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用队列：洪水算法，最短路</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">5</span>, <span class="number">1</span>), (<span class="number">5</span>, <span class="number">2</span>), (<span class="number">5</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p><strong>算法分析</strong>：每个位置最多被放入队列一次、出队一次，﻿﻿算法复杂度 <code>O(MN)</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 操作系统：重定向和通配符扩展</title>
      <link href="/posts/753a6f85.html"/>
      <url>/posts/753a6f85.html</url>
      
        <content type="html"><![CDATA[<h1>重定向和通配符扩展</h1><p>本章介绍了 Linux 操作系统中的重定向和通配符扩展：包括 <code>cat</code> 和 <code>split</code> 命令以及管道 <code>|</code> 的使用；有关通配符 <code>?, *, [abc]</code> 等的使用，快速查找文件内容和处理命令输入输出。</p><h2 id="1-重定向">1 重定向</h2><h3 id="1-1-cat-和-split">1.1 cat 和 split</h3><h4 id="1-1-1-cat命令">1.1.1 cat命令</h4><p>• <strong>功能</strong>：连接文件并打印到标准输出，支持文本处理功能。<br>• <strong>参数</strong>：</p><table><thead><tr><th>参数</th><th>功能描述</th></tr></thead><tbody><tr><td><code>-n</code></td><td>显示行号（包括空行）</td></tr><tr><td><code>-b</code></td><td>显示行号（跳过空行）</td></tr><tr><td><code>-s</code></td><td>压缩连续空行为一行</td></tr><tr><td><code>-A</code></td><td>显示不可打印字符（如<code>^I</code>代表Tab，<code>$</code>代表换行）</td></tr></tbody></table><p>• <strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并两个文件</span></span><br><span class="line"><span class="built_in">cat</span> file1 file2 &gt; merged_file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示行号（含空行）</span></span><br><span class="line"><span class="built_in">cat</span> -n tmp.txt</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># 1 id name desc</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3 1 John 99</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示不可打印字符</span></span><br><span class="line"><span class="built_in">cat</span> -A tmp.txt</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># id^Iname^Idesc$</span></span><br><span class="line"><span class="comment"># $</span></span><br><span class="line"><span class="comment"># 1^IJohn^I99$</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742105899621.png" alt="示例"></p><h4 id="1-1-2-split命令">1.1.2 split命令</h4><p>• <strong>功能</strong>：将大文件拆分为多个小文件。<br>• <strong>参数</strong>：</p><table><thead><tr><th>参数</th><th>功能描述</th></tr></thead><tbody><tr><td><code>-l N</code></td><td>按每N行拆分</td></tr><tr><td><code>-b SIZE</code></td><td>按文件大小拆分（如<code>900K</code>）</td></tr><tr><td><code>-d</code></td><td>使用数字后缀（如<code>00</code>, <code>01</code>）</td></tr><tr><td><code>-a N</code></td><td>指定后缀长度（默认2位）</td></tr></tbody></table><p>• <strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拆分二进制文件为900KB片段</span></span><br><span class="line"><span class="built_in">split</span> -d -b 900k /bin/bash bash_part.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并拆分文件</span></span><br><span class="line"><span class="built_in">cat</span> bash_part.00 bash_part.01 &gt; restored_bash</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742106093707.png" alt="示例"></p><h3 id="1-2-重定向基本原理和机制">1.2 重定向基本原理和机制</h3><h4 id="1-2-1-文件描述符">1.2.1 文件描述符</h4><p>• <strong>标准输入/输出</strong>：<br>• <code>0</code>（STDIN）：默认从键盘读取输入。<br>• <code>1</code>（STDOUT）：默认输出到屏幕。<br>• <code>2</code>（STDERR）：默认输出错误到屏幕。</p><h4 id="1-2-2-重定向操作">1.2.2 重定向操作</h4><p>• <strong>输入重定向</strong>：将 <code>input.txt</code> 的内容读到命令 <code>command</code> 后作为命令的输入</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从文件读取输入</span></span><br><span class="line"><span class="built_in">command</span> &lt; input.txt</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742106782177.png" alt="示例"></p><p>• <strong>输出重定向</strong>：将命令的输出写入文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 覆盖写入文件</span></span><br><span class="line"><span class="built_in">command</span> &gt; output.txt</span><br><span class="line"><span class="comment"># 追加写入文件</span></span><br><span class="line"><span class="built_in">command</span> &gt;&gt; output.txt</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742106463558.png" alt="示例"></p><p>• <strong>错误重定向</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将错误输出到文件</span></span><br><span class="line"><span class="built_in">command</span> 2&gt; error.log</span><br><span class="line"><span class="comment"># 合并标准输出和错误到同一文件</span></span><br><span class="line"><span class="built_in">command</span> &amp;&gt; combined.log</span><br></pre></td></tr></table></figure><h3 id="1-3-管道">1.3 管道</h3><h4 id="1-3-1-管道机制">1.3.1 管道机制</h4><p>• <strong>语法</strong>：<code>cmd1 | cmd2 | cmd3</code><br>• <strong>功能</strong>：将前一个命令的 STDOUT 输出作为下一个命令的 STDIN 输入。<br>• <strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计包含&quot;error&quot;的行数</span></span><br><span class="line">grep <span class="string">&quot;error&quot;</span> log.txt | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><h4 id="1-3-2-tee-命令">1.3.2 tee 命令</h4><p>• <strong>功能</strong>：将数据同时输出到文件和屏幕。<br>• <strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将输出保存到文件并显示在屏幕</span></span><br><span class="line"><span class="built_in">ls</span> /usr/bin | grep zip | <span class="built_in">tee</span> ziplist.txt</span><br></pre></td></tr></table></figure><h2 id="2-通配符扩展">2 通配符扩展</h2><h3 id="2-1-通配符模式">2.1 通配符模式</h3><h4 id="2-1-1-基础通配符">2.1.1 基础通配符</h4><p>• <code>?</code>：匹配单个字符。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file?.txt  <span class="comment"># 匹配 file1.txt, fileA.txt</span></span><br></pre></td></tr></table></figure><p>• <code>*</code>：匹配任意数量字符。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> *.<span class="built_in">log</span>      <span class="comment"># 匹配所有.log文件</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-字符集合">2.1.2 字符集合</h4><p>• <code>[abc]</code>：匹配a、b、c中的任意一个字符。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file[123].txt  <span class="comment"># 匹配 file1.txt, file2.txt, file3.txt</span></span><br></pre></td></tr></table></figure><p>• <code>[a-z]</code>：匹配范围（依赖本地化设置）。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [a-c]*.txt     <span class="comment"># 匹配a、b、c开头的文件</span></span><br></pre></td></tr></table></figure><h3 id="2-2-通配符扩展">2.2 通配符扩展</h3><h4 id="2-2-1-否定匹配">2.2.1 否定匹配</h4><p>• <code>[!abc]</code>：匹配不在集合中的字符。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file[!1-3].txt  <span class="comment"># 排除file1-3.txt</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-特殊字符处理">2.2.2 特殊字符处理</h4><p>• <strong>转义字符</strong>：使用反斜杠<code>\</code>或引号避免扩展。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file\?.txt    <span class="comment"># 匹配file?.txt字面量</span></span><br></pre></td></tr></table></figure><h3 id="2-3-扩展通配符（需启用extglob）">2.3 扩展通配符（需启用<code>extglob</code>）</h3><h4 id="2-3-1-模式扩展">2.3.1 模式扩展</h4><p>• <strong>启用和关闭扩展</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shopt</span> -s extglob  <span class="comment"># 启用</span></span><br><span class="line"><span class="built_in">shopt</span> -u extglob  <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure><p>• <strong>语法</strong>：<br>• <code>?(pattern)</code>：匹配 0 或 1 次。<br>• <code>*(pattern)</code>：匹配 0 或多次。<br>• <code>+(pattern)</code>：匹配 1 或多次。<br>• <code>@(pat1|pat2)</code>：匹配 pat1 或 pat2 。</p><h4 id="2-3-2-示例">2.3.2 示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配所有.jpg或.png文件</span></span><br><span class="line"><span class="built_in">ls</span> @(*.jpg|*.png)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈 Stack 和回溯法 Backtracking</title>
      <link href="/posts/c69bd6a6.html"/>
      <url>/posts/c69bd6a6.html</url>
      
        <content type="html"><![CDATA[<h1>栈 Stack 和回溯法 Backtracking</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本章介绍<strong>栈</strong>数据类型，包括栈的概念、如何用 Python 实现栈（数组、链表）、栈的实际使用（数据逆置、匹配问题、算数计算原理、函数调用等原理）以及<strong>回溯法</strong>的概念和使用，包括常见案例（全排列、子集问题、求和谜题以及著名的 N 皇后问题）。</p><h2 id="1-栈的概念">1 栈的概念</h2><p><strong>栈 (stack)</strong>：限制数据插入、删除操作只能在一端进行的特殊序列，遵循后进先出的原则（Last In First Out, LIFO）。</p><ul><li>允许插入、删除的一端为<strong>栈顶</strong>（top），另一段为<strong>栈底</strong>（bottom）。</li><li>在栈顶插入元素称为<strong>入栈</strong>（push），删除元素称为<strong>出栈</strong>（pop）。</li><li>栈中元素个数称为栈的长度。</li></ul><h2 id="2-栈的抽象数据类型">2 栈的抽象数据类型</h2><p>对于栈的抽象数据类型 (stack ADT) ，它应该满足如下操作：</p><ol><li><code>S.push(e)</code> ：将元素 e 从栈顶插入栈。</li><li><code>S.pop()</code> ：将栈顶的元素出栈，即删除头部元素，并返回元素的值。如果栈为空，则报错。</li><li><code>S.top()</code> ：返回栈顶元素的值。如果栈为空，则报错。</li><li><code>S.is_empty()</code> ：如果栈中无元素，则返回 <code>True</code> 。</li><li><code>len(S)</code> ：重载运算符 <code>__len__()</code> ，返回栈的元素个数。</li></ol><p>以下是栈的抽象数据类型的一些操作示意：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741869902612.png" alt="栈的抽象数据类型的操作示意"></p><h2 id="3-基于数组实现栈">3 基于数组实现栈</h2><p>Python 提供的 <code>list</code> 类是数组的一种，它已经提供了 <code>append()</code> 和 <code>pop()</code> 方法，所以可以自然的利用 <code>list</code> 类来实现栈，只需要将列表类的尾部视作栈的顶部即可。但 <code>list</code> 类支持从列表中间插入元素，这违反了栈的规定。所以我们要利用 <code>list</code> 类重新定义一个新的栈类 <code>ArrayStack</code> 。</p><h3 id="3-1-适配器模式">3.1 适配器模式</h3><p>对于创建一个新类，可以包含一个现存类的实例作为隐藏域，然后用这个隐藏实例变量的原有方法实现新类的方法。</p><p>例如：对于栈，可以在 Python 的 <code>list</code> 类上进行修改。那么在初始化 <code>ArrayStack</code> 时，可以包含 <code>list</code> 类的实例对象。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArraryStack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._data = []</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741870532231.png" alt=""></p><h3 id="3-2-代码实现">3.2 代码实现</h3><p>特别地，在判断栈为空时，需要自定义一个异常类，以免触发 <code>list</code> 类自带的异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;栈为空的异常类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>完整 <code>ArrayStack</code> 类实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于数组的栈数据类型 LIFO&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = []  <span class="comment"># 适配器模式，隐藏 list 实例化对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;栈的元素个数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向栈顶插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data.append(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回栈顶元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&quot;Stack is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._data[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从栈顶删除元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&quot;Stack is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._data.pop()</span><br></pre></td></tr></table></figure><h3 id="3-3-算法分析">3.3 算法分析</h3><p>由于 <code>ArrayStack</code> 类基于 Python 的 <code>list</code> 类实现，如之前所述（<a href="https://blog.iskage.online/posts/340249a9.html">基于数组的序列</a>），由于数组的紧凑/连续内存分布，使得其索引操作都是在常数时间内完成的。而删除与插入操作，又因为栈的特性，每次操作均是在栈顶进行，故复杂度也为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。但不得不考虑 Python 在数组是以动态数组的方式存在，存在着<strong>摊销时间</strong>成本，如果没有扩大数组内存空间然后复制，则为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，但遇到最坏情况则为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741871355451.png" alt="基于数组的栈的算法复杂度分析"></p><blockquote><p>也正是因为摊销成本的存在，一开始如果先初始化一个有长度的数组，会比空数组更为划算。</p></blockquote><h2 id="4-基于链表实现栈">4 基于链表实现栈</h2><p>正是因为栈的特殊性（插入、删除、查看均在头部进行），这使得链表是实现栈的良好选择。而相比数组，链表不需要连续的内存分布，也不存在摊销成本。这一部分可参见上一章 <a href="https://blog.iskage.online/posts/9241942.html">链表</a> 。这里给出一个用单向链表实现栈的抽象类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现栈&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现栈&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现栈 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span>  <span class="comment"># 头指针，指向节点，初始化为空</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;栈元素个数 len(obj) 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向栈顶部增加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 新建节点，指向旧的 head 新的 head 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._Node(e, <span class="variable language_">self</span>._head)</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回栈顶值，但不改变链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回栈顶元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element</span><br><span class="line">        <span class="comment"># 删除头部节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="5-栈的实际使用">5 栈的实际使用</h2><h3 id="5-1-使用栈实现数据的逆置">5.1 使用栈实现数据的逆置</h3><p>由于栈的特殊性，即后进先出，用栈实现逆置是一个十分自然的想法。主要思想是：先将元素一个一个压入栈中，然后再一个一个返回，而返回的过程其实就是逆置的过程。</p><p>例如：读取 <code>example.txt</code> 的内容，按照每行为一个元素，逆置写入原文档。即将原文档行行逆置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;逆置文件句子，覆写进原文档&quot;&quot;&quot;</span></span><br><span class="line">    S = ArrayStack()  <span class="comment"># 实例化栈对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读原文件</span></span><br><span class="line">    original = <span class="built_in">open</span>(filename)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> original:</span><br><span class="line">        <span class="comment"># 将每一行 push 进栈</span></span><br><span class="line">        S.push(line.rstrip(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">    original.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读文档，准备写入逆置文本</span></span><br><span class="line">    output = <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> S.is_empty():</span><br><span class="line">        <span class="comment"># 出栈，写入原文档</span></span><br><span class="line">        output.write(S.pop() + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    output.close()</span><br></pre></td></tr></table></figure><p>原文档如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">File name: example.txt</span><br><span class="line">Create time: 2025/3/13</span><br><span class="line">Objective: for reverse</span><br><span class="line">Body:</span><br><span class="line">By using stack data structure,</span><br><span class="line">we read this file</span><br><span class="line">and push every lines into the stack.</span><br><span class="line">After that,</span><br><span class="line">pop the objects (lines)</span><br><span class="line">one by one.</span><br><span class="line">And that is the result</span><br><span class="line">--- a reversed file</span><br><span class="line">End!</span><br></pre></td></tr></table></figure><p>经过逆置后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse_file(<span class="string">&#x27;example.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">End!</span><br><span class="line">--- a reversed file</span><br><span class="line">And that is the result</span><br><span class="line">one by one.</span><br><span class="line">pop the objects (lines)</span><br><span class="line">After that,</span><br><span class="line">and push every lines into the stack.</span><br><span class="line">we read this file</span><br><span class="line">By using stack data structure,</span><br><span class="line">Body:</span><br><span class="line">Objective: for reverse</span><br><span class="line">Create time: 2025/3/13</span><br><span class="line">File name: example.txt</span><br></pre></td></tr></table></figure><h3 id="5-2-括号和-HTML-标签匹配">5.2 括号和 HTML 标签匹配</h3><p>很多需要匹配，且匹配对象往往是相邻最近的对象进行匹配的问题，大多可以使用栈的思想来解决。</p><h4 id="5-2-1-括号匹配">5.2.1 括号匹配</h4><p>例如<strong>括号匹配</strong>问题：对于三种括号 <code>&#123;&#125;</code> <code>[]</code> <code>()</code> 它们都需要左括号和右括号相匹配。对于一个括号序列例如 <code>&#123;[()]&#125;</code> 它是否满足括号匹配要求。</p><p>匹配原则：对于右括号，必须保证在它的左边第一个出现的未匹配成功左括号一定与自己相匹配，否则这一串括号序列就是匹配失败的。例如下面的例子：</p><ol><li><code>()(())&#123;([()])&#125;</code> ：匹配成功</li><li><code>((()())&#123;([()])&#125;)</code> ：匹配成功</li><li><code>(&#123;[])&#125;</code> ：匹配失败。因为对于位于位置 5 的右小括号 <code>)</code> ，它的左边第一个为匹配成功的左括号为 <code>&#123;</code> ，所以匹配失败。（不是 <code>[</code> 因为其已经和 <code>]</code> 匹配成功）</li></ol><p>括号匹配栈算法思路：将括号序列从左到右逐个压入栈，对于左括号直接压入。一旦遇到右括号，则比较其和现在的栈顶括号是否匹配，不匹配则算法结束，返回 <code>False</code> ；否则匹配成功，该右括号不入栈，栈顶元素也出栈，如此继续。如果最后成功将栈清空，则匹配成功。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_matched</span>(<span class="params">expr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断左右括号是否匹配&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 左右括号集，注意同一类型括号位置相同</span></span><br><span class="line">    lefty = <span class="string">&quot;&#123;[(&quot;</span></span><br><span class="line">    righty = <span class="string">&quot;&#125;])&quot;</span></span><br><span class="line"></span><br><span class="line">    S = ArrayStack()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> expr:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> lefty:</span><br><span class="line">            <span class="comment"># 左括号入栈</span></span><br><span class="line">            S.push(c)</span><br><span class="line">        <span class="keyword">elif</span> c <span class="keyword">in</span> righty:</span><br><span class="line">            <span class="comment"># 右括号比较</span></span><br><span class="line">            <span class="keyword">if</span> S.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 如果右括号前没有栈元素，肯定不匹配</span></span><br><span class="line">            <span class="keyword">if</span> righty.index(c) != lefty.index(S.pop()):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 删去栈顶，查看栈顶左括号和现在右括号是否匹配</span></span><br><span class="line">    <span class="comment"># 栈清空，则匹配成功</span></span><br><span class="line">    <span class="keyword">return</span> S.is_empty()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(is_matched(<span class="string">&quot;((()())&#123;([()])&#125;)&quot;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(is_matched(<span class="string">&quot;(&#123;[])&#125;&quot;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(is_matched(<span class="string">&quot;&#123;(5 + x) - [1 + (y - z) * 4]&#125;&quot;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><blockquote><p>只需遍历一次，故时间复杂的为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p></blockquote><h4 id="5-2-2-HTML-标签匹配">5.2.2 HTML 标签匹配</h4><p>HTML 标签以 <code>&lt;item&gt;</code> 和 <code>&lt;/item&gt;</code> 的方式成对出现。判断匹配方式与括号相同，只是需要多考虑一层：标签内容要一致，即左标签内容 <code>item</code> 和右标签去除 <code>/</code> 后的内容 <code>item</code> 相同。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_matched_html</span>(<span class="params">raw</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断 html 标签匹配与否&quot;&quot;&quot;</span></span><br><span class="line">    S = ArrayStack()</span><br><span class="line">    j = raw.find(<span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> j != -<span class="number">1</span>:</span><br><span class="line">        k = raw.find(<span class="string">&#x27;&gt;&#x27;</span>, j + <span class="number">1</span>)  <span class="comment"># 从 j + 1 开始找 &#x27;&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> k == -<span class="number">1</span>:  <span class="comment"># 找到结尾都没找到，则匹配失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        tag = raw[j + <span class="number">1</span>:k]  <span class="comment"># 提取 &#x27;&lt;&#x27; &#x27;&gt;&#x27; 之间的字符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tag.startswith(<span class="string">&#x27;/&#x27;</span>):  <span class="comment"># 是否以 &#x27;/&#x27; 开头</span></span><br><span class="line">            <span class="comment"># 不以 &#x27;/&#x27; 开头，说明为左标签，入栈</span></span><br><span class="line">            S.push(tag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 否则以 &#x27;/&#x27; 开头，为右标签，判断</span></span><br><span class="line">            <span class="keyword">if</span> S.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 如果为空，说明没有左标签匹配</span></span><br><span class="line">            <span class="keyword">if</span> tag[<span class="number">1</span>:] != S.pop():</span><br><span class="line">                <span class="comment"># 右标签去除 &#x27;/&#x27; 后是否与此时栈顶左标签匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 从 k + 1 寻找下一对标签</span></span><br><span class="line">        j = raw.find(<span class="string">&#x27;&lt;&#x27;</span>, k + <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 栈清空，则匹配成功</span></span><br><span class="line">    <span class="keyword">return</span> S.is_empty()</span><br></pre></td></tr></table></figure><ul><li>使用案例：读取下面的 <code>example.html</code> 文件，判断标签是否匹配。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> The Little Boat <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> The storm tossed the little</span><br><span class="line">    boat like a cheap sneaker in an</span><br><span class="line">    old washing machine. The three</span><br><span class="line">    drunken fishermen were used to</span><br><span class="line">    such treatment, of course, but</span><br><span class="line">    not the tree salesman, who even as</span><br><span class="line">    a stowaway now felt that he</span><br><span class="line">    had overpaid for the voyage. <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> Will the salesman die?<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> What color is the boat?<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> And what about Naomi?<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">html_file = <span class="built_in">open</span>(<span class="string">&#x27;example.html&#x27;</span>)</span><br><span class="line">html_content = html_file.read()</span><br><span class="line"></span><br><span class="line">row = <span class="string">&quot;&quot;</span>.join(html_content.split(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_matched_html(row))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">html_file.close()</span><br></pre></td></tr></table></figure><blockquote><p>只需遍历一次，故时间复杂的为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p></blockquote><h3 id="5-3-函数调用">5.3 函数调用</h3><p>当调用新函数时，系统需要保存当前调用的所有局部变量，否则新函数将覆盖这些变量。此外，必须保存例程中的当前位置，以便新功能在完成后知道返回何处。所有这些工作都可以通过<strong>操作系统自动使用栈</strong>来完成。</p><p>可以理解为：当程序进行时，最先出现的变量和其对应的值会被放入栈底，逐个放入这些变量和结果。当遇到函数时，将函数压入栈中，函数调用的参数实际值来自之前栈中存储的数据。当函数结束时，函数出栈，（函数中的局部变量全部出栈，空间被释放），然后压入程序后面的其他数据。</p><p>例如：在内存中，递归实际上是通过栈操作来完成的</p><h3 id="5-4-升序序列跨度">5.4 升序序列跨度</h3><p>跨度问题：对于数组 <code>X</code> ，其任意位置的 <code>X[i]</code> 的跨度 <code>S[i]</code> 定义为 <code>X[i]</code> 前符合 <code>X[j] &lt;= X[i]</code> 的连续元素个数。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spans</span>(<span class="params">X, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算最长升序跨度</span></span><br><span class="line"><span class="string">    :param X: 原序列</span></span><br><span class="line"><span class="string">    :param n: 考察序列 X 的前 n 项</span></span><br><span class="line"><span class="string">    :return S 跨度列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    S = []  <span class="comment"># 记录跨度</span></span><br><span class="line">    A = ArrayStack()  <span class="comment"># 栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 遍历 X 的每个元素</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">not</span> A.is_empty()) <span class="keyword">and</span> X[A.top()] &lt;= X[i]:</span><br><span class="line">            <span class="comment"># 当栈非空并且栈顶元素仍然更小时，不断出栈，直到找到比当前元素更大的数</span></span><br><span class="line">            A.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> A.is_empty():</span><br><span class="line">            <span class="comment"># 如果栈空，当前位置 i 前所有数都比当前数小，那跨度为 i + 1</span></span><br><span class="line">            S.append(i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 否则，跨度为当前位置 i 减去比自己大的数的位置 A.top()</span></span><br><span class="line">            S.append(i - A.top())</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 记录目前最大值的位置</span></span><br><span class="line">        A.push(i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> S</span><br></pre></td></tr></table></figure><p>例如：对于 <code>X = [6, 3, 4, 5, 2, 1, 4, 9, 10, 1, 3, 20, 11, 9]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(spans(X, <span class="built_in">len</span>(X)))</span><br><span class="line"><span class="comment"># [1, 1, 2, 3, 1, 1, 3, 8, 9, 1, 2, 12, 1, 1]</span></span><br></pre></td></tr></table></figure><h3 id="5-5-计算算数表达式">5.5 计算算数表达式</h3><p>在计算算数表达式时，计算机需要比较各个运算符的优先级，然后计算。这一过程可以使用栈来实现。</p><p><strong>主要思路</strong>：分别创建两个栈 <code>opStk</code> 存储运算符和 <code>valStk</code> 存储值。每次遇到值则压入 <code>valStk</code> ，遇到运算符则比较其和 <code>opStk</code> 栈顶的运算符优先级，要是优先级高，则直接入栈；否则值栈 <code>valStk</code> 出栈 2 个值进行此时 <code>opStk</code> 栈顶的运算（栈顶运算符出栈），运算结果再进栈 <code>valStk</code> 。然后继续比较此时 <code>opStk</code> 栈顶运算符的优先级，如此类推。这样，最后 <code>valStk</code> 剩余的元素即为计算结果。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> ArrayStack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_exp</span>(<span class="params">tokens</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">precedence</span>(<span class="params">op</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;为运算符定义优先级&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 结束符优先级最低</span></span><br><span class="line">        <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 比较运算符</span></span><br><span class="line">        <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 加减</span></span><br><span class="line">        <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>  <span class="comment"># 乘除</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Invalid operator: <span class="subst">&#123;op&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">repeat_ops</span>(<span class="params">ref_op, opStk, valStk</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断优先级&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(valStk) &gt;= <span class="number">2</span> <span class="keyword">and</span> precedence(ref_op) &lt;= precedence(opStk.top()):</span><br><span class="line">            <span class="comment"># 如果当前运算符优先级比 opStk 栈顶低，则先计算栈顶运算符</span></span><br><span class="line">            do_op(opStk, valStk)  <span class="comment"># 直到栈顶的低，或 valStk 不足 2 个元素可以计算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_op</span>(<span class="params">op_stk, val_stk</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;正式计算过程&quot;&quot;&quot;</span></span><br><span class="line">        op = op_stk.pop()  <span class="comment"># 提取运算符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取栈顶计算的两个元素</span></span><br><span class="line">        x = val_stk.pop()</span><br><span class="line">        y = val_stk.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按照运算符的含义进行计算</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            val_stk.push(y + x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            val_stk.push(y - x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            val_stk.push(y * x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            val_stk.push(y / x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">            val_stk.push(y &lt; x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">            val_stk.push(y &gt; x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            val_stk.push(y == x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Invalid operator: <span class="subst">&#123;op&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始计算</span></span><br><span class="line">    tokens = tokens + [<span class="string">&#x27;$&#x27;</span>]  <span class="comment"># $ 代表算数式起始</span></span><br><span class="line">    valStk = ArrayStack()  <span class="comment"># 记录值</span></span><br><span class="line">    opStk = ArrayStack()  <span class="comment"># 记录运算符</span></span><br><span class="line">    opStk.push(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> token <span class="keyword">in</span> tokens:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(token).isdigit():</span><br><span class="line">            <span class="comment"># 如果为数字，直接入栈 valStk</span></span><br><span class="line">            valStk.push(<span class="built_in">int</span>(token))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果为运算符</span></span><br><span class="line">            repeat_ops(token, opStk, valStk)  <span class="comment"># 检查优先级</span></span><br><span class="line">            opStk.push(token)  <span class="comment"># 当前运算符入栈 opStk</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回最后 valStk 栈顶元素，即为结果</span></span><br><span class="line">    <span class="keyword">return</span> valStk.top()</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">expr = [<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]  <span class="comment"># 3 + 5 * 2 = 13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(expr)&#125;</span> is <span class="subst">&#123;eval_exp(expr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增比较运算测试</span></span><br><span class="line">expr = [<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]  <span class="comment"># (3 + 5) &lt; (2 * 4) -&gt; 8 &lt; 8 -&gt; False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(expr)&#125;</span> is <span class="subst">&#123;eval_exp(expr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">expr = [<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]  <span class="comment"># 5 &gt; (2 * 3) -&gt; 5 &gt; 6 -&gt; False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(expr)&#125;</span> is <span class="subst">&#123;eval_exp(expr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">expr = [<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]  <span class="comment"># 7 = (3 + 4) -&gt; True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(expr)&#125;</span> is <span class="subst">&#123;eval_exp(expr)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> + <span class="number">5</span> * <span class="number">2</span> <span class="keyword">is</span> <span class="number">13</span></span><br><span class="line"><span class="number">3</span> + <span class="number">5</span> &lt; <span class="number">2</span> * <span class="number">4</span> <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line"><span class="number">5</span> &gt; <span class="number">2</span> * <span class="number">3</span> <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line"><span class="number">7</span> = <span class="number">3</span> + <span class="number">4</span> <span class="keyword">is</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="6-算法：回溯法">6 算法：回溯法</h2><h3 id="6-1-概念">6.1 概念</h3><p>回溯法是一种通过<strong>试错</strong>寻找问题解的算法。它通过深度优先的方式遍历所有可能的路径，当发现当前路径无法得到有效解时，回退到上一步（<strong>回溯 Backtracking</strong>）并将之前找不到解的路径减去，以后不再寻找，即<strong>剪枝 pruning</strong>，尝试其他可能性。</p><h3 id="6-2-常见步骤">6.2 常见步骤</h3><p>与递归类似，回溯法可分解为很多步，每一步的常见做法为：</p><ul><li>首先从该步可以尝试的所有元素的集合 <code>U</code> 中选出一个元素 <code>e</code></li><li>将该元素 <code>e</code> 加入到当前尝试的解中，进入下一步</li><li>在某些条件下可以在该步判定当前尝试的解是否为真解，以及当前情况可否进行剪枝</li><li>将元素 <code>e</code> 从当前解中移除（有必要时需将 <code>U</code> 放回集合 <code>U</code>）</li></ul><h3 id="6-3-实际应用和代码实现">6.3 实际应用和代码实现</h3><h4 id="6-3-1-全排列问题">6.3.1 全排列问题</h4><p><strong>思路</strong>：从 <code>U</code> 取出 <code>e</code> ，然后从 <code>U</code> 去除 <code>e</code> 。不同于子集问题，因为全排列允许重复，所以只需要去除 <code>e</code> 。子集问题和全排列问题都不需要设置约束条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permute_stack</span>(<span class="params">nums</span>):</span><br><span class="line">    res = []</span><br><span class="line">    stack = ArrayStack()</span><br><span class="line">    stack.push(([], nums))  <span class="comment"># 初始状态：空排列 []，剩余元素 nums</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        <span class="comment"># Step 1: 每次拿出栈顶元素检查，如果不是全排列则进入 Step 2</span></span><br><span class="line">        path, remaining = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> remaining:  <span class="comment"># 如果剩余元素为空，说明 path 是一个完整的排列</span></span><br><span class="line">            res.append(path)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: 遍历元素，直到将 remaining 的所以剩余元素都加入新的排列中</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(remaining))):  <span class="comment"># 从剩余的 remaining 中取</span></span><br><span class="line">            e = remaining[i]  <span class="comment"># 取出当前元素</span></span><br><span class="line">            new_remaining = remaining[:i] + remaining[i + <span class="number">1</span>:]  <span class="comment"># 从剩余元素中移除 e</span></span><br><span class="line">            new_path = path + [e]  <span class="comment"># 将 e 加入排列 []</span></span><br><span class="line">            stack.push((new_path, new_remaining))  <span class="comment"># 压入新状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(permute_stack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 全排列</span></span><br><span class="line"><span class="comment"># [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span></span><br></pre></td></tr></table></figure><h4 id="6-3-2-子集问题">6.3.2 子集问题</h4><p><strong>思路</strong>：从 <code>U</code> 取出 <code>e</code> ，然后从 <code>U</code> 去除 <code>e</code> 。不过不同于全排列问题，由于子集不运行重复，所以需要去除 <code>e</code> 和之前的剩余元素，避免重复。子集问题和全排列问题都不需要设置约束条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subsets_stack</span>(<span class="params">nums</span>):</span><br><span class="line">    res = []</span><br><span class="line">    stack = ArrayStack()</span><br><span class="line">    stack.push(([], nums))  <span class="comment"># 初始状态：空子集，剩余元素为 nums</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        <span class="comment"># Step 1: 取栈顶元素，直接加入结果集，因为是子集问题</span></span><br><span class="line">        path, remaining = stack.pop()</span><br><span class="line">        res.append(path)  <span class="comment"># 将当前子集加入结果集</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: 遍历剩余元素，加入子集</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(remaining))):</span><br><span class="line">            e = remaining[i]  <span class="comment"># 取出当前元素</span></span><br><span class="line">            <span class="comment"># 从剩余元素中移除 e 及其之前的元素，因为子集不允许重复</span></span><br><span class="line">            new_remaining = remaining[i + <span class="number">1</span>:]</span><br><span class="line">            new_path = path + [e]  <span class="comment"># 将 e 加入子集</span></span><br><span class="line">            stack.push((new_path, new_remaining))  <span class="comment"># 压入新状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(subsets_stack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 子集</span></span><br><span class="line"><span class="comment"># [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]</span></span><br></pre></td></tr></table></figure><h4 id="6-3-3-求和谜题">6.3.3 求和谜题</h4><p><strong>思路</strong>：求和谜题，需要考虑得到的解是否满足求和要求。所以在上述的思路基础下，需要设置约束条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">combinationSum_stack</span>(<span class="params">candidates, target</span>):</span><br><span class="line">    res = []</span><br><span class="line">    stack = ArrayStack()</span><br><span class="line">    <span class="comment"># 初始状态：空组合，剩余目标值 target 即离 target 的差，起始位置 0</span></span><br><span class="line">    stack.push(([], target, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        path, remaining, start = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> remaining == <span class="number">0</span>:  <span class="comment"># 如果剩余目标值为 0，说明 path 是一个有效组合</span></span><br><span class="line">            res.append(path)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 candidates 的 start 开始选择元素</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">            e = candidates[i]</span><br><span class="line">            <span class="keyword">if</span> e &gt; remaining:</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 剪枝：如果当前元素大于剩余目标值，跳过</span></span><br><span class="line">            new_path = path + [e]  <span class="comment"># 将 e 加入组合</span></span><br><span class="line">            new_remaining = remaining - e  <span class="comment"># 更新剩余目标值</span></span><br><span class="line">            stack.push((new_path, new_remaining, i + <span class="number">1</span>))  <span class="comment"># 压入新状态，不允许重复选择</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><blockquote><p><code>stack.push((new_path, new_remaining, i + 1))</code> 的 <code>i + 1</code> 表示从下一个位置开始寻找，即不允许重复；若改为 <code>i</code> 则允许重复。</p></blockquote><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(combinationSum_stack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">9</span>))  <span class="comment"># 组合总和Q</span></span><br><span class="line"><span class="comment"># [[4, 5], [3, 6], [2, 7], [2, 3, 4], [1, 8], [1, 3, 5], [1, 2, 6]]</span></span><br></pre></td></tr></table></figure><h4 id="6-3-4-N-皇后问题">6.3.4 N 皇后问题</h4><p><strong>问题</strong>：在 NxN 格的国际象棋上摆放 N 个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法？</p><p><strong>思路</strong>：</p><ul><li>每行只能放置一个皇后，逐行处理。</li><li>在放置皇后时，需要确保当前列、正对角线（<code>row - col</code>）和反对角线（<code>row + col</code>）没有被其他皇后占据。</li><li>当发现当前路径无法继续时，回退到上一步，尝试其他可能性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solveNQueens_stack</span>(<span class="params">N</span>):</span><br><span class="line">    res = []  <span class="comment"># 存储所有有效解</span></span><br><span class="line">    stack = ArrayStack()</span><br><span class="line">    <span class="comment"># 初始状态：空路径，第 0 行，第一个 set 表示列，第二个表示正对角线，第三个表示反对角线</span></span><br><span class="line">    stack.push(([], <span class="number">0</span>, <span class="built_in">set</span>(), <span class="built_in">set</span>(), <span class="built_in">set</span>()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        <span class="comment"># Step 1: 出栈当前状态</span></span><br><span class="line">        path, row, cols, diag1, diag2 = stack.pop()</span><br><span class="line">        <span class="comment"># 如果所有行都处理完毕，说明 path 是一个有效解</span></span><br><span class="line">        <span class="keyword">if</span> row == N:</span><br><span class="line">            <span class="comment"># 转换为棋盘表示</span></span><br><span class="line">            res.append([<span class="string">&#x27; · &#x27;</span> * i + <span class="string">&#x27; Q &#x27;</span> + <span class="string">&#x27; · &#x27;</span> * (N - i - <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> path])</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: 在当前行选择列的位置</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="comment"># 计算当前列所在的正对角线和反对角线</span></span><br><span class="line">            curr_diag1 = row - col  <span class="comment"># 正对角线：行 - 列</span></span><br><span class="line">            curr_diag2 = row + col  <span class="comment"># 反对角线：行 + 列</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果当前列或对角线已经被占用，则跳过</span></span><br><span class="line">            <span class="keyword">if</span> col <span class="keyword">in</span> cols <span class="keyword">or</span> curr_diag1 <span class="keyword">in</span> diag1 <span class="keyword">or</span> curr_diag2 <span class="keyword">in</span> diag2:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的集合</span></span><br><span class="line">            new_cols = <span class="built_in">set</span>(cols)  <span class="comment"># 创建新的列冲突集</span></span><br><span class="line">            new_diag1 = <span class="built_in">set</span>(diag1)  <span class="comment"># 创建新的正对角线冲突集</span></span><br><span class="line">            new_diag2 = <span class="built_in">set</span>(diag2)  <span class="comment"># 创建新的反对角线冲突集</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新</span></span><br><span class="line">            new_cols.add(col)  <span class="comment"># 将当前列加入列冲突集</span></span><br><span class="line">            new_diag1.add(curr_diag1)  <span class="comment"># 将当前正对角线加入冲突集</span></span><br><span class="line">            new_diag2.add(curr_diag2)  <span class="comment"># 将当前反对角线加入冲突集</span></span><br><span class="line">            new_path = path + [col]  <span class="comment"># 将当前列加入路径</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 压入新状态：更新路径、下一行、新的冲突集</span></span><br><span class="line">            stack.push((new_path, row + <span class="number">1</span>, new_cols, new_diag1, new_diag2))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> solveNQueens_stack(<span class="number">4</span>):  <span class="comment"># 4 皇后问题</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Answer:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Answer:</span><br><span class="line"> ·  ·  Q  · </span><br><span class="line"> Q  ·  ·  · </span><br><span class="line"> ·  ·  ·  Q </span><br><span class="line"> ·  Q  ·  · </span><br><span class="line">Answer:</span><br><span class="line"> ·  Q  ·  · </span><br><span class="line"> ·  ·  ·  Q </span><br><span class="line"> Q  ·  ·  · </span><br><span class="line"> ·  ·  Q  · </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计软件 R 语言学习笔记 (4) R 语言初步：自定义函数、简单模拟与数据清洗</title>
      <link href="/posts/502a59cb.html"/>
      <url>/posts/502a59cb.html</url>
      
        <content type="html"><![CDATA[<h1>R 语言初步 (3) 自定义函数、简单模拟与数据清洗</h1><p>本章介绍 R 语言的函数定义方法，以及进行统计模拟、数据清洗的方法。<code>function</code> 关键字自定义函数；<code>r*</code> <code>p*</code> <code>d*</code> <code>q*</code> 分别进行各种分布的模拟；<code>sample</code> 函数进行简单随机抽样；数据清洗包括了缺失数据处理、按行排序、选取/删除部分数据、添加变量/特征和合并数据集操作。</p><h2 id="1-自定义函数">1 自定义函数</h2><h3 id="1-1-函数定义">1.1 函数定义</h3><p>定义函数的一般形式：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myfunction <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>a<span class="punctuation">,</span> b<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line">    <span class="built_in">return</span><span class="punctuation">(</span>object<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>myfunction</code> ：自定义的函数名称</li><li><code>function()</code> ：关键字，告诉 R 语言这是自定义的函数</li><li><code>a, b, c</code> ：为函数的参数，表明函数需要传入的参数</li><li><code>statement</code> ：函数体，编写函数的操作</li><li><code>return(object)</code> ：函数的返回值</li></ul><h3 id="1-2-传参方式">1.2 传参方式</h3><ul><li>方式一：按照参数顺序逐个传入</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myfunction<span class="punctuation">(</span>x1<span class="punctuation">,</span> x2<span class="punctuation">,</span> x3<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>方式二：指定参数</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myfunction<span class="punctuation">(</span>a <span class="operator">=</span> x1<span class="punctuation">,</span> b <span class="operator">=</span> x2<span class="punctuation">,</span> <span class="built_in">c</span> <span class="operator">=</span> x3<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-示例">1.3 示例</h3><ul><li>函数名：<code>my.data.ana</code></li><li>输入：一个向量 <code>x</code></li><li>任务：计算向量的平均值、最大值、最小值</li><li>输出：一个列表储存的结果</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my.data.ana <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    y <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>mean <span class="operator">=</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">max</span> <span class="operator">=</span> <span class="built_in">max</span><span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">min</span> <span class="operator">=</span> <span class="built_in">min</span><span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">    <span class="built_in">return</span><span class="punctuation">(</span>y<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> my.data.ana<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">y</span><br><span class="line"></span><br><span class="line"><span class="comment"># $mean</span></span><br><span class="line"><span class="comment"># [1] 5.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $max</span></span><br><span class="line"><span class="comment"># [1] 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $min</span></span><br><span class="line"><span class="comment"># [1] 1</span></span><br></pre></td></tr></table></figure><h2 id="2-简单模拟">2 简单模拟</h2><h3 id="2-1-有关统计分布的函数">2.1 有关统计分布的函数</h3><p><code>r*</code> ：<code>*</code> 分布的随机数函数</p><p><code>d*</code> ：<code>*</code> 分布的密度函数</p><p><code>p*</code> ：<code>*</code> 分布的分布函数</p><p><code>q*</code> ：<code>*</code> 分布的分位数函数</p><p>例如：</p><ul><li>正态分布的相关函数 <code>rnorm()</code> <code>dnorm()</code> <code>pnorm()</code> <code>qnorm()</code></li><li>Gamma 分布的相关函数 <code>rgamma()</code> <code>dgamma()</code> <code>pgamma()</code> <code>qgamma()</code></li><li>泊松分布相关函数 <code>rpois()</code> <code>dpois()</code> <code>ppois()</code> <code>qpois()</code></li></ul><h4 id="2-1-1-正态分布">2.1.1 正态分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传入分位数点，得到密度函数值</span></span><br><span class="line">dnorm<span class="punctuation">(</span>x<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入分位数点，得到分布函数值/即概率</span></span><br><span class="line">pnorm<span class="punctuation">(</span>q<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入概率值，得到对应的分位数点值</span></span><br><span class="line">qnorm<span class="punctuation">(</span>p<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 n 个随机数</span></span><br><span class="line">rnorm<span class="punctuation">(</span>n<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>分位数向量</td></tr><tr><td><code>p</code></td><td>概率值向量</td></tr><tr><td><code>n</code></td><td><code>rnorm(n)</code> 返回随机数的个数</td></tr><tr><td><code>mean</code></td><td>均值向量</td></tr><tr><td><code>sd</code></td><td>标准差向量</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>是否取对数，为 <code>TRUE</code> ，则传入 <code>log(p)</code></td></tr><tr><td><code>lower.tail</code></td><td>为 <code>TRUE</code> ，则概率表达式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>≤</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X \leq x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 否则，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>&gt;</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X &gt; x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><h4 id="2-1-2-Poisson-分布">2.1.2 Poisson 分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算概率密度函数 (PMF) 值</span></span><br><span class="line">dpois<span class="punctuation">(</span>x<span class="punctuation">,</span> lambda<span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累积分布函数 (CDF) 值</span></span><br><span class="line">ppois<span class="punctuation">(</span>q<span class="punctuation">,</span> lambda<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分位数（逆 CDF）</span></span><br><span class="line">qpois<span class="punctuation">(</span>p<span class="punctuation">,</span> lambda<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数</span></span><br><span class="line">rpois<span class="punctuation">(</span>n<span class="punctuation">,</span> lambda<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>非负整数分位数点。若输入非整数，<code>dpois</code> 返回 0；<code>ppois</code> 自动取 <code>floor(q)</code> 计算。</td></tr><tr><td><code>p</code></td><td>概率值向量，范围必须在 [0, 1] 之间。</td></tr><tr><td><code>n</code></td><td>生成的随机数数量。</td></tr><tr><td><code>lambda</code></td><td>非负向量。若为负数，返回 <code>NaN</code>。</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>逻辑值。若为 <code>TRUE</code>，概率以自然对数形式输入/输出。</td></tr><tr><td><code>lower.tail</code></td><td>逻辑值。若为 <code>TRUE</code>（默认），计算 <code>P(X ≤ x)</code> 或 <code>P(X ≤ q)</code>；否则计算 <code>P(X &gt; x)</code> 或 <code>P(X &gt; q)</code>。</td></tr></tbody></table><p><strong>关键细节</strong></p><ol><li><p><strong>离散性处理</strong><br>• <code>dpois(x, lambda)</code> 仅在 <code>x</code> 为整数时返回非零值，否则返回 0。<br>• <code>ppois(q, lambda)</code> 会对非整数 <code>q</code> 向下取整（等效计算 <code>P(X ≤ floor(q))</code>）。</p></li><li><p><strong>分位数函数逻辑</strong><br>• <code>qpois(p, lambda)</code> 返回最小整数 <code>k</code>，使得 <code>P(X ≤ k) ≥ p</code>。<br>• 当 <code>lower.tail = FALSE</code> 时，寻找最小 <code>k</code> 使得 <code>P(X &gt; k) ≤ p</code>（即右尾分位数）。</p></li><li><p><strong>向量化运算</strong><br>所有参数均支持向量化输入，按元素循环计算。例如：</p></li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 分别计算 λ=2 时 x=1，λ=3 时 x=2，λ=4 时 x=3 的概率</span></span><br><span class="line">dpois<span class="punctuation">(</span>x <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> lambda <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-二项分布">2.1.3 二项分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算概率密度函数 (PMF) 值</span></span><br><span class="line">dbinom<span class="punctuation">(</span>x<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累积分布函数 (CDF) 值</span></span><br><span class="line">pbinom<span class="punctuation">(</span>q<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分位数（逆 CDF）</span></span><br><span class="line">qbinom<span class="punctuation">(</span>p<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数</span></span><br><span class="line">rbinom<span class="punctuation">(</span>n<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>整数分位数点。若输入非整数，<code>dbinom</code> 返回 0；<code>pbinom</code> 自动取 <code>floor(q)</code> 计算。</td></tr><tr><td><code>p</code></td><td>概率值向量，范围必须在 [0, 1] 之间。</td></tr><tr><td><code>n</code></td><td>生成的随机数数量。若输入向量（如 <code>n = c(2,3)</code>），实际生成 <code>sum(n)</code> 个随机数。</td></tr><tr><td><code>size</code></td><td>试验次数（非负整数），若为小数会自动截断为整数。</td></tr><tr><td><code>prob</code></td><td>单次试验成功概率，范围 [0, 1]。若输入负数或 &gt;1 返回 <code>NaN</code>。</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>逻辑值。若为 <code>TRUE</code>，概率以自然对数形式输入/输出（例如 <code>log(0.05)</code>）。</td></tr><tr><td><code>lower.tail</code></td><td>逻辑值。若为 <code>TRUE</code>（默认），计算 <code>P(X ≤ x)</code> 或 <code>P(X ≤ q)</code>；否则计算 <code>P(X &gt; x)</code> 或 <code>P(X &gt; q)</code>。</td></tr></tbody></table><h3 id="2-2-随机抽样函数-sample">2.2 随机抽样函数 sample</h3><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span>x<span class="punctuation">,</span> size<span class="punctuation">,</span> replace <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> prob <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>抽样来源。可以是向量或单个整数：若为向量，直接从中抽样；若为整数 <code>n</code> ，等价于从 <code>1:n</code> 抽样</td></tr><tr><td><code>size</code></td><td>抽样数量。必须为非负整数，且当 <code>replace=FALSE</code> 时，<code>size ≤ length(x)</code></td></tr><tr><td><code>replace</code></td><td>是否放回抽样。默认 <code>FALSE</code>（无放回）；<code>TRUE</code> 时为有放回抽样</td></tr><tr><td><code>prob</code></td><td>权重向量。指定每个元素的抽样概率（自动归一化），需与 <code>x</code> 等长。默认等概率抽样</td></tr></tbody></table><hr><p><strong>关键细节</strong></p><ol><li>当 <code>x</code> 为整数时的特殊行为</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span>          <span class="comment"># 等价于从 1:5 中无放回抽3个数（如 2,4,1）</span></span><br><span class="line">sample<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span>       <span class="comment"># 从单元素向量 5 中有放回抽3次（需设置 replace=TRUE）</span></span><br></pre></td></tr></table></figure><ol start="2"><li>权重概率：若 <code>prob</code> 的和不为1，会自动归一化处理</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span><span class="string">&quot;B&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">5</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">,</span> prob<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">3</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># &quot;A&quot;出现概率为 3/(3+1)=75%</span></span><br></pre></td></tr></table></figure><ol start="3"><li>边界条件限制：<code>size</code> 在无放回时一定要比 <code>x</code> 的长度小</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">15</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">)</span>   <span class="comment"># 允许（有放回）</span></span><br><span class="line">sample<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">15</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">FALSE</span><span class="punctuation">)</span>  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><h3 id="2-3-随机种子-set-seed">2.3 随机种子 set.seed()</h3><p>在电脑上生成随机数字时，生成的数字并不是真正的随机数，它们叫做伪随机数 (pseudo random number)。当从任意分布模拟随机数字时，设置随机数字生成器种子 (seed) 是非常重要的。设置随机种子使得实验结果可复现。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n 指定一个整数</span></span><br><span class="line">set.seed<span class="punctuation">(</span>n<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>当设置随机种子后，随机结果将会相同</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set.seed<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">3</span><span class="punctuation">)</span> <span class="comment"># [1]  0.6328626  0.4042683 -0.1061245</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">4</span><span class="punctuation">)</span> <span class="comment"># [1]  1.5952808  0.3295078 -0.8204684  0.4874291</span></span><br><span class="line"></span><br><span class="line">set.seed<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">3</span><span class="punctuation">)</span> <span class="comment"># [1]  0.6328626  0.4042683 -0.1061245</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">4</span><span class="punctuation">)</span> <span class="comment"># [1]  1.5952808  0.3295078 -0.8204684  0.4874291</span></span><br></pre></td></tr></table></figure><h2 id="3-数据清洗">3 数据清洗</h2><p>结构化数据：表格形式的数据。每一行代表一个样本/观测，每一列对应一个变量/特征。</p><p><strong>创建示例数据表</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">manager <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">)</span></span><br><span class="line">date0 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;10/24/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/28/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/1/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/12/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;5/1/09&quot;</span><span class="punctuation">)</span></span><br><span class="line">nationality <span class="operator">&lt;-</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;US&quot;</span><span class="punctuation">,</span> <span class="string">&quot;UK&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">)</span></span><br><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">32</span><span class="punctuation">,</span> <span class="number">45</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">39</span><span class="punctuation">,</span> <span class="number">99</span><span class="punctuation">)</span></span><br><span class="line">q1 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q2 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q3 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">q4 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q5 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">leadership <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>manager<span class="punctuation">,</span> date0<span class="punctuation">,</span> nationality<span class="punctuation">,</span> gender<span class="punctuation">,</span> age<span class="punctuation">,</span> q1<span class="punctuation">,</span> q2<span class="punctuation">,</span> q3<span class="punctuation">,</span> q4<span class="punctuation">,</span> q5<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leadership</span><br><span class="line"><span class="comment">#   manager    date0 nationality gender age q1 q2 q3 q4 q5</span></span><br><span class="line"><span class="comment"># 1       1 10/24/08          US      M  32  5  4  5  5  5</span></span><br><span class="line"><span class="comment"># 2       2 10/28/08          US      F  45  3  5  2  5  5</span></span><br><span class="line"><span class="comment"># 3       3  10/1/08          UK      F  25  3  5  5  5  2</span></span><br><span class="line"><span class="comment"># 4       4 10/12/08          UK      M  39  3  3  4 NA NA</span></span><br><span class="line"><span class="comment"># 5       5   5/1/09          UK      F  99  2  2  1  2  1</span></span><br></pre></td></tr></table></figure><h3 id="3-1-缺失数据">3.1 缺失数据</h3><p><code>is.na()</code> 逐个元素比较是否为空 <code>NA</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741851904974.png" alt=""></p><p>直接删除 <code>na.omit</code> 非替换操作，删除空值的行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newdata <span class="operator">&lt;-</span> na.omit<span class="punctuation">(</span>leadership<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">newdata</span><br><span class="line"><span class="comment">#   manager    date0 nationality gender age q1 q2 q3 q4 q5</span></span><br><span class="line"><span class="comment"># 1       1 10/24/08          US      M  32  5  4  5  5  5</span></span><br><span class="line"><span class="comment"># 2       2 10/28/08          US      F  45  3  5  2  5  5</span></span><br><span class="line"><span class="comment"># 3       3  10/1/08          UK      F  25  3  5  5  5  2</span></span><br><span class="line"><span class="comment"># 5       5   5/1/09          UK      F  99  2  2  1  2  1</span></span><br></pre></td></tr></table></figure><blockquote><p>或者采用均值填充 <code>mean(leadership$age)</code></p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用中位数代替 q1 列的缺失值</span></span><br><span class="line">leadership<span class="operator">$</span>q1<span class="punctuation">[</span><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="operator">$</span>q1<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> median<span class="punctuation">(</span>leadership<span class="operator">$</span>q1<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值代替 q2 列的缺失值</span></span><br><span class="line">leadership<span class="operator">$</span>q2<span class="punctuation">[</span><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="operator">$</span>q2<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> mean<span class="punctuation">(</span>leadership<span class="operator">$</span>q2<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>其中 <code>na.rm = TRUE</code> 表示在计算均值/中位数等统计量时忽略空值。</p><h3 id="3-2-数据按行排序">3.2 数据按行排序</h3><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">函数/方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">对向量排序</td><td style="text-align:left"><code>sort()</code></td><td style="text-align:left">返回排序后的值</td></tr><tr><td style="text-align:left">获取排序索引</td><td style="text-align:left"><code>order()</code></td><td style="text-align:left">返回排序后的索引值，用于按行排序</td></tr><tr><td style="text-align:left">按列升序排序</td><td style="text-align:left"><code>data[order(data$column), ]</code></td><td style="text-align:left">按指定列升序排列数据框</td></tr><tr><td style="text-align:left">降序排序</td><td style="text-align:left"><code>order(x, decreasing = TRUE)</code></td><td style="text-align:left">按指定列降序排列数据框</td></tr><tr><td style="text-align:left">处理缺失值</td><td style="text-align:left"><code>na.last = TRUE/FALSE</code></td><td style="text-align:left">控制缺失值在排序中的位置（默认放在最后）</td></tr></tbody></table><p>例如：按照 <code>age</code> 升序排序</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newdata <span class="operator">&lt;-</span> leadership<span class="punctuation">[</span>order<span class="punctuation">(</span>leadership<span class="operator">$</span>age<span class="punctuation">)</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>好的，用户需要整理关于R语言中选取和删除部分数据的笔记，特别是使用下标运算、列名以及subset()函数的方法。他们已经提供了一些之前的笔记结构，我需要保持一致的风格和格式。</p><p>首先，我需要回忆R语言中数据框的基本操作。下标运算[ , ]的使用是关键，参数可以是正数、负数、逻辑值或空。用户还提到数据框有行名和列名，可以按列名选取列。另外，subset()函数也是一个重要的方法。</p><p>接下来，我需要确定如何组织内容。之前的笔记有参数详解、关键细节、示例和注意事项，我应该沿用这个结构。需要解释不同的下标类型如何影响选取或删除数据，比如正数选择特定行或列，负数排除，逻辑值过滤，空表示全选。还要说明如何使用列名来选取列，以及subset()函数的参数和使用场景。</p><p>需要注意常见的陷阱，比如混合使用正负下标可能导致错误，逻辑值的回收机制可能引发意外结果，subset()函数在处理变量时的环境问题。还要提到drop参数的影响，避免数据框降维为向量。</p><p>然后，准备示例代码。例如，用正数选取行和列，用负数删除，用逻辑表达式过滤行，按列名选取，以及subset()的使用。同时提供输出结果，帮助理解。</p><p>最后，总结不同方法的适用场景，帮助用户根据需求选择合适的方式。确保内容清晰，结构合理，语言简洁，符合用户之前的笔记风格。</p><h3 id="3-3-选取-删除部分数据">3.3 选取/删除部分数据</h3><h4 id="3-3-1-基础方法：下标运算符">3.3.1 基础方法：下标运算符 [ ]</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据框<span class="punctuation">[</span>行下标<span class="punctuation">,</span> 列下标<span class="punctuation">]</span>  <span class="comment"># 行和列下标可为正数、负数、逻辑值或空（保留所有行/列）</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>下标类型</th><th>说明</th></tr></thead><tbody><tr><td>正数</td><td>选取指定位置的行/列（如 <code>1:3</code> 选取前3行或前3列）</td></tr><tr><td>负数</td><td>排除指定位置的行/列（如 <code>-c(2,4)</code> 删除第2和第4行/列）</td></tr><tr><td>逻辑值</td><td>按 TRUE/FALSE 筛选行/列（如 <code>数据框$列名 &gt; 5</code> 筛选满足条件的行）</td></tr><tr><td>空值</td><td>保留所有行或列（如 <code>数据框[, 2:4]</code> 保留所有行，选取第2到4列）</td></tr><tr><td>列名</td><td>通过列名字符串筛选（如 <code>数据框[, c(&quot;列名1&quot;, &quot;列名2&quot;)]</code>）</td></tr></tbody></table><p><strong>示例</strong></p><ul><li>按照数字索引取/删除</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取前3行和前2列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除第2行和第3列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="operator">-</span><span class="number">2</span><span class="punctuation">,</span> <span class="operator">-</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选取所有行，仅保留第2列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span>      <span class="comment"># 结果可能降维为向量</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> drop<span class="operator">=</span><span class="literal">FALSE</span><span class="punctuation">]</span>  <span class="comment"># 保持数据框结构</span></span><br></pre></td></tr></table></figure><ul><li>按逻辑条件筛选行</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选年龄 &gt;30 的行</span></span><br><span class="line">df<span class="punctuation">[</span>df<span class="operator">$</span>age <span class="operator">&gt;</span> <span class="number">30</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选性别为女性且国籍为US的行</span></span><br><span class="line">df<span class="punctuation">[</span>df<span class="operator">$</span>gender <span class="operator">==</span> <span class="string">&quot;F&quot;</span> <span class="operator">&amp;</span> df<span class="operator">$</span>country <span class="operator">==</span> <span class="string">&quot;US&quot;</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li>按列名选取列</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取指定列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除指定列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="operator">!</span><span class="punctuation">(</span>colnames<span class="punctuation">(</span>df<span class="punctuation">)</span> <span class="operator">%in%</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;date&quot;</span><span class="punctuation">,</span> <span class="string">&quot;q5&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-subset-函数">3.3.2 subset() 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>数据框<span class="punctuation">,</span> subset<span class="operator">=</span>行筛选条件<span class="punctuation">,</span> select<span class="operator">=</span>列筛选条件<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>subset</code></td><td>逻辑表达式，筛选符合条件的行（如 <code>age &gt; 30</code>）</td></tr><tr><td><code>select</code></td><td>指定要保留的列，支持列名或列位置（如 <code>c(&quot;age&quot;, &quot;gender&quot;)</code> 或 <code>2:4</code>）</td></tr></tbody></table><p><strong>示例</strong></p><ul><li>筛选年龄 &gt; 30 且性别为男性的行，保留年龄和性别列</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>df<span class="punctuation">,</span> subset <span class="operator">=</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="operator">&amp;</span> gender <span class="operator">==</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> select <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>subset()</code> 的 <code>select</code> 参数支持负列名，表示删除/不取对应的列</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>数据框<span class="punctuation">,</span> select <span class="operator">=</span> <span class="operator">-</span><span class="built_in">c</span><span class="punctuation">(</span>列名<span class="number">1</span><span class="punctuation">,</span> 列名<span class="number">2</span><span class="punctuation">,</span> ...<span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="3-4-添加变量-特征">3.4 添加变量/特征</h3><h4 id="3-4-1-直接赋值法">3.4.1 直接赋值法</h4><p>通过 <code>$</code> 符号直接创建新变量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算 q1 到 q5 的总和 (qsum)</span></span><br><span class="line">leadership<span class="operator">$</span>qsum <span class="operator">&lt;-</span> leadership<span class="operator">$</span>q1 <span class="operator">+</span> leadership<span class="operator">$</span>q2 <span class="operator">+</span> leadership<span class="operator">$</span>q3 <span class="operator">+</span> leadership<span class="operator">$</span>q4 <span class="operator">+</span> leadership<span class="operator">$</span>q5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 qsum 的平均值 (qmean)</span></span><br><span class="line">leadership<span class="operator">$</span>qmean <span class="operator">&lt;-</span> leadership<span class="operator">$</span>qsum <span class="operator">/</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-within-函数">3.4.2 within() 函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leadership <span class="operator">&lt;-</span> within<span class="punctuation">(</span>leadership<span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    qsum <span class="operator">&lt;-</span> q1 <span class="operator">+</span> q2 <span class="operator">+</span> q3 <span class="operator">+</span> q4 <span class="operator">+</span> q5 <span class="comment"># 计算总和</span></span><br><span class="line">    qmean <span class="operator">&lt;-</span> qsum <span class="operator">/</span> <span class="number">5</span> <span class="comment"># 计算平均值</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-合并数据集">3.5 合并数据集</h3><h4 id="3-5-1-基础合并函数-cbind-rbind">3.5.1 基础合并函数 cbind() rbind()</h4><p><code>cbind()</code>：按列合并</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cbind<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df1 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>ID <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">df2 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>Age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">20</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">30</span><span class="punctuation">)</span><span class="punctuation">,</span> Score <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">85</span><span class="punctuation">,</span> <span class="number">90</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">combined_col <span class="operator">&lt;-</span> cbind<span class="punctuation">(</span>df1<span class="punctuation">,</span> df2<span class="punctuation">)</span>  <span class="comment"># 合并后列数为 df1 列数 + df2 列数</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>ID</th><th>Name</th><th>Age</th><th>Score</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>20</td><td>85</td></tr><tr><td>2</td><td>B</td><td>25</td><td>90</td></tr><tr><td>3</td><td>C</td><td>30</td><td>88</td></tr></tbody></table><blockquote><p>若行数不同，会报错；列名重复时自动添加后缀（如 <code>Score</code> 和 <code>Score.1</code>）</p></blockquote><p><code>rbind()</code>：按行合并</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbind<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df3 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>ID <span class="operator">=</span> <span class="number">4</span><span class="operator">:</span><span class="number">5</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;D&quot;</span><span class="punctuation">,</span> <span class="string">&quot;E&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> Age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">22</span><span class="punctuation">,</span> <span class="number">28</span><span class="punctuation">)</span><span class="punctuation">,</span> Score <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">92</span><span class="punctuation">,</span> <span class="number">80</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">combined_row <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>combined_col<span class="punctuation">,</span> df3<span class="punctuation">)</span>  <span class="comment"># 合并后行数为原两数据框行数之和</span></span><br></pre></td></tr></table></figure><p><strong>结果</strong>：<br>| ID   | Name | Age  | Score |<br>| ---- | ---- | ---- | ----- |<br>| 1    | A    | 20   | 85    |<br>| 2    | B    | 25   | 90    |<br>| 3    | C    | 30   | 88    |<br>| 4    | D    | 22   | 92    |<br>| 5    | E    | 28   | 80    |</p></li></ul><blockquote><p>若列名不一致，会报错</p></blockquote><h4 id="3-5-2-高级合并函数-merge">3.5.2 高级合并函数 merge()</h4><p>根据共同列（键）合并两个数据框。</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merge<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;列名&quot;</span><span class="punctuation">,</span> <span class="built_in">all</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>核心参数</p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>by</code></td><td>指定合并的列名（如 <code>by = &quot;ID&quot;</code>），若未指定则自动匹配同名列。</td></tr><tr><td><code>all.x</code></td><td>是否保留左表所有行（左外连接），默认 <code>FALSE</code>。</td></tr><tr><td><code>all.y</code></td><td>是否保留右表所有行（右外连接），默认 <code>FALSE</code>。</td></tr><tr><td><code>all</code></td><td><code>all = TRUE</code> 表示全外连接（保留所有行）。</td></tr></tbody></table><blockquote><p>左/右/外连接：按照某列合并时，可能会存在其他列个数不匹配。采用左外连接，则保留左表所有行，右表不足则复制，填入空值；采用右外连接，则保留右表所有行，左表不足则复制，填入空值；采用全连接，则保留左右表所有行，不足则复制，填入空值。</p></blockquote><ul><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orders <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>OrderID <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">101</span><span class="punctuation">,</span> <span class="number">102</span><span class="punctuation">,</span> <span class="number">103</span><span class="punctuation">)</span><span class="punctuation">,</span> CustomerID <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">customers <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>CustomerID <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内连接（默认）取交集，[1，2，4] 和 [1, 2, 3] 只有 [1, 2] 相交</span></span><br><span class="line">inner_join <span class="operator">&lt;-</span> merge<span class="punctuation">(</span>orders<span class="punctuation">,</span> customers<span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;CustomerID&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>内连接结果</p><table><thead><tr><th>CustomerID</th><th>OrderID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>A</td></tr><tr><td>2</td><td>102</td><td>B</td></tr></tbody></table><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左外连接，左表的 [1, 2, 4] 都保留，则多出来的无法匹配的留空</span></span><br><span class="line">left_join <span class="operator">&lt;-</span> merge<span class="punctuation">(</span>orders<span class="punctuation">,</span> customers<span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;CustomerID&quot;</span><span class="punctuation">,</span> all.x <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>左外连接结果</p><table><thead><tr><th>CustomerID</th><th>OrderID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>A</td></tr><tr><td>2</td><td>102</td><td>B</td></tr><tr><td>4</td><td>103</td><td>NA</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> R 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R 语言 </tag>
            
            <tag> 统计软件 </tag>
            
            <tag> R programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表 (2) 含有位置信息的链表、链表的插入排序和 More-To-Front 启发式算法</title>
      <link href="/posts/416d50d7.html"/>
      <url>/posts/416d50d7.html</url>
      
        <content type="html"><![CDATA[<h1>链表 (2) 含有位置信息的链表、链表的插入排序和 More-To-Front 启发式算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>在单向链表、循环链表和双向链表的基础上，引入位置信息，定义基于链表的位置列表数据类型，并基于链表实现了插入排序。</p><p>对于新的位置列表类，本质上利用链表的方法串联了一个复杂的类 <code>Position</code> ，而这个类中包含了链表的节点（<code>_Node</code>）以及这个位置所属的位置列表信息。</p><p>除此之外，介绍了案例：访问频率列表，构建了一个网页收藏夹列表类，存储网页信息和访问次数。并使用 More-To-Front 启发式算法提高查询访问量最高的前 k 个网页的效率。</p><h2 id="1-位置列表的抽象数据类型">1 位置列表的抽象数据类型</h2><p>与内存分布连续的数组相比，链表只要给定特定的节点，便可完成对节点的插入和删除（讨论的是双向链表），正如<a href="https://zhuanlan.zhihu.com/p/29508680467">上一章</a>（<a href="https://blog.iskage.online/posts/9241942.html">博客链接</a>）定义的 <code>_DoublyLinkedBase</code> 类给出的 <code>_insert_between()</code> 和 <code>_delete_node()</code> 方法。</p><p>但是，数组可以在常数时间，根据整数索引，完成索引操作。对于链表而言，却只能一步一步的遍历，直到找到目标节点，这是非常数时间操作。</p><h3 id="1-1-位置信息的抽象类">1.1 位置信息的抽象类</h3><p>为了方便外部用户调用链表类时，我们可以在继承 <code>_DoublyLinkedBase</code> 类后，增加内嵌的<strong>位置类</strong> <code>Position</code> ，而这就是<strong>含位置信息的列表抽象类</strong>。</p><p>这个列表抽象类 <code>PositionalList</code> 应该满足如下的操作例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741769316869.png" alt="位置列表类的操作示意"></p><blockquote><p><code>p</code> 和 <code>q</code> 是实例化后的位置类 <code>Position</code> ，存储了对应节点的位置信息。</p></blockquote><h3 id="1-2-双向链表的实现">1.2 双向链表的实现</h3><p>使用双向链表完整实现位置列表类 <code>PositionalList</code> 的方法。相关解释见后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PositionalList</span>(<span class="title class_ inherited__">_DoublyLinkedBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;利用双向链表实现位置列表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 内嵌的位置类 --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Position</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;抽象的位置类，存储节点的位置信息&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, container, node</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;初始化位置信息&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># _container 存储列表类 PositionalList 表明当前位置类属于这个列表类</span></span><br><span class="line">            <span class="variable language_">self</span>._container = container</span><br><span class="line">            <span class="variable language_">self</span>._node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">element</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;返回当前位置的节点元素值&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._node._element</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;检查二者是否具有相同的位置信息 重载运算符 ==&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> <span class="built_in">type</span>(<span class="variable language_">self</span>) <span class="keyword">and</span> other._node <span class="keyword">is</span> <span class="variable language_">self</span>._node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;与上面相反 重载运算符 !=&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> <span class="variable language_">self</span> == other</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 检查位置类、为节点实例化位置类 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_validate</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否是合法的 Position 类，返回位置类存储的节点类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(p, <span class="variable language_">self</span>.Position):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;p must be proper Position&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._container <span class="keyword">is</span> <span class="keyword">not</span> <span class="variable language_">self</span>:</span><br><span class="line">            <span class="comment"># 检查当前位置类 p 是否属于当前列表，以免误操作了别的列表</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p does not belong to this container&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._node._<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p is no longer valid&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> p._node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_position</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;对每个节点，实例化它的位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="variable language_">self</span>._header <span class="keyword">or</span> node <span class="keyword">is</span> <span class="variable language_">self</span>._trailer:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 创建属于当前列表的位置类</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.Position(<span class="variable language_">self</span>, node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 查看位置列表类的方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第一个节点的位置类，注意不含哨兵节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最后一个节点的位置类，注意不含哨兵节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._trailer._prev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">before</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回位置类 p 前面的位置类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># 检查是否是合法的位置类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._prev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">after</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回位置类 p 后面的位置类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器，逐个生成返回列表的元素值&quot;&quot;&quot;</span></span><br><span class="line">        cursor = <span class="variable language_">self</span>.first()</span><br><span class="line">        <span class="keyword">while</span> cursor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> cursor.element()</span><br><span class="line">            cursor = <span class="variable language_">self</span>.after(cursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 改变位置列表类的方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_between</span>(<span class="params">self, e, predecessor, successor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用父类方法，但返回位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 覆写父类插入方法</span></span><br><span class="line">        node = <span class="built_in">super</span>()._insert_between(e, predecessor, successor)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_first</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在头部插入，返回位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._header, <span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_last</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._trailer._prev, <span class="variable language_">self</span>._trailer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_before</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在位置类 p 前插入&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, original._prev, original)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_after</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, original, original._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除位置类 p 返回 p 上的值&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(original)  <span class="comment"># 父类方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">replace</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;替换位置 p 的值为 e，返回 p 位置之前的值&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        old_value = original._element</span><br><span class="line">        original._element = e</span><br><span class="line">        <span class="keyword">return</span> old_value</span><br></pre></td></tr></table></figure><h4 id="1-2-1-定义-Position-类">1.2.1 定义 Position 类</h4><p>定义位置类 <code>Position</code> 用来方便的得到每个节点的位置。因为只要位置信息已知，链表的插入和删除操作的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p><p>同时 <code>Position._container</code> 属性也为每个节点创建位置类时指定了所属的列表类。以免对别的列表类的位置进行误操作。</p><p>而对于 <code>Position._node</code> 则存储了链表的节点类 <code>_Node</code> ，节点类包含了真正的信息，例如元素值 <code>_element</code> 和前后指针 <code>_prev</code> <code>_next</code> 。</p><h4 id="1-2-2-validate-和-make-position-方法">1.2.2 _validate 和 _make_position 方法</h4><p>首先 <code>_valudate()</code> 方法调用，意在检查传入的是否为位置类 <code>Position</code> ，以及检查是否为本列表 <code>PositionalList</code> 类的位置类。最后返回当前位置的节点类。</p><p>而 <code>_make_position()</code> 方法则打包处理了将节点转换为位置类的过程。传入链表节点，得到含义位置信息的新类（位置类）。同时对于哨兵节点返回 None。</p><h4 id="1-2-3-查看列表-链表信息">1.2.3 查看列表/链表信息</h4><p><code>first(), last()</code> 方法可以得到列表第一个和最后位置的信息，例如 <code>L.first().element()</code> 可以得到第一个位置的值。而 <code>after(), before()</code> 方法可以根据传入的位置类，查看前后位置的信息，返回的仍然为位置类。</p><p><code>__iter__()</code> 方法配合父类的 <code>__len__()</code> 方法一起产生了迭代器。 <code>yield cursor.element()</code> 不断返回列表各个位置存储的值。</p><blockquote><p><code>return</code> 和 <code>yield</code> 的区别：<code>return</code> 是当函数/方法到达时返回结果，同时推出程序；但 <code>yield</code> 在返回结果后会暂停程序，下次调用时再次返回结果，直到函数/方法里的迭代结束。</p></blockquote><h4 id="1-2-4-操作列表-链表信息">1.2.4 操作列表/链表信息</h4><p><code>_insert_between()</code> 方法为非公有方法，父类方法返回的是节点类，这里覆写返回位置类。而后的 <code>add_first(), add_last(), add_before(), add_after()</code> 方法均是在新的插入方法中，传入位置信息，然后进行操作。</p><p><code>_delete_node()</code> 方法为非公有类，父类方法对节点进行操作。这里不做修改，只是定义新的公有方法 <code>delete()</code> 直接根据位置类进行删除。</p><h2 id="2-位置列表的排序">2 位置列表的排序</h2><h3 id="2-1-基于链表的插入排序">2.1 基于链表的插入排序</h3><p>在之前定义的类 <code>PositionalList</code> 之后，我们定义一个排序函数 <code>insertion_sort()</code> ，采用插入排序，实现对位置列表的排序操作。（从小到大）</p><p><strong>原理</strong> 定义一个指针 <code>marker</code> 遍历链表。当指针 <code>marker</code> 对应节点的值小于它后面的指针 <code>pivot</code> 对应节点的值，则 <code>marker</code> 后移即可；否则，让一个新的指针 <code>walk</code> 从现在的位置不断向前移动，寻找最远的一个值比 <code>pivot</code> 指针对应节点的值大的位置，将 <code>pivot</code> 插入到此时 <code>walk</code> 前面。（记录 <code>pivot</code> 的值，然后删除它，将这个值插入到 <code>walk</code> 前）。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741773030496.png" alt="链表插入排序示意" style="zoom:50%;" /><h3 id="2-2-代码实现">2.2 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">L: PositionalList</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对链表插入排序</span></span><br><span class="line"><span class="string">    :param L: 位置列表类 PositionalList</span></span><br><span class="line"><span class="string">    :return: no return</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(L) &gt; <span class="number">1</span>:</span><br><span class="line">        marker = L.first()</span><br><span class="line">        <span class="keyword">while</span> marker != L.last():  <span class="comment"># 遍历链表</span></span><br><span class="line">            pivot = L.after(marker)</span><br><span class="line">            value = pivot.element()  <span class="comment"># 保存后一个节点的值</span></span><br><span class="line">            <span class="keyword">if</span> value &gt; marker.element():  <span class="comment"># 满足排序要求（从小到大）</span></span><br><span class="line">                marker = pivot</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                walk = marker</span><br><span class="line">                <span class="comment"># 当没到第一个元素 并且 walk 前一个元素比 value 大，walk 不断向前找</span></span><br><span class="line">                <span class="keyword">while</span> walk != L.first() <span class="keyword">and</span> L.before(walk).element() &gt; value:</span><br><span class="line">                    walk = L.before(walk)</span><br><span class="line"></span><br><span class="line">                L.delete(pivot)</span><br><span class="line">                L.add_before(walk, value)  <span class="comment"># 插入到此时 walk 前</span></span><br></pre></td></tr></table></figure><h2 id="3-More-To-Front-启发式算法">3 More-To-Front 启发式算法</h2><h3 id="3-1-案例：访问频率列表">3.1 案例：访问频率列表</h3><p>设计一个对象类，用来记录每个节点被访问的次数。在现实中，这样的对象十分常见，例如网页的点击量列表：存储了各个网页对象和其被访问的次数，同时还能得到排名靠前的网页对象。所以，在这一节中，定义收藏夹列表类 <code>FavoritesList</code> 使其满足功能：</p><ul><li><code>access(e)</code> ：访问元素 <code>e</code> ，增加访问次数。如果 <code>e</code> 不在列表里，则添加到列表里。</li><li><code>remove(e)</code> ：移除元素 <code>e</code> ，注意安全移除，需要先判断是否存在。</li><li><code>top(k)</code> ：以迭代器的方式，返回访问量最多的 <code>k</code> 个元素。</li></ul><h3 id="3-2-方案一：有序列表">3.2 方案一：有序列表</h3><p>为了快速实现 <code>top(k)</code> 方法，可以在收藏夹列表类的更新中不断排序，使得 <code>FavoritesList</code> 的元素一直满足访问量从大到小的顺序。</p><p><strong>Python 实现</strong> 收藏夹列表类直接使用之前定义的 <code>PositionalList</code> 存储网页对象 <code>_Item</code> （存储了元素 <code>_value</code> 和次数 <code>_count</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> PositionalList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FavoritesList</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;有序列表方式实现&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 内嵌的 _Item 类 --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Item</span>:</span><br><span class="line">        __slots__ = <span class="string">&#x27;_value&#x27;</span>, <span class="string">&#x27;_count&#x27;</span>  <span class="comment"># 限制实例属性，优化内存使用</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, e</span>):</span><br><span class="line">            <span class="variable language_">self</span>._value = e  <span class="comment"># 用户提供的元素</span></span><br><span class="line">            <span class="variable language_">self</span>._count = <span class="number">0</span>  <span class="comment"># 访问计数，初始为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 非公有方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_position</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回元素 e 的位置类 Position&quot;&quot;&quot;</span></span><br><span class="line">        walk = <span class="variable language_">self</span>._data.first()  <span class="comment"># 在初始化后，self._data 是 PositionalList 类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 寻找元素 e 的位置，返回位置类 Position</span></span><br><span class="line">        <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> walk.element()._value != e:</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.after(walk)  <span class="comment"># 移动到下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> walk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_move_up</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;插入排序思想，按照次数 _count 产生有序列表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 与之前插入排序 insertion_sort 思路基本相同</span></span><br><span class="line">        <span class="comment"># 甚至更为简单，比较对象只用最后新加入的元素</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="variable language_">self</span>._data.first():</span><br><span class="line">            cnt = p.element()._count</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.before(p)</span><br><span class="line">            <span class="keyword">if</span> cnt &gt; walk.element()._count:</span><br><span class="line">                <span class="keyword">while</span> (walk != <span class="variable language_">self</span>._data.first() <span class="keyword">and</span></span><br><span class="line">                       cnt &gt; <span class="variable language_">self</span>._data.before(walk).element()._count):</span><br><span class="line">                    walk = <span class="variable language_">self</span>._data.before(walk)</span><br><span class="line">                <span class="variable language_">self</span>._data.add_before(walk, <span class="variable language_">self</span>._data.delete(p))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 公有方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化收藏夹列表类，直接实例化一个 PositionalList 类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = PositionalList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># PositionalList 已经定义了 __len__()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">access</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;访问元素 e 增加次数/添加元素&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_position(e)</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 不存在则插入</span></span><br><span class="line">            <span class="comment"># 向列表增加对象 _Item</span></span><br><span class="line">            <span class="comment"># 可以理解为 PositionalList 的链表的节点 _Node 的 _element 存储着 _Item 对象的地址</span></span><br><span class="line">            p = <span class="variable language_">self</span>._data.add_last(<span class="variable language_">self</span>._Item(e))</span><br><span class="line">        p.element()._count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._move_up(p)  <span class="comment"># 排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从收藏夹列表类中移除元素 e 对应的 _Item 对象&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_position(e)</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>._data.delete(p)  <span class="comment"># 这里的 _Item 对象相当于链表的 element 值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器的方式产生前 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">1</span> &lt;= k &lt;= <span class="built_in">len</span>(<span class="variable language_">self</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Illegal value of k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        walk = <span class="variable language_">self</span>._data.first()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 迭代后移</span></span><br><span class="line">            item = walk.element()</span><br><span class="line">            <span class="keyword">yield</span> item._value</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.after(walk)</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里链表节点的存储的值为 <code>_Item</code> 对象的地址</p></blockquote><h3 id="3-3-方案二：More-To-Front-启发式算法">3.3 方案二：More-To-Front 启发式算法</h3><p><strong>Move-to-Front 启发式算法</strong> ：每访问一个元素，都会把该元素移动到列表的最前面。这么做是希望这个元素在近期可以被再次/连续访问（这是符合常识的，被多次点击的网页一般都会在近期被再次访问）。</p><h4 id="3-3-1-分析时间复杂度">3.3.1 分析时间复杂度</h4><p>假设对于一个空的收藏夹列表，我们访问 n 个网页 <code>1, 2, 3, ..., n</code> 分别连续 n 次。因为按照访问次数排序，则对于第一个网页，每次访问需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，对于第二个网页每次都要和前一个网页比较（并且在访问 n 次之前都不会排在前一个元素前面），每次访问需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span> ，以此类推，每个访问 n 次：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>3</mn><mi>n</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>⋅</mo><mi>n</mi><mo>=</mo><mi>n</mi><mo>⋅</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n + 2n + 3n + \cdots + n \cdot n = n \cdot \frac{n(n+1)}{2} \sim O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，这是极其低效的。</p><p>但是采用 <strong>More-To-Front</strong> 算法，即按照访问时间排序，最后被访问的网页排在第一。如此对于任何一个网页，连续访问 n 次都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，因为访问第一次后，这个网页就位于第一个位置，链表查询第一个位置只需要 1 次操作。于是，每个访问 n 次的总时间：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>=</mo><mi>n</mi><mo>⋅</mo><mi>n</mi><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \cdot 1 + n \cdot 1 + n \cdot 1 + \cdots + n \cdot 1 = n \cdot n \sim O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，相对高效。</p><h4 id="3-3-2-代码实现-MTF-算法">3.3.2 代码实现 MTF 算法</h4><p>只需覆写 <code>_move_up()</code> 和 <code>top()</code> 方法即可。</p><ul><li>因为 <code>_move_up()</code> 方法只在访问 <code>access()</code> 方法调用时使用，所以每次使用 <code>_move_up()</code> 均代表该元素最近被访问，所以直接放在列表最前即可</li><li>而相比有序列表，查找前 k 个网页的 <code>top()</code> 方法就相对耗时，对于查找 k 个最大，没查找一个就要遍历全部，所以复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(kn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">kn</span><span class="mclose">)</span></span></span></span> ，不过利用以后要学习的其他高效方法，复杂度能降低到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。这也说明 MTF 启发式算法在处理这个问题时相对更加高效。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FavoritesListMTF</span>(<span class="title class_ inherited__">FavoritesList</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;利用 More-To-Front 启发式算法实现收藏夹列表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 只需要重载/覆写 _move_up() 和 top() 方法即可 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_move_up</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;每次调用意味着被访问，被访问就移到最前&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="variable language_">self</span>._data.first():</span><br><span class="line">            <span class="variable language_">self</span>._data.add_first(<span class="variable language_">self</span>._data.delete(p))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;因为列表无序，需要找到最大的前 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">1</span> &lt;= k &lt;= <span class="built_in">len</span>(<span class="variable language_">self</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Illegal value of k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 临时复制一份原列表</span></span><br><span class="line">        temp = PositionalList()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>._data:</span><br><span class="line">            temp.add_last(item)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 遍历一边找到最大的</span></span><br><span class="line">            highPos = temp.first()</span><br><span class="line">            walk = temp.after(highPos)</span><br><span class="line">            <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> walk.element()._count &gt;= highPos.element()._count:</span><br><span class="line">                    highPos = walk</span><br><span class="line">                walk = temp.after(walk)</span><br><span class="line">            <span class="keyword">yield</span> highPos.element()._value</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除最大的之后再遍历</span></span><br><span class="line">            temp.delete(highPos)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表 (1) 单向链表、循环链表与双向链表 Linked List</title>
      <link href="/posts/9241942.html"/>
      <url>/posts/9241942.html</url>
      
        <content type="html"><![CDATA[<h1>链表 (1) 单向链表、循环链表与双向链表</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>数组因为其紧凑的内存空间分配，使得其在索引时非常高效，但是却浪费了许多空间，它存储了远大于实际实例所需的空间。相对应的，<strong>链表</strong>数据结构依赖于分布式表达方法，采用节点的方式，不连续的存放数据。</p><p>本周讲解的链表实现了栈、队列、双端队列三种数据结构。它们的特点就是：可以在头部或者尾部进行插入或删除操作，无法在任意位置进行耗时为常数的操作。</p><h2 id="1-单向链表">1 单向链表</h2><h3 id="1-1-单向链表概念">1.1 单向链表概念</h3><p>单向链表是由多个节点共同构成的一个线性序列，从头指针开始，每个节点存储：元素值和下一个节点的指针。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741601117586.png" alt="每一个节点的示意图" style="zoom:50%;" /><ul><li>单向链表的第一个节点为头节点，最后一个节点为尾节点。</li><li>头指针 <code>head</code> 指向头节点，尾指针 <code>tail</code> 指向尾节点，且尾节点指向下一节点的指针为空指针。</li><li>从头指针开始，通过每个节点的next指针可以到达下一个节点，直至到达尾指针，完成对链表的遍历。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741601218479.png" alt="一个单向链表的示意"></p><h3 id="1-2-在单向链表头部插入元素">1.2 在单向链表头部插入元素</h3><p>链表由一个一个的节点组成，所以不需要预先分配空间，十分灵活。但是对链表的操作要十分谨慎，必须保留相关的指针。例如：对单向链表而言，丢失一个节点的信息，该节点之后的所有信息都会丢失。</p><p>以在单向链表头部插入元素为例：先建立新的节点，新节点的 <code>next</code> 指针指向原链表的头节点，头指针指向最新的节点，链表长度加一。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Algorithm add_first(L, e):</span><br><span class="line">newest = Node(e)           <span class="comment"># 1. 建立新的节点</span></span><br><span class="line">newest.<span class="built_in">next</span> = L.head    <span class="comment"># 2. 新节点的 `next` 指针指向原链表的头节点</span></span><br><span class="line">L.head = newest   <span class="comment"># 3. 头指针指向最新的节点</span></span><br><span class="line">L.size = L.size + <span class="number">1</span>   <span class="comment"># 4. 链表长度加一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741611806111.png" alt="在链表头部插入元素" style="zoom:100%;" /><h3 id="1-3-在单向链表尾部插入元素">1.3 在单向链表尾部插入元素</h3><p>当保存了尾指针时，可以容易的在尾部插入元素：首先创建一个新节点，将新节点 <code>next</code> 指针设为空，然后设置原链表最后一个节点的 <code>next</code> 指针指向新节点，最后设置尾指针指向新节点，链表长度加一。</p><blockquote><p>一定要先将原链表最后一个节点的 <code>next</code> 指针指向新节点，再设置尾指针指向新节点。否则会丢失原链表的信息！！！</p></blockquote><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Algorithm add_last(L, e):</span><br><span class="line">newest = Node(e)           <span class="comment"># 1. 创建一个新节点</span></span><br><span class="line">newest.<span class="built_in">next</span> = <span class="literal">None</span><span class="comment"># 2. 将新节点 `next` 指针设为空</span></span><br><span class="line">L.tail.<span class="built_in">next</span> = newest<span class="comment"># 3. 设置原链表最后一个节点的 `next` 指针指向新节点</span></span><br><span class="line">L.tail = newest<span class="comment"># 4. 设置尾指针指向新节点</span></span><br><span class="line">L.size = L.size + <span class="number">1</span><span class="comment"># 5. 链表长度加一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741612913677.png" alt="在单向链表尾部插入元素" style="zoom:100%;" /><h3 id="1-4-从单向链表头部删除元素">1.4 从单向链表头部删除元素</h3><p>与在单向链表的头部插入元素相反，从单向链表头部删除元素：将头指针直接指向头节点的下一个节点，然后链表长度减一，这样运来的头指针信息丢失，空间被释放。</p><blockquote><p>最后一步的空间释放，在 Python 中无需手动进行，Python 采用<strong>引用计数</strong>管理，当对象的引用计数归零时（即没有变量名保存这个对象的地址时），Python 会自动释放空间。</p><p>但对于其他语言，例如 C 语言，链表的删除需要手动释放内存。</p></blockquote><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Algorithm remove_first(L):</span><br><span class="line"><span class="keyword">if</span> L.head <span class="keyword">is</span> <span class="literal">None</span> then</span><br><span class="line"><span class="comment"># 链表本身为空</span></span><br><span class="line"></span><br><span class="line">L.head = L.head.<span class="built_in">next</span><span class="comment"># 1. 头指针直接指向头节点的下一个节点</span></span><br><span class="line">L.size = L.size - <span class="number">1</span><span class="comment"># 2. 链表长度减一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741613592560.png" alt="从单向链表头部删除元素"></p><h3 id="1-5-从单向链表尾部删除元素？">1.5 从单向链表尾部删除元素？</h3><p>即使保留了尾指针，也无法在常数 <code>O(1)</code> 时间内删除尾节点。因为根据单向链表的组成原理，删除尾节点，必须知道倒数第二个节点的信息。但想得到倒数第二节点的信息，必须要遍历整个链表，复杂度为 <code>O(n)</code> ，这是很低效的，在后面的双向链表里可以快速实现。</p><h3 id="1-6-单向链表实现栈">1.6 单向链表实现栈</h3><p><strong>栈</strong>是由一系列对象组成的一个集合，这些对象的插入和删除操作遵循后进先出（LIFO）的原则。用户可以在任何时刻向栈中插入一个对象，但只能取得或者删除最后一个插人的对象（即所谓的“栈顶”）。</p><p>因为栈满足后进先出的原则，如果我们假定栈顶是头节点，则不需要尾指针也能实现栈的功能。</p><p>首先实现各个节点的定义 <code>class _Node</code> 表示这是非公有的。<code>_Node</code> 嵌套在最终的链表栈类中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现栈&quot;&quot;&quot;</span></span><br><span class="line">    __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>._element = element</span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br></pre></td></tr></table></figure><blockquote><p>为了提高内存的利用率，定义<code>__slots__</code> 。指定一个节点只有两个实例变量：<code>_element</code> 和 <code>_next</code>（元素引用和指向下一个节点的引用）。</p></blockquote><p>下面是完整的链表栈类的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现栈&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现栈&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现栈 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span>  <span class="comment"># 头指针，指向节点，初始化为空</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;栈元素个数 len(obj) 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向栈顶部增加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 新建节点，指向旧的 head 新的 head 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._Node(e, <span class="variable language_">self</span>._head)</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回栈顶值，但不改变链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回栈顶元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element</span><br><span class="line">        <span class="comment"># 删除头部节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>Empty</code> 类可以定义为</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Raised when a value is an empty list.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>对于使用链表方式实现的栈，插入和删除元素都是常数时间完成的，这是相对于数组而言更高效的性质：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741669388492.png" alt="单向链表实现栈的时间复杂度"></p><h3 id="1-7-单向链表实现队列">1.7 单向链表实现队列</h3><p><strong>队列</strong>与栈类似，由一系列对象组成的集合，这些对象的插入和删除遵循先进先出（First in First out, FIFO）的原则。也就是说，元素在尾部插入，但是只有处在队列最前面的元素才能被删除。</p><p>因为队列的操作需要对头和尾操作，所以需要 <code>head</code> 头指针和 <code>tail</code> 尾指针。将头节点作为队列的头部，尾指针作为尾部，这样就满足可以在头部删除元素，在尾部插入元素。（因为对单向链表而言，尾部删除元素是复杂的）。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现队列，先进先出&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回队列长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列第一个节点和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element  <span class="comment"># 获取第一个元素值</span></span><br><span class="line">        <span class="comment"># 头指针指向下一个节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果节点清空，则设置尾指针为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._head = newest  <span class="comment"># 如果为空，则新节点为头节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 否则尾节点的 next 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用单向链表实现队列的时间复杂度也是常数。</p><h2 id="2-循环链表">2 循环链表</h2><h3 id="2-1-循环链表概念">2.1 循环链表概念</h3><p>在链表中，我们可以使链表的尾节点的 <code>next</code> 指针指向链表的头部，由此来获得一个<strong>循环链表</strong>。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741673718987.png" alt="循环链表图示"></p><p>在循环链表中，头指针和尾指针并不常用。相反，从任意一个节点都能进入这个循环链表。例如：使用 <code>current</code> 指针指向一个节点，则使用 <code>current.next</code> 理论上可以取到任意一个节点。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741673829874.png" alt="current 指针取循环链表节点"></p><h3 id="2-2-轮转调度">2.2 轮转调度</h3><p>轮转调度程序：以循环的方式迭代地遍历一个元素的集合，并通过执行一个给定的动作为集合中的每个元素进行“服务”。</p><p>例如：在队列 <code>Q</code> 反复进行下面的步骤，即可轮转调度为每个元素都进行“服务”。</p><ol><li><code>e = Q.dequeue()</code> ：从队列取出元素 e （下一个元素出队）</li><li><code>f(e)</code> ：为元素 e 提供服务、进行操作（“服务”下一个元素）</li><li><code>Q.enqueue(e)</code> ：e 被重新加入队列尾部（所“服务”的元素入队）</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741674177792.png" alt="队列实现轮转调度示意"></p><p>如果使用之前的单向链表，每次取出元素进行操作和插入元素都十分浪费时间。但使用循环链表实现，可以定义一个 <code>rotate()</code> 方法，将头部元素 <code>Q.front()</code> 服务完成后直接移动到尾部。即重复一下步骤即可实现轮转调度：</p><ol><li><code>f(Q.front)</code> ：取出头部元素进行操作/服务</li><li><code>Q.rotate()</code> ：将其直接移动到尾部</li></ol><h3 id="2-3-循环链表实现循环队列">2.3 循环链表实现循环队列</h3><p>使用前面的链表实现队列的代码，但修改尾指针，使得尾指针指向头节点，于是可以舍弃头指针。</p><ul><li>在这个循环类 <code>CircularQueue</code> 中，定义 <code>tail</code> 指针目前的位置为尾部，而 <code>tail.next</code> 为头部。</li><li>同时为循环链表类增加一个 <code>rotate()</code> 方法，将队首移到队尾，相当于 <code>tail = tail.next</code> 更新。</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedCircularQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;循环链表实现循环队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现循环队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只需要一个指针</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值 tail.next ，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对循环链表而言，定义尾指针指向节点的下一个节点为头节点</span></span><br><span class="line">        head = <span class="variable language_">self</span>._tail._<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列头节点 tail.next 和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        oldhead = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 获取头节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._size == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只有一个节点，删除后变成空队列</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = oldhead._<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 原来的 tail.next 即 oldhead 被释放，因为没有指针指向它</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> oldhead._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部 tail 增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="comment"># 如果为空，则新节点自己指向自己，后面再由 tail 指向 newest</span></span><br><span class="line">            newest._<span class="built_in">next</span> = newest</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newest._<span class="built_in">next</span> = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 新节点指向头节点</span></span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 原来的尾节点的 next 指针指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;训练轮转一次&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 指示指针 (尾指针) tail 向后移动一位</span></span><br></pre></td></tr></table></figure><h2 id="3-双向链表">3 双向链表</h2><h3 id="3-1-双向链表概念">3.1 双向链表概念</h3><p><strong>双向链表</strong>：为了提供更好的对称性，我们定义了一个链表，<strong>每个节点都维护了指向其先驱节点以及后继节点的引用</strong>。这样的结构被称双向链表。这些列表支持更多各种时间复杂度为 <code>O(1)</code> 的更新操作，这些更新操作包括在列表的任意位置插入和删除节点。用 <code>next</code> 表示指向当前节点的后继节点的引用，并引入 <code>prev</code> 引用其前驱节点。</p><p>为了更方便的引用，在链表的起始位置添加头节点 <code>header</code> ，在链表的尾部添加尾节点 <code>trailer</code> ，它们并不存储数据，仅仅为链表操作的方便和一些特殊情况，存储链表的头尾信息。称之为<strong>头哨兵</strong>和<strong>尾哨兵</strong>。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741678367710.png" alt="完整的双向链表图示"></p><ul><li>使用哨兵结构可以简单地处理一些操作。因为每次改变链表只是改变头尾节点的中间部分，而中间部分因为头尾节点的存在变得地位相同，可以采用相同的操作进行处理。例如之前，插入和删除元素还要区分头、尾、中间三部分，现在有了哨兵结构，所有节点都可以采用通适的方法。</li></ul><h3 id="3-2-双向链表的插入与删除">3.2 双向链表的插入与删除</h3><p>因为引入了哨兵结构，所以每个节点都是相同的，即使是第一个和最后一个有值的节点也与中间节点相同。</p><p><strong>插入元素图示</strong></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680651867.png" alt="在具有哨兵结构的双向链表的中间插入元素"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680686846.png" alt="在具有哨兵结构的双向链表的头部插入元素"></p><p>从上面两个的图示可以发现，把 <code>header</code> 和 <code>trailer</code> 指向的头尾哨兵节点当作普通元素，即可无论是在头部插入还是中间插入，本质上是一样的。</p><p><strong>删除元素图示</strong></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680740987.png" alt="在具有哨兵结构的双向链表删除一个元素"></p><h3 id="3-3-双向链表的基本实现">3.3 双向链表的基本实现</h3><p>虽然广泛意义的链表的插入和删除已经可以在双向链表中实现，但索引插入和删除的位置却是链表难以高效解决的。对于基于数组的序列而言，利用整数索引非常迅速；但对于链表，由于其不连续的内存空间，无法在常数时间内索引节点，只能逐个遍历。</p><p>所以下面<strong>双向链表的基本实现</strong>的插入和删除暂不考虑索引的问题，而是假设如下条件，直接进行操作：</p><ul><li>假设已知插入节点的前一个和后一个节点的地址</li><li>假设已知被删除节点的地址</li></ul><p>定义用于双向链表的节点类 <code>_Node</code> ，同样也是非公有的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_DoublyLinkedBase</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表的基础类/父类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;双向链表的节点类，包含元素值、prev 指针和 next 指针&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_prev&#x27;</span>, <span class="string">&#x27;_next&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, prev, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._prev = prev</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现链表 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个空链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建头哨兵、尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._header = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="variable language_">self</span>._trailer = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._header._<span class="built_in">next</span> = <span class="variable language_">self</span>._trailer  <span class="comment"># 头哨兵 next 指向尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._trailer._prev = <span class="variable language_">self</span>._header  <span class="comment"># 尾哨兵 prev 指向头哨兵</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 链表长度，不包括头尾哨兵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;链表长度 len() 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_between</span>(<span class="params">self, e, predecessor, successor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 predecessor, successor 插入插入新节点，并返回这个新节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建新节点，并将其 prev 指向 predecessor | 其 next 指向 successor</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, predecessor, successor)</span><br><span class="line"></span><br><span class="line">        predecessor._<span class="built_in">next</span> = newest  <span class="comment"># predecessor 的 next 指向新节点</span></span><br><span class="line">        successor._prev = newest  <span class="comment"># successor 的 prev 指向新节点</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> newest</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_delete_node</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;传入节点并删除，返回被删除的值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 记录将被删除的节点的前后信息</span></span><br><span class="line">        predecessor = node._prev</span><br><span class="line">        successor = node._<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 连接 predecessor 和 successor</span></span><br><span class="line">        predecessor._<span class="built_in">next</span> = successor</span><br><span class="line">        successor._prev = predecessor</span><br><span class="line"></span><br><span class="line">        element = node._element</span><br><span class="line">        <span class="comment"># 孤立节点 node : 设为空，用于标识这是即将被删除的节点</span></span><br><span class="line">        node._prev, node._<span class="built_in">next</span>, node._element = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p><code>_DoublyLinkedBase</code> 类是一个非公有类，其目的是作为被继承的父类所定义。其定义了：</p><ol><li>双向链表的节点类 <code>_Node</code></li><li>初始化了双向链表 <code>__init__</code></li><li>定义了如何取链表长度 <code>__len__</code> ，这是重载了运算符 <code>len()</code></li><li>定义了如何判断链表是否为空 <code>is_empty</code></li><li>给出了非公有方法 <code>_insert_between()</code> 实现了当给前一个和后一个节点时，如何在它们中间安全地插入新节点，同时返回这个新的节点地址。之后的子链表类可以继承使用。</li><li>给出了非公有方法 <code>_delete_node()</code> 实现了当给一个节点，如何安全地删除这个节点，返回被删除的节点存储的值。之后的子链表类可以继承使用。</li></ol><h3 id="3-4-双向链表实现双端队列">3.4 双向链表实现双端队列</h3><p><strong>双端队列</strong>：支持在队列的头部和尾部都进行插人和删除操作。这样一种结构被称为双端队列（double-ended queue 或者 <code>deque</code>）。</p><p>基于上面定义的基础双向链表类 <code>_DoublyLinkedBase</code> ，可以实现双端队列。因为继承了父类，所以新的双端队列链表类 <code>LinkedDeque</code> 不需要定义 <code>__init__</code> <code>__len__</code> <code>is_empty</code> 方法。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedDeque</span>(<span class="title class_ inherited__">_DoublyLinkedBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表实现双端队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 继承父类 --------------</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;不需要定义 `__init__` `__len__` `is_empty` 方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 添加双端队列的功能 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取第一个元素的值，注意头节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._header._<span class="built_in">next</span>._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取最后一个元素的值，注意尾节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._trailer._prev._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_first</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在头部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在头哨兵和第一个元素节点之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._header, <span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_last</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在最后一个元素节点和尾哨兵之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._trailer._prev, <span class="variable language_">self</span>._trailer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除第一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除头节点的下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除最后一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除尾节点的上一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._trailer._prev)</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，队列的头尾存储着两个空值的节点，即哨兵指针。所以在进行操作时，需要注意传入的节点。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 操作系统：文件系统</title>
      <link href="/posts/dad6b81f.html"/>
      <url>/posts/dad6b81f.html</url>
      
        <content type="html"><![CDATA[<h1>Linux 文件系统</h1><p>Linux 文件系统：路径名、目录 (<code>pwd, cd</code>) 、文件系统组织方式 (inode) 、文件和目录查看 (<code>touch, ls, tree</code>) 、文件和目录操作 (<code>mkdir, rmdir, cp, mv, rm</code>) 和 Linux 的目录结构。</p><h2 id="1-路径名和路径名解析">1 路径名和路径名解析</h2><p>相关命令：<code>dirname</code> <code>basename</code> <code>realpath</code></p><p><strong>文件系统</strong>以一颗目录树的形式来组织：</p><ul><li>根节点称为根 <code>root</code> 目录，用 <code>/</code> 来表示</li><li>目录树中的名字只需在其所在目录中唯一</li></ul><h3 id="1-1-路径名">1.1 路径名</h3><p>路径以 <code>/</code> 分隔，分为相对路径和绝对路径：</p><ul><li>绝对路径：从根目录开始，以 <code>/</code> 分割各级目录，例如：<code>/home/User/Documents/example.txt</code></li><li>相对路径：从当前目录开始，只包含当前目录以下的目录名，例如：如果位于 <code>/home/User</code> 则相对路径为 <code>Documents/example.txt</code> 或者 <code>./Documents/example.txt</code></li></ul><blockquote><p><code>.</code> 和 <code>..</code> 是特殊的目录，所有目录下都有这两个目录，<code>.</code> 指代当前目录，<code>..</code>  指代上一级目录。特别的，根目录的上一级目录为自身。</p></blockquote><h3 id="1-2-路径解析">1.2 路径解析</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>dirname ...</code></td><td>返回 <code>...</code> 所在目录的绝对路径</td></tr><tr><td><code>basename ...</code></td><td>返回路径 <code>...</code> 的文件名，即最后一个名字</td></tr><tr><td><code>realpath [options] ...</code></td><td>返回路径名解析后的绝对路径</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">dirname</span> /home/iskage/docs/example.txt</span><br><span class="line">/home/iskage/docs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">basename</span> /home/iskage/docs/example.txt</span><br><span class="line">example.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">realpath</span> -e example.txt</span><br><span class="line">/home/iskage/docs/example.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">realpath</span> -m wrong.txt</span><br><span class="line">/home/iskage/docs/wrong.txt</span><br></pre></td></tr></table></figure><blockquote><p><code>realpath</code> 返回绝对路径，缺省参数默认为 <code>-e</code></p></blockquote><table><thead><tr><th><code>realpath</code> 参数</th><th>要求</th></tr></thead><tbody><tr><td><code>-e</code></td><td>检查目录是否存在，不要去文件存在，但检查文件夹存在性</td></tr><tr><td><code>-m</code></td><td>不检查目录是否存在</td></tr></tbody></table><h2 id="2-改变目录和波浪号扩展">2 改变目录和波浪号扩展</h2><p>相关命令 <code>pwd</code> <code>cd</code> <code>~..</code></p><h3 id="2-1-改变目录-pwd-cd">2.1 改变目录 pwd, cd</h3><ul><li><code>pwd</code> 检查当前目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/iskage/docs</span><br></pre></td></tr></table></figure><ul><li><code>cd [dir]</code> 切换目录，进入 <code>[dir]</code> 目录</li></ul><p><code>cd</code> 留空进入当前用户主目录，即 <code>~</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/docs$ <span class="built_in">cd</span></span><br><span class="line">~$</span><br></pre></td></tr></table></figure><p><code>cd -</code> 表示工作目录设置为先前的工作目录，可在两个目录中切换：例如在 A 目录使用 <code>cd -</code> ，然后进入目录 B 随后使用 <code>cd -</code> 返回 A 目录，再次使用返回 B 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~$ <span class="built_in">cd</span> -</span><br><span class="line">/home/iskage</span><br><span class="line"></span><br><span class="line">~$ <span class="built_in">cd</span> docs</span><br><span class="line">~/docs</span><br><span class="line"></span><br><span class="line">~/docs$ <span class="built_in">cd</span> -</span><br><span class="line">/home/iskage</span><br><span class="line">~$ </span><br></pre></td></tr></table></figure><h3 id="2-2-扩展">2.2 ~ 扩展</h3><ul><li>单独的波浪号 <code>~</code> 表示当前用户的主目录，而 <code>~user</code> 表示用户 user 的主目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~user</span><br><span class="line">进入 user 的主目录，一般为 /home/user</span><br></pre></td></tr></table></figure><blockquote><p>追踪 bash 的命令和返回，可以设置 <code>set -x</code> 打开追踪功能；<code>set +x</code> 关闭追踪功能。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"><span class="built_in">cd</span> ~iskage</span><br><span class="line">+ <span class="built_in">cd</span> /home/iskage</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~user</span><br><span class="line">+ <span class="built_in">cd</span> <span class="string">&#x27;~user&#x27;</span></span><br><span class="line">bash: <span class="built_in">cd</span>: ~user: No such file or directory</span><br></pre></td></tr></table></figure><h2 id="3-文件系统的组织方式">3 文件系统的组织方式</h2><h3 id="3-1-文件系统的组织">3.1 文件系统的组织</h3><p>文件系统由 2 部分组成：</p><ul><li>保存文件相关的元信息的索引节点 <code>inode</code>（index node）</li><li>实际存储数据的数据块</li></ul><p>索引节点 <code>inode</code> 包含：拥有者的 UID 和 GID（用户和用户组）；文件长度；类型和权限；访问、修改和状态改变时间；引用次数；数据块编号列表。</p><p>实际存储数据的数据块包含：对于普通文件，数据块保存实际的内容；对于目录文件，数据块保存的是该目录包含的子目录和文件所对应的目录项。</p><blockquote><p>目录项：每个目录包含子目录和文件的目录项，目录项保存了其对应的文件（包括子目录）的名字以及该文件对应的 inode 编号</p></blockquote><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741309097697.png" alt="文件结构：索引节点和数据块" style="zoom:67%;" /><ul><li><code>ls -i</code> 可以产看索引节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -i</span><br><span class="line">793134 docs</span><br></pre></td></tr></table></figure><h3 id="3-2-查看磁盘使用情况-df">3.2 查看磁盘使用情况 df</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> [options] [file]</span><br><span class="line"></span><br><span class="line">-h : 以自然语言展示 1k=1024</span><br><span class="line">-H , --si : 以自然语言展示 1k=1000</span><br><span class="line">-i , --inodes : 查看节点类型</span><br><span class="line">-T , --print-type  : 显示文件系统类型</span><br><span class="line">-t , --<span class="built_in">type</span>=TYPE    : 仅仅显示相应类型的文件系统信息，例如 --<span class="built_in">type</span>=ext4 或 -t ext4</span><br><span class="line"></span><br><span class="line">file : 缺省，则展示当前所在目录属于的文件系统</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br><span class="line"></span><br><span class="line">Filesystem     Type   Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs          tmpfs  168M  1.1M  167M   1% /run</span><br><span class="line">/dev/vda3      ext4    40G  3.8G   34G  11% /</span><br><span class="line">tmpfs          tmpfs  837M     0  837M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs  5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/vda2      vfat   197M  6.1M  191M   4% /boot/efi</span><br><span class="line">tmpfs          tmpfs  168M  4.0K  168M   1% /run/user/0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -iT --si</span><br><span class="line"></span><br><span class="line">Filesystem     Type  Inodes IUsed IFree IUse% Mounted on</span><br><span class="line">tmpfs          tmpfs   215k   729  214k    1% /run</span><br><span class="line">/dev/vda3      ext4    2.7M  100k  2.6M    4% /</span><br><span class="line">tmpfs          tmpfs   215k     2  215k    1% /dev/shm</span><br><span class="line">tmpfs          tmpfs   215k     3  215k    1% /run/lock</span><br><span class="line">/dev/vda2      vfat       0     0     0     - /boot/efi</span><br><span class="line">tmpfs          tmpfs    43k    26   43k    1% /run/user/0</span><br></pre></td></tr></table></figure><blockquote><p><code>vda2</code> 表示位于第 1 个磁盘的第 2 区（abc表示磁盘号，123表示分区）</p></blockquote><h3 id="3-3-查看文件使用的空间情况-du">3.3 查看文件使用的空间情况 du</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> [options] [file]</span><br><span class="line"></span><br><span class="line">-c , --total  : 最后显示加和总使用空间</span><br><span class="line">-s , --summarize : 仅仅显示每个参数的总使用情况</span><br><span class="line">-d ,  --max-depth=N : 递归展示子目录的深度，N=0 表示不递归</span><br><span class="line">-B SIZE : 设置展示的单位为 SIZE，缺省默认为 1k bit</span><br><span class="line">-h : 自然语言展示 1k=1024</span><br><span class="line">--si : 与 -h 相同，但 1k=1000</span><br></pre></td></tr></table></figure><blockquote><p>因为 <code>du -s</code> 表示只展示 file 自己的总使用情况，故等价于 <code>du -d 0</code> 深度为 0</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> --si -d 1 -c ./snap</span><br><span class="line"></span><br><span class="line">17k./snap/lxd</span><br><span class="line">21k./snap</span><br><span class="line">21ktotal</span><br></pre></td></tr></table></figure><h3 id="3-4-查看文件类型-file">3.4 查看文件类型 file</h3><p><code>file</code> 指令会查看文件的根本类型，而不是根据拓展名查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file a.py</span><br><span class="line">a.py: ASCII text</span><br><span class="line"></span><br><span class="line">file -i a.py</span><br><span class="line">a.py: text/plain; charset=us-ascii</span><br></pre></td></tr></table></figure><blockquote><p><code>-i , --mime</code> 输出 MIME 头部。</p></blockquote><h2 id="4-文件名和目录查看">4 文件名和目录查看</h2><h3 id="4-1-touch-修改时间">4.1 touch 修改时间</h3><p><code>touch file</code> 文件存在时改变时间，不存在时创建文件。每个文件的时间包括：</p><ul><li>修改时间 <code>mtime</code> ：修改文件内容时更新</li><li>访问时间 <code>atime</code> ：读文件操作时更新的时间</li><li>状态改变时间 <code>ctime</code> ：文件内容或元信息（如权限/名字/时间等）改变时更新，用户无法改变，而是内核自动更新</li></ul><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> [option] file</span><br><span class="line"></span><br><span class="line">-m   : 仅改变修改时间</span><br><span class="line">-a   : 仅改变访问时间</span><br><span class="line">-t <span class="keyword">time</span>   : 指定时间为 <span class="keyword">time</span> 格式为 [[CC]YY]MMDDhhmm[.ss] </span><br><span class="line">  例如 [[20]25]03070938[.11] 表示2025年3月7日9时38分11秒</span><br><span class="line">-r , --reference=BASE : 使用文件 BASE 的时间</span><br></pre></td></tr></table></figure><h3 id="4-2-文件名格式">4.2 文件名格式</h3><ul><li>Linux 系统的文件名（包括目录等）区分大小写。</li><li>文件名不能命名为 <code>.</code> 和 <code>..</code> ，也不能包含 <code>/</code> 和 <code>NULL</code> 字符（ASCII 码为 0 的字符），除此之外可以包含任何字符。</li><li>可以使用后缀，不过并不强制要求。</li><li>一般规范为：使用字母、数字、 <code>.</code> 、<code>-</code> 、<code>_</code> 组成。且避免使用 <code>-</code> 开头，也不使用空格。</li><li>如果出现歧义，可以使用 <code>&quot;&quot;</code> 或 <code>''</code> 包裹起这些文件名。</li></ul><h3 id="4-3-列目录命令-ls">4.3 列目录命令 ls</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [options] [file]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>ls</code> 缺省</td><td>列出当前目录不包含 <code>.</code> 开头的隐藏文件</td></tr><tr><td><code>ls -a</code></td><td>列出所有目录，包含隐藏目录和 <code>.</code> 和 <code>..</code></td></tr><tr><td><code>ls -A</code></td><td>列出所有目录，包含隐藏目录，但不包含 <code>.</code> 和 <code>..</code></td></tr><tr><td><code>ls -F</code></td><td>添加文件类型指示，例如文件夹 snap 表现为 <code>snap/</code></td></tr><tr><td><code>ls -l</code></td><td>长列表形式展示</td></tr><tr><td><code>ls -d</code> <code>ls --directory</code></td><td>显示当前目录的信息，一般和 <code>-l</code> 联合使用</td></tr><tr><td><code>ls -i</code> <code>ls --inode</code></td><td>显示 inode 编号</td></tr><tr><td><code>ls -R</code> <code>ls -recursive</code></td><td>递归展示目录和子目录内容</td></tr><tr><td><code>ls -r</code> <code>ls --reverse</code></td><td>反向排序展示目录</td></tr><tr><td><code>ls -X</code> <code>ls --sort=extension</code></td><td>按照后缀排序，没有后缀的优先</td></tr><tr><td><code>ls -S</code> <code>ls --sort=size</code></td><td>按照文件大小排序，默认从大到小</td></tr><tr><td><code>ls -t</code> <code>ls --sort=time</code></td><td>按照时间排序，默认从新到旧</td></tr><tr><td><code>ls -U</code> <code>ls --sort=none</code></td><td>不排序</td></tr></tbody></table><p>对于 <code>ls -l</code> 列出的信息，里面分别包含：文件类型、访问模式、引用计数、拥有者用户、用户组、文件大小（<code>-h</code> 以自然语言展示）、修改时间、文件名。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741584509233.png" alt="ls -l 文件信息" style="zoom:67%;" /><ul><li>文件类型</li></ul><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>-</code></td><td>普通文件（例如文本文件、二进制文件等）</td></tr><tr><td><code>d</code></td><td>目录</td></tr><tr><td><code>l</code></td><td>符号链接（软链接）</td></tr><tr><td><code>c</code></td><td>字符设备文件</td></tr><tr><td><code>b</code></td><td>块设备文件</td></tr><tr><td><code>p</code></td><td>命名管道（FIFO）</td></tr><tr><td><code>s</code></td><td>套接字文件</td></tr></tbody></table><ul><li>访问模式：所有者权限（<code>1, 2, 3</code>）、所属组权限（<code>4, 5, 6</code>）、其他用户权限</li></ul><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>r</code> <code>-</code></td><td>第一个字符：读权限，r 表示可读，- 表示不可读</td></tr><tr><td><code>w</code> <code>-</code></td><td>第二个字符：写权限，w 表示可写，- 表示不可写</td></tr><tr><td><code>x</code> <code>-</code></td><td>第三个字符：执行权限，x 表示可执行，- 表示不可执行</td></tr></tbody></table><h3 id="4-4-tree-查看目录树">4.4 tree 查看目录树</h3><p>先在 Ubuntu 上安装 <code>tree</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install tree</span><br></pre></td></tr></table></figure><p>然后可以使用 <code>tree</code> 命令以树的形式递归展示目录结构：</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>tree</code></td><td style="text-align:left">显示当前目录及其子目录的树状结构</td></tr><tr><td style="text-align:left"><code>tree -d</code></td><td style="text-align:left">仅显示目录，不显示文件</td></tr><tr><td style="text-align:left"><code>tree -L n</code></td><td style="text-align:left">限制显示的目录层级深度为 <code>n</code>。例如，<code>tree -L 2</code> 显示两层目录</td></tr><tr><td style="text-align:left"><code>tree -a</code></td><td style="text-align:left">显示所有文件和目录，包括隐藏文件（以 <code>.</code> 开头的文件）</td></tr><tr><td style="text-align:left"><code>tree -f</code></td><td style="text-align:left">显示文件的完整路径</td></tr><tr><td style="text-align:left"><code>tree -p</code></td><td style="text-align:left">显示文件和目录的权限</td></tr><tr><td style="text-align:left"><code>tree -s</code></td><td style="text-align:left">显示文件和目录的大小（以字节为单位）</td></tr><tr><td style="text-align:left"><code>tree -h</code></td><td style="text-align:left">以人类可读的格式显示文件和目录的大小（例如 KB、MB）</td></tr><tr><td style="text-align:left"><code>tree -D</code></td><td style="text-align:left">显示文件和目录的最后修改时间</td></tr><tr><td style="text-align:left"><code>tree -I pattern</code></td><td style="text-align:left">排除符合指定模式的文件。例如，<code>tree -I &quot;*.txt&quot;</code> 排除所有 <code>.txt</code> 文件</td></tr><tr><td style="text-align:left"><code>tree -o filename</code></td><td style="text-align:left">将输出保存到指定文件中。例如，<code>tree -o output.txt</code></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~$ tree</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── a.py</span><br><span class="line">├── file1</span><br><span class="line">├── file2</span><br><span class="line">├── file3</span><br><span class="line">└── snap</span><br><span class="line">    └── lxd</span><br><span class="line">        ├── 22923</span><br><span class="line">        ├── 31333</span><br><span class="line">        ├── common</span><br><span class="line">        └── current -&gt; 31333</span><br></pre></td></tr></table></figure><h2 id="5-文件和目录操作">5 文件和目录操作</h2><h3 id="5-1-创建目录-mkdir">5.1 创建目录 mkdir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-p] directory</span><br></pre></td></tr></table></figure><ul><li>同一目录下不可同名</li><li>缺省 <code>-p</code> <code>--parents</code> 时，父目录不存在时不可以创建子目录</li><li>目录可以理解为文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dir1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dir2/dir3</span><br><span class="line"><span class="comment"># mkdir: cannot create directory ‘dir2/dir3’: No such file or directory</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p dir2/dir3</span><br></pre></td></tr></table></figure><h3 id="5-2-删除目录-rmdir">5.2 删除目录 rmdir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> [-p] directory</span><br></pre></td></tr></table></figure><ul><li>仅允许删除空目录，如果有文件则无法删除</li><li>对于一连串的目录，例如 <code>dir1/dir2/dir3</code> 其中 dir3 为空目录。可以使用 <code>rmdir -p dir1/dir2/dir3</code> 删除。这一步等价于先删除 dir1 然后 dir2 dir3 ，即 <code>rmdir dir1/dir2/dir3 &amp;&amp; rmdir dir1/dir2 &amp;&amp; rmdir dir1</code></li><li>如果希望递归删除节点以下所有内容，可以使用 <code>rm -R</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> dir1</span><br><span class="line"><span class="comment"># rmdir: failed to remove &#x27;dir1&#x27;: Directory not empty</span></span><br><span class="line"><span class="built_in">rmdir</span> -p dir1</span><br><span class="line"><span class="comment"># rmdir: failed to remove &#x27;dir1&#x27;: Directory not empty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line"><span class="built_in">rmdir</span> -p dir1/dir2/dir3</span><br></pre></td></tr></table></figure><h3 id="5-3-复制文件和目录-cp">5.3 复制文件和目录 cp</h3><h4 id="5-3-1-复制和创建新文件">5.3.1 复制和创建新文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [options] SOURCE DESTINATION</span><br></pre></td></tr></table></figure><ul><li>SOURCE：要复制的文件或目录。</li><li>DESTINATION：目标文件或目录。如果 <code>DESTINATION</code> 是一个目录，则会将 <code>SOURCE</code> 复制到该目录中；如果 <code>DESTINATION</code> 是一个文件名，则会将 <code>SOURCE</code> 复制并重命名为 <code>DESTINATION</code>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ./dir1/file file_copy</span><br><span class="line"><span class="comment"># 将 ./dir1/ 下的 file 文件复制一份到当前目录的 file_copy 文件</span></span><br></pre></td></tr></table></figure><p>复制目录需要 <code>-r</code> 递归复制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r ./dir1/ dir1_copy</span><br></pre></td></tr></table></figure><h4 id="5-3-2-备份和覆盖">5.3.2 备份和覆盖</h4><p>如果要复制的位置存在相同的文件名，权限允许（即可以写 <code>w</code>）时缺省会直接覆盖。权限不允许（没有写权限）时会报 <code>Permission denied</code> 错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -f : 强制覆盖</span><br><span class="line"><span class="built_in">cp</span> -i : 覆盖前询问用户</span><br><span class="line"><span class="built_in">cp</span> -b : 覆盖前保留备份，以原文件名加 ~ </span><br></pre></td></tr></table></figure><h4 id="5-3-3-递归复制目录">5.3.3 递归复制目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r : 递归复制目录和子目录</span><br><span class="line"><span class="built_in">cp</span> -a : 递归复制目录和子目录，保留原文件的属性</span><br></pre></td></tr></table></figure><blockquote><p>如果目标目录存在，则将复制后的目录直接放在目标目录下</p><p>如果目标目录不存在，则创建新目录，将被复制的目录第一个父目录后的所有子目录放在目标目录下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">└── tmp1</span><br></pre></td></tr></table></figure><ul><li>存在目标目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r dir1 ./tmp1</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">└── tmp1</span><br><span class="line">    └── dir1</span><br><span class="line">        └── dir2</span><br><span class="line">            └── dir3</span><br></pre></td></tr></table></figure><ul><li>但如果不存在目标目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r dir1 ./tmp2</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">├── tmp1</span><br><span class="line">│   └── dir1</span><br><span class="line">│       └── dir2</span><br><span class="line">│           └── dir3</span><br><span class="line">└── tmp2</span><br><span class="line">    └── dir2</span><br><span class="line">        └── dir3</span><br></pre></td></tr></table></figure><h3 id="5-4-移动或重命名-mv">5.4 移动或重命名 mv</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式1：移动并重命名</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] SOURCE DEST</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式2：移动到目录（目录必须存在）</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] SOURCE... DIRECTORY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式3：指定目标目录（与格式2等价）</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] -t DIRECTORY SOURCE...</span><br></pre></td></tr></table></figure><blockquote><ul><li>若 <code>DEST</code> 以 <code>/</code> 结尾，强制使用格式2（目录必须存在，否则报错）</li><li>若目标位置存在同名文件/目录，默认直接覆盖</li></ul></blockquote><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-t</code> <code>--target-directory=...</code></td><td style="text-align:left">指定目标目录</td></tr><tr><td style="text-align:left"><code>-i</code> <code>--interactive</code></td><td style="text-align:left">覆盖前询问确认</td></tr><tr><td style="text-align:left"><code>-f</code> <code>--force</code></td><td style="text-align:left">强制覆盖（不询问）</td></tr><tr><td style="text-align:left"><code>-n</code> <code>--no-clobber</code></td><td style="text-align:left">禁止覆盖已有文件</td></tr><tr><td style="text-align:left"><code>-b</code></td><td style="text-align:left">覆盖前备份（默认添加 <code>~</code> 后缀）</td></tr><tr><td style="text-align:left"><code>-S SUFFIX</code> <code>--suffix=SUFFIX</code></td><td style="text-align:left">自定义备份文件后缀（需配合 <code>-b</code>）</td></tr><tr><td style="text-align:left"><code>-u</code> <code>--update</code></td><td style="text-align:left">仅当目标文件不存在或比源文件旧时移动</td></tr><tr><td style="text-align:left"><code>-v</code> <code>--verbose</code></td><td style="text-align:left">显示详细操作过程</td></tr></tbody></table><ol><li>重命名文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> old_file.txt new_file.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>移动文件到目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> file.txt /target/dir/</span><br></pre></td></tr></table></figure><ol start="3"><li>覆盖前备份</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> -b file.txt /backup/  <span class="comment"># 生成 file.txt~</span></span><br><span class="line"><span class="built_in">mv</span> -b -S .bak file.txt  <span class="comment"># 自定义备份后缀 生成 file.txt.bak</span></span><br></pre></td></tr></table></figure><ol start="4"><li>批量移动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> *.jpg /photos/ -v  <span class="comment"># -v 显示详细操作</span></span><br></pre></td></tr></table></figure><h3 id="5-5-删除-rm">5.5 删除 rm</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><ul><li><p>直接删除文件（不询问）</p></li><li><p>目录删除，需配合 <code>-R/-r</code> 选项删除非空目录；使用 <code>-d</code> 选项可删除空目录</p></li></ul><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-i</code></td><td style="text-align:left">每次删除前询问确认</td></tr><tr><td style="text-align:left"><code>-f</code></td><td style="text-align:left">强制删除（不询问，忽略错误）</td></tr><tr><td style="text-align:left"><code>-R</code>  <code>-r</code>  <code>--recursive</code></td><td style="text-align:left">递归删除目录及其子内容</td></tr><tr><td style="text-align:left"><code>-d</code>  <code>--dir</code></td><td style="text-align:left">删除空目录</td></tr><tr><td style="text-align:left"><code>-v</code>  <code>--verbose</code></td><td style="text-align:left">显示详细操作过程</td></tr></tbody></table><ol><li>删除文件（强制）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f file.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>递归删除目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r directory/</span><br></pre></td></tr></table></figure><ol start="3"><li>删除多个文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -i *.<span class="built_in">log</span>  <span class="comment"># -i 每次删除都询问是否进行</span></span><br></pre></td></tr></table></figure><h2 id="6-Linux-目录结构">6 Linux 目录结构</h2><blockquote><p>由 <strong>DeepSeek</strong> 整理</p></blockquote><h3 id="6-1-核心目录">6.1 核心目录</h3><h4 id="6-1-1-根目录（-）">6.1.1 根目录（/）</h4><p>整个文件系统树的根，包含了许多子目录</p><h4 id="6-1-2-基础功能目录">6.1.2 基础功能目录</h4><table><thead><tr><th>目录</th><th>功能说明</th><th>重要特性</th></tr></thead><tbody><tr><td><code>/bin</code></td><td>基础执行程序</td><td>包含<code>ls</code>、<code>cp</code>等基础命令，单用户模式可用</td></tr><tr><td><code>/sbin</code></td><td>系统管理程序</td><td><code>fdisk</code>、<code>ifconfig</code>等管理员专用命令</td></tr><tr><td><code>/lib</code></td><td>共享库文件</td><td>为 <code>/bin</code> 和 <code>/sbin</code> 提供运行依赖</td></tr><tr><td><code>/dev</code></td><td>设备文件</td><td>由<code>udev</code>管理，如<code>/dev/sda</code>（磁盘设备）</td></tr></tbody></table><h4 id="6-1-3-系统配置目录">6.1.3 系统配置目录</h4><table><thead><tr><th>目录</th><th>核心内容</th><th>典型文件</th></tr></thead><tbody><tr><td><code>/etc</code></td><td>系统级配置文件</td><td><code>passwd</code>、<code>fstab</code>、<code>ssh/</code></td></tr><tr><td><code>/boot</code></td><td>启动相关文件</td><td><code>grub/</code>、<code>vmlinuz</code>（内核文件）</td></tr></tbody></table><h4 id="6-1-4-用户相关目录">6.1.4 用户相关目录</h4><table><thead><tr><th>目录</th><th>功能说明</th><th>用户权限</th></tr></thead><tbody><tr><td><code>/home</code></td><td>用户主目录</td><td><code>~/</code> 指向用户专属目录</td></tr><tr><td><code>/root</code></td><td>管理员主目录</td><td>独立于普通用户的根 /home 结构</td></tr></tbody></table><h4 id="6-1-5-存储相关目录">6.1.5 存储相关目录</h4><table><thead><tr><th>目录</th><th>挂载类型</th><th>典型用途</th></tr></thead><tbody><tr><td><code>/media</code></td><td>可移动存储</td><td>U盘、光盘自动挂载点</td></tr><tr><td><code>/mnt</code></td><td>临时挂载点</td><td>手动挂载硬盘/NFS</td></tr></tbody></table><h3 id="6-2-特殊用途目录">6.2 特殊用途目录</h3><h4 id="6-2-1-运行时数据">6.2.1 运行时数据</h4><table><thead><tr><th>目录</th><th>数据特性</th><th>典型内容</th></tr></thead><tbody><tr><td><code>/var</code></td><td>动态可变数据</td><td><code>log/</code>、<code>mail/</code>、<code>spool/</code></td></tr><tr><td><code>/run</code></td><td>运行时信息</td><td>PID文件、<code>/var/run</code>符号链接</td></tr></tbody></table><h4 id="6-2-2-临时空间">6.2.2 临时空间</h4><table><thead><tr><th>目录</th><th>生命周期</th><th>权限控制</th></tr></thead><tbody><tr><td><code>/tmp</code></td><td>临时文件</td><td>用户可创建，仅创建者可删除</td></tr><tr><td><code>/lost+found</code></td><td>文件恢复</td><td><code>fsck</code>修复后的残留文件</td></tr></tbody></table><h4 id="6-2-3-内核与硬件">6.2.3 内核与硬件</h4><table><thead><tr><th>目录</th><th>信息类型</th><th>访问方式</th></tr></thead><tbody><tr><td><code>/proc</code></td><td>进程与内核数据</td><td>虚拟文件系统，实时读取（如<code>cpuinfo</code>）</td></tr><tr><td><code>/sys</code></td><td>硬件层级信息</td><td>设备驱动、电源管理等</td></tr></tbody></table><h3 id="6-3-资源存储目录">6.3. 资源存储目录</h3><h4 id="6-3-1-静态资源库">6.3.1 静态资源库</h4><table><thead><tr><th>目录</th><th>资源类型</th><th>典型结构</th></tr></thead><tbody><tr><td><code>/usr</code></td><td>只读共享资源</td><td><code>bin/</code>、<code>lib/</code>、<code>share/</code>（文档）</td></tr><tr><td><code>/opt</code></td><td>第三方软件</td><td>独立软件包（如Oracle）</td></tr></tbody></table><h4 id="6-3-2-服务数据">6.3.2 服务数据</h4><table><thead><tr><th>目录</th><th>服务类型</th><th>典型应用</th></tr></thead><tbody><tr><td><code>/srv</code></td><td>本地服务数据</td><td><code>www/</code>（网站数据）、<code>ftp/</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组 Array</title>
      <link href="/posts/340249a9.html"/>
      <url>/posts/340249a9.html</url>
      
        <content type="html"><![CDATA[<h1>基于数组的序列：Python 动态数组原理与插入排序</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本文介绍了低层次数组的原理，并自定义实现了 Python 的一个动态数组。并详细分析了底层存储原理、摊销时间。分析了一些基于数组的案例，例如插入排序算法。同时指出了组成字符串和多维数组创建的常见误用。</p><h2 id="1-Python-序列类型">1 Python 序列类型</h2><p>Python 有各种序列类型，例如：内置的列表 <code>list</code> 、元组 <code>tuple</code> 和字符串 <code>str</code> 类</p><ul><li>这些序列类型支持用下标访间序列元素，如 <code>A[i]</code></li><li>这些类型均使用<strong>数组</strong>来表示序列</li><li>一个数组即为一组相关变量，它们一个接一个地存在内存里的一块<strong>连续区域</strong>内</li></ul><p>而 <code>数组 Array</code> 抽象数据类型为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ADT Array&#123;</span><br><span class="line">数据对象: A = &#123;A1, A2, ..., An｝</span><br><span class="line">基本操作: </span><br><span class="line">A.init(S): 使用序列 S 初始化数组 A</span><br><span class="line"><span class="built_in">len</span>(A): 返回数组 A 的长度</span><br><span class="line">A.is_empty(): 检查数组 A 是否为空，如为空则返回 <span class="literal">True</span></span><br><span class="line">        A.get_item(n): 返回数组 A 的第 n 个元素</span><br><span class="line">        A.locate(e): 返回数组 A 中第一个等于 e 的元素的位置</span><br><span class="line">        A.insert(n, e): 在数组 A 的第 n 个元素前插入元素 e</span><br><span class="line">        A.delete(n): 删除数组 A 的第 n 个元素</span><br><span class="line">        A.clear(): 清空数组 A</span><br><span class="line">&#125; ADT Array</span><br></pre></td></tr></table></figure><h2 id="2-低层次数组">2 低层次数组</h2><p>从计算机底层角度理解数组的存储方式：数组是一些变量一个接一个地存在内存里的一块<strong>连续区域</strong>内。例如：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741166755512.png" style="zoom:67%;" /><p>对于这种连续的存储方式，索引变得十分迅速，例如上例：已知 <code>'S'</code> 的地址为 <code>2146</code> 而它位于位置 <code>index = 0</code> 那么索引 <code>'L'</code> 只要寻找地址 <code>start + cellsize * index</code> 即 <code>2146 + 2 * 4 = 2154</code> 即可找到 <code>'L'</code> 的地址。</p><p>从底层上理解数组，我们又可以分为：紧凑数组和引用数组</p><h3 id="2-1-紧凑数组">2.1 紧凑数组</h3><p>一个存储基本元素（如字符）的数组，被称为紧凑数组。例如上面的例子存储的 <code>SAMPLE</code> 就是紧凑数组。</p><p>除了 Python 默认的紧凑数组，我们也可以利用 <code>array</code> 模块自定义紧凑数组。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">x = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>其中 <code>'i'</code> 参数代表以整型类型存储，这个会定义分配的空间，一般整型分配 <code>2 or 4</code> 个字节。其他类型例：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741167318874.png" alt=""></p><p>例如刚刚的例子 <code>[1, 2, 3, 4]</code> 以 <code>'i'</code> 即有符号整型存储，分配空间为一个元素 4 字节，可以使用 Python 的 <code>id()</code> 函数检查一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">x = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x[<span class="number">1</span>]) - <span class="built_in">id</span>(x[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x[<span class="number">2</span>]) - <span class="built_in">id</span>(x[<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="comment"># 32</span></span><br></pre></td></tr></table></figure><p>这里的 <code>32</code> 表示 32 个比特 <code>bit</code> ，而 <code>8 bit = 1 byte</code> 故二者之间确实相隔 4 字节，而且两两相隔 4 字节，说明是紧凑的。</p><blockquote><p>对于 <code>array</code> 模块，我们只能定义它提供的数据类型的紧凑数组，即 <code>i, f, d</code> （整型、浮点型等），他们的内存大小已经确定。如果想完全自定义一个紧凑数组，同时还有满足底层数组的要求（动态数组），可以采用 <code>ctypes</code> 模块实现，见 [3.3 节：实现动态数组](###3.3 实现动态数组)。</p></blockquote><h3 id="2-2-引用数组">2.2 引用数组</h3><p>一个存储对象的引用的数组，被称为引用数组。例如：对于下面这个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;Rene&#x27;</span>, <span class="string">&#x27;Joseph&#x27;</span>, <span class="string">&#x27;Janet&#x27;</span>, <span class="string">&#x27;Jonas&#x27;</span>, <span class="string">&#x27;Helen&#x27;</span>, <span class="string">&#x27;Virginia&#x27;</span>]</span><br></pre></td></tr></table></figure><p>其存储方式如图，每个数组元素存储的是字符串数据的引用（地址）。不同于紧凑数组，存储不同类型的数据要分配的空间是不同的，而引用数组避免了这个困难。因为不同地址的大小是固定的，所以直接存储地址既能满足快速索引，又可以避免不同数据带来的分配空间难题。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741167621703.png" alt=""></p><p>而这也带了列表的某些特性，例如用下面的方法创建的列表，实则存储了各个数字的地址，而数字本身是不可变的常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p>此时如果有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temp = [<span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><p>那么，<code>temp</code> 的这三个元素与 <code>primes</code> 的对应元素是相同的，因为他们都是存储了不可变常数 <code>7, 11, 13</code> 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line">temp = [<span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="built_in">id</span>(<span class="number">7</span>) == <span class="built_in">id</span>(primes[<span class="number">3</span>]) == <span class="built_in">id</span>(temp[<span class="number">0</span>])</span><br><span class="line">)</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741168198295.png" style="zoom:50%;" /><h2 id="3-动态数组和摊销">3 动态数组和摊销</h2><p>由之前的分析，我们发现：创建低层次数组时，必须明确声明数组的大小，以便系统为其存储分配连续的内存。</p><h3 id="3-1-动态数组">3.1 动态数组</h3><p>不过 Python 提供了一个算法技巧，即<strong>动态数组</strong>。在 Python 中，创建一个列表，分配给这个列表的数组空间一般不与列表相同，而是更大。例如 <code>[1, 2, 3]</code> 列表的数组可能可以存储三个以上的元素。我们可以通过以下的代码验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    size = sys.getsizeof(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数组大小: &#123;&#125;, 数组内存分配: &#123;&#125; Byte (字节)&quot;</span>.<span class="built_in">format</span>(length, size))</span><br><span class="line">    data.append(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741168916651.png" style="zoom:50%;" /><p>注意到，当数组为空时，仍然分配了 56 字节，对于 64 位 (bit) 操作系统，这一般意味着预留了 7 个元素的空间。</p><p>除此之外，而且当数组即将满时，Python 会自动创建一个更大的数组，并将原来的元素完全拷贝进新的数组。正如上图所示，当不断增加元素时，数组内存空间也在不断扩大。</p><h3 id="3-2-摊销">3.2 摊销</h3><p>对于不断扩大数组空间有两种策略：</p><ul><li><strong>固定增量策略</strong>：每次数组大小增大一个常数</li><li><strong>翻倍增量策略</strong>：每次数组大小翻倍</li></ul><p>首先，我们给出结论，实际 Python 采用的是第二种方式——翻倍增量策略，下面证明这样的策略摊销时间更短。</p><p>我们定义<strong>摊销时间</strong>为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{T(n)}{n} \notag</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 表示数组长度，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 表示进行增量的总运行时间。</p><h4 id="3-2-1-固定增量策略">3.2.1 固定增量策略</h4><p>假设每次在数组填满后，扩展 c 个空间。即每次增大的数量都是 c 的倍数，初始化了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mi>n</mi><mi>c</mi></mfrac></mrow><annotation encoding="application/x-tex">k = \frac{n}{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 次数组（如果设从长度为 1 不断加 c 增加到 n 需要的次数为 k，那么 k 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>⋅</mo><mi>c</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">k\cdot c = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>）。那么扩展到 n 这个长度需要操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mi>c</mi><mo>+</mo><mn>2</mn><mi>c</mi><mo>+</mo><mn>3</mn><mi>c</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>k</mi><mi>c</mi><mo>=</mo><mi>n</mi><mo>+</mo><mi>c</mi><mi>k</mi><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n + c + 2c + 3c + \cdots + kc = n + ck(k+1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/2</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo separator="true">,</mo><mn>2</mn><mi>c</mi><mo separator="true">,</mo><mn>3</mn><mi>c</mi><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">c, 2c, 3c, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 代表每次需要初始化新增数组的长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表复制次数。而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">k \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ，故最后的总时间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) \sim O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。那么摊销时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><h4 id="3-2-2-翻倍增量策略">3.2.2 翻倍增量策略</h4><p>假设每次在数组填满后，翻倍自身的大小，初始化了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">k = \log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span> 次数组（如果设从长度为 1 不断乘以 2 翻倍到 n 需要的次数为 k ，那么 k 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2^k = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>）。那么扩展到 n 这个长度需要操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mi>k</mi></msup><mo>=</mo><mi>n</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>3</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1 + 2 + 2^2 + 2^3 + \cdots + 2^k = n + 2^{k+1} - 1 = 3n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">1, 2, 2^2, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 代表每次需要初始化新增数组的长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表复制次数。故最后的总时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>3</mn><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(3n-1) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，于是摊销时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><ul><li>比较二者，翻倍增量策略更优，摊销时间复制度仅为 <code>O(n)</code></li></ul><p>很明显，从摊销时间来看，翻倍增量策略更优。直观地理解：摊销时间代表的是平均时间，而相比每次增加 c ，通过翻倍来达到长度 n 会更快。相当于通过不计空间成本的方式达到长度 n ，所以在平均来看，翻倍更优。</p><h3 id="3-3-实现动态数组">3.3 实现动态数组</h3><p>当知道了 Python 底层如何构建数组后，我们可以使用 Python 的 <code>ctypes</code> 模块来自定义动态数组。我们希望它可以满足：</p><ul><li>初始化成立；</li><li>紧凑的，可以快速索引；</li><li>可以添加元素（添加元素的方法要满足动态数组）；</li><li>针对添加元素，需要判断数组大小是否足够。如果不够，采用翻倍增量策略进行数组扩展；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义实现动态数组，_ 开头表示非公有方法，不建议外部误调用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空数组&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._n = <span class="number">0</span>  <span class="comment"># 数组实际元素个数</span></span><br><span class="line">        <span class="variable language_">self</span>._capacity = <span class="number">1</span>  <span class="comment"># 默认数组空间大小</span></span><br><span class="line">        <span class="variable language_">self</span>._A = <span class="variable language_">self</span>._make_array(<span class="variable language_">self</span>._capacity)  <span class="comment"># 创建大小为 _capacity 的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_array</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建大小为 c 的数组&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (c * ctypes.py_object)()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回数组元素个数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;索引数组第 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= k &lt; <span class="variable language_">self</span>._n:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Invalid index&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._A[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;数组末尾添加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._n == <span class="variable language_">self</span>._capacity:  <span class="comment"># 判断数组空间</span></span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="variable language_">self</span>._capacity)  <span class="comment"># 翻倍增量策略</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A[<span class="variable language_">self</span>._n] = obj  <span class="comment"># 更新数组尾部元素</span></span><br><span class="line">        <span class="variable language_">self</span>._n += <span class="number">1</span>  <span class="comment"># 更新实际元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;扩展数组大小&quot;&quot;&quot;</span></span><br><span class="line">        B = <span class="variable language_">self</span>._make_array(c)  <span class="comment"># 创建大小为 c 的新数组</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n):</span><br><span class="line">            <span class="comment"># 拷贝原来数组元素</span></span><br><span class="line">            B[k] = <span class="variable language_">self</span>._A[k]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A = B  <span class="comment"># 更新数组对象</span></span><br><span class="line">        <span class="variable language_">self</span>._capacity = c  <span class="comment"># 更新存储空间大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;字符串重载，以字符串得到方式展示数组内容&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + <span class="string">&quot;, &quot;</span>.join(<span class="built_in">str</span>(<span class="variable language_">self</span>._A[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n)) + <span class="string">&quot;]&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_memory_size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回数组的内存分配大小（字节）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._capacity * ctypes.sizeof(ctypes.py_object)</span><br></pre></td></tr></table></figure><p>通过下面的方式检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array = DynamicArray()</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(array)</span><br><span class="line">    size = array.get_memory_size()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数组大小: &#123;&#125;, 数组内存分配: &#123;&#125; Byte (字节)&quot;</span>.<span class="built_in">format</span>(length, size))</span><br><span class="line">    array.append(k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(array) <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741175393359.png" alt="自定义动态数组的内存变化"></p><p>从结果可知：每当数组实际元素达到内存分配的个数时，内存分配就会翻倍（即当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>3</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">length = 1, 2, 2^2, 2^3, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 时内存就会乘以 2），这就是手动实现动态数组，采用翻倍增量策略的例子。</p><h2 id="4-Python-列表和元组类的效率">4 Python 列表和元组类的效率</h2><h3 id="4-1-不改变数组内容的操作">4.1 不改变数组内容的操作</h3><p>对于 Python 的列表和元组这两个序列类，<strong>不改变其内容的操作</strong>往往都是常量级别的时间复杂度 <code>O(c)</code>。例如：索引（因为是连续的内存空间，只需知道 index 计算即可得到对应的地址）、长度（因为在基类里保存了 <code>__len__</code> 方法，可以直接调出）等。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741175945153.png" alt="不改变内容的操作"></p><h3 id="4-2-改变数组内容的操作">4.2 改变数组内容的操作</h3><h4 id="4-2-1-数组元素的插入-O-n">4.2.1 数组元素的插入 <code>O(n)</code></h4><p>将对象 <code>o</code> 插入到数组 <code>A</code> 的第 i 个元素前时（<code>insert(o, i)</code>）需要将后 n - i 个元素后移才能插入。最坏的情况就是插入到第 0 个位置，这样需要后移 n 个元素，即复杂度为 <code>O(n)</code> 。</p><ul><li>代码实现插入方法 <code>insert</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, obj, position</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在第 position 位置插入 obj&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 解决索引问题</span></span><br><span class="line">        <span class="keyword">while</span> position &lt; <span class="number">0</span>:</span><br><span class="line">            position += <span class="variable language_">self</span>._n</span><br><span class="line">        position = position % <span class="variable language_">self</span>._n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._n == <span class="variable language_">self</span>._capacity:</span><br><span class="line">            <span class="comment"># 空间不足</span></span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="variable language_">self</span>._capacity)  <span class="comment"># 扩展</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n, position, -<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 后 n - position 向后移动一位</span></span><br><span class="line">            <span class="variable language_">self</span>._A[j] = <span class="variable language_">self</span>._A[j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A[position] = obj  <span class="comment"># 更新第 position 位的元素</span></span><br><span class="line">        <span class="variable language_">self</span>._n += <span class="number">1</span>  <span class="comment"># 更新元素个数</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-数组元素的删除-O-n">4.2.2 数组元素的删除 <code>O(n)</code></h4><p>与插入元素相反，删除元素需要索引到对应元素，删去后需要将后面的元素向前移动一位。最坏的情况就是删除第一个元素，需要移动 n 个元素，复杂度为 <code>O(n)</code> 。</p><ul><li>代码实现删除方法 <code>remove</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除值 obj (不考虑重复)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n):</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._A[k] == obj:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="variable language_">self</span>._n - <span class="number">1</span>):</span><br><span class="line">                    <span class="comment"># 前移</span></span><br><span class="line">                    <span class="variable language_">self</span>._A[j] = <span class="variable language_">self</span>._A[j + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>._A[<span class="variable language_">self</span>._n - <span class="number">1</span>] = <span class="literal">None</span>  <span class="comment"># help garbage collection</span></span><br><span class="line">            <span class="variable language_">self</span>._n -= <span class="number">1</span>  <span class="comment"># 更新个数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Value not found&#x27;</span>)  <span class="comment"># 无匹配</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上，Python 在删除元素后，也会动态调整空间大小，为简单期间，暂不手动实现。</p></blockquote><h4 id="4-2-3-改变数组内容的操作">4.2.3 改变数组内容的操作</h4><p>针对这些会改变数组内容的操作，往往需要至少 <code>O(n)</code> 复杂度才能实现：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741178215624.png" alt="改变内容的操作"></p><blockquote><p>特别的，因为在末尾增加元素、插入元素、删除元素、在末尾删除元素、拼接等操作会带来存储空间的变化，所以可能需要扩展或缩小内存空间。故要考虑摊销的时间复杂度，这里采用的是翻倍增量策略的摊销（平均时间）为 <code>O(1)</code> 。</p></blockquote><blockquote><p>需要注意，摊销的 <code>O(1)</code> 代表的是平均时间，与一般的时间复杂度定义不同，一般时间复杂度考虑的是最坏情况。如果考虑最坏情况，则为 <code>O(n)</code> ，例如 <code>append</code> 最坏的情况需要 n 次，因为扩展空间后需要复制原来数组的 n 个元素。</p></blockquote><h2 id="5-Python-字符串类的效率">5 Python 字符串类的效率</h2><p>字符串的很多方面与列表和元组相同，这里主要介绍一个常见的【误用】。</p><h3 id="5-1-组成字符串的误用">5.1 组成字符串的误用</h3><p><strong>组成字符串</strong></p><p>假设有一个很长的字符串对象 <code>document</code> ，我们的目标是构造一个新的字符串 <code>letter</code> ，该字符串仅包含 <code>document</code> 的所有字母。常见的误用为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是个错误的使用</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalnum():</span><br><span class="line">        <span class="comment"># 使用重载后的 + 进行组合</span></span><br><span class="line">        letter += char</span><br></pre></td></tr></table></figure><p>如果这样使用，每一次 <code>letter = letter + char</code> 都会创建一个新的对象 <code>letter + char</code> 并把它赋值给 <code>letter</code> 。假设 <code>letter</code> 最后长为 n ，那么需要进行近似 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 + 2 + \cdots + n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 次操作，复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><h3 id="5-2-正确使用">5.2 正确使用</h3><p>为了解决时间复杂度，我们可以用空间换时间，即不直接对 <code>letter</code> 操作，而是用一个临时的表 <code>tmp</code> 存储字符，然后在组成新的字符串 <code>letter</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tmp = []  <span class="comment"># 临时表</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        <span class="comment"># append 操作平均为 O(1)</span></span><br><span class="line">        tmp.append(char)</span><br><span class="line"><span class="comment"># 最后再组成字符串</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span>.join(tmp)</span><br></pre></td></tr></table></figure><ul><li>我们可以验证一下二者的速度：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为验证，设置一个足够长的字符串</span></span><br><span class="line">document = <span class="string">&quot;hello world, welcome to Python :) Having a nice day! ....&quot;</span> * <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 误用</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalnum():</span><br><span class="line">        <span class="comment"># 使用重载后的 + 进行组合</span></span><br><span class="line">        letter += char</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="comment"># print(letter)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;直接组成消耗的时间: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line">tmp = []  <span class="comment"># 临时表</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        <span class="comment"># append 操作平均为 O(1)</span></span><br><span class="line">        tmp.append(char)</span><br><span class="line"><span class="comment"># 最后再组成字符串</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span>.join(tmp)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="comment"># print(letter)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用临时表消耗的时间: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">直接组成消耗的时间: 3.8247530460357666</span></span><br><span class="line"><span class="string">使用临时表消耗的时间: 0.07381105422973633</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-插入排序算法">6 插入排序算法</h2><p>从第 2 个元素开始，比较它和之前的元素大小，如果它比前一个元素小，则接着往前比较，直到前一个元素小于它，则插入到这个元素的后面。（从小到大）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741256265390.png" alt="插入排序示意图"></p><h3 id="6-1-代码实现">6.1 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从小到大排序数组</span></span><br><span class="line"><span class="string">    :param arr: 数组</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="comment"># 从第 2 个元素开始</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        j = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> current &lt; arr[j - <span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 当前一个元素不是第 0 个元素且比 current 大时</span></span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>]  <span class="comment"># 后移</span></span><br><span class="line">            j -= <span class="number">1</span>  <span class="comment"># 继续向前找</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入</span></span><br><span class="line">        arr[j] = current</span><br></pre></td></tr></table></figure><h3 id="6-2-算法分析">6.2 算法分析</h3><p>下面考虑的为从小到大排序</p><ul><li>最好的情况：已经是从小到大排序</li></ul><p>此时只需要遍历第 2 个元素到最后一个元素即可，因为每次比较都发现比前一个元素大，没有插入操作。故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><ul><li>最坏的情况：数组为从大到小排序</li></ul><p>此时对第 i 个元素而言，都要插入到最前，前面的 i - 1 个元素均要后移一位，需要操作 <code>i-1 + 1</code> （后移 i - 1 次，插入 1 次）。故对于从第 2 个元素开始遍历，需要次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>2</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum\limits_{i=2}^n\ (i-1+1)\sim n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">2</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> ，故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><p>所以，综合以上分析，插入排序的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><blockquote><p>【注意】插入排序最坏情况才是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，而对于一些运气较好时，插入排序非常高效，可以对比选择排序。</p></blockquote><h3 id="6-3-与选择排序对比">6.3 与选择排序对比</h3><p>每次从未排序的部分中选择最小的元素，将其放到前面已排序部分的末尾。（从小到大）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/selection_sort.jpeg" alt="选择排序示意图"></p><ul><li>选择排序的代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    选择排序：从小到大排序数组</span></span><br><span class="line"><span class="string">    :param arr: 数组</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="comment"># 从起始开始遍历</span></span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j  <span class="comment"># 找到后面最小的元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将后面最小的元素放到前面子列的末尾</span></span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]</span><br></pre></td></tr></table></figure><ul><li>选择排序的算法分析</li></ul><p>无论最好还是最坏（即无轮是从小到大还是从大到小排序的原数组），对于第 i + 1 个位置，选择排序都需要找到 i + 1 到 n 的最小元素，然后插入到第 i 个位置后。即使是从小到大排序好的原数组，都需要遍历以确定是否是最小元素。故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n\ (n - i) \sim n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 即一定为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><p>所以，【选择排序不如插入排序高效】。也可以通过下面的例子验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">start = time.time()</span><br><span class="line">insertion_sort(x)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;insertion sort cost &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">start = time.time()</span><br><span class="line">selection_sort(x)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;selection sort cost &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">insertion sort cost 0.0012428760528564453s</span></span><br><span class="line"><span class="string">selection sort cost 2.98787522315979s</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>当遇见最好情况时，插入排序大约消耗了 0.0012 秒，而选择排序则消耗了 2.99 秒，是前者的 2492 倍！</p><h2 id="7-多维数组的误用">7 多维数组的误用</h2><h3 id="7-1-误用">7.1 误用</h3><p>以创建二维数组（矩阵）为例，如果采用如下方式构建数组：【误用】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">0</span>] * n] * m</span><br></pre></td></tr></table></figure><p>可以初始化一个列表，例如 <code>m = 3, n = 6</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">3</span></span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">data = [[<span class="number">0</span>] * n] * m</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure><p>但是此时 data 的第一维度的索引指向的是同一个列表对象，如图：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741262575523.png" alt="误用：指向同一列表对象" style="zoom:50%;" /><p>此时，如果改变 <code>data[0][0]</code> 的值，对应的 <code>data[1][0]</code> 和 <code>data[2][0]</code> 的值会一起变化（因为他们指向同一个列表对象，需要注意，被指向的列表对象 <code>[0, 0, 0, 0, 0, 0]</code> 这 6 个元素存储的是常数 <code>0</code> 的地址）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure><h3 id="7-2-正确使用">7.2 正确使用</h3><p>正确的创建方式：使用 Python 的列表推导式实例化新的列表对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741262889863.png" alt="正确使用"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">3</span></span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">data = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计软件 R 语言学习笔记 (3) R 语言初步：基本运算、常见操作和控制流</title>
      <link href="/posts/8bcfe1ac.html"/>
      <url>/posts/8bcfe1ac.html</url>
      
        <content type="html"><![CDATA[<h1>R 语言初步 (2) 基本运算、常见操作和控制流</h1><p>本章介绍了 R 语言中常见的运算和操作（例如索引），以及针对不同数据类型的不同操作函数（例如 apply 函数）。同时介绍了 R 语言控制流（if-else 条件执行、for while repeat 循环结构）的实现。</p><h2 id="1-基本运算和操作">1 基本运算和操作</h2><h3 id="1-1-向量的下标运算">1.1 向量的下标运算</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">age<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="operator">-</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li><code>a[i]</code> 表示取第 <code>i</code> 个元素</li><li><code>a[c(1, 2, 3)]</code> 表示取第 <code>1 , 2, 3</code> 个元素</li><li><code>a[-1]</code> 表示输出 <code>a</code> 删去第 <code>1</code> 个元素的结果</li><li><code>a[-c(1, 2, 3)]</code> 表示输出 <code>a</code> 删去第 <code>1, 2, 3</code> 个元素的结果</li><li>特别地，索引支持逻辑运算</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1.1</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">,</span> <span class="number">4.4</span><span class="punctuation">,</span> <span class="number">5.5</span><span class="punctuation">,</span> <span class="number">6.6</span><span class="punctuation">,</span> <span class="number">7.7</span><span class="punctuation">,</span> <span class="number">8.8</span><span class="punctuation">,</span> <span class="number">9.9</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> age <span class="operator">&gt;</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> weight<span class="punctuation">[</span>age <span class="operator">&gt;</span> <span class="number">4</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">5.5</span> <span class="number">6.6</span> <span class="number">7.7</span> <span class="number">8.8</span> <span class="number">9.9</span></span><br></pre></td></tr></table></figure><p>可以配合逻辑运算符</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">NA</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">,</span> <span class="number">4.4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.na</span><span class="punctuation">(</span>age<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.na</span><span class="punctuation">(</span>weight<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"><span class="operator">&gt;</span> index <span class="operator">&lt;-</span> <span class="operator">!</span><span class="built_in">is.na</span><span class="punctuation">(</span>age<span class="punctuation">)</span> <span class="operator">&amp;</span> <span class="operator">!</span><span class="built_in">is.na</span><span class="punctuation">(</span>weight<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> age<span class="punctuation">[</span>index<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> weight<span class="punctuation">[</span>index<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2.2</span> <span class="number">4.4</span></span><br></pre></td></tr></table></figure><ul><li><code>is.na()</code> 检查每个元素是否为空，返回一个向量</li><li><code>!</code> 表示非运算；<code>&amp;</code> 表示与运算</li></ul><h3 id="1-2-矩阵的下标运算">1.2 矩阵的下标运算</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">9</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">7</span>    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">8</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">6</span>           <span class="comment"># 按列检索 1, 4, 7, 2, 5, 8, 3, 6, 9 的 第 8 个为 6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span><span class="comment"># 第 1 行 第 2 列</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span><span class="comment"># 行全取，列取第 1 列</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="comment"># 列全取，行取第 1 行</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span><span class="punctuation">]</span><span class="comment"># 指定读取 第 1 行 第 1 到 2 列 的数据</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span> <span class="comment"># 指定读取 第 1 行 第 1 和 3 列 的数据</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数据框：列向量的访问">1.3 数据框：列向量的访问</h3><h4 id="1-3-1-使用-访问列">1.3.1 使用 $ 访问列</h4><p>使用 <code>$</code> 访问数据库中的列</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %% 数据框</span></span><br><span class="line"><span class="operator">&gt;</span> df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> weight <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1.1</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">df</span><br><span class="line"><span class="operator">&gt;</span> df</span><br><span class="line">  age weight</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>    <span class="number">1.1</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>    <span class="number">2.2</span></span><br><span class="line"><span class="number">3</span>   <span class="number">3</span>    <span class="number">3.3</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> df<span class="operator">$</span>age</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> df<span class="operator">$</span>weight</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.1</span> <span class="number">2.2</span> <span class="number">3.3</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-使用-attach-和-detach-函数">1.3.2 使用 attach 和 detach 函数</h4><p>也可以使用 <code>attach(df)</code> 进入数据框，然后就可以直接使用列名调用数据，使用 <code>detach(df)</code> 退出数据框</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> attach<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">The following objects are masked from df <span class="punctuation">(</span>pos <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span><span class="operator">:</span></span><br><span class="line"></span><br><span class="line">    age<span class="punctuation">,</span> weight</span><br><span class="line"></span><br><span class="line">age</span><br><span class="line">weight</span><br><span class="line"><span class="operator">&gt;</span> age</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="operator">&gt;</span> weight</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.1</span> <span class="number">2.2</span> <span class="number">3.3</span></span><br><span class="line"><span class="operator">&gt;</span> detach<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>attach</code> 和 <code>detach</code> 也使用与 list 类型</p></blockquote><h3 id="1-4-列表的索引">1.4 列表的索引</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>member <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> name<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Jerry&quot;</span><span class="punctuation">,</span> <span class="string">&quot;John&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line"><span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">$</span>name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br></pre></td></tr></table></figure><ul><li>使用 <code>$</code> 索引</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">x<span class="operator">$</span>name</span><br><span class="line"><span class="operator">&gt;</span> x<span class="operator">$</span>name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>attach</code> 和 <code>detach</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> attach<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"><span class="operator">&gt;</span> name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> detach<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>取一次 <code>[]</code> 得到的还是列表，需要取 <code>[[]]</code> 得到向量</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span>        <span class="comment"># 仍然是 list</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span><span class="comment"># 得到向量</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[[</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span><span class="comment"># 等价于 x[[1]]</span></span><br></pre></td></tr></table></figure><h2 id="2-常用操作符和函数">2 常用操作符和函数</h2><h3 id="2-1-数值型向量">2.1 数值型向量</h3><h4 id="2-1-1-逐元素计算">2.1.1 逐元素计算</h4><table><thead><tr><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td></tr><tr><td><code>-</code></td><td>减</td></tr><tr><td><code>*</code></td><td>乘</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>^</code> 或 <code>**</code></td><td>幂次</td></tr><tr><td><code>x %% y</code></td><td>取余数，等价于 x mod y</td></tr><tr><td><code>x %/% y</code></td><td>除法求商，例如 <code>9 %/% 4 = 2</code></td></tr></tbody></table><ul><li>比较符号返回逻辑运算结果</li><li>其他运算采用逐元素计算的方式</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> 6<span class="operator">:</span><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">*</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="number">6</span> <span class="number">14</span> <span class="number">24</span> <span class="number">36</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">/</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">0.1666667</span> <span class="number">0.2857143</span> <span class="number">0.3750000</span> <span class="number">0.4444444</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">+</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="number">7</span>  <span class="number">9</span> <span class="number">11</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><blockquote><p>特别地，R 语言的向量运算中存在<strong>循环法则</strong></p></blockquote><p>当向量长度不同时，会循环复制短的向量，直到长度相等后再运算：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">4</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line">警告信息<span class="operator">:</span></span><br><span class="line">In <span class="number">1</span><span class="operator">:</span><span class="number">3</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span> <span class="operator">:</span> 长的对象长度不是短的对象长度的整倍数</span><br></pre></td></tr></table></figure><p>例如：<code>(1, 2) + (1, 2, 3, 4)</code> 等价于 <code>(1, 2, 1, 2) + (1, 2, 3, 4)</code></p><p>例如：<code>(1, 2, 3) + (1, 2, 3, 4, 5)</code> 等价于 <code>(1, 2, 3, 1, 2) + (1, 2, 3, 4, 5)</code></p><h4 id="2-1-2-一些常见的函数">2.1.2 一些常见的函数</h4><p>例如：<code>sin, cos, tan, asin, acos, atan, atan2, 10g, 10g10, exp</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">max</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求最大值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">min</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求最小值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">range</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求范围，即返回 (max, min)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">sum</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求和</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> diff<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求差分</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">prod</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求累积</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求平均值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">abs</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求绝对值，逐元素计算</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">sqrt</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求平方根，逐元素计算</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.000000</span> <span class="number">1.414214</span> <span class="number">1.732051</span> <span class="number">2.000000</span></span><br></pre></td></tr></table></figure><h3 id="2-2-数值型矩阵">2.2 数值型矩阵</h3><h4 id="2-2-1-常见操作">2.2.1 常见操作</h4><ul><li><code>t(x)</code> ：转置</li><li><code>diag(X)</code>  ：对角阵</li><li><code>%*%</code> ：矩阵乘法</li><li><code>solve(a, b)</code> ：求解 <code>a %*% X = b</code> 的解 <code>X</code></li><li><code>solve(a)</code> ：矩阵的逆</li><li><code>rowSums(x)</code> ：行方向加和</li><li><code>colSums(x)</code> ：列方向加和</li><li><code>rowMeans(x)</code> ：行平均</li><li><code>colMeans(x)</code> ：列平均</li><li><code>dist(x)</code> ：计算矩阵x行间的距离</li></ul><blockquote><p>简单的 <code>+, -, *, /</code> 仅仅是逐元素计算</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">10</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">2</span>    <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> y</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">10</span>   <span class="number">10</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">10</span>   <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> rowSums<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="operator">&gt;</span> colMeans<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.5</span> <span class="number">3.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">%*%</span> y</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">40</span>   <span class="number">40</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">60</span>   <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> solve<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="operator">-</span><span class="number">2</span>  <span class="number">1.5</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span> <span class="operator">-</span><span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> dist<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">         <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1.414214</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-apply-函数">2.2.2 apply 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply<span class="punctuation">(</span>x<span class="punctuation">,</span> margin<span class="punctuation">,</span> fun<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x: 矩阵对象</span></span><br><span class="line"><span class="comment"># margin: 1 表示对行操作，2 表示对列操作</span></span><br><span class="line"><span class="comment"># fun: 操作函数</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> z <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">z</span><br><span class="line"><span class="operator">&gt;</span> z</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">2</span>    <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> apply<span class="punctuation">(</span>z<span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="built_in">sum</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> apply<span class="punctuation">(</span>z<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> mean<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.5</span> <span class="number">3.5</span></span><br></pre></td></tr></table></figure><h3 id="2-3-逻辑型向量">2.3 逻辑型向量</h3><ul><li><code>any()</code> 函数 ：只要有一个逻辑值为 <code>TRUE</code>，返回 <code>TRUE</code></li><li><code>all()</code> 函数 ：所有逻辑值均为 <code>TRUE</code> 时，返回 <code>TRUE</code></li><li><code>which()</code> 函数 ： 返回 <code>TRUE</code> 的位置</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">,</span> <span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">any</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">all</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> which<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2-4-字符型向量">2.4 字符型向量</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741246687101.png" alt="针对字符型的操作函数"></p><h4 id="2-4-1-paste-函数">2.4.1 paste 函数</h4><ul><li><code>paste()</code> 函数可以将多个字符串连接成一个字符串</li></ul><p><code>paste(str1, str2, ..., sep = &quot; &quot;)</code> 默认以空格隔开，此时合并的是各个元素 <code>str</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> <span class="string">&quot;the&quot;</span><span class="punctuation">,</span> <span class="string">&quot;world&quot;</span><span class="punctuation">,</span> <span class="string">&quot;!&quot;</span><span class="punctuation">)</span> <span class="comment"># 默认 sep 空格隔开</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello the world !&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;file&quot;</span><span class="punctuation">,</span> <span class="string">&quot;100&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.csv&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span> <span class="comment"># 指定 sep 为空</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;file100.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;file&quot;</span><span class="punctuation">,</span> <span class="string">&quot;100&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.csv&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;file 100 .csv&quot;</span></span><br></pre></td></tr></table></figure><p><code>paste(vector1, vector2, ..., sep = &quot; &quot;, collapse = NULL)</code> 连接向量时，默认空格分割各个元素，但默认 <code>collapse</code> 为空，即不连接最后的字符型向量。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;th&quot;</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span>  <span class="comment"># collapse = NULL 返回字符类型向量</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;1th&quot;</span> <span class="string">&quot;2th&quot;</span> <span class="string">&quot;3th&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;th&quot;</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;-&quot;</span><span class="punctuation">,</span> collapse <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">)</span>  <span class="comment"># 指定 collapse 返回一个字符串</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;1-th,2-th,3-th&quot;</span></span><br></pre></td></tr></table></figure><p><code>sep</code> 代表每个元素内的连接方式，<code>collapse</code> 代表每个元素间是否连接和连接方式。</p><blockquote><p>第一个等价于 <code>paste(1:3, &quot;th&quot;, sep = &quot;&quot;)</code> ：只要有一个向量就会返回字符类型向量</p></blockquote><h4 id="2-4-2-strsplit-函数">2.4.2  strsplit 函数</h4><p><code>strsplit</code> 函数用来分割字符串</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x: 字符串</span></span><br><span class="line"><span class="comment"># split : 分割符，按照 split 分割</span></span><br><span class="line"><span class="comment"># 返回一个字符串列表</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="string">&quot;hello the world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello&quot;</span> <span class="string">&quot;the&quot;</span>   <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line">strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;h&quot;</span> <span class="string">&quot;e&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;o&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;t&quot;</span> <span class="string">&quot;h&quot;</span> <span class="string">&quot;e&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;w&quot;</span> <span class="string">&quot;o&quot;</span> <span class="string">&quot;r&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> y<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>返回的是列表，先取 <code>[[1]]</code> 把向量取出，然后 <code>[1]</code> 取出向量的第一个元素。</p></blockquote><h4 id="2-4-3-substr-函数">2.4.3 substr 函数</h4><p><code>substr</code> 函数提取子字符串</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">substr<span class="punctuation">(</span>x<span class="punctuation">,</span> from<span class="punctuation">,</span> stop<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x : 字符串</span></span><br><span class="line"><span class="comment"># from : 从 from 开始提取</span></span><br><span class="line"><span class="comment"># stop : 直到 stop 停止</span></span><br><span class="line"><span class="comment"># 返回一个字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="string">&quot;1234&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> substr<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;23&quot;</span></span><br></pre></td></tr></table></figure><p>也可对向量进行操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span> <span class="string">&quot;456&quot;</span><span class="punctuation">,</span> <span class="string">&quot;789&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> substr<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2&quot;</span> <span class="string">&quot;5&quot;</span> <span class="string">&quot;8&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-控制流">3 控制流</h2><h3 id="3-1-if-else-条件执行">3.1 if-else 条件执行</h3><p>在R语言中，<code>if-else</code> 语句用于根据条件执行不同的代码块。它是一种控制流语句，允许程序根据条件的真假选择执行不同的操作。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果条件为假，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 3</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">if</span> <span class="punctuation">(</span>x <span class="operator">&gt;</span> <span class="number">5</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="operator">+</span>     print<span class="punctuation">(</span><span class="string">&quot;x 大于 5&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">+</span> <span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="operator">+</span>     print<span class="punctuation">(</span><span class="string">&quot;x 小于或等于 5&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">+</span> <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;x 小于或等于 5&quot;</span></span><br></pre></td></tr></table></figure><ul><li>同样也具有 <code>if-else if -else</code> 语句结构</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span>condition1<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果 condition1 条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="keyword">if</span> <span class="punctuation">(</span>condition2<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 如果 condition2 条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 否则，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-ifelse-函数">3.2 ifelse 函数</h3><p><code>ifelse()</code> 对向量中的每个元素进行条件判断并返回结果，得到一个向量。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifelse<span class="punctuation">(</span>condition<span class="punctuation">,</span> statement1<span class="punctuation">,</span> statement2<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># condition 条件为 TRUE 则返回 statement1</span></span><br><span class="line"><span class="comment"># condition 条件为 FALSE 则返回 statement2</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> score <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">40</span><span class="punctuation">,</span> <span class="number">50</span><span class="punctuation">,</span> <span class="number">60</span><span class="punctuation">,</span> <span class="number">70</span><span class="punctuation">,</span> <span class="number">80</span><span class="punctuation">,</span> <span class="number">90</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> result <span class="operator">&lt;-</span> ifelse<span class="punctuation">(</span>score <span class="operator">&gt;=</span> <span class="number">60</span><span class="punctuation">,</span> <span class="string">&quot;Pass&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Fail&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> result</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Fail&quot;</span> <span class="string">&quot;Fail&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-for-循环">3.3 for 循环</h3><p><code>for</code> 循环 ：重复地执行一个语句，直到某个变量 <code>var</code> 的值不再包含在序列 <code>seq</code> 中为止。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>var <span class="keyword">in</span> seq<span class="punctuation">)</span> statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>var <span class="keyword">in</span> seq<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>i <span class="operator">%%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        string <span class="operator">&lt;-</span> paste<span class="punctuation">(</span><span class="string">&quot;i=&quot;</span><span class="punctuation">,</span> i<span class="punctuation">)</span></span><br><span class="line">        print<span class="punctuation">(</span>string<span class="punctuation">)</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出偶数</span></span><br></pre></td></tr></table></figure><h3 id="3-4-while-循环">3.4 while 循环</h3><p><code>while</code> 循环 ：重复地执行一个语句，直到条件不为真为止。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i <span class="operator">&lt;-</span> 0</span><br><span class="line"><span class="keyword">while</span> <span class="punctuation">(</span>i <span class="operator">&lt;</span> <span class="number">10</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    print<span class="punctuation">(</span>i<span class="punctuation">)</span></span><br><span class="line">    i <span class="operator">&lt;-</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 0 - 9</span></span><br></pre></td></tr></table></figure><h3 id="3-5-repeat-循环">3.5 repeat 循环</h3><p><code>repeat</code> 循环是一种无限循环结构，它会重复执行代码块，直到显式地使用 <code>break</code> 语句退出循环。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 代码块</span></span><br><span class="line">  <span class="keyword">if</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> 1</span><br><span class="line"><span class="keyword">repeat</span> <span class="punctuation">&#123;</span></span><br><span class="line">    print<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">    x <span class="operator">&lt;-</span> x <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>x <span class="operator">&gt;</span> <span class="number">5</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不断递增，直到大于 5</span></span><br></pre></td></tr></table></figure><blockquote><p>在R语言中，循环的效率可能较低。尤其是在处理大规模数据时。为了提高代码效率，R提供了许多内建函数和<code>apply</code>族函数，它们通常是基于C语言实现的，执行速度更快。R 语言提高效率的方法大多来自向量计算，使用循环会破坏这种高效的计算方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> R 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R 语言 </tag>
            
            <tag> 统计软件 </tag>
            
            <tag> R programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 操作系统：命令帮助和快捷使用</title>
      <link href="/posts/50fa0735.html"/>
      <url>/posts/50fa0735.html</url>
      
        <content type="html"><![CDATA[<h1>Linux 命令帮助和快捷使用</h1><h2 id="1-命令格式和选项">1 命令格式和选项</h2><h3 id="1-1-命令格式">1.1 命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@linux: ~$ ...</span><br></pre></td></tr></table></figure><ul><li><code>user</code> 表示当前用户</li><li><code>linux</code> 表示主机名</li><li><code>～</code> 表示当前目录，<code>~</code> 表示用户 home 目录</li><li><code>$</code> 表示用户类型，<code>$</code> 表示普通用户，<code>#</code> 表示 root 用户</li></ul><p>命令：一般一行一个命令，也允许多行，使用 <code>\</code> 表示这一行命令没有结束，多行的命令以 <code>&gt;</code> 起始。</p><p>命令格式：一般命令包括了三个部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [options] arguments</span><br></pre></td></tr></table></figure><ul><li><code>command</code> 代表命令，可以是别名、shell 内置命令、外部命令、shell 函数等</li><li><code>options</code> 代表选项，命令执行时要使用的可选的属性或者功能</li><li><code>arguments</code> 代表参数，是命令作用的对象，0 个或者多个</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="built_in">rm</span> -r ~/documents/doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># rm       是命令</span></span><br><span class="line"><span class="comment"># -r   是选项</span></span><br><span class="line"><span class="comment"># ~/documents/doc 是参数，即被执行的对象</span></span><br></pre></td></tr></table></figure><h3 id="1-2-命令格式：选项-options">1.2 命令格式：选项 [options]</h3><p>选项根据连字符 <code>-</code> 个数分为<strong>短选项</strong>和<strong>长选项</strong>：</p><ul><li>短选项：以 <code>-</code> 开始，紧跟单个字符。当选项无须参数时，可以合并单字符。</li><li>长选项：以 <code>--</code> 开始，紧跟单词。后跟参数采用 <code>--option=value</code> 等号前后都不能有空格。</li></ul><blockquote><p><em>几乎</em>所有命令都有 <code>--help</code> 和 <code>--version</code> 选项。</p></blockquote><h2 id="2-联机手册-man-命令">2 联机手册 man 命令</h2><p>对于外部命令，我们需要查看帮助文档。</p><ul><li>软件文档：一般存放在 <code>/usr/share/doc</code> 中，可通过 <code>less</code>、<code>zless</code> （查看压缩过的文本文件）和 <code>web</code> 浏览器（查看html文件）查看。</li><li><code>man</code> 命令查看联机手册，采用 <code>less</code> 分页查看。</li></ul><p>联机手册可以理解为一些命令的帮助文档，一般包含了：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740989011537.png" style="zoom:33%;" /><ul><li><code>man cmd</code> ：查看名字为 cmd 的联机手册</li><li><code>whatis cmd</code> ：在索引库中查找命令名与 cmd 匹配的条目，并且仅仅显示这些条目的一句话的 NAME 信息</li><li><code>apropos cmd</code> ：在索引库中，基于命令名以及 NAME 部分的内容，查找与 cmd 匹配的条目，仅仅显示 NAME 信息</li></ul><h3 id="2-1-已知命令使用-man-查看帮助">2.1 已知命令使用 man 查看帮助</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man cmd  <span class="comment"># 查看 cmd 命令的联机手册 </span></span><br></pre></td></tr></table></figure><ul><li><code>-f</code> 查看名字匹配的命令的 NAME 部分的内容（whatis 提供类似更全面的功能）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -f <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">whatis <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> (1)               - list directory contents</span><br></pre></td></tr></table></figure><ul><li><code>-k</code> 搜索 NAME 部分，列出匹配的命令（apropos 提供类似更全面的功能）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -k <span class="string">&#x27;list directory contents&#x27;</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">apropos –r <span class="string">&#x27;list directory contents&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740990211922.png" style="zoom:50%;" /><h3 id="2-2-whatis-通过匹配查找命令">2.2 whatis 通过匹配查找命令</h3><ul><li><code>whatis</code> 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whatis [options] name</span><br><span class="line"></span><br><span class="line">-e, --exact  : 采用精确匹配，默认</span><br><span class="line">-r, --regex  : 正则表达式匹配，命令名部分匹配</span><br><span class="line">-w, --wildcard   : 通配符匹配</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whatis -e <span class="built_in">ls</span>     <span class="comment"># 精确匹配 ls 与 man -f ls 等价</span></span><br><span class="line"></span><br><span class="line">whatis -r mkdi   <span class="comment"># 部分匹配，包含 mkdi 即可，会查找出 mkdir</span></span><br><span class="line"></span><br><span class="line">whatis -w <span class="string">&#x27;m*dir&#x27;</span><span class="comment"># 匹配 m 开始，dir 结束的命令</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740990706834.png" style="zoom:50%;" /><h3 id="2-3-apropos-通过-NAME-匹配命令">2.3 apropos 通过 NAME 匹配命令</h3><ul><li><code>apropos</code> 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apropos [OPTION] keywords</span><br><span class="line"></span><br><span class="line">-r, --regex         : 默认，采用正则表达式，模糊匹配</span><br><span class="line">-e, --exact    : 采用精确匹配</span><br><span class="line">-w, --wildcard : 采用通配符匹配</span><br><span class="line">-a, --and : 匹配所有的关键字，缺省匹配任意一个</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apropos -r <span class="string">&#x27;list directory contents&#x27;</span></span><br><span class="line"></span><br><span class="line">apropos -e <span class="string">&#x27;list directory contents on&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740991383960.png" style="zoom:50%;" /><h2 id="3-内置命令帮助">3 内置命令帮助</h2><h3 id="3-1-help-查看内置命令帮助">3.1 help 查看内置命令帮助</h3><p><strong>外部命令</strong>：可独立运行的可执行程序</p><ul><li>例如 <code>ls</code> 可执行程序位于 <code>/usr/bin/ls</code></li></ul><p><strong>内置命令</strong>：当前正在执行的终端 shell 所提供的命令</p><ul><li><code>help</code> 内置命令可查看 shell 内置命令相应的帮助信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> [options] [arguments]</span><br><span class="line"></span><br><span class="line">-s : 仅查看语法</span><br><span class="line">-m : 以联机手册形式查看，即采用 less 分页方式查看帮助文档</span><br><span class="line"></span><br><span class="line">[arguments] 可以指定特定的命令</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> -s <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 </span></span><br><span class="line"><span class="built_in">cd</span>: <span class="built_in">cd</span> [-L|[-P [-e]] [-@]] [<span class="built_in">dir</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> <span class="keyword">for</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="keyword">for</span>: <span class="keyword">for</span> NAME [<span class="keyword">in</span> WORDS ... ] ; <span class="keyword">do</span> COMMANDS; <span class="keyword">done</span></span><br><span class="line">    Execute commands <span class="keyword">for</span> each member <span class="keyword">in</span> a list.</span><br><span class="line">    </span><br><span class="line">    The `<span class="keyword">for</span><span class="string">&#x27; loop executes a sequence of commands for each member in a</span></span><br><span class="line"><span class="string">    list of items.  If `in WORDS ...;&#x27;</span> is not present, <span class="keyword">then</span> `<span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span><span class="string">&#x27; is</span></span><br><span class="line"><span class="string">    assumed.  For each element in WORDS, NAME is set to that element, and</span></span><br><span class="line"><span class="string">    the COMMANDS are executed.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Exit Status:</span></span><br><span class="line"><span class="string">    Returns the status of the last command executed.</span></span><br></pre></td></tr></table></figure><h3 id="3-2-info-查看任意命令">3.2 info 查看任意命令</h3><p>针对不同的命令，查看帮助文档却要用不同的指令，这显然是很繁琐的。所以，<code>info</code> 提供了简单的查找方式。直接通过 <code>info cmd</code> 即可查看 <code>cmd</code> 的联机手册。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZuf695p5vw7py8urm4h4fZ:~# <span class="built_in">help</span> <span class="built_in">ls</span></span><br><span class="line">-bash: <span class="built_in">help</span>: no <span class="built_in">help</span> topics match `<span class="built_in">ls</span><span class="string">&#x27;.  Try `help help&#x27;</span> or `man -k <span class="built_in">ls</span><span class="string">&#x27; or `info ls&#x27;</span>.</span><br><span class="line">root@iZuf695p5vw7py8urm4h4fZ:~# info <span class="built_in">ls</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><code>help</code> 查看不了 <code>ls</code> 这个外部命令，但是 <code>info ls</code> 却可以直接跳转进 <code>ls</code> 的联机手册。</p></blockquote><ul><li><code>&lt;Space&gt;</code> 查看下一页</li><li><code>&lt;Delete&gt;</code> 查看上一页</li><li><code>q</code> 退出 <code>info</code> 界面</li><li><code>H</code> 查看 <code>info</code> 所有命令</li><li><code>h</code> 进入 <code>info</code> 教程</li></ul><h2 id="4-命令历史">4 命令历史</h2><p>用户输入的命令会被保存到历史列表，文件存放于 <code>~/.bash_history</code> ，下次打开终端 shell 时也会去  <code>~/.bash_history</code> 加载。</p><ul><li>如果当前命令与上一个命令完全一致，不会加入</li><li>以空白字符开始的命令，不会加入（所以，可以通过先键入空格，而后输入命令的方式，使得命令不被记录）</li></ul><h3 id="4-1-history-命令">4.1 history 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> [n]</span><br></pre></td></tr></table></figure><p><code>history</code> 命令查看命令历史列表，<code>n</code> 指定最近 n 条记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> -c <span class="comment"># 清楚历史记录</span></span><br><span class="line"><span class="built_in">history</span> -r <span class="comment"># 从 history 文件加载历史记录</span></span><br><span class="line"><span class="built_in">history</span> -w (<span class="built_in">history</span> -a) <span class="comment"># 将历史记录写入/附加到历史记录文件</span></span><br></pre></td></tr></table></figure><h3 id="4-2-历史记录扩展">4.2 历史记录扩展</h3><table><thead><tr><th>调用历史记录的命令</th><th>作用</th></tr></thead><tbody><tr><td><code>!num</code></td><td>执行编号 num 的历史命令</td></tr><tr><td><code>!!</code></td><td>执行最近一次历史命令，等价于 <code>!-1</code></td></tr><tr><td><code>!str</code></td><td>执行最近一次以 str 开始的命令</td></tr><tr><td><code>!?str</code></td><td>执行最近一次包含 str 的命令</td></tr><tr><td><code>!$</code></td><td>上一条命令的最后一个单词</td></tr><tr><td><code>!*</code></td><td>上一个命令的所有参数</td></tr></tbody></table><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!l</span><br><span class="line"><span class="comment"># 如果最近有 ls 命令，则会执行 ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!?<span class="built_in">dir</span></span><br><span class="line"><span class="comment"># 如果最近有 mkdir 名，则会执行 mkdir</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!$</span><br><span class="line"><span class="comment"># 如果有命令 ls ./ 则会返回 ./</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!*</span><br><span class="line"><span class="comment"># 如果有命令 ls -a 则会返回 -a</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>!</code> 后均无空格</p></blockquote><h2 id="5-自动完成">5 自动完成</h2><p>输入命令的一部分，按 <code>&lt;Tab&gt;</code> 键或 <code>&lt;Ctrl&gt; + I</code> 触发自动完成功能。如果有多个可选项或者没有可选项时会发出提示声表示有歧义。</p><p>例如：下例按下 Tab 键后，会发出提示音，再按一下，则会返回所有可能结果（文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> .bash&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">.bash_history  .bashrc </span><br></pre></td></tr></table></figure><p>例如：按下 Tab 键后，会发出提示音，再按一下，则会返回所有可能结果（命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">ls</span>lsb_releaselscpulsinitramfslslockslsmemlsnslspcilsusblsattrlsblklshwlsipclsloginslsmodlsoflspgpot</span><br></pre></td></tr></table></figure><h2 id="6-命令别名">6 命令别名</h2><h3 id="6-1-alias-查看命令别名">6.1 alias 查看命令别名</h3><p>有时设置一些命令的别名能方便命令的输入。可以使用 <code>alias</code> 查看别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>这说明了输入 <code>l</code> 相当于输入 <code>ls -CF</code> ；输入 <code>la</code> 相当于输入 <code>ls -A</code></p></blockquote><h3 id="6-2-自定义别名">6.2 自定义别名</h3><ul><li>可以进入 <code>~/.bashrc</code> 中修改（永久修改）【推荐单独创建文件 <code>.bash_aliases</code>】</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740996227062.png" alt="./bashrc 文件内容" style="zoom:30%;" /><p>在用户目录下创建文件 <code>.bash_aliases</code> 写入例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_aliases</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd alias</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># history alias</span></span><br><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br></pre></td></tr></table></figure><p>然后 <code>source .bashrc</code> 之后，便可永久保存别名。</p><ul><li>也可以直接命令输入（不会保存）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> &lt;别名&gt;=<span class="string">&#x27;&lt;完整命令&gt;&#x27;</span>  <span class="comment"># = 无空格</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>设置 <code>h</code> 扩展为 <code>history 20</code> ；<code>..</code> 扩展为 <code>cd ..</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> h</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-取消别名与不进行别名扩展">6.3 取消别名与不进行别名扩展</h3><ul><li>取消别名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unalias</span> &lt;别名&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>unalias -a</code> 取消所有别名</p></blockquote><ul><li><code>\</code> 表示不适用别名扩展</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="7-终端组合键">7 终端组合键</h2><h3 id="7-1-终端-shell-组合键">7.1 终端 shell 组合键</h3><table><thead><tr><th>组合键</th><th>含义</th></tr></thead><tbody><tr><td><code>Ctrl + D</code></td><td>EOF 输入结束</td></tr><tr><td><code>Ctrl + C</code></td><td>中断进程</td></tr><tr><td><code>Ctrl + \</code></td><td>退出进程，对应的内存状态保存到 core 文件</td></tr><tr><td><code>Ctrl + Z</code></td><td>发送终端停止信号，前台作业暂停并放入后台</td></tr><tr><td><code>Ctrl + H</code> 或 <code>&lt;Delete&gt;</code></td><td>删除光标前的最后一个字符</td></tr><tr><td><code>Ctrl + W</code></td><td>删除光标前的最后一个单词，以空格为分割</td></tr><tr><td><code>Ctrl + U</code></td><td>删除这一行</td></tr></tbody></table><blockquote><p><code>fg</code> 命令：将后台作业切换到前台执行；<code>bg</code> 命令：将暂停的作业切换到后台执行</p></blockquote><p>使用命令，可以查看这些组合键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">speed 9600 baud; rows 35; columns 130; line = 0;</span><br><span class="line">intr = ^C; quit = ^\; erase = ^?; <span class="built_in">kill</span> = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S;</span><br><span class="line">susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; discard = ^O; min = 1; <span class="keyword">time</span> = 0;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输入 <code>Ctrl + V</code> 再按 <code>Ctrl + </code> 得到字符 <code>^</code></p><h3 id="7-2-bash-组合键">7.2 bash 组合键</h3><p>bash 使用 <code>readline</code> 库新增其他组合键。</p><table><thead><tr><th>快捷键</th><th>含义</th></tr></thead><tbody><tr><td><code>Ctrl + A</code></td><td>光标移动到行首</td></tr><tr><td><code>Ctrl + E</code></td><td>光标移动到行尾</td></tr><tr><td><code>Ctrl + L</code></td><td>清屏并移动光标到左上角，等价于 <code>clear</code> 命令</td></tr><tr><td><code>Ctrl + _</code></td><td>撤回之前的操作</td></tr><tr><td><code>Ctrl + K</code></td><td>剪切光标处到结尾的字符</td></tr><tr><td><code>Ctrl + Y</code></td><td>在光标处粘贴</td></tr></tbody></table><p>配置文件位于 <code>/etc/inputrc</code> ，建议在 <code>~/.inputrc</code> 中配置。</p>]]></content>
      
      
      <categories>
          
          <category> Linux 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> ssh </tag>
            
            <tag> 远程连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 操作系统：ssh 远程连接服务器和基本指令</title>
      <link href="/posts/e0a5070b.html"/>
      <url>/posts/e0a5070b.html</url>
      
        <content type="html"><![CDATA[<h1>Linux 操作系统概述</h1><p>本文介绍了使用 ssh 进行 Linux 系统服务区的远程访问与一些简单的命令。服务器可以去往各大服务器商购买，或者在本地安装虚拟机，针对 mac 用户 Linux 操作系统的指令大多可以直接使用，windows 系统的 wsl 或 powershell 也满足 Linux 的习惯。</p><h2 id="1-Linux-的远程访问-ssh">1 Linux 的远程访问 ssh</h2><h3 id="1-1-本地生成-ssh-密钥">1.1 本地生成 ssh 密钥</h3><p>在本地用户目录 <code>~</code> 下终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><blockquote><p>会要求设置密码，可以设置也可以不设置，这个密码只是未来使用 ssh 连接时需要输入的。</p></blockquote><p>便会在用户目录下生成文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">├── id_rsa</span><br><span class="line">└── id_rsa.pub</span><br></pre></td></tr></table></figure><p>其中 <code>id_rsa</code> 为私钥，不可泄漏；<code>id_rsa.pub</code> 为公钥，未来将放置在其他主机上的。</p><h3 id="1-2-服务器存储公钥">1.2 服务器存储公钥</h3><p>在需要登陆的服务器用户目录下创建文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">└── authorized_keys</span><br></pre></td></tr></table></figure><p>将本地主机的公钥 <code>id_rsa.pub</code> 内容复制到远程服务器 <code>.ssh/authorized_keys</code> 文件中。</p><h3 id="1-3-登陆远程服务器">1.3 登陆远程服务器</h3><p>此时就可以通过 ssh 建立安全的访问。</p><ul><li>方式一：直接输入远程的 ip 地址</li></ul><p>在本地主机终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh@&lt;ip地址&gt;</span><br></pre></td></tr></table></figure><p>之后即可通过 ssh 登陆。但相对复杂，推荐使用本地配置登陆。</p><ul><li>方式二：自定义配置文件 <code>config</code></li></ul><p>在本地主机的 <code>~/.ssh/</code> 目录下创建配置文件 <code>config</code> ，<code>.ssh/</code> 目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">├── config</span><br><span class="line">├── id_rsa</span><br><span class="line">└── id_rsa.pub</span><br></pre></td></tr></table></figure><p>在 <code>config</code> 文件中写入配置</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># config 文件，以阿里云服务器为例</span><br><span class="line"></span><br><span class="line"># Aliyun Server</span><br><span class="line">Host &lt;别名&gt;</span><br><span class="line">    HostName &lt;公网ip&gt;</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><blockquote><p><code>#</code> 表示注释，<code>Host</code> 后的可以自定义别名，<code>Hostname</code> 后填入服务器的 ip 地址，<code>User</code> 表示想要登陆的远程服务器用户，例如 <code>root</code> 表示直接登陆到管理员用户，<code>Port 22</code> 表示通过端口 22 连接。</p></blockquote><p>以上配置完成后，直接在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;别名&gt;</span><br></pre></td></tr></table></figure><p>即可登陆。</p><h3 id="1-4-known-hosts-文件">1.4 known_hosts 文件</h3><p>有时，当远端服务器也使用了 <code>ssh-keygen</code> 产生密钥时，本地 <code>.ssh/</code> 目录下会有 <code>known_hosts</code> 文件，其保存了远方 ssh 服务器的公钥，确认是否是之前连接的服务器。</p><h3 id="1-5-文件传输-ssh-cat-或-scp">1.5 文件传输 ssh + cat 或 scp</h3><p>当按照上面配置完成了 ssh 和远程服务器别名后，可以进行快捷的文件传输。</p><ul><li>对于小文件，可以直接使用 <code>cat + ssh</code> 的方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/a.txt | ssh &lt;别名&gt; <span class="string">&#x27;cat &gt; /root/file.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>将本地 <code>~/a.txt</code> 文件复制传输到远程服务器 <code>&lt;别名&gt;</code> 的 <code>/root/file.txt</code> 文件。</p><ul><li>对于大文件，可以使用 <code>scp</code> 递归传输文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/localFile &lt;别名&gt;:/root</span><br></pre></td></tr></table></figure><p>将本地的 <code>~/localFile</code> 文件夹传输到远程服务器 <code>&lt;别名&gt;</code> 的 <code>/root</code> 路径下。</p><h2 id="2-Linux-的简单使用">2 Linux 的简单使用</h2><h3 id="2-1-登录后的信息">2.1 登录后的信息</h3><p>每次登陆 Linux 系统后，会显示 <code>motd</code> (Message of the day) 以及上次登陆的时间和地点。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740976579623.png" style="zoom:23%;" /><ul><li><code>last</code> 命令查看当前或指定用户以前的成功登录情况，来源于 <code>/var/log/wtmp</code></li></ul><h3 id="2-2-注销">2.2 注销</h3><p>退出 Linux 操作系统的文本终端，可以使用：</p><ul><li><code>logout</code></li><li><code>exit</code></li><li>组合 <code>Ctrl + D</code> 退出，代表 <code>EOF (End Of File)</code></li></ul><p>如果不希望按下组合键一次就退出，可以设置 <code>IGNOREEOF</code> ，以免误触</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> IGNOREEOF=3 &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>如此，就需要按压 3 次 <code>Ctrl + D</code> 才能退出。如果只按一次，则会出现以下情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@&lt;name&gt;:~# </span><br><span class="line">Use <span class="string">&quot;logout&quot;</span> to leave the shell.</span><br></pre></td></tr></table></figure><blockquote><p>或者进入用户目录的 <code>.bashrc</code> 文件添加一行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 .bashrc 文件，输入 I 进入编辑模式</span></span><br><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc 文件，添加一行</span></span><br><span class="line">IGNOREEOF=3</span><br></pre></td></tr></table></figure><p>键入 <code>esc</code> 退出编辑模式，输入 <code>:wq</code> 保存并退出。然后在终端输入以下指令以永久生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><h3 id="2-3-关机和重启">2.3 关机和重启</h3><p>在命令行可通过【不推荐】</p><ul><li><code>poweroff</code> 立刻关机并断电</li><li><code>halt</code> 立刻关机</li><li><code>reboot</code> 立刻重启</li></ul><p>【推荐】使用 <code>shutdown</code> 命令指定时间进行关机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [OPTIONS...] [TIME] [WALL...]</span><br></pre></td></tr></table></figure><ul><li><code>[TIME]</code> 填入命令执行的时间：例如 <code>+m</code> 或 <code>m</code> 表示 m 分钟后执行；<code>now</code> 表示立马执行；不指定则默认 1 分钟后执行。或者采用 <code>hh:mm</code> 表示在 hh 时 mm 分时刻执行。</li><li><code>WALL...</code> 要发送的消息，可不传递。</li><li><code>[OPTIONS...]</code> 可项的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 查看 shutdown 的帮助信息</span><br><span class="line">--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">2. 关机（默认，可省略）</span><br><span class="line">-P 或 -h 或 --poweroff</span><br><span class="line"></span><br><span class="line">3. 重启</span><br><span class="line">-r 或 --reboot</span><br><span class="line"></span><br><span class="line">4. 取消前面的命令</span><br><span class="line">-c</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r 10  <span class="comment"># 十分钟后重启</span></span><br><span class="line">Reboot scheduled <span class="keyword">for</span> Mon 2025-03-03 14:08:42 CST, use <span class="string">&#x27;shutdown -c&#x27;</span> to cancel.</span><br><span class="line">shutdown -c   <span class="comment"># 取消操作</span></span><br><span class="line"></span><br><span class="line">shutdown   <span class="comment"># 默认 1 分钟后关机并断电</span></span><br><span class="line">shutdown -c   <span class="comment"># 取消操作</span></span><br><span class="line"></span><br><span class="line">shutdown -r now <span class="comment"># 立即重启</span></span><br></pre></td></tr></table></figure><h3 id="2-4-查看系统信息">2.4 查看系统信息</h3><ul><li><code>hostname</code> ：查看主机的名字（主机名存储在文件 <code>/etc/hostname</code> 中）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@&lt;主机名&gt;:~# hostname</span><br><span class="line">&lt;主机名&gt;</span><br></pre></td></tr></table></figure><ul><li><code>uname</code> ：可以查看更多的系统信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-a  : 显示所有信息</span><br><span class="line">-s  : 内核名，例如 Linux 或 Darwin (MacOS)</span><br><span class="line">-r  : 内核发行版本号</span><br><span class="line">-n  : 节点名</span><br><span class="line">-v  : 内核版本</span><br><span class="line">-m  : 主机硬件架构</span><br><span class="line">-o  : 操作系统，结果为 GNU/Linux 等</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982042004.png" alt=""></p><ul><li><code>lsb_release</code> ：查看 LSB (Linux Standard Base) 一些 Linux 版本信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a  : 查看所有信息 </span><br><span class="line">-i  : 查看发行者 ID</span><br><span class="line">-d  : 发行版描述 </span><br><span class="line">-r  : 发行版发行号 </span><br><span class="line">-c  : 发行版代号</span><br><span class="line">-s  : 短格式，不包括前面的头部部分</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982156204.png" alt=""></p><h3 id="2-5-查看用户信息">2.5 查看用户信息</h3><ul><li><code>whoami</code> ：登录用户名</li><li><code>id</code> ：查看当前用户（也可查看其他用户）的用户和组信息</li><li><code>who</code> ：查看当前系统正在登录的用户信息</li><li><code>uptime</code> ：查看系统运行时间和负载等信息</li><li><code>w</code> ：<code>uptime</code> 和 <code>who</code> 结合的功能，还可查看用户在做什么</li><li><code>tty</code> ：查看当前所连接的终端设备文件</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982352680.png" style="zoom:33%;" /><h3 id="2-6-阅读文本文件">2.6 阅读文本文件</h3><ul><li><code>cat</code> ：阅读文本文件，不分页</li><li><code>more</code> ：阅读文本文件，分页</li><li><code>less</code> ：与 <code>more</code> 相似，但功能更多</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">less &lt;file&gt;</span><br><span class="line"></span><br><span class="line">-- 显示一页内容，然后等待用户的输入 --</span><br><span class="line">h    : 显示帮助 </span><br><span class="line">q        : 退出</span><br><span class="line">&lt;Space&gt; or f  : 查看下一页 </span><br><span class="line">b   : 查看上一页</span><br><span class="line">/xxx          : 向前搜索 xxx </span><br><span class="line">n             : 重复上次搜索（方向不变）</span><br><span class="line">?xxx          : 向后搜索 xxx </span><br><span class="line">N             : 重复上次搜索，但是反方向</span><br><span class="line">:n            : 切换到下一个文件 </span><br><span class="line">:p            : 切换到前一个文件</span><br><span class="line">v   : 采用相应的编辑器来编辑本文件</span><br></pre></td></tr></table></figure><h3 id="2-7-文件编辑">2.7 文件编辑</h3><p>例如：<code>vim</code> 或 <code>nano</code></p><p>使用 <code>nano</code> （<code>Meta</code> 键一般为 <code>Alt</code> 键）</p><ul><li><code>Ctrl + O</code> 保存</li><li><code>Ctrl + X</code> 退出，如有修改，会询问是否保存</li><li><code>Ctrl + G</code> 查看帮助</li><li><code>Shift + &lt;- or -&gt;</code> 使用 Shift 加键盘向左/右，可以选定一段文字</li><li><code>Ctrl + K</code> 剪切</li><li><code>Ctrl + U</code> 粘贴</li><li><code>Ctrl + W</code> 搜索文本</li><li><code>Meta + 6</code> 复制</li><li><code>Meta + U</code> 撤销上次操作</li><li><code>Meta + E</code> 恢复上次撤销的操作</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740983326079.png" style="zoom:23%;" />]]></content>
      
      
      <categories>
          
          <category> Linux 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> ssh </tag>
            
            <tag> 远程连接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归算法 Recursion</title>
      <link href="/posts/5f7017e8.html"/>
      <url>/posts/5f7017e8.html</url>
      
        <content type="html"><![CDATA[<h1>递归算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p><strong>递归</strong>：通过一个函数在执行过程中一次或者多次调用其本身，或者通过一种数据结构在其表示中依赖于相同类型的结构更小的实例。简而言之：递归就是自己调用自己。</p><p>本文依据四个例子介绍递归算法的原理和如何搭建：</p><ul><li>阶乘函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></li><li>标尺刻度（分形）</li><li>二分查找</li><li>计算机文件目录的嵌套</li></ul><p>除此之外，还有一些常见的递归例子：递归求和、逆置序列、递归产生斐波那契数列、求和谜题等。以及什么是尾递归，如何将尾递归转换为非递归算法。</p><h2 id="1-常见递归案例">1 常见递归案例</h2><h3 id="1-1-阶乘函数">1.1 阶乘函数</h3><p>由阶乘函数的定义，我们可知</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mi>n</mi><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>×</mo><mo>⋯</mo><mo>×</mo><mn>2</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n! = n \times (n-1) \times (n-2) \times \cdots \times 2 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 时，我们规定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0! = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>根据阶乘的定义，可以写出函数的递推形式，如果我们构造了一个函数 <code>factorial()</code> 应该满足</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">factorial(n) = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    factorial(n) = n * factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>于是我们可以得到阶乘函数的递归算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">4</span>))  <span class="comment"># 24</span></span><br></pre></td></tr></table></figure><ul><li>迭代是通过函数的递归实现的，每次进入函数，查看 <code>n</code> 是否为 <code>0</code> ，如果不为零，则返回 <code>n * f(n)</code> 如此反复调用，直到 <code>n = 0</code> 时才真正开始进行计算。</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740813281185.png" style="zoom:50%;" /><h3 id="1-2-标尺刻度（分形）">1.2 标尺刻度（分形）</h3><p>对于一个刻度尺，每刻度之间距离减半时，刻度线长度也减小。例如：0 - 1 cm 的刻度间，假设 0 和 1 刻度线长 4 个单位，于是有 0.5 cm 刻度线长 3 个单位，0.25 cm 刻度线长 2 个单位，以此类推。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740813701382.png" style="zoom:47%;" /><p>我们定义函数 <code>draw_ruler()</code> ，用来模仿这种分形的过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_line</span>(<span class="params">tick_length, tick_label=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制刻度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        tick_length (int): 刻度长度，即 &#x27;-&#x27; 字符个数</span></span><br><span class="line"><span class="string">        tick_label (str, optional): 刻度数，不重要. Defaults to &#x27;&#x27;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    line = <span class="string">&#x27;-&#x27;</span> * tick_length</span><br><span class="line">    <span class="keyword">if</span> tick_label:</span><br><span class="line">        line += <span class="string">&#x27; &#x27;</span> + tick_label</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_interval</span>(<span class="params">center_length</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录分型个数的辅助函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        center_length (int): 负责传入刻度长度给 draw_line 函数，即 &#x27;-&#x27; 字符个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> center_length &gt; <span class="number">0</span>:</span><br><span class="line">        draw_interval(center_length - <span class="number">1</span>)</span><br><span class="line">        draw_line(center_length)</span><br><span class="line">        draw_interval(center_length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_ruler</span>(<span class="params">len_of_ruler, num_scale</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制刻度尺</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        len_of_ruler (int): 刻度尺长度，即最大刻度</span></span><br><span class="line"><span class="string">        num_scale (int): 最大刻度的长度，即最大刻度的 &#x27;-&#x27; 字符个数，决定了分形次数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    draw_line(num_scale, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + len_of_ruler):</span><br><span class="line">        draw_interval(num_scale - <span class="number">1</span>)</span><br><span class="line">        draw_line(num_scale, <span class="built_in">str</span>(j))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">draw_ruler(len_of_ruler=<span class="number">1</span>, num_scale=<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 0</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">--- 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>细节 &amp; 原理</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740900901780.png" alt=""></p><p>每一个 <code>draw_interval(n)</code> 下都嵌套着一个结构为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">draw_interval(n)</span><br><span class="line">├── draw_interval(n-<span class="number">1</span>)  <span class="comment"># 继续嵌套，直到 n = 0</span></span><br><span class="line">│ ├── ...</span><br><span class="line">├──draw_line(n)        <span class="comment"># 真正画刻度的函数 输出 &#x27;-&#x27; 字符</span></span><br><span class="line">└──draw_interval(n-<span class="number">1</span>)</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure><h3 id="1-3-二分查找">1.3 二分查找</h3><p>二分查找是一种高效的查找序列元素的算法。当序列无序时，通过循环遍历的方式查找某一个元素，复杂度为 <code>O(n)</code> 。但当<strong>序列有序</strong>时，可以使用二分查找。</p><ul><li>二分查找的想法</li></ul><p>需要在一个有序序列中查找 <code>x</code> ，首先将序列分半，检查 <code>x</code> 落入哪个区间，例如落入左边，则抛去右边，在左边继续分半查找。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">left = <span class="number">0</span>           <span class="comment"># 最左边下标</span></span><br><span class="line">right = <span class="built_in">len</span>(seq) - <span class="number">1</span>        <span class="comment"># 最右边下标</span></span><br><span class="line"></span><br><span class="line">mid = (left + right) // <span class="number">2</span>   <span class="comment"># 计算中间下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == seq[mid]:</span><br><span class="line">    <span class="comment"># 完成</span></span><br><span class="line"><span class="keyword">elif</span> x &lt; seq[mid]:</span><br><span class="line">    <span class="comment"># 到左半寻找</span></span><br><span class="line">    <span class="comment"># 调用函数，更新参数</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 到右半寻找</span></span><br><span class="line">    <span class="comment"># 调用函数，更新参数</span></span><br></pre></td></tr></table></figure><ul><li>复杂度</li></ul><p>每次递归调用，序列长度为 <code>right - left + 1</code> 。而二分查找每次调用后，传入 <code>mid = (left + right) // 2</code> ，序列长度减半 <code>(right - left + 1) / 2</code> 。于是有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Algorithms end when</mtext><mspace width="1em"/><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo>∼</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{Algorithms end when} \quad \frac{n}{2^k} \sim 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord text"><span class="mord">Algorithms end when</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∼</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">k \sim \log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 为操作数（调用递归次数）。故复杂度为 <code>O(log n)</code></p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, target, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &gt; right:</span><br><span class="line">        <span class="comment"># 全遍历后仍然没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> target == data[mid]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> target &lt; data[mid]:</span><br><span class="line">        <span class="keyword">return</span> binary_search(data, target, left, mid - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_search(data, target, mid + <span class="number">1</span>, right)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">33</span>, <span class="number">37</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(seq, target=<span class="number">22</span>, left=<span class="number">0</span>, right=<span class="built_in">len</span>(seq) - <span class="number">1</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740821735351.png" alt=""></p><h3 id="1-4-文件系统">1.4 文件系统</h3><p>一般主机的文件目录大致为 <code>a/b/c.py</code> 其中 <code>a/</code> <code>b/</code> 表示其为文件夹，而有文件后缀的 <code>c.py</code> 则为文件。下面编写一个递归算法，计算某个目录下所有文件（文件夹）各自的存储大小。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_usage</span>(<span class="params">path</span>)</span><br><span class="line">    Input: 文件路径</span><br><span class="line">    Output: 存储空间总和</span><br><span class="line"></span><br><span class="line">    total = size(path)  <span class="comment"># 当前目录的大小</span></span><br><span class="line">    <span class="keyword">if</span> path 是文件夹:</span><br><span class="line">        <span class="keyword">for</span> child_path <span class="keyword">in</span> path  <span class="comment"># 查看父目录下的子目录</span></span><br><span class="line">            total += disk_usage(child_path)  <span class="comment"># 递归</span></span><br><span class="line"><span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><ul><li><code>os</code> 模块</li></ul><p><code>os.path.getsize(path)</code> 获取 <code>path</code> 路径文件的大小或文件夹本身的大小（针对文件夹，只返回文件夹自身大小，不包含其下文件和其他子文件夹的大小）</p><p><code>os.path.isdir(path)</code> 判断 <code>path</code> 是否是一个合法且存在的路径</p><p><code>os.listdir(path)</code> 返回一个列表，列表元素为 <code>path</code> 路径下所有文件和文件夹的名称</p><p><code>os.path.join(path, filename)</code> 根据传入的字符串组合成一条合法的路径</p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_usage</span>(<span class="params">path</span>):</span><br><span class="line">    total = os.path.getsize(path)  <span class="comment"># 当前目录自身的大小</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">            <span class="comment"># 遍历其下子目录的名称</span></span><br><span class="line">            child_path = os.path.join(path, filename)</span><br><span class="line">            total += disk_usage(child_path)  <span class="comment"># 递归调用 计算子目录的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;  &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total, path))</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.path.getsize(os.getcwd()))</span><br><span class="line"><span class="comment"># 128 代表目录自身的大小，不包含其下子目录</span></span><br><span class="line"></span><br><span class="line">total = disk_usage(os.getcwd())      <span class="comment"># os.getcwd() 获取当前目录路径</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2262 /Users/&lt;username&gt;/dsa-notes/lec3_recursion/code03_recursion.py</span></span><br><span class="line"><span class="string">6326 /Users/&lt;username&gt;/dsa-notes/lec3_recursion/note03_递归.md</span></span><br><span class="line"><span class="string">8716 /Users/&lt;username&gt;/dsa-notes/lec3_recursion  # 父目录</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"><span class="comment"># 8716</span></span><br></pre></td></tr></table></figure><h2 id="2-递归分类">2 递归分类</h2><ul><li>如果一个递归最多调用一次，称之为<strong>线性递归</strong></li><li>如果一个递归可以同时进行两次调用，称之为<strong>二路递归</strong></li><li>如果一个递归可以同时进行三次及以上调用，称之为<strong>多重递归</strong></li></ul><h3 id="2-1-线性递归">2.1 线性递归</h3><p>递归函数内可能有多个递归调用，但函数内必须最多只能执行一次递归调用。例如：</p><ul><li>阶乘的递归式定义</li><li>二分查找</li></ul><blockquote><p>二分查找虽然有两处出现了递归调用，但因为处于 <code>if - else</code> 语句中，实际最多只执行一次，故仍然是线性递归</p></blockquote><h4 id="2-1-1-递归求和">2.1.1 递归求和</h4><p>递归求和和阶乘的实现如出一辙，都是采用递推的方式构建。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LinearSum(A, n):</span><br><span class="line">Input: 序列和求和长度</span><br><span class="line">Output: 序列前 n 项和</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> A[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> LinearSum(A, n - <span class="number">1</span>) + A[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_sum</span>(<span class="params">seq: <span class="built_in">list</span>, n: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> linear_sum(seq, n - <span class="number">1</span>) + seq[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归求前 n 项和</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(linear_sum(seq, <span class="number">3</span>))  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-逆置序列">2.1.2 逆置序列</h4><p>对于输入一个序列，将其第一项和最后一项交换，第二项与倒数第二项交换，以此类推从而得到逆置后的序列。基本想法是每次调用交换首尾，然后剔除首尾后作为新的序列再次调用。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Agorithm ReverseArray(A, i, j):</span><br><span class="line">Input: 序列 A 和首尾下标 i, j (也可任意指定非首尾下标 i, j)</span><br><span class="line">Output: 无输出，因为序列是可变的，函数操作直接对序列进行</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt; j then</span><br><span class="line">交换 A[i] 和 A[j]</span><br><span class="line">ReverseArray(A, i + <span class="number">1</span>, j - <span class="number">1</span>)  <span class="comment"># 剔除首尾后作为新的序列再次调用</span></span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq, i, j</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; j:</span><br><span class="line">        seq[i], seq[j] = seq[j], seq[i]</span><br><span class="line">        reverse(seq, i + <span class="number">1</span>, j - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆置序列</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">reverse(seq, i=<span class="number">0</span>, j=<span class="built_in">len</span>(seq) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"><span class="comment"># [9, 8, 7, 6, 5, 4, 3, 2, 1] 从 seq[0]=1 到 seq[n-1]=9 开始逆序</span></span><br><span class="line"></span><br><span class="line">reverse(seq, i=<span class="number">3</span>, j=<span class="built_in">len</span>(seq) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"><span class="comment"># [9, 8, 7, 1, 2, 3, 4, 5, 6] 从 seq[3]=6 到 seq[n-1]=1 开始逆序</span></span><br></pre></td></tr></table></figure><h3 id="2-2-二路递归">2.2 二路递归</h3><p>当函数内部执行两次递归调用时，即为二路递归。例如：</p><ul><li>标尺刻度</li></ul><h4 id="2-2-1-二路递归求和">2.2.1 二路递归求和</h4><p>基本思想是将序列拆分为两半，分布调用求和再相加。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm BinarySum(A, i, n):</span><br><span class="line">Input: 序列 A 和起始下标 i 和加和长度 n</span><br><span class="line">Output: 从 i 开始的 n 个元素求和</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> A[i]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> BinarySum(A, i, n / <span class="number">2</span>) + BinarySum(A, i + n / <span class="number">2</span>, n / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740892869633.png" alt=""></p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_sum</span>(<span class="params">seq, i, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        half = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> binary_sum(seq, i, half) + binary_sum(seq, i + half, n - half)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二路递归求和</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_sum(seq, i=<span class="number">0</span>, n=<span class="built_in">len</span>(seq)))</span><br><span class="line"><span class="comment"># 55</span></span><br><span class="line"><span class="built_in">print</span>(binary_sum(seq, i=<span class="number">1</span>, n=<span class="built_in">len</span>(seq) - <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 54</span></span><br></pre></td></tr></table></figure><blockquote><p>代码实现并不良好，因为需要手动计算起始下标和长度，没有检查溢出问题</p></blockquote><h4 id="2-2-2-二路递归产生斐波那契数列">2.2.2 二路递归产生斐波那契数列</h4><p>产生递推式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">F_0 = 0,\ F_1 = 1,\ F_{i} = F_{i - 1} + F_{i - 2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 的斐波那契数列，可以尝试使用二路递归方法。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm BinaryFib(k)</span><br><span class="line">Input: 序列下标 k</span><br><span class="line">Output: 第 k 个斐波那契数列值</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> k</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> BinaryFib(k - <span class="number">1</span>) + BinaryFib(k - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_fib</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 【不推荐】 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_fib(k - <span class="number">1</span>) + binary_fib(k - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二路递归产生斐波那契数列 【不推荐】</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(binary_fib(i), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 0 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><blockquote><p>二路递归产生斐波那契数列复杂度为指数级，【不推荐】使用</p></blockquote><p><strong>证明</strong> 记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示 <code>binary_fib(k)</code> 函数调用递归的次数，则有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>3</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⋯</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mi>k</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align} \notagn_0 &amp;= 1 \\ \notagn_1 &amp;= 1 \\ \notagn_2 &amp;= n_1 + n_0 + 1 = 3 \\ \notagn_3 &amp;= n_2 + n_1 + 1 = 5 \\ \notag&amp;\cdots \\n_k &amp;= n_{k-1} + n_{k-2} + 1 \notag\end{align}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9em;vertical-align:-4.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">3</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>于是可知 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 也为斐波那契数列，由斐波那契数列是二阶线性递推，求通项公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo>∼</mo><mo stretchy="false">(</mo><mfrac><mrow><msqrt><mn>5</mn></msqrt><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><msup><mo stretchy="false">)</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">n_k \sim (\frac{\sqrt{5}- 1}{2})^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.383em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 可知操作次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大约为指数类型的量级。指数增长理论上在算法中是无法实现的。（或者可以证明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大约是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">n_{k-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 的 2 倍以上，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo>∼</mo><msup><mn>2</mn><mrow><mi>k</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n_k \sim 2^{k/2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">/2</span></span></span></span></span></span></span></span></span></span></span></span> 也是指数级别）</p><h4 id="2-2-3-线性递归产生斐波那契数列">2.2.3 线性递归产生斐波那契数列</h4><p>改进递归，使用线性递归产生斐波那契数列。基本思想是每次返回一组（2 个）斐波那契数，每次返回的时候直接进行加和（递推）</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LinearFibonacci(k):</span><br><span class="line">Input: 下标 k</span><br><span class="line">Output: 一次返回 <span class="number">2</span> 个斐波那契数</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i, j = LinearFibonacci(k - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> j, i + j</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_fib</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i, j = linear_fib(k - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> j, i + j</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性递归产生斐波那契数列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    front, back = linear_fib(i)</span><br><span class="line">    <span class="built_in">print</span>(back, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><blockquote><p>线性递归每递归一次就能产生一项，故复杂度为 <code>O(n)</code></p></blockquote><h3 id="2-3-多重递归">2.3 多重递归</h3><p>多重递归中的函数可能执行多于两次递归调用。例如：</p><ul><li>文件系统</li></ul><h4 id="2-3-1-求和谜题">2.3.1 求和谜题</h4><p>可以简单理解为找出集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mn>9</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">U = \{1, 2, 3, \cdots, 9 \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">9</span><span class="mclose">}</span></span></span></span> 所有的三元子集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy="false">{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">S = \{a, b, c\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose">}</span></span></span></span> 使得满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a + b = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span> 。基本想法是每次向 <code>S</code> 中添加一个 <code>U</code> 中元素，并删去 <code>U</code> 中对应的元素，并 <code>k - 1</code> 表示 <code>S</code> 还剩 <code>k - 1</code> 个元素。从而得到新的 <code>k, S, U</code> 此时递归调用。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Algorithm PuzzleSolve(k, S, U):</span><br><span class="line">Input: S 为结果集合，U 为选取元素来源，k 为要求的 S 集合大小</span><br><span class="line">Output: 所以满足 a + b = c 的 S = &#123;a, b, c&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> U do:</span><br><span class="line">    <span class="comment"># 从 U 中逐个挑出元素</span></span><br><span class="line">    Add e to the end of S  <span class="comment"># 将 e 添加到序列 S 的末尾</span></span><br><span class="line">    Remove e <span class="keyword">from</span> U        <span class="comment"># 将 e 从集合 U 中移除（标记为已使用）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span> then:               </span><br><span class="line">        <span class="comment"># 如果当前序列长度满足要求</span></span><br><span class="line">        <span class="keyword">if</span> is_solution(S) then:    </span><br><span class="line">            <span class="comment"># 检查 S 是否是谜题的解</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Solution found: &quot;</span> + S)</span><br><span class="line">    <span class="keyword">else</span>:                         </span><br><span class="line">        <span class="comment"># 否则继续递归扩展，递归调用，并传入新参数</span></span><br><span class="line">        PuzzleSolve(k - <span class="number">1</span>, S, U)</span><br><span class="line"></span><br><span class="line">    Remove e <span class="keyword">from</span> the end of S     // 回溯：将 e 从序列 S 的末尾移除</span><br><span class="line">    Add e back to U                // 回溯：将 e 添加回集合 U（标记为未使用）</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_solution</span>(<span class="params">S</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 检查 a + b = c &quot;&quot;&quot;</span></span><br><span class="line">    res = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> S[<span class="number">0</span>] + S[<span class="number">1</span>] == S[<span class="number">2</span>]:</span><br><span class="line">        res = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">puzzle_solve</span>(<span class="params">k, S, U</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 寻找 S &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">list</span>(U):  <span class="comment"># 遍历集合 U 中的每一个元素</span></span><br><span class="line">        S.append(e)  <span class="comment"># 将 e 添加到序列 S 的末尾</span></span><br><span class="line">        U.remove(e)  <span class="comment"># 将 e 从集合 U 中移除</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> is_solution(S):</span><br><span class="line">                <span class="comment"># 检查当前序列 S 是否是谜题的解</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Solution found: &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(S[<span class="number">0</span>], S[<span class="number">1</span>], S[<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 递归调用，继续扩展序列</span></span><br><span class="line">            puzzle_solve(k - <span class="number">1</span>, S, U)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 回溯</span></span><br><span class="line">        S.pop()  <span class="comment"># 将 e 从序列 S 的末尾移除</span></span><br><span class="line">        U.add(e)  <span class="comment"># 将 e 添加回集合 U</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求和谜题</span></span><br><span class="line">U = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">k = <span class="number">3</span></span><br><span class="line">S = []</span><br><span class="line">puzzle_solve(k, S, U)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Solution found: 1 + 2 = 3</span></span><br><span class="line"><span class="string">Solution found: 1 + 3 = 4</span></span><br><span class="line"><span class="string">Solution found: 2 + 1 = 3</span></span><br><span class="line"><span class="string">Solution found: 3 + 1 = 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740897518866.png" alt=""></p><h2 id="3-递归算法的不足">3 递归算法的不足</h2><h3 id="3-1-不断递归带来的复杂度">3.1 不断递归带来的复杂度</h3><ul><li>递归可能会因为不断的调用自身带来复杂度的急剧上升</li></ul><p>例如：二路递归产生斐波那契的例子就展示了递归的误用</p><h3 id="3-2-最大递归深度">3.2 最大递归深度</h3><ul><li>除了复杂度，递归的误用可能会带来无限深度</li></ul><p>例如出现了下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> f(x)</span><br></pre></td></tr></table></figure><p>这种简单的错误会导致递归无限地调用自身，这会迅速耗尽计算资源。所以，使用递归时，往往会传入<strong>更多的参数</strong>，通过参数的变化和添加终止条件实现递归。</p><ul><li>Python 限制了递归的深度，默认递归不得超过 1000 层，如果超过则会报错 <code>RuntimeError</code></li></ul><p>合法的/高效的递归操作，这个限制（1000 层）是完全足够的。例如，二分查找的复杂度为 <code>O(log n)</code> ，如果要这个算法消耗 1000 次递归，则有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>=</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">\log n = 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span> 可以计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mn>1000</mn></msup></mrow><annotation encoding="application/x-tex">n = 2^{1000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span></span></span></span></span></span></span></span></span></span></span></span> 个输入，这个数字显然在现实中是不可能达到的。所以，1000 层限制对于合法的递归算法是完全足够的。</p><p>当然，也可以自定义最大递归深度限制【不推荐】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">old = sys.getrecursionlimit()</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>无论如何，依靠<strong>参数的加入和限制</strong>对递归算法的设计十分重要。</p></blockquote><h2 id="4-消除尾递归">4 消除尾递归</h2><p>递归算法的优点在于利用问题中的重复结构。然而，递归的成本也十分明显。算法必须记录存储每个调用的状态和结果。这对计算机内存造成负担。</p><p>所以，某些情况下，我们希望能够将递归算法变为非递归算法。</p><h3 id="4-1-尾递归">4.1 尾递归</h3><p><strong>定义</strong>：当递归算法进行的递归调用是此算法的最后一步，即递归调用得到的值被立即当作此算法的输出，则此递归为一个尾递归（<strong>递归调用为最后一步 / 递归调用得到的值作为输出</strong>）。</p><ul><li>尾递归必定是一个线性递归</li></ul><p>例如：阶乘函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)  <span class="comment"># 递归调用 factorial() 为算法的输出被 return</span></span><br></pre></td></tr></table></figure><h3 id="4-2-尾递归的非递归算法">4.2 尾递归的非递归算法</h3><p><strong>任何的尾递归均可转写为一个非递归算法</strong></p><h4 id="4-2-1-阶乘函数（非递归）">4.2.1 阶乘函数（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res = n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="comment"># 使用循环逐个相乘</span></span><br><span class="line">        res *= i</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="4-2-2-逆置序列（非递归）">4.2.2 逆置序列（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq, i, j</span>):</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="comment"># 利用下标的循环交换</span></span><br><span class="line">        seq[i], seq[j] = seq[j], seq[i]</span><br><span class="line">        i, j = i + <span class="number">1</span>, j - <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-二分查找（非递归）">4.2.3 二分查找（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, target, left, right</span>):</span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        <span class="comment"># 利用循环从左右向中间查找</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> target == data[mid]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> target &lt; data[mid]:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CIFAR-10 分类问题 (基于 ResNet18 预训练模型)</title>
      <link href="/posts/24ab2d0a.html"/>
      <url>/posts/24ab2d0a.html</url>
      
        <content type="html"><![CDATA[<h1>CIFAR-10 分类问题 (基于 ResNet18 预训练模型)</h1><p>项目源码存放在 GitHub 库 <a href="https://github.com/isKage/cifar10-classification">isKage/cifar10-classification</a></p><p><code>PyTorch</code> <code>Python</code> <code>torch</code> <code>nn</code> <code>ResNet</code> <code>ResNet18</code> <code>pre-trained</code></p><p>针对 CIFAR-10 分类问题，搭建神经网络：<code>AlexNet</code>、<code>GoogLeNet</code>、<code>ResNet</code>、<code>ResNet18</code>。最后选择预训练后的 <code>ResNet18</code> 进行该问题的训练、验证和测试。包含自定义数据集 <code>Dataset</code> 类、自定义训练、验证和测试函数、自定义结果表格函数等。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/cifar.jpeg" alt="cifar-10"></p><p><code>kaggle: private score = 0.68100, ranked about 71. (just training once as using cpu)</code></p><p><code>device: cpu</code></p><p><strong>项目目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── README.md                   </span><br><span class="line">├── TempData                  <span class="comment"># 取少量图片模拟 CIFAR10 数据集                 </span></span><br><span class="line">│   └── competitions</span><br><span class="line">│       └── cifar-10</span><br><span class="line">├── checkpoints               <span class="comment"># 存放训练完成后的模型参数 model.save() 存放处</span></span><br><span class="line">├── config.py                 <span class="comment"># 默认的配置文件</span></span><br><span class="line">├── data                      <span class="comment"># 自定义的数据集 Dataset 类</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── dataset.py</span><br><span class="line">├── logfile                   <span class="comment"># 记录模型表现 csv 文件的目录</span></span><br><span class="line">├── logs                      <span class="comment"># 存放 tensorboard 文件</span></span><br><span class="line">├── main.py                   <span class="comment"># 主程序: 包含 train, test 等主要函数</span></span><br><span class="line">├── models                    <span class="comment"># 搭建的各种神经网络 `AlexNet`、`GoogLeNet`、`ResNet`、`ResNet18`</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── alexnet.py</span><br><span class="line">│   ├── basic.py</span><br><span class="line">│   ├── googlenet.py</span><br><span class="line">│   ├── resnet.py</span><br><span class="line">│   └── resnet18.py</span><br><span class="line">├── requirements.txt          <span class="comment"># 安装依赖</span></span><br><span class="line">├── result_example.csv        <span class="comment"># 少量数据模拟数据集得到的测试结果</span></span><br><span class="line">└── sampleSubmission.csv      <span class="comment"># 最后生成的可提交 kaggle 的最终测试结果</span></span><br></pre></td></tr></table></figure><h2 id="1-下载至本地">1 下载至本地</h2><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/cifar10-classification.git</span><br></pre></td></tr></table></figure><h2 id="2-安装依赖和数据集">2 安装依赖和数据集</h2><h3 id="2-1-pip-安装依赖">2.1 pip 安装依赖</h3><p>在项目根目录下终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="2-2-kaggle-下载数据集">2.2 kaggle 下载数据集</h3><p>教程见 <a href="https://zhuanlan.zhihu.com/p/25732245405">从 kaggle 下载数据集 (mac &amp; win)</a>。</p><h2 id="3-本地配置-config-py">3 本地配置 <code>config.py</code></h2><p>在 <code>config.py</code> 中配置相关参数。例如数据集路径。相关配置均已配置好，但需要自己配置数据集的位置。<br>在 <code>_parse()</code> 方法中，需修改 cifar 数据集的路径。例如我的配置：<code>cifar-10</code> 文件夹放在用户目录下的 <code>AllData/competitions/</code> 下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> config.real_or_try == <span class="string">&quot;real&quot;</span>:</span><br><span class="line">    <span class="comment"># 如果数据放在用户目录的 &#x27;AllData&#x27; 下则</span></span><br><span class="line">    config.root = os.path.join(config.user_root, <span class="string">&#x27;AllData&#x27;</span>, <span class="string">&#x27;competitions&#x27;</span>, <span class="string">&#x27;cifar-10&#x27;</span>)  <span class="comment"># 【本地设置: 数据目录】</span></span><br><span class="line">    config.res_path = os.path.join(config.working_root, <span class="string">&#x27;sampleSubmission.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 样本数据尝试</span></span><br><span class="line">    config.root = os.path.join(config.working_root, <span class="string">&#x27;TempData&#x27;</span>, <span class="string">&#x27;competitions&#x27;</span>, <span class="string">&#x27;cifar-10&#x27;</span>)</span><br><span class="line">    config.res_path = os.path.join(config.working_root, <span class="string">&#x27;result_example.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-训练">4 训练</h2><blockquote><p>注意，默认的数据集为模拟数据集，故如果想在完整数据集训练，在指定路径后还需传入参数 <code>--real_or_try=real</code><br>，或者直接在 <code>config.py</code> 中<br>修改默认</p></blockquote><h3 id="4-1-解压数据集">4.1 解压数据集</h3><p>在第 3 步设置完成数据集下载的路径后，终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py unzip</span><br></pre></td></tr></table></figure><p>即可解压数据集。</p><h3 id="4-2-训练">4.2 训练</h3><p>使用 <code>fire</code> 库方便的在终端中进行训练、测试过程。可以在 <code>config.py</code> 中输入默认参数。例如：<code>model</code><br>为选择模型，默认使用 <code>&quot;ResNet18&quot;</code> 模型，<br>会自动进行下载，下载的预训练模型参数保存在 <code>checkpoints/</code> 文件夹里。</p><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>可以使用 <code>--&lt;参数名&gt;=参数值</code> 在终端覆盖默认参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python main.py train model=AlexNet      <span class="comment"># 指定 AlexNet 为模型</span></span><br><span class="line">python main.py train rea_or_try=real    <span class="comment"># 使用完整 CIFAR10 数据集，而不是模拟数据集 </span></span><br></pre></td></tr></table></figure><h3 id="4-3-可视化">4.3 可视化</h3><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=./logs  <span class="comment"># http://localhost:6006/</span></span><br></pre></td></tr></table></figure><p>打开浏览器观察训练过程可视化：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740818446605.png" alt=""></p><h2 id="5-测试">5 测试</h2><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>即可得到测试后的结果表格 <code>result_example.csv</code> 或 <code>sampleSubmission.csv</code> （取决与使用的是模拟数据集还是完整的数据集）。</p><p>注意，测试完成后终端输入一下指令，对结果表格按照 <code>id</code> 进行排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py sort_csv</span><br></pre></td></tr></table></figure><p>最后可以将 <code>sampleSubmission.csv</code> 上传到 kaggle <a href="https://www.kaggle.com/competitions/cifar-10">CIFAR-10 competition</a> 。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740818596562.png" style="zoom:50%;" /><h2 id="6-友链">6 友链</h2><ol><li>关注我的知乎账号 <a href="https://www.zhihu.com/people/--55-97-8-41">Zhuhu</a> 不错过我的笔记更新。</li><li>我会在个人博客 <a href="https://blog.iskage.online/">isKage`Blog</a> 更新相关项目和学习资料。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计软件 R 语言学习笔记 (2) R 语言初步：常见对象和数据的输入输出</title>
      <link href="/posts/a6f8df4a.html"/>
      <url>/posts/a6f8df4a.html</url>
      
        <content type="html"><![CDATA[<h1>R 语言入门 (1)</h1><h2 id="1-常见对象">1 常见对象</h2><h3 id="1-1-向量-vector">1.1 向量 vector</h3><p>最简单的数据结构就是由一串相同类型的元素等构成的向量 <code>vector</code></p><ul><li>标量为长度是 <code>1</code> 的向量</li></ul><h4 id="1-1-1-c-函数">1.1.1 <code>c()</code> 函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0.3</span><span class="punctuation">,</span> <span class="number">0.6</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="built_in">T</span><span class="punctuation">,</span> <span class="built_in">F</span><span class="punctuation">)</span>  <span class="comment"># T is TRUE, F is FALSE</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】R 语言只有 <code>TRUE</code> 和 <code>T</code> 以及 <code>FALSE</code> 和 <code>F</code></p></blockquote><h4 id="1-1-2-rep-函数">1.1.2 <code>rep()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span>x<span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># x 表示数据元素</span></span><br><span class="line"><span class="comment"># times 表示重复次数，可以是向量</span></span><br><span class="line"><span class="comment"># length.out 表示总长度，运行截断</span></span><br><span class="line"><span class="comment"># each 每个元素重复次数，不能为向量</span></span><br></pre></td></tr></table></figure><blockquote><p>先执行 <code>each</code> 复制单个元素，后执行 <code>times</code> 复制整个向量</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span> <span class="comment"># times = 2</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="comment"># times = (1, 2, 3, 4)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> len <span class="operator">=</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】<code>each = x</code> 等价于 <code>times = c(x, x, ...)</code></p></blockquote><h4 id="1-1-3-seq-函数">1.1.3 <code>seq()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seq<span class="punctuation">(</span>from <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> to <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="punctuation">(</span><span class="punctuation">(</span>to <span class="operator">-</span> from<span class="punctuation">)</span> <span class="operator">/</span> <span class="punctuation">(</span>length.out <span class="operator">-</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># from 起始数字</span></span><br><span class="line"><span class="comment"># to 终止数字</span></span><br><span class="line"><span class="comment"># by 步长，默认均匀分布</span></span><br><span class="line"><span class="comment"># len 长度</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq<span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">11</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">17</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740635933658.png" alt="QQ_1740635933658" style="zoom:50%;" /><h3 id="1-2-矩阵-matrix">1.2 矩阵 matrix</h3><p>R 语言的矩阵是</p><ul><li><p>有维度（dimension）属性的向量</p></li><li><p>所有元素属于相同类型</p></li></ul><h4 id="1-2-1-matrix-函数">1.2.1 <code>matrix()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix<span class="punctuation">(</span><span class="literal">NA</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># NA 第一个参数为传入的数据</span></span><br><span class="line"><span class="comment"># nrow 行数</span></span><br><span class="line"><span class="comment"># ncol 列数</span></span><br><span class="line"><span class="comment"># byrow 是否按照行排列</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">6</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">6</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636318797.png" style="zoom:50%;" /><h4 id="1-2-2-cbind-rbind-函数">1.2.2 <code>cbind()</code> <code>rbind()</code> 函数</h4><p>将向量按行/列组合成矩阵</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">)</span></span><br><span class="line">cbind<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">)</span></span><br><span class="line">rbind<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636694142.png" style="zoom:50%;" /><h3 id="1-3-数据框-data-frame">1.3 数据框 data frame</h3><ul><li><p>矩阵 <code>Matrix</code> 中只能是<strong>同一种类型</strong>的元素，一般是数值型</p></li><li><p>数据框 <code>Data Frame</code> 不同列可以是<strong>不同数据类型</strong></p></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">12</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4.4</span><span class="punctuation">,</span> <span class="number">5.3</span><span class="punctuation">,</span> <span class="number">7.2</span><span class="punctuation">,</span> <span class="number">5.2</span><span class="punctuation">,</span> <span class="number">8.5</span><span class="punctuation">,</span> <span class="number">7.3</span><span class="punctuation">,</span> <span class="number">6.0</span><span class="punctuation">,</span> <span class="number">10.4</span><span class="punctuation">,</span> <span class="number">10.2</span><span class="punctuation">,</span> <span class="number">6.1</span><span class="punctuation">)</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>age<span class="punctuation">,</span> weight<span class="punctuation">,</span> gender<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">dim</span><span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">nrow<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">ncol<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636915047.png" style="zoom:50%;" /><blockquote><p><code>dim</code> <code>nrow</code> <code>ncol</code> 函数也可用于矩阵 <code>matrix</code> 类型</p></blockquote><h3 id="1-4-列表-list">1.4 列表 list</h3><ul><li><code>List</code> 是一个广义的 “向量”</li><li>每个位置上是任意的R对象，甚至是一个列表</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>member <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> <span class="built_in">names</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Jerry&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Lily&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740637915471.png" style="zoom:50%;" /><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># x 列表元素的别名</span></span><br><span class="line">x<span class="operator">$</span>member  <span class="comment"># 取 x 列表的 member</span></span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># 取列表长</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740638021720.png" style="zoom:50%;" /><blockquote><p>使用 <code>$</code> 取列表的某一位置的数据</p></blockquote><h3 id="1-5-因子-factors">1.5 因子 factors</h3><p>因子是一种特殊的向量：映射到整数编码，并记录所有可能的类别（称为<strong>水平，levels</strong>）。</p><p>使用 <code>factor()</code> 函数创建因子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：性别数据</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">)</span></span><br><span class="line">gender_factor <span class="operator">&lt;-</span> factor<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line">gender_factor</span><br><span class="line"></span><br><span class="line">levels<span class="punctuation">(</span>gender_factor<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;female&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">gender_factor</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639382068.png" style="zoom:50%;" /><h3 id="1-6-对象的判断和转换">1.6 对象的判断和转换</h3><h4 id="1-6-1-强制转换">1.6.1 强制转换</h4><p>把 R 对象从一种类型强制转化成另一个类型</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">6</span></span><br><span class="line"><span class="built_in">as.logical</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.character</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639618782.png" style="zoom:50%;" /><ul><li>如果转换失败，则返回 <code>NA</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">,</span> <span class="string">&quot;c&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.logical</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639731257.png" style="zoom:50%;" /><h4 id="1-6-2-判断">1.6.2 判断</h4><ul><li><code>NA</code> ：缺失数据 not available</li><li><code>NaN</code> ：无意义的数 not a number</li></ul><p><strong>格式</strong>：使用函数判断</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个元素分别判断</span></span><br><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.nan</span><span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="operator">-</span><span class="number">1</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.nan</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sqrt</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740640084551.png" style="zoom:50%;" /><blockquote><p>特殊的数字计算 <code>Inf</code> 无穷的计算</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Inf</span> <span class="operator">+</span> <span class="punctuation">(</span><span class="operator">-</span><span class="literal">Inf</span><span class="punctuation">)</span>  <span class="comment"># NaN</span></span><br></pre></td></tr></table></figure><h2 id="2-数据的输入">2 数据的输入</h2><h3 id="2-1-外部数据类型">2.1 外部数据类型</h3><ul><li>文本文件</li></ul><p>例如 <code>.txt</code> <code>.csv</code> <code>.dat</code> 文件</p><ul><li>其他文件</li></ul><p>例如 <code>.xls</code> <code>.xlsx</code> (Excel) 、 <code>.sas7bdat</code> (SAS)、 <code>.sav</code> (SPSS)、<code>.dta</code> (Stata)、<code>.RData</code> ® 和 <code>.dat</code> 文件</p><blockquote><p>先进行转化再读取，或用专门的程序包</p></blockquote><h3 id="2-2-文本数据读取">2.2 文本数据读取</h3><p>读取文本数据常见的函数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="string">&quot;example.csv&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-read-table-函数">2.3 <code>read.table()</code> 函数</h3><p><strong>参数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="built_in">quote</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">           dec <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> numerals <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;allow.loss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;warn.loss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;no.loss&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">           row.names<span class="punctuation">,</span> col.names<span class="punctuation">,</span> as.is <span class="operator">=</span> <span class="operator">!</span>stringsAsFactors<span class="punctuation">,</span> tryLogical <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">           na.strings <span class="operator">=</span> <span class="string">&quot;NA&quot;</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> nrows <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">           skip <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> check.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> fill <span class="operator">=</span> <span class="operator">!</span>blank.lines.skip<span class="punctuation">,</span></span><br><span class="line">           strip.white <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> blank.lines.skip <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">           comment.char <span class="operator">=</span> <span class="string">&quot;#&quot;</span><span class="punctuation">,</span></span><br><span class="line">           allowEscapes <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> flush <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">           stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">           fileEncoding <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> encoding <span class="operator">=</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span> text<span class="punctuation">,</span> skipNul <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- file: 文件名路径, 字符串形式</span><br><span class="line">- header: 表示文件第一行是否含有列名</span><br><span class="line">- sep: 分隔符, 字符串, 表示各列按照 sep 指定的符号分隔</span><br><span class="line">- nrows: 表示读取数据部分的最大行数</span><br><span class="line">- skip: 表示跳过一定的行数后开始读取</span><br><span class="line">- comment.char: 注释标记, 此符号右边的所有内容都会被忽略</span><br><span class="line">- row.names: 将某一列设置为行名</span><br><span class="line">- col.names: 将某一行设置为列名</span><br></pre></td></tr></table></figure><p>例如：读取下面的 <code>grade.txt</code> 文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------</span><br><span class="line">%%% grade of class A, year 2020</span><br><span class="line">Name ID Grade GPA Gender</span><br><span class="line">&quot;Xiao Ming&quot; 133001 100 4 F</span><br><span class="line">&quot;Xiao Hong&quot; 133023 90 3.7 M</span><br><span class="line">&quot;Xiao Wan&quot; 133099 85 3.2 M</span><br><span class="line">&quot;Song Hui&quot; 133020 80 3.5 M</span><br><span class="line">&quot;Song Yi&quot; 133019 100 4 M</span><br><span class="line">&quot;Donald Trump&quot; 133012 88 3.7 M</span><br><span class="line">&quot;Clinton Hilary&quot; 133014 90 3.7 F%%% retake</span><br><span class="line">&quot;Obama BH&quot; 133010 &quot;&quot; &quot;&quot; M%%% Fail</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t <span class="operator">&lt;-</span> read.table<span class="punctuation">(</span></span><br><span class="line">    file <span class="operator">=</span> <span class="string">&quot;./grade.txt&quot;</span><span class="punctuation">,</span> <span class="comment"># 文件路径</span></span><br><span class="line">    header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> <span class="comment"># 第一行为列名</span></span><br><span class="line">    sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span> <span class="comment"># 按照空格分割</span></span><br><span class="line">    comment.char <span class="operator">=</span> <span class="string">&quot;%&quot;</span><span class="punctuation">,</span> <span class="comment"># % 为注释</span></span><br><span class="line">    skip <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> <span class="comment"># 跳过一行</span></span><br><span class="line">    nrows <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> <span class="comment"># 跳过一行后读 8 行</span></span><br><span class="line">    row.names <span class="operator">=</span> <span class="number">2</span> <span class="comment"># 第 2 列设为行名</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> t</span><br><span class="line">                 Name Grade GPA Gender</span><br><span class="line"><span class="number">133001</span>      Xiao Ming   <span class="number">100</span> <span class="number">4.0</span>      <span class="built_in">F</span></span><br><span class="line"><span class="number">133023</span>      Xiao Hong    <span class="number">90</span> <span class="number">3.7</span>      M</span><br><span class="line"><span class="number">133099</span>       Xiao Wan    <span class="number">85</span> <span class="number">3.2</span>      M</span><br><span class="line"><span class="number">133020</span>       Song Hui    <span class="number">80</span> <span class="number">3.5</span>      M</span><br><span class="line"><span class="number">133019</span>        Song Yi   <span class="number">100</span> <span class="number">4.0</span>      M</span><br><span class="line"><span class="number">133012</span>   Donald Trump    <span class="number">88</span> <span class="number">3.7</span>      M</span><br><span class="line"><span class="number">133014</span> Clinton Hilary    <span class="number">90</span> <span class="number">3.7</span>      <span class="built_in">F</span></span><br><span class="line"><span class="number">133010</span>       Obama BH    <span class="literal">NA</span>  <span class="literal">NA</span>      M</span><br></pre></td></tr></table></figure><blockquote><p>其他读取函数类似，只是参数默认值不同，可以相互替代</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.csv<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">read.delim<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>对于一些常规的文本文件，可直接使用默认参数。例如：</p><ul><li>标准的 <code>.txt</code> 数据文件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;A&quot;, 1, 10.1</span><br><span class="line">&quot;B&quot;, 2, 20.5</span><br><span class="line">&quot;C&quot;, 4, 1031.1</span><br></pre></td></tr></table></figure><ul><li>标准的 <code>.csv</code> 文件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a,b,c</span><br><span class="line">1,2,3</span><br><span class="line">4,5,6</span><br><span class="line">7,8,9</span><br></pre></td></tr></table></figure><p>可以直接使用</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="string">&quot;example.csv&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-4-scan-函数">2.4 <code>scan()</code> 函数</h3><p><code>scan()</code> 函数更灵活，可以读进不规则的数值文档，得到一个向量或者列表</p><ul><li>需要 <code>what</code> 参数指定变量类型，得到一个<code>列表</code></li></ul><p>例如：针对下面的 <code>.txt</code> 文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">M 65 168</span><br><span class="line">M 70 172</span><br><span class="line">F 54 156</span><br><span class="line">F 58 163</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定第一列字符，第二、三列为数值</span></span><br><span class="line">scan<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">,</span> what <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定每一列的名称</span></span><br><span class="line">scan<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">,</span> what <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span><span class="string">&quot;gender&quot;</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;weight&quot;</span> <span class="operator">=</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;height&quot;</span> <span class="operator">=</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740646352843.png" style="zoom:50%;" /><ul><li><code>scan()</code> 函数还可以读取不规则长度的数值文档，得到一个<code>向量</code></li></ul><p>例如：对于数值文档 <code>example2.txt</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2 3 4</span><br><span class="line">5 6 7 8 9</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> scan<span class="punctuation">(</span><span class="string">&quot;example2.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">Read <span class="number">9</span> items</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="2-5-read-fwf-函数">2.5 <code>read.fwf()</code> 函数</h3><p>读取文件中一些固定宽度数据，例如可以指定每一列的宽度为几，函数便会按照提前设置的宽度读取数据</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># M65168</span></span><br><span class="line"><span class="comment"># M70172</span></span><br><span class="line"><span class="comment"># F54156</span></span><br><span class="line"><span class="comment"># F58163</span></span><br><span class="line"></span><br><span class="line">t <span class="operator">&lt;-</span> read.fwf<span class="punctuation">(</span></span><br><span class="line">    file <span class="operator">=</span> <span class="string">&quot;example3.txt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    widths <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    col.names <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;gender&quot;</span><span class="punctuation">,</span> <span class="string">&quot;weight&quot;</span><span class="punctuation">,</span> <span class="string">&quot;height&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">)</span> <span class="comment"># 指定每一列宽度分别为 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> t</span><br><span class="line">  gender weight height</span><br><span class="line"><span class="number">1</span>      M     <span class="number">65</span>    <span class="number">168</span></span><br><span class="line"><span class="number">2</span>      M     <span class="number">70</span>    <span class="number">172</span></span><br><span class="line"><span class="number">3</span>      <span class="built_in">F</span>     <span class="number">54</span>    <span class="number">156</span></span><br><span class="line"><span class="number">4</span>      <span class="built_in">F</span>     <span class="number">58</span>    <span class="number">163</span></span><br></pre></td></tr></table></figure><h3 id="2-6-读取-excel-数据">2.6 读取 excel 数据</h3><ul><li>转换为 <code>csv</code> 文件读取</li><li>复制后使用 <code>read.delim(&quot;clipboard&quot;)</code> 从<code>剪切板</code>中读取</li><li>使用程序包读取</li></ul><p>常用程序包 <code>readxl</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;readxl&quot;</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">&quot;readxl&quot;</span><span class="punctuation">)</span></span><br><span class="line">t <span class="operator">&lt;-</span> read_excel<span class="punctuation">(</span><span class="string">&quot;example.xlsx&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-7-读取网页-url-和-readLines-函数">2.7 读取网页 <code>url()</code> 和 <code>readLines()</code> 函数</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">con <span class="operator">&lt;-</span> url<span class="punctuation">(</span><span class="string">&quot;https://www.baidu.com/&quot;</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> readLines<span class="punctuation">(</span>con<span class="punctuation">)</span></span><br><span class="line">head<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="3-数据的输出">3 数据的输出</h2><h3 id="3-1-write-table-函数">3.1 <code>write.table()</code> 函数</h3><p><strong>参数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write.table<span class="punctuation">(</span>x<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> append <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> <span class="built_in">quote</span> <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">            eol <span class="operator">=</span> <span class="string">&quot;\n&quot;</span><span class="punctuation">,</span> na <span class="operator">=</span> <span class="string">&quot;NA&quot;</span><span class="punctuation">,</span> dec <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">            col.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> qmethod <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;escape&quot;</span><span class="punctuation">,</span> <span class="string">&quot;double&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">            fileEncoding <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;将 x 写入文件 file 中&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># sep: 各列分割符号</span></span><br><span class="line"><span class="comment"># quote = TRUE: 字符和因子列就会被 &quot;&quot; 所包裹</span></span><br><span class="line"><span class="comment"># eol: 尾行分隔符</span></span><br><span class="line"><span class="comment"># na: 缺失值字符串</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据框 d</span></span><br><span class="line">d <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>obs <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> treat <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;A&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> weight <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2.3</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为简单文本 txt</span></span><br><span class="line">write.table<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.txt&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 保存为 , 分割文本</span></span><br><span class="line">write.csv<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.csv&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 保存为 .RData 格式文件</span></span><br><span class="line">save<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> R 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R 语言 </tag>
            
            <tag> 统计软件 </tag>
            
            <tag> R programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建神经网络 PyTorch 实战：MNIST 手写数字集分类问题训练全流程</title>
      <link href="/posts/6dd74203.html"/>
      <url>/posts/6dd74203.html</url>
      
        <content type="html"><![CDATA[<h1>MNIST 手写数字集分类问题：基于 AlexNet 神经网络</h1><p><code>Python</code> <code>PyTorch</code> <code>MNIST</code> <code>Dataset</code> <code>Dataloarder</code> <code>Tensorboard</code></p><p>本文介绍如何读取 MNIST 数据集，搭建 AlexNet 简单卷积神经网络，模型训练和验证。模型在验证集的准确率大约 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>95</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">95\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">95%</span></span></span></span> 。</p><p>已开源在 <a href="https://github.com/isKage/mnist-classification">GitHub库</a></p><p>使用 <code>git</code> 下载。进入空目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/mnist-classification.git</span><br></pre></td></tr></table></figure><ul><li>PyTorch 的安装和环境配置可见 <a href="https://zhuanlan.zhihu.com/p/22230632892">zhihu</a></li><li>安装指定依赖：【进入 <code>requirements.txt</code> 根目录下安装】</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="0-本地配置-config-py">0 本地配置 <a href="http://config.py">config.py</a></h2><p>在根目录下创建 <code>config.py</code> 文件写入本地配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultConfig</span>:</span><br><span class="line">    model = <span class="string">&#x27;Classification10Class&#x27;</span></span><br><span class="line">    root = <span class="string">&#x27;&lt;路径&gt;/AllData/datasets/hojjatk/mnist-dataset&#x27;</span></span><br><span class="line">    logdir = <span class="string">&#x27;./logs&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取最新模型参数</span></span><br><span class="line">    param_path = <span class="string">&#x27;./checkpoints/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.listdir(param_path):</span><br><span class="line">        load_model_path = <span class="literal">None</span>  <span class="comment"># 加载预训练的模型的路径，为None代表不加载</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        load_model_path = os.path.join(</span><br><span class="line">            param_path,</span><br><span class="line">            <span class="built_in">sorted</span>(</span><br><span class="line">                os.listdir(param_path),</span><br><span class="line">                key=<span class="keyword">lambda</span> x: datetime.strptime(</span><br><span class="line">                    x.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.pth&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )[-<span class="number">1</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    lr = <span class="number">0.03</span></span><br><span class="line">    max_epochs = <span class="number">1</span>  <span class="comment"># 暂时不调参，只训练一次</span></span><br><span class="line">    batch_size = <span class="number">64</span></span><br><span class="line">    num_workers = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    print_feq = <span class="number">100</span>  <span class="comment"># 输出频率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        gpu = <span class="literal">True</span></span><br><span class="line">        device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gpu = <span class="literal">False</span></span><br><span class="line">        device = torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据字典kwargs 更新 config 参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, k):</span><br><span class="line">                warnings.warn(<span class="string">&quot;Warning: opt has not attribute %s&quot;</span> % k)</span><br><span class="line">            <span class="built_in">setattr</span>(<span class="variable language_">self</span>, k, v)</span><br><span class="line"></span><br><span class="line">        config.device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span>) <span class="keyword">if</span> config.gpu <span class="keyword">else</span> torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;User config:&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="variable language_">self</span>.__class__.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(k, <span class="built_in">getattr</span>(<span class="variable language_">self</span>, k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = DefaultConfig()</span><br></pre></td></tr></table></figure><h2 id="1-读取-MNIST-数据集">1 读取 MNIST 数据集</h2><p>直接使用 <code>torchvision.datasets.MNIST</code> 会出现网络问题，难以下载。<br>可以先前往 <a href="https://www.kaggle.com/datasets/hojjatk/mnist-dataset">kaggle</a> 下载。<br>使用 kaggle 命令下载教程可见 <a href="https://zhuanlan.zhihu.com/p/25732245405">从 Kaggle 下载数据集（mac 和 win 端）</a>。</p><p>然后自定义 <code>get_data.py</code> 的 <code>getData</code> 函数读取数据集。其中 <code>config</code> 为本地配置（包含了一些参数和文件路径）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getData</span>(<span class="params">root=config.root, batch_size=config.batch_size</span>):</span><br><span class="line">    <span class="comment"># 1. 准备数据集</span></span><br><span class="line">    train_dataset = torchvision.datasets.MNIST(</span><br><span class="line">        root=root,</span><br><span class="line">        train=<span class="literal">True</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(),</span><br><span class="line">        download=<span class="literal">False</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    test_dataset = torchvision.datasets.MNIST(</span><br><span class="line">        root=root,</span><br><span class="line">        train=<span class="literal">False</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(),</span><br><span class="line">        download=<span class="literal">False</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_dataset)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_dataset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集长度为 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集长度为 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">    train_dataloader = DataLoader(</span><br><span class="line">        dataset=train_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    test_dataloader = DataLoader(</span><br><span class="line">        dataset=test_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_dataset, test_dataset, train_dataloader, test_dataloader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train_dataset, test_dataset, train_dataloader, test_dataloader = getData()</span><br><span class="line">    img, label = train_dataset[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(img.shape)</span><br><span class="line">    <span class="built_in">print</span>(label)</span><br></pre></td></tr></table></figure><h2 id="2-搭建网络">2 搭建网络</h2><p>MNIST 数据集较为简单，使用简单的 AlexNet 卷积神经网络即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicModule</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作为基类，继承 nn.Module 但增加了模型保存和加载功能 save and load</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="built_in">str</span>(<span class="built_in">type</span>(<span class="variable language_">self</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, model_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据模型路径加载模型</span></span><br><span class="line"><span class="string">        :param model_path: 模型路径</span></span><br><span class="line"><span class="string">        :return: 模型</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.load_state_dict(torch.load(model_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, filename=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        保存模型，默认使用 &quot;模型名字 + 时间&quot; 作为文件名，也可以自定义</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            filename = <span class="string">&#x27;checkpoints/&#x27;</span> + <span class="variable language_">self</span>.model_name + <span class="string">&#x27;_&#x27;</span> + time.strftime(<span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span>) + <span class="string">&#x27;.pth&#x27;</span></span><br><span class="line">        torch.save(<span class="variable language_">self</span>.state_dict(), filename)</span><br><span class="line">        <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(<span class="title class_ inherited__">BasicModule</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="string">&#x27;Classification10Class&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">16</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">3</span> * <span class="number">3</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证网络正确性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    classification = Classification10Class()</span><br><span class="line">    <span class="comment"># 按照batch_size=64，channel=1，size=28 * 28输入</span></span><br><span class="line">    inputs = torch.ones((<span class="number">64</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">    outputs = classification(inputs)</span><br><span class="line">    <span class="built_in">print</span>(outputs.shape)</span><br></pre></td></tr></table></figure><h2 id="3-主程序">3 主程序</h2><p>主程序 <code>main.py</code> 包含了训练、验证和写入 tensorboard 可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> get_data <span class="keyword">import</span> getData</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    config._parse(kwargs)</span><br><span class="line">    classification = <span class="built_in">getattr</span>(models, config.model)()</span><br><span class="line">    classification.to(config.device)</span><br><span class="line"></span><br><span class="line">    train_dataset, test_dataset, train_dataloader, test_dataloader = getData()</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_dataset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 损失函数</span></span><br><span class="line">    loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 优化器</span></span><br><span class="line">    learning_rate = <span class="number">0.01</span></span><br><span class="line">    optimizer = torch.optim.SGD(</span><br><span class="line">        params=classification.parameters(),</span><br><span class="line">        lr=config.lr,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">    total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数 == epoch</span></span><br><span class="line">    epochs = config.max_epochs  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8. 开始训练</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练步骤</span></span><br><span class="line">        classification.train()</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">            <span class="comment"># 输入输出</span></span><br><span class="line">            images, targets = data</span><br><span class="line">            images, targets = images.to(config.device), targets.to(config.device)</span><br><span class="line"></span><br><span class="line">            outputs = classification(images)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 损失函数</span></span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 清零梯度</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 反向传播</span></span><br><span class="line">            loss.backward()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新参数</span></span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> total_train_step % config.print_feq == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">                writer.add_scalar(</span><br><span class="line">                    tag=<span class="string">&quot;train_loss (every 100 steps)&quot;</span>,</span><br><span class="line">                    scalar_value=loss.item(),</span><br><span class="line">                    global_step=total_train_step,</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">        classification.<span class="built_in">eval</span>()</span><br><span class="line">        total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">        total_accuracy = <span class="number">0</span>  <span class="comment"># 分类问题正确率</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">                images, targets = data</span><br><span class="line">                images, targets = images.to(config.device), targets.to(config.device)</span><br><span class="line"></span><br><span class="line">                outputs = classification(images)</span><br><span class="line"></span><br><span class="line">                loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">                total_test_loss += loss.item()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 正确率</span></span><br><span class="line">                accuracy = (outputs.argmax(axis=<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">                total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在测试集上的损失</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的 loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">        writer.add_scalar(</span><br><span class="line">            tag=<span class="string">&quot;test_loss (every epoch)&quot;</span>,</span><br><span class="line">            scalar_value=total_test_loss,</span><br><span class="line">            global_step=epoch,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在测试集上的正确率</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的正确率: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_accuracy / test_data_size))</span><br><span class="line">        writer.add_scalar(</span><br><span class="line">            tag=<span class="string">&quot;test_accuracy (every epoch)&quot;</span>,</span><br><span class="line">            scalar_value=total_accuracy / test_data_size,</span><br><span class="line">            global_step=epoch,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">        classification.save()  <span class="comment"># 保存</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line">    fire.Fire()</span><br></pre></td></tr></table></figure><h2 id="4-运行程序">4 运行程序</h2><p>使用 <code>fire</code> 包，从而实现终端训练。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>即可运行主程序的 <code>train</code> 函数。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析：原子操作与时间复杂度</title>
      <link href="/posts/45784f54.html"/>
      <url>/posts/45784f54.html</url>
      
        <content type="html"><![CDATA[<h1>算法分析：原子操作与时间复杂度</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>研究算法运行的时间非常重要，我们往往关注：</p><ol><li>算法运行时间与输入大小的关系</li><li>往往考虑最差的情况</li></ol><h2 id="1-实验研究">1 实验研究</h2><p>如果算法是准确的，且已经可以正常运行。可以采用最简单的方法检验时间，即直接计算算法执行的时间差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># run algorithm</span></span><br><span class="line"><span class="comment"># 算法执行</span></span><br><span class="line"></span><br><span class="line">end = time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br></pre></td></tr></table></figure><p>显然这种方法简单，但缺点明显【不推荐使用】：</p><ul><li>比较不同算法时，要控制硬件等条件相同</li><li>算法的输入可能并不够，例如对于巨量数据输入，每次都测试显然是不明智的</li><li>这个方法必须要求算法能过成功运行</li></ul><h2 id="2-原子操作">2 原子操作</h2><h3 id="2-1-伪代码">2.1 伪代码</h3><p>所以为了解决上面的问题，我们往往分析伪代码，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Algorithm method (arg [, arg, ...])</span><br><span class="line">Input: ...</span><br><span class="line">    Output: ...</span><br><span class="line">    <span class="comment"># 一些操作</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>不关注代码能否执行，只用于评价算法的好坏。</p><h3 id="2-2-原子操作">2.2 原子操作</h3><p>原子操作是算法进行的一些基本运算：</p><ul><li>在伪代码中可被识别出来（无须算法成立即可进行评价）</li><li>很大程度上独立于编程语言而存在（即适用于各种环境）</li><li>执行时间为常数（基本单元，与输入大小 <code>n</code> 无关）</li></ul><p>按照原子操作的观点，我们可以根据操作总时间与输入大小的关系，评价一个算法的好坏。即寻找某种函数关系：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t = f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> 为算法执行的时间，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 为算法输入的大小。下面是常见的函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span> 形式。</p><h2 id="3-常见函数">3 常见函数</h2><h3 id="3-1-常见-7-个函数">3.1 常见 7 个函数</h3><p>算法分析里常见的 7 个函数为：</p><ul><li>常数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">f(n) = C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>这表明，无论算法输入的大小 <code>n</code> 如何变化，算法所有原子操作的执行时间总和大约为一个常数。这是算法分析里最好的情况，表示这个算法非常的迅速。</p><ul><li>对数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，这里的对数底数并不重要。</p><ul><li>线性函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，添加常数系数不影响，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">C \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 等价于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 。</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = n \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 是一个比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 更小的函数，可以理解为</p><p>\lim_\limits{n \to \infty} \frac{\log n}{n} = 0</p><ul><li>二次函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">f(n) = n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>常见的输入大小为 <code>n</code> 却要执行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 次的算法为两层 <code>for</code> 循环（嵌套循环）。</p><ul><li>三次函数和其他多项式</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo>×</mo><mi>n</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>×</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>d</mi></msub><mo>×</mo><msup><mi>n</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">f(n) = a_0 + a_1 \times n + a_2 \times n^2 + \cdots + a_d \times n^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></p><p>与二次函数类似，这一类问题的操作数满足一个多项式函数。</p><ul><li>指数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">f(n) = b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 为某一个常数，指数增长非常迅速。</p><h3 id="3-2-比较增长率">3.2 比较增长率</h3><p>一般而言，我们希望</p><ul><li>数据结构的操作运行时间与常数函数或对数函数成正比</li><li>算法以线性函数或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 函数运行</li><li>运行时间与二次、三次函数相关的难以应对大规模输入数据的情形</li><li>指数函数则完全不可行</li></ul><p>使用双对数刻度画出这 7 个函数的图像，即可直观地体悟它们的增长速度。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740560780545.png" alt=""></p><blockquote><p>双对数刻度：指的是对坐标轴刻度进行放缩，按照 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>10</mn><mn>1</mn></msup><mo separator="true">,</mo><msup><mn>10</mn><mn>2</mn></msup><mo separator="true">,</mo><msup><mn>10</mn><mn>3</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">10^1, 10^2, 10^3, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 的数值等距标注刻度。</p></blockquote><h2 id="4-渐进分析">4 渐进分析</h2><p>实际分析中，我们不用求出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的确切表达。只需知道算法操作时间与哪个形式的函数成正比即可。</p><h3 id="4-1-大-O-符号">4.1 大 O 符号</h3><p><strong>定义</strong>：令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>:</mo><mi mathvariant="double-struck">N</mi><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">f(n),\ g(n): \N \to \R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">R</span></span></span></span> 的函数，如果对任意常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">c &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ，都存在整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 \geq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 使得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mtext>when  </mtext><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">f(n) \leq c \cdot g(n),\quad \text{when}\ \ n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">when</span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>成立，则称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span> 。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740564008502.png" alt="QQ_1740564008502" style="zoom:50%;" /><p>例如：对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">f(n) = 3n+5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span> 我们寻找 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>5</mn><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo>⋅</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = 3n+5 \leq c\cdot g(n) = c \cdot n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 不难发现，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><mo stretchy="false">[</mo><mfrac><mn>5</mn><mrow><mi>c</mi><mo>−</mo><mn>3</mn></mrow></mfrac><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>:</mo><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq [\frac{5}{c-3}] + 1 := n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2484em;vertical-align:-0.4033em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mbin mtight">−</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) \leq c\cdot g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。所以可知  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><h3 id="4-2-大-O-的性质">4.2 大 O 的性质</h3><p>大 O 符号能让我们忽略那些常量因子和低阶项。常见的有</p><ul><li>多项式保留最高阶即可</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo>×</mo><mi>n</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>×</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>d</mi></msub><mo>×</mo><msup><mi>n</mi><mi>d</mi></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mi>d</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(a_0 + a_1 \times n + a_2 \times n^2 + \cdots + a_d \times n^d) = O(n^d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 增长的更快</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + \log n) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 + n \log n) = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 次方求和</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><msup><mi>i</mi><mi>k</mi></msup><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n \ i^k = O(n^{k+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>指数项含有常数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>b</mi><mrow><mi>n</mi><mo>+</mo><mi>c</mi></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>b</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(b^{n+c}) = O(b^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0713em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>b</mi><mrow><mi>n</mi><mo>+</mo><mi>c</mi></mrow></msup><mo>=</mo><msup><mi>b</mi><mi>c</mi></msup><mo>⋅</mo><msup><mi>b</mi><mi>n</mi></msup><mo>:</mo><mo>=</mo><mi>C</mi><mo>⋅</mo><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">b^{n+c} = b^c \cdot b^{n} := C\cdot b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7713em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>但需要注意的是，不可以更换底数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>。</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740563935444.png" alt=""></p><h2 id="5-算法分析实例">5 算法分析实例</h2><h3 id="5-1-寻找最大数">5.1 寻找最大数</h3><p>输入一个列表，输出列表中的最大值。列表的长度可以理解为输入大小 <code>n</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_max</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; # 寻找最大数 # &quot;&quot;&quot;</span></span><br><span class="line">    biggest = data[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> val &gt; biggest:</span><br><span class="line">            biggest = val</span><br><span class="line">    <span class="keyword">return</span> biggest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(find_max(data))</span><br></pre></td></tr></table></figure><p>一层循环，所以大约执行 n 次。其他操作均为常数次，故这个算法时间复杂度为 <code>O(n)</code></p><h3 id="5-2-计算前缀平均值">5.2 计算前缀平均值</h3><p>输入一个列表，计算前 <code>i</code> 个数字的平均值。列表的长度可以理解为输入大小 <code>n</code> 。</p><h4 id="5-2-1-二次算法">5.2.1 二次算法</h4><p>整个列表循环一层，然后在循环中再次循环加和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_average1</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 计算前缀平均值 二次算法 &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    ave = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">            total += data[j]</span><br><span class="line">        ave.append(total / (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> ave</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(prefix_average1(data))</span><br></pre></td></tr></table></figure><p>第二层循环执行 i + 1 次，而 i 在第一层循环里从 0 到 n - 1 ，故整个算法操作次数大约为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{i=0}^{n-1}\ (i+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2537em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 省略低阶项，大致为 <code>O(n^2)</code></p><h4 id="5-2-2-线性算法">5.2.2 线性算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_average2</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 计算前缀平均值 线性算法 &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    ave = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total += data[i]</span><br><span class="line">        ave.append(total / (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> ave</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(prefix_average2(data))</span><br></pre></td></tr></table></figure><p>如此只有一层循环，大致为 <code>O(n)</code></p><h3 id="5-3-三集不相交">5.3 三集不相交</h3><p>输入三个序列 <code>A, B, C</code> ，输出是否存在交集。如果存在交集，则返回 <code>True</code> 否则返回 <code>False</code></p><h4 id="5-3-1-三层循环">5.3.1 三层循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disjoint1</span>(<span class="params">A, B, C</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 三集不相交 三层循环 O(n^3) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">                <span class="keyword">if</span> a == b == c:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">B = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">C = [<span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(disjoint1(A, B, C))</span><br></pre></td></tr></table></figure><p>显然，使用了三层循环。复杂度大致为 <code>O(n^3)</code> 。（准确而言应该为三个集合大小的乘积，但本质一样）</p><h4 id="5-3-2-循环中加入判断">5.3.2 循环中加入判断</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disjoint2</span>(<span class="params">A, B, C</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 三集不相交 循环中加入判断 O(n^3) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">if</span> a == b:</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">                    <span class="keyword">if</span> a == c:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">B = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br><span class="line">C = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(disjoint2(A, B, C))</span><br></pre></td></tr></table></figure><p>仍然为 <code>O(n^3)</code> 例如上面的例子，当 <code>A, B, C</code> 的相同元素在最后时，不得不完全遍历。</p><h3 id="5-4-元素唯一性">5.4 元素唯一性</h3><p>给定一个长为 <code>n</code> 的序列，判断是否元素互不相同，是则为 <code>True</code></p><h4 id="5-4-1-简单的迭代">5.4.1 简单的迭代</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique1</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 元素唯一性 简单迭代 O(n^2) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> data[i] == data[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(unique1(data))</span><br></pre></td></tr></table></figure><p>与 5.2.1 节 计算前缀平均值的二次算法类似，复杂度为 <code>O(n^2)</code></p><h4 id="5-4-2-先排序">5.4.2 先排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique2</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;元素唯一性 先排序 O(n * log n)&quot;&quot;&quot;</span></span><br><span class="line">    temp = <span class="built_in">sorted</span>(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(temp)):</span><br><span class="line">        <span class="keyword">if</span> temp[i] == temp[i - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(unique2(data))</span><br></pre></td></tr></table></figure><p>循环执行了 n 次，Python 内置的 sorted 方法执行了 log n 次，故最后的复杂度为 <code>O(n * log n)</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（10）数据处理：增删改</title>
      <link href="/posts/51c8092d.html"/>
      <url>/posts/51c8092d.html</url>
      
        <content type="html"><![CDATA[<h1>数据处理：增删改</h1><p><a href="https://zhuanlan.zhihu.com/column/c_1864781236800720896">之前章节</a>介绍了如何查询数据，本章介绍数据处理里另外三个基本操作：增加、删除、更改数据库数据。</p><h2 id="1-增加数据">1 增加数据</h2><p>使用 <code>INSERT INTO</code> 语句向数据表里插入数据。</p><h3 id="1-1-VALUES-方法">1.1 <code>VALUES</code> 方法</h3><ul><li>按照列名默认顺序插入数据</li></ul><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2, ...);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据，默认顺序</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;IT&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入空值</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><ul><li>指定列名插入</li></ul><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line">(列名<span class="number">1</span>, 列名<span class="number">2</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2);</span><br></pre></td></tr></table></figure><blockquote><p>指定列名进行插入，顺序默认，未插入的列按照创建表时的默认值填充。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line">(dept_name, location)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;MKT&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> MKT       <span class="operator">|</span> Beijing  <span class="operator">|</span>  <span class="comment">-- dept_id 是创建时的主键，默认安装数字递增</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><ul><li>插入多条数据</li></ul><p>以上两个方法都可以通过使用 <code>,</code> 分隔的方式插入多条数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2, ...),</span><br><span class="line">   (val1, val2, ...),</span><br><span class="line">   ...</span><br><span class="line">   (val1, val2, ...);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2),</span><br><span class="line">       (val1, val2),</span><br><span class="line">       ...</span><br><span class="line">       (val1, val2);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;SALE&#x27;</span>, <span class="string">&#x27;Guangzhou&#x27;</span>),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;FINA&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>),</span><br><span class="line">       (<span class="number">6</span>, <span class="string">&#x27;MANA&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept(dept_id, dept_name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;IT&#x27;</span>),</span><br><span class="line">       (<span class="number">8</span>, <span class="string">&#x27;ACCT&#x27;</span>),</span><br><span class="line">       (<span class="number">9</span>, <span class="string">&#x27;LAW&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740470744341.png" alt=""></p><blockquote><p><code>VALUES</code> 关键字等价于 <code>VALUE</code> 关键字</p><p>字符和日期类型数据写在 <code>' '</code> 内</p></blockquote><h3 id="1-2-将查询结果增加到表中">1.2 将查询结果增加到表中</h3><p>使用 <code>INSERT</code> 语句和 <code>SELECT</code> 语句的组合实现先查询后增加。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 目标表</span><br><span class="line">(列名<span class="number">1</span>, 列名<span class="number">2</span>, ...)  <span class="comment">-- 可选</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">列名<span class="number">1</span>, 列名<span class="number">2</span>, ...  <span class="comment">-- 或者选择一些列</span></span><br><span class="line"><span class="keyword">FROM</span> 被查询的表</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>不需要 <code>VALUES</code> 子句，但是需要查询结果与 INSERT 目标表列相对应</li></ul><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line">    (dept_name, location)</span><br><span class="line"><span class="keyword">SELECT</span> dept_name,</span><br><span class="line">       location</span><br><span class="line"><span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740471589785.png" alt=""></p><h2 id="2-更新数据">2 更新数据</h2><p><code>UPDATE</code> 语句对数据表数据进行修改。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> 列名<span class="number">1</span><span class="operator">=</span>val1, 列名<span class="number">2</span><span class="operator">=</span>val2, ...</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>如果需要备份/回滚，提取设置</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> AUTOCOMMIT <span class="operator">=</span> <span class="literal">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UPDATE 语句 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;  <span class="comment">-- ROLLBACK 后，更新结果被撤回</span></span><br></pre></td></tr></table></figure><p>例如：更新 dept_id = 3 的 dept_name 为 IT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> dept</span><br><span class="line"><span class="keyword">SET</span> dept_name <span class="operator">=</span> <span class="string">&#x27;IT&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>如果不加入 <code>WHERE</code> 语句的条件，则会对整列进行修改。</li></ul><blockquote><p>【注意】对主键、外键更新时需要先确认是否正确。例如修改后的外键并不存在，则会报错！</p></blockquote><ul><li>更新的表达式也可以使用列名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> a <span class="operator">+</span> <span class="number">100</span>  <span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="3-删除数据">3 删除数据</h2><p>使用 <code>DELETE</code> 语句删除一行数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>如果不加入条件，则会清空表中数据（表仍然存在）</li></ul><p>例如：删除 id 为 10 的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】同样地，删除主键和外键都会带来问题，需要先处理关联表之间的联系，再进行删除。</p></blockquote><h2 id="4-计算列">4 计算列</h2><p>类似与 Excel 表格，由几列计算得到另一列。这样被计算得到的列称为计算列。在 <code>MySQL 8.0</code> 中，支持在 <code>CREATE</code> 和 <code>ALTER</code> 语句中定义计算列。</p><p>例如：创建一个新表，定义唯一主键 <code>id</code> ，以及用于计算的 <code>a</code> 和 <code>b</code> 两列。以及计算列 <code>c</code> 其中 <code>c = a + b</code> 即 c 列的数据由 a 列数据与 b 列数据相加得到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> calculate</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    a  <span class="type">INT</span>,</span><br><span class="line">    b  <span class="type">INT</span>,</span><br><span class="line">    c  <span class="type">INT</span> GENERATED ALWAYS <span class="keyword">AS</span> (a <span class="operator">+</span> b) VIRTUAL,</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>插入数据前，需要先创建表。使用计算列的前提是，必须在表的定义中指明哪一列计算列、如何计算得到。可以在创建 <code>CREATE</code> 时指明，也可以在后续修改表 <code>ALTER</code> 时指明。</p></blockquote><p>在表和计算列被定义好后，使用 <code>INSERT</code> 语句插入数据，MySQL 会自动进行计算填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> calculate</span><br><span class="line">    (a, b)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">100</span>, <span class="number">200</span>),</span><br><span class="line">       (<span class="number">120</span>, <span class="number">310</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740473410739.png" alt=""></p><p>更新数据时，同样会自动更新计算结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> calculate</span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> <span class="number">-100</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740473493702.png" alt=""></p><blockquote><p>但是不能对计算列进行修改数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> calculate</span><br><span class="line"><span class="keyword">SET</span> c <span class="operator">=</span> <span class="number">-100</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">3105</span> (HY000): The <span class="keyword">value</span> specified <span class="keyword">for</span> generated <span class="keyword">column</span> <span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> <span class="keyword">table</span> <span class="string">&#x27;calculate&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建神经网络 PyTorch 实战：猫狗分类问题训练全流程</title>
      <link href="/posts/c89b028f.html"/>
      <url>/posts/c89b028f.html</url>
      
        <content type="html"><![CDATA[<h1>搭建神经网络 PyTorch 实战: 猫狗分类问题训练全流程</h1><p>根据之前的知识 <a href="https://zhuanlan.zhihu.com/column/c_1864780737208799232">专栏：PyTorch 教程</a>，本文将一步一步详细介绍如何获取数据，自定义数据集，搭建神经网络，训练、验证和测试结果的全流程。针对的问题是 kaggle 经典竞赛：猫狗二分类问题（<a href="https://www.kaggle.com/competitions/dog-vs-cat-classification">dog-vs-cat-classification</a>）</p><p>相关代码均已开源在我的 Github 库 <a href="https://github.com/isKage/dog-vs-cat-classification">https://github.com/isKage/dog-vs-cat-classification</a> 。【注意】代码只是用于介绍搭建网络、训练模型，实际参考网络效果极差，不建议使用。文章根据 <a href="https://github.com/chenyuntc/pytorch-book">深度学习框架PyTorch：入门与实践 (陈云) </a> 整理。</p><p>注意数据集较大，如果想要训练出结果需要 GPU。如果只是学习如何训练搭建网络等流程，可以自己在根目录下创建 <code>AllData</code> 文件夹，模拟数据集文件结构放入部分图片。</p><p>如果想直接运行我的 Github 代码，还可以阅读 <a href="https://github.com/isKage/dog-vs-cat-classification/blob/main/README.md">README.md</a> 文档。</p><h2 id="0-项目目录">0 项目目录</h2><p>如果直接下载我的 Github 源码。进入一个空目录后，打开终端输入【或者跟着后文一步一步编写】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/dog-vs-cat-classification.git</span><br></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AllData  <span class="comment"># 数据集存放</span></span><br><span class="line">├── README.md</span><br><span class="line">├── checkpoints  <span class="comment"># 训练好的模型        【需要自己创建】</span></span><br><span class="line">├── config.py  <span class="comment"># 配置文件，如何创建见下  【需要自己创建】</span></span><br><span class="line">├── data  <span class="comment"># 自定义数据集处理包</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   │   └── dataset.cpython-312.pyc</span><br><span class="line">│   └── dataset.py</span><br><span class="line">├── logs  <span class="comment"># 存放 tensorboard logs 文件 【需要自己创建】</span></span><br><span class="line">├── main.py  <span class="comment"># 主程序</span></span><br><span class="line">├── models  <span class="comment"># 网络模型定义</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── basic.py</span><br><span class="line">│   └── cnn.py</span><br><span class="line">├── notes  <span class="comment"># 一些笔记</span></span><br><span class="line">│   ├── kaggle_download.md</span><br><span class="line">│   └── note06_dog_vs_cat.md</span><br><span class="line">├── requirements.txt  <span class="comment"># 依赖包</span></span><br><span class="line">├── result.csv  <span class="comment"># 预测/测试结果</span></span><br><span class="line">└── utils  <span class="comment"># 一些辅助包</span></span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── visualizer.py  <span class="comment"># 封装可视化功能</span></span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="1-获取数据">1 获取数据</h2><p>从 kaggle 官网下载数据集，可以自定义数据集的统一放置路径，方便未来训练使用。具体教程见：<a href="https://zhuanlan.zhihu.com/p/25732245405">从 Kaggle 下载数据集（mac 和 win 端）</a></p><p>下载后解压，数据集结构大致为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dog-vs-cat-classification</span><br><span class="line">├── dog-vs-cat-classification.zip</span><br><span class="line">├── sample_submission.csv</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   └── <span class="built_in">test</span> <span class="comment"># 测试图片</span></span><br><span class="line">└── train</span><br><span class="line">    └── train  <span class="comment"># 训练图片</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740458311037.png" alt=""></p><h2 id="2-自定义数据集">2 自定义数据集</h2><p>根据如上的数据集文件结构，我们自定义数据集 Dataset 类。相关教程见：<a href="https://zhuanlan.zhihu.com/p/23210343084">数据处理：Dataset 类和 Dataloader 类</a>。</p><p>定义 Python 函数包 <code>data</code> ，结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">├── __init__.py  <span class="comment"># 初始化包</span></span><br><span class="line">└── dataset.py  <span class="comment"># 自定义的 dataset 类</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>__init__.py</code> 声明 <code>data</code> 文件夹视为 Python 的程序包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .dataset <span class="keyword">import</span> DogVsCatDataset</span><br></pre></td></tr></table></figure><p>其中 <code>.dataset</code> 指向文件 <code>dataset.py</code> 而 <code>DogVsCatDataset</code> 为我们在 <code>dataset.py</code> 中自定义的类</p><p>如此就可以在其他程序里使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> DogVsCatDataset</span><br></pre></td></tr></table></figure><ul><li><code>dataset.py</code> 中定义读取猫狗分类问题的数据集 Dataset 类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataset.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogVsCatDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载猫狗数据集&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root, trans=<span class="literal">None</span>, mode=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param root: 数据集文件路径</span></span><br><span class="line"><span class="string">        :param trans: 变换操作</span></span><br><span class="line"><span class="string">        :param mode: [&#x27;train&#x27;, &#x27;val&#x27;, &#x27;test&#x27;]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> mode <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;val&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]  <span class="comment"># 判断 mode 是否合法，否则报错</span></span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode != <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="comment"># 训练集和验证集要把猫狗训练数据都获取</span></span><br><span class="line">            root = os.path.join(root, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">            img_dir_dict = [os.path.join(root, <span class="string">&#x27;cats&#x27;</span>, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root, <span class="string">&#x27;cats&#x27;</span>))]</span><br><span class="line">            img_dir_dict += [os.path.join(root, <span class="string">&#x27;dogs&#x27;</span>, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root, <span class="string">&#x27;dogs&#x27;</span>))]</span><br><span class="line">            random.shuffle(img_dir_dict)  <span class="comment"># 猫狗图片打乱</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 测试集路径不同</span></span><br><span class="line">            root = os.path.join(root, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">            img_dir_dict = [os.path.join(root, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root))]</span><br><span class="line"></span><br><span class="line">        img_num = <span class="built_in">len</span>(img_dir_dict)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存入图片路径</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict</span><br><span class="line">        <span class="comment"># 划分数据集</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.mode == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict[:<span class="built_in">int</span>(img_num * <span class="number">0.7</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict[<span class="built_in">int</span>(img_num * <span class="number">0.7</span>):]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> trans <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 数据转换操作，测试、验证和训练集的数据转换有所区别</span></span><br><span class="line">            normalize = transforms.Normalize(</span><br><span class="line">                mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], </span><br><span class="line">                std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 测试集 test 和验证集 val 不需要数据增强</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;test&quot;</span> <span class="keyword">or</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;val&quot;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.trans = transforms.Compose([</span><br><span class="line">                    transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                    transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                    transforms.ToTensor(),</span><br><span class="line">                    normalize</span><br><span class="line">                ])</span><br><span class="line">            <span class="comment"># 训练集 需要数据增强</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.trans = transforms.Compose([</span><br><span class="line">                    transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                    transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">                    transforms.RandomHorizontalFlip(),</span><br><span class="line">                    transforms.ToTensor(),</span><br><span class="line">                    normalize</span><br><span class="line">                ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        真正开始读取数据，对于测试集 test 返回 id，如 100.jpg 返回 100</span></span><br><span class="line"><span class="string">        :param index: 图片下标</span></span><br><span class="line"><span class="string">        :return: 返回张量数据和标签</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        img_path = <span class="variable language_">self</span>.img_dir_dict[index]</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">            label = <span class="built_in">int</span>(os.path.basename(img_path).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># dog is 1, cat is 0</span></span><br><span class="line">            label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> os.path.basename(img_path).split(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取图片</span></span><br><span class="line">        data = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        data = <span class="variable language_">self</span>.trans(data)</span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回图片个数</span></span><br><span class="line"><span class="string">        :return: 数据集大小</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.img_dir_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = <span class="string">&quot;../AllData/competitions/dog-vs-cat-classification&quot;</span></span><br><span class="line">    train_dataset = DogVsCatDataset(root, mode=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    test_dataset = DogVsCatDataset(root, mode=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(train_dataset))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(test_dataset))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(os.path.basename(train_dataset.img_dir_dict[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(os.path.basename(test_dataset.img_dir_dict[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="3-搭建网络模型">3 搭建网络模型</h2><p>创建 Python 包 <code>models</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">models</span><br><span class="line">├── __init__.py</span><br><span class="line">├── basic.py</span><br><span class="line">└── cnn.py</span><br></pre></td></tr></table></figure><ul><li>同样地，使用 <code>__init__.py</code> 声明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .cnn <span class="keyword">import</span> AlexNetClassification</span><br></pre></td></tr></table></figure><ul><li>为了方便的保存模型和加载模型，我们定义一个基类，继承 <code>nn.Module</code> 提前添加 <code>save</code> 和 <code>load</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># basic.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicModule</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作为基类，继承 nn.Module 但增加了模型保存和加载功能 save and load</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="built_in">str</span>(<span class="built_in">type</span>(<span class="variable language_">self</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, model_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据模型路径加载模型</span></span><br><span class="line"><span class="string">        :param model_path: 模型路径</span></span><br><span class="line"><span class="string">        :return: 模型</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.load_state_dict(torch.load(model_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, filename=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        保存模型，默认使用 &quot;模型名字 + 时间&quot; 作为文件名，也可以自定义</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            filename = <span class="string">&#x27;checkpoints/&#x27;</span> + <span class="variable language_">self</span>.model_name + <span class="string">&#x27;_&#x27;</span> + time.strftime(<span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span>) + <span class="string">&#x27;.pth&#x27;</span></span><br><span class="line">        torch.save(<span class="variable language_">self</span>.state_dict(), filename)</span><br><span class="line">        <span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure><ul><li>然后定义真正的网络模型，我们这使用了最传统简单的 AlexNet 网络【故效果不佳，可以前往 kaggle 查看更好的模型】，神经网络搭建教程可见：<a href="https://zhuanlan.zhihu.com/p/22793450207">利用 torch.nn 搭建神经网络</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cnn.py</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .basic <span class="keyword">import</span> BasicModule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlexNetClassification</span>(<span class="title class_ inherited__">BasicModule</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes=<span class="number">2</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(AlexNetClassification, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="string">&#x27;CNNClassification&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 特征提取部分</span></span><br><span class="line">        <span class="variable language_">self</span>.features = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">11</span>, stride=<span class="number">4</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">192</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">192</span>, <span class="number">384</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">384</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分类部分</span></span><br><span class="line">        <span class="variable language_">self</span>.classifier = nn.Sequential(</span><br><span class="line">            nn.Dropout(),</span><br><span class="line">            nn.Linear(<span class="number">256</span> * <span class="number">6</span> * <span class="number">6</span>, <span class="number">4096</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Dropout(),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, num_classes),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.features(x)</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)</span><br><span class="line">        x = <span class="variable language_">self</span>.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="4-可视化插件">4 可视化插件</h2><p>为了方便直观地观测训练过程，我们可以提前自定义一个可视化的 Python 包，如上一样的套路</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">utils</span><br><span class="line">├── __init__.py</span><br><span class="line">└── visualizer.py</span><br></pre></td></tr></table></figure><ul><li><code>__init__py</code>  声明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .visualizer <span class="keyword">import</span> Visualizer</span><br></pre></td></tr></table></figure><ul><li><code>visualizer.py</code> 中封装可视化的类，这里使用的是 Tensorboard ，具体教程可见：<a href="https://zhuanlan.zhihu.com/p/23467081773">可视化工具：Tensorboard</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visualizer</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    封装了基本的 TensorBoard 操作。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, log_dir</span>):</span><br><span class="line">        <span class="comment"># 初始化 TensorBoard SummaryWriter</span></span><br><span class="line">        <span class="variable language_">self</span>.writer = SummaryWriter(log_dir=log_dir)</span><br><span class="line">        <span class="variable language_">self</span>.index = &#123;&#125;  <span class="comment"># 用于追踪图表的点</span></span><br><span class="line">        <span class="variable language_">self</span>.log_text = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 用于记录日志信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reinit</span>(<span class="params">self, log_dir, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        重新初始化 TensorBoard writer，并设置新的日志目录。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.writer = SummaryWriter(log_dir=log_dir)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plot</span>(<span class="params">self, name, y, step=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将标量值记录到 TensorBoard。</span></span><br><span class="line"><span class="string">        例如：plot(&#x27;loss&#x27;, 1.00)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(name, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_scalar(name, y, step)</span><br><span class="line">        <span class="variable language_">self</span>.index[name] = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">img</span>(<span class="params">self, name, img_, step=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将图像记录到 TensorBoard。</span></span><br><span class="line"><span class="string">        img_ 应该是一个张量（例如，torch.Tensor）。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(name, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_images(name, img_, step)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">self, info, step=<span class="literal">None</span>, win=<span class="string">&#x27;log_text&#x27;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        记录信息为文本（可选）。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(win, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.log_text += (<span class="string">&#x27;[&#123;time&#125;] &#123;info&#125; &lt;br&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            time=time.strftime(<span class="string">&#x27;%m%d_%H%M%S&#x27;</span>),</span><br><span class="line">            info=info))</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_text(win, <span class="variable language_">self</span>.log_text, step)</span><br><span class="line">        <span class="variable language_">self</span>.index[win] = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        允许访问其他 TensorBoard writer 的函数。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(<span class="variable language_">self</span>.writer, name)</span><br></pre></td></tr></table></figure><blockquote><p>使用 tensorboard ：下载 tensorboard ，程序完成后使用命令开启</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=./logs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740458248881.png" alt=""></p><h2 id="5-config-本地配置和-fire-包">5 config 本地配置和 fire 包</h2><h3 id="5-1-config-本地配置">5.1 config 本地配置</h3><p>创建 <code>config.py</code> 用于提取写好训练的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultConfig</span>:</span><br><span class="line">    model = <span class="string">&#x27;AlexNetClassification&#x27;</span></span><br><span class="line">    root = <span class="string">&#x27;./AllData/competitions/dog-vs-cat-classification&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取最新的文件</span></span><br><span class="line">    param_path = <span class="string">&#x27;./checkpoints/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.listdir(param_path):</span><br><span class="line">        load_model_path = <span class="literal">None</span>  <span class="comment"># 加载预训练的模型的路径，为None代表不加载</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        load_model_path = os.path.join(</span><br><span class="line">            param_path,</span><br><span class="line">            <span class="built_in">sorted</span>(</span><br><span class="line">                os.listdir(param_path),</span><br><span class="line">                key=<span class="keyword">lambda</span> x: datetime.strptime(</span><br><span class="line">                    x.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.pth&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )[-<span class="number">1</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        use_gpu = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        use_gpu = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    num_workers = <span class="number">0</span></span><br><span class="line">    print_freq = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    max_epochs = <span class="number">10</span></span><br><span class="line">    lr = <span class="number">0.003</span></span><br><span class="line">    lr_decay = <span class="number">0.5</span>  <span class="comment"># when val_loss increase, lr = lr*lr_decay</span></span><br><span class="line">    weight_decay = <span class="number">0e-5</span>  <span class="comment"># 损失函数</span></span><br><span class="line"></span><br><span class="line">    tensorboard_log_dir = <span class="string">&#x27;./logs&#x27;</span></span><br><span class="line"></span><br><span class="line">    result_file = <span class="string">&#x27;result.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据字典kwargs 更新 config参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, k):</span><br><span class="line">                warnings.warn(<span class="string">&quot;Warning: opt has not attribute %s&quot;</span> % k)</span><br><span class="line">            <span class="built_in">setattr</span>(<span class="variable language_">self</span>, k, v)</span><br><span class="line"></span><br><span class="line">        config.device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span>) <span class="keyword">if</span> config.use_gpu <span class="keyword">else</span> torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;user config:&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="variable language_">self</span>.__class__.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(k, <span class="built_in">getattr</span>(<span class="variable language_">self</span>, k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = DefaultConfig()</span><br></pre></td></tr></table></figure><h3 id="5-2-fire-包">5.2 fire 包</h3><p><code>fire</code> 包能够在终端直接进行传参和训练。先下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fire</span><br></pre></td></tr></table></figure><p>而后当主程序 <code>main.py</code> 中定义了训练、测试、验证函数时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">val</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>于是可以在终端中使用如下方法进行训练和传入参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train --参数1=&lt;param&gt; --参数2=&lt;param&gt;</span><br></pre></td></tr></table></figure><h2 id="6-主程序">6 主程序</h2><h3 id="6-1-训练和验证函数">6.1 训练和验证函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> DogVsCatDataset</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> Visualizer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="comment"># 根据命令行参数更新配置</span></span><br><span class="line">    config._parse(kwargs)</span><br><span class="line">    vis = Visualizer(log_dir=config.tensorboard_log_dir)  <span class="comment"># 使用 TensorBoard</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step1: 模型</span></span><br><span class="line">    model = <span class="built_in">getattr</span>(models, config.model)()</span><br><span class="line">    model.to(config.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2: 数据</span></span><br><span class="line">    train_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;train&quot;</span>)</span><br><span class="line">    val_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;val&quot;</span>)</span><br><span class="line">    train_dataloader = DataLoader(train_data, config.batch_size, shuffle=<span class="literal">True</span>, num_workers=config.num_workers)</span><br><span class="line">    val_dataloader = DataLoader(val_data, config.batch_size, shuffle=<span class="literal">False</span>, num_workers=config.num_workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step3: 目标函数和优化器</span></span><br><span class="line">    criterion = torch.nn.CrossEntropyLoss()</span><br><span class="line">    lr = config.lr</span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=config.weight_decay)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化误差</span></span><br><span class="line">    previous_loss = <span class="number">1e10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(config.max_epochs):</span><br><span class="line">        epoch_loss = <span class="number">0</span>  <span class="comment"># 记录当前 epoch 的平均损失</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ii, (data, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_dataloader):</span><br><span class="line">            <span class="comment"># 训练模型参数</span></span><br><span class="line">            inputs = data.to(config.device)</span><br><span class="line">            target = label.to(config.device)</span><br><span class="line"></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            score = model(inputs)</span><br><span class="line">            loss = criterion(score, target)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            epoch_loss += loss.item()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录损失到 TensorBoard</span></span><br><span class="line">            <span class="keyword">if</span> (ii + <span class="number">1</span>) % config.print_freq == <span class="number">0</span>:</span><br><span class="line">                vis.plot(<span class="string">&#x27;loss&#x27;</span>, loss.item(), step=epoch * <span class="built_in">len</span>(train_dataloader) + ii)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        model.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在每个 epoch 结束后验证模型</span></span><br><span class="line">        val_accuracy = val(model, val_dataloader)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Validation Accuracy: <span class="subst">&#123;val_accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        vis.plot(<span class="string">&#x27;val_accuracy&#x27;</span>, val_accuracy, step=epoch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录训练日志</span></span><br><span class="line">        vis.log(</span><br><span class="line">            <span class="string">f&quot;epoch:<span class="subst">&#123;epoch&#125;</span>, lr:<span class="subst">&#123;lr&#125;</span>, loss:<span class="subst">&#123;epoch_loss / <span class="built_in">len</span>(train_dataloader):<span class="number">.4</span>f&#125;</span>, val_accuracy:<span class="subst">&#123;val_accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新学习率</span></span><br><span class="line">        <span class="keyword">if</span> epoch_loss / <span class="built_in">len</span>(train_dataloader) &gt; previous_loss:</span><br><span class="line">            lr = lr * config.lr_decay</span><br><span class="line">            <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">                param_group[<span class="string">&#x27;lr&#x27;</span>] = lr</span><br><span class="line"></span><br><span class="line">        previous_loss = epoch_loss / <span class="built_in">len</span>(train_dataloader)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">val</span>(<span class="params">model, dataloader</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算模型在验证集上的准确率等信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii, (val_input, label) <span class="keyword">in</span> tqdm(<span class="built_in">enumerate</span>(dataloader)):</span><br><span class="line">        val_input = val_input.to(config.device)</span><br><span class="line">        label = label.to(config.device)</span><br><span class="line">        score = model(val_input)</span><br><span class="line">        _, predicted = score.<span class="built_in">max</span>(<span class="number">1</span>)</span><br><span class="line">        total += label.size(<span class="number">0</span>)</span><br><span class="line">        correct += (predicted == label).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    model.train()</span><br><span class="line">    accuracy = <span class="number">100.</span> * correct / total</span><br><span class="line">    <span class="keyword">return</span> accuracy</span><br></pre></td></tr></table></figure><h3 id="6-2-测试和写入结果函数">6.2 测试和写入结果函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    config._parse(kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># configure model</span></span><br><span class="line">    model = <span class="built_in">getattr</span>(models, config.model)().<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">if</span> config.load_model_path:</span><br><span class="line">        model.load(config.load_model_path)</span><br><span class="line"></span><br><span class="line">    model.to(config.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data</span></span><br><span class="line">    test_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    test_dataloader = DataLoader(test_data, batch_size=config.batch_size, shuffle=<span class="literal">False</span>, num_workers=config.num_workers)</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> ii, (data, path) <span class="keyword">in</span> tqdm(<span class="built_in">enumerate</span>(test_dataloader)):</span><br><span class="line">        inputs = data.to(config.device)</span><br><span class="line">        score = model(inputs)</span><br><span class="line"></span><br><span class="line">        predicted_label = score.<span class="built_in">max</span>(dim=<span class="number">1</span>)[<span class="number">1</span>].detach().tolist()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果你要保存为 id, label 的格式，修改为：</span></span><br><span class="line">        batch_results = [(path_.item(), label_) <span class="keyword">for</span> path_, label_ <span class="keyword">in</span> <span class="built_in">zip</span>(path, predicted_label)]</span><br><span class="line"></span><br><span class="line">        results += batch_results</span><br><span class="line"></span><br><span class="line">    write_csv(results, config.result_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_csv</span>(<span class="params">results, file_name</span>):</span><br><span class="line">    <span class="keyword">import</span> csv</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;label&#x27;</span>])</span><br><span class="line">        writer.writerows(results)</span><br></pre></td></tr></table></figure><p>最后使用 fire 包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line">    fire.Fire()</span><br></pre></td></tr></table></figure><h2 id="7-训练和预测过程">7 训练和预测过程</h2><h3 id="7-1-开始训练">7.1 开始训练</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>一定要先定义好参数和数据集路径。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/47ef5337feb656be8b726fe2cdcf8f6f_720.png" alt=""></p><h3 id="7-2-测试">7.2 测试</h3><p>在上面训练结束后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="7-3-结果">7.3 结果</h3><p>得到结果，写入了 <code>result.csv</code> ，之后可以提交到 kaggle</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Kaggle 下载数据集（mac 和 win 端）</title>
      <link href="/posts/86ecc33b.html"/>
      <url>/posts/86ecc33b.html</url>
      
        <content type="html"><![CDATA[<h1>从 Kaggle 下载数据集</h1><p>Kaggle 是全球最大的数据科学社区，里面具有丰富的数据集和相关教程代码，是所有数据科学相关专业和从业人员必须熟悉的网站。</p><p>本文介绍如何使用终端/命令行工具从 Kaggle 下载数据（mac 和 win 系统）。官网地址 <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p><hr><h2 id="1-注册-kaggle-账户">1 注册 kaggle 账户</h2><p>进入官网地址 <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215562957.png" alt=""></p><p>点击【Register】注册</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215612893.png" alt=""></p><p>可以选择 Google 账户登陆（【推荐】），或换邮箱注册。</p><h2 id="2-下载-API-Token">2 下载 API Token</h2><p>点击右侧头像，选择【Settings】，找到【API】，点击【Create New Token】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215710310.png" alt=""></p><p>点击后会下载一个 <code>kaggle.json</code> 文件，保存好这个文件，等会使用。</p><h2 id="3-安装-kaggle-包">3 安装 kaggle 包</h2><p>新建虚拟环境，并在虚拟环境中下载安装 kaggle 包</p><blockquote><p>虚拟环境是可选，但推荐在虚拟环境中操作，有利于后续管理。有关如何搭建虚拟环境可见教程 <a href="https://zhuanlan.zhihu.com/p/21629604277">Conda 创建虚拟环境全流程</a></p></blockquote><p>使用 <code>pip</code> 下载，在终端中（激活环境后）输入，然后回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kaggle</span><br></pre></td></tr></table></figure><p>完成后可以继续输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions list</span><br></pre></td></tr></table></figure><p>此时应该无法正常使用 kaggle ，需要我们去往用户目录下配置。</p><h2 id="4-配置-kaggle">4 配置 <code>.kaggle</code></h2><h3 id="4-1-MacOS-系统">4.1 MacOS 系统</h3><p>对于 mac 系统，前往用户目录下。一般为 <code>~</code> 或 <code>/Users/&lt;你的用户名&gt;</code> ，在终端 (Terminal) 中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><blockquote><p>一般默认打开终端就已经是位于用户目录下</p></blockquote><p>此时显示如下，表示成功进入用户目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;你的用户名&gt;@MacBook ~ % </span><br></pre></td></tr></table></figure><p>然后再输入如下指令，就可以打开文件夹 <code>.kaggle</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .kaggle</span><br></pre></td></tr></table></figure><p>此时再把第二步下载的 API Token 文件 <code>kaggle.json</code> 移入 <code>.kaggle</code> 文件夹。</p><blockquote><p>对于 mac 用户打开用户目录比较复杂。<code>open 文件夹名</code> 指令能直接以资源管理器的方式打开。</p><p>与此同时，mac 还会默认隐藏一些文件夹，例如这里的 <code>.kaggle</code> ，可以在进入目录之后，同时按下键盘的 <code>cmd + shift + .</code> 就可以查看隐藏的文件和文件夹。</p></blockquote><ul><li>此时便可以正常使用 kaggle</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions list</span><br></pre></td></tr></table></figure><blockquote><p>如果实在虚拟环境中 pip 安装的 kaggle ，需要激活虚拟环境才能正常使用。</p></blockquote><h3 id="4-2-Windows-系统">4.2 Windows 系统</h3><p>Windows 系统操作与 mac 相同，而且寻找用户文件夹更为简单。（类似地，【推荐】在虚拟环境里操作）</p><ul><li>如果使用 PowerShell 终端的话，指令相同，只是用户目录一般为</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\&lt;你的用户名&gt;</span><br></pre></td></tr></table></figure><p>然后打开文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer .kaggle</span><br></pre></td></tr></table></figure><p>相同地，将 <code>kaggle.json</code> 文件移入 <code>.kaggle</code> 文件夹。</p><ul><li>或者直接点击【C 盘】，点击【Users】，进入【&lt;你的用户名&gt;】，找到【.kaggle】文件夹实行与上面相同的操作。Windows 电脑一般不会隐藏文件。</li></ul><h2 id="5-配置-kaggle-数据集下载路径">5 配置 kaggle 数据集下载路径</h2><p>我们希望数据能下载在同一处文件夹内，方便以后程序的读取，而不用每次都在不同的地方下载数据，这会造成电脑存储空间的浪费。</p><p>这一步操作 mac 和 win 系统没有区别，只是路径的书写要注意。</p><ul><li>打开【.kaggle】文件夹内的【kaggle.json】文件进行编辑。</li></ul><p>原始 <code>kaggle.json</code> 文件默认为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此时在文件中添加一行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># mac</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/用户名/AllData&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># win</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\AllData&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如此以后所有的数据都会下载在 <code>/Users/用户名/AllData</code> AllData 文件夹里。（win 可以存放在 D 盘，注意要使用两个反斜杠 <code>\\</code> ）</p><h2 id="6-从-kaggle-官网下载数据">6 从 kaggle 官网下载数据</h2><p>在上面都配置好后，可以前往 kaggle 官网下载数据。下面以猫狗分类竞赛数据集为例，地址 <a href="https://www.kaggle.com/competitions/dog-vs-cat-classification/data">dog-vs-cat-classification</a></p><ul><li>找到【Data】界面，然后向下翻找 kaggle 命令</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740217509899.png" alt=""></p><p>例如此处输入如下，就可以正常下载了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions download -c dog-vs-cat-classification</span><br></pre></td></tr></table></figure><p>下载完成后去往我们设置的 AllData 文件夹查看数据集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AllData</span><br><span class="line">└── competitions</span><br><span class="line">    └── dog-vs-cat-classification</span><br><span class="line">        └── dog-vs-cat-classification.zip</span><br></pre></td></tr></table></figure><p>会得到一个 <code>.zip</code> 文件，解压后即为数据集。</p>]]></content>
      
      
      <categories>
          
          <category> Kaggle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> Python </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> kaggle </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 面向对象程序设计</title>
      <link href="/posts/e3ce1591.html"/>
      <url>/posts/e3ce1591.html</url>
      
        <content type="html"><![CDATA[<h1>Python 面向对象编程</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><h2 id="1-类定义">1 类定义</h2><p>类是面向对象程序设计中抽象的主要方法。下面以创建 <code>CreditCard</code> 类作为例子讲解面向对象如何定义类。</p><h3 id="1-1-例：CreditCard-类">1.1 例：CreditCard 类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;有关一个用户的信用卡&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, customer, bank, acnt, limit</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个信用卡实例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            customer (str): 用户名</span></span><br><span class="line"><span class="string">            bank (str): 银行名</span></span><br><span class="line"><span class="string">            acnt (str): 用户账户ID</span></span><br><span class="line"><span class="string">            limit (float): 信用卡限额</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._customer = customer</span><br><span class="line">        <span class="variable language_">self</span>._bank = bank</span><br><span class="line">        <span class="variable language_">self</span>._acnt = acnt</span><br><span class="line">        <span class="variable language_">self</span>._limit = limit</span><br><span class="line">        <span class="variable language_">self</span>._balance = <span class="number">0.</span>  <span class="comment"># 初始账户额度为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_customer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回用户名&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._customer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回银行名&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._bank</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_acnt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回账户ID&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._acnt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_limit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回额度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._limit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回是否能继续提款，即检查是否超出额度</span></span><br><span class="line"><span class="string">        :param price: 希望提取的额度</span></span><br><span class="line"><span class="string">        :return: True 如果加上目前所用额度没有超出限度，否则 False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._balance + price &gt; <span class="variable language_">self</span>._limit:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._balance += price</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_payment</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用现金抵消了部分信用卡贷款&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._balance -= amount</span><br></pre></td></tr></table></figure><h4 id="1-1-2-self-标识符">1.1.2 <code>self</code> 标识符</h4><p><code>self</code> 代表了一个实例，可以理解为对象自己。同时，<code>self</code> 也确定了调用方法时作用的对象。例如 <code>obj.get_customer()</code> 表示对实例化后的对象 <code>obj</code> 调用方法 <code>get_customer()</code> 。</p><h4 id="1-1-3-init-方法">1.1.3 <code>__init__()</code> 方法</h4><p>在面向对象编程中，我们称位于类定义 <code>class</code> 之中的各种函数 <code>def</code> 为方法。而 <code>__init__()</code> 称为初始化方法，它是当实例化对象时首先被执行的。在这个例子中，参数除了对象自己 <code>self</code> ，也包含了 <code>customer, bank, acnt, limit</code> 这些都是初始化时需要传入的。</p><h4 id="1-1-4-其他方法">1.1.4 其他方法</h4><p>类似于初始化方法，其他的函数也是接受参数，返回结果。例如：<code>charge()</code> 方法，使用 <code>obj.charge(100)</code> 表示对于对象 <code>obj</code> ，传入参数 <code>price = 100</code> ，然后返回一个结果。</p><h4 id="1-1-5-变量名">1.1.5 <code>_</code> 变量名</h4><p>在数据成员名称中的前加下划线，比如 <code>_balance</code> ，表明它被设计为非公有的（nonpublic）。类的用户不应该直接访问这样的成员。可以提供类似于 <code>get_balance</code> 的访问函数，以提供拥有只读访问特性的类的用户。</p><h3 id="1-2-实例化">1.2 实例化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc = CreditCard(customer=<span class="string">&quot;John Doe&quot;</span>, bank=<span class="string">&quot;Nation Bank&quot;</span>, acnt=<span class="string">&quot;123 456 789&quot;</span>, limit=<span class="number">1000.</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>cc = CreditCard()</code> 并传入初始化参数的方式实例化对象。此时就可以对对象 <code>cc</code> 进行操作，调用方法。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740044330309.png" alt=""></p><h3 id="1-3-错误检查">1.3 错误检查</h3><p><code>CreditCard</code> 类的实现方法不够稳健：</p><ul><li>例如：没有明确地检查参数的类型，如果用户创建了一个类似于 <code>visa.charge('candy)</code> 的调用，代码可能会崩溃。所以应该设计一些抛出异常。</li><li>例如：逻辑错误的。如果允许用户收取一个类似于 <code>visa.charge(-300)</code> 的负价格，这将导致用户的余额变少，这是不和逻辑的</li></ul><p>所以，这个例子只是介绍面向对象编程时，定义类、实例化和调用方法的基础知识。之后需要不断完善。</p><h3 id="1-4-对类进行测试">1.4 对类进行测试</h3><p>一般对类的定义会单独放在一个 <code>.py</code> 文件中，那么我们需要对类进行检查，测试其是否合理，是否报错。但是，如果通过 <code>from ... import ...</code> 的方法导入主程序测试显然不是我们希望的。所以，我们可以在定义类的 <code>.py</code> 文件下使用 <code>if __name__ = '__main__':</code> 的方法。</p><ul><li><code>if __name__ = '__main__':</code> ：这个判断表示，只有当当前文件以主程序的方式运行时，<code>if</code> 语句后面的内容才运行。这样可以避免在 <code>from ... import ...</code> 代入类时，连带运行 <code>if</code> 语句后的测试语句。</li></ul><p>例如：在当前目录下创建文件夹 <code>utils</code> 内部放置文件 <code>cc.py</code> ，在 <code>cc.py</code> 书写类的定义，于是可以代入类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.cc <span class="keyword">import</span> CreditCard</span><br><span class="line"></span><br><span class="line">cc_new = CreditCard(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Bank1&quot;</span>, <span class="string">&quot;123 456 789&quot;</span>, <span class="number">3010.</span>)</span><br></pre></td></tr></table></figure><p>而在文件 <code>./utils/cc.py</code> 中就可以书写 <code>if __name__ = '__main__':</code> 的测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>: ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    wallet = []</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Bank1&quot;</span>, <span class="string">&quot;123 456 789&quot;</span>, <span class="number">3010.</span>))</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Bank2&quot;</span>, <span class="string">&quot;456 123 789&quot;</span>, <span class="number">6210.</span>))</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;Ann&quot;</span>, <span class="string">&quot;Bank3&quot;</span>, <span class="string">&quot;789 456 123&quot;</span>, <span class="number">4010.</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">0</span>].charge(<span class="number">1000.</span>))</span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">1</span>].charge(<span class="number">2000.</span>))</span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">2</span>].charge(<span class="number">5000.</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> account <span class="keyword">in</span> wallet:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Customer: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_customer()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Balance: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_balance()))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> account.get_balance() &gt; <span class="number">100.</span>:</span><br><span class="line">            account.make_payment(<span class="number">100.</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;New Balance: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_balance()))</span><br></pre></td></tr></table></figure><h2 id="2-运算符重载">2 运算符重载</h2><h3 id="2-1-介绍">2.1 介绍</h3><p>Python 的内置类为许多操作提供了自然的语义。比如，<code>a + b</code> 可以是数值相加，也可以是字符串相连。</p><p>默认情况下，对于新的类来说，<code>+</code> 操作符是未定义的，可通过<strong>操作符重载</strong>来定义它。例如：在类的定义里定义方法 <code>__add__()</code> 即可定义 <code>+</code> 的含义。</p><p>以 <code>a + b</code> 为例，其中 <code>a</code> 和 <code>b</code> 均为字符串，则 <code>a + b</code> 能成立是因为 Python 内置类 <code>字符串</code> 定义了方法 <code>__add__()</code> 将其表达为字符串相连，于是 <code>a + b</code> 才会正常使用。类似地，自定义类时也可以去重载这些运算符，下面是常见的重载：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740048941341.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740048963901.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740049031958.png" alt=""></p><h3 id="2-2-例：多维向量类">2.2 例：多维向量类</h3><p>下面通过定义向量，来解释如何自定义重载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多维向量&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;d 维度向量&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._coords = [<span class="number">0</span>] * d  <span class="comment"># 初始化 d 维向量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取维度: 重载 len(a)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._coords)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第 k 个维度的值: 重载 a[k]&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._coords[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, k, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置第 k 个维度的值为 v: 重载 a[k] = v&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._coords[k] = v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义向量加法: 重载 a + b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) != <span class="built_in">len</span>(other):  <span class="comment"># 此处可以直接使用重载后的定义</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Dimensions must be the same!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        result = Vector(<span class="built_in">len</span>(<span class="variable language_">self</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            result[i] = <span class="variable language_">self</span>[i] + other[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义向量减法: 重载 a - b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) != <span class="built_in">len</span>(other):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Dimensions must be the same!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        result = Vector(<span class="built_in">len</span>(<span class="variable language_">self</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            result[i] = <span class="variable language_">self</span>[i] - other[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断向量坐标是否相等: 重载 a == b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._coords == other._coords</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断向量坐标是否不相等: 重载 a != b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> <span class="variable language_">self</span> == other  <span class="comment"># 等价于 self.__eq__(other) 直接使用重载后的定义</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;以字符串的形式展现这个向量类: 重载 str(a) 或 a 可以以字符串形式展示&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>._coords)[<span class="number">1</span>:-<span class="number">1</span>] + <span class="string">&#x27;&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>以上的方法各个方法都重载了一些运算符，具体解释见代码注释。</p><h3 id="2-3-补：自定义-Python-的包">2.3 补：自定义 Python 的包</h3><p>在上面引入类时，我们使用了 <code>from utils.cc import CreditCard</code> ，这并不规范。我们可以将类定义写入一个 python 文件，然后统一放在文件夹 utils 中，并且再写一个 <code>__init__.py</code> 文件将 utils 文件夹整个变成一个标准的 python 包，目录结构见下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./utils</span><br><span class="line">├── __init__.py</span><br><span class="line">├── cc.py</span><br><span class="line">└── vector.py</span><br></pre></td></tr></table></figure><p>然后在 <code>__init__.py</code> 文件中写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> .cc <span class="keyword">import</span> CreditCard</span><br><span class="line"><span class="keyword">from</span> .vector <span class="keyword">import</span> Vector</span><br></pre></td></tr></table></figure><p>如此便可在其他文件中直接引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> CreditCard, Vector</span><br></pre></td></tr></table></figure><h2 id="3-迭代器">3 迭代器</h2><h3 id="3-1-介绍">3.1 介绍</h3><p>集合迭代器（iterator）提供了一个关键功能：它支持一个名为 <code>__next__</code> 的特殊方法，如果集合有下一个元素，该方法返回该元素，否则产生一个 <code>StopIteration</code> 异常来表明没有下一个元素。</p><p>Python 为实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法的的类提供了一个自动的迭代器，每次调用 <code>__next__</code> 方法时便会索引递增。例如，下面的 <code>SquenceIterator</code> 类。</p><h3 id="3-2-例：SequenceIterator-类">3.2 例：SequenceIterator 类</h3><blockquote><p>【注意】迭代器的实现必须要求【已经实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SequenceIterator</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;为已经定义了__len__和__getitem__的对象实现迭代器方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seq</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器初始化&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._seq = seq</span><br><span class="line">        <span class="variable language_">self</span>._k = -<span class="number">1</span>  <span class="comment"># 只有迭代器调用时才从 0 开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._k &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>._seq):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._seq[<span class="variable language_">self</span>._k]  <span class="comment"># 返回向前一步后的值</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;一般__iter__方法都要返回自己，一种书写规范&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><h3 id="3-3-练习：实现一个类模拟-Python-的-Range">3.3 练习：实现一个类模拟 Python 的 Range</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟Python的Range类: range(start, stop, step)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start, stop=<span class="literal">None</span>, step=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param self: 对象自身</span></span><br><span class="line"><span class="string">        :param start: 起始数字</span></span><br><span class="line"><span class="string">        :param stop: 终止数字</span></span><br><span class="line"><span class="string">        :param step: 每步跨度</span></span><br><span class="line"><span class="string">        :return: Range类</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;step can not be zero&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> stop <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 应对输入 Range(n), 则当作 Range(0, n) 处理</span></span><br><span class="line">            start = <span class="number">0</span></span><br><span class="line">            stop = start</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算真实长度，应对有余数的情形</span></span><br><span class="line">        <span class="variable language_">self</span>._length = <span class="built_in">max</span>(<span class="number">0</span>, (stop - start + step - <span class="number">1</span>) // step)</span><br><span class="line">        <span class="comment"># 考虑到已经计算长度，故无需记录 stop</span></span><br><span class="line">        <span class="variable language_">self</span>._start = start</span><br><span class="line">        <span class="variable language_">self</span>._step = step</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;取数值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            index += <span class="variable language_">self</span>._length  <span class="comment"># 从后向前取</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="variable language_">self</span>._length <span class="keyword">or</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._start + index * <span class="variable language_">self</span>._step</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;只是以列表的形式展示，不重要。因为Range是模仿Python的range功能&quot;&quot;&quot;</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> Range(<span class="variable language_">self</span>._start, <span class="variable language_">self</span>._length):</span><br><span class="line">            result += <span class="built_in">str</span>(<span class="variable language_">self</span>._start + i * <span class="variable language_">self</span>._step) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        result = <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="4-继承">4 继承</h2><h3 id="4-1-介绍">4.1 介绍</h3><p><strong>继承</strong>技术允许基于一个现有的类作为起点定义新的类。在面向对象的术语中，通常描述现有的类为基类 (base class)、父类 (parent class) 或者超类 (superclass)，而称新定义的类为子类 (subclass 或者 child class)</p><p>子类可以覆盖父类方法，也可以在父类的基础上扩展方法。</p><p>下面以第一节中定义的 <code>CreditCard</code> 类为父类，定义新的子类 <code>PredatoryCreditCard</code> 。</p><h3 id="4-2-例：PredatoryCreditCard-子类">4.2 例：PredatoryCreditCard 子类</h3><p>我们希望实现的新功能：</p><ul><li>当尝试收费由于超过信用卡额度被拒绝时，将会收取 5 美元的费用</li><li>将有一个对未清余额按月收取利息的机制，即基于参数年利率 <code>apr</code> 计算利息</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740131659710.png" style="zoom:35%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;继承父类，扩展方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, customer, bank, acnt, limit, apr</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        继承父类，常见新的一个账户</span></span><br><span class="line"><span class="string">        :param customer: 用户名</span></span><br><span class="line"><span class="string">        :param bank: 银行名</span></span><br><span class="line"><span class="string">        :param acnt: 账户ID</span></span><br><span class="line"><span class="string">        :param limit: 额度限制</span></span><br><span class="line"><span class="string">        :param apr: 年利率，用以计算利息</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(customer, bank, acnt, limit)  <span class="comment"># 调用父类的初始化方法 __init__</span></span><br><span class="line">        <span class="variable language_">self</span>._apr = apr</span><br><span class="line">        <span class="comment"># self._balance 在调用父类初始化时也已经赋值 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆盖父类的charge方法，添加扣除手续费功能&quot;&quot;&quot;</span></span><br><span class="line">        success = <span class="built_in">super</span>().charge(price)  <span class="comment"># 调用父类方法，检查是否仍在限额内</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="variable language_">self</span>._balance += <span class="number">5</span>  <span class="comment"># 如果失败收取 5 元手续费，贷款 balance 提高</span></span><br><span class="line">        <span class="keyword">return</span> success  <span class="comment"># 返回结果 True or False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_month</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;收取每月利息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._balance &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 月贴现因子，apr 为年利率，故除以 12 年化</span></span><br><span class="line">            monthly_factor = <span class="built_in">pow</span>(<span class="number">1</span> + <span class="variable language_">self</span>._apr, <span class="number">1</span> / <span class="number">12</span>)</span><br><span class="line">            <span class="variable language_">self</span>._balance *= monthly_factor</span><br></pre></td></tr></table></figure><h4 id="4-2-1-继承语法">4.2.1 继承语法</h4><p>定义子类 B 继承父类 A 时，采用下面的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-初始化语句">4.2.2 初始化语句</h4><p>在子类中首先需要调用父类的初始化语句和传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, param1, param2, sub_param</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">super</span>().__init__(param1, param2)  <span class="comment"># 调用父类的初始化方法 __init__</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.sub_param = sub_param  <span class="comment"># 子类的参数</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-调用父类方法">4.2.3 调用父类方法</h4><p>在子类中调用父类方法，使用 <code>super()</code> 代替父类对象。例如：在使用父类的方法 <code>charge()</code> 时，直接采用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>().charge(param1)  <span class="comment"># 传入相应参数</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】在子类中，我们直接调用了父类的受保护数据 <code>_balance</code> (以 <code>_</code> 开头的数据视为受保护数据)，这不是最好的方法。只是在这里，我们需要在子类中修改 balance ，但如果调用 <code>get_balance</code> 方法是无法修改 balance 的，所以只好直接修改 <code>._balance</code> 。</p><p>【改进】不过可以在父类中定义非公有/受保护的方法 <code>_set_balance()</code> 让子类能使用它改变 <code>._balance</code> 而外界则不使用这个方法。如此可以做到子类使用父类方法改变父类受保护数据，而不是直接在父类数据上改变。</p></blockquote><h3 id="4-3-例：迭代数列的类的层次">4.3 例：迭代数列的类的层次</h3><p>Progression 类的分层如图。我们希望之后定义的各种数列均以 Progression 类为父类。</p><ul><li>Progression 类产生 <code>0, 1, 2, ...</code> 的无穷数列。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740193477222.png" alt=""></p><h4 id="4-3-1-父类：Progression-类">4.3.1 父类：Progression 类</h4><ul><li>定义 <code>__next__, __iter__</code> 方法，实现 <code>next(obj)</code> 的方法迭代，同时也支持 <code>for i in obj</code>  的方法</li><li>定义 <code>_advance</code> 方法，为更新提供了非公有方法，为未来子类不同的更新形式提供方法</li><li>定义 <code>print_progression</code> 方法，方便以字符串的方式展示当前值的后 n 位数值，以序列的形式展示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Progression</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义普适的数列父类</span></span><br><span class="line"><span class="string">    默认产生 0, 1, 2, ... 的无穷数列</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化记录起始默认值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        非公有方法，用于更新 self._current</span></span><br><span class="line"><span class="string">        为后续子类覆盖提供方法，子类不同的数列需要覆写不同的更新方法</span></span><br><span class="line"><span class="string">        父类默认的更新方式为 += 1</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代下一个值，或抛出异常 StopIteration&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._current <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="variable language_">self</span>._current</span><br><span class="line">            <span class="variable language_">self</span>._advance()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        习惯于 iter 与 next 合并使用</span></span><br><span class="line"><span class="string">        By convention, an iterator must return itself as an iterator.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_progression</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印当前值之后的 n 个值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(<span class="built_in">str</span>(<span class="built_in">next</span>(<span class="variable language_">self</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)))</span><br></pre></td></tr></table></figure><blockquote><p>注意此个例子，使用 <code>for i in obj</code> 会进入无穷序列。</p></blockquote><h4 id="4-3-2-子类：等差数列类">4.3.2 子类：等差数列类</h4><p>我们希望等差数列 ArithmeticProgression 类产生等差数列，只需要继承父类后，覆写 <code>_advance</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArithmeticProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;继承基础数列类，定义等差数列类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, increment=<span class="number">1</span>, start=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化等差数列</span></span><br><span class="line"><span class="string">        :param increment: 公差</span></span><br><span class="line"><span class="string">        :param start: 首项</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(start)</span><br><span class="line">        <span class="variable language_">self</span>._increment = increment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写新更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current += <span class="variable language_">self</span>._increment</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aprog1 = ArithmeticProgression(<span class="number">4</span>)</span><br><span class="line">aprog2 = ArithmeticProgression(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">aprog1.print_progression(<span class="number">7</span>)</span><br><span class="line">aprog2.print_progression(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0 4 8 12 16 20 24</span></span><br><span class="line"><span class="string">1 5 9 13 17 21 25</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-3-子类：等比数列类">4.3.3 子类：等比数列类</h4><p>类似地定义等比数列 GeometricProgression 类，需要注意首选不能为 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeometricProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;等比数列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base=<span class="number">2</span>, start=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化等比数列</span></span><br><span class="line"><span class="string">        :param base: 公比，默认为 2</span></span><br><span class="line"><span class="string">        :param start: 首项，不可为 0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(start)</span><br><span class="line">        <span class="variable language_">self</span>._base = base</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current *= <span class="variable language_">self</span>._base</span><br></pre></td></tr></table></figure><h4 id="4-3-4-子类：斐波那契数列类">4.3.4 子类：斐波那契数列类</h4><p>定义斐波那契数列 FibonacciProgression 类。除了提供父类需要的参数首项和自己的参数第二项，还需要增加一个非公有参数记录相邻两项的差 <code>_prev</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FibonacciProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;斐波那契数列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, first=<span class="number">0</span>, second=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化，提供第一第二项</span></span><br><span class="line"><span class="string">        :param first: 第一项，作为参数传给父类的 start</span></span><br><span class="line"><span class="string">        :param second: 第二项</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(first)</span><br><span class="line">        <span class="variable language_">self</span>._prev = second - first</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._prev, <span class="variable language_">self</span>._current = <span class="variable language_">self</span>._current, <span class="variable language_">self</span>._prev + <span class="variable language_">self</span>._current</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fcprog1 = FibonacciProgression()</span><br><span class="line">fcprog2 = FibonacciProgression(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fcprog1.print_progression(<span class="number">7</span>)</span><br><span class="line">fcprog2.print_progression(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0 1 1 2 3 5 8</span></span><br><span class="line"><span class="string">1 1 2 3 5 8 13</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-抽象基类">4.4 抽象基类</h3><p><strong>抽象基类</strong>：一个类的唯一目的是作为继承的基类。其中被继承的我们称之为抽象基类，而其他的类则为具体的类。</p><ul><li>一般而言，抽象类不能直接实例化，而具体的类可以被实例化。</li><li>理论上之前的例子中， Progression 类虽然严格来说是具体的类，但我们希望把它设计为一个抽象基类。</li></ul><h4 id="4-4-1-abc-模块">4.4.1 <code>abc</code> 模块</h4><p>Python 的 <code>abc</code> 模块提供了正式的抽象基类的定义，例如我们定义一个抽象基类 Sequence</p><ul><li>其一，我们不需要这个抽象基类 Sequence 提供 <code>__len__</code> 和 <code>__getitem__</code> 的具体实现，这两个方法的实现由继承它的子类完成。</li><li>其二，我们希望这个基类能完成功能：通过整数查看序列元素，所以要具体实现 <code>__contains__</code> <code>index</code> 和 <code>count</code> 方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sequence</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;抽象基类 Sequence&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回序列长度，由子类实现&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第 j 位置的值，由子类实现&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看 val 是否在序列中，返回 True or False&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回 val 在序列中的下标&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                <span class="keyword">return</span> j</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Value not found&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计数多少值等于 val&quot;&quot;&quot;</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure><blockquote><p>这一类与 Python 的 collections 模块的 <code>collections.abc.Sequence</code> 类似。</p><p>因为采用抽象定义，故类 <code>Sequence</code> 不能被实例化。</p></blockquote><ul><li><p>继承 <code>abc.ABC</code> 类，表明这是一个抽象基类，只能被继承不可被实例化。</p></li><li><p>上述的修饰器 <code>@abstractmethod</code> 表名这个方法必须由子类实现，抽象基类无需实现。</p></li></ul><h4 id="4-4-2-collections-模块">4.4.2 <code>collections</code> 模块</h4><p>使用 <code>abc</code> 模块定义过于复杂，可以直接使用 Python 的 <code>collections</code> 模块，它已经封装了常见的抽象基类。</p><ul><li>例如在第 3.3 节实现的 Range 类，已经实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法，但没有实现抽象基类中的<code>__contains__</code> <code>index</code> 和 <code>count</code> 方法。</li><li>而这与 <code>collections.abc.Sequence</code> 类相匹配，可以让我们定义的 <code>Range</code> 类继承 <code>collections.abc.Sequence</code> 类，从覆写 <code>__len__</code> 和 <code>__getitem__</code> ，同时也依靠父类实现 contains、index 和 count 方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> <span class="type">Sequence</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写 Range 的定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>(<span class="title class_ inherited__">Sequence</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><blockquote><p>【注意】在 <code>Python3.x</code> 版本后 <code>collections</code> 相关抽象基类被移动到了 <code>collections.abc</code> 中。故使用时应导入 <code>from collections.abc import Sequence</code></p></blockquote><p>【结果测试】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    r = NewRange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">in</span> r)  <span class="comment"># 判断 4 是否在序列中 __contains__ 方法</span></span><br><span class="line">    <span class="built_in">print</span>(r.index(<span class="number">0</span>))  <span class="comment"># 返回下标 index 方法</span></span><br><span class="line">    <span class="built_in">print</span>(r.count(<span class="number">1</span>))  <span class="comment"># 查看多少值等于 1</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>其实采用之前我们自定义的 <code>Sequence</code> 抽象基类也可以达到相同目的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sequence</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>(<span class="title class_ inherited__">Sequence</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="5-命名空间和面对对象">5 命名空间和面对对象</h2><h3 id="5-1-实例和类的命名空间">5.1 实例和类的命名空间</h3><p>以 CreditCard 类和 PredatoryCreditCard 类为例，展示出其类命名空间和实例命名空间如下：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740205039504.png" alt=""></p><h3 id="5-2-类数据成员">5.2 类数据成员</h3><p><strong>类级别的数据成员</strong>：一些值（如常量）被一个类的所有实例共享</p><ul><li>在这种情况下，在每个实例的命名空间中存储这个值就会造成不必要的浪费。所以使用如下格式定义这样的类数据成员。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    OVER_LIMIT_FEE = <span class="number">5</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆盖父类的charge方法，添加扣除手续费功能&quot;&quot;&quot;</span></span><br><span class="line">        success = <span class="built_in">super</span>().charge(price)  <span class="comment"># 调用父类方法，检查是否仍在限额内</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="comment"># 使用 PredatoryCreditCard.OVER_LIMIT_FEE 方式调用类数据成员</span></span><br><span class="line">            <span class="variable language_">self</span>._balance += PredatoryCreditCard.OVER_LIMIT_FEE</span><br><span class="line">        <span class="keyword">return</span> success  <span class="comment"># 返回结果 True or False</span></span><br></pre></td></tr></table></figure><h3 id="5-3-嵌套类">5.3 嵌套类</h3><p><strong>嵌套类</strong>：在一个类的定义里定义另一个类。需要注意的是，二者只是嵌套关系，没有继承关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h3 id="5-4-字典和-slots-声明">5.4 字典和 <code>__slots__</code> 声明</h3><p>Python 提供了一种直接的机制来表示实例命名空间：类定义必须提供一个名为 <code>__slots__</code> 的类级别的成员分配给一个固定的字符串序列。例如，在 <code>CreditCard</code> 类中，声明如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>:</span><br><span class="line">    __slots__ = <span class="string">&#x27;_customer&#x27;</span>, <span class="string">&#x27;_bank&#x27;</span>, <span class="string">&#x27;_acnt&#x27;</span>, <span class="string">&#x27;_limit&#x27;</span>, <span class="string">&#x27;_balance&#x27;</span></span><br></pre></td></tr></table></figure><p>当子类继承时，只需要声明子类新增的实例即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    __slots__ = <span class="string">&#x27;_apr&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-深拷贝和浅拷贝">6 深拷贝和浅拷贝</h2><h3 id="6-1-直接赋值复制">6.1 直接赋值复制</h3><p>当使用 <code>a = b</code> 时，Python 在做的只是拷贝了一个别名，或者说是一个地址。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206027790.png" alt=""></p><p>当遇到不可变类型时还不会出现问题，一旦二者指向的是可变类型，例如列表。则会出现一方变，整体变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1. 简单赋值，复制了地址 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1. 简单赋值，复制了地址&quot;</span>)</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a</span><br><span class="line">b.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="6-2-浅拷贝">6.2 浅拷贝</h3><p>例如：列表中写入颜色对象。 <code>warmtones</code> 表示现有的颜色列表。希望创建一个新的 <code>palette</code> 列表，复制一份 <code>warmtones</code> 列表。但是对 <code>palette</code> 不希望影响到 <code>warmtones</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 2. 浅拷贝，简历了新地址，但仍然指向同一不可变数据 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2. 浅拷贝，简历了新地址，但仍然指向同一不可变数据&quot;</span>)</span><br><span class="line">warmtones = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">palette = <span class="built_in">list</span>(warmtones)  <span class="comment"># 浅拷贝</span></span><br><span class="line">palette[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(warmtones)  <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(palette)  <span class="comment"># [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206762911.png" alt=""></p><p>这比直接赋值更好，即复制了一份可变数据类型 (list) ，但指向的不可变数据仍然相同。例如：<code>warmtones[0]</code>  和 <code>palette[0]</code> 为实例 <code>_red</code> 的别名，实际指向相同。</p><h3 id="6-3-深拷贝">6.3 深拷贝</h3><p>我们希望让 <code>warmtones</code> 和 <code>palette</code> 之间完全没有关联，就可以使用 <code>copy.deepcopy()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 3. 深拷贝，完全拷贝一份 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3. 深拷贝，完全拷贝一份&quot;</span>)</span><br><span class="line">warmtones = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">palette = copy.deepcopy(warmtones)  <span class="comment"># 深拷贝</span></span><br><span class="line">palette[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(warmtones)  <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(palette)  <span class="comment"># [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206987932.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法设计 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计软件 R 语言学习笔记 (1) R 语言基本介绍</title>
      <link href="/posts/d4da4a15.html"/>
      <url>/posts/d4da4a15.html</url>
      
        <content type="html"><![CDATA[<h1>R 语言基本介绍</h1><p>代码和笔记可以前往我的 Github 库里下载。<a href="https://github.com/isKage/r-notes">isKage/r-notes</a></p><hr><p>本文介绍如何下载 R 语言和软件 RStudio 以及 R 语言的基本语法、R 的程序包、R 的对象。具体介绍了如何下载包、管理包、加载包和删除包，以及对象的命名和删除方法，和对象的属性和类别。</p><h2 id="1-下载安装-R">1 下载安装 R</h2><p>官网地址 <a href="https://cran.r-project.org/">https://cran.r-project.org/</a></p><blockquote><p>不可含有中文路径</p></blockquote><h2 id="2-安装-RStudio">2 安装 RStudio</h2><p>官网地址 <a href="https://posit.co/downloads/">https://posit.co/downloads/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740033669420.png" alt=""></p><h2 id="3-基本语法">3 基本语法</h2><h3 id="3-1-常见符号">3.1 常见符号</h3><ul><li><code>&gt;</code> ：命令或运算提示符</li><li><code>+</code> ：续行符</li><li>多条语句之间用 <code>;</code> 或者回车符分隔</li><li>多个语句可以用 <code>&#123;&#125;</code> 组合</li><li>以 <code>#</code> 开始为注释部分</li><li>向上，向下键可以浏览以前输入过的命令</li><li>赋值符：<code>=</code> <code>&lt;-</code>  <code>-&gt;</code></li></ul><p>赋值符号例：下面三个等价</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span> <span class="operator">-&gt;</span> sales;</span><br><span class="line">sales <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span>;</span><br><span class="line">sales <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-帮助文档">3.2 帮助文档</h3><ul><li>查看<strong>函数</strong>的帮助文档</li></ul><p><code>help(func)</code> 或者 <code>?func</code> 从而打开帮助文档。</p><ul><li>查看<strong>运算符和关键字</strong>的帮助文档</li></ul><p><code>help('')</code> 或者 <code>?''</code> 从而打开帮助文档，但要使用引号。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">help<span class="punctuation">(</span>cor<span class="punctuation">)</span>;</span><br><span class="line"><span class="operator">?</span>cor;</span><br><span class="line"></span><br><span class="line">help<span class="punctuation">(</span><span class="string">&quot;+&quot;</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="operator">?</span><span class="string">&#x27;+&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740033121414.png" alt=""></p><ul><li>Description ：函数的描述</li><li>Usage ：函数的具体形式/格式</li><li>Arguments ：函数的输入参数</li><li>Value ： 输出值</li><li>Examples ：【使用样例】</li></ul><h3 id="3-3-工作目录">3.3 工作目录</h3><p><strong>工作目录</strong> ：读取外部文件和保存结果到外部文件的默认目录。使用 <code>getwd()</code> 查看和 <code>setwd()</code> 设置。例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> getwd<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;/Users/username&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> setwd<span class="punctuation">(</span><span class="string">&quot;/Users/username/Desktop/code/r/r-notes&quot;</span><span class="punctuation">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> getwd<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;/Users/username/Desktop/code/r/r-notes&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-工作空间">3.4 工作空间</h3><h4 id="3-4-1-工作空间">3.4.1 工作空间</h4><p><strong>工作空间</strong>是 R 语言中当前会话的环境，它包含了所有用户定义的变量、函数、数据框、列表等对象。</p><ul><li>查看工作空间：可以使用<code>ls()</code>函数查看当前工作空间中的所有对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><ul><li>删除对象：可以使用<code>rm()</code>函数从工作空间中删除对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><ul><li>清空工作空间：可以使用<code>rm(list = ls())</code>清空所有对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-RData-文件">3.4.2 .RData 文件</h4><p><code>.RData</code> 文件是 R 语言中用于保存和加载工作空间的文件格式。</p><ul><li>保存工作空间：使用 <code>save.image()</code> 函数可以将当前工作空间保存到 <code>.RData</code> 文件中。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save.image<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>默认情况下，R 会将工作空间保存到名为 <code>.RData</code> 的文件中。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save.image<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 保存到默认的 .RData 文件</span></span><br></pre></td></tr></table></figure><ul><li>加载工作空间：使用 <code>load()</code> 函数可以从 <code>.RData</code> 文件中加载保存的工作空间。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>加载后，工作空间中的所有对象会恢复到当前会话中。</p><ul><li>选择性保存：可以使用 <code>save()</code> 函数选择性地保存特定对象到 <code>.RData</code> 文件中。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save<span class="punctuation">(</span>object1<span class="punctuation">,</span> object2<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;my_data.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="3-4-3-示例">3.4.3 示例</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一些对象</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">10</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作空间</span></span><br><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存工作空间到文件</span></span><br><span class="line">save.image<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作空间中的对象</span></span><br><span class="line">rm<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">,</span> df<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载工作空间</span></span><br><span class="line">load<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看工作空间</span></span><br><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="4-R-的程序包-Packages">4 R 的程序包 Packages</h2><p>R程序包是多个函数的集合，具有详细的说明和示例。每个程序包包括R函数，数据，帮助文件，描述文件等。</p><h3 id="4-1-R-程序包分类">4.1 R 程序包分类</h3><p>R 包可以分为以下几类：</p><ul><li>基础包：随R安装自带的包</li><li>推荐包：通常随R一起安装，但不是核心包</li><li>第三方包：由社区或开发者贡献的包，需要通过CRAN、GitHub等平台安装</li></ul><h3 id="4-2-安装-R-包">4.2 安装 R 包</h3><h4 id="4-2-1-从-CRAN-安装">4.2.1 从 CRAN 安装</h4><p>CRAN 是 R 包的官方仓库。使用 <code>install.packages()</code> 函数安装</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;dplyr&quot;</span><span class="punctuation">)</span>  <span class="comment"># 安装dplyr包</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-从-GitHub-安装">4.2.2 从 GitHub 安装</h4><p>一些开发者会将包发布在 GitHub 上，可以使用 <code>devtools</code> 包安装：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;devtools&quot;</span><span class="punctuation">)</span>  <span class="comment"># 安装 devtools 包</span></span><br><span class="line"></span><br><span class="line">devtools<span class="operator">::</span>install_github<span class="punctuation">(</span><span class="string">&quot;tidyverse/dplyr&quot;</span><span class="punctuation">)</span>  <span class="comment"># 从 GitHub 安装 dplyr</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-本地安装">4.2.3 本地安装</h4><p>从 CRAN 上下载 <code>.zip</code> 文件，然后在 RStudio 中选择：【Tools】-&gt;【Install Packages …】-&gt;【Install from】后选择下载的 <code>.zip</code> 文件。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740035683185.png" style="zoom:50%;" /><h3 id="4-3-加载和使用-R-包">4.3 加载和使用 R 包</h3><p>安装包后，需要使用 <code>library()</code> 或 <code>require()</code> 函数加载包</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>dplyr<span class="punctuation">)</span>  <span class="comment"># 加载dplyr包</span></span><br><span class="line">require<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span>  <span class="comment"># 加载ggplot2包</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>library()</code>：加载包，如果包未安装会报错。</li><li><code>require()</code>：尝试加载包，如果包未安装会返回<code>FALSE</code>，但不会报错。</li></ul></blockquote><ul><li>查看所有已安装的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">installed.packages<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>查看当前加载的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>更新已安装的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update.packages<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="4-4-卸载-R-包">4.4 卸载 R 包</h3><p>使用 <code>remove.packages()</code> 函数卸载包</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove.packages<span class="punctuation">(</span><span class="string">&quot;dplyr&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="5-R-的对象-Objects">5 R 的对象 Objects</h2><p>在 R 中，所有的数据集、函数、函数结果等，均统称为 “对象”（Object）</p><h3 id="5-1-对象的命名">5.1 对象的命名</h3><ul><li>区分大小写</li><li>由 <code>A-Z</code> <code>a-z</code> <code>0-9</code> <code>_</code> <code>.</code> 组成名字</li><li>对象名要以字母或者 <code>.</code> 开始</li><li>如果以 <code>.</code> 开头，后面不能跟数字</li><li>尽量避免使用保留名</li></ul><h3 id="5-2-查看与移除对象">5.2 查看与移除对象</h3><ul><li>使用 <code>ls()</code> 查看当前所有对象</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 查看当前工作空间所有对象</span></span><br><span class="line"></span><br><span class="line">ls<span class="punctuation">(</span>pat <span class="operator">=</span> <span class="string">&quot;m&quot;</span><span class="punctuation">)</span>  <span class="comment"># 名字包含 m 的所有对象</span></span><br><span class="line">ls<span class="punctuation">(</span>pat <span class="operator">=</span> <span class="string">&quot;^m&quot;</span><span class="punctuation">)</span>  <span class="comment"># 名字以 m 开头的所有对象</span></span><br><span class="line">ls.str<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 展示所有对象的详细信息</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>rm()</code> 删除对象</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 可以填入对象名</span></span><br><span class="line"></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;x&quot;</span><span class="punctuation">,</span> <span class="string">&quot;y&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 删除对象 x 和 y</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 删除所有对象</span></span><br></pre></td></tr></table></figure><blockquote><p>【推荐】在每个脚本文件 <code>.R</code> 都在文件开始设置工作路径和清空对象</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setwd<span class="punctuation">(</span><span class="string">&quot;&quot;</span><span class="punctuation">)</span>;  <span class="comment"># 填入路径</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-对象的属性-Attribute-与类别-Class">5.3 对象的属性 Attribute 与类别  Class</h3><h4 id="5-3-1-使用-mode-判断对象的属性">5.3.1 使用 <code>mode()</code> 判断对象的属性</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 1;</span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;numeric&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.integer</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> <span class="built_in">is.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>y<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;logical&quot;</span></span><br></pre></td></tr></table></figure><p>或者使用 <code>is.numeric(); is.logical(); is.character; is.complex()</code> 进行判断。</p><h4 id="5-3-2-使用-class-判断对象的类别">5.3.2 使用 <code>class()</code> 判断对象的类别</h4><p>常见的类型：</p><ul><li>向量 vector</li><li>矩阵 matrix</li><li>数组 array</li><li>数据框 dataframe</li><li>列表 list</li></ul>]]></content>
      
      
      <categories>
          
          <category> R 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R 语言 </tag>
            
            <tag> 统计软件 </tag>
            
            <tag> R programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（9）创建和管理数据库和数据表</title>
      <link href="/posts/4bd5b58e.html"/>
      <url>/posts/4bd5b58e.html</url>
      
        <content type="html"><![CDATA[<h1>创建和管理数据库和数据表</h1><p>存储和管理数据需要我们创建并管理数据库以及数据库中的各种表。本文介绍如何创建和管理数据库、数据表。包括了数据库的创建、管理；数据表的创建、修改、命名和删除。</p><h2 id="1-数据管理">1 数据管理</h2><p>对数据进行管理，首先要存储数据。一般按照 <code>创建数据库 -&gt; 选择字段 -&gt; 创建数据表 -&gt; 存储数据</code> 的方式进行管理。</p><h3 id="1-1-命名规则">1.1 命名规则</h3><ul><li>数据库名、表名不得超过 <code>30</code> 个字符，变量名不得超过 <code>29</code> 个字符</li><li>只含 <code>A-Z</code> <code>a-z</code> <code>0-9</code> 共 63 个字符</li><li>名中不要包含 <code>空格</code></li><li>同一个 MySQL 软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>不要使用关键字，不得不使用时使用 <code>``</code> 框选</li></ul><h3 id="1-2-MySQL-中的数据类型">1.2 MySQL 中的数据类型</h3><table><thead><tr><th>数据类型类别</th><th>数据类型</th><th>关键字/特点</th><th>描述</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code></td><td>1字节，有符号范围：-128到127，无符号范围：0到255</td><td>非常小的整数</td></tr><tr><td></td><td><code>SMALLINT</code></td><td>2字节，有符号范围：-32768到32767，无符号范围：0到65535</td><td>小整数</td></tr><tr><td></td><td><code>MEDIUMINT</code></td><td>3字节，有符号范围：-8388608到8388607，无符号范围：0到16777215</td><td>中等大小的整数</td></tr><tr><td></td><td><code>INT</code></td><td>4字节，有符号范围：-2147483648到2147483647，无符号范围：0到4294967295</td><td>标准整数</td></tr><tr><td></td><td><code>BIGINT</code></td><td>8字节，有符号范围：-2^63到2^63-1，无符号范围：0到2^64-1</td><td>大整数</td></tr><tr><td>浮点数类型</td><td><code>FLOAT</code></td><td>4字节，单精度浮点数</td><td>单精度浮点数，精度约为7位小数</td></tr><tr><td></td><td><code>DOUBLE</code></td><td>8字节，双精度浮点数</td><td>双精度浮点数，精度约为15位小数</td></tr><tr><td></td><td><code>DECIMAL(M, D)</code></td><td>定点数，M为总位数，D为小数位数</td><td>精确小数，适用于财务计算</td></tr><tr><td>日期时间类型</td><td><code>DATE</code></td><td>格式：‘YYYY-MM-DD’</td><td>日期值，仅包含日期</td></tr><tr><td></td><td><code>TIME</code></td><td>格式：‘HH:MM:SS’</td><td>时间值，仅包含时间</td></tr><tr><td></td><td><code>DATETIME</code></td><td>格式：‘YYYY-MM-DD HH:MM:SS’</td><td>日期和时间值</td></tr><tr><td></td><td><code>TIMESTAMP</code></td><td>格式：‘YYYY-MM-DD HH:MM:SS’，范围：‘1970-01-01 00:00:01’到’2038-01-19 03:14:07’</td><td>时间戳，自动更新</td></tr><tr><td></td><td><code>YEAR</code></td><td>格式：‘YYYY’</td><td>年份值</td></tr><tr><td>字符串类型</td><td><code>CHAR(M)</code></td><td>固定长度字符串，M为字符数，最大255</td><td>定长字符串，适合存储固定长度的数据</td></tr><tr><td></td><td><code>VARCHAR(M)</code></td><td>可变长度字符串，M为最大字符数，最大65535</td><td>变长字符串，适合存储长度不固定的数据</td></tr><tr><td></td><td><code>TINYTEXT</code></td><td>最大长度255字符</td><td>非常小的文本字符串</td></tr><tr><td></td><td><code>TEXT</code></td><td>最大长度65535字符</td><td>文本字符串</td></tr><tr><td></td><td><code>MEDIUMTEXT</code></td><td>最大长度16777215字符</td><td>中等长度的文本字符串</td></tr><tr><td></td><td><code>LONGTEXT</code></td><td>最大长度4294967295字符</td><td>长文本字符串</td></tr><tr><td></td><td><code>BINARY(M)</code></td><td>固定长度二进制字符串，M为字节数，最大255</td><td>定长二进制字符串</td></tr><tr><td></td><td><code>VARBINARY(M)</code></td><td>可变长度二进制字符串，M为最大字节数，最大65535</td><td>变长二进制字符串</td></tr><tr><td>枚举类型</td><td><code>ENUM('val1', 'val2', ...)</code></td><td>枚举类型，只能存储列出的值之一</td><td>枚举类型，适合存储有限个数的可能值</td></tr><tr><td>集合类型</td><td><code>SET('val1', 'val2', ...)</code></td><td>集合类型，可以存储多个列出的值</td><td>集合类型，适合存储多个可能值</td></tr><tr><td>二进制大对象</td><td><code>TINYBLOB</code></td><td>最大长度255字节</td><td>非常小的二进制对象</td></tr><tr><td></td><td><code>BLOB</code></td><td>最大长度65535字节</td><td>二进制大对象</td></tr><tr><td></td><td><code>MEDIUMBLOB</code></td><td>最大长度16777215字节</td><td>中等大小的二进制对象</td></tr><tr><td></td><td><code>LONGBLOB</code></td><td>最大长度4294967295字节</td><td>长二进制对象</td></tr><tr><td>空间数据类型</td><td><code>GEOMETRY</code></td><td>空间数据类型，存储几何对象</td><td>几何对象</td></tr><tr><td></td><td><code>POINT</code></td><td>点类型</td><td>二维平面上的点</td></tr><tr><td></td><td><code>LINESTRING</code></td><td>线类型</td><td>二维平面上的线</td></tr><tr><td></td><td><code>POLYGON</code></td><td>多边形类型</td><td>二维平面上的多边形</td></tr><tr><td></td><td><code>MULTIPOINT</code></td><td>多点类型</td><td>多个点的集合</td></tr><tr><td></td><td><code>MULTILINESTRING</code></td><td>多线类型</td><td>多条线的集合</td></tr><tr><td></td><td><code>MULTIPOLYGON</code></td><td>多多边形类型</td><td>多个多边形的集合</td></tr><tr><td></td><td><code>GEOMETRYCOLLECTION</code></td><td>几何集合类型</td><td>多个几何对象的集合</td></tr><tr><td>JSON类型</td><td><code>JSON</code></td><td>存储JSON格式数据</td><td>用于存储JSON格式的数据</td></tr></tbody></table><blockquote><p>以上由 <a href="https://www.deepseek.com/">DeepSeek 总结</a> ，并不重要，现实使用时可以查询官方文档。</p></blockquote><h2 id="2-创建和管理数据库">2 创建和管理数据库</h2><h3 id="2-1-创建数据库">2.1 创建数据库</h3><ul><li>方法1： 直接创建，完全默认</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><ul><li>方法2：创建数据库并指定字符集</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名 <span class="keyword">CHARACTER SET</span> 字符集;</span><br></pre></td></tr></table></figure><p>可以指定数据库的字符集（如 <code>utf8mb4</code> ），确保数据存储时使用正确的编码。</p><ul><li>方法3【推荐】：先判断是否已经存在，不存在则创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>注意：数据库不能改名！</p><p>如果需要重命名，则需要：创建新数据库；复制原数据库数据导入新库；删除旧库。</p></blockquote><h3 id="2-2-使用数据库">2.2 使用数据库</h3><ul><li>查看所有数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><ul><li>查看当前使用的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><blockquote><p>未使用数据库时返回 <code>NULL</code></p></blockquote><ul><li>查看数据库的所有表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">FROM</span> 数据库名];</span><br></pre></td></tr></table></figure><blockquote><p>若省略 <code>FROM 数据库名</code> 则查看当前使用的数据库</p></blockquote><ul><li>查看数据库创建时的相关信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739872321265.png" alt=""></p><ul><li>使用某个数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>因为数据表均存储在不同数据库下，所以在对表操作前，必须先指定使用某个数据库。</p></blockquote><h3 id="2-3-更改字符集">2.3 更改字符集</h3><p>虽然更改数据库名理论上是不可行，不推荐的。但修改字符集非常简单，只需一行指令即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="keyword">CHARACTER SET</span> 字符集; <span class="comment">-- e.g. : gbk, utf8</span></span><br></pre></td></tr></table></figure><h3 id="2-4-删除数据库">2.4 删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>IF EXISTS</code> 先判断是否存在，存在则删除。可以省略，但【不推荐】。</p></blockquote><h2 id="3-创建表">3 创建表</h2><p>在数据库创建完成后，进入/使用指定的数据库，而后就可以开始创建和管理数据表。</p><h3 id="3-1-CREATE-TABLE-创建新的数据表">3.1 <code>CREATE TABLE</code> 创建新的数据表</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名</span><br><span class="line">(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">...</span><br><span class="line">[表约束条件]</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- [] 表示可省略</span></span><br></pre></td></tr></table></figure><p>例如：不做约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp</span><br><span class="line">(</span><br><span class="line">    emp_id   <span class="type">INT</span>,</span><br><span class="line">    emp_name <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="comment">-- 20 为长度</span></span><br><span class="line">    salary   <span class="keyword">DOUBLE</span>,</span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们可以查看一下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739873501483.png" alt=""></p><p>例如：增加约束条件，指定自增性质，指定表的主键【推荐指定主键】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> dept</span><br><span class="line">(</span><br><span class="line">    dept_id   <span class="type">INT</span> AUTO_INCREMENT, <span class="comment">-- 增加约束条件: 自增</span></span><br><span class="line">    dept_name <span class="type">VARCHAR</span>(<span class="number">14</span>),</span><br><span class="line">    location  <span class="type">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (dept_id)         <span class="comment">-- 表的约束条件: 指定 deptno 为主键</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>同样，我们可以查看一下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> dept;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739873713040.png" alt=""></p><h3 id="3-2-AS-其他表名-创建表同时导入数据">3.2 <code>AS 其他表名</code> 创建表同时导入数据</h3><p>使用 <code>CREATE TABLE 新表 AS 其他表的数据</code> 在创建新表的同时，插入数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 新表</span><br><span class="line">(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">...</span><br><span class="line">[表约束条件]</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 其他表</span><br><span class="line">[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><blockquote><p>其中，指定新表属性和字段的 <code>(字段1, ..., 表约束条件])</code> 部分可以省略。如果不省略，则要满足后面填充数据时的匹配。即 <code>SELECT</code> 语句找出的数据和新表的列要一一对应。</p></blockquote><p>例如：选取数据库 <code>atguigudb</code> 的 <code>employees</code> 表中收入高于 13000 的员工的部分信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp_high_salary</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.last_name, e.department_name, e.salary, e.hire_date</span><br><span class="line"><span class="keyword">FROM</span> atguigudb.employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;</span> <span class="number">13000</span>;</span><br></pre></td></tr></table></figure><p>查看这个新表的信息，继承了表的信息（执行  <code>DESC emp_high_salary;</code> ）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739874352421.png" alt=""></p><p>查看具体表的内容，发现已经填充了数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> test.emp_high_salary;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739874466224.png" alt=""></p><h3 id="3-3-查看数据表结构">3.3 查看数据表结构</h3><p>除了上面的采用 <code>DESC</code> 的方式查看表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><p>也可以采用 <code>SHOW CREATE TABLE</code> 查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> 表名;</span><br></pre></td></tr></table></figure><blockquote><p><code>SHOW CREATE TABLE</code> 查看的表结构更为详细</p></blockquote><h2 id="4-修改表">4 修改表</h2><p>使用 <code>ALTER TABLE</code> 语句修改表的结构</p><h3 id="4-1-新增一列-ADD">4.1 新增一列 ADD</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line"><span class="keyword">ADD</span> 字段名 字段类型 </span><br><span class="line">[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名];</span><br><span class="line"><span class="comment">-- [] 代表可选</span></span><br><span class="line"><span class="comment">-- A|B 代表或者, A 或 B</span></span><br></pre></td></tr></table></figure><p>例如：在表 emp 中新增一列 job_id 使得其在字段 salary 的后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp</span><br><span class="line">    <span class="keyword">ADD</span> job_id <span class="type">varchar</span>(<span class="number">15</span>)</span><br><span class="line">        AFTER salary;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739937896250.png" alt=""></p><h3 id="4-2-修改一列-MODIFY">4.2 修改一列 MODIFY</h3><p>可以修改列的 <code>数据类型</code> <code>长度</code> <code>默认值</code> <code>位置</code></p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line">MODIFY 字段名<span class="number">1</span> 字段类型 [<span class="keyword">DEFAULT</span> 默认值] </span><br><span class="line">[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>例如：修改表 emp_high_salary 的 salary 的数据类型和默认值，并放置在 last_name 后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_high_salary</span><br><span class="line">    MODIFY salary <span class="keyword">double</span>(<span class="number">9</span>, <span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1000</span></span><br><span class="line">        AFTER last_name;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739938248613.png" alt=""></p><blockquote><p>默认值的修改只对以后存储的新数据有影响</p></blockquote><h3 id="4-3-对列重命名-CHANGE">4.3 对列重命名 CHANGE</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line">CHANGE 列名 新列名 新数据类型;</span><br></pre></td></tr></table></figure><p>例如：将表 emp_high_salary 的 department_name 改为 dept_name</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_high_salary</span><br><span class="line">    CHANGE department_name dept_name <span class="type">varchar</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739938432301.png" alt=""></p><h3 id="4-4-删除某列-DROP">4.4 删除某列 DROP</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line"><span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>例如：删除之前在表 emp 中新增的 job_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp</span><br><span class="line">    <span class="keyword">DROP</span> job_id;</span><br></pre></td></tr></table></figure><h2 id="5-重命名表">5 重命名表</h2><h3 id="5-1-RENAME-方法">5.1 RENAME 方法</h3><p>使用 <code>RENAME ... TO</code> 方法重命名表，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 旧表名</span><br><span class="line"><span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure><p>例如：更改表 emp 为新名字 employee_info</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> emp</span><br><span class="line">    <span class="keyword">TO</span> employee_info;</span><br></pre></td></tr></table></figure><h3 id="5-2-ALTER-RENAME-方法">5.2 ALTER RENAME 方法</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> 旧表名</span><br><span class="line">    RENAME [<span class="keyword">TO</span>] 新表名;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> employee_info</span><br><span class="line">    RENAME emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-删除表">6 删除表</h2><p>当当前表与其他表没有关联时，例如没有外键链接时，可以直接删除。格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></table></figure><p>例如：删除之前常见的 emp_high_salary 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp_high_salary;</span><br></pre></td></tr></table></figure><h2 id="7-清空表内数据">7 清空表内数据</h2><p>只是删除表内的数据，并不删除表结构。</p><h3 id="7-1-TRUNCATE-语句">7.1 TRUNCATE 语句</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="7-2-DELETE-语句">7.2 DELETE 语句</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="7-3-是否回滚-ROLLBACK">7.3 是否回滚 ROLLBACK</h3><p><code>DELETE</code> 支持回滚 <code>ROLLBACK</code> ，而 <code>TRUNCATE</code> 不支持。</p><p>例如：先查看原始表内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>使用 <code>DELETE</code> 删除，然后回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开始事务，暂不提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><blockquote><p><code>START TRANSACTION;</code> ：它标志着一个事务的开始。在事务中，可以执行多个 SQL 语句。在事务结束之前，所有的修改都不会真正生效，直到显式地提交事务（<code>COMMIT;</code>）或回滚事务（<code>ROLLBACK;</code>）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DELETE 删除</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="comment">-- 查看结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary; <span class="comment">-- 查看结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>此时 <code>ROLLBACK;</code> 回滚事务结束，结果被提交给数据库，数据完成所有操作，显示最终结果。</p></blockquote><ul><li>但是 <code>TRUNCATE</code> 不支持回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> emp_high_salary;</span><br><span class="line"><span class="comment">-- 执行后，表中所有数据被清空，无法回滚</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>清除数据而已，表结构仍然存在</p></blockquote><h2 id="8-注意事项">8 注意事项</h2><ul><li><p>在第 6 和第 7 部分：删除表和清除表数据需要十分谨慎。【建议先备份】然后进行删除。</p></li><li><p>除此之外，为了避免误操作，<code>MySQL8.0</code> 推出了 <strong>DDL（Data Definition Language）原子化</strong> ，即操作要么成功要么失败，绝对不会出现部分成功的情况。</p></li></ul><p>例如：在删除表时，如果 <code>表1</code> 存在，而 <code>表2</code> 不存在。此时同时删除 <code>表1</code> 和 <code>表2</code> 的操作会完全失败，不会出现 <code>表1</code> 被删除了，而 <code>表2</code> 不存在报错的情况。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（8）子查询</title>
      <link href="/posts/73aff18a.html"/>
      <url>/posts/73aff18a.html</url>
      
        <content type="html"><![CDATA[<h1>子查询</h1><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询。</p><h2 id="1-子查询的基本使用">1 子查询的基本使用</h2><ul><li>例子引入：查询工资大于 Abel 的员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 之前所学：自连接</span></span><br><span class="line"><span class="keyword">SELECT</span> e2.last_name, e2.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e1,</span><br><span class="line">     employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> e1.salary <span class="operator">&lt;</span> e2.salary;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-1-基本格式">1.1 基本格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件   </span><br><span class="line">            (<span class="keyword">SELECT</span> 列名</span><br><span class="line">             <span class="keyword">FROM</span> 表名</span><br><span class="line">             <span class="keyword">WHERE</span> 条件);</span><br></pre></td></tr></table></figure><h3 id="1-2-子查询分类">1.2 子查询分类</h3><h4 id="1-2-1-单行子查询-vs-多行子查询">1.2.1 单行子查询 vs 多行子查询</h4><ul><li>查询的结果返回一条还是多条记录，将子查询分为<strong>单行子查询</strong>和<strong>多行子查询</strong></li></ul><h4 id="1-2-2-相关子查询-vs-不相关子查询">1.2.2 相关子查询 vs 不相关子查询</h4><ul><li><p><strong>不相关子查询</strong>：子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做不相关子查询。</p></li><li><p><strong>相关子查询</strong>：如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p></li></ul><h2 id="2-单行子查询">2 单行子查询</h2><h3 id="2-1-常见案例">2.1 常见案例</h3><p>常见条件：<code>=, &gt;, &gt;=, &lt;=, &lt;&gt;</code> ，要求子查询返回的是唯一一个结果</p><ul><li>例如：上述的查询工资大于 Abel 的员工</li><li>例如：多条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多条件</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (<span class="keyword">SELECT</span> job_id</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">103</span>)</span><br><span class="line">  <span class="keyword">AND</span> salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778436446.png" alt=""></p><blockquote><p>【注意】当使用简单比较符时，单行子查询返回的结果必须唯一，如此才能比较。例如：若子查询查询到的 <code>job_id</code> 有多个，则无法比较。</p></blockquote><ul><li>例如：利用单行函数返回工资最少的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">                <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><h3 id="2-2-HAVING-中的子查询">2.2 HAVING 中的子查询</h3><p>子查询优先执行，得到子查询的结果后返回给主句的 <code>WHERE</code> 或 <code>HAVING</code> 充当过滤条件的一部分。</p><ul><li>例如：查询最低工资大于部门 <code>department_id = 50</code> 的最低工资的部门</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span></span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">        <span class="keyword">FROM</span> employees</span><br><span class="line">        <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779142944.png" alt=""></p><blockquote><p><code>GROUP BY ... HAVING ...</code> 用于分组查询，见<a href="https://blog.iskage.online/posts/b266e599.html#3-GROUP-BY-%E2%80%A6-HAVING-%E6%9C%89%E7%BA%A6%E6%9D%9F%E7%9A%84%E5%88%86%E7%BB%84">聚合函数</a>章节笔记。</p></blockquote><h3 id="2-3-CASE-中的子查询">2.3 CASE 中的子查询</h3><ul><li>例如：若员工的 <code>department_id</code> 与 <code>location_id</code> 为 1800 的 <code>department_id</code> 相同，则 <code>location</code> 为 ‘Canada’ ，其余则为 ‘USA’</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       last_name,</span><br><span class="line">       <span class="keyword">CASE</span> department_id</span><br><span class="line">           <span class="keyword">WHEN</span></span><br><span class="line">               (<span class="keyword">SELECT</span> department_id</span><br><span class="line">                <span class="keyword">FROM</span> departments</span><br><span class="line">                <span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1800</span>)</span><br><span class="line">               <span class="keyword">THEN</span> <span class="string">&#x27;Canada&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;USA&#x27;</span> <span class="keyword">END</span> location</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779580573.png" alt=""></p><blockquote><p><code>CASE WHEN</code> 根据不同条件返回不同结果，见<a href="https://blog.iskage.online/posts/35d72c0b.html#4-3-%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C">单行函数</a>章节笔记。</p></blockquote><h3 id="2-4-子查询中的空值问题">2.4 子查询中的空值问题</h3><p>如果子查询查不到结果，并不会报错，只是返回空。</p><ul><li>例如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span></span><br><span class="line">      (<span class="keyword">SELECT</span> salary</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Nobody&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779760433.png" alt=""></p><h3 id="2-5-常见错误：返回多行">2.5 常见错误：返回多行</h3><p>使用单行子查询，返回的结果确实多行，则会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br></pre></td></tr></table></figure><blockquote><p>单行比较符，需要比较的两者是唯一值，不可以一个值与多个值比较</p></blockquote><h2 id="3-多行子查询">3 多行子查询</h2><h3 id="3-1-案例引入">3.1 案例引入</h3><ul><li>例如：查询与 141 号或 174 号员工的 <code>manager_id</code> 和 <code>department_id</code> 相同的其他员工的 <code>employee_id</code> <code>manager_id</code> 和 <code>department_id</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 不成对比较，逐个增加条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> manager_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>))</span><br><span class="line">  <span class="keyword">AND</span> department_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> department_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>))</span><br><span class="line">  <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 2. 当作一个集合进行比较</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (manager_id, department_id) <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>))</span><br><span class="line">  <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778806369.png" alt=""></p><p>【补充】可以查看一下具体的条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778790765.png" alt=""></p><h3 id="3-2-常见多行比较操作符">3.2 常见多行比较操作符</h3><table><thead><tr><th style="text-align:left">操作符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>IN</code></td><td>等于列表中任意一个即可</td></tr><tr><td style="text-align:left"><code>ANY</code></td><td>和子查询返回的某个值比较</td></tr><tr><td style="text-align:left"><code>ALL</code></td><td>和子查询返回的所有值比较</td></tr><tr><td style="text-align:left"><code>SOME</code></td><td>和 ANY 相同</td></tr></tbody></table><h3 id="3-3-示例">3.3 示例</h3><h4 id="3-3-1-ANY-和-ALL">3.3.1 ANY 和 ALL</h4><ul><li><code>ANY</code> ：返回其 <code>job_id</code> 中比 <code>job_id</code> 为 <code>IT_PROG</code> 部门<strong>任一</strong>工资低的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ANY</span></span><br><span class="line">      (<span class="keyword">SELECT</span> e.salary</span><br><span class="line">       <span class="keyword">FROM</span> employees e</span><br><span class="line">       <span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> e.job_id <span class="operator">!=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780719982.png" alt=""></p><blockquote><p>子查询会返回很多行数据（不同的 <code>salary</code>）但我们需要找到的是只要比子查询的结果任意一个低即可，类似于 <code>&lt; MAX()</code></p></blockquote><ul><li><code>ALL</code> ：返回其 <code>job_id</code> 中比 <code>job_id</code> 为 <code>IT_PROG</code> 部门<strong>任意</strong>工资低的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ALL</span></span><br><span class="line">      (<span class="keyword">SELECT</span> e.salary</span><br><span class="line">       <span class="keyword">FROM</span> employees e</span><br><span class="line">       <span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> e.job_id <span class="operator">!=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780740500.png" alt=""></p><blockquote><p>子查询会返回很多行数据（不同的 <code>salary</code>）但我们需要找到的是比子查询的结果任意都低，类似于 <code>&lt; MIN()</code></p></blockquote><p>观察一下子查询的条件返回的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- condition</span></span><br><span class="line"><span class="keyword">SELECT</span> e.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780820060.png" alt=""></p><p>最大为 9000 ，最小为 4200 ：在使用 ANY 时，小于 9000 即可；但在使用 ALL 时，却需要小于 4200 。这就是二者明显的不同。</p><h4 id="3-3-2-FROM-后嵌套查询分组语句">3.3.2 FROM 后嵌套查询分组语句</h4><ul><li>查询平均工资最低的部门 id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法 1: 直接使用 MIN</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(avg_sal)</span><br><span class="line">                      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">                            <span class="keyword">FROM</span> employees</span><br><span class="line">                            <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) dept_avg_sal);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法 2: 使用 ALL 间接表达最小</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&lt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">                           <span class="keyword">FROM</span> employees</span><br><span class="line">                           <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id);</span><br></pre></td></tr></table></figure><blockquote><p><code>GROUP BY</code> 和单行函数联合使用，返回多行结果</p></blockquote><h2 id="4-相关子查询">4 相关子查询</h2><h3 id="4-1-相关子查询的例子">4.1 相关子查询的例子</h3><p>例如：查询员工信息，筛选条件为其工资要大于他所在部门的平均工资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span></span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> department_id <span class="operator">=</span> e.department_id)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>如此，每次查一行数据时，就会执行子查询计算 <code>department_id</code> 等于当前行的平均工资，再返回给 WHERE 子句进行判断，决定是否查询这一行。</p><h3 id="4-2-FROM-后使用子查询">4.2 FROM 后使用子查询</h3><p>同样是上面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary, e1.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1,</span><br><span class="line">     (<span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary) dept_avg_sal</span><br><span class="line">      <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.department_id <span class="operator">=</span> e2.department_id</span><br><span class="line">  <span class="keyword">AND</span> e1.salary <span class="operator">&gt;</span> e2.dept_avg_sal</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>FROM 后使用子查询，相当于创造了一张虚拟表，一定要使用 <code>()</code> 和别名。</p><h3 id="4-3-ORDER-BY-后使用子查询">4.3 ORDER BY 后使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">SELECT</span> d.department_name</span><br><span class="line">          <span class="keyword">FROM</span> departments d</span><br><span class="line">          <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure><h3 id="4-4-EXISTS-与-NOT-EXISTS">4.4  EXISTS 与 NOT EXISTS</h3><p><code>EXISTS</code> ：检查在子查询中是否存在满足条件的行。逐行查询时：</p><ul><li><p>如果在子查询中<strong>不存在</strong>满足条件的行：条件返回 <code>FALSE</code> 。继续在子查询中查找</p></li><li><p>如果在子查询中<strong>存在</strong>满足条件的行：条件返回 <code>TRUE</code> 。不在子查询中继续查找</p></li></ul><p><code>NOT EXISTS</code> 则相反。</p><p>例如：返回是公司管理者，即查找是否有 <code>manager_id</code> 等于这个员工的 <code>employee.id</code></p><p>【方法一】EXISTS</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">              <span class="keyword">FROM</span> employees e2</span><br><span class="line">              <span class="keyword">WHERE</span> e2.manager_id <span class="operator">=</span></span><br><span class="line">                    e1.employee_id);</span><br></pre></td></tr></table></figure><blockquote><p>注意：EXISTS 返回的是 True 和 False</p></blockquote><p>【方法二】自连接</p><p>或者使用自连接，即创造一个虚拟表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e1.employee_id, e1.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line">         <span class="keyword">JOIN</span> employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.employee_id <span class="operator">=</span> e2.manager_id;</span><br></pre></td></tr></table></figure><blockquote><p>【推荐】：相比子查询，自连接更为高效</p></blockquote><p>【方法三】多行子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> manager_id</span><br><span class="line">       <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><h3 id="4-5-相关子查询去更新与更新">4.5 相关子查询去更新与更新</h3><h4 id="4-5-1-相关更新">4.5.1 相关更新</h4><p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p><ul><li>先增加一个字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> employees</span><br><span class="line">    <span class="keyword">ADD</span>(department_name <span class="type">VARCHAR</span>(<span class="number">50</span>));</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field           <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date       <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary          <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct  <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id      <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_name <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span> <span class="comment">-- 新增字段</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>然后更新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees e</span><br><span class="line"><span class="keyword">SET</span> department_name <span class="operator">=</span></span><br><span class="line">        (<span class="keyword">SELECT</span> department_name</span><br><span class="line">         <span class="keyword">FROM</span> departments d</span><br><span class="line">         <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739783513615.png" alt=""></p><h4 id="4-5-2-相关删除">4.5.2 相关删除</h4><p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名<span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> 列名</span><br><span class="line">       <span class="keyword">FROM</span> 表名<span class="number">2</span></span><br><span class="line">       <span class="keyword">WHERE</span> 条件);</span><br></pre></td></tr></table></figure><blockquote><p><code>IN</code> 也可以是其他操作符</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda 创建虚拟环境常见问题：虚拟环境路径错误</title>
      <link href="/posts/90e61ddb.html"/>
      <url>/posts/90e61ddb.html</url>
      
        <content type="html"><![CDATA[<h1>conda 创建虚拟环境常见问题：环境路径错误</h1><h2 id="1-下载、安装、配置-conda">1 下载、安装、配置 conda</h2><p>利用 conda 更为轻便的搭建虚拟环境，包括了 下载、安装、环境变量配置、使用与常见问题收录。见 <a href="https://zhuanlan.zhihu.com/p/21629604277">conda 创建虚拟环境全流程</a> 。（或者<a href="https://blog.iskage.online/posts/2c3265b7.html">博客链接</a>）</p><h2 id="2-问题：虚拟环境路径与-conda-安装路径不同">2 问题：虚拟环境路径与 conda 安装路径不同</h2><p>在安装过程中，如果自定义了安装路径，例如：将 conda 安装在了 D 盘，则会发现：在利用 conda 创建环境时，虚拟环境的路径仍然位于系统盘 C 盘。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739602431664.png" alt=""></p><p>下面，全流程详细介绍如何解决：</p><h2 id="3-首先检查环境变量">3 首先检查环境变量</h2><h3 id="3-1-检查环境变量">3.1 检查环境变量</h3><p>在 <code>命令行提示符</code> （注意：不是 PowerShell） 里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> conda</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/2f1701e249a2b80d6f4f3d54c71c5461.png" alt=""></p><h3 id="3-2-补充环境变量">3.2 补充环境变量</h3><p>注意：如果没有出现上图的结果，则需要补充到环境变量：</p><ul><li>右键【此电脑】，选择【属性】</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/81a20737e9394766099cdbd96e84b381_720.png" alt="、"></p><ul><li>选择【高级系统设置】，然后点击【环境变量】，双击【PATH】后【新建】添加 4 个路径</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...\miniconda3</span><br><span class="line">...\miniconda3\Scripts</span><br><span class="line">...\miniconda3\Library\bin</span><br><span class="line">...\miniconda3\condabin</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/eac2e32e0bf670ebee8acafd1433ff57_720.png" alt=""></p><h2 id="4-修改-condarc-文件">4 修改 <code>.condarc</code> 文件</h2><h3 id="4-1-condarc-文件配置">4.1 .condarc 文件配置</h3><p>来到 conda 安装路径，例如我的路径： <code>D:\ProgramData\miniconda3</code> 。找到 <code>.condarc</code> 文件，右键以记事本格式打开。</p><blockquote><p>【推荐】使用 vscode 打开，比较容易找到 <code>.condarc</code> 文件</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4938895f665d67b146c44c063e40f41e.png" alt=""></p><h3 id="4-2-添加虚拟环境安装路径">4.2 添加虚拟环境安装路径</h3><p>将 conda 安装路径下的 <code>envs</code> 文件夹路径填入 <code>.condarc</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">envs <span class="built_in">dirs</span>:</span><br><span class="line">- D://ProgramData//miniconda3//envs</span><br></pre></td></tr></table></figure><blockquote><p>【注意】根据自己的安装路径填写；格式要正确，注意缩进；使用 <code>//</code> 分隔各目录，不要使用 <code>\</code></p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/df786b1cfa768f744046426e730bfb35_720.png" alt=""></p><p>保存退出后还须设置权限。</p><h3 id="4-3-设置-envs-文件夹权限">4.3 设置 <code>envs</code> 文件夹权限</h3><ul><li>右键【envs】文件夹，选择【属性】</li><li>选择【安全】，点击【编辑】</li><li>选中【Users(用户名\Users)】，选中运行所有权限，如图所示</li><li>点击【确认】，确保修改被保存</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/144df84f90add26fad392113d15fa132_720.png" alt=""></p><p>此时，已经配置完成。现在使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名 [python=3.12]</span><br><span class="line"><span class="comment"># [] 表示可选</span></span><br></pre></td></tr></table></figure><p>可以正常创建环境，且虚拟环境的安装位置也处于指定目录下：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/5e449048e3545b0cbb378928c2995c04.png" alt=""></p><blockquote><p>但是使用一些集成开发环境 IDEA 时，可能会出现无法识别“环境名”的问题</p><p>【注意】只是识别不出环境名，直接指定环境下的 <code>python.exe</code> 等文件同样可以配置成功，只是无法显示环境名。具体案例和解决方法见下：</p></blockquote><h2 id="5-问题：集成开发环境-IDEA-无法识别环境名称">5 问题：集成开发环境 IDEA 无法识别环境名称</h2><h3 id="5-1-Vscode-可以直接指定，无问题">5.1 Vscode 可以直接指定，无问题</h3><p>例如：利用终端命令 <code>conda create -n dl</code> 创建了名为 <code>dl</code> 的环境，然后查看 dl 可执行文件的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/5e449048e3545b0cbb378928c2995c04.png" alt=""></p><p>然后在 vscode 中【选择内核】里选择 【Python 解释器】添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ProgramData\miniconda3\envs\dl\python.exe  <span class="comment"># 替换自己的路径</span></span><br></pre></td></tr></table></figure><p>即可成功。</p><h3 id="5-2-PyCharm-无法识别环境名">5.2 PyCharm 无法识别环境名</h3><h4 id="5-2-1-直接指定可执行文件">5.2.1 直接指定可执行文件</h4><p>按照上述相同方法，同样可以将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ProgramData\miniconda3\envs\dl\python.exe  <span class="comment"># 替换自己的路径</span></span><br></pre></td></tr></table></figure><p>可执行文件 <code>.exe</code> 添加到 PyCharm 的 【Python 解释器】中，同样可以正常使用，只是环境名 <code>dl</code> 可能无法显示。此时可能显示为类似 <code>Python 3.12.8(1)</code> 的名字，带来不方便。</p><blockquote><p>【注意】可以【正常使用！！！】，只是环境名无法显示</p></blockquote><h4 id="5-2-2-利用-PyCharm-创建虚拟环境">5.2.2 利用 PyCharm 创建虚拟环境</h4><p>为了避免这个窘境，可以选择让 PyCharm 使用我们下载的 conda 创建虚拟环境</p><blockquote><p>因为之前的配置，我们只要选定 conda ，PyCharm 创建的虚拟环境仍然在我们指定的路径中。相比让 PyCharm 自主下载 conda 后创建环境，更好管理。</p></blockquote><ul><li>选择【添加 Python 解释器】(【Python Interpreter】)，点击【增加本地解释器】(【Add Local Interpreter】)</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/fa371f66893a913f888bc66856267d76.png" alt=""></p><ul><li>选择创建环境【Generate new】，选择【Conda】，自己选定 Python 版本【Python version】，设置环境名【Name】。</li><li><strong>重点</strong> ：选择已经安装好的的 conda 路径【Path to conda】，填入 conda 安装路径的 <code>Scripts\conda.exe</code> 文件即可。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/95f4e6cb3cbb8ac0497d4a28c0365f17.png" alt=""></p><p>之后 PyCharm 会通过我们安装的 conda 进行创建，新环境也会安装在之前配置的路径中，方便后续管理。而且，此时环境名也可以自动被 PyCharm 识别。</p>]]></content>
      
      
      <categories>
          
          <category> conda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（7）：向量化 广播机制 基本索引与切片</title>
      <link href="/posts/2271b16b.html"/>
      <url>/posts/2271b16b.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（7）向量化与广播机制与基本索引与切片</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><h2 id="1-向量化">1 向量化</h2><p>向量化计算是一种特殊的并行计算方式。</p><ul><li>向量化计算：对不同的数据执行同样的一个或一批指令，或者把指令应用到一个数组或向量上，从而将多次循环操作变成一次计算。</li></ul><blockquote><p>例如：当计算乘积加和时，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup><mo>⋅</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_1, a_2, ..., a_n]^T \cdot [x_1, x_2, \cdots, x_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 替代 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><msub><mi>a</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n\ a_i x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 可以极大地提高计算效率。</p></blockquote><p>在 Python 中，<code>for</code> 循环是一种及其低效的计算方法，我们往往希望能通过向量化运算并行计算。</p><ul><li>例如：利用 <code>for</code> 循环和直接向量相加，耗时差距大约数百倍</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 循环完成加法操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_with_for</span>(<span class="params">x, y</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(x, y):</span><br><span class="line">        result.append(i + j)</span><br><span class="line">    <span class="keyword">return</span> torch.tensor(result)</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">100</span>)</span><br><span class="line">y = torch.randn(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">%timeit -n <span class="number">100</span> sum_with_for(x, y)  <span class="comment"># for 循环</span></span><br><span class="line">%timeit -n <span class="number">100</span> (x + y) <span class="comment"># 向量化计算</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739517601343.png" alt=""></p><p>综上可知，在进行计算时尽可能使用向量化计算，避免使用 <code>for</code> 循环。</p><h2 id="2-广播机制">2 广播机制</h2><p>广播法则（broadcast）：快速执行向量化计算的同时不会占用额外的内存 / 显存。</p><h3 id="2-1-NumPy-中的广播法则">2.1 NumPy 中的广播法则</h3><ul><li><ol><li>广播后形状一致：所有输入数组都与形状 (shape) 最大的数组看齐，形状不足的部分在前面加 1 补齐</li></ol></li><li><ol start="2"><li>存在相同大小的维度：两个数组要么在某一个维度的尺寸一致，要么其中一个数组在该维度的尺寸为 1 ，否则不符合广播法则的要求</li></ol></li><li><ol start="3"><li>通过复制补齐：如果输入数组的某个维度的尺寸为 1 ，那么计算时沿此维度复制扩充成目标的形状大小</li></ol></li></ul><h3 id="2-2-Pytorch-实现广播">2.2 Pytorch 实现广播</h3><p>PyTorch 支持自动广播法则，也可以手动设置：</p><ul><li><p><code>unsqueeze</code> <code>view</code> <code>tensor[None]</code> ： 为数据某一维度补 1 ，实现广播法则 1</p></li><li><p><code>expand</code> <code>expand_as</code> 重复数组：实现广播法则 3 (该操作不会复制整个数组，因此不会占用额外的空间)</p></li></ul><blockquote><p>【注意】<code>repeat</code> 可以实现与 <code>expand</code> 类似的功能： <code>expand</code> 是在已经存在的 Tensor 上创建一个新维度复制数据。故 <code>repeat</code> 会占用额外的空间</p></blockquote><h3 id="2-3-具体使用">2.3 具体使用</h3><h4 id="2-3-1-自动广播法则">2.3.1 自动广播法则</h4><p>以 <code>a = torch.ones(3, 2); b = torch.zeros(2, 3, 1)</code> 为例计算 <code>a + b</code> 的自动广播过程：</p><ul><li>第一步（法则 1）</li></ul><p>a 是 2 维的，b 是 3 维的。所以先在较小的 a 前面补 1 个维度 <code>a.unsqueeze(0) -&gt; a.shape = (1, 3, 2)</code></p><ul><li>第二步（法则 2）</li></ul><p>此时 <code>a.shape = (1, 3, 2)</code> 而 <code>b.shape = (2, 3, 1)</code> 二者在第二个维度形状一样，都为 3 。满足法则 2，存在相同形状的维度，可以进行广播</p><ul><li>第三步（法则 3）</li></ul><p>a 和 b 在第一和第三个维度的形状不一样， 利用广播法则扩展，按照最大的形状复杂。最终变为 <code>a.shape = b.shape = (2, 3, 2)</code> 即，a 在第一个维度复制，b 在第三个维度复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">(a + b).shape</span><br><span class="line"><span class="comment"># torch.Size([2, 3, 2])</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-详细计算">2.3.2 详细计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">b = torch.tensor([[[-<span class="number">1</span>], [-<span class="number">2</span>], [-<span class="number">3</span>]], [[-<span class="number">4</span>], [-<span class="number">5</span>], [-<span class="number">6</span>]]])</span><br><span class="line">a.shape, b.shape</span><br><span class="line"><span class="comment"># (torch.Size([3, 2]), torch.Size([2, 3, 1]))</span></span><br></pre></td></tr></table></figure><p>加和使用自动广播机制得到结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[[ 0,  1],</span></span><br><span class="line"><span class="string">         [ 1,  2],</span></span><br><span class="line"><span class="string">         [ 2,  3]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-3, -2],</span></span><br><span class="line"><span class="string">         [-2, -1],</span></span><br><span class="line"><span class="string">         [-1,  0]]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>具体 <code>a</code> 的广播结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a =</span><br><span class="line">[</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">].shape = (<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># -(broadcast)-&gt; </span></span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>具体 <code>b</code> 的广播结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">b = </span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">1</span>],</span><br><span class="line">        [-<span class="number">2</span>],</span><br><span class="line">        [-<span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">4</span>],</span><br><span class="line">        [-<span class="number">5</span>],</span><br><span class="line">        [-<span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># -(broadcast)-&gt; </span></span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">1</span>, -<span class="number">1</span>],</span><br><span class="line">        [-<span class="number">2</span>, -<span class="number">2</span>],</span><br><span class="line">        [-<span class="number">3</span>, -<span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">4</span>, -<span class="number">4</span>],</span><br><span class="line">        [-<span class="number">5</span>, -<span class="number">5</span>],</span><br><span class="line">        [-<span class="number">6</span>, -<span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>所以计算过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a + b =</span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span> - <span class="number">1</span>, <span class="number">2</span> - <span class="number">1</span>],</span><br><span class="line">        [<span class="number">3</span> - <span class="number">2</span>, <span class="number">4</span> - <span class="number">2</span>],</span><br><span class="line">        [<span class="number">5</span> - <span class="number">3</span>, <span class="number">6</span> - <span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span> - <span class="number">4</span>, <span class="number">2</span> - <span class="number">4</span>],</span><br><span class="line">        [<span class="number">3</span> - <span class="number">5</span>, <span class="number">4</span> - <span class="number">5</span>],</span><br><span class="line">        [<span class="number">5</span> - <span class="number">6</span>, <span class="number">6</span> - <span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-3-repeat-复制占用额外空间">2.3.3 repeat 复制占用额外空间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较 expand 和 repeat 的内存占用情况</span></span><br><span class="line">a = torch.ones(<span class="number">1</span>, <span class="number">3</span>) <span class="comment"># shape = (1, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(a.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 3 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expand 不额外占用内存，只返回一个新的视图</span></span><br><span class="line">b = a.expand(<span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># shape = (3, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(b.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 3 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># repeat 复制了原始张量</span></span><br><span class="line">c = a.repeat(<span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># shape = (3, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(c.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 27 &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-手动广播">2.3.4 手动广播</h4><p>可以先扩展成相同维度数，再扩展成相同形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动广播</span></span><br><span class="line">a = torch.ones(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. unsqueeze + expand</span></span><br><span class="line">a.unsqueeze(<span class="number">0</span>).expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. view + expand</span></span><br><span class="line">a.view(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>).expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. None + expand 【推荐】</span></span><br><span class="line">a[<span class="literal">None</span>, :, :].expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="3-基本索引与切片">3 基本索引与切片</h2><p>Pytorch 的基本索引与切片与 Numpy 类似，例如：</p><ul><li><code>元组序列</code> ：在索引中直接使用一个元组序列对 Tensor 中数据的具体位置进行定位，也可以直接使用数字，即去除元组括号</li><li><code>切片对象</code> ：切片形如<code>[start:end:step]</code>，对一个维度进行全选时可以直接使用 <code>:</code></li><li><code>...</code> ：在索引中常用省略号来代表一个或多个维度的切片</li><li><code>None</code> ：表示增加一个维度</li></ul><h3 id="3-1-元组序列">3.1 元组序列</h3><p>使用 <code>tensor[x, x, x]</code> 或 <code>tensor[(x, x, x)]</code> 索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = torch.Tensor([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)]).view(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">[ 0.,  1.,  2.,  3.],</span></span><br><span class="line"><span class="string">[ 4.,  5.,  6.,  7.],</span></span><br><span class="line"><span class="string">[ 8.,  9., 10., 11.]],</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">    [12., 13., 14., 15.],</span></span><br><span class="line"><span class="string">    [16., 17., 18., 19.],</span></span><br><span class="line"><span class="string">    [20., 21., 22., 23.]</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取位置 [0, 1, 2] 的元素 </span></span><br><span class="line"><span class="comment"># 等价于 a[(0, 1, 2)]</span></span><br><span class="line">a[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor(6.)</span></span><br><span class="line"><span class="string"># (第一维度形状 2 的第 0 个, 第二维度形状 3 的第 1 个, 第三维度形状 4 的第 2 个) 所以为 6.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第三个维度全取</span></span><br><span class="line"><span class="comment"># 等价于 a[(1, 1)]，a[(1, 1, )]，a[1, 1]</span></span><br><span class="line">a[<span class="number">1</span>, <span class="number">1</span>, :]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([16., 17., 18., 19.])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-和-运算符">3.2 <code>...</code> 和 <code>:</code> 运算符</h3><ul><li><code>:</code> ：使用格式 <code>[start:end:step]</code> 。单独使用 <code>:</code> 代表这个维度全取，<code>start</code> 和 <code>end</code> 为空分别表示从头开始和一直到结束，<code>step</code> 的默认值是 1</li><li><code>...</code> ：用于省略任意多个维度，可以用在切片的中间，也可以用在首尾</li></ul><h4 id="3-2-1-运算符代表全取">3.2.1 <code>:</code> 运算符代表全取</h4><p>常见格式 <code>tensor[:, :, start:end:step]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">64</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br><span class="line"></span><br><span class="line">a[:, :, <span class="number">0</span>:<span class="number">224</span>:<span class="number">4</span>, :].shape <span class="comment"># 第一、二、四维度全取，第三个维度取 0 到 223 间隔 4 个一取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略 start 和 end 代表整个维度</span></span><br><span class="line">a[:, :, ::<span class="number">4</span>, :].shape  <span class="comment"># 第一、二、四维度全取，第三个维度间隔 4 个一取，从开始取到结尾</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">均为</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 56, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-代替多个维度">3.2.2 <code>...</code> 代替多个维度</h4><p>若 <code>a.shape = (64, 3, 224, 224)</code> 使用 <code>a[..., ::4, :]</code> 代表第一、二维度均取，相当于用 <code>a[:, :, ::4, :]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 ... 代替一个或多个维度，建议一个索引中只使用一次</span></span><br><span class="line"></span><br><span class="line">a[..., ::<span class="number">4</span>, :].shape <span class="comment"># 第一、二维度都取，用 ... 替代了 :, :,</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 56, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>【建议】<code>...</code> 在一个索引里只出现一次，否则会出现难以匹配</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a[..., ::<span class="number">4</span>, ...].shape  <span class="comment"># 如果将最后一个维度也改为 ... 那么在匹配维度时将混乱出错</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 224, 56])  此处第一个 ... 代表了第一、二、三维度，而第二个 ... 没有匹配</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-None-索引">3.3 None 索引</h3><p><code>None</code> 索引可以简单地理解为维度的扩展，在广播法则用于补充维度。即相当于 <code>unsqueeze()</code> 函数。不过与 <code>unsqueeze()</code> 相比，使用 <code>None</code> 可以更为直观，因为它直接在索引中表示了扩展的维度。</p><blockquote><p>简单而言，【推荐】使用 <code>None</code> 来扩展维度</p></blockquote><ul><li>增加一个维度</li></ul><p>在增加一个维度时，<code>None</code> 的优势并不明显</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.unsqueeze(<span class="number">0</span>).shape)  <span class="comment"># 使用 unsqueeze 在第 0 位置补充维度</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="literal">None</span>, ...].shape)  <span class="comment"># 直接指定 0 号位置补充维度 (... 代表后面所有维度)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 224, 224])</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 224, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>增加多个维度</li></ul><p>如果要增加多个维度，则需要多次 <code>unsqueeze()</code> 并且每次还要计算索引位置，十分复杂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为 [1, 3, 1, 3, 1, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">0</span>) <span class="comment"># [1, 3, 3, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">2</span>) <span class="comment"># [1, 3, 1, 3, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">4</span>) <span class="comment"># [1, 3, 1, 3, 1, 3]</span></span><br><span class="line"></span><br><span class="line">x.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 1, 3, 1, 3])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>若使用 <code>None</code> 直接指定维度位置，则方便很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为 [1, 3, 1, 3, 1, 3]</span></span><br><span class="line">x = x[<span class="literal">None</span>, :, <span class="literal">None</span>, :, <span class="literal">None</span>, :]</span><br><span class="line"></span><br><span class="line">x.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 1, 3, 1, 3])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-综合使用">3.4 综合使用</h3><p>【案例】计算批量 <code>batch_size = 16</code> 的样本的矩阵乘法： <code>[256, 1] @ [1, 256]</code> 最后应该得到 <code>shape = [16, 256, 256]</code> （其中 <code>@</code> 代表矩阵乘法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">16</span> * <span class="number">256</span>).view(<span class="number">16</span>, <span class="number">256</span>)</span><br><span class="line">a.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([16, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-1-手动扩展并计算">3.4.1 手动扩展并计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b = a.unsqueeze(<span class="number">1</span>)  <span class="comment"># b.shape = [16, 1, 256]</span></span><br><span class="line">c = b.transpose(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># c.shape = [16, 256, 1]</span></span><br><span class="line"><span class="built_in">print</span>((b @ c).shape)</span><br><span class="line"><span class="built_in">print</span>((c @ b).shape)  </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个 [16, 1, 256] @ [16, 256, 1] 得到的是 torch.Size([16, 1, 1])</span></span><br><span class="line"><span class="string">第二个 [16, 256, 1] @ [16, 1, 256] 得到的是 torch.Size([16, 256, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这很符合我们平常的矩阵计算原则，但不是我们希望看到的，因为相乘的顺序直接导致了结果形状的不同。</p><h4 id="3-4-2-自动广播技术">3.4.2 自动广播技术</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b = a[:, <span class="literal">None</span>, :]  <span class="comment"># b.shape = [16, 1, 256]</span></span><br><span class="line">c = a[:, :, <span class="literal">None</span>]  <span class="comment"># c.shape = [16, 256, 1]</span></span><br><span class="line"><span class="built_in">print</span>((b * c).shape)</span><br><span class="line"><span class="built_in">print</span>((c * b).shape)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">两个结果均为</span></span><br><span class="line"><span class="string">torch.Size([16, 256, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>通过广播机制：形如 <code>[16, 1, 256]</code> 与 <code>[16, 256, 1]</code> 相乘时，首先因为通过 <code>None</code> 扩展了，故维度相同（<em>满足法则一</em>）；其次存在有形状的维度，第一个维度均为 <code>16</code> （<em>满足法则二</em>）；最后相乘时，对形状 <code>1</code> 进行复制，复制到 <code>256</code> 再与同维度的数相乘（<em>使用法则三</em>）</p><p>所以，通过广播机制，得到的结果是相同的，无需考虑顺序问题【推荐】</p><blockquote><p>Pytorch 的张量 Tensor 在进行乘法时：</p><ul><li>维度、形状不同：检查是否能进行广播，从而计算</li><li>维度、形状均相同：直接进行逐元素计算，例如：</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 补充：逐元素计算</span></span><br><span class="line">a = torch.arange(<span class="number">16</span> * <span class="number">256</span>).view(<span class="number">16</span>, <span class="number">256</span>)  <span class="comment"># a.shape = [16, 256]</span></span><br><span class="line"></span><br><span class="line">(a * a).shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">和 a 相同，仍然是 </span></span><br><span class="line"><span class="string">[16, 256]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（6）：GPU 加速：CUDA 的使用</title>
      <link href="/posts/a6d6e67c.html"/>
      <url>/posts/a6d6e67c.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（6）GPU 加速：CUDA 的使用</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><p>使用 GPU 加速技术，可以大幅减少训练时间。Pytorch 中的 <code>Tensor</code> 张量和 <code>nn.Module</code> 类就分为 CPU 和 GPU 两种版本。一般使用 <code>.cuda()</code> 和 <code>.to(device)</code> 方法实现从 CPU 迁移到 GPU ，从设备迁移到设备。</p><blockquote><p>但 <code>Tensor</code> 和 <code>nn.Module</code> 使用 <code>.cuda()</code> 方法时返回的对象不同。</p><ul><li><code>Tensor.cuda()</code> 返回一个新对象，即拷贝了一份张量到 GPU ，之前的张量仍然储存在 CPU</li><li><code>nn.Module</code> 实例化后的 <code>module</code> 使用 <code>module.cuda()</code> 直接将所有数据推送到 GPU 不备份自己，即 <code>module.cuda()</code> 与 <code>module = module.cuda()</code> 等价</li></ul></blockquote><blockquote><p><code>.to(device)</code> 可以更灵活地在不同设备上迁移</p></blockquote><h2 id="1-cuda-方法">1 .cuda() 方法</h2><h3 id="1-1-张量-cuda-返回新的对象">1.1 张量 .cuda() 返回新的对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():  <span class="comment"># 检查 CUDA 是否可用</span></span><br><span class="line">    t_cuda = t.cuda()  <span class="comment"># 将张量 t 移动到 CUDA 设备</span></span><br><span class="line">    <span class="built_in">print</span>(t.is_cuda)</span><br><span class="line">    <span class="built_in">print</span>(t_cuda.is_cuda)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">False</span></span><br><span class="line">   <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p><code>.cuda()</code> 等价于 <code>.cuda(0)</code>  or <code>.cuda(device=0)</code> 迁移到第 0 块 GPU 上</p></blockquote><h3 id="1-2-module-cuda-返回自己">1.2 module.cuda() 返回自己</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">module = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    module.cuda(device=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(module.weight.is_cuda)  <span class="comment"># True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>迁移到 GPU 本质都是对张量 Tensor 做变换，所以对于模型 module ，也是其权重等参数进行迁移</p></blockquote><h2 id="2-to-device-方法">2 .to(device) 方法</h2><p><code>.to(device)</code> 方法可以指定设备</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.to方法，将 Tensor 转移至第 0 块GPU上</span></span><br><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    t_cuda = t.to(<span class="string">&#x27;cuda:0&#x27;</span>)  <span class="comment"># device: &#x27;cuda:0&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(t_cuda.is_cuda)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="3-损失函数迁移到-GPU">3 损失函数迁移到 GPU</h2><p>大部分的损失函数都属于 <code>nn.Module</code> ，在使用 GPU 时，建议使用 <code>.cuda</code> 或 <code>.to</code> 迁移到 GPU 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    <span class="comment"># 以交叉熵损失函数为例</span></span><br><span class="line">    criterion = torch.nn.CrossEntropyLoss(weight=torch.Tensor([<span class="number">1</span>, <span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 张量 Tensor 迁移到 GPU</span></span><br><span class="line">    inputs = torch.randn(<span class="number">4</span>, <span class="number">2</span>).cuda()</span><br><span class="line">    target = torch.Tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]).long().cuda()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># loss = criterion(input, target)  # 报错：计算损失函数的参数为迁移到 GPU</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正确：迁移损失函数</span></span><br><span class="line">    criterion.cuda()</span><br><span class="line">    loss = criterion(inputs, target)</span><br><span class="line">    <span class="built_in">print</span>(criterion._buffers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: OrderedDict([(<span class="string">&#x27;weight&#x27;</span>, tensor([<span class="number">1.</span>, <span class="number">3.</span>], device=<span class="string">&#x27;cuda:0&#x27;</span>))])</span><br></pre></td></tr></table></figure><h2 id="4-torch-cuda-device-指定默认设备">4 torch.cuda.device() 指定默认设备</h2><p>使用 <code>torch.cuda.device()</code> 指定默认设备，则不需要每次调用 <code>.cuda</code> 或 <code>.to</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定默认使用GPU &quot;cuda:0&quot;</span></span><br><span class="line"><span class="keyword">with</span> torch.cuda.device(<span class="number">0</span>):</span><br><span class="line">    <span class="comment"># 在 GPU 上构建Tensor</span></span><br><span class="line">    a = torch.cuda.FloatTensor(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 Tensor 转移至 GPU</span></span><br><span class="line">    b = torch.FloatTensor(<span class="number">2</span>, <span class="number">3</span>).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a.get_device)</span><br><span class="line">    <span class="built_in">print</span>(b.get_device)</span><br><span class="line"></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c.get_device)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C70C59CC0</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C04443930</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C04441360</span>&gt;</span><br></pre></td></tr></table></figure><p>或者使用 <code>torch.set_default_tensor_type()</code> 方法，指定张量类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">torch.set_default_tensor_type(<span class="string">&#x27;torch.cuda.FloatTensor&#x27;</span>) <span class="comment"># 指定默认 Tensor 的类型为GPU上的FloatTensor</span></span><br><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a.is_cuda)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">torch.set_default_tensor_type(<span class="string">&#x27;torch.FloatTensor&#x27;</span>) <span class="comment"># 恢复默认</span></span><br></pre></td></tr></table></figure><h2 id="5-多-GPU-操作">5 多 GPU 操作</h2><p>多个 GPU 方便快捷地指定迁移设备。</p><h3 id="5-1-方法一：调用-torch-cuda-set-device">5.1 方法一：调用 <code>torch.cuda.set_device()</code></h3><p>例如：指定先调用 <code>torch.cuda.set_device(1)</code> 指定默认使用 GPU “cuda:1” ，后续的 <code>.cuda()</code> 都无需更改，切换 GPU 只需修改这一行代码</p><h3 id="5-2-方法二：设置环境变量-CUDA-VISIBLE-DEVICES">5.2 方法二：设置环境变量 <code>CUDA_VISIBLE_DEVICES</code></h3><p>例如当 <code>CUDA_VISIBLE_DEVICE=1</code> 时，代表优先使用 GPU “cuda:1” 而不是 GPU “cuda:0” 。此时调用<code>tensor.cuda()</code> 会将Tensor转移至 GPU “cuda:1”</p><p><code>CUDA_VISIBLE_DEVICES</code> 还可以指定多个 GPU 。例如 <code>CUDA_VISIBLE_DEVICES=0,2,3</code> 代表按照 GPU “cuda:0”, “cuda:2”, “cuda:3” 的顺序使用 GPU 。此时 <code>cuda(0)</code> 迁移到 GPU “cuda:0” ，而 <code>.cuda(1)</code> 迁移到 GPU “cuda:2” ，<code>.cuda(2)</code> 迁移到 GPU “cuda:3” 。</p><h3 id="5-3-设置-CUDA-VISIBLE-DEVICES-的方法：">5.3 设置 <code>CUDA_VISIBLE_DEVICES</code> 的方法：</h3><ul><li>法一：命令行中执行 <code>CUDA_VISIBLE_DEVICES=0,1 python main.py</code> 来运行主程序</li><li>法二：程序中编写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="string">&#x27;0,1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>法三：IPython 或者 Jupyter notebook 中（即 <code>.ipynb</code> 文件），则可以使用魔法方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%env CUDA_VISIBLE_DEVICES=<span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="6-CPU-与-GPU-并存">6 CPU 与 GPU 并存</h2><p>考虑到不同电脑可能会有差异，例如当遇到无 GPU 的主机时，容易出现不兼容。（例如：无法迁移到 GPU），所以建议判断是否存在 GPU ，再迁移数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【推荐】如果用户具有 GPU 设备，那么使用GPU，否则使用CPU</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure><p>确定了设备之后，再迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x_to = x.to(device)</span><br><span class="line"><span class="built_in">print</span>(x_to.device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># device(type=&#x27;cuda&#x27;, index=0)</span></span><br></pre></td></tr></table></figure><h2 id="7-张量指定设备">7 张量指定设备</h2><h3 id="7-1-创建张量时指定设备">7.1 创建张量时指定设备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">x_cpu = torch.empty(<span class="number">2</span>, device=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x_cpu, x_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">x_gpu = torch.empty(<span class="number">2</span>, device=device)</span><br><span class="line"><span class="built_in">print</span>(x_gpu, x_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="7-2-new-保留原属性">7.2 new_* 保留原属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># new_*() : 保留原 Tensor 的设备属性</span></span><br><span class="line"></span><br><span class="line">y_cpu = x_cpu.new_full((<span class="number">3</span>, <span class="number">4</span>), <span class="number">9</span>)  <span class="comment"># new_full : 用 9 填充形状 [3, 4] 的张量</span></span><br><span class="line"><span class="built_in">print</span>(y_cpu, y_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">y_gpu = x_gpu.new_zeros(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># new_zeros : 填充 0</span></span><br><span class="line"><span class="built_in">print</span>(y_gpu, y_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="7-3-like-保留原属性">7.3 *_like 保留原属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ones_like或zeros_like可以创建与原Tensor大小类别均相同的新Tensor</span></span><br><span class="line"></span><br><span class="line">z_cpu = torch.ones_like(x_cpu)  <span class="comment"># 大小相同，设备相同</span></span><br><span class="line"><span class="built_in">print</span>(z_cpu, z_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z_gpu = torch.zeros_like(x_gpu)  <span class="comment"># 大小相同，设备相同</span></span><br><span class="line"><span class="built_in">print</span>(z_gpu, z_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（5）：可视化工具：TensorBoard</title>
      <link href="/posts/ef3d3872.html"/>
      <url>/posts/ef3d3872.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（5）可视化工具：TensorBoard</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><p>为了更直观地、实时地观察训练过程，使用一些可视化工具实现训练过程的图形化表达，以便直观地展现结果。</p><p>TensorBoard ：只要用户保存的数据遵循相应的格式，TensorBoard 就能读取这些数据，进行可视化。</p><h2 id="1-下载-TensorBoard">1 下载 TensorBoard</h2><p>最新版本的 Pytorch 在下载时已经配置了 TensorBoard 无需特别下载。如果没有下载 TensorBoard 包需要先在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br></pre></td></tr></table></figure><h2 id="2-创建-logger-对象">2 创建 logger 对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter  <span class="comment"># 导入 tensorboard</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建 logger 对象，指定 log 文件的保存路径 log_dir=&#x27;logs&#x27;</span></span><br><span class="line">logger = SummaryWriter(log_dir=<span class="string">&#x27;logs&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>此时已经可以通过执行：<code>tensorboard --logdir=path</code> 来访问可视化界面。</p></li><li><p><code>path</code> 填入 logger 对象文件保存路径 例如此处的 <code>'./logs'</code> 或 <code>'log'</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端输入以查看结果</span></span><br><span class="line">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739386419718.png" alt=""></p><ul><li>打开浏览器，输入 <code>http://localhost:6006/</code> 查看</li></ul><blockquote><p>此时没有加入任何数据和图像，故界面如下</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739386180385.png" alt=""></p><blockquote><p>或者在 notebook 中查看</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%load_ext tensorboard</span><br><span class="line">%tensorboard --logdir=<span class="string">&#x27;logs&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-添加数据-绘制图像">3 添加数据 &amp; 绘制图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_scalar 记录标量</span></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/train&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/test&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739416635199.png" alt=""></p><blockquote><p>如果不中断 <code>tensorboard --logdir=logs</code> 则可以通过刷新网页来查看。或者可以关闭 (<code>CTRL + C</code>) 后重新启动。</p></blockquote><ul><li>结束后，删除之前的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clear any logs from previous runs</span></span><br><span class="line"><span class="built_in">rm</span> -rf ./logs/</span><br></pre></td></tr></table></figure><h2 id="4-下载数据集-MNIST">4 下载数据集 MNIST</h2><p>以 <code>MNIST</code> 手写识别体数据集为例，首先先下载。可以直接调用 <code>torchvision.datasets.MNIST</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))  <span class="comment"># MNIST 是灰度图，单通道</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;./data/&#x27; 指定下载的路径，download=True 表示下载，train=False 表示下载测试集，transform 指定变换</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>, transform=transform)</span><br></pre></td></tr></table></figure><p>如果无法下载可以前往官网手动下载：</p><p>训练集：<a href="https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz">train-images</a>, <a href="https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz">train-labels</a></p><p>测试集：<a href="https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz">t10k-images</a>, <a href="https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz">t10k-labels</a></p><p>然后放入目录 <code>MNIST</code> 下的 <code>raw</code> 文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── MNIST</span><br><span class="line">    └── raw</span><br><span class="line">        ├── t10k-images-idx3-ubyte.gz</span><br><span class="line">        ├── t10k-labels-idx1-ubyte.gz</span><br><span class="line">        ├── train-images-idx3-ubyte.gz</span><br><span class="line">        └── train-labels-idx1-ubyte.gz</span><br></pre></td></tr></table></figure><p>然后再运行之前的下载代码，将 <code>download=False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">False</span>, train=<span class="literal">False</span>, transform=transform)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── MNIST</span><br><span class="line">    └── raw</span><br><span class="line">        ├── t10k-images-idx3-ubyte</span><br><span class="line">        ├── t10k-images-idx3-ubyte.gz</span><br><span class="line">        ├── t10k-labels-idx1-ubyte</span><br><span class="line">        ├── t10k-labels-idx1-ubyte.gz</span><br><span class="line">        ├── train-images-idx3-ubyte</span><br><span class="line">        ├── train-images-idx3-ubyte.gz</span><br><span class="line">        ├── train-labels-idx1-ubyte</span><br><span class="line">        └── train-labels-idx1-ubyte.gz</span><br></pre></td></tr></table></figure><h2 id="5-常用函数">5 常用函数</h2><h3 id="5-1-add-scalar-添加标量">5.1 add_scalar 添加标量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_scalar(<span class="variable language_">self</span>, tag, scalar_value, global_step=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>tag</code> ：标题名</li><li><code>scalar_value</code> ：标量数值</li><li><code>global_step</code> ：迭代批次</li></ul><p>例如：从 [0, 99] 随机产生标量绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_scalar 记录标量</span></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/train&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/test&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br></pre></td></tr></table></figure><h3 id="5-2-add-image-显示图像">5.2 add_image 显示图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))  <span class="comment"># MNIST 是灰度图，单通道</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;./data/&#x27; 指定下载的路径，download=True 表示下载，train=False 表示下载测试集，transform 指定变换</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, shuffle=<span class="literal">True</span>, batch_size=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">images, labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataloader))</span><br><span class="line">grid = torchvision.utils.make_grid(images)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_image 显示图像</span></span><br><span class="line">logger.add_image(<span class="string">&#x27;images&#x27;</span>, grid, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">%load_ext tensorboard</span><br><span class="line">%tensorboard --logdir=<span class="string">&#x27;logs&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739418831074.png" alt=""></p><h3 id="5-3-add-graph-显示网络结构">5.3 add_graph 显示网络结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_size=<span class="number">28</span>, hidden_size=<span class="number">500</span>, num_classes=<span class="number">10</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(input_size, hidden_size)</span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(hidden_size, num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        out = <span class="variable language_">self</span>.relu(out)</span><br><span class="line">        out = <span class="variable language_">self</span>.fc2(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = myModel()</span><br><span class="line">logger.add_graph(model, images)  <span class="comment"># 代入具体的数值计算 torch.Size([16, 1, 28, 28])</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420352341.png" alt=""></p><h3 id="5-4-add-histogram-显示直方图">5.4 add_histogram 显示直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.add_histogram(<span class="string">&#x27;normal&#x27;</span>, np.random.normal(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1000</span>), global_step=<span class="number">1</span>)</span><br><span class="line">logger.add_histogram(<span class="string">&#x27;normal&#x27;</span>, np.random.normal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1000</span>), global_step=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420726898.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420601056.png" alt=""></p><h3 id="5-5-add-embedding-可视化">5.5 add_embedding 可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_embedding 进行 embedding 可视化</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>)  <span class="comment"># PIL Image 对象可以可视化</span></span><br><span class="line">images = dataset.data[:<span class="number">100</span>].<span class="built_in">float</span>()  <span class="comment"># 提取前 100 张图像并转为浮点数类型</span></span><br><span class="line">label = dataset.targets[:<span class="number">100</span>]  <span class="comment"># 提取前 100 张图像的标签</span></span><br><span class="line">features = images.view(<span class="number">100</span>, <span class="number">28</span> * <span class="number">28</span>)  <span class="comment"># 将图像展平为 100 x 784 的矩阵</span></span><br><span class="line">logger.add_embedding(features, metadata=label, label_img=images.unsqueeze(<span class="number">1</span>))  <span class="comment"># 将嵌入数据记录到 TensorBoard</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（4）：数据处理 Dataset 和 Dataloader</title>
      <link href="/posts/bffdebd7.html"/>
      <url>/posts/bffdebd7.html</url>
      
        <content type="html"><![CDATA[<h1>数据处理 Dataset 和 Dataloader</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的数据处理。相比于搭建已知的神经网络，对数据的处理更为复杂困难。【数据处理非常重要且困难！！】</p><p>Pytorch 针对数据处理，提供了两个重要的类 <code>Dataset</code> 和 <code>Dataloader</code></p><h2 id="1-Dataset-类">1 Dataset 类</h2><p>在 PyTorch 中，数据加载可以通过 <code>Dataset</code>类加载。如果要自定义的数据集，需要继承 <code>Dataset</code> 类，并且必须实现：</p><ul><li><code>__getitem__()</code> ：返回一条数据，或一个样本。<code>obj[index]</code> 等价于 <code>obj.__getitem__(index)</code></li><li><code>__len__()</code> ：返回样本量。<code>len(obj)</code> 等价于 <code>obj.__len__()</code></li></ul><h3 id="1-1-准备数据">1.1 准备数据</h3><p>以 <a href="https://www.kaggle.com/competitions/dogs-vs-cats">Kaggle 经典案例 “Dogs vs. Cats”</a> 的数据为例，构造数据集。有关数据下载，可以前往 <a href="https://www.kaggle.com/competitions/dogs-vs-cats/data">Kaggle 比赛官网下载</a> 。但完整数据集太大，可以下载部分图片，或者<a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/cat_dog.zip">点击链接</a>下载我存储的小部分样本。或者去往来我的 GitHub 库中下载 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><p>Kaggle 比赛 “Dogs vs. Cats” 是一个分类问题：判断一张图片是狗还是猫。在该问题中，所有图片都存放在一个文件夹下，可以根据文件名的前缀得到它们的标签值（ <code>dog</code> 或者 <code>cat</code> ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog/</span><br><span class="line">data/cat_dog/</span><br><span class="line">├── cat.13.jpg</span><br><span class="line">├── cat.14.jpg</span><br><span class="line">├── cat.16.jpg</span><br><span class="line">├── cat.18.jpg</span><br><span class="line">├── dog.2.jpg</span><br><span class="line">├── dog.3.jpg</span><br><span class="line">├── dog.4.jpg</span><br><span class="line">└── dog.5.jpg</span><br></pre></td></tr></table></figure><h3 id="1-2-自定义数据集">1.2 自定义数据集</h3><ul><li>导入必要的库：<code>PIL</code> 库用于读取图片，<code>os</code> 库用于给出路径（以免不同电脑路径组合方式不同）</li><li>自定义数据集：继承 <code>torch.utils.data</code> 的 <code>Dataset</code> 类</li><li>编写 <code>__init__</code> 方法：先初始化图片路径，但暂时不读取图片</li><li>编写 <code>__getitem__</code> 方法：真正读取图片，并定义标签，并转为张量</li><li>编写 <code>__len()__</code> 方法：返回样本量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogCat</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root</span>):</span><br><span class="line">        imgs = os.listdir(root)  <span class="comment"># 所有图片前的绝对路径表</span></span><br><span class="line">        <span class="comment"># 不实际加载图片，只指定路径，当调用 __getitem__ 时才读取图片，以节省内存</span></span><br><span class="line">        <span class="variable language_">self</span>.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_path = <span class="variable language_">self</span>.imgs[index]</span><br><span class="line">        <span class="comment"># 标签设置：dog -&gt; 1， cat -&gt; 0</span></span><br><span class="line">        label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> img_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 真正读取图片</span></span><br><span class="line">        pil_img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        array = np.asarray(pil_img)</span><br><span class="line">        data = torch.tensor(array)  <span class="comment"># 转为张量</span></span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.imgs)  <span class="comment"># 返回样本数</span></span><br></pre></td></tr></table></figure><h3 id="1-3-读取数据集">1.3 读取数据集</h3><p>实例化自定义的数据集 <code>DogCat</code> ，因为 <code>__init__(self, root)</code> 初始化方法里需要参数图片存储的文件夹/路径 <code>root</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>)  <span class="comment"># 图片存储在 ./data/cat_dog/ 文件夹内</span></span><br></pre></td></tr></table></figure><h3 id="1-4-读取数据集里的数据">1.4 读取数据集里的数据</h3><p>使用方法 <code>__getitem__</code> 获取真实数据（此处为图片）<code>img</code> 和标签 <code>label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第一个数据，包含标签和图片</span></span><br><span class="line">img, label = dataset[<span class="number">0</span>]  <span class="comment"># 相当于 dataset.__getitem__(0)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># torch.Size([374, 500, 3]) 说明图片已转为张量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(label)</span><br><span class="line"><span class="comment"># 0 说明是 cat</span></span><br></pre></td></tr></table></figure><p>逐个批量读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tensor&#x27;s shape: &#123;&#125;, label: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(img.shape, label))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739264855512.png" alt=""></p><blockquote><p>但是，我们注意到，图片大小形状不一致，且没有进行标准化，所以需要数据预处理</p></blockquote><h2 id="2-torchvision-库">2 torchvision 库</h2><p>Pytorch 的 <code>torchvision</code> 包提供了许多工具用来处理计算机视觉问题。其中 <code>torchvison.transforms</code> 可以方便快速地对图像进行操作。</p><h3 id="2-1-torchvison-transforms-的常见操作">2.1 torchvison.transforms 的常见操作</h3><p>可以去往 <a href="https://pytorch.org/vision/stable/transforms.html">Pytorch 官网</a> 查询具体使用。</p><h4 id="2-1-1-仅支持-PIL-Image">2.1.1 仅支持 PIL Image</h4><ul><li><code>RandomChoice</code> ：在一系列 transforms 操作中随机执行一个操作</li><li><code>RandomOrder</code> ：以随意顺序执行一系列 transforms 操作</li></ul><h4 id="2-1-2-仅支持-Tensor">2.1.2 仅支持 Tensor</h4><ul><li><code>Normalize</code> ：标准化，即减去均值，除以标准差</li><li><code>RandomErasing</code> ：随机擦除 Tensor 中一个矩形区域的像素。</li><li><code>ConvertImageDtype</code> ：将 Tensor 转换为指定的类型，并进行相应的缩放</li></ul><h4 id="2-1-3-PIL-Image-与-Tensor-相互转换">2.1.3  PIL Image 与 Tensor 相互转换</h4><ul><li><code>ToTensor</code> ：将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">H \times W \times C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 形状的 <code>PIL Image</code> 对象转换成形状为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">C \times H \times W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> 的 <code>Tensor</code> 。同时会自动将像素值从 [0, 255] 归一化至 [0, 1] （C 位通道数）</li><li><code>ToPILImage</code> ：将 <code>Tensor</code> 转为 <code>PIL Image</code> 对象</li></ul><h4 id="2-1-4-既支持-PIL-Image-，又支持-Tensor">2.1.4 既支持 PIL Image ，又支持 Tensor</h4><ul><li><code>Resize</code> ：调整图片尺寸</li><li><code>CenterCrop</code> <code>RandomCrop</code> <code>RandomResizedCrop</code> <code>FiveCrop</code> ： 按照不同规则对图像进行裁剪</li><li><code>RandomAffine</code> ：随机进行仿射变换，保持图像中心不变</li><li><code>RandomGrayscale</code> ：随机将图像变为灰度图</li><li><code>RandomHorizontalFlip</code> <code>RandomVerticalFlip</code> <code>RandomRotation</code> ：随机水平翻转、垂直翻转、旋转图像</li></ul><blockquote><p>如果需要对图片进行多个操作，可以通过 <code>transforms.Compose</code> 将这些操作拼接起来。</p></blockquote><blockquote><p>注意，这些操作定义后以对象的形式存在，真正使用时需要调用 <code>__call__</code> 方法。例如，要将图片的大小调整至 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>×</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">10 \times 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span> ，首先应构建操作 <code>trans = Resize((10, 10))</code> ，然后调用 <code>trans(img)</code></p></blockquote><h3 id="2-2-transforms-操作">2.2 transforms 操作</h3><h4 id="2-2-1-定义变化操作序列">2.2.1 定义变化操作序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变换操作</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">224</span>),  <span class="comment"># 缩放图片 (PIL Image), 保持长宽比不变, 使最短边缩放到 224 像素</span></span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从图片中间切出 224x224 的图片</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图片 (PIL Image) 转成 Tensor , 自动归一化至 [0, 1]</span></span><br><span class="line">    transforms.Normalize(mean=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>], std=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>])  <span class="comment"># 标准化至 [-1, 1] , 规定均值和标准差 , 因为图片为 3 维</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="2-2-2-自定义数据集中加入变化与否参数">2.2.2 自定义数据集中加入变化与否参数</h4><p>将有关变换序列参数加入初始化方法里，同时在 <code>__getitem()__</code> 里加入变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加参数 transform 传入变化序列</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogCat</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root, transform=<span class="literal">None</span></span>):</span><br><span class="line">        imgs = os.listdir(root)</span><br><span class="line">        <span class="variable language_">self</span>.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line">        <span class="variable language_">self</span>.transform = transform  <span class="comment"># 初始化 transforms 操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_path = <span class="variable language_">self</span>.imgs[index]</span><br><span class="line">        <span class="comment"># 标签设置：dog -&gt; 1， cat -&gt; 0</span></span><br><span class="line">        label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> img_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 真正读取图片</span></span><br><span class="line">        data = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.transform:</span><br><span class="line">            data = <span class="variable language_">self</span>.transform(data)  <span class="comment"># 直接进行 transform 变化</span></span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.imgs)  <span class="comment"># 返回样本数</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-实例化数据集">2.2.3 实例化数据集</h4><p>传入变化序列 <code>transform=transform</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>, transform=transform)  <span class="comment"># 使用 transform 进行变换</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-展示结果">2.2.4 展示结果</h4><p>可以发现数据格式统一成了我们需要的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    <span class="built_in">print</span>(img.shape, label)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739276735119.png" alt=""></p><blockquote><p>注意：自定义数据集需要考虑到当 <code>transform = None</code> 时的情形。在上述定义的数据集里，当默认<code>transform = None</code> 时不会报错，此时 <code>img</code> 是 <code>PIL Image</code> 对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">no_transform = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>)</span><br><span class="line">img, label = no_transform[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739276821066.png" alt=""></p><h3 id="2-3-torchvision-封装的常见数据集">2.3 torchvision 封装的常见数据集</h3><p><code>torchvision</code> 封装了常用的 dataset ，例如：<code>CIFAR-10</code>、<code>ImageNet</code>、<code>COCO</code>、<code>MNIST</code>、<code>LSUN</code> 等数据集。可以通过诸如 <code>torchvision.datasets.CIFAR10</code> 的命令进行调用，具体使用方法参考<a href="https://pytorch.org/vision/stable/datasets.html">官方文档</a>。</p><h4 id="2-3-1-ImageFolder-结构">2.3.1 ImageFolder 结构</h4><p>常见数据集结构 <code>ImageFolder</code> ：数据集假设所有的图片按文件夹保存，每个文件夹下存储同一个类别的图片，文件夹名为类名。即需要目录结构为：【可将上文的 cat_dog 数据集自主修改为符合 ImageFolder 要求的目录结构】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog_imagefolder/</span><br><span class="line">data/cat_dog_imagefolder/</span><br><span class="line">├── <span class="built_in">cat</span></span><br><span class="line">│   ├── cat.13.jpg</span><br><span class="line">│   ├── cat.14.jpg</span><br><span class="line">│   ├── cat.16.jpg</span><br><span class="line">│   └── cat.18.jpg</span><br><span class="line">└── dog</span><br><span class="line">    ├── dog.2.jpg</span><br><span class="line">    ├── dog.3.jpg</span><br><span class="line">    ├── dog.4.jpg</span><br><span class="line">    └── dog.5.jpg</span><br></pre></td></tr></table></figure><ul><li><code>ImageFolder</code> 类的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ImageFolder(root, transform=<span class="literal">None</span>, target_transform=<span class="literal">None</span>, loader=default_loader, is_valid_file=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">- root</span><br><span class="line">root 路径目录下存放着不同类别的文件夹</span><br><span class="line"></span><br><span class="line">- transform</span><br><span class="line">对 PIL Image 进行相关操作，transform 的输入是使用 loader 读取图片的返回对象 (一般是 PIL Image)</span><br><span class="line"></span><br><span class="line">- target_transform</span><br><span class="line">对 label 的操作</span><br><span class="line"></span><br><span class="line">- loader</span><br><span class="line">指定加载图片的函数，默认操作是读取为 PIL Image 对象</span><br><span class="line"></span><br><span class="line">- is_valid_file</span><br><span class="line">获取图像路径，检查文件的有效性</span><br></pre></td></tr></table></figure><blockquote><p><code>target_transform</code> 对标签的操作默认，则会返回一个字典。形如 <code>&#123;文件夹1名: 0, 文件夹2名: 1, 文件夹3名: 2, ...&#125;</code> 的字典，每个类的文件夹名和数字对应。可以通过 <code>.class_to_idx</code> 查看对应关系。</p></blockquote><h4 id="2-3-2-ImageFolder-创建数据集-Dataset">2.3.2 ImageFolder 创建数据集 Dataset</h4><ul><li>实例化数据集（未指定变换，直接读取 PIL Image）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> ImageFolder</span><br><span class="line">dataset = ImageFolder(<span class="string">&#x27;./data/cat_dog_imagefolder&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取一下标签 <code>label</code> 对应关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset.class_to_idx</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;cat&#x27;: 0, &#x27;dog&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><p>于是我们知道：<code>0</code> 对应 <code>'cat'</code> ，<code>1</code> 对应 <code>'dog'</code></p><ul><li>查看数据集：返回图片路径和对应的标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset.imgs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739278461256.png" alt=""></p><ul><li>查看具体数据（图片）：因为没有进行操作，默认读取的是 PIL Image 对象</li></ul><p><code>dataset[0]</code> 获取数据集第 0 个样本，包括 <code>img</code> 和 <code>label</code> ，其中第 0 个是 <code>img</code> ，第 1 个是 <code>label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset.__getitem__(<span class="number">0</span>)[<span class="number">0</span>]  <span class="comment"># 等价于 dataset[0][0], 获取 img</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739279152983.png" alt=""></p><ul><li>获取标签，返回类别名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 辅助返回类别名，不重要</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_class_by_idx</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">for</span> key_class, val_idx <span class="keyword">in</span> dataset.class_to_idx.items():</span><br><span class="line">        <span class="keyword">if</span> val_idx == idx:</span><br><span class="line">            <span class="keyword">return</span> key_class</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Not found&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签 dataset[0][1]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The label is: &#123;&#125; meaning &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    dataset.__getitem__(<span class="number">0</span>)[<span class="number">1</span>],</span><br><span class="line">    get_class_by_idx(dataset[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; [Out]: The label is: 0 meaning cat &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>【加入变换】：一般情况下，我们会加入变换 transforms</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入变换</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">224</span>),  <span class="comment"># 缩放图片 (PIL Image), 保持长宽比不变, 使最短边缩放到 224 像素</span></span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从图片中间切出 224x224 的图片</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图片 (PIL Image) 转成 Tensor , 自动归一化至 [0, 1]</span></span><br><span class="line">    transforms.Normalize(mean=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>], std=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>])  <span class="comment"># 标准化至 [-1, 1] , 规定均值和标准差 , 因为图片为 3 维</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新构造数据集</span></span><br><span class="line">dataset = ImageFolder(<span class="string">&#x27;./data/cat_dog_imagefolder&#x27;</span>, transform=transform)</span><br></pre></td></tr></table></figure><p>结果：查看图片张量形状，因为神经网络中一般图像的通道数在第一个维度，而 PIL Image 类型通道数在第三个维度，所以变换十分必要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset.__getitem__(<span class="number">0</span>)[<span class="number">0</span>].shape  <span class="comment"># or dataset[0][0].shape</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; [Out]: torch.Size([3, 224, 224]) &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>也正是因为 Tensor 和 PIL Image 对通道数位置要求的不同，二者转换往往需要多一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">to_img = transforms.ToPILImage()</span><br><span class="line">to_img(dataset[<span class="number">0</span>][<span class="number">0</span>] * <span class="number">0.5</span> + <span class="number">0.5</span>)  <span class="comment"># 因为变换指定了均值和方差后进行了归一化，所以要返归一化</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739279681882.png" alt=""></p><h2 id="2-DataLoader-类">2 DataLoader 类</h2><p>在训练神经网络时，一次处理的对象是一个 <code>batch</code> 的数据，同时还需要对一批数据进行打乱顺序和并行加速等操作。为此，PyTorch提供了 <code>DataLoader</code> 实现这些功能。</p><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataLoader(dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">False</span>, sampler=<span class="literal">None</span>,</span><br><span class="line">           batch_sampler=<span class="literal">None</span>, num_workers=<span class="number">0</span>, collate_fn=<span class="literal">None</span>,</span><br><span class="line">           pin_memory=<span class="literal">False</span>, drop_last=<span class="literal">False</span>, timeout=<span class="number">0</span>,</span><br><span class="line">           worker_init_fn=<span class="literal">None</span>, *, prefetch_factor=<span class="number">2</span>,</span><br><span class="line">           persistent_workers=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><code>dataset</code> : 数据集 Dataset 类</li><li><code>batch_size=1</code> :  批量 batch 的大小</li><li><code>shuffle=False</code> : 是否打乱数据顺序</li><li><code>sampler=None</code> : 用于从数据集中抽取样本的采样器，可以自定义采样策略</li><li><code>batch_sampler=None</code> : 定义如何批量抽取样本</li><li><code>num_workers=0</code> : 用多进程加载的进程数，0 代表不使用多进程</li><li><code>collate_fn=None</code> : 多样本拼接 batch 的方法，一般默认</li><li><code>pin_memory=False</code> : 是否将数据保存在 pin memory 区，pin memory 中的数据转移到 GPU 速度更快</li><li><code>drop_last=False</code> : Dataset 中的数据不一定被 batch_size 整除时，若 drop_last 为 True ，则将多出来的数据丢弃</li><li><code>timeout=0</code> : 进程读取数据的最大时间，若超时则丢弃数据</li><li><code>worker_init_fn=None</code> : 每个 worker 的初始化函数（num_workers=0 则无影响）</li><li><code>prefetch_factor=2</code> : 每个 worker 预先加载的样本数</li></ul><h3 id="2-1-Dataloader-的使用">2.1 Dataloader 的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataloader</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">False</span>)  <span class="comment"># 加载 dataset, 批量大小为 3, 打乱顺序, 单进程, 不丢弃最后数据</span></span><br></pre></td></tr></table></figure><ul><li>每个 batch 数据形如 <code>torch.Size([3, 3, 224, 224])</code> ：第一个 3 代表批量 batch 大小，第二个 3 代表图片通道数，最后代表 224x224 的图片大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739329118058.png" alt=""></p><blockquote><p>最后一个批量为 2 是因为图片总共 8 张，而批量按 3 个数据一取，剩余 2 个数据</p></blockquote><ul><li>安装迭代器的方式取数据：dataloader 可以通过迭代器的方式取数据 <code>iter(Dataloader)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataiter = <span class="built_in">iter</span>(dataloader)</span><br><span class="line">imgs, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"><span class="built_in">print</span>(imgs.shape)  <span class="comment"># torch.Size([3, 3, 224, 224])</span></span><br></pre></td></tr></table></figure><blockquote><p>迭代器 <code>iter()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 迭代器补充</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="built_in">iter</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(b)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(b)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h3 id="2-2-自定义-collate-fn-避免读取失败">2.2 自定义 collate_fn 避免读取失败</h3><p>若某个样本无法读取，此时利用 Dataset 类时， <code>__getitem__</code>函数中会抛出异常。</p><ul><li>例如：可手动创建一个新的文件夹，添加一个空文件命名为 <code>dog.fail.jpg</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog_fail/</span><br><span class="line">data/cat_dog_fail/</span><br><span class="line">├── cat.13.jpg</span><br><span class="line">├── cat.14.jpg</span><br><span class="line">├── cat.16.jpg</span><br><span class="line">├── cat.18.jpg</span><br><span class="line">├── dog.2.jpg</span><br><span class="line">├── dog.3.jpg</span><br><span class="line">├── dog.4.jpg</span><br><span class="line">├── dog.5.jpg</span><br><span class="line">└── dog.fail.jpg</span><br></pre></td></tr></table></figure><p>此时如果仍然利用之前自定义的 Dataset 类 <code>DogCat</code> ，则会在后面真正读取数据时报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错 : UnidentifiedImageError: cannot identify image file</span></span><br><span class="line"><span class="comment"># for img, label in dataset:</span></span><br><span class="line"><span class="comment">#     print(img.shape, label)</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-解决方法一：返回-None">2.2.1 解决方法一：返回 None</h4><p>当读取失败时，返回 None ，然后自定义 <code>collate_fn</code> 让 Dataloader 加载时跳过</p><p>定义新的 Dataset 类，继承之前自定义的 <code>DogCat</code> ，尝试使用父类的 <code>__getitem__()</code> ，如果失败则返回 <code>(None, None)</code> 代表 <code>(数据, 标签)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewDogCat</span>(<span class="title class_ inherited__">DogCat</span>):  <span class="comment"># 继承之前自定义的 Dataset 类 DogCat</span></span><br><span class="line">    <span class="comment"># 修改 __getitem__() 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 调用父类读取图片的方法 __getitem__() 等价于 DogCat.__getitem__(self, index)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># 数据=None, 标签=None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>自定义 <code>collate_fn</code> 解决 Dataloader 读取数据异常：collate_fn 的传入参数 batch 是一个列表，形如 <code>[(data1, label1), (data2, label2), ...]</code> 删去里面为空的元祖，然后采用 Dataloader 默认的拼接方式返回最终的批量数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data.dataloader <span class="keyword">import</span> default_collate  <span class="comment"># 导入 Dataloader 默认的拼接方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 collate_fn 函数，删去 None 值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_fail_sample</span>(<span class="params">batch</span>):</span><br><span class="line">    <span class="comment"># batch 是一个 list，每个元素是 dataset 的返回值，形如 (data, label)</span></span><br><span class="line">    batch = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> batch <span class="keyword">if</span> _[<span class="number">0</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]  <span class="comment"># 过滤为 None 的数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(batch) == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> torch.Tensor()  <span class="comment"># 如果整个数据集都是空的</span></span><br><span class="line">    <span class="keyword">return</span> default_collate(batch)  <span class="comment"># 用默认方式拼接过滤后的batch数据</span></span><br></pre></td></tr></table></figure><p>开始读取数据：实例化新的 dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset = NewDogCat(<span class="string">&#x27;data/cat_dog_fail/&#x27;</span>, transform=transform)</span><br><span class="line">dataset[<span class="number">5</span>] <span class="comment"># (None, None) 第 5 个读取了错误的图片</span></span><br></pre></td></tr></table></figure><p>Dataloader 读取数据：批量为 2 ，使用自定义 collate_fn 函数，单进程，打乱顺序，不丢弃最后数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataloader = DataLoader(dataset, <span class="number">2</span>, collate_fn=delete_fail_sample, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739330925980.png" alt=""></p><blockquote><p>此处有 2 个批量不统一：一个是由于有一个图片没有读取成功；另一个是因为总共 9 张图片，无法整除 2</p></blockquote><h4 id="2-2-2-解决方法二：随机读取正常数据-【推荐】">2.2.2 解决方法二：随机读取正常数据 【推荐】</h4><p>不再返回 <code>(None, None)</code> 而是随机返回其他正常数据，这样可以避免因读取失败带来的形状不统一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机读取数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewDogCat</span>(<span class="title class_ inherited__">DogCat</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            new_index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>) - <span class="number">1</span>)  <span class="comment"># 随机返回一张正常数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>[new_index]</span><br></pre></td></tr></table></figure><p>Dataloader 读取数据时不再需要自定义 collate_fn</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = NewDogCat(<span class="string">&#x27;data/cat_dog_fail/&#x27;</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, <span class="number">2</span>, collate_fn=<span class="literal">None</span>, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739331306790.png" alt=""></p><blockquote><p>此处唯一一个不统一形状是由于 9 不能被 2 整除，可以通过丢弃实现 <code>drop_last=True</code>）</p></blockquote><h3 id="2-3-随机采样">2.3 随机采样</h3><p>当 <code>DataLoader</code> 的 <code>shuffle=True</code> 时，会自动调用采样器 <code>RandomSampler</code> 打乱数据。默认的采样器是<code>SequentialSampler</code>，它会按顺序一个一个进行采样。除此之外，<code>WeightedRandomSampler</code> 也是一个很常见的采样器，它会根据每个样本的权重选取数据。</p><p><strong>参数</strong></p><ul><li><p><code>weights</code> ：每个样本的权重，权重越大的样本被选中的概率越大</p></li><li><p><code>num_samples</code> ：选取的样本总数，一般小于总数据量（可以大于）</p></li><li><p><code>replacement</code> （可选）：默认/建议为 True，即允许重复采样同一个数据。当为 True 时，此时就算总样本数不足 <code>num_samples</code> 也会依靠重复取样达到</p></li></ul><p><strong>使用案例</strong></p><ul><li>首先读取数据集，并设置权重列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataset = DogCat(<span class="string">&#x27;data/cat_dog/&#x27;</span>, transform=transform)  <span class="comment"># 总共 8 张图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权重：假设 cat 的图片被取出的概率是 dog 的概率的 2 倍</span></span><br><span class="line">weights = [<span class="number">2</span> <span class="keyword">if</span> label == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> data, label <span class="keyword">in</span> dataset]</span><br><span class="line"><span class="comment"># 两类图片被取出的概率与 weights 的绝对大小无关，只和比值有关</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(weights)</span><br><span class="line"><span class="comment"># [2, 1, 1, 1, 1, 2, 2, 2] -&gt; cat (label=0) 设权重为 2 ; dog (label=1) 设权重为 1</span></span><br></pre></td></tr></table></figure><ul><li>设定取样样本总数为 9（大于总图片数 8）选择 <code>replacement=True</code> 允许重复取样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data.sampler <span class="keyword">import</span> WeightedRandomSampler</span><br><span class="line"></span><br><span class="line">sampler = WeightedRandomSampler(weights=weights, num_samples=<span class="number">9</span>, replacement=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, sampler=sampler)</span><br></pre></td></tr></table></figure><ul><li>结果：<code>cat (label=0)</code> 的数量大约为 <code>dog (label)</code> 的 2 倍</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739333471748.png" alt=""></p><blockquote><p>【注意】注意次数样本数为 9 已经大于总图片数 8，说明当允许重复取样 <code>replacement=True</code> 时可以自行补充样本。同时原来 Dataloader 中的 <code>shuffle</code> 操作也会失效，因为随机取样完全由取样器决定</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（7）聚合函数</title>
      <link href="/posts/b266e599.html"/>
      <url>/posts/b266e599.html</url>
      
        <content type="html"><![CDATA[<h1>聚合函数</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>不同的数据库管理系统 DBMS 的函数使用差异极大，SQL 语言函数的可移植性很差。</p><p>MySQL 提供的内置函数包括<em>单行函数</em>和<em>聚合函数</em>，这章讲解聚合函数。</p><p><strong>聚合函数</strong> ：对一组数据进行操作，输入一组数据的集合，返回结果值</p><h2 id="1-基础聚合函数">1 基础聚合函数</h2><p>对一组数据进行操作，输入一组数据的集合，返回结果值——例如：求一组数据的最大值，平均值，个数等</p><h3 id="1-1-AVG-和-SUM-均值和加和">1.1 AVG 和 SUM 均值和加和</h3><p>对于数值型数据：使用 <code>AVG</code> 求这一列数据的平均值；使用 <code>SUM</code> 求这一列数据的加和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(e.salary) &quot;avg_salary&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(e.salary) &quot;sum_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> avg_salary  <span class="operator">|</span> sum_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682243</span> <span class="operator">|</span>  <span class="number">691400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-2-MIN-和-MAX-最小和最大">1.2 MIN 和 MAX 最小和最大</h3><p>对于数值型数据：使用 <code>MIN</code> 求这一列数据的最小值；使用 <code>MAX</code> 求这一列数据的最大值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.salary) &quot;min_salary&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.salary) &quot;max_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="operator">|</span> min_salary <span class="operator">|</span> max_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2100.00</span> <span class="operator">|</span>   <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于日期数据：使用 <code>MIN</code> 求这一列最早的日期；使用 <code>MAX</code> 求这一列最晚的日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.hire_date) &quot;early_salary&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.hire_date) &quot;late_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> early_salary <span class="operator">|</span> late_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span>   <span class="operator">|</span> <span class="number">2000</span><span class="number">-04</span><span class="number">-21</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于字符串数据： <code>MIN</code> 代表这一列在字符表中最早出现； <code>MAX</code> 代表这一列在字符表中最晚出现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.last_name) &quot;A...&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.last_name) &quot;Z...&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> A... <span class="operator">|</span> Z...    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> Abel <span class="operator">|</span> Zlotkey <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>其他的类型均可使用 <code>MIN</code> 和 <code>MAX</code> ，可以自己尝试</p></blockquote><h3 id="1-3-COUNT-返回记录数">1.3 COUNT 返回记录数</h3><p><code>COUNT(*)</code> 返回表中记录总数，适用于任意数据类型，可以理解为对行计数。</p><blockquote><p>可以使用 <code>WHERE</code>增加限制条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;=</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">58</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><code>COUNT(列名)</code> 返回不为空的行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(e.commission_pct) &quot;commission_pct not null&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="keyword">not null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                      <span class="number">35</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><code>COUNT(*)</code> 会统计值为 <code>NULL</code> 的行，而 <code>COUNT(列名)</code> 不会统计此列值为 <code>NULL</code> 的行</p></blockquote><h2 id="2-GROUP-BY-分组查询">2 GROUP BY 分组查询</h2><p><code>GROUP BY</code> 可以依照某些条件/某列对数据进行分组输出</p><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 函数(列名<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件] <span class="comment">-- 可加限制条件</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名];  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><blockquote><p><code>WHERE 条件</code>  一定紧跟表后，无论是 <code>FROM 表名</code> 还是 <code>FROM 表名1 JOIN 表名2 ON ...</code> ，总之 <code>WHERE</code> 一定在表之后</p></blockquote><h3 id="2-1-以单个列为依据分组">2.1 以单个列为依据分组</h3><ul><li>例：按照 employees.department_id 分组，并连接表 departments 查询部门名。</li></ul><p>展示的列新增 <code>department_name</code> 和平均工资 <code>AVG(e.salary)</code> （此处使用格式化输出，保留 2 位小数，并命名为 “avg_salary_dept”）。采用内连接，去除 <code>NULL</code> ，因为我们要查的是切实存在的部门。<code>GROUP BY</code> 指定按照 <code>e.department_id</code> 分组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id, d.department_name, FORMAT(<span class="built_in">AVG</span>(e.salary), <span class="number">2</span>) &quot;avg_salary_dept&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"># <span class="keyword">WHERE</span> e.department_id <span class="operator">!=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id <span class="comment">-- 按照 employees.department_id 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary_dept <span class="keyword">DESC</span>; <span class="comment">-- 按照 avg_salary_dept 列排序</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739253575646.png" alt=""></p><h3 id="2-2-以多个列为依据分组">2.2 以多个列为依据分组</h3><ul><li>例：按 department_id, job_id 分组，并计算 salary</li></ul><p>简单的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id dept_id, e.job_id, <span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"># <span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id; <span class="comment">-- 按照 department_id, job_id 分组 </span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739253597610.png" alt=""></p><p>如果想要展示部门名，和工作职位名，同样可以多表连接，下面这个例子综合使用之前章节的知识：<code>GROUP BY</code> 依据 <code>e.department_id, e.job_id</code> 分组，<code>AVG</code> 函数分组计算平均薪水；<code>JOIN</code> 连接多表，查询 <code>dept_name</code> 和 <code>job_name</code> 字段并展示；<code>WHERE</code> 紧跟表后添加限制条件，<code>REGEXP</code> 使用正则表达寻找字段 <code>d.department_name</code> 以 <code>S</code> 开头的字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id        dept_id,</span><br><span class="line">       d.department_name      dept_name,</span><br><span class="line">       e.job_id,</span><br><span class="line">       j.job_title            job_name,</span><br><span class="line">       FORMAT(<span class="built_in">AVG</span>(salary), <span class="number">2</span>) avg_salary <span class="comment">-- 分组计算平均薪水</span></span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="comment">-- 多表连接，查询 dept_name 和 job_name</span></span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">         <span class="keyword">JOIN</span> jobs j</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id <span class="keyword">AND</span> e.job_id <span class="operator">=</span> j.job_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_name REGEXP <span class="string">&#x27;^S&#x27;</span> <span class="comment">-- 匹配以 S 开头的字符串</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id, e.job_id <span class="comment">-- 按照 e.department_id, e.job_id 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary <span class="keyword">DESC</span>; <span class="comment">-- 根据 avg_salary 降序</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739254720337.png" alt=""></p><h3 id="2-3-WITH-ROLLUP-添加记录">2.3 WITH ROLLUP 添加记录</h3><p>在 <code>GROUP BY</code> 后加上 <code>WITH ROLLUP</code> 会为结果添加一条记录（行数据）。</p><ul><li>分组依据列返回 <code>NULL</code></li><li>被操作的列，会再次操作，以下面代码为例</li></ul><p>当按照 <code>e.department_id</code> 分组且剔除 <code>e.department_id &lt; 30</code> 行数据后，会对计算完新表的 <code>sum_id</code> 和 <code>avg_salary</code> 再进行一次 <code>SUM</code> 和 <code>AVG</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id      id,</span><br><span class="line">       <span class="built_in">SUM</span>(e.department_id) sum_id,</span><br><span class="line">       <span class="built_in">AVG</span>(e.salary)        avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>; <span class="comment">-- 添加一行数据：再进行一次 SUM(sum_id) AVG(avg_salary) 操作</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739255721920.png" alt=""></p><blockquote><p>【注意】分组时选择查询的表一定要保证查询后数量相同</p><p>【注意】<code>WITH ROLLUP</code> 和 <code>ORDER BY</code> 不能同时使用</p><p>【注意】<code>WHERE</code> 可以在查表时进行约束，但不能对 <code>GROUP BY</code> 分组时进行约束</p></blockquote><h2 id="3-GROUP-BY-…-HAVING-有约束的分组">3 GROUP BY … HAVING 有约束的分组</h2><h3 id="3-1-HAVING-使用聚合函数进行限制">3.1 HAVING 使用聚合函数进行限制</h3><p>在行已经被分组后，且保证查询列中使用了聚合函数：则满足 <code>HAVING 条件</code> 子句中条件的分组将被显示。</p><blockquote><p>注意：<code>HAVING</code> 不能单独使用，必须和 <code>GROUP BY</code> 一起使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 函数(列名<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件] <span class="comment">-- 可加限制条件</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line"><span class="keyword">HAVING</span> 条件 <span class="comment">-- 分组的过滤条件</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名];  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>例：按部门分组，返回最大工资。然后查询这些最大工资大于 10000 的部门 id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) &quot;max_larger_than_10000&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> max_larger_than_10000 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>              <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>              <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span>              <span class="number">14000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span>              <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>              <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span>              <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-2-HAVING-和-WHERE">3.2 HAVING 和 WHERE</h3><blockquote><p>【注意】不可使用 <code>WHERE</code> 对聚合函数进行约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) &quot;max_larger_than_10000&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>  <span class="comment">-- WHERE 后不可加聚合函数</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">1111</span> (HY000): Invalid use <span class="keyword">of</span> <span class="keyword">group</span> <span class="keyword">function</span></span><br></pre></td></tr></table></figure><ul><li><code>WHERE</code> 可以直接使用表中的字段作为筛选条件，但不能使用分组中的聚合函数作为筛选条件</li><li><code>HAVING</code> 必须要与 <code>GROUP BY</code>配合使用，可以把分组中的聚合函数和分组字段作为筛选条件</li><li>多表连接时，<code>WHERE</code> 是先筛选后连接，而 <code>HAVING</code> 是先连接后筛选。所以 <code>WHERE</code> 会效率更高</li></ul><h2 id="4-SELECT-语句【总结】">4 SELECT 语句【总结】</h2><h3 id="4-1-查询的常见格式">4.1 查询的常见格式</h3><p>结合之前章节的知识（<a href="https://blog.iskage.online/posts/151eef00.html">SELECT 语句</a>、<a href="https://blog.iskage.online/posts/a7d82995.html">运算符与 SQL 的正则表达式</a>、<a href="https://blog.iskage.online/posts/c8719e79.html">排序与分页：ORDER BY 子句 和 LIMIT 子句</a>、<a href="https://blog.iskage.online/posts/b4103c0f.html">多表查询</a>、<a href="https://blog.iskage.online/posts/35d72c0b.html">单行函数</a>），我们可以总结常见的 <code>SELECT</code> 语句查询格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式1 : 使用 WHERE 连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span>, 表名<span class="number">2</span>, 表名<span class="number">3</span></span><br><span class="line"><span class="keyword">WHERE</span> 多表的连接条件 (不含聚合函数)</span><br><span class="line"><span class="keyword">AND</span> 条件</span><br><span class="line"><span class="keyword">AND</span> 条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件 (可含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT 起始行数, 行数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式2 : 使用 JOIN 连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span> </span><br><span class="line"><span class="keyword">JOIN</span> 表名<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">JOIN</span> 表名<span class="number">3</span></span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件 (不含聚合函数)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件 (可含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT 起始行数, 行数</span><br></pre></td></tr></table></figure><h3 id="4-2-SELECT-语句的执行顺序">4.2 SELECT 语句的执行顺序</h3><ul><li>关键字必须按照</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ... [<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ...]</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT ..., ...</span><br></pre></td></tr></table></figure><ul><li>SQL 实际执行顺序为</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ... [<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ...]</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">DISTINCT</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT ..., ...</span><br></pre></td></tr></table></figure><p>即：先找到表（<em>FROM</em>） ，然后根据条件过滤（<em>WHERE</em>）得到虚拟的一张表，然后分组（<em>GROUP BY</em>），分组后再依照聚合函数或分组依据的列等条件进行过滤（<em>HAVING</em>），最后锁定需要输出的字段/列（<em>SELECT</em>），去除重复行数据（<em>DISTINCT</em>）排序（<em>ORDER BY</em>）分页（<em>LIMIT</em>）输出。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（6）单行函数</title>
      <link href="/posts/35d72c0b.html"/>
      <url>/posts/35d72c0b.html</url>
      
        <content type="html"><![CDATA[<h1>单行函数</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>不同的数据库管理系统 DBMS 的函数使用差异极大，SQL 语言函数的可移植性很差。下面我们介绍的是 SQL 语言的内置函数。</p><p>MySQL 提供的内置函数包括<em>单行函数</em>和<em>聚合函数</em>，这章讲解单行函数。</p><p><strong>单行函数</strong>：对行数据进行操作；输入参数，返回结果；对每行进行操作。</p><h1>1 数值函数</h1><h2 id="1-1-基本数值函数">1.1 基本数值函数</h2><ul><li><code>ABS(x)</code> ：返回 x 的绝对值</li><li><code>SIGN(x)</code> ：返回 x 的符号，正数返回 1 ，负数返回 -1 ， 0 返回 0</li><li><code>PI()</code> ：返回圆周率的值</li><li><code>CEIL(x), CEILING(x)</code> ：返回大于或等于 x 的最小整数</li><li><code>FLOOR(x)</code> ：返回小于或等于 x 的最大整数</li><li><code>LEAST(x1, x2, x3, ...)</code> ：返回列表中的最小值</li><li><code>GREATEST(x1, x2, x3, ...)</code> ：返回列表中的最大值</li><li><code>MOD(x, y)</code> ：返回 x 除以 y 后的余数</li><li><code>RAND()</code> ：返回 0-1 的随机值</li><li><code>RAND(x)</code> ：返回 0-1 的随机值，其中 x 的值用作种子值，相同的X值会产生相同的随机数</li><li><code>ROUND(x)</code> ：返回一个对 x 的值进行四舍五入后，最接近于 x 的整数</li><li><code>ROUND(x, y)</code> ：返回一个对 x 的值进行四舍五入后最接近 x 的值，并保留到小数点后面 y 位</li><li><code>TRUNCATE(x, y)</code> ：返回数字 x 截断为 y 位小数的结果</li><li><code>SQRT(x)</code> ：返回 x 的平方根，当 x 的值为负数时，返回NULL</li><li><code>RADIANS(x)</code> ：将角度转化为弧度，其中参数 x 为角度值</li><li><code>DEGREES(x)</code> ：将弧度转化为角度，其中参数 x 为弧度值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-10</span>),            <span class="comment">-- 10</span></span><br><span class="line">       SIGN(<span class="number">-20</span>),           <span class="comment">-- -1</span></span><br><span class="line">       SIGN(<span class="number">30</span>),            <span class="comment">-- 1</span></span><br><span class="line">       PI(),                <span class="comment">-- 3.141593</span></span><br><span class="line">       <span class="built_in">CEIL</span>(<span class="number">40.2</span>),          <span class="comment">-- 41</span></span><br><span class="line">       <span class="built_in">CEILING</span>(<span class="number">-40.3</span>),      <span class="comment">-- 40</span></span><br><span class="line">       <span class="built_in">FLOOR</span>(<span class="number">50.4</span>),         <span class="comment">-- 50</span></span><br><span class="line">       <span class="built_in">FLOOR</span>(<span class="number">-60.5</span>),        <span class="comment">-- -61</span></span><br><span class="line">       <span class="built_in">MOD</span>(<span class="number">12</span>, <span class="number">5</span>),          <span class="comment">-- 2</span></span><br><span class="line">       RAND(),<span class="comment">-- 0.5452342969786695</span></span><br><span class="line">       RAND(<span class="number">10</span>),            <span class="comment">-- 0.6570515219653505</span></span><br><span class="line">       RAND(<span class="number">10</span>),            <span class="comment">-- 0.6570515219653505</span></span><br><span class="line">       ROUND(<span class="number">12.33</span>),        <span class="comment">-- 12</span></span><br><span class="line">       ROUND(<span class="number">12.348</span>, <span class="number">2</span>),    <span class="comment">-- 12.35</span></span><br><span class="line">       ROUND(<span class="number">12.324</span>, <span class="number">-1</span>),   <span class="comment">-- 10</span></span><br><span class="line">       <span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>, <span class="number">1</span>),  <span class="comment">-- 12.6</span></span><br><span class="line">       <span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>, <span class="number">-1</span>), <span class="comment">-- 10</span></span><br><span class="line">       RADIANS(<span class="number">180</span>),        <span class="comment">-- 3.141592653589793</span></span><br><span class="line">       DEGREES(<span class="number">2</span> <span class="operator">*</span> PI()),   <span class="comment">-- 360</span></span><br><span class="line">       DEGREES(RADIANS(<span class="number">90</span>)); <span class="comment">-- 90</span></span><br></pre></td></tr></table></figure><h2 id="1-2-三角函数">1.2 三角函数</h2><p>以下 x 均为弧度值</p><ul><li><code>SIN(x)</code> ：正弦值</li><li><code>ASIN(x)</code> ：反正弦值，即获取正弦为 x 的弧度，如果 x 的值不在 [-1, 1] ，则返回 NULL</li><li><code>COS(x)</code> ：余弦值</li><li><code>ACOS(x)</code> ：返回 x 的反余弦值，即获取余弦为 x 的弧度，如果 x 的值不在 [-1, 1] ，则返回 NULL</li><li><code>TAN(x)</code> ：正切值</li><li><code>ATAN(x)</code> ：返回 x。的反正切值，即获取正切值为 x 的弧度</li><li><code>ATAN2(m,n)</code> ：返回点 (m, n) 到 (0, 0) 的连线构成的角度的弧度值</li><li><code>COT(x)</code> ：余切值</li></ul><blockquote><p>反三角函数返回的就是角度的弧度值，可以方便的得到角度大小</p></blockquote><p><code>ATAN2(m, n)</code> 函数返回 (m, n) 到 (0, 0) 的连线构成的角度的弧度值。如果使用 <code>ATAN(x)</code> 则会出现报错，例如当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">x=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span> 时，即求点 (1, 0) 到 (0, 0) 的连线构成的角度的弧度值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SIN</span>(RADIANS(<span class="number">30</span>)), <span class="comment">-- sin(π/6) = 0.5</span></span><br><span class="line">       DEGREES(<span class="built_in">ASIN</span>(<span class="number">1</span>)), <span class="comment">-- arcsin(90º) = 1</span></span><br><span class="line">       <span class="built_in">TAN</span>(RADIANS(<span class="number">45</span>)), <span class="comment">-- tan(45º) = tan(π/4) = 1</span></span><br><span class="line">       DEGREES(<span class="built_in">ATAN</span>(<span class="number">1</span>)), <span class="comment">-- arctan(1) = 45º</span></span><br><span class="line">       DEGREES(ATAN2(<span class="number">1</span>, <span class="number">1</span>)); <span class="comment">-- arctan(1) = 45º (1, 1) 与 (0, 0) 的连线角度</span></span><br></pre></td></tr></table></figure><h2 id="1-3-指数与对数">1.3 指数与对数</h2><ul><li><code>POW(x, y), POWER(x, y)</code> ：返回 x 的 y 次方</li><li><code>EXP(X)</code> ：返回 e 的 x 次方，e 为自然对数</li><li><code>LN(x), LOG(x)</code> ：返回以 e 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li><li><code>LOG10(x)</code> ：返回以 10 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li><li><code>LOG2(x)</code> ：返回以 2 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> POW(<span class="number">2</span>, <span class="number">5</span>),  <span class="comment">-- 2^5 = 32</span></span><br><span class="line">       <span class="built_in">POWER</span>(<span class="number">2</span>, <span class="number">4</span>),<span class="comment">-- 2^4 = 16</span></span><br><span class="line">       <span class="built_in">EXP</span>(<span class="number">2</span>),     <span class="comment">-- e^2 = 7.3891</span></span><br><span class="line">       <span class="built_in">LN</span>(<span class="number">10</span>),     <span class="comment">-- ln(10) = 2.303</span></span><br><span class="line">       <span class="built_in">LOG10</span>(<span class="number">10</span>),  <span class="comment">-- log_10(10) = 1</span></span><br><span class="line">       LOG2(<span class="number">4</span>); <span class="comment">-- log_2(2) = 2</span></span><br></pre></td></tr></table></figure><h2 id="1-4-进制转换">1.4 进制转换</h2><ul><li><code>BIN(x)</code> ：返回 x 的二进制编码</li><li><code>HEX(x)</code> ：返回 x 的十六进制编码</li><li><code>OCT(x)</code> ：返回 x 的八进制编码</li><li><code>CONV(x, f1, f2)</code> ：返回 x 从 f1 进制数变成 f2 进制数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">1</span>),  <span class="comment">-- 1</span></span><br><span class="line">       HEX(<span class="number">15</span>), <span class="comment">-- F</span></span><br><span class="line">       OCT(<span class="number">7</span>),  <span class="comment">-- 7</span></span><br><span class="line">       CONV(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>); <span class="comment">-- 1</span></span><br></pre></td></tr></table></figure><h1>2 字符串函数</h1><blockquote><p>MySQL 中，字符串的位置是从 1 开始计数</p></blockquote><ul><li><p><code>ASCII(s)</code> ：返回字符串 s 中的第一个字符的 ASCII 码</p></li><li><p><code>CHAR_LENGTH(s)</code>：返回字符串 <code>s</code> 的字符数，作用与 <code>CHARACTER_LENGTH(s)</code> 相同</p></li><li><p><code>LENGTH(s)</code>：返回字符串 <code>s</code> 的字节数（与字符集有关）</p></li><li><p><code>CONCAT(s1, s2, ..., sn)</code>：将 <code>s1, s2, ..., sn</code> 连接为一个字符串</p></li><li><p><code>CONCAT_WS(x, s1, s2, ..., sn)</code>：用分隔符 <code>x</code> 连接 <code>s1, s2, ..., sn</code>（每个字符串间插入 <code>x</code>）</p></li><li><p><code>INSERT(str, idx, len, replacestr)</code>：从字符串 <code>str</code> 的 <code>idx</code> 位置开始，替换 <code>len</code> 个字符为 <code>replacestr</code></p></li><li><p><code>REPLACE(str, a, b)</code>：将字符串 <code>str</code> 中所有子串 <code>a</code> 替换为 <code>b</code></p></li><li><p><code>UPPER(s)</code> 或 <code>UCASE(s)</code>：将字符串 <code>s</code> 全部转为大写</p></li><li><p><code>LOWER(s)</code> 或 <code>LCASE(s)</code>：将字符串 <code>s</code> 全部转为小写</p></li><li><p><code>LEFT(str, n)</code>：返回字符串 <code>str</code> 最左侧的 <code>n</code> 个字符</p></li><li><p><code>RIGHT(str, n)</code>：返回字符串 <code>str</code> 最右侧的 <code>n</code> 个字符</p></li><li><p><code>LPAD(str, len, pad)</code>：用 <code>pad</code> 从左侧填充 <code>str</code>，直到总长度为 <code>len</code></p></li><li><p><code>RPAD(str, len, pad)</code>：用 <code>pad</code> 从右侧填充 <code>str</code>，直到总长度为 <code>len</code></p></li><li><p><code>LTRIM(s)</code>：去掉字符串 <code>s</code> 左侧的空格</p></li><li><p><code>RTRIM(s)</code>：去掉字符串 <code>s</code> 右侧的空格</p></li><li><p><code>TRIM(s)</code>：去掉字符串 <code>s</code> 开头和结尾的空格</p></li><li><p><code>TRIM(s1 FROM s)</code>：去掉字符串 <code>s</code> 开头和结尾的 <code>s1</code></p></li><li><p><code>TRIM(LEADING s1 FROM s)</code>：去掉字符串 <code>s</code> 开头的 <code>s1</code></p></li><li><p><code>TRIM(TRAILING s1 FROM s)</code>：去掉字符串 <code>s</code> 结尾的 <code>s1</code></p></li><li><p><code>REPEAT(str, n)</code>：返回 <code>str</code> 重复 <code>n</code> 次的结果</p></li><li><p><code>SPACE(n)</code>：返回由 <code>n</code> 个空格组成的字符串</p></li><li><p><code>STRCMP(s1, s2)</code>：比较字符串 <code>s1</code> 和 <code>s2</code> 的 ASCII 码值大小</p></li><li><p><code>SUBSTR(s, index, len)</code>：从 <code>s</code> 的 <code>index</code> 位置截取 <code>len</code> 个字符，作用同 <code>SUBSTRING(s, n, len)</code> 和 <code>MID(s, n, len)</code></p></li><li><p><code>LOCATE(substr, str)</code>：返回 <code>substr</code> 在 <code>str</code> 中首次出现的位置，作用同 <code>POSITION(substr IN str)</code> 和 <code>INSTR(str, substr)</code>（未找到返回 <code>0</code>）</p></li><li><p><code>ELT(m, s1, s2, ..., sn)</code>：返回第 <code>m</code> 个字符串（如 <code>m=1</code> 返回 <code>s1</code>）</p></li><li><p><code>FIELD(s, s1, s2, ..., sn)</code>：返回 <code>s</code> 在列表 <code>s1, s2, ..., sn</code> 中第一次出现的位置</p></li><li><p><code>FIND_IN_SET(s1, s2)</code>：返回 <code>s1</code> 在逗号分隔的字符串 <code>s2</code> 中的位置</p></li><li><p><code>REVERSE(s)</code>：返回 <code>s</code> 反转后的字符串</p></li><li><p><code>NULLIF(value1, value2)</code>：若 <code>value1</code> 与 <code>value2</code> 相等则返回 <code>NULL</code>，否则返回 <code>value1</code></p></li></ul><p>例：<code>FIND_IN_SET(s1, s2)</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIELD(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;msm&#x27;</span>, <span class="string">&#x27;amma&#x27;</span>), <span class="comment">-- 0 : 因为 mm 没有出现在字符串列表中</span></span><br><span class="line">       FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello,mm,amma&#x27;</span>); <span class="comment">-- 2 : 出现在第 2 个，从 1 开始计数</span></span><br></pre></td></tr></table></figure><blockquote><p><code>FIND_IN_SET(s1, s2)</code>：返回 <code>s1</code> 在逗号分隔的字符串 <code>s2</code> 中的位置。<code>s2</code> 是里的元素只能以逗号为间隔</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello,mm,amma&#x27;</span>), <span class="comment">-- 2 : 出现在第 2 个，从 1 开始计数</span></span><br><span class="line">       FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello, mm, amma&#x27;</span>); <span class="comment">-- 0 : 因为出现了空格，此时第 2 个是 &#x27;mm &#x27;</span></span><br></pre></td></tr></table></figure><p>例：<code>NULLIF()</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">NULLIF</span>(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>),  <span class="comment">-- 相同返回 NULL</span></span><br><span class="line">       <span class="built_in">NULLIF</span>(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;sql&#x27;</span>);  <span class="comment">-- 不同返回第一个值 mysql</span></span><br></pre></td></tr></table></figure><h1>3 日期和时间函数</h1><h2 id="3-1-获取日期和时间">3.1 获取日期和时间</h2><ul><li><p><code>CURDATE(), CURRENT_DATE()</code> ：返回当前日期，只包含年、月、日</p></li><li><p><code>CURTIME(), CURRENT_TIME()</code> ：返回当前时间，只包含时、分、秒</p></li><li><p><code>NOW()</code> <code>SYSDATE()</code> <code>CURRENT_TIMESTAMP()</code> <code>LOCALTIME()</code> <code>LOCALTIMESTAMP()</code> ：返回当前系统日期和时间</p></li><li><p><code>UTC_DATE()</code> ：返回 UTC（世界标准时间）日期</p></li><li><p><code>UTC_TIME()</code> ：返回UTC（世界标准时间）时间</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURDATE(),        <span class="comment">-- 2025-02-10</span></span><br><span class="line">       CURTIME(),        <span class="comment">-- 18:15:16</span></span><br><span class="line">       NOW(),            <span class="comment">-- 2025-02-10 18:15:16</span></span><br><span class="line">       <span class="built_in">LOCALTIMESTAMP</span>(), <span class="comment">-- 2025-02-10 18:15:16</span></span><br><span class="line">       UTC_DATE(),       <span class="comment">-- 2025-02-10</span></span><br><span class="line">       UTC_TIME(); <span class="comment">-- 10:15:16</span></span><br></pre></td></tr></table></figure><h2 id="3-2-日期与时间戳的转换">3.2 日期与时间戳的转换</h2><ul><li><code>UNIX_TIMESTAMP()</code> ：以 UNIX 时间戳的形式返回当前时间</li><li><code>UNIX_TIMESTAMP(date)</code> ：将时间 date 以 UNIX 时间戳的形式返回</li><li><code>FROM_UNIXTIME(timestamp)</code> ：将 UNIX 时间戳的时间转换为普通格式的时间</li></ul><blockquote><p>UNIX 时间戳（UNIX Timestamp）是指从 1970 年 1 月 1 日 00:00:00 UTC（协调世界时）开始所经过的秒数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP(now()),                 <span class="comment">-- 1739182869 精确到时分秒</span></span><br><span class="line">       UNIX_TIMESTAMP(CURTIME()),             <span class="comment">-- 1739182869 与第一个相同</span></span><br><span class="line">       UNIX_TIMESTAMP(CURDATE()),             <span class="comment">-- 1739116800 日期转时间戳</span></span><br><span class="line">       UNIX_TIMESTAMP(<span class="string">&#x27;2011-11-11 11:11:11&#x27;</span>), <span class="comment">-- 特定日期时间</span></span><br><span class="line">       FROM_UNIXTIME(<span class="number">1739182869</span>); <span class="comment">-- 2025-02-10 18:21:09</span></span><br></pre></td></tr></table></figure><h2 id="3-3-获取月份、星期、星期数、天数等">3.3 获取月份、星期、星期数、天数等</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739183106529.png" alt=""></p><h2 id="3-4-日期的操作函数">3.4 日期的操作函数</h2><ul><li><code>EXTRACT(type FROM date)</code> ：返回指定日期中特定的部分，type 指定返回的值</li></ul><p>具体的 type 类型可以自行查询</p><h2 id="3-5-日期的格式化与解析">3.5 日期的格式化与解析</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 格式化输出</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%M-%D-%W %H:%i:%s&#x27;</span>);</span><br><span class="line"><span class="comment">-- 2025-February-10th-Monday 18:30:58</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 解析为标准日期形式</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;09/01/2009&#x27;</span>, <span class="string">&#x27;%m/%d/%Y&#x27;</span>),</span><br><span class="line">       STR_TO_DATE(<span class="string">&#x27;20140422154706&#x27;</span>, <span class="string">&#x27;%Y%m%d%H%i%s&#x27;</span>),</span><br><span class="line">       STR_TO_DATE(<span class="string">&#x27;2014-04-22 15:47:06&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure><h1>4 流程控制函数【重要】</h1><p>根据不同的条件，执行不同的处理流程，类似于其他语言中的 <code>if</code> <code>for</code> <code>while</code></p><h2 id="4-1-IF-函数">4.1 <code>IF()</code> 函数</h2><ul><li><code>IF(value, value1, value2)</code> ：如果 <code>value</code> 的值为 <code>TRUE</code> ，返回 <code>value1</code>，否则返回 <code>value2</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(<span class="literal">TRUE</span>, <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>);  <span class="comment">-- &#x27;value1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-IFNULL-value1-value2-函数">4.2 <code>IFNULL(value1, value2)</code> 函数</h2><ul><li><code>IFNULL(value1, value2)</code> ：如果 <code>value1</code> 不为 <code>NULL</code>，返回 <code>value1</code>，否则返回 <code>value2</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IFNULL(<span class="keyword">NULL</span>, <span class="string">&#x27;value2&#x27;</span>); <span class="comment">-- NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> IFNULL(<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>); <span class="comment">-- &#x27;value1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-按条件返回结果">4.3 按条件返回结果</h2><ul><li><code>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 [ELSE 结果3] END 列名</code> ：如果 <code>条件1</code> 成立，则返回 <code>结果1</code> ；如果 <code>条件2</code> 成立，则返回 <code>结果2</code> ；如果 <code>条件3</code> 成立，则返回 <code>结果3</code></li></ul><p>格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>,</span><br><span class="line">       列名<span class="number">2</span>,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">3</span> <span class="keyword">THEN</span> 结果<span class="number">3</span></span><br><span class="line">           <span class="keyword">ELSE</span> 结果<span class="number">4</span> </span><br><span class="line">           <span class="keyword">END</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>例如：按照 <code>salary</code> 给员工增加一个字段 <code>&quot;level of salary&quot;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       salary,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;high&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;average&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">8000</span> <span class="keyword">THEN</span> <span class="string">&#x27;low&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;too low&#x27;</span> </span><br><span class="line">           <span class="keyword">END</span> &quot;level of salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739188034628.png" alt=""></p><h2 id="4-4-按数值返回结果">4.4 按数值返回结果</h2><ul><li><code>CASE 列名1 WHEN num1 THEN 结果1 WHEN num2 THEN 结果2 ELSE 结果3 END 列名2</code> ：如果 <code>列名1</code> 这行的值等于 <code>num1</code> 则返回 <code>结果1</code> ；若这行的值等于 <code>num2</code> 则返回 <code>结果2</code> ；否则返回 <code>结果3</code> ，最终存入 <code>列名2</code></li></ul><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>,</span><br><span class="line">       列名<span class="number">2</span>,</span><br><span class="line">       <span class="keyword">CASE</span> 列名<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> 结果<span class="number">3</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> 结果<span class="number">4</span></span><br><span class="line">           <span class="keyword">ELSE</span> 结果<span class="number">5</span> </span><br><span class="line">           <span class="keyword">END</span> 新列名</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>例如：按照 <code>region_id</code> 填充 <code>region_name</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：多表连接</span></span><br><span class="line"><span class="keyword">SELECT</span> c.country_name,</span><br><span class="line">       c.region_id,</span><br><span class="line">       r.region_name</span><br><span class="line"><span class="keyword">FROM</span> countries <span class="keyword">AS</span> c</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> regions <span class="keyword">as</span> r</span><br><span class="line">                   <span class="keyword">ON</span> c.region_id <span class="operator">=</span> r.region_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：按数值返回结果 CASE WHEN THEN</span></span><br><span class="line"><span class="keyword">SELECT</span> c.country_name,</span><br><span class="line">       c.region_id,</span><br><span class="line">       <span class="keyword">CASE</span> c.region_id</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;Europe&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;Americas&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">&#x27;Asia&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> <span class="string">&#x27;Middle East and Africa&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;Not find&#x27;</span> </span><br><span class="line">           <span class="keyword">END</span> &quot;region name&quot;</span><br><span class="line"><span class="keyword">FROM</span> countries <span class="keyword">AS</span> c;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739189297048.png" alt=""></p><h2 id="4-5-一些练习">4.5 一些练习</h2><ul><li>计算年工资，考虑到奖金</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       <span class="number">12</span> <span class="operator">*</span> salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> IFNULL(commission_pct, <span class="number">0</span>)) <span class="keyword">AS</span> &quot;annual salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>按照职位调整薪水，同时补充职位全程</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name,</span><br><span class="line">       e.job_id,</span><br><span class="line">       e.salary,</span><br><span class="line">       j.job_title,</span><br><span class="line">       <span class="keyword">CASE</span> e.job_id</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;IT_PROG&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.10</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;ST_CLERK&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.15</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;SA_REP&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.20</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">ELSE</span> salary</span><br><span class="line">           <span class="keyword">END</span> &quot;REVISED_SALARY&quot; <span class="comment">-- 按照职位调整薪水</span></span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> jobs <span class="keyword">AS</span> j</span><br><span class="line">                   <span class="keyword">ON</span> e.job_id <span class="operator">=</span> j.job_id; <span class="comment">-- 补充职位全程，多表连接</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739189717705.png" alt=""></p><h1>5 加密与解密函数【数据库安全】</h1><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739190256675.png" alt=""></p><blockquote><p>因为安全性问题，在 <code>MySQL 8.0</code> 版本后 <code>PASSWORD(str)</code> <code>ENCODE()</code> <code>DECODE()</code> 函数均被移除</p></blockquote><h2 id="5-1-MD5-和-SHA-加密">5.1 MD5 和 SHA 加密</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MD5(<span class="string">&#x27;mysql&#x27;</span>) <span class="keyword">AS</span> &quot;md5 key&quot;; <span class="comment">-- 81c3b080dad537de7e10e0987a4bf52e</span></span><br><span class="line"><span class="keyword">SELECT</span> SHA(<span class="string">&#x27;mysql&#x27;</span>) <span class="keyword">AS</span> &quot;sha key&quot;; <span class="comment">-- f460c882a18c1304d88854e902e11b85d71e7e1b</span></span><br></pre></td></tr></table></figure><h2 id="5-2-加密和解密">5.2 加密和解密</h2><p>使用 <code>AES_ENCRYPT()</code> 和 <code>AES_DECRYPT()</code> 函数实现 <code>ENCODE</code> 和 <code>DECODE</code> 功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> encrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> encrypted_data                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x0F46E6F2FE63CD819E2AD70B1919B9C5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> AES_DECRYPT(AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>), <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> decrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> decrypted_data                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x6D7973716C</span>                   <span class="operator">|</span>  <span class="comment">-- &#x27;mysql&#x27; 的十六进制</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">CAST</span>(AES_DECRYPT(AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>), <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> <span class="type">CHAR</span>) <span class="keyword">AS</span> decrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> decrypted_data <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> mysql          <span class="operator">|</span>  <span class="comment">-- CAST() 函数转格式</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>容易得知，<code>AES_ENCRYPT</code> <code>AES_DECRYPT</code> 互为反函数</p></blockquote><h1>6 获取 MySQL 相关信息</h1><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739190639244.png" alt=""></p><ul><li>MySQL 版本号</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> VERSION();</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> VERSION() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8.0</span><span class="number">.31</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>当前数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> DATABASE() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> dbtest1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>当前连接 MySQL 的用户名，返回结果格式为 <code>&quot;主机名@用户名&quot;</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">USER</span>(), <span class="built_in">CURRENT_USER</span>(), <span class="built_in">SYSTEM_USER</span>(), <span class="built_in">SESSION_USER</span>();</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">USER</span>()         <span class="operator">|</span> <span class="built_in">CURRENT_USER</span>() <span class="operator">|</span> <span class="built_in">SYSTEM_USER</span>()  <span class="operator">|</span> <span class="built_in">SESSION_USER</span>() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>字符集和比较规则</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CHARSET(<span class="string">&#x27;ABC&#x27;</span>), <span class="keyword">COLLATION</span>(<span class="string">&#x27;ABC&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> CHARSET(<span class="string">&#x27;ABC&#x27;</span>) <span class="operator">|</span> <span class="keyword">COLLATION</span>(<span class="string">&#x27;ABC&#x27;</span>)   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> utf8mb4        <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1>7 其他函数</h1><ul><li>格式化输出</li></ul><p><code>FORMAT(value, n)</code> ：返回对数字 <code>value</code> 进行格式化后的结果数据，<code>n</code>表示四舍五入保留到小数点后 <code>n</code> 位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- n &lt;= 0 均表示保留整数</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> FORMAT(<span class="number">1.124</span>, <span class="number">2</span>), FORMAT(<span class="number">10.523</span>, <span class="number">0</span>), FORMAT(<span class="number">100.123</span>, <span class="number">-2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> FORMAT(<span class="number">1.124</span>, <span class="number">2</span>) <span class="operator">|</span> FORMAT(<span class="number">10.523</span>, <span class="number">0</span>) <span class="operator">|</span> FORMAT(<span class="number">100.123</span>, <span class="number">-2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1.12</span>             <span class="operator">|</span> <span class="number">11</span>                <span class="operator">|</span> <span class="number">100</span>                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>IP 转换</li></ul><p><code>INET_ATON(ipvalue)</code> ：将以点分隔的IP地址转化为一个数字</p><p><code>INET_NTOA(value)</code> ：将数字形式的IP地址转化为以点分隔的IP地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> INET_ATON(<span class="string">&#x27;192.168.1.100&#x27;</span>) &quot;IP - Num&quot;, INET_NTOA(<span class="number">3232235876</span>) &quot;Num - IP&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> IP <span class="operator">-</span> Num   <span class="operator">|</span> Num <span class="operator">-</span> IP      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3232235876</span> <span class="operator">|</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># IP 按照 <span class="number">256</span> 进制计算: <span class="number">192</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">3</span> <span class="operator">+</span> <span class="number">168</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">1</span> <span class="operator">+</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>重复执行</li></ul><p><code>BENCHMARK(n,expr)</code> ：将表达式 <code>expr</code> 重复执行n次。用于测试 MySQL 处理 <code>expr</code> 表达式所耗费的时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BENCHMARK(<span class="number">1000000</span>, MD5(<span class="string">&#x27;mysql&#x27;</span>)) &quot;Once&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> Once <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.25</span> sec) <span class="comment">-- 0.25 sec</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BENCHMARK(<span class="number">10000000</span>, MD5(<span class="string">&#x27;mysql&#x27;</span>)) &quot;Many times&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> Many times <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">2.32</span> sec) <span class="comment">-- 2.32 sec</span></span><br></pre></td></tr></table></figure><ul><li>修改编码方式</li></ul><p><code>CONVERT(value USING char_code)</code> ：将 <code>value</code> 所使用的字符编码修改为 <code>char_code</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CHARSET(<span class="string">&#x27;mysql&#x27;</span>) &quot;Origin&quot;, CHARSET(<span class="keyword">CONVERT</span>(<span class="string">&#x27;mysql&#x27;</span> <span class="keyword">USING</span> <span class="string">&#x27;utf8&#x27;</span>)) &quot;Convert to utf8&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> Origin  <span class="operator">|</span> <span class="keyword">Convert</span> <span class="keyword">to</span> utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> utf8mb4 <span class="operator">|</span> utf8mb3         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（3）：利用 torch.nn 便捷搭建神经网络</title>
      <link href="/posts/e6c3766c.html"/>
      <url>/posts/e6c3766c.html</url>
      
        <content type="html"><![CDATA[<p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的结构和功能，关注实践，理论较少。</p><p><code>nn</code> 模块是 Pytorch 提供的神经网络模块，可以快速便捷地搭建神经网络或神经网络里的各个层（layer）。</p><h1>1 利用 nn.Module 实现全连接层和多层感知机</h1><p>在实际应用中，我们往往继承类 <code>torch.nn.Module</code> ，然后便携自己的网络层。下面以实现全连接层作为简单引入。</p><h2 id="1-1-全连接层">1.1 全连接层</h2><p>全连接层可以简单理解为一个线性层，它接受输入的张量 <code>x.shape = (?, in_features)</code> 并返回结果 <code>y.shape = (?, out_features)</code> ，利用的就是简单的线性组合。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = W x + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mtext>in_features</mtext><mo>×</mo><mtext>out_features</mtext></mrow></msup></mrow><annotation encoding="application/x-tex">W \in \R^{\text{in\_features}\times\text{out\_features}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">in_features</span></span><span class="mbin mtight">×</span><span class="mord text mtight"><span class="mord mtight">out_features</span></span></span></span></span></span></span></span></span></span></span></span></span> 而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mtext>out_features</mtext></msup></mrow><annotation encoding="application/x-tex">b \in \R^{\text{out\_features}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">out_features</span></span></span></span></span></span></span></span></span></span></span></span></span>。</p><blockquote><p>注意：此处的乘是类似矩阵乘法，而【不是逐元素相乘】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 定义线性层 Linear 用来计算 y = W x + b &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linear</span>(nn.Module):  <span class="comment"># 继承 nn.Module</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, out_features</span>):</span><br><span class="line">        <span class="comment"># in_features 输入的形状，out_features 输出的形状</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()  <span class="comment"># 等价于 nn.Module.__init__(self)</span></span><br><span class="line">        <span class="comment"># nn.Parameter 指定需要网络学习的参数</span></span><br><span class="line">        <span class="variable language_">self</span>.W = nn.Parameter(torch.randn(in_features, out_features))</span><br><span class="line">        <span class="variable language_">self</span>.b = nn.Parameter(torch.randn(out_features))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 计算 y = xW + b : 利用了广播机制，b 会复制成 y 一般大小，即 (out_features,)</span></span><br><span class="line">        y = x @ <span class="variable language_">self</span>.W + <span class="variable language_">self</span>.b  <span class="comment"># @ 代表矩阵乘法</span></span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><ul><li>需要使用 <code>super()</code> 方法调用父类的 <code>__init__()</code> 方法。或者直接使用 <code>nn.Module.__init__(self)</code></li><li>注意在定义自己的 <code>__init__()</code> 时，需要声明参数。例如这里的 <code>in_features</code> 和 <code>out_features</code></li><li><code>in_features</code> 和 <code>out_features</code> 指定输入输出的形状</li><li><code>nn.Parameter()</code> 指定网络需要学习的参数，用来告诉网络之后需要更新的对象</li><li>注意参数的形状，需要满足 <code>(?, in_features) @ (in_features, out_features) -&gt; (?, out_features)</code> 这类似矩阵乘法，不过此处是张量</li></ul><p>调用上述定义的线性层/全连接层，检查维度是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用上述定义的线性层/全连接层，检查维度</span></span><br><span class="line">linear_layer = Linear(in_features=<span class="number">4</span>, out_features=<span class="number">3</span>)</span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">outputs = linear_layer(inputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 3]) : (2, 4) @ (4, 3) -&gt; (2, 3)</span></span><br></pre></td></tr></table></figure><p>使用 <code>.named_parameters()</code> 方法检查参数 <code>W, b</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, parameter <span class="keyword">in</span> linear_layer.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. It is parameter: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2.&quot;</span>, parameter)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3. The shape is: &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(parameter.shape))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上述检查参数的返回结果</span></span><br><span class="line">[Out]:  <span class="number">1.</span> It <span class="keyword">is</span> parameter: W</span><br><span class="line">        <span class="number">2.</span> Parameter containing:</span><br><span class="line">        tensor([[ <span class="number">1.1711</span>,  <span class="number">0.4335</span>, -<span class="number">1.7343</span>],</span><br><span class="line">                [-<span class="number">1.3360</span>,  <span class="number">0.8871</span>,  <span class="number">0.7680</span>],</span><br><span class="line">                [ <span class="number">0.0571</span>,  <span class="number">0.2240</span>,  <span class="number">0.5520</span>],</span><br><span class="line">                [-<span class="number">0.5788</span>,  <span class="number">0.0177</span>,  <span class="number">0.1318</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">        <span class="number">3.</span> The shape <span class="keyword">is</span>: torch.Size([<span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        <span class="number">1.</span> It <span class="keyword">is</span> parameter: b</span><br><span class="line">        <span class="number">2.</span> Parameter containing:</span><br><span class="line">        tensor([ <span class="number">1.0198</span>, -<span class="number">0.4468</span>,  <span class="number">0.4520</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">        <span class="number">3.</span> The shape <span class="keyword">is</span>: torch.Size([<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="1-2-多层感知机">1.2 多层感知机</h2><p>由多个线性层/全连接层通过某些激活函数构成的网络，称为多层感知机。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739156093597.png" alt=""></p><p>根据上图的网络结构搭建多层感知机：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiPerceptron</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, hidden_features, out_features</span>):</span><br><span class="line">        <span class="comment"># 新增参数：隐藏层神经元个数（形状）</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 直接使用之前定义的线性层/全连接层 Linear</span></span><br><span class="line">        <span class="variable language_">self</span>.layer1 = Linear(in_features, hidden_features) </span><br><span class="line">        <span class="variable language_">self</span>.layer2 = Linear(hidden_features, out_features)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.layer1(x)</span><br><span class="line">        x = torch.sigmoid(x)  <span class="comment"># 使用激活函数，增加非线性因素（此处是逐个元素计算）</span></span><br><span class="line">        y = <span class="variable language_">self</span>.layer2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><ul><li>之前定义的层 Layer 可以在后续重复使用</li><li>注意传入参数，用以确认形状</li></ul><p>调用上述定义的多层感知机，检查维度是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查维度</span></span><br><span class="line">mlp = MultiPerceptron(<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">outputs = mlp(inputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 1]) ： (2, 3) @ (3, 4) @ (4, 1) -&gt; (2, 1)</span></span><br></pre></td></tr></table></figure><p>检查参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查参数</span></span><br><span class="line"><span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(name, param.size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># layer1.W torch.Size([3, 4])</span></span><br><span class="line"><span class="comment"># layer1.b torch.Size([4])</span></span><br><span class="line"><span class="comment"># layer2.W torch.Size([4, 1])</span></span><br><span class="line"><span class="comment"># layer2.b torch.Size([1])</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意输入形状】输入的形状一般为 <code>(?, in_features)</code> 其中 <code>?</code> 一般为 <code>batch_size</code> 即样本集个数。</p><p>当输入单一数据时，即只输入一个样本时，需要扩展维度，利用<a href="https://blog.iskage.online/posts/652f5539.html#8-3-%E7%BB%B4%E5%BA%A6%E5%8E%8B%E7%BC%A9%E3%80%81%E6%89%A9%E5%B1%95%E3%80%81%E6%8B%BC%E6%8E%A5-squeeze-unsqueeze-cat">第一章</a>介绍的 <code>unsqueeze()</code> 函数。向前扩展一个维度 <code>tensor.unsqueeze(0)</code> ，例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># batch_size = 1</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>)</span><br><span class="line">x.unsqueeze_(<span class="number">0</span>)  <span class="comment"># 需要向前扩展 1 个维度 （`_` 表示 inplace 操作，直接替换 x）</span></span><br><span class="line">y = mlp(x)</span><br><span class="line"><span class="built_in">print</span>(y.shape)  <span class="comment"># 正确 torch.Size([1, 1])</span></span><br></pre></td></tr></table></figure><p>总结：Pytorch 的 nn 封装了非常多网络层，可以直接前往<a href="https://pytorch.org/docs/stable/nn.html">官方文档</a>查看。下面介绍常见的网络层。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739157306136.png" alt=""></p><h1>2 常见神经网络层</h1><h2 id="2-1-以图像处理为例">2.1 以图像处理为例</h2><p>图像相关层主要包括：卷积层 <code>Conv</code>、池化层 <code>Pool</code> 等。往往还有不同维度图像处理的分类，同时池化方法也有最大池化、均值池化等。</p><blockquote><p>建议先学习卷积的原理，参考课程</p><p>中文，更专业：b站 <a href="https://www.bilibili.com/video/BV1L64y1m7Nh/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【19 卷积层【动手学深度学习v2】】</a></p><p>中文，更易懂：b站 <a href="https://www.bilibili.com/video/BV1K7411W7So/?p=5&amp;share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【【子豪兄】精讲CS231N斯坦福计算机视觉公开课（2020最新）】</a></p><p>英文，更专业：<a href="https://cs231n.stanford.edu/">cs231n</a></p></blockquote><h3 id="2-1-1-卷积层">2.1.1 卷积层</h3><p>图像处理相关的神经网络层，最最重要的就是卷积层。以 <code>Conv2d</code> 为例，介绍里面的参数和使用方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias, padding_mode)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_channels: 输入</span></span><br><span class="line">- in_channels (<span class="built_in">int</span>) – 图片的通道数，例如RGB图片就是 <span class="number">3</span> 通道，灰度图只有 <span class="number">1</span> 通道</span><br><span class="line"></span><br><span class="line"><span class="comment"># out_channels: 输出</span></span><br><span class="line">- out_channels (<span class="built_in">int</span>) – 输出结果的通道数</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel_size: 卷积核的大小</span></span><br><span class="line">- kernel_size (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>) – 卷积核的大小，只需输入T 则会自动生成一个 (T, T, channels) 大小的卷积核</span><br><span class="line"></span><br><span class="line"><span class="comment"># stride: 步数</span></span><br><span class="line">- stride (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 卷积核每次移动的步数，默认为 <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding: 填充层数</span></span><br><span class="line">- padding (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 填充层数，用以维持图片大小的参数，默认为 <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># padding_mode: 填充方式</span></span><br><span class="line">- padding_mode (string, optional) – 填充方式，一般默认即可，有 <span class="string">&#x27;zeros&#x27;</span>, <span class="string">&#x27;reflect&#x27;</span>, <span class="string">&#x27;replicate&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;circular&#x27;</span> 多种选择，默认为 <span class="string">&#x27;zeros&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dilation: 卷积核中元素的对应位置</span></span><br><span class="line">- dilation (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 默认为 <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># groups: 可选</span></span><br><span class="line">- groups (<span class="built_in">int</span>, optional) – Number of blocked connections <span class="keyword">from</span> <span class="built_in">input</span> channels to output channels. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bias: 可选</span></span><br><span class="line">- bias (<span class="built_in">bool</span>, optional) – 是否增加偏倚项，默认为 <span class="literal">True</span> : If <span class="literal">True</span>, adds a learnable bias to the output. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>如果希望卷积后，通道变多，但尺寸不变，则需要填充 <code>padding</code> ，公式</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><p>卷积过程的动画展示可参考 <a href="https://github.com/vdumoulin/conv_arithmetic">https://github.com/vdumoulin/conv_arithmetic</a></p><p>原理简单理解【卷积】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88101819072.png" alt=""></p><p>原理简单理解【padding】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102514146.png" alt=""></p><h3 id="2-1-2-代码：使用卷积层">2.1.2 代码：使用卷积层</h3><p>导入库，进行图片处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor, ToPILImage</span><br><span class="line"></span><br><span class="line">to_tensor = ToTensor()  <span class="comment"># img -&gt; Tensor</span></span><br><span class="line">to_pil = ToPILImage()  <span class="comment"># Tensor -&gt; PIL</span></span><br></pre></td></tr></table></figure><p>选择一张图片（图源网络）点此下载 <a href="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena.png">lena’s photo</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example = Image.<span class="built_in">open</span>(<span class="string">&#x27;imgs/lena.png&#x27;</span>)</span><br><span class="line">example <span class="comment"># 可视化输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena.png" alt="lena"></p><p>查看输入图片形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example = to_tensor(example).unsqueeze(<span class="number">0</span>)  <span class="comment"># 补充 batch_size</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Input Size:&quot;</span>,example.size()) <span class="comment"># 查看 input 维度</span></span><br><span class="line"><span class="comment"># Input Size: torch.Size([1, 1, 200, 200])</span></span><br></pre></td></tr></table></figure><p>查看卷积后输出图片形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conv = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">1</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">out = conv(example)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Output Size:&quot;</span>,out.size())</span><br><span class="line"><span class="comment"># Output Size: torch.Size([1, 1, 198, 198])</span></span><br><span class="line"><span class="comment"># 198 = (200 + 2 * 0 - 3 )/1 + 1 = 198</span></span><br></pre></td></tr></table></figure><p>以图片形式输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>))  <span class="comment"># 去除 batch_size 转换为图片输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_conv.png" alt="lena_conv"></p><blockquote><p>拓展：指定卷积核</p></blockquote><p>指定卷积核可以达到不同的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拓展：指定卷积核</span></span><br><span class="line">kernel = torch.tensor([</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>],</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>],</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>]</span><br><span class="line">], dtype=torch.float32)  <span class="comment"># 提取竖直边缘特征</span></span><br><span class="line"></span><br><span class="line">conv = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>)</span><br><span class="line">conv.weight.data = kernel.view(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># (batch_size, in_channels, height, width)</span></span><br><span class="line"></span><br><span class="line">out = conv(example)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Output Size:&quot;</span>, out.size())  <span class="comment"># torch.Size([1, 1, 198, 198])</span></span><br><span class="line"></span><br><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>))  <span class="comment"># 去除 batch_size 转换为图片输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_kernel.png" alt="lena_conv_with_certain_kernel"></p><h3 id="2-1-3-池化层">2.1.3 池化层</h3><p>池化层模糊选取某些特征，某些意义上可以防止过拟合。以最大池化为例，他选取范围内最大值替换整个范围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.MaxPool2d(kernel_size, stride=<span class="literal">None</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, return_indices=<span class="literal">False</span>, ceil_mode=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取最大值的窗口</span></span><br><span class="line">- kernel_size – the size of the window to take a <span class="built_in">max</span> over</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向纵向的步长，default = kernel_size</span></span><br><span class="line">- stride – the stride of the window. Default value <span class="keyword">is</span> kernel_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充图像边缘</span></span><br><span class="line">- padding – implicit zero padding to be added on both sides</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空洞</span></span><br><span class="line">- dilation – a parameter that controls the stride of elements <span class="keyword">in</span> the window</span><br><span class="line"></span><br><span class="line">- return_indices – <span class="keyword">if</span> <span class="literal">True</span>, will <span class="keyword">return</span> the <span class="built_in">max</span> indices along <span class="keyword">with</span> the outputs. Useful <span class="keyword">for</span> torch.nn.MaxUnpool2d later</span><br><span class="line"></span><br><span class="line"><span class="comment"># floor向下取整 ceil向上取整，例如ceil_mode = True，保留超出部分</span></span><br><span class="line">- ceil_mode – when <span class="literal">True</span>, will use ceil instead of floor to compute the output shape</span><br></pre></td></tr></table></figure><p>结合下图例理解最大池化原理</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8832249522.png" alt=""></p><p>代码实现上述案例，进行验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"></span><br><span class="line">inputs = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 batch_size，1 通道，5x5 大小，-1 表示自动计算</span></span><br><span class="line">inputs = torch.reshape(inputs, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line">max_pool = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">output = max_pool(inputs)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Out]: tensor([[[[<span class="number">3.</span>, <span class="number">2.</span>],</span><br><span class="line">                 [<span class="number">5.</span>, <span class="number">1.</span>]]]])  <span class="comment"># 确实与手算结果相同</span></span><br></pre></td></tr></table></figure><blockquote><p>根据池化原理，只是做了简单的取值替换，故【没有可学习的参数】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(max_pool.parameters())</span><br><span class="line">[Out]: []</span><br></pre></td></tr></table></figure><h3 id="2-1-4-代码：使用池化层">2.1.4 代码：使用池化层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out = max_pool(example)</span><br><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>)) <span class="comment"># 输出池化后的lena</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_pool.png" alt="lena_max_pool"></p><p>容易发现，经过最大池化后，图片变小，变模糊。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out.shape</span><br><span class="line"><span class="comment"># torch.Size([1, 1, 67, 67])</span></span><br></pre></td></tr></table></figure><h2 id="2-2-其他常见层">2.2 其他常见层</h2><h3 id="2-2-1-线性层-全连接层">2.2.1 线性层/全连接层</h3><p><code>nn.Linear</code> 层提供了类似计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = Wx+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性层</span></span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">linear_out = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">out = linear_out(inputs)</span><br><span class="line">out.shape</span><br><span class="line"><span class="comment"># torch.Size([2, 4]) : (2, 3) @ (3, 4) -&gt; (2, 4) where 2 is batch_size</span></span><br></pre></td></tr></table></figure><p>更多可参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#1-Linear">Pytorch 搭建神经网络（2）网络搭建 - 线性层</a></p><h3 id="2-2-2-批量归一化层">2.2.2 批量归一化层</h3><p><code>nn.BatchNorm1d</code> 层提供对 1 维数据进行归一化，填入的参数为特征数（例如上一个输出的维度）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc = nn.Linear(<span class="number">256</span>, <span class="number">512</span>)</span><br><span class="line">        <span class="variable language_">self</span>.bn = nn.BatchNorm1d(<span class="number">512</span>)  <span class="comment"># 全连接层后接BatchNorm1d</span></span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.bn(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>更多可参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#7-%E6%AD%A3%E5%88%99%E5%8C%96%E5%B1%82">Pytorch 搭建神经网络（2）网络搭建 - 正则化层</a></p><h3 id="2-2-3-Dropout-层">2.2.3 Dropout 层</h3><p><code>nn.Dropout</code> 层用于防止过拟合，按照概率遗弃一些神经元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">784</span>, <span class="number">128</span>)</span><br><span class="line">        <span class="variable language_">self</span>.dropout = nn.Dropout(<span class="number">0.5</span>)  <span class="comment"># 以 0.5 的概率遗弃</span></span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">128</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.dropout(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="2-3-循环神经网络">2.3 循环神经网络</h2><p>PyTorch 中提供了最常用的三种循环神经网络：<code>RNN</code>、<code>LSTM</code> 和 <code>GRU</code> 。</p><p>推荐学习 <a href="https://zh-v2.d2l.ai/chapter_recurrent-neural-networks/index.html">《动手学深度学习》</a> 中关于循环神经网络的知识，十分详细。也可结合李沐老师的讲解[b站连接](【54 循环神经网络 RNN【动手学深度学习v2】】 <a href="https://www.bilibili.com/video/BV1D64y1z7CA/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">https://www.bilibili.com/video/BV1D64y1z7CA/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2</a>)</p><h2 id="3-激活函数">3 激活函数</h2><p>激活函数可以为模型加入非线性性。</p><p>这部分可以参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#6-%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%BF%80%E6%B4%BB%EF%BC%88%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%89">Pytorch 搭建神经网络（2）网络搭建 - 激活函数</a></p><h2 id="4-前馈传播网络的便捷构建">4 前馈传播网络的便捷构建</h2><p>上述的网络结构均为：前一层的输出是下一层的输入。这样的网络结构称为<strong>前馈传播网络</strong>（Feedforward Neural Network，FFN）。</p><p>针对这样的网络结构，可以使用 <code>ModuleList</code> 和 <code>Sequential</code> 来组合各个层。</p><h3 id="4-1-Sequential">4.1 Sequential</h3><p>使用 <code>Sequential</code> 的三种方法：将卷积层、归一化层和激活函数层组合成一个网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法一</span></span><br><span class="line">net1 = nn.Sequential()</span><br><span class="line">net1.add_module(<span class="string">&#x27;conv&#x27;</span>, nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">net1.add_module(<span class="string">&#x27;batchnorm&#x27;</span>, nn.BatchNorm2d(<span class="number">3</span>))</span><br><span class="line">net1.add_module(<span class="string">&#x27;relu&#x27;</span>, nn.ReLU())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net1:&#x27;</span>, net1)</span><br><span class="line"><span class="comment"># net1: Sequential(</span></span><br><span class="line"><span class="comment">#   (conv): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (batchnorm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (relu): ReLU()</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法二</span></span><br><span class="line">net2 = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">    nn.BatchNorm2d(<span class="number">3</span>),</span><br><span class="line">    nn.ReLU()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net2:&#x27;</span>, net2)</span><br><span class="line"><span class="comment"># net2: Sequential(</span></span><br><span class="line"><span class="comment">#   (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (1): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (2): ReLU()</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法三</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">net3 = nn.Sequential(OrderedDict([</span><br><span class="line">    (<span class="string">&#x27;conv&#x27;</span>, nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">    (<span class="string">&#x27;batchnorm&#x27;</span>, nn.BatchNorm2d(<span class="number">3</span>)),</span><br><span class="line">    (<span class="string">&#x27;relu&#x27;</span>, nn.ReLU())</span><br><span class="line">]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net3:&#x27;</span>, net3)</span><br><span class="line"><span class="comment"># net3: Sequential(</span></span><br><span class="line"><span class="comment">#   (conv): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (batchnorm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (relu): ReLU()</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure><ul><li>可以根据名字和序号取出对应的层</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">net1.conv</span><br><span class="line"><span class="comment"># Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"></span><br><span class="line">net2[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"></span><br><span class="line">net3.relu</span><br><span class="line"><span class="comment"># ReLU()</span></span><br></pre></td></tr></table></figure><h3 id="4-2-ModuleList">4.2 ModuleList</h3><p>使用 <code>nn.ModuleList</code> 连接三个层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model_list = nn.ModuleList([nn.Linear(<span class="number">3</span>,<span class="number">4</span>), nn.ReLU(), nn.Linear(<span class="number">4</span>,<span class="number">2</span>)])</span><br><span class="line">inputs = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> model_list:</span><br><span class="line">    inputs = model(inputs)  <span class="comment"># 一步一步执行，相当于前向传播 forward</span></span><br><span class="line">inputs.shape</span><br><span class="line"><span class="comment"># torch.Size([1, 2])</span></span><br></pre></td></tr></table></figure><blockquote><p>不可以直接调用 <code>modellist(inputs)</code> ，因为没有定义前向传播</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputs = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">output = modellist(inputs)  <span class="comment"># 报错，没有定义 forward 函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NotImplementedError: Module [ModuleList] is missing the required &quot;forward&quot; function</span></span><br></pre></td></tr></table></figure><blockquote><p>【不能直接使用 list 类型】必须使用 <code>nn.ModuleList</code> 连接各个层，直接使用 <code>list</code> 类型是无法继承 <code>nn.Module</code> 从而无法被识别</p></blockquote><h2 id="5-损失函数">5 损失函数</h2><p>Pytorch 提供简单计算损失的函数，例如均方误差、交叉熵损失等。</p><ul><li>均方误差损失 <code>nn.MSELoss()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成预测值和真实值</span></span><br><span class="line">y_pred = torch.randn(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">y_real = torch.randn(<span class="number">4</span>).squeeze(-<span class="number">1</span>)  <span class="comment"># 将 y_real 的形状调整为 (4, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 MSE 损失函数</span></span><br><span class="line">mse = nn.MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失</span></span><br><span class="line">loss = mse(y_pred, y_real)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(loss)  <span class="comment"># tensor(1.2719)</span></span><br></pre></td></tr></table></figure><ul><li>交叉熵损失 <code>nn.CrossEntropyLoss()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># batch_size=4，即这一组共 4 个样本，类别为 2</span></span><br><span class="line">score = torch.randn(<span class="number">4</span>, <span class="number">2</span>)  <span class="comment"># 4 个样本，每个样本对应 2 个数值，代表属于第 0 or 1 类的概率</span></span><br><span class="line"><span class="comment"># 假设 4 个样本的真实类为：1, 0, 1, 1 </span></span><br><span class="line">label = torch.Tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]).long()  <span class="comment"># label 必须为 LongTensor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉熵损失 CrossEntropyLoss （常用与计算分类问题的损失）</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">loss = criterion(score, label)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(loss)  <span class="comment"># tensor(0.5944)</span></span><br></pre></td></tr></table></figure><h2 id="6-nn-functional-模块">6 nn.functional 模块</h2><p>使用 <code>nn.Module</code> 实现的层是一个特殊的类，其由 <code>class layer(nn.Module)</code> 定义，会自动提取可学习的参数；使用<code>nn.functional</code>实现的层更像是纯函数，由<code>def function(input)</code>定义。</p><p>也就是说，当这一层无需学习参数时，使用 <code>nn.functional</code> 是合理的。</p><h3 id="6-1-使用-nn-functional-的函数">6.1 使用 nn.functional 的函数</h3><p>以 <code>nn.functional.linear()</code> 为例，其他函数可参考官网 <a href="https://pytorch.org/docs/stable/nn.functional.html">https://pytorch.org/docs/stable/nn.functional.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.functional.linear(<span class="built_in">input</span>, weight, bias=<span class="literal">None</span>) -&gt; Tensor</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">input</span>: (batch_size, in_features)</span><br><span class="line">输入值，需要为 tensor</span><br><span class="line"></span><br><span class="line">- weight: (in_features, out_features)</span><br><span class="line">权重，需要为 tensor</span><br><span class="line"></span><br><span class="line">- bias: (out_features) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line">偏倚，需要为 tensor，或者为空</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 使用 nn.Module</span></span><br><span class="line">model = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">output1 = model(inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 使用 nn.functional</span></span><br><span class="line">output2 = nn.functional.linear(inputs, model.weight, model.bias)  <span class="comment"># 这里使用与 1 相同的参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output1)</span><br><span class="line"><span class="built_in">print</span>(output2)</span><br><span class="line"><span class="comment"># 二者值完全一样</span></span><br></pre></td></tr></table></figure><h3 id="6-2-nn-Module-和-nn-functional-结合使用">6.2 nn.Module 和 nn.functional 结合使用</h3><ul><li>如果模型具有可学习的参数，最好用 <code>nn.Module</code></li><li>否则既可以使用 <code>nn.functional</code>，也可以使用 <code>nn.Module</code></li></ul><blockquote><p>例如：激活函数、池化层没有可学习参数，可以使用对应的 <code>functional</code> 函数代替。而卷积层、线性层/全连接层需要学习参数，所以使用 <code>nn.Module</code></p><p>【推荐】dropout 虽然无参数学习，但推荐使用 <code>nn.Module</code></p></blockquote><p>例：混合使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 混合使用</span></span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 不需要声明那些没有参数学习的层：池化等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.max_pool2d(F.relu(<span class="variable language_">self</span>.conv1(x)), <span class="number">2</span>)  <span class="comment"># 池化直接写在前向传播里即可</span></span><br><span class="line">        x = F.max_pool2d(F.relu(<span class="variable language_">self</span>.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)  <span class="comment"># 计算池化后的大小</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">x = torch.randn(<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)  <span class="comment"># batch_size=64, channels=3, height=32, width=32</span></span><br><span class="line">model = myNet()</span><br><span class="line">out = model(x)</span><br><span class="line"><span class="built_in">print</span>(out.shape)  <span class="comment"># torch.Size([64, 10])</span></span><br></pre></td></tr></table></figure><h2 id="7-优化器">7 优化器</h2><p>PyTorch 将提供常用的优化方法，这些方法全部封装在 <code>torch.optim</code> 中</p><p>以 [1.2 多层感知机](#1.2 多层感知机) 为例，首先构建网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiPerceptron</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, hidden_features, out_features</span>):</span><br><span class="line">        <span class="comment"># 新增参数：隐藏层神经元个数（形状）</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 直接使用之前定义的线性层/全连接层 Linear</span></span><br><span class="line">        <span class="variable language_">self</span>.layer1 = Linear(in_features, hidden_features)</span><br><span class="line">        <span class="variable language_">self</span>.layer2 = Linear(hidden_features, out_features)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.layer1(x)</span><br><span class="line">        x = torch.sigmoid(x)  <span class="comment"># 使用激活函数，增加非线性因素（此处是逐个元素计算）</span></span><br><span class="line">        y = <span class="variable language_">self</span>.layer2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p>然后实例化网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_features=3, hidden_features=4, out_features=1</span></span><br><span class="line">mlp = MultiPerceptron(<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>设置优化器和学习率（使用随机梯度下降优化器 SGD）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置优化器和学习率</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为网络设置学习率，使用随机梯度下降优化器 SGD</span></span><br><span class="line">optimizer = optim.SGD(params=mlp.parameters(), lr=learning_rate)  <span class="comment"># 【重点】</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面就是网络的训练过程，这里我们只模仿更新一次</span></span><br><span class="line">optimizer.zero_grad()  <span class="comment"># 梯度清零，因为梯度累计效应</span></span><br><span class="line"></span><br><span class="line">inputs = torch.randn(<span class="number">32</span>, <span class="number">3</span>)  <span class="comment"># batch_size=32, in_features=3</span></span><br><span class="line">output = mlp(inputs)</span><br><span class="line">output.backward(output)  <span class="comment"># fake backward</span></span><br><span class="line"></span><br><span class="line">optimizer.step()  <span class="comment"># 执行优化</span></span><br></pre></td></tr></table></figure><blockquote><p>如果想为不同参数设置不同学习率</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为不同的参数分别设置不同的学习率</span></span><br><span class="line">weight_params = [param <span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters() <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.W&#x27;</span>)]</span><br><span class="line">bias_params = [param <span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters() <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.b&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD([</span><br><span class="line">    &#123;<span class="string">&#x27;params&#x27;</span>: bias_params&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;params&#x27;</span>: weight_params, <span class="string">&#x27;lr&#x27;</span>: <span class="number">1e-2</span>&#125;</span><br><span class="line">], lr=<span class="number">1e-5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（5）多表查询</title>
      <link href="/posts/b4103c0f.html"/>
      <url>/posts/b4103c0f.html</url>
      
        <content type="html"><![CDATA[<h1>多表查询</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>多表查询，关联查询，指对多个表进行查询。</p><blockquote><p>前提：被查询的多表之间存在联系，即存在关键字段、相同字段（例如：外键）</p></blockquote><h1>1 笛卡尔积</h1><h2 id="1-1-错误的查询">1.1 错误的查询</h2><p>如果直接查询，则会出现<strong>笛卡尔积错误</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br><span class="line"># <span class="number">2889</span> <span class="keyword">rows</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(last_name) <span class="keyword">FROM</span> employees;  <span class="comment">-- 107 rows</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(department_name) <span class="keyword">FROM</span> departments;  <span class="comment">-- 27 rows</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">107</span> <span class="operator">*</span> <span class="number">27</span>;  <span class="comment">-- 2889</span></span><br></pre></td></tr></table></figure><p>即将两个表的所有行进行了组合，将所有非重复组合一同输出。</p><h2 id="1-2-笛卡尔积">1.2 笛卡尔积</h2><p><strong>定义</strong>：对于集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding="application/x-tex">A,\ B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 称由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding="application/x-tex">A,\ B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 则称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 的笛卡尔积是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 的所有可能组合。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>=</mo><mrow><mo fence="true">{</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">∣</mi><mtext> </mtext><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>b</mi><mo>∈</mo><mi>B</mi><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">A \times B = \left\{ (a,\ b)\ |\ a \in A,\ b \in B \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">∣</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span></p><p>则容易得知新的集合元素个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mo>×</mo><mi mathvariant="normal">∣</mi><mi>B</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|A| \times |B|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|\cdot|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span></span></span></span> 表示元素个数。</p><h2 id="1-3-CROSS-JOIN-交叉连接">1.3 <code>CROSS JOIN</code> 交叉连接</h2><p>笛卡尔积也称为<strong>交叉连接</strong>，可以使用 <code>CROSS JOIN</code> <code>INNER JOIN</code> <code>JOIN</code>链接二表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure><blockquote><p>不通过 <code>WHERE</code> 或 <code>ON</code> 添加条件，则会出现笛卡尔积错误</p></blockquote><h2 id="1-4-WHERE-加入链接条件">1.4 <code>WHERE</code> 加入链接条件</h2><p>为了避免笛卡尔积， 可以<strong>在</strong> <code>WHERE</code> 加入有效的连接条件。格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 表<span class="number">1.</span>列名, 表<span class="number">1.</span>列名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span>, 表<span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> 表<span class="number">1.</span>列名<span class="number">1</span> <span class="operator">=</span> 表<span class="number">2.</span>列名<span class="number">2</span>;  <span class="comment">-- 有效的连接条件</span></span><br></pre></td></tr></table></figure><ul><li>例：根据部门 id 筛选</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">WHERE</span> 加入条件</span><br><span class="line"><span class="keyword">SELECT</span> employees.last_name, departments.department_name, employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br></pre></td></tr></table></figure><blockquote><p>在表中有相同列时，在列名之前加上表名前缀。【推荐使用，方便标注各表各列】</p></blockquote><h1>2 多表查询概念</h1><h2 id="2-1-等值连接-非等值连接">2.1 等值连接 &amp; 非等值连接</h2><h3 id="2-1-1-键的类型">2.1.1 键的类型</h3><blockquote><p>主键 <code>PRI</code> &amp; 唯一标识 <code>UNI</code> &amp; 外键 <code>MUL</code></p></blockquote><p>在SQL中，<code>key</code> 是用于标识表中列的属性，常见的类型包括 <code>PRI</code>、<code>MUL</code> 和 <code>UNI</code>。这些属性描述了列在表中的角色和约束。以下是它们的详细区别：</p><ul><li><code>PRI</code> (Primary Key)：表示该列为表的主键。</li></ul><p>值唯一，不能有重复；不为空；唯一标识；可作为唯一索引；</p><ul><li><code>UNI</code> (Unique Key)：表示该列具有唯一约束。</li></ul><p>值唯一，不能有重复；允许空值；也可作为唯一索引；</p><ul><li><code>MUL</code> (Multiple)：表示该列是外键或普通索引。</li></ul><p>非唯一性，值可以重复；如果该列是外键，它引用另一个表的主键或唯一键；</p><p>使用 <code>DESC</code> 查询表的属性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739081118663.png" alt=""></p><h3 id="2-1-2-等值连接">2.1.2 等值连接</h3><p>一般通过外键寻找另一个表的唯一索引（<code>PRI</code> 或 <code>UNI</code>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据 job_id 外键连接 jobs 表的 job_title</span></span><br><span class="line"><span class="keyword">SELECT</span> employees.last_name, jobs.job_title, employees.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees, jobs</span><br><span class="line"><span class="keyword">WHERE</span> employees.job_id <span class="operator">=</span> jobs.job_id;</span><br></pre></td></tr></table></figure><ul><li>多个条件 <code>AND</code> 连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.last_name, departments.department_name, employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id <span class="keyword">AND</span> departments.department_name <span class="operator">=</span> <span class="string">&#x27;Shipping&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>多个表中有相同列时，必须在列名之前加上表名前缀</li></ul><p>【推荐使用，方便标注各表各列，提高查询效率】</p><ul><li>使用别名可以简化查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e, departments <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><blockquote><p>一但使用了别名，这一个语句中必须使用别名替代</p></blockquote><ul><li>连接多个表</li></ul><p>例如：展示员工 <code>last_name, department_name, city</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, lc.city</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e,</span><br><span class="line">     departments <span class="keyword">as</span> d,</span><br><span class="line">     locations <span class="keyword">as</span> lc</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">  <span class="keyword">AND</span> d.location_id <span class="operator">=</span> lc.location_id;</span><br></pre></td></tr></table></figure><blockquote><p>连接 N 个表，至少需要 N-1 个条件</p></blockquote><h3 id="2-1-3-非等值连接">2.1.3 非等值连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, j.grade_level <span class="keyword">AS</span> GRADE</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e,</span><br><span class="line">     job_grades <span class="keyword">AS</span> j</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="keyword">BETWEEN</span> j.lowest_sal <span class="keyword">AND</span> j.highest_sal  <span class="comment">-- 按工资分档</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;  <span class="comment">-- 按照工资排序</span></span><br></pre></td></tr></table></figure><h2 id="2-2-自连接-非自连接">2.2 自连接 &amp; 非自连接</h2><p>使用别名的方式把 <strong>1</strong> 张表虚拟成 <strong>2</strong> 张表，而后两表可以进行内连接和外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(worker.last_name, <span class="string">&#x27; works for &#x27;</span></span><br><span class="line">           , manager.last_name) <span class="keyword">AS</span> relationship <span class="comment">-- 连接为长字符串</span></span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> worker,</span><br><span class="line">     employees <span class="keyword">AS</span> manager</span><br><span class="line"><span class="keyword">WHERE</span> worker.manager_id <span class="operator">=</span> manager.employee_id;</span><br></pre></td></tr></table></figure><blockquote><p>将 employees 表虚拟为 表 worker 和 manager，然后自连接</p></blockquote><h2 id="2-3-内连接-外连接">2.3 内连接 &amp; 外连接</h2><ul><li>内连接：合并的表存在联系，即存在相同列。结果中<strong>不包含一个表与另一个表不匹配的行</strong></li></ul><p>内连接使用 <code>INNER JOIN</code></p><ul><li>外连接：两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回不满足条件的行</strong></li></ul><p>外连接使用 <code>LEFT JOIN</code> <code>RIGHT JOIN</code>，特别地，对 MySQL 而言全外连接需要使用 <code>UNION</code> 方法</p><blockquote><p>不满足条件的行 —— 相应的列为空 <code>NULL</code></p><p>当返回不满足条件的行来自<u>左表</u>时，则为<u>左外连接</u>，左边的表也称为<u>主表</u> ，右边的表称为<u>从表</u></p><p>当返回不满足条件的行来自<u>右表</u>时，则为<u>右外连接</u>，右边的表也称为<u>主表</u> ，左边的表称为<u>从表</u></p></blockquote><h1>3 多表查询代码</h1><p>使用 <code>SQL99</code> 语法实现</p><h2 id="3-1-基础语法-JOIN-ON">3.1 基础语法 <code>JOIN ON</code></h2><p>标准格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column, </span><br><span class="line">   table2.column,</span><br><span class="line">   table3.column</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2 </span><br><span class="line"><span class="keyword">ON</span> table1 和 table2 的连接条件</span><br><span class="line">    <span class="keyword">JOIN</span> table3 </span><br><span class="line">        <span class="keyword">ON</span> table2 和 table3 的连接条件</span><br></pre></td></tr></table></figure><ul><li>各个条件相互独立</li><li>使用 <code>JOIN</code> <code>CROSS JOIN</code> <code>INNER JOIN</code> 含义相同，均代表内连接</li></ul><p>下面看具体内连接案例：</p><h2 id="3-2-内连接">3.2 内连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column,</span><br><span class="line">       table2.column,</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：查询 <code>last_name, department_name, city</code> 员工为 <code>'Chen'</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, lc.city</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">         <span class="keyword">JOIN</span> locations lc</span><br><span class="line">              <span class="keyword">ON</span> d.location_id <span class="operator">=</span> lc.location_id;</span><br><span class="line"><span class="keyword">WHERE</span> e.last_name <span class="operator">=</span> <span class="string">&#x27;Chen&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;&gt;</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> city    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> Chen      <span class="operator">|</span> Finance         <span class="operator">|</span> Seattle <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="3-3-外连接">3.3 外连接</h2><h3 id="3-3-1-左外连接-LEFT-JOIN-ON">3.3.1 左外连接 <code>LEFT JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- A 为主表，B 表向 A 表插入</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：<code>employees</code> 表中 <code>Grant</code> 对应 <code>department_id</code> 为 <code>NULL</code> 故在表 <code>departments</code> 检索不到</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.department_id, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                         <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739087518109.png" alt=""></p><h3 id="3-3-2-右外连接-RIGHT-JOIN-ON">3.3.2 右外连接 <code>RIGHT JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- B 为主表，A 表向 B 表插入</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：<code>employees</code> 表中没有处于 <code>departments</code> 表中 <code>Treasury</code> 部门的，故向 <code>departments</code> 插入时补空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.department_name, e.last_name, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                          <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739087735674.png" alt=""></p><h3 id="3-3-3-满外连接-FULL-JOIN-ON">3.3.3 满外连接 <code>FULL JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满外连接的结果 <span class="operator">=</span> 左右表匹配到的数据 <span class="operator">+</span> 左表没有匹配到的数据 <span class="operator">+</span> 右表没有匹配到的数据</span><br></pre></td></tr></table></figure><p>标准语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 互相charity</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>MySQL</code> 不支持 <code>FULL JOIN</code> ，但可以通过<strong>合并左外连接和右外连接的方式</strong>实现。</p><p>可以简单理解：<code>FULL JOIN &lt;=&gt; LEFT JOIN UNION RIGHT JOIN</code></p></blockquote><h1>4 合并查询结果 <code>UNION</code></h1><p><code>UNION</code> 可以将多个 SELECT 语句得到的结果合并成一个表输出：</p><ul><li>匹配：多个 SELECT 语句得到的结果集列数和数据类型必须相同</li><li>去重与否：使用 <code>UNION</code> 会去除重复数据；使用 <code>UNION ALL</code> 不会去除重复数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]  <span class="comment">-- UNION 或者 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... <span class="keyword">FROM</span> table2</span><br></pre></td></tr></table></figure><ul><li>例：查询部门编号 <code>department_id &gt; 90</code> 或 邮箱 <code>email</code> 包含 <code>a</code> 的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：使用 WHERE</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line">   <span class="keyword">OR</span> department_id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：使用 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h1>5 JOIN 实现的几种关系（总结）</h1><h2 id="5-1-内连接：A-交-B">5.1 内连接：A 交 B</h2><p>A 表与 B 表内连接，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="5-2-左外连接：A-交-A-交-B">5.2 左外连接：A 交 (A 交 B)</h2><p>A 表作为主表，B 表作为从表插入 A ，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A + A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="5-3-右外连接：B-交-A-交-B">5.3 右外连接：B 交 (A 交 B)</h2><p>B 表作为主表，A 表作为从表插入 B ，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>+</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">B + A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><blockquote><p>左外连接和右外连接本质相同</p></blockquote><h2 id="5-4-WHERE-找出空值-IS-NULL：只属于-A">5.4 WHERE 找出空值 IS NULL：只属于 A</h2><p>A 表作为主表，B 表插入，但去除完美匹配的，即 A 表中与 B 表无关的部分。相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>−</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A - A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> B.column <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><ul><li>例：查询 部门表中无员工的部门</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.department_name, d.department_id, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e</span><br><span class="line">                   <span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739090941337.png" alt=""></p><h2 id="5-5-UNION-合并：A-并-B">5.5 UNION 合并：A 并 B</h2><p>UNION 可以将多个 SELECT 语句得到的结果合并成一个表输出，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cup B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> B.col <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line">    <span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br></pre></td></tr></table></figure><ul><li>例：两张方法，推荐第一种【先手动去重，再使用 UNION ALL 效率高】</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：利用 WHERE d.department_id IS NULL 手动去重</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：直接使用 UNION 自动去重</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><h2 id="5-6-找出空值后-UNION-合并：对称差">5.6 找出空值后 UNION 合并：对称差</h2><p>查询所有匹配失败的行数据，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi><mo>−</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cup B - A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> B.col <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line">    <span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> A.col <span class="keyword">IS</span> <span class="keyword">NULL</span>  <span class="comment">-- 全部加上 IS NULL 判断</span></span><br></pre></td></tr></table></figure><ul><li>例：查询所有失败行数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739091754343.png" alt=""></p><h1>6 特殊等值连接</h1><h2 id="6-1-自然连接">6.1 自然连接</h2><p><code>NATURAL JOIN</code> 会自动查询两张表中<strong>所有相同的字段</strong>，然后进行等值连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是 SQL99 新语法</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d;</span><br></pre></td></tr></table></figure><blockquote><p>注：自然连接使用 <code>AND</code> 连接各个条件。即只有当所有相同列名的值都相等时，才会放入结果集。</p><p>例如：当表 employees 和表 departments 有相同列 department_id 和 manager_id 时</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 上面自然连接等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">                  <span class="keyword">AND</span> e.manager_id <span class="operator">=</span> d.manager_id;  <span class="comment">-- 是 AND 而不是 OR</span></span><br></pre></td></tr></table></figure><h2 id="6-2-USING-连接">6.2 USING 连接</h2><p>当有多个同名字段时，<code>USING</code> 可以指定同名字段进行连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,</span><br><span class="line">     departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;  <span class="comment">-- 利用 USING 简化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以简化为</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">USING</span> (department_id);  <span class="comment">-- 指定 department_id</span></span><br></pre></td></tr></table></figure><h2 id="6-3-总结：等值连接的三种写法">6.3 总结：等值连接的三种写法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：WHERE 限制条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,</span><br><span class="line">     departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：JOIN ... ON + 条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line">                  </span><br><span class="line"><span class="comment">-- 法三：USING 指定同名字段</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">USING</span> (department_id);  <span class="comment">-- 指定 department_id</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>WHERE</code> 的使用没有限制，目的就是增加约束条件</li><li><code>ON</code> 只能和 <code>JOIN</code> 连用</li><li><code>USING</code> 只能和 <code>JOIN</code>，且要求字段必须同名</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（2）：自动求导 autograd 反向传播 backward 与计算图</title>
      <link href="/posts/421f3bd1.html"/>
      <url>/posts/421f3bd1.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch搭建神经网络（2）自动求导autograd、反向传播backward与计算图</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p><code>torch.autograd</code> 提供了一套自动求导方式，它能够根据前向传播过程自动构建计算图，执行反向传播。</p><h2 id="1-autograd-的数学原理：计算图">1 autograd 的数学原理：计算图</h2><p>计算图原理可以查看 <strong>cs231n</strong> 课程讲解：【计算图的原理非常重要！】或者见<a href="#3">后文分析</a></p><p>英文官网 <a href="https://cs231n.github.io/">https://cs231n.github.io/</a></p><p>b站 课程整理 <a href="https://www.bilibili.com/video/BV1nJ411z7fe?p=8&amp;spm_id_from=333.788.videopod.episodes">BV1nJ411z7fe</a> 【反向传播章节】</p><p>b站 中文讲解 <a href="https://www.bilibili.com/video/BV1K7411W7So?p=4&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【子豪兄】精讲CS231N斯坦福计算机视觉公开课（2020最新）</a></p><h2 id="2-autograd-的使用：requires-grad-backward">2 autograd 的使用：requires_grad &amp; backward</h2><h3 id="2-1-requires-grad-属性">2.1 requires_grad 属性</h3><p>只需要对Tensor增加一个 <code>requires_grad=True</code> 属性，Pytorch就会自动计算 <code>requires_grad=True</code> 属性的 Tensor，并保留计算图，从而快速实现反向传播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Method 1</span></span><br><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2</span></span><br><span class="line">x = torch.rand(<span class="number">2</span>, <span class="number">3</span>).requires_grad_()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 3</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">x.requires_grad = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.requires_grad)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-2-backward-反向传播">2.2 backward 反向传播</h3><p>反向传播函数的使用：其中第一个参数 <code>tensors</code> 传入用于计算梯度的张量，格式和各个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.autograd.backward(tensors, grad_tensors=<span class="literal">None</span>, retain_graph=<span class="literal">None</span>, create_graph=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>tensors</code>：用于计算梯度的Tensor，如<code>torch.autograd.backward(y)</code>，等价于<code>y.backward()</code>。</p></li><li><p><code>grad_tensors</code>：形状与tensors一致，对于<code>y.backward(grad_tensors)</code>，grad_tensors相当于链式法则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow></mfrac><mo>×</mo><mfrac><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">{\mathrm{d}z \over \mathrm{d}x}={\mathrm{d}z \over \mathrm{d}y} \times {\mathrm{d}y \over \mathrm{d}x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3612em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">{\mathrm{d}z} \over {\mathrm{d}y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3612em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。【结合例子理解见后】</p></li><li><p><code>retain_graph</code>：计算计算图里每一个导数值时需要保留各个变量的值，retain_graph 为 True 时会保存。【结合例子理解见后】</p></li></ul><h4 id="2-2-1-requires-grad-属性的传递">2.2.1 requires_grad 属性的传递</h4><ul><li>例：<code>a</code> 需要求导，<code>b</code> 不需要，<code>c</code> 定义为 <code>a + b</code> 的元素加和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">c = (a + b).<span class="built_in">sum</span>()  <span class="comment"># c 受 a 的影响，c.requires_grad = True</span></span><br><span class="line"></span><br><span class="line">a.requires_grad, b.requires_grad, c.requires_grad</span><br><span class="line"><span class="comment"># (True, False, True)</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-is-leaf-叶子结点">2.2.2 is_leaf 叶子结点</h4><p>对于计算图中的Tensor而言， <code>is_leaf=True</code> 的Tensor称为Leaf Tensor，也就是计算图中的叶子节点。</p><ul><li><code>requires_grad=False</code> 时，无需求导，故为叶子结点。</li><li>即使 <code>requires_grad=True</code> 但是由用户创建的时，此时它位于计算图的头部（叶子结点），它的梯度会被保留下来。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仍然是上面的例子</span></span><br><span class="line">a.is_leaf, b.is_leaf, c.is_leaf</span><br><span class="line"><span class="comment"># (True, True, False)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-autograd-利用计算图计算导数">2.3 autograd 利用计算图计算导数</h3><p>利用 autograd 计算导数，对于函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">y=x^2e^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span>，它的导函数解析式为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mrow><mi>d</mi><mtext> </mtext><mi>y</mi></mrow><mrow><mi>d</mi><mtext> </mtext><mi>x</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mi>x</mi><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><msup><mi>e</mi><mi>x</mi></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation}\dfrac{d\ y}{d\ x} = 2xe^x + x^2e^x\end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.7787em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2787em;"><span style="top:-3.2787em;"><span class="pstrut" style="height:3.3714em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7787em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2787em;"><span style="top:-3.2787em;"><span class="pstrut" style="height:3.3714em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7787em;"><span></span></span></span></span></span></span></span></span></p><p>定义计算 y 函数和计算解析式导数结果函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autograd 求导</span></span><br><span class="line"><span class="comment"># y = x^2 * e^x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y = x * x * torch.exp(x)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">df</span>(<span class="params">x</span>):</span><br><span class="line">    df = <span class="number">2</span> * x * torch.exp(x) + x * x * torch.exp(x)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><ul><li>例：随机赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = f(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y = </span></span><br><span class="line"><span class="comment"># tensor([[0.1387, 0.4465, 0.4825],</span></span><br><span class="line"><span class="comment">#         [0.1576, 4.1902, 0.5185]], grad_fn=&lt;MulBackward0&gt;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y.backward(gradient=torch.ones(y.size()))  <span class="comment"># 指定 dy/dx = dy/dx * 1 的 dy/dx</span></span><br><span class="line"><span class="comment"># torch.autograd.backward(y, grad_tensors=torch.ones(y.size()))  # 或者</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.grad)  <span class="comment"># 反向传播后才能取到 y 关于 x 的导数（已经代入了此时 x 的值）</span></span><br><span class="line"><span class="comment"># tensor([[-0.4497,  2.1766, -0.2087],</span></span><br><span class="line"><span class="comment">#         [-0.4567, 11.4700, -0.1244]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df(x))   <span class="comment"># 解析求出的导数值</span></span><br><span class="line"><span class="comment"># tensor([[-0.4497,  2.1766, -0.2087],</span></span><br><span class="line"><span class="comment">#         [-0.4567, 11.4700, -0.1244]], grad_fn=&lt;AddBackward0&gt;)</span></span><br></pre></td></tr></table></figure><p><code>x.grad &amp; df(x)</code> 二者是在数值上是一样的</p><h2 id="3-反向传播与计算图-a-id-3-a">3 反向传播与计算图<a id='3'></a></h2><h3 id="3-1-计算图原理：链式法则">3.1 计算图原理：链式法则</h3><p>根据链式法则</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dz/dy = 1,\ dz/db = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>x</mi><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">dy/dw = x,\ dy/dx = w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>×</mo><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mn>1</mn><mo>×</mo><mi>w</mi><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>×</mo><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mn>1</mn><mo>×</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">dz/dx = dz/dy \times dy/dx = 1 \times w,\ dz/dw = dz/dy \times dy/dw = 1 \times x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></p><p>只要存储结点的导数和值便可通过简单的乘法计算所有导数</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739002830328.png" alt=""></p><p>按照上图构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算图</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">b = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = w * x <span class="comment"># 等价于 y = w.mul(x)</span></span><br><span class="line">z = y + b <span class="comment"># 等价于 z = y.add(b)</span></span><br><span class="line"></span><br><span class="line">x.requires_grad, b.requires_grad, w.requires_grad, y.requires_grad, z.requires_grad</span><br><span class="line"><span class="comment"># (False, True, True, True, True)</span></span><br></pre></td></tr></table></figure><h3 id="3-2-grad-fn-查看反向传播函数">3.2 grad_fn 查看反向传播函数</h3><p><code>grad_fn</code> 可以查看这个结点的函数类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z.grad_fn  <span class="comment"># &lt;AddBackward0 at 0x7f96b951ba90&gt;  Add 加法，因为 z = y + b</span></span><br><span class="line">y.grad_fn  <span class="comment"># &lt;MulBackward0 at 0x7f96b951b400&gt;  Mul 乘法，因为 y = w * x</span></span><br><span class="line"></span><br><span class="line">w.grad_fn, x.grad_fn, b.grad_fn <span class="comment"># (None, None, None) 叶子结点是 grad_fn=None</span></span><br></pre></td></tr></table></figure><p><code>grad_fn.next_functions</code> 获取 grad_fn 的输入，返回上一步的反向传播函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">z.grad_fn.next_functions  <span class="comment"># z 前是 y 和 b</span></span><br><span class="line"><span class="comment"># ((&lt;MulBackward0 at 0x7f96b951b400&gt;, 0),  # y = w * x 是 mul</span></span><br><span class="line"><span class="comment">#  (&lt;AccumulateGrad at 0x7f96b95c6af0&gt;, 0))  # b 是叶子结点，需要求导 AccumulateGrad</span></span><br><span class="line"></span><br><span class="line">y.grad_fn.next_functions  <span class="comment"># y 前是 w 和 x</span></span><br><span class="line"><span class="comment"># ((&lt;AccumulateGrad at 0x7f9678466160&gt;, 0),  # w 是叶子结点，需要求导 AccumulateGrad</span></span><br><span class="line"><span class="comment">#  (None, 0)  # x 是叶子节点，x.requires_grad=False 不需要求导 None</span></span><br></pre></td></tr></table></figure><h3 id="3-3-retain-graph-的使用（仅叶子结点）">3.3 retain_graph 的使用（仅叶子结点）</h3><p>如果不指定 <code>retain_graph=True</code> ，则在反向传播后，会自动清除变量值。</p><p>例如：计算 <code>w.grad</code> w 的梯度时，需要 x 的值 （<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">dy/dw = x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>）</p><blockquote><p>注意：x.requires_grad=False 不需要求导，故 <code>x.grad</code> 报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z.backward(retain_graph=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="comment"># tensor([1.])  # 确实是我们之前设的 x = torch.ones(1) 相匹配</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再次运行，梯度累加</span></span><br><span class="line">z.backward()</span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="comment"># tensor([1.])  # 1 + 1 = 2 累加，所以之前 grad_fn 取名为 AccumulateGrad</span></span><br></pre></td></tr></table></figure><h3 id="3-4-关闭反向传播">3.4 关闭反向传播</h3><p>某一个节点 <code>requires_grad </code>被设置为 <code>True</code> ，那么所有依赖它的节点 <code>requires_grad</code> 都是 <code>True</code>。有时不需要对所有结点都反向传播（求导），从而来节省内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line"></span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = True</span></span><br><span class="line"><span class="comment"># (False, True, True)</span></span><br></pre></td></tr></table></figure><p>下面我们来关闭关于 <code>y</code> 的反向传播</p><ul><li>法一：<code>with torch.no_grad():</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    x = torch.ones(<span class="number">1</span>)</span><br><span class="line">    w = torch.rand(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">    y = x * w</span><br><span class="line">    </span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = False</span></span><br><span class="line"><span class="comment"># (False, True, False)</span></span><br></pre></td></tr></table></figure><ul><li>法二：设置默认 <code>torch.set_grad_enabled(False)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">torch.set_grad_enabled(<span class="literal">False</span>) <span class="comment"># 更改默认设置</span></span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line"></span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = False</span></span><br><span class="line"><span class="comment"># (False, True, False)</span></span><br><span class="line"></span><br><span class="line">torch.set_grad_enabled(<span class="literal">True</span>) <span class="comment"># 恢复默认设置</span></span><br></pre></td></tr></table></figure><h3 id="3-5-data-从计算图取出Tensor的值">3.5 <code>.data</code> 从计算图取出Tensor的值</h3><p>修改张量的数值，又不影响计算图，使用 <code>tensor.data</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">x_clone = x.data</span><br><span class="line"></span><br><span class="line">x.requires_grad, x_clone.requires_grad  <span class="comment"># x_clone 独立于原来的计算图</span></span><br><span class="line"><span class="comment"># (True, False)</span></span><br></pre></td></tr></table></figure><h3 id="3-6-存储非叶子结点的梯度">3.6 存储非叶子结点的梯度</h3><p>在计算图流程中，非叶子结点求导后其导数值便立刻被清除。可以使用 <code>autograd.grad</code> 或 <code>hook</code> 方法保留</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autograd.grad &amp; hook</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = w * x  <span class="comment"># 非叶子结点</span></span><br><span class="line">z = y.<span class="built_in">sum</span>()  <span class="comment"># 非叶子结点</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z.backward()</span><br><span class="line">x.grad, w.grad, y.grad  <span class="comment"># 非叶子结点 y.grad = None</span></span><br><span class="line"><span class="comment"># (tensor([1.]), tensor([1.]), None)</span></span><br></pre></td></tr></table></figure><blockquote><p>若为叶子结点可以采用 <code>z.backward(retain_graph=True)</code> 的方式</p></blockquote><ul><li>法一：<code>torch.autograd.grad()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 torch.autograd.grad() 直接取梯度</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line">z = y.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">torch.autograd.grad(z, y)  <span class="comment"># z.backward() 并直接取 y.grad()</span></span><br><span class="line"><span class="comment"># (tensor([1.]),)</span></span><br></pre></td></tr></table></figure><ul><li>法二：<code>hook</code></li></ul><p>标准格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hook是一个函数，输入是梯度，不应该有返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variable_hook</span>(<span class="params">grad</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;y.grad：&#x27;</span>, grad)</span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y = x * w</span><br><span class="line"><span class="comment"># 注册hook</span></span><br><span class="line">hook_handle = y.register_hook(variable_hook)</span><br><span class="line"></span><br><span class="line">z = y.<span class="built_in">sum</span>()</span><br><span class="line">z.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除非每次都要使用 hook，否则用完之后记得移除 hook</span></span><br><span class="line">hook_handle.remove()</span><br><span class="line"></span><br><span class="line"><span class="comment"># y.grad： tensor([1.])</span></span><br></pre></td></tr></table></figure><h2 id="4-案例：线性回归">4 案例：线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fake_data</span>(<span class="params">batch_size=<span class="number">16</span></span>):</span><br><span class="line">    <span class="comment"># 产生随机数据：y = 2 * x + 3，加上噪声</span></span><br><span class="line">    x = torch.rand(batch_size, <span class="number">1</span>) * <span class="number">5</span>  <span class="comment"># 扩大一些，以免噪声太明显</span></span><br><span class="line">    y = x * <span class="number">2</span> + <span class="number">3</span> + torch.randn(batch_size, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机数种子，保证结果可复现</span></span><br><span class="line">torch.manual_seed(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">x, y = get_fake_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.scatter(x.squeeze().numpy(), y.squeeze().numpy())</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">w = torch.rand(<span class="number">1</span>, <span class="number">1</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># w.shape = torch.Size([1, 1]) 因为 [8, 1] * [1, 1] -&gt; [batch_size, 1] 和 y 维度相同</span></span><br><span class="line">b = torch.zeros(<span class="number">1</span>, <span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">losses = np.zeros(<span class="number">200</span>)  <span class="comment"># 存储损失值</span></span><br><span class="line">lr = <span class="number">0.005</span>  <span class="comment"># 学习率</span></span><br><span class="line">EPOCHS = <span class="number">200</span>  <span class="comment"># 迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCHS):</span><br><span class="line">    x, y = get_fake_data(batch_size=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播 计算损失</span></span><br><span class="line">    y_pred = x.mm(w) + b.expand_as(y)  <span class="comment"># expand_as(y) 是广播机制，即将 b 复制成和 y 相同性质的张量 [1, 1] -&gt; [batch_size, 1]</span></span><br><span class="line">    loss = <span class="number">0.5</span> * (y_pred - y) ** <span class="number">2</span>  <span class="comment"># MSE 均方误差，这是对张量 y 逐元素计算</span></span><br><span class="line">    loss = loss.<span class="built_in">sum</span>()  <span class="comment"># 累和成一个数</span></span><br><span class="line">    losses[epoch] = loss.item()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 取 .data 是因为每一轮是根据随机生成的 batch_size 个点训练，但我们希望存储的是全局参数 w, b &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 故每次依据样本点更新全局参数，而不是改批次的参数 &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    w.data.sub_(lr * w.grad.data)  <span class="comment"># 或者 w.data = w.data - lr * w.grad.data</span></span><br><span class="line">    b.data.sub_(lr * b.grad.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 梯度清零</span></span><br><span class="line">    w.grad.data.zero_()  <span class="comment"># 不清零，梯度会不断累加</span></span><br><span class="line">    b.grad.data.zero_()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">10</span> == <span class="number">0</span>:  <span class="comment"># 每隔 10 次扔出当前训练情况</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Epoch: &#123;&#125; / &#123;&#125;, Parameters: w is &#123;&#125;, b is &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, EPOCHS, w.item(), b.item(), losses[epoch]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Epoch: &#123;&#125; / &#123;&#125;, Parameters: w is &#123;&#125;, b is &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(EPOCHS, EPOCHS, w.item(), b.item(), losses[-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739010576001.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（4）排序与分页：ORDER BY 子句 和 LIMIT 子句</title>
      <link href="/posts/c8719e79.html"/>
      <url>/posts/c8719e79.html</url>
      
        <content type="html"><![CDATA[<h1>排序与分页：ORDER BY 子句 和 LIMIT 子句</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h1>1 排序</h1><p>为了使数据按照设定的规则排序输出，可以使用 <code>ORDER BY</code></p><ul><li><p>使用 <code>ORDER BY 字段名 ASC</code> 表示按照 <code>字段</code> <strong>生序</strong> 展示</p></li><li><p>使用 <code>ORDER BY 字段名 DESC</code> 表示按照 <code>字段</code> <strong>降序</strong> 展示</p></li><li><p><code>ORDER BY</code> 位于  <code>SELECT</code> 语句结尾</p></li></ul><h2 id="1-1-按照某一列排序">1.1 按照某一列排序</h2><ul><li>例如按照 <code>hire_date</code> 升序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date;  # 按照 hire_date 排序输出，默认升序 <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">ASC</span>;  # 按照 hire_date 升序输出</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738994927454.png" alt=""></p><ul><li>按照 <code>hire_date</code> 降序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span>;  # 按照 hire_date 降序输出</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995009057.png" alt=""></p><ul><li>列别名同样可以使用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, salary <span class="operator">*</span> <span class="number">12</span> <span class="keyword">AS</span> &quot;annual salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &quot;annual salary&quot; <span class="keyword">DESC</span>;  # 按照别名 annual salary 降序</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995074331.png" alt=""></p><h2 id="1-2-按照多列排序">1.2 按照多列排序</h2><p>根据多个列进行数据行排序，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列<span class="number">2</span>, 列<span class="number">4</span>;</span><br></pre></td></tr></table></figure><ul><li>排序依据列可以不在展示列中：即 <code>ORDER BY</code> 后的列可以不是 <code>SELECT</code> 后的列，只要是表中的列即可</li><li>多列排序，按照从左到右的方式排序 <code>ORDER BY</code> 后面的列，只有前面列存在相同元素时，才会参考后一列进行排序：即先按照 <code>列2</code> 排，如果 <code>列2</code> 各异，则完全按照 <code>列2</code> 拍；否则参考 <code>列4</code></li></ul><p>例如：按照部门降序，聘请日期升序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_id, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>, hire_date <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995708094.png" alt=""></p><h1>2 分页</h1><p>返回特定范围（行）的数据，以免占据页面过多</p><blockquote><p>也可以使用图形化工具，例如 <code>jetBrains</code> 的 <a href="https://www.jetbrains.com.cn/datagrip/"><code>DataGrip</code> 产品</a>。</p></blockquote><p>MySQL 中使用 <code>LIMIT</code> 实现分页，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT 起始行数, 行数  <span class="comment">-- 从 0 开始计数，起始行数可省略，默认为 0</span></span><br></pre></td></tr></table></figure><ul><li><code>LIMIT</code> 语句放在 <code>SELECT</code> 语句结尾</li><li>不同数据库管理系统 DBMS 的语句存在差异</li></ul><p>例如：选取前 5 行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">5</span>;  <span class="comment">-- 前 5 行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">0</span>, <span class="number">5</span>;  <span class="comment">-- [0, 1, 2, 3, 4] 从第 0 行开始往后查 5 行</span></span><br></pre></td></tr></table></figure><p>例如：选取第 11 到第 15 行数据（从 0 计数则是：从第 10 行到第 14 行）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">10</span>, <span class="number">10</span>;  <span class="comment">-- [10, 11, 12, 13, 14] 从 0 计数: 从第 10 行到第 14 行</span></span><br></pre></td></tr></table></figure><blockquote><p><code>MySQL 8.0</code>中可以使用 <code>LIMIT 3 OFFSET 4</code> 等价于 <code>LIMIT 4, 3</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为搭建神经网络创建虚拟环境全流程：下载 Python，利用 conda 创建虚拟环境，激活与安装 Pytorch</title>
      <link href="/posts/7d8f6610.html"/>
      <url>/posts/7d8f6610.html</url>
      
        <content type="html"><![CDATA[<h1>1 下载 Python</h1><blockquote><p>注：这一部分已不需要，可以直接使用 conda 下载</p></blockquote><p>MacOS 和 Windows 下载 Python 全流程见 <a href="https://blog.iskage.online/posts/7d46a7ea.html">全平台下载安装 Python 全流程指南：Windows &amp; MacOS</a></p><h1>2 Conda 下载</h1><p>利用 Conda 更好的管理开发环境，全流程见 <a href="https://blog.iskage.online/posts/2c3265b7.html">Conda 创建虚拟环境全流程</a></p><h1>3 创建环境并激活</h1><h2 id="3-1-首先创建环境">3.1 首先创建环境</h2><p>例如我们创建一个环境名为 <code>pytorch</code> 的虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pytorch</span><br></pre></td></tr></table></figure><h2 id="3-2-激活环境">3.2 激活环境</h2><p>而后激活这个环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure><p>激活后会在命令后/终端前显示环境名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(pytorch) Username/@xx %   <span class="comment"># macOS</span></span><br><span class="line">(pytorch) PC C:\xx\xx&gt;     <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h2 id="3-3-下载-python-和-pip">3.3 下载 python 和 pip</h2><p>在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pip</span><br></pre></td></tr></table></figure><blockquote><p>注：需要先激活环境。此时 conda 会自动为该环境配置 python 和 pip，为之后使用 pip 下载 torch 作准备。</p></blockquote><h1>4 官网查询下载 Pytorch 命令</h1><p>去往 <a href="https://pytorch.org/">Pytorch 官网</a>，向下滑动找到【Install PyTorch】</p><h2 id="4-1-macOS-安装指令">4.1 macOS 安装指令</h2><p>根据实际情况，选择对应配置，复制代码后在【终端】运行即可。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986071255.png" alt=""></p><ul><li>一定要在【步骤三：创建环境并激活】后执行</li><li>目前 Pytorch 官方已不提供 conda 下载方式，但 conda 的环境管理仍然有效，采用 pip 安装同样可行</li></ul><h2 id="4-2-Windows-安装指令">4.2 Windows 安装指令</h2><p>根据实际情况，选择对应配置，复制代码后在【PowerShell】运行即可。</p><h3 id="4-2-1-安装在-CPU">4.2.1 安装在 CPU</h3><p>选择 CPU 后复制命令</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986244205.png" alt=""></p><h3 id="4-2-2-安装在-GPU">4.2.2 安装在 GPU</h3><p>在命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>则会返回英伟达显卡的 <code>CUDA</code> 版本，根据版本号选择</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/22a53eeea951769ba92e14a70427c89a_720.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986564831.png" alt=""></p><h1>5 删除环境</h1><p>因为是虚拟环境，删除环境不会对其他配置造成影响，在终端或命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全平台下载安装 Python 全流程指南：Windows &amp; MacOS</title>
      <link href="/posts/7d46a7ea.html"/>
      <url>/posts/7d46a7ea.html</url>
      
        <content type="html"><![CDATA[<h1>1 MacOS 系统安装 Python</h1><p>一般而言，macOS 系统默认安装了 Python，可通过打开【终端】/【Terminal】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>此时会显示 <code>Python 3.12.8</code> 则说明已经配置且加入了环境变量。</p><p>如果没有，则需要前往官网下载。</p><h2 id="1-1-官网下载">1.1 官网下载</h2><ul><li>打开 <a href="https://www.python.org/">Python 官方网站</a></li><li>点击顶部菜单<a href="https://www.python.org/downloads/">Downloads</a> 选择 <a href="https://www.python.org/downloads/macos/">macOS</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738982544046.png" alt=""></p><ul><li>向下滑动，选择版本并下载【推荐】选择 Stable Releases，更为稳定</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738982629264.png" alt=""></p><blockquote><p>注：macOS 的安装程序以 <code>.pkg</code> 为后缀，例如如果选择图中版本，下载的文件名应该为 <code>python-3.12.9-macos11.pkg</code></p></blockquote><p>或者直接点击我的 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/python-3.12.9-macos11.pkg">链接</a> 下载版本为 <code>Python 3.12.9</code></p><h2 id="1-2-运行安装包">1.2 运行安装包</h2><ul><li><p>双击下载的 <code>.pkg</code> 文件（如 <code>python-3.12.9-macos11.pkg</code>）</p></li><li><p>macOS 的下载不需要配置，会自动推荐到环境变量，故一直默认即可</p></li></ul><h2 id="1-3-验证是否安装成功">1.3 验证是否安装成功</h2><p>打开【终端】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>此时会显示 <code>Python 3.12.9</code> 则说明成功</p><h1>2 Windows 系统安装 Python</h1><h2 id="2-1-官网下载">2.1 官网下载</h2><ul><li>打开 <a href="https://www.python.org/">Python 官方网站</a></li><li>点击顶部菜单<a href="https://www.python.org/downloads/">Downloads</a> 选择 <a href="https://www.python.org/downloads/windows/">Windows</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738983514762.png" alt=""></p><ul><li>向下滑动，选择版本并下载【推荐】选择 Stable Releases，更为稳定</li></ul><p>注意查看自己的电脑配置，选择合适的安装包，可以前往 <a href="https://support.microsoft.com/zh-cn/topic/%E7%A1%AE%E5%AE%9A%E6%82%A8%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E6%98%AF-32-%E4%BD%8D%E7%89%88%E6%9C%AC%E8%BF%98%E6%98%AF-64-%E4%BD%8D%E7%89%88%E6%9C%AC%E7%9A%84-windows-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1b03ca69-ac5e-4b04-827b-c0c47145944b">微软 Microsoft 官网</a>查询</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738983582659.png" alt=""></p><blockquote><p>Windows 的安装包为可执行文件，以 <code>.exe</code> 为文件后缀</p></blockquote><p>或者直接点击我的 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/python-3.12.9-amd64.exe">链接</a> 下载，版本为 <code>Python 3.12.9</code> 架构为 <code>amd64</code></p><h2 id="2-1-运行安装包">2.1 运行安装包</h2><ul><li>双击下载的 <code>.exe</code> 文件（如 <code>python-3.12.9-amd64.exe</code>）</li></ul><blockquote><p>因为我已经下载安装了 <code>Python 3.12</code> 故后文使用 <code>Python 3.13</code> 展示安装和配置流程，二者的安装和配置没有区别</p></blockquote><ul><li>【注意】一定要勾选 【Add python.exe to PATH】以增加环境变量</li><li>可以直接点击【Install Now】</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/9b2fd9c56f7b91c26f2c6b4c7a82472c_720.png" alt=""></p><blockquote><p>如果需要配置其他可选【Customize installation】：可以配置安装路径，选择性安装一些产品。</p></blockquote><h2 id="2-3-验证是否安装成功">2.3 验证是否安装成功</h2><p>打开【命令提示符 CMD】或 【PowerShell】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><h1>3 在终端使用 Python</h1><p>直接在【Terminal (MacOS)】和【PowerShell (Windows)】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br></pre></td></tr></table></figure><p>即可进入终端的 <code>Python</code> 编程环境</p><h1>4 创建虚拟环境</h1><p>利用 <code>Conda</code> 创建虚拟环境，可以更好的管理一些包。详细教程见 <a href="https://blog.iskage.online/posts/2c3265b7.html">Conda 创建虚拟环境全流程</a></p><p>或者直接使用 conda 下载，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名</span><br><span class="line">conda activate 环境名</span><br><span class="line">conda install pip</span><br></pre></td></tr></table></figure><p>其中 <code>conda install pip</code> 会自动下载 python 和 pip</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟环境 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架 Pytorch 深入学习（1）：Tensor 张量数据结构</title>
      <link href="/posts/652f5539.html"/>
      <url>/posts/652f5539.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（1）Tensor 张量数据结构</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>参考 <a href="https://www.deepseek.com/">DeepSeek</a> 整理补充</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>首先，检查 <code>Pytorch</code> 是否安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.2</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><p><code>Tensor</code> 是可以理解为一个类似 <code>Numpy</code> 中的高维数组。</p><h2 id="1-创建">1 创建</h2><ul><li><code>torch.Tensor()</code> 分配空间</li></ul><p>生成维度2x3的张量，并未赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.Tensor(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[0., 0., 0.],</span></span><br><span class="line"><span class="comment">#         [0., 0., 0.]])</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.tensor()</code> 需要具体的值进行创建</li></ul><p>输入具体的值，直接生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># dtype 指定类型</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[1., 2., 3.],</span></span><br><span class="line"><span class="comment">#         [4., 5., 6.]])</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.rand()</code> 使用正态分布随机初始化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">z = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[0.1587, 0.9499, 0.1939],</span></span><br><span class="line"><span class="comment">#         [0.9741, 0.9309, 0.7463]])</span></span><br></pre></td></tr></table></figure><h2 id="2-查看形状">2 查看形状</h2><ul><li>调用方法 <code>.shape</code> 或 <code>.size()</code>查看张量形状/维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 3])</span></span><br></pre></td></tr></table></figure><ul><li>产看具体某个维度数（例如列数）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.size()[<span class="number">1</span>])  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x.size(<span class="number">1</span>))   <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x.shape[<span class="number">1</span>])  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="3-加法">3 加法</h2><ul><li>使用<code>+</code> 作加法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 或者 torch.ones(2, 3)</span></span><br><span class="line">y = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[2., 3., 4.],</span></span><br><span class="line"><span class="comment">#         [5., 6., 7.]])</span></span><br></pre></td></tr></table></figure><blockquote><p>这种加法不改变 <code>x, y</code> 的值</p></blockquote><ul><li>使用 <code>torch.add(x, y)</code> 作加法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z = torch.Tensor(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 先分配好一个空间，不赋值</span></span><br><span class="line">torch.add(x, y, out=z)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[2., 3., 4.],</span></span><br><span class="line"><span class="comment">#         [5., 6., 7.]])</span></span><br></pre></td></tr></table></figure><blockquote><p>这种加法不改变 <code>x, y</code> 的值</p></blockquote><ul><li>调用方法 <code>.add()</code> 和 <code>.add_()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(y.add(x))  <span class="comment"># y 不变</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y.add_(x)) <span class="comment"># y 变为 x + y</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><blockquote><p>增加了 <code>_</code> 的方法会进行替换操作</p></blockquote><h2 id="4-索引">4 索引</h2><p>Tensor 的索引操作与 NumPy 类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引</span></span><br><span class="line">x = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># tensor([[0.3479, 0.8074, 0.2170],</span></span><br><span class="line"><span class="comment">#         [0.3419, 0.9281, 0.1364]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x[:, <span class="number">1</span>])  <span class="comment"># tensor([0.8074, 0.9281]) # 行全取，列取第一列（从0计数）</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>, :])  <span class="comment"># tensor([0.3419, 0.9281, 0.1364])  # 列全取，行取第一行（从0计数）</span></span><br></pre></td></tr></table></figure><h2 id="5-和-Numpy-的转换">5 和 <code>Numpy</code> 的转换</h2><ul><li><code>torch.Tensor -&gt; numpy.ndarray</code></li></ul><p>使用 <code>.numpy()</code> 方法从Tensor变为numpy.ndarray</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy 相互转换</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">y = x.numpy()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># tensor([[1., 1., 1.]])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))<span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))  <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray -&gt; torch.Tensor</code></li></ul><p>使用 <code>torch.from_numpy()</code> 函数从numpy.ndarray变为Tensor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">y = np.ones((<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">x = torch.from_numpy(y)</span><br><span class="line"><span class="built_in">print</span>(y)        <span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))  <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># tensor([[1., 1., 1.]], dtype=torch.float64)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>共享内存，通过上面方式转换后，<code>x, y</code> 是共享内存的，tenor改变，numpy.ndarray也改变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># tensor([[1., 1., 1.]])</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line">temp = torch.rand(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">x.add_(temp)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># tensor([[1.5567, 1.5514, 1.0607]])</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># [[1.5567319 1.5514015 1.0607271]]</span></span><br></pre></td></tr></table></figure><h2 id="6-零维度张量-标量">6 零维度张量/标量</h2><p>Tensor 数据类型中维度为 <code>0</code> 称为标量（注意，虽然维度为0，但仍然不是 <code>int</code> 或是 <code>float</code> 这些一般 Python 数据类型）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scaler = torch.tensor(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(scaler)          <span class="comment"># tensor(9)</span></span><br><span class="line"><span class="built_in">print</span>(scaler.shape)   <span class="comment"># torch.Size([])</span></span><br></pre></td></tr></table></figure><p>如果想获得一般 Python 数据类型，可以使用方法 <code>.item()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(scaler.item())        <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(scaler.item()))   <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt; 变为 int</span></span><br></pre></td></tr></table></figure><blockquote><p>注意区分 0 维度标量和 1 维度张量</p><p>但是针对 1 维度张量，也可以使用 <code>.item()</code> 方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector = torch.tensor([<span class="number">9</span>])</span><br><span class="line">scaler = torch.tensor(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(vector)  <span class="comment"># tensor([9])</span></span><br><span class="line"><span class="built_in">print</span>(vector.shape)  <span class="comment"># torch.Size([1])</span></span><br><span class="line"><span class="built_in">print</span>(scaler)        <span class="comment"># tensor(9)</span></span><br><span class="line"><span class="built_in">print</span>(scaler.shape)  <span class="comment"># torch.Size([])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 1 维度张量，也可以使用 `.item()` 方法 </span></span><br><span class="line"><span class="built_in">print</span>(vector.item()) <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(vector.item()))  <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt; 变为 int</span></span><br></pre></td></tr></table></figure><h2 id="7-张量间的复制-detach-clone">7 张量间的复制 <code>.detach()</code> <code>.clone()</code></h2><ul><li><code>.clone()</code> 不共享内存，二者互不影响</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">old = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">new = old.clone()  <span class="comment"># 不共享内存，二者互不影响</span></span><br><span class="line">new[<span class="number">0</span>] = <span class="number">233</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(old)</span><br><span class="line"><span class="comment"># tensor([[1, 2, 3],</span></span><br><span class="line"><span class="comment">#          [4, 5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br></pre></td></tr></table></figure><ul><li><code>.detach()</code> 共享内存，一者变则全变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">old = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">new = old.detach() <span class="comment"># 共享内存，一者变则全变</span></span><br><span class="line">new[<span class="number">0</span>] = <span class="number">233</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(old)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br></pre></td></tr></table></figure><h2 id="8-维度转变">8 维度转变</h2><p>PyTorch提供了许多维度变换方式：<code>view, reshape, permute, transpose</code></p><h3 id="8-1-维度交换-permute-transpose">8.1 维度交换 <code>permute</code> <code> transpose</code></h3><p>使用 <code>permute</code> <code> transpose</code> 对张量维度进行交换，例如维度为 2x3x4x5 ，希望变为 3x2x5x4，可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment"># .randn 标准正态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># permute</span></span><br><span class="line">new1 = previous.permute((<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>))  <span class="comment"># 填入一个元组，元组里的每个数字对应原来张量的维度序号，新的维度为(第1维度,第0维度,第3维度,第2维度)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># transpose</span></span><br><span class="line">new2 = previous.transpose(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># 第0维度和第1维度交换</span></span><br><span class="line">new2 = new2.transpose(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 第2维度和第3维度交换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new1.shape)  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br><span class="line"><span class="built_in">print</span>(new2.shape)  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br></pre></td></tr></table></figure><h3 id="8-2-维度变换-view-reshape">8.2 维度变换 <code>view</code> <code>reshape</code></h3><ul><li><code>reshape</code> 无要求，可直接使用</li><li><code>view</code>只能用于内存中连续存储的 Tensor</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意总维度要正确：例如 2x3x4x5 = 120 = 6x20</span></span><br><span class="line">new1 = previous.reshape(-<span class="number">1</span>, <span class="number">10</span>)  <span class="comment"># -1 表示自动计算维度，reshape 和 view 均可使用</span></span><br><span class="line">new2 = previous.view(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new1.shape)  <span class="comment"># torch.Size([12, 10])</span></span><br><span class="line"><span class="built_in">print</span>(new2.shape)  <span class="comment"># torch.Size([6, 20])</span></span><br></pre></td></tr></table></figure><blockquote><p>如果经过了 <code>permute</code> <code> transpose</code> 维度交换，则需要先连续化内存，使用 <code>.contiguous()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存不连续</span></span><br><span class="line">new = previous.permute((<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>))  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续化然后变换维度</span></span><br><span class="line">current = new.contiguous().view(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># current = new.reshape(6, 20)  # 或者直接 reshape</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(current.shape)  <span class="comment"># torch.Size([6, 20])</span></span><br></pre></td></tr></table></figure><h3 id="8-3-维度压缩、扩展、拼接-squeeze-unsqueeze-cat">8.3 维度压缩、扩展、拼接 <code>squeeze</code> <code>unsqueeze</code> <code>cat</code></h3><ul><li>维度压缩 <code>torch.squeeze()</code></li></ul><p><code>torch.squeeze(input, dim=None)</code> 用于移除张量中大小为1的维度。如果不指定 <code>dim</code>，则会移除所有大小为1的维度；如果指定了 <code>dim</code>，则只会移除该维度（如果该维度大小为1）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">x = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># torch.Size([1, 3, 1, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除所有大小为1的维度</span></span><br><span class="line">y = torch.squeeze(x)</span><br><span class="line"><span class="built_in">print</span>(y.shape)   <span class="comment"># torch.Size([3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只移除第2个维度（索引从0开始）</span></span><br><span class="line">z = torch.squeeze(x, dim=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)  <span class="comment"># torch.Size([1, 3, 2])</span></span><br></pre></td></tr></table></figure><ul><li>维度扩展 <code>torch.unsqueeze()</code></li></ul><p><code>torch.unsqueeze(input, dim)</code> 用于在指定的位置插入一个大小为1的维度。<code>dim</code> 参数指定了新维度插入的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">2</span>)    <span class="comment"># torch.Size([3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第0维插入一个大小为1的维度</span></span><br><span class="line">y = torch.unsqueeze(x, dim=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(y.shape)           <span class="comment"># torch.Size([1, 3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第1维插入一个大小为1的维度</span></span><br><span class="line">z = torch.unsqueeze(x, dim=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)           <span class="comment"># torch.Size([3, 1, 2])</span></span><br></pre></td></tr></table></figure><ul><li>维度拼接 <code>torch.cat()</code></li></ul><p><code>torch.cat(tensors, dim=d)</code> 用于在指定的维度上拼接多个张量。所有张量在除了 <code>dim=d</code> 维度之外的其它维度上<strong>必须具有相同的形状</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">1</span>, <span class="number">4</span>)       <span class="comment"># dim=1 维度均为 3 故可以在dim=0上拼接</span></span><br><span class="line">y = torch.randn(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第0维上拼接</span></span><br><span class="line">z = torch.cat((x, y), dim=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)           <span class="comment"># torch.Size([3, 4])  # 1 + 2 = 3</span></span><br></pre></td></tr></table></figure><h2 id="9-GPU-加速">9 GPU 加速</h2><p>利用 GPU 的并行计算能力能加速模型的计算。Pytorch提供了2种将tensor推至GPU的方法。</p><ul><li><code>.cuda()</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x.cuda()  <span class="comment"># 将 Tensor 转移到默认的 GPU</span></span><br></pre></td></tr></table></figure><ul><li><code>.to(device)</code> 方法【推荐】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">x = x.to(device)  <span class="comment"># 将 Tensor 转移到指定的设备，如果失败则继续在CPU计算</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> torch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(torch.cuda.is_available)</span><br><span class="line">&lt;function is_available at <span class="number">0x0000024B63F50720</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>device</span><br><span class="line">device(<span class="built_in">type</span>=<span class="string">&#x27;cuda&#x27;</span>, index=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.to(device)</span><br><span class="line">tensor([[-<span class="number">0.1888</span>,  <span class="number">0.0827</span>, -<span class="number">1.2929</span>],</span><br><span class="line">        [ <span class="number">2.1295</span>,  <span class="number">1.6174</span>, -<span class="number">1.4917</span>]], device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 Pytorch 完整教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（3）运算符与 SQL 的正则表达式</title>
      <link href="/posts/a7d82995.html"/>
      <url>/posts/a7d82995.html</url>
      
        <content type="html"><![CDATA[<h1>运算符与 SQL 的正则表达式</h1><h2 id="本文笔记根据【b站-尚硅谷-宋红康-MySQL-课程】整理。笔记和代码存储在我的-GitHub-库中-github-com-isKage-sql-notes。">本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</h2><h2 id="1-算术运算符">1 算术运算符</h2><p>包括：<code>+, -, *, /, %</code> 加、减、乘、除、取模运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a <span class="operator">+</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">-</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">*</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">/</span> b; <span class="comment">-- or SELECT a DIV b;</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">%</span> b; <span class="comment">-- or SELECT a MOD b;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-加减运算">1.1 加减运算 <code>+ -</code></h3><ul><li><p><code>int + int = int</code> <code>float + float = float</code> 但 <code>int + float = float</code></p></li><li><p>只针对数值型计算，若为字符串，则先转化，若转换失败，则按照 <code>0</code> 计算</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">1.2</span>, <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="number">4</span>, <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">1.2</span> <span class="operator">|</span> <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="number">4</span> <span class="operator">|</span> <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;4&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="number">3</span> <span class="operator">|</span> <span class="comment">-- &#x27;a&#x27; 转换失败，按照 0 计算</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">101.2</span> <span class="operator">|</span>       <span class="number">7</span> <span class="operator">|</span>         <span class="number">7</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-2-乘除运算">1.2 乘除运算 <code>* /</code></h3><ul><li><code>int * int = int</code> <code>int * float = float</code> 而 <code>/</code> 除法最后一定是 <code>float</code> 类型结果</li><li><code>number / 0 = NULL</code> 除以 <code>0</code> 则为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1</span>, <span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span>, <span class="number">100</span> <span class="operator">/</span> <span class="number">1</span>, <span class="number">100</span> DIV <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">/</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">100</span> DIV <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span>     <span class="number">100.0</span> <span class="operator">|</span> <span class="number">100.0000</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-3-取模运算">1.3 取模运算 <code>%</code></h3><ul><li><code>A % B</code> 表示 <code>A</code> 除以 <code>B</code> 的余数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">20</span>, <span class="number">100</span> <span class="operator">%</span> <span class="number">99</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">20</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="2-比较运算符">2 比较运算符</h2><p>比较结果为<strong>真</strong>返回<code>1</code></p><p>比较结果为<strong>假</strong>返回<code>0</code></p><p><strong>其他情况</strong>返回 <code>NULL</code></p><p>包括：<code>=, &lt;=&gt;, &lt;&gt;(!=), &lt;, &lt;=, &gt;, &gt;=</code> 等号、安全等号、不等号、小于、小于等于、大于、大于等于</p><h3 id="2-1-等号比较">2.1 等号比较 <code>=</code></h3><p>判断等号两边的值、字符串或表达式是否相等，如果相等则返回 <code>1</code>，不相等则返回 <code>0</code></p><ul><li>字符串与字符串比较，值与值比较</li><li>若为字符串与值比较，则将字符串转换为值 <code>int = str -&gt; int = int(str)</code> 注意：转换失败则为 <code>0</code></li><li>有一个为 <code>NULL</code> 则返回 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span>, <span class="number">2</span> <span class="operator">=</span> <span class="number">3</span>, <span class="number">2</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bc&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bc&#x27;</span>, <span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> <span class="comment">-- &#x27;a&#x27; 转换失败则为 0</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-2-安全等号">2.2 安全等号 <code>&lt;=&gt;</code></h3><p><code>&lt;=&gt;</code> 会把 <code>NULL</code> 当作一个特殊的元素，参与比较，不再返回 <code>NULL</code> 。其他返回结果与等于运算符相同。</p><ul><li>安全等号 <code>&lt;=&gt;</code> 两边的操作数的值都为<code>NULL</code> 时，返回的结果为 <code>1</code> 。</li><li>安全等号 <code>&lt;=&gt;</code> 一边为 <code>NULL</code> ，一边不为 <code>NULL</code> 时，返回 <code>0</code> 。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-3-不等于比较-or">2.3 不等于比较 <code>!= or &lt;&gt;</code></h3><p>判断等号两边的值、字符串或表达式是否不相等，如果不相等则返回 <code>1</code>，相等则返回 <code>0</code></p><ul><li>与等号比较类似，面对 <code>NULL</code> 无论比较结果如何，最后均返回 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">2</span>, <span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span>, <span class="number">2</span> <span class="operator">!=</span> <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bc&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;bc&#x27;</span>, <span class="number">0</span> <span class="operator">!=</span><span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="string">&#x27;2&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">!=</span><span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-4-大于小于">2.4 大于小于 <code>&gt;, &lt;, &gt;=, &lt;=</code></h3><p>性质和等于 <code>=</code>，不等于 <code>!= or &lt;&gt;</code> 相同</p><ul><li>比较结果为<strong>真</strong>返回<code>1</code> 比较结果为<strong>假</strong>返回<code>0</code> <strong>其他情况</strong>返回 <code>NULL</code></li><li>面对 <code>NULL</code> 无论比较结果如何，最后均返回 <code>NULL</code></li></ul><h2 id="3-其他类型运算符">3 其他类型运算符</h2><h3 id="3-1-空运算符-ISNULL-IS-NULL">3.1 空运算符 <code>ISNULL, IS NULL</code></h3><p>是否为 <code>NULL</code> ，如果为 <code>NULL</code> 则返回 <code>1</code> ，否则返回 <code>0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>, ISNULL(<span class="keyword">NULL</span>), ISNULL(<span class="string">&#x27;a&#x27;</span>), <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span> ISNULL(<span class="keyword">NULL</span>) <span class="operator">|</span> ISNULL(<span class="string">&#x27;a&#x27;</span>) <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>结合之前的安全等号，从表中寻找 <code>NULL</code> 有如下方法 （注：等号，不等号，大小于符号无法处理空值问题）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> ISNULL(commission_pct);</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">=</span> <span class="keyword">NULL</span>; <span class="comment">-- 查询失败</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738900575560.png" alt=""></p><h3 id="3-2-非空运算符-IS-NOT-NULL">3.2 非空运算符 <code>IS NOT NULL</code></h3><p>是否为 <code>NULL</code> ，如果为 <code>NULL</code> 则返回 <code>0</code> ，否则返回 <code>1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>, <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>, <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-最小值运算符-LEAST">3.3 最小值运算符 <code>LEAST()</code></h3><p>返回 <code>LEAST(a1, a2, ..., ai, ..., an)</code> 中的最小值</p><ul><li>当 <code>ai</code> 是 <code>int</code> 或者 <code>float</code> 时，<code>LEAST</code> 将返回其中最小的值</li><li>当 <code>ai</code> 为 <code>str</code> 时，返回字母表中顺序最靠前的字符</li><li>当列表中有 <code>NULL</code> 时，返回值为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> LEAST(<span class="number">1</span>, <span class="number">2</span>), LEAST(<span class="number">1.2</span>, <span class="number">3</span>), LEAST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>), LEAST(<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> LEAST(<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> LEAST(<span class="number">1.2</span>, <span class="number">3</span>) <span class="operator">|</span> LEAST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>) <span class="operator">|</span> LEAST(<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>           <span class="number">1.2</span> <span class="operator">|</span> ac               <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-4-最大值运算符-GREATEST">3.4 最大值运算符 <code>GREATEST()</code></h3><p>返回 <code>GREATEST(a1, a2, ..., ai, ..., an)</code> 中的最大值</p><ul><li>当 <code>ai</code> 是 <code>int</code> 或者 <code>float</code> 时，<code>GREATEST</code> 将返回其中最大的值</li><li>当 <code>ai</code> 为 <code>str</code> 时，返回字母表中顺序最靠后的字符</li><li>当列表中有 <code>NULL</code> 时，返回值为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> GREATEST(<span class="number">1</span>, <span class="number">2</span>), GREATEST(<span class="number">1.2</span>, <span class="number">3</span>), GREATEST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>), GREATEST(<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> GREATEST(<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> GREATEST(<span class="number">1.2</span>, <span class="number">3</span>) <span class="operator">|</span> GREATEST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>) <span class="operator">|</span> GREATEST(<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span>              <span class="number">2</span> <span class="operator">|</span>              <span class="number">3.0</span> <span class="operator">|</span> b                   <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-5-判断是否区间中的值-BETWEEN-AND">3.5 判断是否区间中的值 <code>BETWEEN ... AND ...</code></h3><p>寻找位于 <code>[a, b]</code> 中与否，即大于等于 <code>a</code> 小于等于 <code>b</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">BETWEEN</span> a <span class="keyword">AND</span> b;</span><br></pre></td></tr></table></figure><p>例如，是则为 <code>1</code> 否则返回 <code>0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">5</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span>, <span class="number">0.4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">6</span>, <span class="string">&#x27;x&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">0.4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">6</span> <span class="operator">|</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;z&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span>                   <span class="number">0</span> <span class="operator">|</span>                       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>完整的查表运用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">2500</span> <span class="keyword">AND</span> <span class="number">3500</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738901321018.png" alt=""></p><h3 id="3-6-属于运算符-IN">3.6 属于运算符 <code>IN</code></h3><p>判断元素是否属于列表中，类似的，只要存在 <code>NULL</code> 则返回值为 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>                 <span class="number">1</span> <span class="operator">|</span>            <span class="keyword">NULL</span> <span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-7-不属于运算符-NOT-IN">3.7 不属于运算符 <code>NOT IN</code></h3><p>判断元素是否不属于列表，类似的，只要存在 <code>NULL</code> 则返回值为 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>), <span class="keyword">NULL</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-8-模糊匹配-LIKE">3.8 模糊匹配 <code>LIKE</code></h3><p>模糊匹配<u>字符串</u>，如果满足条件则返回 <code>1</code> ，否则返回 <code>0</code> 。同样，遇 <code>NULL</code> 则 <code>NULL</code></p><ul><li>通配符：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;%&#x27;</span> <span class="comment">-- 匹配 0 个或多个字符。</span></span><br><span class="line"><span class="string">&#x27;_&#x27;</span> <span class="comment">-- 只能匹配一个字符。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;  <span class="comment">-- 匹配 first_name 字段以 S 开头的字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738903197390.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;  <span class="comment">-- 匹配 last_name 字段形如 &#x27;一个字母 + o&#x27; 开头的字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738903166457.png" alt=""></p><h3 id="3-9-利用-ESCAPE-处理特殊字符">3.9 利用 <code>ESCAPE</code> 处理特殊字符</h3><p>当需要查询的元素中包含特殊字符，如 <code>%, _, $</code> 等。可以使用 <code>\</code> 或其他字符（除 <code>\</code> 其他字符需要 <code>ESCAPE</code> 指明为转义字符）处理。</p><ul><li>例如：我们需要查询形如 <code>增长50%左右</code> ，即匹配以任意字符开头，接着是 <code>50%</code>，最后是任意字符的字符串。所以可以采取 <code>'%50\%%'</code> 或 <code>'%50$%%' ESCAPE '$'</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;IT$_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;$&#x27;</span>;  <span class="comment">-- 指定 &#x27;$&#x27; 为转义字符，&#x27;$&#x27; 后的 &#x27;_&#x27; 为普通字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;IT@_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;@&#x27;</span>;  <span class="comment">-- 指定 &#x27;@&#x27; 为转义字符，&#x27;@&#x27; 后的 &#x27;_&#x27; 为普通字符</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> job_id  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> IT_PROG <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-逻辑运算符">4 逻辑运算符</h2><p>逻辑运算符的返回结果为 <code>1, 0, NULL</code></p><p>逻辑运算符大多符合直觉，并不复杂</p><h3 id="4-1-非-运算符-NOT-或">4.1 非 运算符 <code>NOT</code> 或 <code>!</code></h3><ul><li><code>!0 -&gt; 1</code> 值为0时返回1</li><li><code>!非0 -&gt; 0</code> 值为非0值时返回0</li><li><code>!NULL -&gt; NULL</code> 值为NULL时，返回NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NOT</span> <span class="number">1</span>, <span class="keyword">NOT</span> <span class="number">0</span>, <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>), <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span>, <span class="keyword">NOT NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>) <span class="operator">|</span> <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-2-与-运算符-AND-或">4.2 与 运算符 <code>AND</code> 或 <code>&amp;&amp;</code></h3><ul><li><p><code>非0非NULL &amp;&amp; 非0非NULL -&gt; 1</code> 所有值均为非0值，并且都不为NULL时，返回1</p></li><li><p><code>0 &amp;&amp; ... -&gt; 0</code>一个值或者多个值为0时则返回0</p></li><li><p><code>NULL &amp;&amp; ... -&gt; NULL</code>否则返回NULL</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>例如：查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;=</span><span class="number">10000</span></span><br><span class="line">  <span class="keyword">AND</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%MAN%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738906355775.png" alt=""></p><h3 id="4-3-或-运算符-OR-或">4.3 或 运算符 <code>OR</code> 或 <code>||</code></h3><ul><li><code>非0非NULL || 非NULL -&gt; 1</code> 值都不为NULL，并且任何一个值为非0值时，则返回1</li><li><code>0 || 0 -&gt; 0</code> 否则返回0；</li><li><code>非0非NULL || NULL -&gt; 1</code> 当一个值为NULL，并且另一个值为非0值时，返回1，否则为NULL</li><li><code>NULL || NULL</code> 当两个值都为NULL时，返回NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">3</span>, <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span>, <span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">NULL</span>, <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>         <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">2</span> warnings (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>AND</code> 的优先级高于 <code>OR</code> ，先处理与逻辑，再考虑或逻辑</p></blockquote><h3 id="4-4-异或-运算符-XOR">4.4 异或 运算符 <code>XOR</code></h3><ul><li>存在 <code>NULL</code>时，则返回 <code>NULL</code></li><li>都<code>非0非NULL</code>，则返回 <code>0</code></li><li><code>0 XOR 0 -&gt; 0</code> 都 <code>0</code> 则返回 <code>0</code></li><li>一个为 <code>0</code>，另一个 <code>非0非NULL</code> ，则返回 <code>1</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> XOR <span class="number">1</span>, <span class="number">2</span> XOR <span class="number">3</span>, <span class="number">0</span> XOR <span class="number">0</span>, <span class="number">0</span> XOR <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> XOR <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span> XOR <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">0</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="5-位运算符">5 位运算符</h2><p>位运算符会先将操作数变成<strong>二进制数</strong>，然后进行位运算，最后将计算结果从二进制变回<strong>十进制数</strong></p><p>位运算在所有语言中均类似，不过多介绍。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&amp;</span> b;   <span class="comment">-- 按位与</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">|</span> b;   <span class="comment">-- 按位或</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">^</span> b;   <span class="comment">-- 按位异或</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">~</span> a;     <span class="comment">-- 按位取反</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&gt;&gt;</span> <span class="number">2</span>;  <span class="comment">-- 按位右移</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&lt;&lt;</span> <span class="number">2</span>;  <span class="comment">-- 按位左移</span></span><br></pre></td></tr></table></figure><h2 id="6-优先级">6 优先级</h2><p>优先级越高，越先运算</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738911612091.png" alt="优先级由高到低 1-&gt;8"></p><blockquote><p>建议使用多个计算式，均使用 <code>()</code></p></blockquote><h2 id="7-正则表达式">7 正则表达式</h2><p>正则表达式在各种语言中均类似，下面介绍 <code>SQL</code> 语言中 <code>REGEXP</code> 的使用</p><h3 id="7-1-REGEXP-的使用">7.1 <code>REGEXP</code> 的使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 REGEXP 匹配条件(正则表达式);</span><br></pre></td></tr></table></figure><h3 id="7-2-常见正则表达式">7.2 常见正则表达式</h3><h4 id="7-2-1-匹配起始字符">7.2.1 匹配起始字符 <code>^</code></h4><ul><li>表达式 <code>^K</code> 以 <code>K</code> 起始的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^K&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912114205.png" alt=""></p><h4 id="7-2-2-匹配结尾字符">7.2.2 匹配结尾字符 <code>$</code></h4><ul><li>表达式 <code>t$</code> 以 <code>t</code> 结尾的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> first_name REGEXP <span class="string">&#x27;t$&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912256452.png" alt=""></p><h4 id="7-2-3-匹配单个字符">7.2.3 匹配单个字符 <code>.</code></h4><ul><li>表达式 <code>a.b</code> 包含字母 <code>a</code> 和 <code>b</code> 且 <code>a</code> 和 <code>b</code> 之间只有一个字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;a.b&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912435878.png" alt=""></p><h4 id="7-2-4-匹配多个字符">7.2.4 匹配多个字符 <code>+</code> <code>*</code></h4><ul><li>表达式 <code>ba+</code> 包含字符串 <code>...ba...</code> 其中 <code>+</code> 要求多个 <code>a</code></li></ul><blockquote><p><code>+</code> 要求 <strong>1次或多次</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^ba+&#x27;</span>; <span class="comment">-- 包含 ba... ^b 要求必须以 b 开头</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912757500.png" alt=""></p><ul><li>表达式 <code>b*an</code> 包含 <code>...b...an</code> 其中 <code>*</code> 要求多个 <code>b</code></li></ul><blockquote><p><code>*</code> 要求 <strong>0次或多次</strong></p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913126980.png" alt=""></p><h4 id="7-2-5-匹配特定字符串">7.2.5 匹配特定字符串 <code>''</code></h4><ul><li>表达式 <code>'un'</code> 包含 <code>un</code> 即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;un&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注：可以使用逻辑运算符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;un|am&#x27;</span>;  <span class="comment">-- 包含 un 或 am</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913338905.png" alt=""></p><h4 id="7-2-6-匹配集合中任一元素">7.2.6 匹配集合中任一元素 <code>[]</code></h4><ul><li>表达式 <code>[orz]</code> 包含<code>o</code> <code>r</code> <code>z</code> 任一一个即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;[orz]&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913543623.png" alt=""></p><h4 id="7-2-7-匹配完全由集合外的元素构成">7.2.7 匹配完全由集合外的元素构成 <code>[^]</code></h4><ul><li>表达式 <code>[^A-Y]</code> 表示只有当元素是有A-Y以外的元素构成时才被查询到。注意：大小写敏感。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email REGEXP <span class="string">&#x27;[^A-Y]&#x27;</span>; <span class="comment">-- 查询存在 小写字母 或 Z</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738914108381.png" alt=""></p><h4 id="7-2-8-使用-n-或者-n-m-来指定字符串连续出现的次数">7.2.8 使用 <code>&#123;n,&#125;</code> 或者 <code>&#123;n,m&#125;</code> 来指定字符串连续出现的次数</h4><ul><li>表达式 <code>a&#123;2,&#125;</code> 表示字母 <code>a</code> 连续出现至少2次</li><li>表达式 <code>a&#123;2,4&#125;</code> 表示字母 <code>a</code> 连续出现最少2次，最多不能超过4次</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary REGEXP <span class="string">&#x27;0&#123;2,3&#125;&#x27;</span>; <span class="comment">-- 连续 2-3 个 0</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738914541747.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（2）SELECT 语句</title>
      <link href="/posts/151eef00.html"/>
      <url>/posts/151eef00.html</url>
      
        <content type="html"><![CDATA[<h1>SELECT语句</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h2 id="1-SQL-语言">1 SQL 语言</h2><h3 id="1-1-书写规则">1.1 书写规则</h3><ul><li>一行或多行</li><li>以 <code>;</code> 分隔</li><li>字符串型 和 日期时间类型 的数据使用 <code>''</code> 表示</li><li>列的别名使用 <code>&quot;&quot;</code> 表示</li><li>建议关键字、函数名大写</li></ul><h3 id="1-2-注释">1.2 注释</h3><p>单行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注释文字 (MySQL特有)</span><br><span class="line"><span class="comment">-- 注释文字</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释文字 */</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数据导入-运行-sql文件">1.3 数据导入 (运行<code>.sql</code>文件)</h3><p>登陆 <code>MySQL</code> 后，输入指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source xx.sql  <span class="comment">-- 输入路径</span></span><br></pre></td></tr></table></figure><p>在学习语句前，先下载 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/docs/mydb.sql">mydb.sql 文件</a> ，之后使用数据导入的方式，运行 <code>mydb.sql</code> 创建数据库 <code>atguigudb</code> 以便后续操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source .<span class="operator">/</span>xxx<span class="operator">/</span>mydb.sql  <span class="comment">-- mac 电脑</span></span><br><span class="line">mysql<span class="operator">&gt;</span> source C:\Users\Username\xxx\mydb.sql  <span class="comment">-- windows 电脑</span></span><br></pre></td></tr></table></figure><blockquote><p>该文件来自 <a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a></p></blockquote><h2 id="2-基本-SELECT-语句">2 基本 SELECT 语句</h2><blockquote><p>首先先进入刚刚创建的数据库 <code>atguigudb</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> USE atguigudb;</span><br></pre></td></tr></table></figure><h3 id="2-1-SELECT-…-FROM-…">2.1 SELECT … FROM …</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 选择哪些列</span><br><span class="line"><span class="keyword">FROM</span> 从哪个表中选择</span><br></pre></td></tr></table></figure><ul><li>选择所有列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>选择表中特定的列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-2-列的别名">2.2 列的别名</h3><p>可以在列名后紧跟别名，也可以使用关键字 <code>AS</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id emp_id,</span><br><span class="line">    last_name <span class="keyword">AS</span> lname,</span><br><span class="line">    department_id &quot;dept_id&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738834180268.png" alt=""></p><p>也可以对整列进行计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id emp_id,</span><br><span class="line">    salary <span class="operator">*</span> <span class="number">12</span> &quot;annual salary&quot;  <span class="comment">-- 对 salary 整列计算</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-3-去除重复行">2.3 去除重复行</h3><p>默认情况不会去除重复行</p><p>在 <code>SELECT</code> 语句中增加关键字 <code>DISTINCT</code> 即可返回去除重复行后的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 12 rows</span></span><br></pre></td></tr></table></figure><blockquote><p>注：若 <code>DISTINCT</code> 后存在多个字段，只要两行之间有某个字段不同，则不认为重复</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 74 rows</span></span><br></pre></td></tr></table></figure><p>例如：对 <code>department_id, salary</code> 去重，虽然部门只有 <code>12</code> 个，但因为 <code>salary</code> 仍有一些不同，故认为并不重复。</p><h3 id="2-4-空值-null-参与计算">2.4 空值 <code>null</code> 参与计算</h3><p>遇到 <code>null</code> 值，运算的结果都为 <code>null</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, salary &quot;月工资&quot;, salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> commission_pct) <span class="operator">*</span> <span class="number">12</span> &quot;年工资&quot;, commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738834695370.png" alt=""></p><h3 id="2-5-着重号-解决关键字冲突">2.5 着重号 <code>``</code> 解决关键字冲突</h3><p>如果不得不使用关键字命名，则可以使用 <code>``</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">order</span>;</span><br><span class="line"><span class="comment">-- 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">order</span>`;</span><br><span class="line"><span class="comment">-- 正确</span></span><br></pre></td></tr></table></figure><h3 id="2-6-增加常值列">2.6 增加常值列</h3><p>增加一列命名为 <code>temp_const</code> （字符串用 <code>''</code>）用数字 <code>123</code> 填充</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">123</span> <span class="keyword">AS</span> <span class="string">&#x27;temp_const&#x27;</span>, employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738835171143.png" alt=""></p><h2 id="3-查询表结构">3 查询表结构</h2><p>使用 <code>DESCRIBE</code> 或 <code>DESC</code> 命令，查询表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field          <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date      <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary         <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-WHERE-过滤条件">4 <code>WHERE</code> 过滤条件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;King&#x27;</span> <span class="keyword">and</span> first_name <span class="operator">=</span> <span class="string">&#x27;Steven&#x27;</span>; <span class="comment">-- 过滤条件</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">90</span>; <span class="comment">-- 过滤条件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda 创建虚拟环境全流程</title>
      <link href="/posts/2c3265b7.html"/>
      <url>/posts/2c3265b7.html</url>
      
        <content type="html"><![CDATA[<h1>conda 创建虚拟环境全流程</h1><h2 id="1-下载-Miniconda">1 下载 Miniconda</h2><p>前往<a href="https://www.anaconda.com/download">官网 https://www.anaconda.com/download</a>下载，需要提交邮箱，验证下载。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738812320257.png" alt=""></p><p>提交成功后，滑至底部，选择 [Miniconda Installers] ，因为它相比 [Anaconda] 更为精简。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/976615dc8f3b26708fe5dd4d932c3b4d_720.png" alt=""></p><blockquote><p>注：需要提前下载 <code>Python</code> ，可前去 <a href="https://www.python.org/downloads/">Python 官网</a> 下载</p></blockquote><h2 id="2-安装-Miniconda">2 安装 Miniconda</h2><p>先点击 [Next] ，而后点击 [I Agree] ，而后选择 [All Users] ，这将为电脑的所有用户安装【推荐】，然后选择 [Next]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/91d3b0a80dc3f5f623c41fb89a44a4f7.png" alt=""></p><p>之后，选择安装路径，可以根据自己的情况来，但要记住安装路径，因为之后要添加【环境变量】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/12b49c1abc490ecd4ca7a9fe63c6436f_720.png" alt=""></p><p>之后，三项【全部勾选】后安装即可。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f6f67e69c09729405b20ae42d4cbf2c2_720.png" alt=""></p><h2 id="3-配置环境变量">3 配置环境变量</h2><p>右键 [此电脑] ，选择 [属性] ，打开 [系统] 窗口，点击 [高级系统设置]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4ba1d54ca6830505fae9a8bc721ad076_720.png" alt=""></p><p>打开 [系统属性] ，选择 [高级] 选项，点击 [环境变量] 在 [环境变量] 窗口，选择 [path] 点击 [编辑] ，在 [编辑环境变量] 窗口中，将 Miniconda 如图所示配置。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/bf764dcc6b2bd4b546cf7fa43530c07e.png" alt=""></p><p>配置【三个路径】一般默认情况为，根据之前安装时的具体路径选择</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\miniconda3</span><br><span class="line">C:\ProgramData\miniconda3\Scripts</span><br><span class="line">C:\ProgramData\miniconda3\Library\bin</span><br></pre></td></tr></table></figure><blockquote><p>注：一定要点击确认，进行保存</p></blockquote><h2 id="4-Conda-的使用">4 Conda 的使用</h2><p>首先检查是否已经成功配置，在命令行/终端中输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; conda -V</span><br><span class="line">conda <span class="number">24.11</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>如果输出版本号，则说明环境配置成功，可正常使用</p><h2 id="5-创建环境">5 创建环境</h2><p>创建虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名 python=<span class="number">3.12</span></span><br></pre></td></tr></table></figure><p><code>环境名</code> 可自己定义，<code>python=x.x</code> 可省略</p><blockquote><p>注：必须在全局已经下载安装了 <code>Python</code></p></blockquote><h2 id="6-激活环境">6 激活环境</h2><p>激活已经创建的虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>退出激活的虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h2 id="7-常见问题：Run-‘conda-init’-before-‘conda-activate’">7 常见问题：Run ‘conda init’ before ‘conda activate’</h2><p>当执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>时会遇到报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CondaError: Run <span class="string">&#x27;conda init&#x27;</span> before <span class="string">&#x27;conda activate&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>解决方法</p></blockquote><p>使用【管理员身份】打开【终端】，执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init</span><br></pre></td></tr></table></figure><p>然后回到重新执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><blockquote><p>如若仍然失败，则检查是否为下文的常见问题：无法加载文件 profile.ps1</p></blockquote><h2 id="8-常见问题：无法加载文件-profile-ps1">8 常见问题：无法加载文件 profile.ps1</h2><p>如果【已经使用管理员身份执行完】命令 <code>conda init</code> ，在重新打开终端时出现以下报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">. : 无法加载文件 C:\Users\Username\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=<span class="number">135170</span> 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:<span class="number">1</span> 字符: <span class="number">3</span></span><br><span class="line">+ . <span class="string">&#x27;C:\Users\15056\Documents\WindowsPowerShell\profile.ps1&#x27;</span></span><br><span class="line">+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>则可以【使用管理员身份】打开终端，执行以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Set</span>-ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure><p>而后关闭终端，重新打开</p><p>如果此时命令行前显示 <code>(base)</code> 则说明配置完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\...</span><br></pre></td></tr></table></figure><p>此时使用，即可成功激活虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><h2 id="9-其他-conda-命令">9 其他 conda 命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs  <span class="comment"># 显示所有环境信息</span></span><br><span class="line">conda remove -n 环境名 --<span class="built_in">all</span>  <span class="comment"># 根据环境名删除虚拟环境，删除环境和所有该环境里安装的包</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> conda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 自学笔记（1）如何安装 MySQL</title>
      <link href="/posts/8b09a768.html"/>
      <url>/posts/8b09a768.html</url>
      
        <content type="html"><![CDATA[<h1>详细教程：如何安装 MySQL</h1><p>MySQL 是数据库管理系统 DSMS 之一，本文介绍如何 <strong>下载、安装、配置、登陆、使用</strong> MySQL</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h2 id="1-下载">1 下载</h2><ol><li>前往官网：<a href="https://www.mysql.com">https://www.mysql.com</a></li><li>点击 - <a href="https://www.mysql.com/downloads/">Downloads</a></li></ol><p>点击 - <a href="https://dev.mysql.com/downloads/">MySQL Community (GPL) Downloads</a></p><p>社区版免费，且功能近似，适合学习使用。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738735763767.png" alt=""></p><ol start="3"><li>点击 - <a href="https://dev.mysql.com/downloads/mysql/">MySQL Community Server</a></li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738735912017.png" alt=""></p><ol start="4"><li>选择版本</li></ol><p>推荐使用 <code>8.0.x</code> 版本，相比旧版本 <code>5.0.x</code> 更为完善。点击 - <a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">Go to Download Page</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738736158523.png" alt=""></p><p>选择 <code>.msi</code> 的安装程序。选择图中的程序下载，配有图形化安装流程，支持离线安装。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738736235034.png" alt=""></p><blockquote><p>注：下载需要注册 ORACLE 甲骨文公司账户</p></blockquote><h2 id="2-安装">2 安装</h2><ol><li>找到文件 <code>mysql-installer-community-8.0.41.0.msi</code> ，双击进入安装。</li><li>在 [Choosing a Setup Type] - 窗口中选择 自定义安装 [Custom]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/6fb510a37d115e06be126a4e7bde91eb.png" alt=""></p><ol start="3"><li>在 [Select Products] 窗口中，选择产品。从左边选择想要安装的产品，而后显示在右边。</li></ol><blockquote><p>注：如想自定义安装路径，见后。</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/0dddb331420bff1755778e44b880e51b_720.png" alt=""></p><p>自定义安装路径，则需要选择产品，点击 [Advanced Options]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/ba921bd680af66e88223a0b7e3720285_720.png" alt=""></p><ol start="4"><li>在 [Installation] 窗口，点击 [Execute] 开始安装</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f32f54e134c74322b24711806c2996ce_720.png" alt=""></p><p>安装完成点击 [Next]</p><ol start="5"><li>在 [Product Configuration] 窗口，开始配置，点击 [Next]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/29078465616e9aff29a15b4119d4f07a_720.png" alt=""></p><p>保持默认即可，点击 [Next]</p><p>[Config Type] 为主机类型，[Port: 3306] 为端口号</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/9bcda347f6bbca58df8843f38c178a78_720.png" alt=""></p><ol start="6"><li>在 [Authentication Method] 窗口，可以设置授权方式。默认，直接点击 [Next]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f1754354d7e0302717a9c1fc4c528c02_720.png" alt=""></p><ol start="7"><li>在 [Accounts and Roles] 界面设置管理员密码。用于登陆 MySQL 服务</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/dfb3117e767af332e6b2822ff27a0654_720.png" alt=""></p><ol start="8"><li>在 [Windows Service] 界面设置 [服务] ，保持默认即可。</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/d3129dd2ba331425f9e7892a0b81b087_720.png" alt=""></p><ol start="9"><li>在 [Server File Permissions] 中授权，保持默认即可</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/33bcd45652a5178ddd35788211bbfc93_720.png" alt=""></p><ol start="10"><li>在 [Apply Configuration] 点击 [Execute] 执行之前的配置</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/79ce3831a4322e41691869175c54a604_720.png" alt=""></p><p>点击 [Finish] 完成配置</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/e7357753070eaa02ec50024aa28556a2_720.png" alt=""></p><ol start="11"><li>完成安装</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/40579a68dcdadf9f09e6c3c517e83525_720.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/494e644125931e21cf86124bb5e9d67c.png" alt=""></p><h2 id="3-环境变量">3 环境变量</h2><p>没有配置 MySQL 到环境变量中，终端无法运行 MySQL 命令。</p><ol><li>右键 [此电脑] ，选择 [属性]</li><li>打开 [系统] 窗口，点击 [高级系统设置]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4ba1d54ca6830505fae9a8bc721ad076_720.png" alt=""></p><ol start="3"><li>打开 [系统属性] ，选择 [高级] 选项，点击 [环境变量]</li><li>在 [环境变量] 窗口，选择 [path]</li><li>点击 [编辑] ，在 [编辑环境变量] 窗口中，将 MySQL 的 bin 目录添加进去，使用分号 <code>;</code> 划分</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/3648923a3ca1b07903f3e18b967dd1f9.png" alt=""></p><p>输入 MySQL 的 bin 目录 (根据自己的目录输入)，如果没有更改默认下载路径，则一般为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 8.0\bin</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/e1c8475465d768bc72da4b2b085ae4a1.png" alt=""></p><ol start="6"><li>点击 [确认] ，回到终端尝试使用 MySQL 指令</li></ol><p>检查是否成功，输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> mysql <span class="operator">-</span>V</span><br></pre></td></tr></table></figure><p>返回版本信息则代表成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server <span class="number">8.0</span>\bin\mysql.exe  Ver <span class="number">8.0</span><span class="number">.41</span> <span class="keyword">for</span> Win64 <span class="keyword">on</span> x86_64 (MySQL Community Server <span class="operator">-</span> GPL)</span><br></pre></td></tr></table></figure><h2 id="4-查看服务">4 查看服务</h2><p>需要启动服务，才能登陆 MySQL 并连接数据库。在之前配置时，已经默认服务启动。</p><p>可以检查一下：右键 [此电脑] 点击 [管理] ，双击 [服务和应用程序] ，双击 [服务] ，找到 MySQL 的服务 （默认情况下为 <code>MySQL80</code>）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/c94326af2e1953a05b2a0a087f366e8c_720.png" alt=""></p><p>也可以使用终端实现。右键 [终端]/[命令行工具] 使用 <strong>以管理员身份运行</strong> ，而后使用如下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务 MySQL80 为 MySQL 的服务名</span><br><span class="line"><span class="operator">&gt;</span> net <span class="keyword">start</span> MySQL80</span><br><span class="line"></span><br><span class="line"># 停止服务 MySQL80 为 MySQL 的服务名</span><br><span class="line"><span class="operator">&gt;</span> net stop MySQL80</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4639db1363ba088fad5f91904369a021_720.png" alt=""></p><h2 id="5-登陆-MySQL">5 登陆 MySQL</h2><p>打开 [终端] 输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h 主机名 <span class="operator">-</span>P 端口名 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p密码</span><br></pre></td></tr></table></figure><p>一般而言 主机名为 <code>localhost</code> ，端口名为 <code>3306</code> ，用户名为 <code>root</code> ，密码和 <code>-p</code> 之间不能有空格。</p><p>推荐使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>进行登陆，之后输入密码即可登陆。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><p>登陆成功后为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">8</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.41</span> MySQL Community Server <span class="operator">-</span> GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2025</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-简单尝试">6 简单尝试</h2><ol><li>查看已有数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;  </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名</span><br></pre></td></tr></table></figure><ol start="3"><li>删除数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><ol start="4"><li>进入数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><ol start="5"><li>查看数据库下所有数据表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_test <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> tb1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><ol start="6"><li>创建表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>不能为空/允许为空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>, <span class="comment">-- 不能为空</span></span><br><span class="line">    age <span class="type">int</span> <span class="keyword">null</span>         <span class="comment">-- 可以为空</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>默认值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">3</span>        <span class="comment">-- 设置默认为3</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>主键</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span>,       <span class="comment">-- 不能为空，不能重复</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>一般设置，主键+自增 <code>标准</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ol start="7"><li>删除表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><ol start="8"><li>展示表信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">16</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络 目录</title>
      <link href="/posts/8a1b9ca7.html"/>
      <url>/posts/8a1b9ca7.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主自学 Pytorch 整理的笔记。点击链接即可前往对应文章查看。更多信息，可前往本人的<a href="https://github.com/isKage/iskage.github.io">Github库</a>中查询。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>Pytorch 官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>Pytorch 官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="./3f7272cd.html">1 下载 Pytorch 和数据处理</a></p><p><a href="./ae1c954d.html">2 网络搭建</a></p><p><a href="./119f3166.html">3 损失函数 反向传播 优化器</a></p><p><a href="./bd02f045.html">4 网络调用和保存</a></p><p><a href="./2d229fe6.html">5 完整模型训练</a></p></div>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（5）完整模型训练</title>
      <link href="/posts/2d229fe6.html"/>
      <url>/posts/2d229fe6.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch (CIFAR10)</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-Structure">1. Structure</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8882617716.png" alt=""></p><h2 id="2-Code">2 Code</h2><h3 id="train-model-py">train_model.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建神经网络(output_features=10)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证网络正确性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    classification = Classification10Class()</span><br><span class="line">    <span class="comment"># 按照batch_size=64，channel=3，size=32*32输入，即64张图片，RGB颜色通道，32*32的大小输入</span></span><br><span class="line">    inputs = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    ouputs = classification(inputs)</span><br><span class="line">    <span class="built_in">print</span>(ouputs.shape)</span><br></pre></td></tr></table></figure><h3 id="train-py"><a href="http://train.py">train.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Dataset &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br></pre></td></tr></table></figure><h3 id="output">output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----------第 1 轮训练开始----------</span><br><span class="line">训练次数: 100, loss: 2.2914345264434814</span><br><span class="line">训练次数: 200, loss: 2.2848589420318604</span><br><span class="line">训练次数: 300, loss: 2.2572102546691895</span><br><span class="line">训练次数: 400, loss: 2.1692259311676025</span><br><span class="line">训练次数: 500, loss: 2.0409679412841797</span><br><span class="line">训练次数: 600, loss: 2.0187602043151855</span><br><span class="line">训练次数: 700, loss: 2.009617567062378</span><br><span class="line">测试集loss: 313.149169921875</span><br><span class="line">----------第 2 轮训练开始----------</span><br><span class="line">训练次数: 800, loss: 1.878823161125183</span><br><span class="line">训练次数: 900, loss: 1.8439174890518188</span><br><span class="line">训练次数: 1000, loss: 1.9330165386199951</span><br><span class="line">训练次数: 1100, loss: 1.9703041315078735</span><br><span class="line">训练次数: 1200, loss: 1.7066203355789185</span><br><span class="line">训练次数: 1300, loss: 1.668871521949768</span><br><span class="line">训练次数: 1400, loss: 1.7355754375457764</span><br><span class="line">训练次数: 1500, loss: 1.7841742038726807</span><br><span class="line">测试集loss: 309.877685546875</span><br><span class="line">----------第 3 轮训练开始----------</span><br><span class="line">训练次数: 1600, loss: 1.7344536781311035</span><br><span class="line">训练次数: 1700, loss: 1.621435284614563</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3-Visualization-Save">3 Visualization &amp; Save</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Dataset &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(</span><br><span class="line">                tag=<span class="string">&quot;train_loss (every 100): &quot;</span>,</span><br><span class="line">                scalar_value=loss.item(),</span><br><span class="line">                global_step=total_train_step,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 测试集loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_loss (every epoch): &quot;</span>,</span><br><span class="line">        scalar_value=total_test_loss,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">    torch.save(classification, <span class="string">&quot;./models_cifar/classification_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103240716.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103319943.png" style="zoom:80%;"/><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103407633.png" style="zoom:80%;" /><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103503420.png" style="zoom:80%;" /></p><h2 id="4-Full-Code">4 Full Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Classification &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数 == epoch</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    classification.train()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(</span><br><span class="line">                tag=<span class="string">&quot;train_loss (every 100 steps)&quot;</span>,</span><br><span class="line">                scalar_value=loss.item(),</span><br><span class="line">                global_step=total_train_step,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    classification.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    total_accuracy = <span class="number">0</span>  <span class="comment"># 分类问题正确率</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 正确率</span></span><br><span class="line">            accuracy = (outputs.argmax(axis=<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在测试集上的损失</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_loss (every epoch)&quot;</span>,</span><br><span class="line">        scalar_value=total_test_loss,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在测试集上的正确率</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的正确率: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_accuracy / test_data_size))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_accuracy (every epoch)&quot;</span>,</span><br><span class="line">        scalar_value=total_accuracy / test_data_size,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">    torch.save(classification, <span class="string">&quot;./models_cifar/classification_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line">    <span class="comment"># torch.save(classification.state_dict(), &quot;./models_cifar/classification_&#123;&#125;.pth&quot;.format(epoch)) # 推荐</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="5-GPU">5 GPU</h2><h3 id="1-Google-Colab">1. Google Colab</h3><ul><li>Google Colab: <a href="https://colab.research.google.com/">https://colab.research.google.com/</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110119717.png" alt=""></p><ul><li>配置</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110154640.png" alt=""></p><ul><li>cpu 大约42sgpu 大约8s</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110318142.png" alt=""></p><h3 id="2-Method-1-cuda">2. Method 1: .cuda()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; GPU &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    model_name = model_name.cuda()  <span class="comment"># GPU</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    loss_fn = loss_fn.cuda()  <span class="comment"># GPU</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    images = images.cuda()</span><br><span class="line">    targets = targets.cuda()</span><br></pre></td></tr></table></figure><h3 id="3-Method-2-to-device">3. Method 2: .to(device)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">model_name = model_name.to(device)</span><br><span class="line">loss_fn = loss_fn.to(device)</span><br><span class="line">images = images.to(device)</span><br><span class="line">targets = targets.to(device)</span><br></pre></td></tr></table></figure><h2 id="6-Validation-and-Test">6 Validation and Test</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;./image/dog.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载图片并转化类型</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">image = image.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">    torchvision.transforms.ToTensor(),</span><br><span class="line">])</span><br><span class="line">image = transform(image)  <span class="comment"># torch.Size([3, 32, 32])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 加载神经网络(因为是方式1, 所以要申明网络模型)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. load参数</span></span><br><span class="line">model = torch.load(<span class="string">&quot;./models_cifar/classification_gpu_29.pth&quot;</span>, map_location=torch.device(<span class="string">&#x27;cpu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 测试</span></span><br><span class="line">image = torch.reshape(image, (<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    outputs = model(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(outputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.argmax(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88114418117.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88114552561.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（4）网络调用和保存</title>
      <link href="/posts/bd02f045.html"/>
      <url>/posts/bd02f045.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-torchvision-models">1 torchvision.models</h2><p>有关图像处理的模型</p><p>torchvision.models: <a href="https://pytorch.org/vision/0.9/models.html">https://pytorch.org/vision/0.9/models.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8860250011.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8861010016.png" alt=""></p><h2 id="2-Example-Classification-VGG">2 Example: Classification VGG</h2><h3 id="1-Download-ImageNet">1. Download ImageNet</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8861138161.png" alt=""></p><p>too large</p><h3 id="2-Download-the-model">2. Download the model</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8862514836.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16_pretrained_false = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16_pretrained_true = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_true)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8862722432.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model: out_features=<span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="3-Add-Layers">3. Add Layers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 增加层 &quot;&quot;&quot;</span></span><br><span class="line">vgg16_pretrained_true.classifier.add_module(</span><br><span class="line">    name=<span class="string">&quot;add_linear&quot;</span>,  <span class="comment"># 增加新的层名</span></span><br><span class="line">    module=nn.Linear(</span><br><span class="line">        in_features=<span class="number">1000</span>,</span><br><span class="line">        out_features=<span class="number">10</span>,</span><br><span class="line">    ),  <span class="comment"># 增加新的层</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_true)  <span class="comment"># out_features=10</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8863539832.png" alt=""></p><h3 id="4-Modify-Layers">4. Modify Layers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 修改层 &quot;&quot;&quot;</span></span><br><span class="line">vgg16_pretrained_false.classifier[<span class="number">6</span>] = nn.Linear(</span><br><span class="line">    in_features=<span class="number">1000</span>,</span><br><span class="line">    out_features=<span class="number">10</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_false)  <span class="comment"># out_features=10</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8863840763.png" alt=""></p><h2 id="3-Save-Load-Models">3 Save &amp; Load Models</h2><h3 id="1-Save">1. Save</h3><h4 id="Method-1">Method 1</h4><ul><li>save()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. save method 1: save -&gt; structure + parameters</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">torch.save(vgg16, <span class="string">&quot;./models/vgg16_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Method-2-Recommend">Method 2 (Recommend)</h4><ul><li>save(model.state_dict())</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2. save method 2: save as dict -&gt; parameters (better)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">torch.save(vgg16.state_dict(), <span class="string">&quot;./models/vgg16_method2.pth&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-Load">2. Load</h3><h4 id="Method-1-2">Method 1</h4><ul><li>load()</li></ul><p>structure + parameters</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># load method 1:</span></span><br><span class="line">model1 = torch.load(<span class="string">&quot;./models/vgg16_method1.pth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(model1)</span><br></pre></td></tr></table></figure><h4 id="Method-2-Recommend-2">Method 2 (Recommend)</h4><ul><li>load_state_dict()</li></ul><p>parameters -&gt; models</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># load method 2:</span></span><br><span class="line">vgg16 = torchvision.models.vgg16()</span><br><span class="line">model2_param_dict = torch.load(<span class="string">&quot;./models/vgg16_method2.pth&quot;</span>)  <span class="comment"># parameters&#x27; dict</span></span><br><span class="line">vgg16.load_state_dict(model2_param_dict)</span><br><span class="line"><span class="built_in">print</span>(vgg16)</span><br></pre></td></tr></table></figure><h3 id="3-Some-Errors">3. Some Errors</h3><ul><li>save the model with method 1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; python_file_name: model_save.py &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNet</span>(nn.Module):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">super</span>(MyNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">      x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">my_net = MyNet()</span><br><span class="line">torch.save(my_net, <span class="string">&quot;my_net_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>load the model in another python file</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">error</span></span><br><span class="line"><span class="string">model = torch.load(&quot;my_net_method1.pth&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model_save <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">model = torch.load(<span class="string">&quot;my_net_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（3）损失函数 反向传播 优化器</title>
      <link href="/posts/119f3166.html"/>
      <url>/posts/119f3166.html</url>
      
        <content type="html"><![CDATA[<h1>Loss Backward Optimizer 损失函数 反向传播 优化器</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-Loss-Function">1 Loss Function</h2><h3 id="1-Loss-Functions">1. Loss Functions</h3><p><a href="https://pytorch.org/docs/1.8.1/nn.html#loss-functions">https://pytorch.org/docs/1.8.1/nn.html#loss-functions</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8834542085.png" alt=""></p><h3 id="2-Some-Loss-Functions">2. Some Loss Functions</h3><h4 id="L1Loss">L1Loss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8835511919.png" alt=""></p><ul><li>examples</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">target = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">target = torch.reshape(target, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss_sum = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)  <span class="comment"># tensor(2.)</span></span><br><span class="line">loss_mean = L1Loss(reduction=<span class="string">&#x27;mean&#x27;</span>)  <span class="comment"># tensor(0.6667)</span></span><br><span class="line">res_sum = loss_sum(<span class="built_in">input</span>, target)</span><br><span class="line">res_mean = loss_mean(<span class="built_in">input</span>, target)</span><br><span class="line"><span class="built_in">print</span>(res_sum)</span><br><span class="line"><span class="built_in">print</span>(res_mean)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input -&gt; (N, *)</span><br><span class="line">target -&gt; (N, *)</span><br></pre></td></tr></table></figure><h4 id="MSELoss">MSELoss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8835620468.png" alt=""></p><ul><li>example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MSELoss</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">target = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">target = torch.reshape(target, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = MSELoss()</span><br><span class="line">res = loss(<span class="built_in">input</span>, target)  <span class="comment"># tensor(1.3333)</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input -&gt; (N, *)</span><br><span class="line">target -&gt; (N, *)</span><br></pre></td></tr></table></figure><h4 id="CrossEntropyLoss">CrossEntropyLoss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8840106382.png" alt=""></p><ul><li>example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> CrossEntropyLoss</span><br><span class="line"></span><br><span class="line">input_predict = torch.tensor([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 模型返回了对3个种类的概率预测</span></span><br><span class="line">target = torch.tensor([<span class="number">1</span>])   <span class="comment"># 实际属于第1+1种，返回1</span></span><br><span class="line"></span><br><span class="line">input_predict = torch.reshape(input_predict, (<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = CrossEntropyLoss()</span><br><span class="line">res = loss(input_predict, target)  <span class="comment"># tensor(1.1019)</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input  -&gt; (N, C)    最后得到的各个种类的概率</span><br><span class="line">target -&gt; (N)      实际属于哪一种</span><br><span class="line"></span><br><span class="line">output -&gt; 返回标量: If reduction is &#x27;none&#x27;, then the same size as the target: (N) </span><br><span class="line"></span><br><span class="line"># C = number of classes</span><br></pre></td></tr></table></figure><h3 id="3-Loss-of-CIFAR10">3. Loss of CIFAR10</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cifar</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Cifar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model1 = Sequential(</span><br><span class="line">            Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;测试&#x27;&#x27;&#x27;</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    outputs = my_net(imgs)</span><br><span class="line">    <span class="comment"># print(outputs)  # [p0, p1, ..., p9]  每张图片的类的预测的概率</span></span><br><span class="line">    <span class="comment"># print(targets)  # [t0, t1, ..., t63] 真实每张图片对应的类标号</span></span><br><span class="line"></span><br><span class="line">    res_loss = loss(outputs, targets)</span><br><span class="line">    <span class="built_in">print</span>(res_loss)   <span class="comment"># tensor(2.2994, grad_fn=&lt;NllLossBackward0&gt;) 误差</span></span><br></pre></td></tr></table></figure><h2 id="2-Backward">2 Backward</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; network &#x27;&#x27;&#x27;</span></span><br><span class="line">    imgs, targets = data</span><br><span class="line">    outputs = my_net(imgs)</span><br><span class="line">    <span class="comment"># print(outputs)  # [p0, p1, ..., p9]  每张图片的类的预测的概率</span></span><br><span class="line">    <span class="comment"># print(targets)  # [t0, t1, ..., t63] 真实每张图片对应的类标号</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; loss function &#x27;&#x27;&#x27;</span></span><br><span class="line">    res_loss = loss(outputs, targets)</span><br><span class="line">    <span class="comment"># print(res_loss)   # tensor(2.2994, grad_fn=&lt;NllLossBackward0&gt;) 误差</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; backward &#x27;&#x27;&#x27;</span></span><br><span class="line">    res_loss.backward()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8843712009.png" alt=""></p><h2 id="3-Optimizer">3 Optimizer</h2><p>Pytorch Docs: <a href="https://pytorch.org/docs/1.8.1/optim.html">https://pytorch.org/docs/1.8.1/optim.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8844003825.png" alt=""></p><h3 id="1-Basical-Usage">1. Basical Usage</h3><ol><li>Constructing it</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; 参数parameters和学习率lr(learning rate)是必须传入的，其他由特定算法决定 &#x27;&#x27;&#x27;</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">optimizer = optim.Adam([var1, var2], lr=<span class="number">0.0001</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>Taking an optimization step</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">input</span>, target <span class="keyword">in</span> dataset:</span><br><span class="line">  <span class="comment"># 清零</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 模型训练</span></span><br><span class="line">    output = model(<span class="built_in">input</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 损失函数</span></span><br><span class="line">    loss = loss_fn(output, target)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 优化器更新参数</span></span><br><span class="line">    optimizer.step()</span><br></pre></td></tr></table></figure><h2 id="4-完整网络代码-Full-Example-for-NN">4 完整网络代码 Full  Example for NN</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 加载数据 &#x27;&#x27;&#x27;</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cifar</span>(nn.Module):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 创建网络 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Cifar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model1 = Sequential(</span><br><span class="line">            Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 实例化网络 选择损失函数 优化器 &#x27;&#x27;&#x27;</span></span><br><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optim = torch.optim.SGD(my_net.parameters(), lr=<span class="number">0.01</span>)  <span class="comment"># 随机梯度下降</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 开始训练 &#x27;&#x27;&#x27;</span></span><br><span class="line">epochs = <span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 每次训练起始损失</span></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; network &#x27;&#x27;&#x27;</span></span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = my_net(imgs)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; loss function &#x27;&#x27;&#x27;</span></span><br><span class="line">        res_loss = loss(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; zero_grad &#x27;&#x27;&#x27;</span></span><br><span class="line">        optim.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; backward &#x27;&#x27;&#x27;</span></span><br><span class="line">        res_loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; optim_step updated &#x27;&#x27;&#x27;</span></span><br><span class="line">        optim.step()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; each epoch loss sum &#x27;&#x27;&#x27;</span></span><br><span class="line">        running_loss += res_loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;every epoch, the loss is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(running_loss))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">360.25927734375</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">354.6569519042969</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">336.74420166015625</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">319.4207458496094</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">310.6980285644531</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">302.37701416015625</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">292.7424011230469</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">284.93902587890625</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（2）网络搭建</title>
      <link href="/posts/ae1c954d.html"/>
      <url>/posts/ae1c954d.html</url>
      
        <content type="html"><![CDATA[<h1>Pytorch 搭建网络</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-神经网络">1 神经网络</h2><p>官方文档：<a href="https://pytorch.org/docs/1.8.1/nn.html">https://pytorch.org/docs/1.8.1/nn.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%8893656667.png" alt=""></p><h2 id="2-Containers框架">2 Containers框架</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%8893741302.png" alt=""></p><ul><li>官方示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Model, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.conv1(x))<span class="comment"># 卷积conv1、非线性relu</span></span><br><span class="line">        <span class="keyword">return</span> F.relu(<span class="variable language_">self</span>.conv2(x))<span class="comment"># 卷积conv2、非线性relu</span></span><br></pre></td></tr></table></figure><ul><li>简单尝试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModel, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_model = MyModel()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output = my_model(x)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h2 id="3-stride-padding">3 stride &amp; padding</h2><p><strong>torch.nn.functional.conv2d</strong></p><h3 id="1-stride">1. stride</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入图像 5x5 每个数字表示颜色</span></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积核 3x3</span></span><br><span class="line">kernel = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为torch.nn.functional.conv2d默认输入为4维的，所以转化</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="built_in">input</span>.shape[<span class="number">0</span>], <span class="built_in">input</span>.shape[<span class="number">1</span>]))</span><br><span class="line">kernel = torch.reshape(kernel, (<span class="number">1</span>, <span class="number">1</span>, kernel.shape[<span class="number">0</span>], kernel.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) → Tensor</span></span><br><span class="line"><span class="string">input: 就是输入数据集</span></span><br><span class="line"><span class="string">weight: 卷积核</span></span><br><span class="line"><span class="string">stride: 卷积核每次移动的步数</span></span><br><span class="line"><span class="string">padding: 对输入图像的填充</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">output_stride1 = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(output_stride1)</span><br><span class="line"></span><br><span class="line">output_stride2 = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(output_stride2)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88101819072.png" alt=""></p><h3 id="2-padding">2. padding</h3><p>对输入图像的填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output_padding1 = F.conv2d(<span class="built_in">input</span>, kernel, padding=<span class="number">1</span>, stride=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(output_padding1)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102514146.png" alt=""></p><h2 id="4-卷积层">4 卷积层</h2><h3 id="1-Convolution">1. Convolution</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102701065.png" alt=""></p><h3 id="2-调用和参数">2. 调用和参数</h3><ul><li>调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">torch</span>.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, groups=<span class="number">1</span>, bias=<span class="literal">True</span>, padding_mode=<span class="string">&#x27;zeros&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_channels: 输入</span></span><br><span class="line">- in_channels (<span class="built_in">int</span>) – Number of channels <span class="keyword">in</span> the <span class="built_in">input</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># out_channels: 输出</span></span><br><span class="line">- out_channels (<span class="built_in">int</span>) – Number of channels produced by the convolution</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel_size: 卷积核的大小</span></span><br><span class="line">- kernel_size (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>) – Size of the convolving kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># stride: 步数</span></span><br><span class="line">- stride (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Stride of the convolution. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding: 填充层数</span></span><br><span class="line">- padding (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Zero-padding added to both sides of the <span class="built_in">input</span>. Default: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding_mode: 填充方式</span></span><br><span class="line">- padding_mode (string, optional) – <span class="string">&#x27;zeros&#x27;</span>, <span class="string">&#x27;reflect&#x27;</span>, <span class="string">&#x27;replicate&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;circular&#x27;</span>. Default: <span class="string">&#x27;zeros&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dilation: 卷积核中元素的对应位置</span></span><br><span class="line">- dilation (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Spacing between kernel elements. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">- groups (<span class="built_in">int</span>, optional) – Number of blocked connections <span class="keyword">from</span> <span class="built_in">input</span> channels to output channels. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">- bias (<span class="built_in">bool</span>, optional) – If <span class="literal">True</span>, adds a learnable bias to the output. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>dilation</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738725222605.png" alt=""></p><h3 id="3-简单原理">3. 简单原理</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88103543577.png" alt=""></p><ul><li>in_channels &amp; out_channels</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88104218535.png" alt=""></p><h3 id="4-示例代码">4. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                       download=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">my_net = Net()</span><br><span class="line"><span class="built_in">print</span>(my_net)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络结构</span></span><br><span class="line">Net(</span><br><span class="line">  (conv1): Conv2d(<span class="number">3</span>, <span class="number">6</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在tensorboard展示</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs_conv&quot;</span>)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">my_net = Net()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    output = my_net(imgs)</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    <span class="comment"># writer.add_images(&quot;output&quot;, output, step)  # torch.Size([64, 6, 30, 30]) output的channel=6，报错</span></span><br><span class="line">    output = torch.reshape(output, (-<span class="number">1</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果希望卷积后，通道变多，但尺寸不变，则需要填充padding，公式</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><h2 id="5-池化层">5 池化层</h2><h3 id="1-Pooling">1. Pooling</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8830453528.png" alt=""></p><h3 id="2-调用和参数-2">2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.MaxPool2d(kernel_size, stride=<span class="literal">None</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, return_indices=<span class="literal">False</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取最大值的窗口</span></span><br><span class="line">- kernel_size – the size of the window to take a <span class="built_in">max</span> over</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向纵向的步长，default = kernel_size</span></span><br><span class="line">- stride – the stride of the window. Default value <span class="keyword">is</span> kernel_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充图像边缘</span></span><br><span class="line">- padding – implicit zero padding to be added on both sides</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空洞</span></span><br><span class="line">- dilation – a parameter that controls the stride of elements <span class="keyword">in</span> the window</span><br><span class="line"></span><br><span class="line">- return_indices – <span class="keyword">if</span> <span class="literal">True</span>, will <span class="keyword">return</span> the <span class="built_in">max</span> indices along <span class="keyword">with</span> the outputs. Useful <span class="keyword">for</span> torch.nn.MaxUnpool2d later</span><br><span class="line"></span><br><span class="line"><span class="comment"># floor向下取整 ceil向上取整，例如ceil_mode = True，保留超出部分</span></span><br><span class="line">- ceil_mode – when <span class="literal">True</span>, will use ceil instead of floor to compute the output shape</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8832249522.png" alt=""></p><ul><li>注意输入的input和输出output均为</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(N, C, H, W)  <span class="comment"># (batch_size层数, Channel通道数, Height高, Width宽)</span></span><br></pre></td></tr></table></figure><ul><li>注意池化不可对long操作，故</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 转为float</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码">3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1层，1通道，5x5大小，-1表示自动计算</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxPoolNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MaxPoolNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.maxpool1 = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.maxpool1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = MaxPoolNet()</span><br><span class="line">output = my_net(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line">&gt;&gt; tensor([[[[<span class="number">3.</span>, <span class="number">2.</span>],</span><br><span class="line">             [<span class="number">5.</span>, <span class="number">1.</span>]]]])</span><br></pre></td></tr></table></figure><h2 id="6-非线性激活（激活函数）">6 非线性激活（激活函数）</h2><h3 id="1-Non-linear-Activations">1. Non-linear Activations</h3><p>relu, sigmoid…</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8835228634.png" alt=""></p><h3 id="2-调用和参数-3">2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否内存拷贝</span></span><br><span class="line">inplace – can optionally do the operation <span class="keyword">in</span>-place. Default: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">ReLu(<span class="built_in">input</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">&gt;&gt; <span class="built_in">input</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">output = ReLu(<span class="built_in">input</span>, inplace = <span class="literal">False</span>)</span><br><span class="line">&gt;&gt; <span class="built_in">input</span> = -<span class="number">1</span></span><br><span class="line">&gt;&gt; output = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码-2">3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, -<span class="number">0.5</span>],</span><br><span class="line">    [-<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonLinearActivationsRelu</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(NonLinearActivationsRelu, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.relu1 = ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.relu1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = NonLinearActivationsRelu()</span><br><span class="line">output = my_net(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line">&gt;&gt; tensor([[ <span class="number">1.0000</span>, -<span class="number">0.5000</span>],</span><br><span class="line">           [-<span class="number">1.0000</span>,  <span class="number">3.0000</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line">&gt;&gt; tensor([[<span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">           [<span class="number">0.</span>, <span class="number">3.</span>]])</span><br></pre></td></tr></table></figure><h2 id="7-正则化层">7 正则化层</h2><h3 id="1-Normalization">1. Normalization</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8840656515.png" alt=""></p><h3 id="2-调用和参数-4">2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.BatchNorm2d(num_features, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">- num_features – C <span class="keyword">from</span> an expected <span class="built_in">input</span> of size (N,C,H,W)</span><br><span class="line"></span><br><span class="line">- eps – a value added to the denominator <span class="keyword">for</span> numerical stability. Default: <span class="number">1e-5</span></span><br><span class="line"></span><br><span class="line">- momentum – the value used <span class="keyword">for</span> the running_mean <span class="keyword">and</span> running_var computation. Can be <span class="built_in">set</span> to <span class="literal">None</span> <span class="keyword">for</span> cumulative moving average (i.e. simple average). Default: <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">- affine – a boolean value that when <span class="built_in">set</span> to <span class="literal">True</span>, this module has learnable affine parameters. Default: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">- track_running_stats – a boolean value that when <span class="built_in">set</span> to <span class="literal">True</span>, this module tracks the running mean <span class="keyword">and</span> variance, <span class="keyword">and</span> when <span class="built_in">set</span> to <span class="literal">False</span>, this module does <span class="keyword">not</span> track such statistics, <span class="keyword">and</span> initializes statistics buffers running_mean <span class="keyword">and</span> running_var <span class="keyword">as</span> <span class="literal">None</span>. When these buffers are <span class="literal">None</span>, this module always uses batch statistics. <span class="keyword">in</span> both training <span class="keyword">and</span> <span class="built_in">eval</span> modes. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">input</span> - (N, C, H, W)</span><br><span class="line">- output - (N, C, H, W)</span><br></pre></td></tr></table></figure><h3 id="3-示例代码-3">3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># With Learnable Parameters</span></span><br><span class="line">m = nn.BatchNorm2d(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># Without Learnable Parameters</span></span><br><span class="line">m = nn.BatchNorm2d(<span class="number">100</span>, affine=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">20</span>, <span class="number">100</span>, <span class="number">35</span>, <span class="number">45</span>)</span><br><span class="line">output = m(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure><h2 id="8-线性层">8 线性层</h2><h3 id="1-Linear">1. Linear</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8841333231.png" alt=""></p><h3 id="2-调用和参数-5">2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Linear(in_features, out_features, bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入层的神经元个数</span></span><br><span class="line">- in_features – size of each <span class="built_in">input</span> sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出层的神经元个数</span></span><br><span class="line">- out_features – size of each output sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否 w_i*x_i 后加上 b_i</span></span><br><span class="line">- bias – If <span class="built_in">set</span> to <span class="literal">False</span>, the layer will <span class="keyword">not</span> learn an additive bias. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码-4">3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">False</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearLayers</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LinearLayers, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.linear1 = Linear(in_features=<span class="number">64</span> * <span class="number">3</span> * <span class="number">32</span> * <span class="number">32</span>, out_features=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.linear1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = LinearLayers()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    <span class="comment"># print(imgs.shape)  # torch.Size([64, 3, 32, 32])  64一组，3个通道，32x32图片</span></span><br><span class="line">    <span class="comment"># output = torch.reshape(imgs, (1, 1, 1, -1))  # 每64个图片平铺为一个一维向量</span></span><br><span class="line">    <span class="comment"># output = my_net(output)  # torch.Size([1, 1, 1, 10])</span></span><br><span class="line"></span><br><span class="line">    output = torch.flatten(imgs)  <span class="comment"># torch.Size([196608])</span></span><br><span class="line">    output = my_net(output)  <span class="comment"># torch.Size([10])</span></span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h2 id="9-pytorch提供的模型">9 pytorch提供的模型</h2><p><a href="https://pytorch.org/docs/1.8.1/nn.html">https://pytorch.org/docs/1.8.1/nn.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8843352338.png" alt=""></p><h2 id="10-Sequential">10 Sequential</h2><h3 id="1-Sequential简化">1. Sequential简化</h3><p>torch.nn -&gt; container -&gt; Sequential</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Sequential(*args)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example of using Sequential</span></span><br><span class="line">model = nn.Sequential(</span><br><span class="line">          nn.Conv2d(<span class="number">1</span>,<span class="number">20</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU(),</span><br><span class="line">          nn.Conv2d(<span class="number">20</span>,<span class="number">64</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of using Sequential with OrderedDict</span></span><br><span class="line">model = nn.Sequential(OrderedDict([</span><br><span class="line">          (<span class="string">&#x27;conv1&#x27;</span>, nn.Conv2d(<span class="number">1</span>,<span class="number">20</span>,<span class="number">5</span>)),</span><br><span class="line">          (<span class="string">&#x27;relu1&#x27;</span>, nn.ReLU()),</span><br><span class="line">          (<span class="string">&#x27;conv2&#x27;</span>, nn.Conv2d(<span class="number">20</span>,<span class="number">64</span>,<span class="number">5</span>)),</span><br><span class="line">          (<span class="string">&#x27;relu2&#x27;</span>, nn.ReLU())</span><br><span class="line">        ]))</span><br></pre></td></tr></table></figure><h3 id="2-案例：CIFAR分类">2. 案例：CIFAR分类</h3><ul><li>CIFAR Model 结构</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/Structure-of-CIFAR10-quick-model.png" alt="Structure-of-CIFAR10-quick-model"></p><ul><li>Note: 计算padding和stride</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><ul><li>tensorboard可视化结构</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x_test = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs_cifar&quot;</span>)</span><br><span class="line">writer.add_graph(cifar_net, x_test)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8850621811.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 搭建神经网络（1）下载 Pytorch 和数据处理</title>
      <link href="/posts/3f7272cd.html"/>
      <url>/posts/3f7272cd.html</url>
      
        <content type="html"><![CDATA[<h1>下载Pytorch和数据处理</h1><h2 id="0-创建环境并下载Pytorch">0 创建环境并下载Pytorch</h2><p>官网：<a href="https://pytorch.org">https://pytorch.org</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8A%E5%8D%88110530197.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch::pytorch torchvision torchaudio -c pytorch</span><br></pre></td></tr></table></figure><h2 id="1-加载数据">1 加载数据</h2><h3 id="1-Dataset">1. Dataset</h3><p>提取数据并获取label</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root_dir = root_dir</span><br><span class="line">        <span class="variable language_">self</span>.label_dir = label_dir</span><br><span class="line">        <span class="variable language_">self</span>.path = os.path.join(<span class="variable language_">self</span>.root_dir, <span class="variable language_">self</span>.label_dir)</span><br><span class="line">        <span class="variable language_">self</span>.img_path = os.listdir(<span class="variable language_">self</span>.path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_name = <span class="variable language_">self</span>.img_path[index]</span><br><span class="line">        img_item_path = os.path.join(<span class="variable language_">self</span>.root_dir, <span class="variable language_">self</span>.label_dir, img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        label = <span class="variable language_">self</span>.label_dir</span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">&#x27;dataset/train&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 蚂蚁数据集</span></span><br><span class="line">ants_label_dir = <span class="string">&#x27;ants_image&#x27;</span></span><br><span class="line">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蜜蜂数据集</span></span><br><span class="line">bees_label_dir = <span class="string">&#x27;bees_image&#x27;</span></span><br><span class="line">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整合 简单的拼接，按照谁在前整合后仍然在前的原则</span></span><br><span class="line">train_dataset = ants_dataset + bees_dataset</span><br></pre></td></tr></table></figure><p>常见数据集形式</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88122404428.png" alt=""></p><h3 id="2-Dataloader">2. Dataloader</h3><p>为后面的网络提供不同的数据形式（打包）</p><h2 id="2-TensorBoard">2 TensorBoard</h2><h3 id="1-尝试">1. 尝试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;y=x&#x27;</span>, i, i)  <span class="comment"># 第一个是标题，第二个是y轴，第三个是x轴</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=文件夹名</span><br><span class="line">tensorboard --logdir=logs</span><br><span class="line"><span class="comment"># 改端口</span></span><br><span class="line">tensorboard --logdir=logs --port=<span class="number">6007</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88123602383.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88123851459.png" alt=""></p><h3 id="2-训练集练习">2. 训练集练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line">image_path1 = <span class="string">&#x27;dataset/train/ants_image/0013035.jpg&#x27;</span></span><br><span class="line">image_PIL1 = Image.<span class="built_in">open</span>(image_path1)</span><br><span class="line">image_array1 = np.array(image_PIL1)</span><br><span class="line"></span><br><span class="line">image_path2 = <span class="string">&#x27;dataset/train/ants_image/5650366_e22b7e1065.jpg&#x27;</span></span><br><span class="line">image_PIL2 = Image.<span class="built_in">open</span>(image_path2)</span><br><span class="line">image_array2 = np.array(image_PIL2)</span><br><span class="line"></span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, image_array1, <span class="number">1</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, image_array2, <span class="number">2</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88125438974.png" alt=""></p><h2 id="3-Transforms">3 Transforms</h2><blockquote><p>[!NOTE]</p><p>torchvision的模块之一：Transforms</p></blockquote><h3 id="1-ToTensor">1. ToTensor</h3><ol><li>transforms.ToTensor将&quot;PIL Image&quot;和&quot;numpy.ndarray&quot;转化为tensor类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&#x27;dataset/train/ants_image/5650366_e22b7e1065.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PIL Image 类型</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"><span class="built_in">print</span>(img)</span><br><span class="line">&gt;&gt; &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x375 at <span class="number">0x13B2D7970</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.ndarray 类型</span></span><br><span class="line">cv_img = cv2.imread(img_path)</span><br><span class="line"><span class="built_in">print</span>(cv_img)</span><br><span class="line">&gt;&gt; [[[<span class="number">106</span> <span class="number">119</span>  <span class="number">97</span>]</span><br><span class="line">    [<span class="number">106</span> <span class="number">119</span>  <span class="number">97</span>]</span><br><span class="line">    [<span class="number">107</span> <span class="number">120</span>  <span class="number">98</span>]</span><br><span class="line">    ...</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]]]</span><br><span class="line"></span><br><span class="line">tensor_trans = transforms.ToTensor()</span><br><span class="line">tensor_img = tensor_trans(img)</span><br><span class="line"><span class="built_in">print</span>(tensor_img)</span><br><span class="line">&gt;&gt; tensor([[[<span class="number">0.3804</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3412</span>, <span class="number">0.3373</span>, <span class="number">0.3333</span>],</span><br><span class="line">           [<span class="number">0.3765</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3529</span>, <span class="number">0.3490</span>, <span class="number">0.3451</span>],</span><br><span class="line">           [<span class="number">0.3804</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3725</span>, <span class="number">0.3686</span>, <span class="number">0.3647</span>],</span><br><span class="line">           ...,</span><br><span class="line">           [<span class="number">0.5608</span>, <span class="number">0.5608</span>, <span class="number">0.5647</span>,  ..., <span class="number">0.4392</span>, <span class="number">0.4392</span>, <span class="number">0.4392</span>],</span><br><span class="line">           [<span class="number">0.5412</span>, <span class="number">0.5529</span>, <span class="number">0.5608</span>,  ..., <span class="number">0.4353</span>, <span class="number">0.4353</span>, <span class="number">0.4353</span>],</span><br><span class="line">           [<span class="number">0.5333</span>, <span class="number">0.5412</span>, <span class="number">0.5608</span>,  ..., <span class="number">0.4314</span>, <span class="number">0.4314</span>, <span class="number">0.4314</span>]]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-transforms使用">2. transforms使用</h3><p>Note：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__call__函数的作用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, use</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__call__函数：&quot;</span> + use)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self, use</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一般函数：&quot;</span> + use)</span><br><span class="line"></span><br><span class="line">person = Person()</span><br><span class="line">person(<span class="string">&quot;call能直接利用类名括号调用&quot;</span>)</span><br><span class="line">person.func(<span class="string">&quot;必须使用.func方式&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-torchvision数据集">4 torchvision数据集</h2><p>torchvision.dataset</p><p>查看官方文档：<a href="https://pytorch.org/">https://pytorch.org/</a></p><p>0.9版本：<a href="https://pytorch.org/vision/0.9/">https://pytorch.org/vision/0.9/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%8850535594.png" alt=""></p><h3 id="1-尝试使用">1. 尝试使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transforms = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor(),  <span class="comment"># 转为tensor类型</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">True</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">img, target = test_set[0]</span></span><br><span class="line"><span class="string">print(img)  # &lt;PIL.Image.Image image mode=RGB size=32x32 at 0x14433FCA0&gt;</span></span><br><span class="line"><span class="string">print(target)  # 3</span></span><br><span class="line"><span class="string">print(test_set.classes[target])  # cat</span></span><br><span class="line"><span class="string">img.show()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(log_dir=<span class="string">&#x27;./logs_cifar&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img, target = test_set[i]</span><br><span class="line">    writer.add_image(<span class="string">&#x27;test_set&#x27;</span>, img, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="2-数据集的下载">2. 数据集的下载</h3><p>进入数据集的源码（CIFAR10），查看url即为下载链接</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%8853613373.png" alt=""></p><h2 id="5-Dataloader">5 Dataloader</h2><p>官方文档：<a href="https://pytorch.org/docs/1.8.1/data.html?highlight=dataloader#torch.utils.data.DataLoader">https://pytorch.org/docs/1.8.1/data.html?highlight=dataloader#torch.utils.data.DataLoader</a></p><h3 id="1-batch-size">1. batch_size</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240730%E4%B8%8A%E5%8D%8894027575.png" alt=""></p><h3 id="2-shuffle">2. shuffle</h3><p>shuffle打乱顺序</p><h3 id="3-代码">3. 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transforms = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor(),  <span class="comment"># 转为tensor类型</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. batch_size=64 每次取4个数据进行打包：test_set[0-63]=dataset[0-63]打包</span></span><br><span class="line"><span class="string">2. shuffle打乱顺序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;dataloader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        writer.add_images(<span class="string">&#x27;Epoch: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch), imgs, step)</span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> 神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《微观经济学》完整笔记整理</title>
      <link href="/posts/73f9c55d.html"/>
      <url>/posts/73f9c55d.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主根据复旦大学本科课程《微观经济学》整理的课程笔记。点击链接即可前往对应文章查看，笔记以 PDF 的格式展示。更多信息，可前往本人的 <a href="https://github.com/isKage/iskage.github.io">Github库</a> 中查询。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>课程书籍为罗伯特·S·平狄克/鲁宾菲尔德编写，中国人民大学出版社出版的<a href="https://book.douban.com/subject/4039368/">《微观经济学》</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/01%E7%BB%AA%E8%AE%BA.pdf">1 绪论 Preliminaries</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/02%E4%BE%9B%E7%BB%99%E5%92%8C%E9%9C%80%E6%B1%82%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.pdf">2 供给和需求的基本原理 The Basics of Supply and Demand</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/03%E6%B6%88%E8%B4%B9%E8%80%85%E8%A1%8C%E4%B8%BA.pdf">3 消费者行为 Consumer Behaviors</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/04%E4%B8%AA%E5%88%AB%E9%9C%80%E6%B1%82%E5%92%8C%E5%B8%82%E5%9C%BA%E9%9C%80%E6%B1%82.pdf">4 个别需求和市场需求 Demand</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/05%E7%94%9F%E4%BA%A7.pdf">5 生产 Production</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/06%E7%94%9F%E4%BA%A7%E6%88%90%E6%9C%AC.pdf">6 生产成本 Costs of Production</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/07%E5%88%A9%E6%B6%A6%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%96%E5%92%8C%E7%AB%9E%E4%BA%89%E6%80%A7%E4%BE%9B%E7%BB%99.pdf">7 利润的最大化和竞争性供给 Max Profit and Competitive Supply</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/08%E7%AB%9E%E4%BA%89%E6%80%A7%E5%B8%82%E5%9C%BA%E5%88%86%E6%9E%90.pdf">8 竞争性市场分析 Competitive Markets</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/09%E5%B8%82%E5%9C%BA%E5%8A%BF%E5%8A%9B_%E5%9E%84%E6%96%AD%E5%92%8C%E4%B9%B0%E6%96%B9%E5%9E%84%E6%96%AD.pdf">9 市场势力：垄断和买方垄断 Market Power: Monopoly</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/10%E6%9C%89%E5%B8%82%E5%9C%BA%E5%8A%BF%E5%8A%9B%E7%9A%84%E5%AE%9A%E4%BB%B7.pdf">10 有市场势力的定价 Pricing with Market Power</a></p><p><a href="../pdf/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/11%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89%E5%92%8C%E5%AF%A1%E5%A4%B4%E5%9E%84%E6%96%AD.pdf">11 垄断竞争和寡头垄断 Monopolistic Competition and Oligopoly</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 微观经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL入门：简单尝试</title>
      <link href="/posts/9d7c017f.html"/>
      <url>/posts/9d7c017f.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>这篇文章相对入门地介绍了<code>MySQL</code>里的相关语法和使用，并结合<code>Python + Flask</code>框架初步探索里网页开发。</strong></p></div><h2 id="1-MySQL入门">1. MySQL入门</h2><h3 id="1-1-启动MySQL">1.1 启动MySQL:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><h3 id="1-2-查看已有数据库">1.2 查看已有数据库:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><h3 id="1-3-创建数据库">1.3 创建数据库:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;  </span><br></pre></td></tr></table></figure><h3 id="1-4-删除数据库">1.4 删除数据库:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><h3 id="1-5-进入数据库">1.5 进入数据库:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><h3 id="1-6-查看数据库下所有数据表">1.6 查看数据库下所有数据表:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_test <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> tb1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><h3 id="1-7-创建表">1.7 创建表:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>不能为空/允许为空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>, <span class="comment">-- 不能为空</span></span><br><span class="line">    age <span class="type">int</span> <span class="keyword">null</span>         <span class="comment">-- 可以为空</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>默认值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">3</span>        <span class="comment">-- 设置默认为3</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>主键</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span>,       <span class="comment">-- 不能为空，不能重复</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>一般设置，主键+自增 <code>标准</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="1-8-删除表">1.8 删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="1-9-展示表信息">1.9 展示表信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">16</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="2-常见数据类型">2 常见数据类型</h2><h3 id="2-1-int整型">2.1 int整型</h3><ul><li>tinyint</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有符号，取值范围：-128～127（有正有负）[默认]</span><br><span class="line">无符号，取值范围：0～255（只有正）</span><br></pre></td></tr></table></figure><ul><li>有符号，取值范围：-128～127（有正有负）[默认]</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb2(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">age tinyint</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>无符号，取值范围：0～255（只有正）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb2(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">age tinyint unsigned</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>int</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">有符号，-2147483648～2147483647</span><br><span class="line"></span><br><span class="line">int unsigned</span><br><span class="line">无符号，0～4294967295</span><br></pre></td></tr></table></figure><ul><li>bigint</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bigint</span><br><span class="line">有符号，范围更大</span><br><span class="line"></span><br><span class="line">bigint unsigned</span><br><span class="line">无符号，范围更大</span><br></pre></td></tr></table></figure><h4 id="练习：整型">练习：整型</h4><ul><li>创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb2(</span><br><span class="line">id <span class="type">bigint</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  salary <span class="type">int</span>,</span><br><span class="line">  age tinyint</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> tb2(salary, age) <span class="keyword">values</span>(<span class="number">10000</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">insert into</span> tb2(salary, age) <span class="keyword">values</span>(<span class="number">20000</span>, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> tb2(salary, age) <span class="keyword">values</span>(<span class="number">30000</span>, <span class="number">38</span>), (<span class="number">40000</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><ul><li>查看数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb2;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb2;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> salary <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>  <span class="number">10000</span> <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>  <span class="number">20000</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span>  <span class="number">30000</span> <span class="operator">|</span>   <span class="number">38</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span>  <span class="number">40000</span> <span class="operator">|</span>   <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-2-浮点数">2.2 浮点数</h3><ul><li><p>float</p></li><li><p>double</p></li><li><p>decimal</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">准确的小数，m是数字总个数（负号不算），d是小数后个数。</span><br><span class="line">m最大为65，d最大为30</span><br></pre></td></tr></table></figure><p><code>例如</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb3(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment,</span><br><span class="line">salary <span class="type">decimal</span>(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> tb3(salary) <span class="keyword">values</span>(<span class="number">1.28</span>);</span><br><span class="line"><span class="keyword">insert into</span> tb3(salary) <span class="keyword">values</span>(<span class="number">5.289</span>);</span><br><span class="line"><span class="keyword">insert into</span> tb3(salary) <span class="keyword">values</span>(<span class="number">1.282</span>); <span class="comment">-- 整数部分不能超过m位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb3;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb3;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>   <span class="number">1.28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>   <span class="number">5.29</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span>   <span class="number">1.28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-3-字符串">2.3 字符串</h3><ul><li>char(m)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">定长字符串，速度快</span><br><span class="line">m<span class="operator">&lt;=</span><span class="number">225</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 无论多长，固定11位存储【超出报错】</span></span><br><span class="line"><span class="keyword">create table</span> tb4(</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  mobile <span class="type">char</span>(<span class="number">11</span>)</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>varchar(m)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">变长字符串，节省空间</span><br><span class="line">m<span class="operator">&lt;=</span><span class="number">65535</span>bit</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 真实多长，按照多长存储【超出报错】</span></span><br><span class="line"><span class="keyword">create table</span> tb4(</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  mobile <span class="type">varchar</span>(<span class="number">11</span>)</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>text</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">变长的大字符串，可以有<span class="number">65535</span>（<span class="number">2</span><span class="operator">*</span><span class="operator">*</span><span class="number">16</span><span class="number">-1</span>）个字符，一般用于长文本</span><br><span class="line"></span><br><span class="line"><span class="keyword">create table</span> news(</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  title <span class="type">varchar</span>(<span class="number">128</span>),</span><br><span class="line">  content text</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>mediumtext</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2**24-1</span><br></pre></td></tr></table></figure><ul><li>longtext</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2**32-1</span><br></pre></td></tr></table></figure><h3 id="2-4-时间">2.4 时间</h3><ul><li>datetime</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD HH:MM:SS (<span class="number">1000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="operator">/</span><span class="number">9999</span><span class="number">-12</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span>)</span><br></pre></td></tr></table></figure><ul><li>date</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD (<span class="number">1000</span><span class="number">-01</span><span class="number">-01</span><span class="operator">/</span><span class="number">9999</span><span class="number">-12</span><span class="number">-31</span>)</span><br></pre></td></tr></table></figure><h4 id="练习题：用户表">练习题：用户表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> account(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span>,</span><br><span class="line">  password <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">not null</span>,</span><br><span class="line">  email <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span>,</span><br><span class="line">  age tinyint,</span><br><span class="line">  salary <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">  ctime datetime</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> account(name, password, email, age, salary, ctime) <span class="keyword">values</span>(&quot;Mike&quot;, &quot;123&quot;, &quot;xx@live.com&quot;, <span class="number">19</span>, <span class="number">1000.20</span>, &quot;2023-12-11 11:11&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> password <span class="operator">|</span> email       <span class="operator">|</span> age  <span class="operator">|</span> salary  <span class="operator">|</span> ctime               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Mike <span class="operator">|</span> <span class="number">123</span>      <span class="operator">|</span> xx<span class="variable">@live</span>.com <span class="operator">|</span>   <span class="number">19</span> <span class="operator">|</span> <span class="number">1000.20</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-12</span><span class="number">-11</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+----------+-------------+------+---------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-数据行操作">3. 数据行操作</h3><h4 id="3-1-增加数据">3.1 增加数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert into</span> 表名(列<span class="number">1</span>, 列<span class="number">2</span>) <span class="keyword">values</span>(值, 值);</span><br><span class="line"><span class="keyword">insert into</span> 表名(列<span class="number">1</span>, 列<span class="number">2</span>) <span class="keyword">values</span>(值, 值);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> 表名(列<span class="number">1</span>, 列<span class="number">2</span>) <span class="keyword">values</span>(值, 值), (值, 值), (值, 值), (值, 值);</span><br></pre></td></tr></table></figure><h4 id="3-2-删除数据">3.2 删除数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">and</span> 条件;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">or</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 把account全部删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除account表中id=3的行</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> account <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-修改数据">3.3 修改数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值, 列<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="operator">=</span>值 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> password<span class="operator">=</span>&quot;hahahah&quot;;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> email<span class="operator">=</span>&quot;qwqwqw&quot; <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> age<span class="operator">=</span>age<span class="operator">+</span><span class="number">3</span> <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="3-4-查询数据">3.4 查询数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 列名, 列名 <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 列名, 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="keyword">select</span> name, email <span class="keyword">from</span> account;</span><br><span class="line"><span class="keyword">select</span> name, email <span class="keyword">from</span> account <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="4-员工管理案例">4. 员工管理案例</h3><h4 id="4-1-要求">4.1 要求</h4><ul><li><p>使用mysql内置工具</p><ul><li><p>创建数据库：unicom  <code>以建立联通员工管理数据库为例</code></p></li><li><p>数据表：admin</p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表名：admin</span><br><span class="line">列：</span><br><span class="line">    id：主键，自增</span><br><span class="line">    username：字符串，不为空</span><br><span class="line">    password：字符串，不为空</span><br><span class="line">    mobile：字符串，不为空</span><br></pre></td></tr></table></figure><p>​</p><ul><li>python代码实现<ul><li>添加用户</li><li>删除用户</li><li>查看用户</li><li>更新用户信息</li></ul></li></ul><h4 id="4-2-mysql创建">4.2 mysql创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database unicom <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci; </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use unicom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create table</span> admin(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">not null</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span>,</span><br><span class="line">  mobile <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">not null</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h4 id="4-3-python操作">4.3 python操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h5 id="4-3-1-简单创建和操作">4.3.1 简单创建和操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 链接mysql</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;&lt;PASSWORD&gt;&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;insert into admin(username,password,mobile) values(&quot;mike&quot;,&quot;abc123&quot;,&quot;12345678901&quot;)&#x27;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭链接</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><ul><li>格式化发送指令（列表）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 格式化发送指令[]</span></span><br><span class="line">sql = <span class="string">&#x27;insert into admin(username,password,mobile) values(%s,%s,%s)&#x27;</span></span><br><span class="line">cursor.execute(sql, [<span class="string">&quot;Ann&quot;</span>, <span class="string">&quot;qwe456&quot;</span>, <span class="string">&quot;09876543211&quot;</span>])</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><ul><li>格式化发送指令（字典）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 格式化发送指令&#123;&#125;</span></span><br><span class="line">sql = <span class="string">&#x27;insert into admin(username,password,mobile) values(%(n1)s,%(n2)s,%(n3)s)&#x27;</span></span><br><span class="line">cursor.execute(sql, &#123;<span class="string">&quot;n1&quot;</span>:<span class="string">&quot;Cindy&quot;</span>, <span class="string">&quot;n2&quot;</span>:<span class="string">&quot;zxc789&quot;</span>, <span class="string">&quot;n3&quot;</span>:<span class="string">&quot;56473829101&quot;</span>&#125;)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Cindy    <span class="operator">|</span> zxc789   <span class="operator">|</span> <span class="number">56473829101</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><h5 id="4-3-2-在python终端动态创建">4.3.2 在python终端动态创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入信息，输入q退出&quot;</span>)</span><br><span class="line">    user = <span class="built_in">input</span>(<span class="string">&quot;用户名：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;密码：&quot;</span>)</span><br><span class="line">    mobile = <span class="built_in">input</span>(<span class="string">&quot;电话号码：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 链接mysql</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;Silence2004&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 发送指令</span></span><br><span class="line">    sql = <span class="string">&#x27;insert into admin(username,password,mobile) values(%s,%s,%s)&#x27;</span></span><br><span class="line">    cursor.execute(sql, [user, pwd, mobile])</span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 关闭链接</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><h5 id="4-3-3-查询数据">4.3.3 查询数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步和第3步不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from admin&quot;</span>)  <span class="comment"># 指令就是mysql命令，格式和使用方式完全相同</span></span><br><span class="line">data_list = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data_list</span></span><br><span class="line">[</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;mike&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;abc123&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;12345678901&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Ann&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;qwe456&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;09876543211&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Cindy&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;zxc789&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;56473829101&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Kage&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;slefln&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;1412344&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>格式化查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from admin where id &gt; %s&quot;</span>, [<span class="number">2</span>, ])</span><br><span class="line">data_list = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Ann&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;qwe456&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;09876543211&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Cindy&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;zxc789&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;56473829101&#x27;</span>&#125;, </span><br><span class="line"> &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Kage&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;slefln&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;1412344&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>fetchone()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from admin where id &gt; %s&quot;</span>, [<span class="number">2</span>, ])</span><br><span class="line">res = cursor.fetchone()  <span class="comment"># 第一条数据</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Ann&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;qwe456&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>: <span class="string">&#x27;09876543211&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-4-删除数据">4.3.4 删除数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步和第3步不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;delete from admin where id = %s&quot;</span>, [<span class="number">5</span>, ])</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Cindy    <span class="operator">|</span> zxc789   <span class="operator">|</span> <span class="number">56473829101</span> <span class="operator">|</span>  <span class="comment">-- 删除</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Kage     <span class="operator">|</span> slefln   <span class="operator">|</span> <span class="number">1412344</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> John     <span class="operator">|</span> adkadkaw <span class="operator">|</span> <span class="number">134231</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Kage     <span class="operator">|</span> slefln   <span class="operator">|</span> <span class="number">1412344</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> John     <span class="operator">|</span> adkadkaw <span class="operator">|</span> <span class="number">134231</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><h5 id="4-3-5-修改数据">4.3.5 修改数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步和第3步不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，发送指令</span></span><br><span class="line">cursor.execute(<span class="string">&quot;update admin set mobile=%s where id=%s&quot;</span>, [<span class="number">123</span>, <span class="number">1</span>, ])</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">12345678901</span> <span class="operator">|</span>  <span class="comment">-- 修改前</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Kage     <span class="operator">|</span> slefln   <span class="operator">|</span> <span class="number">1412344</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> John     <span class="operator">|</span> adkadkaw <span class="operator">|</span> <span class="number">134231</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> mike     <span class="operator">|</span> abc123   <span class="operator">|</span> <span class="number">123</span>         <span class="operator">|</span>  <span class="comment">-- 修改后</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Ann      <span class="operator">|</span> qwe456   <span class="operator">|</span> <span class="number">09876543211</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Kage     <span class="operator">|</span> slefln   <span class="operator">|</span> <span class="number">1412344</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> John     <span class="operator">|</span> adkadkaw <span class="operator">|</span> <span class="number">134231</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+-------------+</span></span><br></pre></td></tr></table></figure><h4 id="4-4-总结">4.4 总结</h4><ul><li>在<code>新增</code> <code>删除</code> <code>修改</code>一定要commit</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><ul><li>在<code>查询</code>时，不需要commit，但要fetchall/fetchone</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="comment"># 第一条数据，字典，无数据时是空列表</span></span><br><span class="line">ans1 = cursor.fetchone()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有数据，元素为字典的列表，无数据时是None</span></span><br><span class="line">ans2 = cursor.fetchall()</span><br></pre></td></tr></table></figure><ul><li>不要用python的字符串格式化，一定要execute</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;...%s   ...%s   ...%s&quot;</span>, [<span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, <span class="string">&quot;..&quot;</span>, ])</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="5-案例：Flask-MySQL">5. 案例：Flask + MySQL</h3><h4 id="5-1-新增用户">5.1 新增用户</h4><ul><li>网页/add/user</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/add/user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;手机号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提 交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>python操作，链接mysql</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add/user&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;add_user.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    user = request.form.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    password = request.form.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    mobile = request.form.get(<span class="string">&quot;mobile&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 链接mysql</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;&lt;PASSWORD&gt;&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 发送指令</span></span><br><span class="line">    sql = <span class="string">&quot;insert into admin(username,password,mobile) values(%s,%s,%s)&quot;</span></span><br><span class="line">    cursor.execute(sql, [user,password,mobile])</span><br><span class="line">    conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 关闭链接</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;添加成功&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> mobile <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> somebody <span class="operator">|</span> <span class="number">123</span>      <span class="operator">|</span> <span class="number">12345</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+--------+</span></span><br></pre></td></tr></table></figure><h4 id="5-2-查询并输出到页面">5.2 查询并输出到页面</h4><ul><li>网页show/user</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for item in data_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.password &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.mobile &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>python操作，赠加函数show_user</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/show/user&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user</span>():</span><br><span class="line">    <span class="comment"># 1. 链接mysql</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">3306</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;&lt;PASSWORD&gt;&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, db=<span class="string">&#x27;unicom&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 发送指令</span></span><br><span class="line">    sql = <span class="string">&quot;select * from admin&quot;</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    data_list = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 关闭链接</span></span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;show_user.html&quot;</span>, data_list=data_list)</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240705%E4%B8%8B%E5%8D%8852806819.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240705%E4%B8%8B%E5%8D%8852855131.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《经济学原理》完整笔记整理</title>
      <link href="/posts/40c55931.html"/>
      <url>/posts/40c55931.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主根据复旦大学本科课程《经济学原理》整理的课程笔记。点击链接即可前往对应文章查看，笔记以 PDF 的格式展示。更多信息，可前往本人的 <a href="https://github.com/isKage/iskage.github.io">Github库</a> 中查询。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>课程书籍为曼昆 (N.Gregory Mankiw) 所著，北京大学出版社出版的<a href="https://book.douban.com/subject/26435630/">《经济学原理》</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><!-- [经济学十大原理](./fb0b40e4.html) --><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter01%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8D%81%E5%A4%A7%E5%8E%9F%E7%90%86.pdf">1 经济学十大原理</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter02%E5%83%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%AE%B6%E4%B8%80%E6%A0%B7%E6%80%9D%E8%80%83.pdf">2 像经济学家一样思考</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter03%E7%9B%B8%E4%BA%92%E4%BE%9D%E5%AD%98%E5%92%8C%E8%B4%B8%E6%98%93%E6%94%B6%E7%9B%8A.pdf">3 相互依存和贸易收益</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter08%E7%A8%8E%E6%94%B6%E7%9A%84%E4%BB%A3%E4%BB%B7.pdf">4 税收的代价</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter09%E5%9B%BD%E9%99%85%E8%B4%B8%E6%98%93.pdf">5 国际贸易</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter10%E5%A4%96%E9%83%A8%E6%80%A7.pdf">6 外部性</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter16%E5%9E%84%E6%96%AD%E7%AB%9E%E4%BA%89.pdf">7 垄断竞争</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter17%E5%AF%A1%E5%A4%B4.pdf">8 寡头</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter23%E4%B8%80%E5%9B%BD%E6%94%B6%E5%85%A5%E7%9A%84%E8%A1%A1%E9%87%8F.pdf">9 一国收入的衡量</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter24%E7%94%9F%E6%B4%BB%E8%B4%B9%E7%94%A8%E7%9A%84%E8%A1%A1%E9%87%8F.pdf">10 生活费用的衡量</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter26%E8%B4%A7%E5%B8%81%E5%88%B6%E5%BA%A6.pdf">11 储蓄、投资和金融体系 金融学的基本工具 货币制度</a></p><p><a href="../pdf/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/chapter34%E8%B4%A7%E5%B8%81%E6%94%BF%E7%AD%96%E5%92%8C%E8%B4%A2%E6%94%BF%E6%94%BF%E7%AD%96%E5%AF%B9%E6%80%BB%E9%9C%80%E6%B1%82%E7%9A%84%E5%BD%B1%E5%93%8D.pdf">12 货币政策和财政政策对总需求的影响</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 经济学原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《管理学导论》完整笔记整理</title>
      <link href="/posts/a6a9785e.html"/>
      <url>/posts/a6a9785e.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主根据复旦大学本科课程《管理学导论》整理的课程笔记。点击链接即可前往对应文章查看，笔记以 PDF 的格式展示。更多信息，可前往本人的 <a href="https://github.com/isKage/iskage.github.io">Github库</a> 中查询。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>课程书籍为《管理学》编写组编写，高等教育出版社出版的<a href="https://book.douban.com/subject/30875101/">《管理学》</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/1%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%84%E7%BB%87%E5%AF%BC%E8%AE%BA.pdf">1 管理与组织导论</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/2%E7%AE%A1%E7%90%86%E4%B8%8E%E7%AE%A1%E7%90%86%E8%80%85.pdf">2 管理与管理者</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/3%E7%BB%8F%E5%85%B8%E7%AE%A1%E7%90%86%E7%90%86%E8%AE%BA.pdf">3 经典管理理论</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/4%E5%86%B3%E7%AD%96.pdf">4 决策</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/5%E6%88%98%E7%95%A5%E7%AE%A1%E7%90%86%E4%B8%8A.pdf">5 战略管理(上)</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/5%E6%88%98%E7%95%A5%E7%AE%A1%E7%90%86%E4%B8%8B.pdf">5 战略管理(下)</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/6%E7%BB%84%E7%BB%87%E8%AE%BE%E8%AE%A1.pdf">6 组织设计</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/7%E4%BA%BA%E5%91%98%E9%85%8D%E7%BD%AE.pdf">7 人员配置</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/8%E9%A2%86%E5%AF%BC%E5%8A%9B.pdf">8 领导力</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/9%E8%AE%A1%E5%88%92%E5%92%8C%E7%BB%84%E7%BB%87%E6%96%87%E5%8C%96%E4%B8%8A.pdf">9 计划和组织文化(上)</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/9%E8%AE%A1%E5%88%92%E5%92%8C%E7%BB%84%E7%BB%87%E6%96%87%E5%8C%96%E4%B8%8B.pdf">9 计划和组织文化(下)</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/10%E6%BF%80%E5%8A%B1.pdf">10 激励</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/11%E6%B2%9F%E9%80%9A.pdf">11 沟通</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/12%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%BF%90%E8%90%A5.pdf">12 控制与运营</a></p><p><a href="../pdf/%E7%AE%A1%E7%90%86%E5%AD%A6%E5%AF%BC%E8%AE%BA%E7%AC%94%E8%AE%B0/13%E7%BB%84%E7%BB%87%E5%88%9B%E6%96%B0%E4%B8%8E%E7%BB%84%E7%BB%87%E5%8F%98%E9%9D%A9.pdf">13 组织创新与组织变革</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 管理学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理学导论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/baidu_verify_codeva-Mp1sMZQTvc.html"/>
      <url>/baidu_verify_codeva-Mp1sMZQTvc.html</url>
      
        <content type="html"><![CDATA[aee881fde1ab2586e96db3ff1583b343]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/google15991a1123c5c160.html"/>
      <url>/google15991a1123c5c160.html</url>
      
        <content type="html"><![CDATA[google-site-verification: google15991a1123c5c160.html]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类页</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>以下为已经归档的文章，点击即可跳转至文档目录</p></div><div class="link-container">    <a href="../posts/a6a9785e.html" class="styled-link" style='color:white'>管理学导论笔记</a>    <a href="../posts/40c55931.html" class="styled-link" style='color:white'>经济学原理笔记</a></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  /* 全屏按钮 */  .fullscreen-btn {    position: absolute;    top: 10px;    right: 10px;    z-index: 10;    padding: 6px 10px;    background: linear-gradient(135deg, #007BFF, #0056b3);    color: white;    font-size: 10px;    font-weight: bold;    border: none;    border-radius: 2.5px;    cursor: pointer;    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.2);    transition: all 0.3s ease;  }    .fullscreen-btn:hover {    background: linear-gradient(135deg, #0056b3, #007BFF);    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.3);    transform: scale(1.05);  }    .fullscreen-btn:active {    background: linear-gradient(135deg, #004085, #0069d9);    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);    transform: scale(0.95);  }  /* 分类页样式 */  /* 容器设置 */.link-container {  display: flex;  flex-wrap: wrap; /* 自动换行 */  gap: 15px; /* 间距 */  justify-content: start; /* 左对齐 */  padding: 10px;}/* 单个块样式 */.styled-link {  position: relative;  display: inline-block;  font-size: 1rem; /* 字体大小 */  font-weight: bold;  text-decoration: none; /* 去掉下划线 */  color: #ffffff; /* 字体颜色为白色 */  padding: 10px 20px;  border-radius: 8px; /* 圆角 */  transition: all 0.3s ease; /* 动效 */  overflow: hidden; /* 防止子元素溢出 */  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15); /* 按钮阴影 */}/* 背景颜色设置（随机 4 种颜色） */.styled-link:nth-child(7n+6) { background-color: #3d33ff; }.styled-link:nth-child(7n+1) { background-color: #ff3333; }.styled-link:nth-child(7n+2) { background-color: #33ff36; }.styled-link:nth-child(7n+3) { background-color: #3385FF; }.styled-link:nth-child(7n+4) { background-color: #9933FF; }.styled-link:nth-child(7n+5) { background-color: #33ebff; }.styled-link:nth-child(7n+7) { background-color: #ff3369; }/* 主内容文字 */.styled-link span {  position: relative;  z-index: 1; /* 确保文字在最上层 */  text-shadow: 0px 2px 5px rgba(0, 0, 0, 0.6); /* 字体阴影，增强可见性 */}/* 悬停效果 */.styled-link:hover {  transform: scale(1.05); /* 放大按钮 */  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3); /* 悬停时的按钮阴影 */}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/pdf-viewer.js"/>
      <url>/js/pdf-viewer.js</url>
      
        <content type="html"><![CDATA[document.addEventListener("DOMContentLoaded", function () {    const fullscreenBtn = document.querySelector(".fullscreen-btn");    const container = document.querySelector("#pdf-container");    const iframe = document.querySelector("#pdf-frame");      fullscreenBtn.addEventListener("click", function () {      if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {        // 已经在全屏模式，退出全屏        exitFullscreen();      } else {        // 进入全屏模式        enterFullscreen();      }    });      // 进入全屏模式    function enterFullscreen() {      if (container.requestFullscreen) {        container.requestFullscreen();      } else if (container.webkitRequestFullscreen) {        container.webkitRequestFullscreen(); // Safari      } else if (container.msRequestFullscreen) {        container.msRequestFullscreen(); // IE11      }    }      // 退出全屏模式    function exitFullscreen() {      if (document.exitFullscreen) {        document.exitFullscreen();      } else if (document.webkitExitFullscreen) {        document.webkitExitFullscreen(); // Safari      } else if (document.msExitFullscreen) {        document.msExitFullscreen(); // IE11      }    }      // 更新按钮文本并调整 iframe 大小    container.addEventListener("fullscreenchange", updateButtonText);    container.addEventListener("webkitfullscreenchange", updateButtonText);    container.addEventListener("msfullscreenchange", updateButtonText);      function updateButtonText() {      if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {        fullscreenBtn.textContent = "退出全屏"; // 进入全屏时更新按钮文本        iframe.style.width = "100vw"; // 全屏宽度        iframe.style.height = "100vh"; // 全屏高度      } else {        fullscreenBtn.textContent = "全屏模式"; // 退出全屏时恢复按钮文本        iframe.style.width = "100%"; // 恢复正常宽度        iframe.style.height = "600px"; // 恢复正常高度      }    }  });]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[(window._iconfont_svg_string_4810983 =  '<svg><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M98.21248349 469.39495801L1038.17046641 88.47058818c9.07562988-3.6554625 19.28571417 0.75630234 22.94117666 9.70588213 1.2605045 3.27731133 1.63865566 6.80672286 0.88235243 10.21008428L896.11164247 922.29411729c-1.89075674 9.57983203-11.21848769 15.75630263-20.79831884 13.73949579-2.39495801-0.50420127-4.66386592-1.51260469-6.68067275-2.89915927L619.93517187 756.15966406l-143.31932753 117.73109268c-14.49579815 11.97479004-35.92437011 9.8319331-47.89915928-4.66386592-2.64705908-3.27731133-4.66386592-6.93277295-6.05042051-10.96638662l-90.50420126-275.16806719-233.06722735-80.67226904c-9.20168086-3.15126035-14.11764697-13.23529453-10.84033565-22.43697451 1.63865566-4.78991602 5.29411729-8.69747871 9.9579832-10.58823545z" fill="#FCFDFC" ></path><path d="M878.84273516 961.62184883c-2.77310918 0-5.67226934-0.25210107-8.57142862-0.88235333-5.92436953-1.2605045-11.34453779-3.52941152-16.26050391-7.05882303L620.94357529 787.92436953l-128.44537822 105.50420156c-12.22689111 10.0840333-27.6050417 14.74789922-43.36134434 13.23529453-15.75630263-1.51260469-29.99999971-9.07562988-39.95798291-21.30252099-4.66386592-5.67226934-8.19327744-12.10084013-10.46218534-19.15966406l-86.59663859-263.31932725-221.2184874-76.63865625c-10.84033653-3.7815126-19.53781523-11.47058789-24.57983144-21.80672228s-5.67226934-21.93277325-1.89075674-32.77310887c4.03361367-11.72268896 12.98319346-21.05041991 24.45378222-25.71428585L1028.71668447 65.15126036c21.93277325-8.82352969 46.89075674 1.76470576 55.84033652 23.5714289 3.15126035 7.81512627 3.9075627 16.38655489 2.26890792 24.70588242L920.8175249 927.33613438c-4.15966377 20.29411758-22.05882334 34.28571445-41.97478974 34.28571445z m-258.90756329-205.46218477l248.69747901 176.97478975c2.01680684 1.38655459 4.28571387 2.39495801 6.68067276 2.89915928 9.57983203 1.89075674 18.90756299-4.28571387 20.79831885-13.7394958L1062.12004649 108.38655459c0.75630234-3.40336143 0.37815117-6.93277295-0.88235333-10.21008428-3.6554625-9.07562988-13.99159687-13.36134463-22.94117665-9.70588213L98.21248349 469.39495801c-4.66386592 1.89075674-8.31932754 5.79831943-10.08403417 10.58823545-1.51260469 4.41176484-1.2605045 9.20168086 0.75630322 13.48739472 2.01680684 4.28571387 5.67226934 7.4369751 10.08403331 8.94957979l233.06722646 80.67226904L422.54021445 858.2605042c1.2605045 4.03361367 3.40336143 7.68907529 6.05041963 10.96638662 5.79831943 7.05882393 13.99159687 11.34453779 22.94117667 12.22689111 9.07562988 0.88235332 17.89915957-1.76470576 24.95798349-7.56302519l143.44537763-117.73109268z" fill="#4A4A4A" ></path><path d="M331.90996221 582.96638692l92.89915927 277.81512538c5.54621836 16.51260498 23.31932783 25.46218477 39.83193282 19.91596642 3.6554625-1.2605045 6.93277295-3.02521026 9.8319331-5.42016739l144.8319331-117.73109268-145.33613437-104.49579814c261.05042021-253.10924385 393.27731104-381.42857109 396.55462148-384.8319334 0.50420127-0.50420127 2.26890791-3.02521026 0.37815118-6.1764706-1.13445353-1.38655459-2.89915927-2.89915927-6.17647061-1.89075586-177.73109209 105.75630263-355.33613408 213.40336113-532.81512597 322.81512626z" fill="#90d8f3" ></path><path d="M454.68307109 883.59663887c-5.04201709 0-9.9579832-1.13445353-14.62184823-3.40336143-7.81512627-3.9075627-13.7394958-10.58823545-16.51260499-18.90756299L330.39735753 582.58823487l0.88235243-0.50420128C507.87634854 473.0504205 687.24609628 364.39495771 864.09483594 259.01680713l0.25210107-0.12605098c3.15126035-1.00840342 5.54621836-0.25210107 7.5630252 2.26890791l0.12605009 0.12605009c2.14285693 3.52941152 0.50420127 6.55462177-0.50420126 7.68907618-3.40336143 3.52941152-136.38655459 132.60504199-395.54621895 383.8235291l145.46218535 104.62184825-146.09243671 118.73949609c-3.02521026 2.5210081-6.55462177 4.41176484-10.33613526 5.67226933-3.27731133 1.13445353-6.80672286 1.76470576-10.33613438 1.76470576z m-121.26050419-300.00000059l92.52100898 276.80672286c2.5210081 7.68907529 7.94117637 13.86554589 15.12605039 17.52100839 7.18487402 3.6554625 15.37815146 4.15966377 23.06722676 1.63865566 3.40336143-1.13445353 6.68067187-2.89915927 9.45378105-5.16806718l143.57142861-116.72268926L471.9519793 653.1764706l1.13445351-1.00840341C732.87634854 400.31932783 866.23769287 270.86554619 869.5150042 267.33613467c0 0 1.76470576-2.01680684 0.25210107-4.66386592-0.88235332-1.13445353-2.14285693-2.14285693-4.66386592-1.38655458-176.47058847 105.12605039-355.33613408 213.52941211-531.68067245 322.31092411z" fill="#CAE0EE" ></path><path d="M467.03601231 874.89915927l6.55462177-222.85714218 145.84033652 105.37815059-148.23529453 119.49579844c-1.13445353 0.88235332-2.64705908 0.75630234-3.52941152-0.37815118-0.37815117-0.37815117-0.63025223-1.00840342-0.63025224-1.63865567z" fill="#78bfe5" ></path><path d="M469.55702128 878.80672285c-1.13445353 0-2.14285693-0.50420127-2.89916015-1.38655459-0.50420127-0.75630234-0.88235332-1.63865566-0.88235244-2.52100899l6.68067188-225.25210019 148.99159687 107.7731086-1.26050449 1.00840341-148.23529365 119.49579844c-0.75630234 0.63025223-1.51260469 0.88235332-2.39495802 0.88235333z m5.29411729-224.36974775l-6.55462177 220.46218417c0 0.25210107 0.1260501 0.63025223 0.25210107 0.88235333 0.37815117 0.50420127 1.2605045 0.63025223 1.76470576 0.25210107l146.97479004-118.48739502-142.4369751-103.10924355z" fill="#94C3E2" ></path></symbol><symbol id="icon-music" viewBox="0 0 1024 1024"><path d="M903.108141 64.004733c-183.118598 3.806699-376.940978 48.998971-560.01455 111.995747-0.11154-1.285273 0 559.991014 0 559.991014-33.038464-8.006348-89.207741-2.405793-128.463814 16.297175-72.740698 34.886555-112.499214 105.334024-88.587618 157.412123 23.798009 51.966559 102.141308 65.967434 174.938288 31.139208 66.584488-37.635155 98.110505-92.848665 98.110505-148.84705l0.896416-475.993948c144.275941-44.73997 302.868959-75.821873 447.12034-83.995019l0 447.990151c-42.00058-7.897877-90.718141 3.695159-130.926912 22.960944-72.851215 34.885532-112.554472 105.33607-88.586594 157.298536 23.853267 52.080146 102.140285 66.081021 174.938288 31.194466 51.801806-24.750707 100.57565-67.983347 100.57565-154.560168L903.108141 64.004733 903.108141 64.004733zM903.108141 64.004733" fill="#272636" ></path></symbol><symbol id="icon-university" viewBox="0 0 1024 1024"><path d="M510.543324 126.388549 62.385351 351.059518l64.021106 42.158169 0 405.41345 64.021106 32.007995L190.427562 434.199053l319.821049 204.374714 264.381389-170.96479 184.074366-119.685893L510.543324 126.388549zM510.543324 126.388549" fill="#272636" ></path><path d="M778.900258 510.524392 510.543324 686.124759 239.508397 510.524392l-17.065677 163.115008c32.014134 24.921599 224.078475 156.99973 288.104697 221.020836 64.022129-64.021106 256.087493-196.007139 288.100604-220.952274L778.900258 510.524392 778.900258 510.524392zM778.900258 510.524392" fill="#272636" ></path></symbol><symbol id="icon-data" viewBox="0 0 1024 1024"><path d="M512 0C296.192 0 64 65.056 64 208v608C64 958.88 296.192 1024 512 1024c215.776 0 448-65.12 448-208v-608C960 65.056 727.744 0 512 0z m384 816c0 79.488-171.936 144-384 144-212.096 0-384-64.512-384-144v-119.552C194.112 764.576 353.6 800 512 800s317.888-35.424 384-103.552V816z m0-192h-0.128c0 0.32 0.128 0.672 0.128 0.992C896 704 724.064 768 512 768S128 704 128 624.992c0-0.32 0.128-0.672 0.128-0.992H128v-119.552C194.112 572.576 353.6 608 512 608s317.888-35.424 384-103.552V624z m0-192h-0.128c0 0.32 0.128 0.672 0.128 0.992C896 512 724.064 576 512 576S128 512 128 432.992c0-0.32 0.128-0.672 0.128-0.992H128v-109.952C211.872 385.952 365.6 416 512 416s300.128-30.048 384-93.952V432zM512 352C299.904 352 128 287.488 128 208 128 128.448 299.904 64 512 64c212.064 0 384 64.448 384 144 0 79.488-171.936 144-384 144z" fill="#333333" ></path><path d="M800 832m-32 0a32 32 0 1 0 64 0 32 32 0 1 0-64 0Z" fill="#333333" ></path><path d="M800 640m-32 0a32 32 0 1 0 64 0 32 32 0 1 0-64 0Z" fill="#333333" ></path><path d="M800 448m-32 0a32 32 0 1 0 64 0 32 32 0 1 0-64 0Z" fill="#333333" ></path></symbol><symbol id="icon-fudandaxue" viewBox="0 0 1024 1024"><path d="M93.866667 513.706667a418.133333 418.133333 0 1 0 836.266666 0 418.133333 418.133333 0 1 0-836.266666 0Z" fill="#FFFFFF" ></path><path d="M512 81.92C273.066667 81.92 80.213333 274.773333 80.213333 513.706667S273.066667 947.2 512 947.2s431.786667-194.56 431.786667-433.493333S750.933333 81.92 512 81.92z m0 851.626667c-230.4 0-418.133333-187.733333-418.133333-418.133334s187.733333-418.133333 418.133333-418.133333 418.133333 187.733333 418.133333 418.133333-187.733333 418.133333-418.133333 418.133334z" fill="#D5271C" ></path><path d="M785.066667 293.546667c-1.706667-3.413333-3.413333-3.413333-5.12-1.706667-6.826667 5.12-13.653333 10.24-18.773334 13.653333l-1.706666 1.706667c-3.413333 3.413333-3.413333 5.12-1.706667 10.24 0 1.706667 1.706667 1.706667 0 5.12 0 0-1.706667 0-1.706667-1.706667-3.413333-3.413333-6.826667-6.826667-8.533333-10.24-5.12-6.826667-10.24-13.653333-13.653333-17.066666 0-1.706667-1.706667-1.706667 0-3.413334 1.706667 0 3.413333 1.706667 5.12 3.413334s3.413333 1.706667 5.12 0 3.413333-1.706667 6.826666-3.413334c8.533333-6.826667 13.653333-11.946667 22.186667-17.066666 6.826667-6.826667 13.653333-11.946667 20.48-17.066667 1.706667-1.706667 3.413333-1.706667 5.12-3.413333 3.413333-3.413333 3.413333-6.826667 1.706667-10.24 0-1.706667-1.706667-1.706667-1.706667-3.413334 0 0 1.706667-1.706667 1.706667 0l1.706666 1.706667c8.533333 10.24 15.36 18.773333 22.186667 27.306667 3.413333 3.413333 5.12 6.826667 6.826667 10.24 3.413333 5.12 5.12 8.533333 5.12 11.946666 3.413333 13.653333-11.946667 23.893333-20.48 22.186667-3.413333 0-6.826667-1.706667-10.24-3.413333-1.706667 0-3.413333-1.706667-5.12-1.706667 0 1.706667-1.706667 1.706667-1.706667 3.413333-3.413333 10.24-5.12 17.066667-8.533333 27.306667 0 1.706667-1.706667 5.12-1.706667 6.826667-1.706667 3.413333-1.706667 6.826667-1.706667 11.946666v1.706667H785.066667c-5.12-5.12-10.24-11.946667-11.946667-15.36-1.706667-1.706667-1.706667-3.413333 0-5.12 3.413333-10.24 6.826667-18.773333 10.24-29.013333 0-6.826667 1.706667-11.946667 1.706667-15.36z m40.96-11.946667c0-6.826667-3.413333-11.946667-6.826667-13.653333-1.706667-1.706667-3.413333-1.706667-5.12 0-3.413333 3.413333-6.826667 5.12-10.24 8.533333-5.12 3.413333-10.24 6.826667-13.653333 11.946667-1.706667 1.706667-1.706667 3.413333 0 5.12 3.413333 3.413333 5.12 5.12 8.533333 6.826666 3.413333 3.413333 8.533333 3.413333 11.946667 1.706667 6.826667-3.413333 11.946667-6.826667 13.653333-11.946667 0-5.12 0-6.826667 1.706667-8.533333z" fill="#DA251B" ></path><path d="M196.266667 469.333333v-3.413333c0-5.12-1.706667-8.533333-6.826667-8.533333-13.653333-5.12-29.013333-8.533333-42.666667-11.946667-5.12-1.706667-10.24-3.413333-13.653333-5.12h-1.706667c-3.413333 0-5.12 0-8.533333 3.413333 0 0 0 1.706667-1.706667 1.706667-1.706667 1.706667-1.706667 3.413333-3.413333 3.413333-1.706667-1.706667 0-3.413333 0-3.413333 3.413333-11.946667 6.826667-20.48 10.24-32.426667 1.706667-6.826667 5.12-11.946667 6.826667-15.36 5.12-8.533333 11.946667-13.653333 20.48-15.36 6.826667-1.706667 13.653333-3.413333 18.773333-1.706666 8.533333 1.706667 13.653333 5.12 22.186667 10.24 8.533333 6.826667 13.653333 13.653333 13.653333 25.6 1.706667 6.826667 0 13.653333-1.706667 20.48l-10.24 35.84s0 1.706667-1.706666 1.706666c1.706667-5.12 1.706667-5.12 0-5.12z m-37.546667-73.386666c-3.413333 0-8.533333 0-11.946667 1.706666-8.533333 1.706667-13.653333 6.826667-13.653333 13.653334-1.706667 6.826667 0 8.533333 5.12 10.24 6.826667 3.413333 15.36 5.12 25.6 6.826666 11.946667 3.413333 22.186667 6.826667 34.133333 10.24h3.413334c3.413333 0 5.12 0 6.826666-3.413333 3.413333-6.826667 3.413333-17.066667-5.12-23.893333-3.413333-3.413333-6.826667-5.12-10.24-6.826667-11.946667-5.12-23.893333-8.533333-34.133333-8.533333z" fill="#D5271C" ></path><path d="M774.826667 215.04c-5.12 6.826667-10.24 13.653333-11.946667 18.773333-1.706667-1.706667-3.413333-1.706667-1.706667-3.413333 0-1.706667 1.706667-3.413333 1.706667-5.12 1.706667-6.826667 1.706667-13.653333-3.413333-18.773333-3.413333-3.413333-8.533333-6.826667-11.946667-10.24-1.706667 0-1.706667-1.706667-3.413333-1.706667s-3.413333 0-5.12 1.706667c-1.706667 3.413333-5.12 6.826667-6.826667 10.24-3.413333 5.12-6.826667 10.24-10.24 13.653333 1.706667 3.413333 5.12 3.413333 6.826667 5.12 5.12 1.706667 10.24 1.706667 13.653333-1.706667l5.12-5.12s1.706667 0 3.413333-1.706666c0 1.706667 0 1.706667-1.706666 3.413333-6.826667 10.24-13.653333 18.773333-20.48 30.72h-1.706667v-1.706667-3.413333c0-1.706667 1.706667-3.413333 1.706667-5.12 1.706667-6.826667 0-11.946667-5.12-15.36-1.706667-1.706667-3.413333-1.706667-5.12-3.413333-1.706667 0-1.706667 1.706667-1.706667 1.706666-5.12 8.533333-10.24 13.653333-15.36 22.186667-3.413333 3.413333-3.413333 6.826667 1.706667 10.24 10.24 8.533333 20.48 13.653333 35.84 8.533333 3.413333-1.706667 5.12-1.706667 8.533333-3.413333h3.413333c-1.706667 3.413333-11.946667 11.946667-17.066666 17.066667 0 0-1.706667 0-1.706667-1.706667-17.066667-13.653333-35.84-23.893333-52.906667-37.546667-1.706667 0-1.706667-1.706667-3.413333-1.706666v-1.706667h3.413333c3.413333 3.413333 3.413333 3.413333 8.533334-1.706667 11.946667-15.36 22.186667-32.426667 34.133333-47.786666 3.413333-3.413333 3.413333-6.826667 0-10.24l-3.413333-3.413334V170.666667h1.706666c1.706667 0 1.706667 1.706667 3.413334 1.706666 10.24 6.826667 18.773333 13.653333 29.013333 20.48 8.533333 5.12 15.36 11.946667 22.186667 15.36-1.706667 5.12-1.706667 6.826667 0 6.826667zM279.893333 191.146667c1.706667 1.706667 1.706667 1.706667 0 0v3.413333c-3.413333 5.12-3.413333 8.533333 1.706667 13.653333 13.653333 15.36 29.013333 32.426667 42.666667 49.493334 1.706667 1.706667 1.706667 3.413333 3.413333 5.12 0 1.706667-1.706667 3.413333-3.413333 1.706666-5.12 0-8.533333-1.706667-11.946667-1.706666l-25.6-5.12c-5.12 0-10.24-1.706667-13.653333-1.706667-10.24-1.706667-18.773333-3.413333-29.013334-5.12h-3.413333c0 1.706667 1.706667 1.706667 1.706667 1.706667 10.24 11.946667 20.48 23.893333 32.426666 35.84 0 1.706667 1.706667 1.706667 1.706667 1.706666 3.413333 3.413333 6.826667 3.413333 11.946667 1.706667 1.706667 0 1.706667-1.706667 3.413333-1.706667v1.706667c0 1.706667-1.706667 1.706667-3.413333 3.413333-5.12 5.12-10.24 10.24-15.36 11.946667-1.706667 0-1.706667 1.706667-3.413334 0 0-1.706667 1.706667-3.413333 1.706667-3.413333 3.413333-5.12 1.706667-8.533333 0-11.946667-3.413333-3.413333-5.12-6.826667-8.533333-8.533333-10.24-11.946667-18.773333-22.186667-29.013334-34.133334-1.706667-1.706667-5.12-3.413333-8.533333-3.413333h-8.533333s-1.706667 0-3.413334-1.706667c0-1.706667 1.706667-1.706667 1.706667-1.706666 5.12-5.12 10.24-8.533333 13.653333-13.653334 1.706667-1.706667 5.12-3.413333 6.826667-1.706666 11.946667 1.706667 20.48 3.413333 32.426667 5.12 10.24 1.706667 18.773333 3.413333 29.013333 5.12h3.413333c0-1.706667 0-1.706667-1.706666-1.706667-8.533333-10.24-15.36-17.066667-23.893334-27.306667-3.413333-5.12-8.533333-5.12-13.653333-1.706666h-3.413333V204.8c10.24-1.706667 13.653333-6.826667 22.186666-13.653333 0 1.706667 0 1.706667 0 0zM527.36 199.68h-3.413333c-1.706667 0-1.706667-1.706667-3.413334-3.413333-17.066667-17.066667-35.84-37.546667-52.906666-54.613334l-3.413334-3.413333c-1.706667 0-1.706667 1.706667-1.706666 1.706667 1.706667 15.36 1.706667 30.72 3.413333 46.08v1.706666c0 5.12 3.413333 8.533333 8.533333 8.533334 1.706667 0 3.413333-1.706667 3.413334 1.706666 0 1.706667-1.706667 1.706667-3.413334 1.706667-6.826667 0-11.946667 1.706667-18.773333 1.706667h-3.413333v-1.706667s1.706667-1.706667 3.413333-1.706667 3.413333-1.706667 5.12-1.706666c1.706667-1.706667 3.413333-1.706667 3.413333-5.12V187.733333c0-5.12 0-10.24-1.706666-13.653333-1.706667-13.653333-1.706667-27.306667-3.413334-39.253333 0-3.413333-1.706667-5.12-3.413333-8.533334-1.706667-1.706667-5.12-3.413333-6.826667-5.12l-1.706666-1.706666c0-1.706667 1.706667-1.706667 3.413333-1.706667h13.653333c3.413333 0 6.826667 0 10.24-1.706667l23.893334 23.893334c8.533333 8.533333 13.653333 15.36 22.186666 23.893333 1.706667 0 1.706667-1.706667 1.706667-1.706667v-13.653333c0-6.826667-1.706667-13.653333-1.706667-20.48v-3.413333c-1.706667-5.12-3.413333-6.826667-8.533333-8.533334-1.706667 0-3.413333 0-3.413333-1.706666v-1.706667-1.706667c8.533333-1.706667 15.36-1.706667 23.893333-1.706666 0 1.706667 0 1.706667-1.706667 1.706666H529.066667c-3.413333 1.706667-5.12 5.12-5.12 8.533334 0 5.12 0 10.24 1.706666 15.36 0 11.946667 1.706667 20.48 1.706667 32.426666 0 8.533333 1.706667 15.36 1.706667 22.186667-1.706667 8.533333-1.706667 8.533333-1.706667 10.24zM397.653333 873.813333c3.413333 0 6.826667 0 10.24 1.706667v5.12c6.826667 44.373333 39.253333-10.24 40.96-13.653333v-1.706667c-1.706667-1.706667-1.706667 0-3.413333 0-13.653333 8.533333-27.306667 5.12-37.546667-10.24-3.413333-6.826667-5.12-13.653333-1.706666-20.48 1.706667-3.413333 1.706667-6.826667 3.413333-10.24 3.413333-8.533333 11.946667-13.653333 20.48-15.36 11.946667-3.413333 22.186667 1.706667 30.72 11.946667 6.826667 11.946667 8.533333 23.893333 5.12 37.546666-3.413333 11.946667-6.826667 22.186667-11.946667 32.426667-5.12 6.826667-11.946667 11.946667-17.066666 11.946667-20.48 1.706667-32.426667-5.12-35.84-23.893334-3.413333-1.706667-3.413333-3.413333-3.413334-5.12 3.413333 0 0 1.706667 0 0z m58.026667-37.546666v-3.413334c-1.706667-6.826667-5.12-13.653333-11.946667-13.653333-6.826667-3.413333-13.653333-1.706667-17.066666 3.413333-5.12 3.413333-8.533333 8.533333-10.24 13.653334-1.706667 8.533333 0 13.653333 5.12 18.773333 8.533333 6.826667 20.48 8.533333 29.013333-3.413333 3.413333-3.413333 5.12-8.533333 5.12-15.36zM139.946667 650.24c-1.706667-1.706667-3.413333-3.413333-3.413334-5.12-5.12-15.36-8.533333-32.426667-13.653333-47.786667-1.706667-3.413333-1.706667-8.533333-3.413333-11.946666 1.706667 0 1.706667-1.706667 3.413333-1.706667 6.826667-1.706667 13.653333-3.413333 18.773333-5.12h1.706667s0 1.706667-1.706667 1.706667c-1.706667 1.706667-3.413333 1.706667-5.12 3.413333-3.413333 1.706667-5.12 5.12-6.826666 6.826667-1.706667 1.706667-1.706667 5.12-1.706667 6.826666 0 6.826667 1.706667 13.653333 3.413333 18.773334 1.706667 3.413333 3.413333 5.12 6.826667 3.413333 10.24-1.706667 17.066667-5.12 27.306667-8.533333 0 0 1.706667 0 1.706666-1.706667 0-3.413333-1.706667-6.826667-3.413333-8.533333 0-1.706667-3.413333-3.413333-6.826667-3.413334h-6.826666c-1.706667 0-1.706667 0-1.706667-1.706666 1.706667-1.706667 5.12-1.706667 6.826667-1.706667 10.24-3.413333 18.773333-5.12 27.306666-8.533333h6.826667v1.706666c-1.706667 0-1.706667 1.706667-3.413333 1.706667-1.706667 1.706667-3.413333 1.706667-5.12 3.413333-5.12 5.12-6.826667 10.24-5.12 15.36 0 1.706667 1.706667 1.706667 3.413333 1.706667 6.826667-1.706667 13.653333-3.413333 18.773333-5.12 1.706667 0 5.12-1.706667 6.826667-1.706667 5.12-1.706667 6.826667-5.12 6.826667-10.24v-5.12s0-1.706667 1.706666-1.706666c0 0 1.706667 0 1.706667 1.706666 3.413333 11.946667 8.533333 27.306667 11.946667 39.253334v1.706666s-1.706667 0-1.706667-1.706666c-3.413333 1.706667-3.413333 0-3.413333 0-1.706667-3.413333-5.12-5.12-8.533334-3.413334-1.706667 0-3.413333 0-5.12 1.706667-15.36 5.12-34.133333 10.24-49.493333 13.653333-1.706667 0-5.12 1.706667-6.826667 1.706667-5.12 1.706667-6.826667 3.413333-6.826666 10.24-5.12-1.706667-5.12-1.706667-5.12 0zM552.96 849.92c0-5.12 0-10.24 1.706667-15.36 3.413333-8.533333 8.533333-13.653333 15.36-15.36 5.12-1.706667 10.24-1.706667 13.653333-1.706667 17.066667 5.12 27.306667 17.066667 29.013333 35.84 1.706667 5.12 1.706667 11.946667 3.413334 17.066667 1.706667 8.533333 1.706667 17.066667-1.706667 25.6-3.413333 10.24-11.946667 15.36-20.48 17.066667-5.12 1.706667-10.24 1.706667-13.653333-1.706667-11.946667-5.12-18.773333-13.653333-20.48-25.6-3.413333-11.946667-6.826667-27.306667-6.826667-35.84z m11.946667 0c0 3.413333 0 6.826667 1.706666 10.24 1.706667 10.24 3.413333 18.773333 6.826667 27.306667 1.706667 5.12 3.413333 8.533333 8.533333 11.946666 17.066667 17.066667 29.013333-11.946667 25.6-23.893333 0-5.12-1.706667-11.946667-1.706666-15.36-1.706667-8.533333-3.413333-13.653333-6.826667-22.186667-1.706667-3.413333-5.12-6.826667-8.533333-10.24-6.826667-5.12-17.066667-3.413333-22.186667 6.826667-1.706667 3.413333-3.413333 8.533333-3.413333 15.36zM701.44 819.2c-1.706667 1.706667-5.12 3.413333-8.533333 5.12-3.413333-3.413333-20.48-35.84-23.893334-40.96 3.413333-3.413333 20.48-17.066667 35.84-29.013333 3.413333 1.706667 5.12 3.413333 6.826667 8.533333-10.24 6.826667-18.773333 15.36-29.013333 22.186667 1.706667 5.12 10.24 18.773333 11.946666 22.186666 0-1.706667 1.706667-1.706667 1.706667-3.413333 3.413333-6.826667 6.826667-11.946667 13.653333-13.653333 11.946667-6.826667 25.6-5.12 34.133334 5.12 1.706667 3.413333 5.12 5.12 6.826666 8.533333 6.826667 10.24 6.826667 20.48 1.706667 30.72-3.413333 8.533333-11.946667 13.653333-18.773333 15.36-10.24 3.413333-18.773333 1.706667-27.306667-5.12l-1.706667-1.706667v-1.706666c1.706667-3.413333 5.12-5.12 8.533334-8.533334 1.706667 0 1.706667 1.706667 3.413333 1.706667 11.946667 6.826667 22.186667 3.413333 29.013333-13.653333 1.706667-8.533333-1.706667-13.653333-6.826666-20.48l-5.12-5.12c-15.36-6.826667-25.6-1.706667-32.426667 13.653333-3.413333 3.413333-1.706667 6.826667 0 10.24-1.706667 1.706667 0-1.706667 0 0zM116.053333 518.826667c0 1.706667 0 3.413333 1.706667 5.12 0 3.413333 3.413333 6.826667 6.826667 6.826666H172.373333c3.413333 0 8.533333 0 11.946667-1.706666 8.533333-3.413333 11.946667-10.24 11.946667-17.066667 0-3.413333-1.706667-6.826667-1.706667-8.533333-1.706667-6.826667-6.826667-10.24-13.653333-11.946667-5.12-1.706667-10.24-1.706667-13.653334-1.706667H124.586667c-5.12 0-8.533333 3.413333-8.533334 8.533334v3.413333l-1.706666 1.706667-1.706667-1.706667v-1.706667-23.893333h1.706667c0 1.706667 0 1.706667 1.706666 3.413333 1.706667 3.413333 3.413333 5.12 6.826667 5.12h49.493333c5.12 0 10.24 1.706667 13.653334 3.413334 3.413333 1.706667 5.12 3.413333 6.826666 6.826666l5.12 10.24c1.706667 5.12 1.706667 11.946667 1.706667 15.36s0 8.533333-1.706667 11.946667c-3.413333 8.533333-8.533333 13.653333-17.066666 15.36-3.413333 1.706667-8.533333 1.706667-11.946667 1.706667H124.586667c-3.413333 0-6.826667 1.706667-6.826667 6.826666 0 1.706667 0 1.706667-1.706667 3.413334h-1.706666v-3.413334-29.013333c0-3.413333 0-6.826667 1.706666-8.533333-1.706667 0 0 0 0 0zM395.946667 139.946667c0-1.706667 0-1.706667 0 0 8.533333-5.12 15.36-6.826667 22.186666-10.24h1.706667v1.706666l-1.706667 1.706667c-5.12 3.413333-5.12 5.12-3.413333 11.946667 3.413333 8.533333 5.12 15.36 8.533333 23.893333 1.706667 5.12 3.413333 11.946667 5.12 15.36 1.706667 5.12 1.706667 10.24 3.413334 13.653333 0 6.826667-3.413333 13.653333-8.533334 15.36-11.946667 8.533333-22.186667 13.653333-37.546666 11.946667-6.826667 0-11.946667-5.12-15.36-11.946667 0-1.706667-1.706667-3.413333-1.706667-6.826666-5.12-13.653333-10.24-27.306667-13.653333-39.253334 0-1.706667-1.706667-5.12-3.413334-6.826666-1.706667-3.413333-3.413333-5.12-8.533333-3.413334H341.333333c-1.706667 0-3.413333 1.706667-3.413333 0s1.706667-1.706667 1.706667-1.706666c11.946667-5.12 23.893333-8.533333 35.84-13.653334 1.706667 0 1.706667 1.706667 0 1.706667-1.706667 1.706667-3.413333 1.706667-5.12 1.706667-1.706667 1.706667-3.413333 1.706667-3.413334 5.12s0 5.12 1.706667 8.533333c5.12 11.946667 8.533333 23.893333 13.653333 35.84 1.706667 3.413333 3.413333 6.826667 3.413334 10.24 1.706667 3.413333 3.413333 5.12 5.12 8.533333 3.413333 3.413333 8.533333 5.12 11.946666 5.12 5.12-1.706667 10.24-3.413333 13.653334-6.826666 5.12-5.12 6.826667-10.24 5.12-15.36 0-3.413333-1.706667-6.826667-3.413334-11.946667-5.12-11.946667-8.533333-23.893333-11.946666-35.84 0-1.706667-1.706667-3.413333-1.706667-5.12-3.413333-1.706667-6.826667-3.413333-8.533333-3.413333 1.706667 0 0 0 0 0zM785.066667 363.52c5.12-3.413333 11.946667-8.533333 25.6-11.946667l1.706666 1.706667-6.826666 6.826667c-3.413333 3.413333-6.826667 8.533333-8.533334 13.653333-1.706667 8.533333 1.706667 17.066667 8.533334 22.186667s15.36 1.706667 18.773333-5.12c1.706667-3.413333 1.706667-6.826667 1.706667-10.24 0-6.826667 0-13.653333 1.706666-20.48 0-3.413333 1.706667-8.533333 3.413334-11.946667 3.413333-8.533333 10.24-11.946667 17.066666-13.653333 10.24-1.706667 17.066667 1.706667 23.893334 10.24 3.413333 5.12 6.826667 10.24 6.826666 15.36 0 3.413333 0 5.12 1.706667 8.533333 0 1.706667 1.706667 3.413333 5.12 5.12 1.706667 0 1.706667 0 3.413333 3.413333l-1.706666 1.706667c-6.826667 3.413333-13.653333 5.12-17.066667 8.533333h-3.413333v-1.706666c0-1.706667 1.706667-1.706667 1.706666-1.706667 1.706667-3.413333 5.12-5.12 6.826667-8.533333 3.413333-6.826667 5.12-11.946667 3.413333-18.773334 0-3.413333-1.706667-5.12-3.413333-6.826666-3.413333-5.12-8.533333-6.826667-13.653333-5.12s-8.533333 5.12-10.24 10.24c0 3.413333-1.706667 6.826667-1.706667 10.24v18.773333c0 8.533333-3.413333 15.36-11.946667 20.48-11.946667 8.533333-25.6 6.826667-35.84-6.826667-5.12-6.826667-8.533333-13.653333-10.24-23.893333v-3.413333c0-1.706667-1.706667-5.12-5.12-5.12l-1.706666-1.706667zM887.466667 646.826667c0-1.706667-1.706667-1.706667-1.706667-3.413334 0-3.413333-1.706667-5.12-3.413333-6.826666l-8.533334-8.533334c-6.826667-6.826667-13.653333-13.653333-20.48-18.773333-3.413333-3.413333-5.12-5.12-10.24-5.12-6.826667-1.706667-13.653333-3.413333-18.773333-5.12h-1.706667c-5.12 0-6.826667 0-10.24 5.12 0 1.706667 0 3.413333-3.413333 3.413333v-3.413333c1.706667-5.12 1.706667-11.946667 3.413333-15.36 1.706667-6.826667 3.413333-13.653333 5.12-18.773333v-1.706667h3.413334v3.413333c0 6.826667 1.706667 8.533333 6.826666 10.24 6.826667 1.706667 13.653333 3.413333 18.773334 5.12h6.826666c5.12-1.706667 10.24-3.413333 13.653334-3.413333 8.533333-1.706667 15.36-5.12 25.6-6.826667 5.12-1.706667 8.533333-3.413333 11.946666-8.533333 0 0 1.706667 0 1.706667-1.706667v5.12c-3.413333 11.946667-5.12 22.186667-8.533333 35.84-1.706667-1.706667 0-3.413333 0-3.413333 0-6.826667-1.706667-8.533333-8.533334-6.826667-10.24 3.413333-20.48 5.12-30.72 8.533334-1.706667 0-1.706667 1.706667-3.413333 1.706666 0 1.706667 1.706667 1.706667 1.706667 1.706667l18.773333 18.773333c1.706667 1.706667 5.12 3.413333 8.533333 5.12s5.12 0 6.826667-1.706666c1.706667-1.706667 1.706667-3.413333 3.413333-5.12l1.706667-1.706667c1.706667 0 1.706667 1.706667 1.706667 3.413333-1.706667 5.12-1.706667 10.24-3.413334 13.653334 0 1.706667 0 3.413333-1.706666 5.12-1.706667-1.706667-3.413333 0-5.12 0 1.706667 0 0 0 0 0zM827.733333 482.986667c1.706667 1.706667 1.706667 3.413333 1.706667 5.12 0 3.413333 3.413333 6.826667 8.533333 6.826666h10.24c8.533333 0 15.36 0 23.893334-1.706666 11.946667 0 20.48-1.706667 32.426666-1.706667h5.12c1.706667-13.653333-6.826667-20.48-13.653333-22.186667-1.706667 0-3.413333 0-6.826667-1.706666v-1.706667H887.466667 907.946667v1.706667c1.706667 22.186667 1.706667 44.373333 3.413333 66.56v3.413333c-3.413333 1.706667-8.533333 1.706667-11.946667 1.706667H887.466667c0-3.413333 0-3.413333 1.706666-3.413334 3.413333 0 6.826667-1.706667 8.533334-3.413333 5.12-3.413333 8.533333-6.826667 10.24-11.946667v-5.12-5.12h-6.826667c-10.24 0-18.773333 0-29.013333 1.706667h-34.133334-1.706666c-6.826667 1.706667-8.533333 3.413333-8.533334 10.24v1.706667s0 1.706667-1.706666 1.706666-1.706667 0-1.706667-1.706666v-8.533334c0-10.24 0-18.773333-1.706667-29.013333 3.413333 0 3.413333 0 5.12-3.413333-1.706667 0 0 0 0 0zM267.946667 315.733333c-5.12 8.533333-18.773333 29.013333-20.48 32.426667-1.706667 0-1.706667-1.706667-1.706667-1.706667 0-1.706667 1.706667-3.413333 1.706667-6.826666 0-1.706667 0-5.12-3.413334-5.12-5.12-1.706667-10.24-1.706667-13.653333-3.413334-1.706667 0-3.413333 0-3.413333 1.706667-5.12 6.826667-10.24 13.653333-13.653334 22.186667 3.413333 5.12 5.12 10.24 10.24 13.653333 1.706667 1.706667 3.413333 1.706667 6.826667 0l5.12-5.12h1.706667v3.413333c-3.413333 5.12-6.826667 10.24-10.24 13.653334 0 1.706667-1.706667 1.706667-3.413334 3.413333l-1.706666-1.706667c1.706667-6.826667-1.706667-11.946667-5.12-13.653333-6.826667-8.533333-13.653333-15.36-17.066667-25.6-8.533333-11.946667-15.36-22.186667-23.893333-34.133333 0-1.706667-1.706667-1.706667-1.706667-3.413334s-1.706667-1.706667 0-3.413333 1.706667-1.706667 3.413333-1.706667 5.12 0 6.826667 1.706667c8.533333 1.706667 15.36 3.413333 23.893333 5.12l30.72 5.12c6.826667 1.706667 13.653333 1.706667 20.48 3.413333 3.413333 0 5.12 0 8.533334-1.706666-1.706667 1.706667 0 0 0 1.706666z m-76.8 10.24s0 1.706667 0 0c6.826667 8.533333 13.653333 15.36 17.066666 22.186667l1.706667 1.706667c1.706667-3.413333 11.946667-15.36 13.653333-17.066667v-1.706667c-10.24-3.413333-27.306667-6.826667-32.426666-5.12zM614.4 133.12c1.706667-1.706667 1.706667-1.706667 0 0 1.706667-1.706667 1.706667-1.706667 0 0 13.653333 3.413333 25.6 8.533333 37.546667 11.946667l1.706666 1.706666c0 1.706667-1.706667 1.706667-1.706666 1.706667-1.706667 0-3.413333-1.706667-5.12-1.706667s-3.413333 0-5.12 3.413334c0 1.706667-1.706667 3.413333-1.706667 5.12 0 15.36 0 30.72 1.706667 46.08v1.706666c1.706667 0 1.706667 0 3.413333-1.706666 8.533333-8.533333 13.653333-15.36 22.186667-23.893334l8.533333-8.533333c0-1.706667 1.706667-1.706667 1.706667-3.413333 1.706667-3.413333 1.706667-6.826667-1.706667-8.533334-1.706667-1.706667-3.413333-1.706667-5.12-3.413333 0 0 0-1.706667 1.706667-1.706667h1.706666c6.826667 3.413333 13.653333 5.12 20.48 8.533334l1.706667 1.706666c0 1.706667-1.706667 1.706667-1.706667 1.706667-5.12 0-8.533333 1.706667-11.946666 5.12-5.12 5.12-8.533333 10.24-13.653334 13.653333-10.24 11.946667-18.773333 20.48-29.013333 32.426667-3.413333 3.413333-5.12 6.826667-8.533333 8.533333l-3.413334 3.413334s-1.706667 0-1.706666-1.706667v-5.12c0-6.826667 0-11.946667-1.706667-17.066667 0-10.24 0-18.773333-1.706667-30.72 0-8.533333-1.706667-17.066667-1.706666-25.6 1.706667-6.826667 0-10.24-6.826667-13.653333zM595.626667 131.413333h-5.12c-5.12 0-6.826667 1.706667-8.533334 6.826667 0 3.413333-1.706667 5.12-1.706666 8.533333-1.706667 10.24-3.413333 18.773333-5.12 29.013334-1.706667 6.826667-3.413333 13.653333-3.413334 20.48v5.12c0 3.413333 1.706667 6.826667 5.12 8.533333 1.706667 0 1.706667 0 3.413334 1.706667 1.706667 0 1.706667 1.706667 3.413333 1.706666-1.706667 0-1.706667 1.706667-1.706667 1.706667h-3.413333c-11.946667-1.706667-23.893333-5.12-35.84-6.826667h-1.706667c0-1.706667 0-1.706667 1.706667-1.706666h5.12c5.12 0 6.826667-1.706667 6.826667-6.826667 1.706667-6.826667 1.706667-11.946667 3.413333-17.066667 1.706667-11.946667 3.413333-20.48 5.12-32.426666 0-3.413333 1.706667-8.533333 1.706667-11.946667 1.706667-3.413333-1.706667-8.533333-5.12-10.24-1.706667 0-1.706667 0-3.413334-1.706667l-1.706666-1.706666 1.706666-1.706667c10.24 0 22.186667 3.413333 35.84 5.12 0 0 1.706667 0 3.413334 3.413333zM892.586667 401.066667c1.706667 0 1.706667 1.706667 0 0 1.706667 3.413333 3.413333 5.12 3.413333 8.533333 3.413333 10.24 5.12 20.48 8.533333 30.72v3.413333l-1.706666 1.706667c-1.706667-1.706667-1.706667-3.413333-3.413334-5.12-1.706667-3.413333-5.12-5.12-8.533333-5.12H887.466667c-17.066667 5.12-35.84 10.24-54.613334 13.653333-1.706667 0-3.413333 0-5.12 1.706667-3.413333 1.706667-6.826667 3.413333-6.826666 8.533333v5.12s0 1.706667-1.706667 1.706667c0-1.706667-1.706667-1.706667-1.706667-1.706667-3.413333-11.946667-6.826667-25.6-10.24-37.546666v-1.706667s1.706667 0 1.706667 1.706667c1.706667 1.706667 1.706667 3.413333 1.706667 5.12 1.706667 3.413333 3.413333 3.413333 6.826666 3.413333 1.706667 0 5.12 0 6.826667-1.706667 17.066667-5.12 37.546667-10.24 54.613333-13.653333h3.413334c3.413333-1.706667 5.12-3.413333 5.12-8.533333 5.12-6.826667 5.12-8.533333 5.12-10.24zM343.04 766.293333c-3.413333 5.12-51.2 71.68-56.32 75.093334-3.413333-1.706667-5.12-3.413333-8.533333-6.826667 3.413333-3.413333 6.826667-8.533333 8.533333-11.946667 3.413333-3.413333 6.826667-8.533333 8.533333-11.946666 3.413333-3.413333 6.826667-8.533333 8.533334-11.946667 3.413333-3.413333 6.826667-8.533333 8.533333-11.946667 3.413333-3.413333 6.826667-8.533333 8.533333-11.946666-6.826667-3.413333-13.653333-5.12-22.186666-3.413334h-3.413334c1.706667-3.413333 3.413333-6.826667 6.826667-10.24 6.826667 0 13.653333 1.706667 17.066667 0 6.826667 0 11.946667-1.706667 17.066666-3.413333 3.413333 5.12 5.12 6.826667 6.826667 8.533333-3.413333 5.12-1.706667-1.706667 0 0zM445.44 453.973333c6.826667 0 17.066667-13.653333 22.186667-17.066666 8.533333-10.24 17.066667-18.773333 25.6-29.013334 1.706667-1.706667 3.413333-5.12 3.413333-8.533333 1.706667-11.946667 0-23.893333 0-37.546667-1.706667-1.706667-3.413333-1.706667-5.12-1.706666-10.24 10.24-23.893333 17.066667-37.546667 22.186666-17.066667 8.533333-1.706667-22.186667 0-25.6 10.24-10.24 20.48-22.186667 32.426667-34.133333 6.826667-10.24 8.533333-18.773333 10.24-30.72 1.706667-11.946667 3.413333-32.426667 15.36-37.546667 10.24-10.24 18.773333 20.48 18.773333 27.306667 1.706667 13.653333-5.12 25.6-11.946666 37.546667-3.413333 5.12-6.826667 10.24-10.24 13.653333-3.413333 3.413333 6.826667 11.946667 10.24 15.36 5.12 6.826667 8.533333 17.066667 6.826666 27.306667 0 8.533333-1.706667 15.36-5.12 23.893333 0 8.533333-3.413333 8.533333 3.413334 17.066667 5.12 6.826667 5.12 15.36 5.12 23.893333-1.706667 10.24-3.413333 18.773333-8.533334 29.013333-6.826667 17.066667-15.36 34.133333-20.48 51.2-1.706667 10.24-3.413333 18.773333-5.12 29.013334-3.413333 27.306667 0 54.613333 0 83.626666 1.706667 10.24 1.706667 20.48 3.413334 30.72 1.706667 11.946667 3.413333 20.48 5.12 32.426667 3.413333 17.066667 6.826667 37.546667 11.946666 54.613333 0 1.706667 0 3.413333 1.706667 5.12v5.12c-1.706667 3.413333-3.413333 5.12-6.826667 5.12-8.533333-1.706667-13.653333-5.12-17.066666-13.653333s-6.826667-17.066667-8.533334-25.6c-1.706667-10.24-5.12-18.773333-6.826666-29.013333-1.706667-6.826667-1.706667-11.946667-3.413334-18.773334-1.706667-10.24-3.413333-18.773333-5.12-29.013333 0-5.12-1.706667-8.533333-3.413333-11.946667 0-3.413333-1.706667-5.12-3.413333-8.533333-8.533333-8.533333-30.72-5.12-40.96-3.413333-5.12 0-8.533333 1.706667-13.653334 1.706666-10.24 1.706667-17.066667 3.413333-27.306666 5.12-13.653333 3.413333-29.013333 6.826667-44.373334 10.24-10.24 1.706667-18.773333 3.413333-29.013333 5.12-8.533333 1.706667-15.36 0-23.893333-3.413333-3.413333-3.413333-6.826667-1.706667-8.533334-6.826667-1.706667-3.413333 1.706667-10.24 5.12-10.24 3.413333-1.706667 6.826667-3.413333 8.533334-3.413333 8.533333-3.413333 17.066667-5.12 25.6-6.826667 11.946667-1.706667 22.186667-3.413333 34.133333-5.12h10.24c11.946667-1.706667 20.48-1.706667 32.426667-3.413333 15.36 0 29.013333 0 44.373333-3.413333 5.12 0 8.533333-1.706667 13.653333-1.706667 5.12-1.706667 10.24-3.413333 13.653334-6.826667 3.413333-1.706667 3.413333-5.12 3.413333-8.533333-3.413333-11.946667-3.413333-25.6-1.706667-37.546667 1.706667-13.653333 5.12-29.013333 10.24-40.96s10.24-20.48 15.36-30.72c8.533333-10.24 11.946667-27.306667 8.533334-39.253333 0-1.706667-1.706667-1.706667-1.706667-3.413333-1.706667 1.706667-1.706667 1.706667-3.413333 1.706666-3.413333 5.12-8.533333 10.24-13.653334 11.946667-6.826667 6.826667-13.653333 10.24-22.186666 13.653333-5.12 1.706667-10.24 3.413333-13.653334 5.12-5.12 5.12-1.706667 8.533333-1.706666 13.653334 1.706667 10.24 1.706667 17.066667 1.706666 27.306666-1.706667 17.066667-6.826667 32.426667-18.773333 42.666667-8.533333 8.533333-18.773333 13.653333-30.72 17.066667-13.653333 5.12-29.013333 6.826667-44.373333 5.12-6.826667 0-13.653333 0-18.773334-1.706667-10.24-1.706667-18.773333-3.413333-29.013333-10.24-6.826667-3.413333-13.653333-10.24-17.066667-15.36-8.533333-10.24-11.946667-22.186667-15.36-34.133333-6.826667-20.48-8.533333-40.96-6.826666-64.853334 0-5.12 1.706667-11.946667 5.12-15.36 5.12-11.946667 13.653333-20.48 23.893333-29.013333 13.653333-10.24 25.6-13.653333 39.253333-17.066667 20.48-5.12 46.08-5.12 64.853334 3.413334 1.706667 0 3.413333 1.706667 5.12 1.706666 22.186667 6.826667 29.013333 30.72 35.84 49.493334 0 3.413333 1.706667 6.826667 1.706666 8.533333 5.12 1.706667 5.12 3.413333 6.826667 3.413333z m-133.12 22.186667c13.653333 0 30.72 0 44.373333-3.413333 15.36 0 37.546667 1.706667 52.906667-3.413334 3.413333 0 5.12-1.706667 5.12-3.413333 3.413333-5.12 5.12-11.946667 6.826667-17.066667 1.706667-8.533333 0-13.653333-5.12-20.48-3.413333-5.12-8.533333-8.533333-13.653334-11.946666-13.653333-6.826667-30.72-11.946667-46.08-10.24-10.24 1.706667-18.773333 3.413333-27.306666 6.826666-6.826667 1.706667-11.946667 5.12-18.773334 10.24-15.36 11.946667-18.773333 30.72-13.653333 47.786667 0 3.413333 1.706667 3.413333 5.12 3.413333 1.706667 1.706667 6.826667 1.706667 10.24 1.706667z m109.226667 17.066667c-5.12-1.706667-8.533333 0-11.946667 0-13.653333 1.706667-27.306667 1.706667-40.96 3.413333-22.186667 0-44.373333 3.413333-64.853333 3.413333-1.706667 0-1.706667 1.706667-1.706667 1.706667 0 13.653333 3.413333 25.6 13.653333 35.84 11.946667 11.946667 25.6 13.653333 40.96 17.066667 10.24 1.706667 17.066667 0 27.306667-3.413334 6.826667-1.706667 13.653333-5.12 20.48-8.533333 8.533333-5.12 13.653333-11.946667 17.066667-18.773333 1.706667-10.24 1.706667-22.186667 0-30.72-5.12-1.706667 1.706667 8.533333 0 0z" fill="#DA251B" ></path><path d="M684.373333 643.413333c-8.533333 0-17.066667-1.706667-23.893333 1.706667-1.706667 0-3.413333 1.706667-3.413333 1.706667-8.533333 3.413333-5.12 15.36-1.706667 20.48 3.413333 11.946667 10.24 20.48 13.653333 32.426666 1.706667 3.413333 5.12 6.826667 6.826667 11.946667 1.706667 3.413333 1.706667 6.826667-1.706667 8.533333-13.653333 8.533333-23.893333 1.706667-30.72-10.24-8.533333-13.653333-13.653333-29.013333-17.066666-42.666666-3.413333-8.533333-11.946667-3.413333-18.773334-3.413334-15.36 5.12-30.72 11.946667-44.373333 17.066667-8.533333 3.413333-13.653333 8.533333-22.186667 11.946667-5.12 0-8.533333 3.413333-11.946666-3.413334-1.706667-5.12-1.706667-11.946667 0-15.36 0-1.706667 1.706667-3.413333 3.413333-5.12 3.413333-1.706667 5.12-3.413333 8.533333-5.12 8.533333-3.413333 15.36-6.826667 23.893334-10.24 13.653333-5.12 23.893333-8.533333 37.546666-13.653333 10.24-5.12 17.066667-6.826667 18.773334-18.773333 0-5.12 0-8.533333-3.413334-13.653334-1.706667-1.706667-5.12-1.706667-8.533333-1.706666-22.186667 10.24-44.373333 20.48-66.56 32.426666-6.826667 1.706667-13.653333 0-18.773333-6.826666-6.826667-8.533333 6.826667-15.36 13.653333-15.36 11.946667-3.413333 22.186667-8.533333 34.133333-11.946667 13.653333-5.12 27.306667-8.533333 40.96-13.653333 3.413333-1.706667 8.533333-3.413333 8.533334-8.533334V580.266667c3.413333-10.24-10.24-11.946667-17.066667-8.533334-5.12 1.706667-10.24 1.706667-13.653333 3.413334-5.12 1.706667-8.533333 1.706667-11.946667 3.413333-1.706667 0-5.12 0-6.826667 1.706667-11.946667 0-15.36-13.653333-6.826666-20.48 5.12 0 11.946667-3.413333 17.066666-3.413334 11.946667-1.706667 22.186667-3.413333 34.133334-6.826666 10.24-1.706667 17.066667-5.12 27.306666-6.826667 5.12-1.706667 8.533333-1.706667 13.653334-3.413333 6.826667-1.706667 10.24 1.706667 13.653333 6.826666 6.826667 6.826667-6.826667 11.946667-11.946667 13.653334-1.706667 1.706667-5.12 1.706667-6.826666 3.413333-3.413333 1.706667-5.12 3.413333-3.413334 6.826667 0 5.12 5.12 6.826667 10.24 6.826666 10.24-1.706667 18.773333-1.706667 29.013334-5.12 1.706667 0 3.413333-1.706667 3.413333-1.706666 5.12-1.706667 6.826667-3.413333 8.533333-8.533334 5.12-8.533333 8.533333-20.48 15.36-27.306666 5.12-5.12 20.48 3.413333 17.066667 11.946666-5.12 13.653333-6.826667 29.013333-8.533333 44.373334-1.706667 11.946667-3.413333 22.186667-5.12 34.133333 0 3.413333 0 6.826667-1.706667 10.24 0 3.413333-3.413333 6.826667-6.826667 6.826667-6.826667 3.413333-17.066667 1.706667-25.6 1.706666z m-23.893333-15.36c11.946667 0 18.773333-3.413333 27.306667-8.533333 10.24-6.826667 5.12-15.36 5.12-23.893333s-17.066667-5.12-20.48-3.413334c-6.826667 1.706667-13.653333 3.413333-18.773334 5.12-3.413333 1.706667-6.826667 5.12-8.533333 8.533334 0 1.706667 0 3.413333-1.706667 3.413333 0 3.413333-1.706667 8.533333 0 11.946667 0 3.413333 3.413333 5.12 6.826667 6.826666 5.12-1.706667 8.533333-1.706667 10.24 0 11.946667 0-1.706667-1.706667 0 0zM622.933333 453.973333c-11.946667 0-25.6 1.706667-37.546666-1.706666-6.826667 0-11.946667-1.706667-17.066667-3.413334-3.413333 0-5.12-1.706667-6.826667-1.706666l-5.12-5.12c-6.826667-15.36-1.706667-34.133333 11.946667-44.373334 5.12-3.413333 10.24-6.826667 15.36-8.533333 8.533333-3.413333 17.066667-5.12 25.6-6.826667 6.826667-1.706667 11.946667-1.706667 17.066667-1.706666 10.24-1.706667 17.066667-1.706667 27.306666-3.413334 18.773333 0 35.84-3.413333 52.906667 3.413334s27.306667 25.6 22.186667 44.373333c-6.826667 22.186667-37.546667 23.893333-58.026667 23.893333-11.946667 1.706667-20.48 3.413333-32.426667 3.413334-3.413333 0-10.24 1.706667-15.36 1.706666z m44.373334-56.32c0-1.706667 0-1.706667 0 0-13.653333 0-27.306667 0-39.253334 3.413334-8.533333 0-15.36 1.706667-23.893333 3.413333-5.12 1.706667-11.946667 3.413333-15.36 6.826667-6.826667 5.12-10.24 11.946667-6.826667 17.066666 0 1.706667 1.706667 3.413333 5.12 5.12 10.24 0 20.48 3.413333 30.72 0 23.893333 0 47.786667-5.12 71.68-5.12 10.24-1.706667 13.653333-10.24 11.946667-15.36s-5.12-8.533333-8.533333-10.24c-5.12-3.413333-10.24-5.12-13.653334-5.12-5.12-1.706667-8.533333 0-11.946666 0 0-1.706667 3.413333 0 0 0zM605.866667 529.066667c-15.36 0-29.013333 0-42.666667-3.413334h-1.706667c-15.36-3.413333-17.066667-23.893333-10.24-37.546666 3.413333-5.12 8.533333-8.533333 13.653334-11.946667 8.533333-3.413333 15.36-6.826667 23.893333-8.533333 10.24-1.706667 17.066667-3.413333 27.306667-3.413334 13.653333-1.706667 29.013333-1.706667 40.96-3.413333 17.066667 0 32.426667-1.706667 49.493333 3.413333 11.946667 3.413333 18.773333 10.24 22.186667 20.48 3.413333 6.826667 3.413333 13.653333 0 20.48-1.706667 6.826667-6.826667 10.24-13.653334 11.946667-6.826667 3.413333-17.066667 0-23.893333 3.413333-11.946667 0-23.893333 1.706667-35.84 1.706667-11.946667 5.12-30.72 6.826667-49.493333 6.826667z m73.386666-22.186667c8.533333 0 17.066667 0 23.893334-3.413333 5.12-3.413333 5.12-8.533333 1.706666-11.946667-5.12-11.946667-23.893333-10.24-34.133333-11.946667-17.066667-1.706667-34.133333-1.706667-51.2 0-8.533333 0-13.653333 1.706667-22.186667 3.413334-6.826667 3.413333-13.653333 3.413333-17.066666 11.946666-3.413333 5.12 1.706667 13.653333 8.533333 13.653334 5.12 1.706667 11.946667 1.706667 15.36 0 6.826667 0 13.653333-1.706667 20.48-1.706667 11.946667-1.706667 20.48-1.706667 32.426667-3.413333 6.826667 5.12 15.36 3.413333 22.186666 3.413333zM628.053333 334.506667c15.36 0 32.426667 1.706667 46.08 3.413333 10.24 1.706667 18.773333 3.413333 29.013334 5.12 6.826667 1.706667 13.653333 3.413333 18.773333 6.826667 1.706667 0 3.413333 1.706667 5.12 3.413333 5.12 3.413333 5.12 8.533333 1.706667 13.653333-1.706667 1.706667-5.12 3.413333-8.533334 5.12-3.413333 0-8.533333 0-11.946666-1.706666-20.48-8.533333-49.493333-10.24-69.973334-6.826667-11.946667 0-20.48 0-32.426666 1.706667-8.533333 0-13.653333 1.706667-22.186667 3.413333-11.946667 0-23.893333 3.413333-37.546667 3.413333-5.12 0-13.653333-1.706667-15.36-8.533333-1.706667-3.413333 3.413333-10.24 6.826667-10.24 5.12-1.706667 10.24-3.413333 13.653333-5.12 11.946667-3.413333 23.893333-5.12 37.546667-6.826667h8.533333c11.946667-6.826667 22.186667-6.826667 30.72-6.826666z" fill="#DA251B" ></path><path d="M512 805.546667c-160.426667 0-290.133333-131.413333-290.133333-291.84S351.573333 221.866667 512 221.866667s290.133333 131.413333 290.133333 291.84-129.706667 291.84-290.133333 291.84z m0-570.026667c-153.6 0-278.186667 124.586667-278.186667 278.186667S358.4 791.893333 512 791.893333s278.186667-124.586667 278.186667-278.186666c0-151.893333-124.586667-278.186667-278.186667-278.186667z" fill="#D5271C" ></path><path d="M512 225.28c-158.72 0-288.426667 129.706667-288.426667 290.133333s129.706667 290.133333 288.426667 290.133334 288.426667-129.706667 288.426667-290.133334-129.706667-290.133333-288.426667-290.133333z m0 568.32c-153.6 0-279.893333-124.586667-279.893333-279.893333S358.4 233.813333 512 233.813333 791.893333 358.4 791.893333 513.706667 665.6 793.6 512 793.6z" fill="#D5271C" ></path></symbol><symbol id="icon-computer_fill" viewBox="0 0 1024 1024"><path d="M221.216 588H160v75.712c0 35.456 27.424 64.288 61.184 64.288h260.192v52h-91.808c-16.896 0-30.624 14.336-30.624 32 0 17.696 13.728 32 30.624 32h244.864c16.896 0 30.624-14.304 30.624-32 0-17.664-13.728-32-30.624-32h-91.808V728h260.192c33.76 0 61.184-28.832 61.184-64.288v-75.712H221.216zM802.816 160H221.184C187.424 160 160 188.864 160 224.32v299.68h704V224.32C864 188.864 836.576 160 802.816 160" fill="#969697" ></path></symbol><symbol id="icon-statistics" viewBox="0 0 1024 1024"><path d="M176 384a95.536 95.536 0 0 0 54.24-16.8l170.032 102A95.92 95.92 0 0 0 496.016 560c58.144 0 104.448-51.872 94.608-111.664l216.368-195.744a95.84 95.84 0 0 0 25.04 3.408 96 96 0 1 0-96-96c0 14.56 3.328 28.304 9.12 40.656L545.12 381.616a95.52 95.52 0 0 0-114.688 12.4l-159.056-95.424A96 96 0 1 0 176 384z m208 576h240V656H384v304z m80-224h80v144h-80v-144zM80 960h240V512H80v448z m80-368h80v288h-80V592z m528 368h240V432H688v528z m80-448h80v368h-80V512z" fill="#565D64" ></path></symbol><symbol id="icon-fanju" viewBox="0 0 1024 1024"><path d="M588.8 318.72l-12.032-7.424L727.04 104.704a31.40608 31.40608 0 0 0-7.424-43.776 31.39584 31.39584 0 0 0-43.776 7.424L522.24 278.528 281.6 129.28a31.10912 31.10912 0 0 0-33.024 52.736L486.4 328.96l-22.784 31.488a31.39584 31.39584 0 0 0 51.2 36.352l25.6-35.072 16.128 9.728a30.976 30.976 0 1 0 32.256-52.736zM710.4 809.728a53.21728 53.21728 0 0 0 15.59552 37.65248 53.21728 53.21728 0 0 0 75.30496 0 53.21728 53.21728 0 0 0 0-75.30496 53.21728 53.21728 0 0 0-75.30496 0 53.21728 53.21728 0 0 0-15.59552 37.65248zM261.12 756.48a53.24288 53.24288 0 0 0-37.30432 90.98752 53.26336 53.26336 0 0 0 57.99424 11.42784 53.22752 53.22752 0 0 0 28.73856-69.60128A53.248 53.248 0 0 0 261.12 756.48z" fill="#FB813A" ></path><path d="M234.24 273.408H790.528c61.952 0 92.928 30.976 92.928 92.928V727.04c0 61.952-30.976 92.928-92.928 92.928H234.24c-61.952 0-92.928-30.976-92.928-92.928V366.336c0-61.952 30.976-92.928 92.928-92.928z" fill="#FDDE80" ></path><path d="M392.192 534.272a128.23552 128.23552 0 0 0 79.17568 118.49216A128.24576 128.24576 0 0 0 648.704 534.272a128.23552 128.23552 0 0 0-79.17568-118.49216 128.23552 128.23552 0 0 0-139.77088 27.8016A128.256 128.256 0 0 0 392.192 534.272z" fill="#FFFFFF" ></path><path d="M476.928 505.6c0-26.88 19.2-37.632 42.24-25.6l49.664 28.672a25.62048 25.62048 0 0 1 17.60768 24.32 25.61536 25.61536 0 0 1-17.60768 24.32l-49.664 28.672c-23.04 13.568-42.24 2.56-42.24-24.32V505.6z" fill="#FB813A" ></path></symbol><symbol id="icon-blog" viewBox="0 0 1024 1024"><path d="M384 64c0 35.4 28.6 64 64 64 247.4 0 448 200.6 448 448 0 35.4 28.6 64 64 64s64-28.6 64-64C1024 257.8 766.2 0 448 0c-35.4 0-64 28.6-64 64z m0 192c0 35.4 28.6 64 64 64 141.4 0 256 114.6 256 256 0 35.4 28.6 64 64 64s64-28.6 64-64c0-212-172-384-384-384-35.4 0-64 28.6-64 64z m-192 32c0-53-43-96-96-96S0 235 0 288v448c0 159 129 288 288 288s288-129 288-288-129-288-288-288h-32v192h32c53 0 96 43 96 96s-43 96-96 96-96-43-96-96V288z"  ></path></symbol><symbol id="icon-ins" viewBox="0 0 1024 1024"><path d="M62.947657 63.404052 62.947657 63.404052 62.947657 63.404052 62.947657 63.404052zM793.183054 543.821753c0 137.970328-111.877043 249.816672-249.816672 249.816672-137.970328 0-249.817696-111.846344-249.817696-249.816672 0-16.425088 1.62194-32.487925 4.714372-48.042179L130.206504 495.779573l0 332.058768c0 71.281463 57.740052 129.142266 129.142266 129.142266l568.034201 0c71.281463 0 129.142266-57.800427 129.142266-129.142266L956.525236 495.780597l-167.996179 0C791.562137 511.333828 793.183054 527.397688 793.183054 543.821753L793.183054 543.821753 793.183054 543.821753zM827.38297 130.661875 259.34877 130.661875c-71.342862 0-129.142266 57.830103-129.142266 129.143289L130.206504 399.696238l209.16174 0c45.218878-63.895239 119.713522-105.692181 203.998137-105.692181 84.282568 0 158.778236 41.796942 203.997114 105.692181l209.162764 0L956.526259 259.805164C956.525236 188.522678 898.694109 130.661875 827.38297 130.661875L827.38297 130.661875zM890.556779 290.161542c0 12.730952-10.387581 23.060205-23.059182 23.060205L798.377356 313.221748c-12.671601 0-23.060205-10.389628-23.060205-23.060205l0-69.180616c0-12.730952 10.419304-23.060205 23.060205-23.060205l69.12024 0c12.730952 0 23.059182 10.389628 23.059182 23.060205L890.556779 290.161542 890.556779 290.161542 890.556779 290.161542zM697.098695 543.821753c0-84.943624-68.849064-153.73436-153.733337-153.73436-84.883249 0-153.73436 68.790736-153.73436 153.73436s68.850088 153.733337 153.73436 153.733337C628.249631 697.55509 697.098695 628.7664 697.098695 543.821753L697.098695 543.821753 697.098695 543.821753z" fill="#272536" ></path></symbol><symbol id="icon-Facebook" viewBox="0 0 1024 1024"><path d="M967.601349 1024c31.076808 0 56.398651-25.321843 56.398651-56.398651V56.398651c0-31.076808-25.321843-56.398651-56.398651-56.398651H56.398651C25.321843 0 0 25.321843 0 56.398651v910.819034c0 31.076808 25.321843 56.398651 56.398651 56.398651h911.202698z" fill="#3C5A99" ></path><path d="M706.709629 1024V627.29112h133.13151l19.950543-154.61671h-153.082053V374.072686c0-44.888722 12.277257-75.198202 76.732859-75.198201h81.720494v-138.119146c-14.195579-1.918321-62.920944-6.138629-119.319595-6.138629-118.168602 0-198.738104 72.128887-198.738104 204.109405v113.948295h-133.515174v154.61671h133.515174v396.70888h159.604346z" fill="#FFFFFF" ></path></symbol><symbol id="icon-weibo" viewBox="0 0 1026 1024"><path d="M1012.49 451.553v0.159c-6.697 20.66-28.861 31.99-49.449 25.288a39.352 39.352 0 0 1-25.287-49.582l-0.067-0.031c20.536-63.6 7.516-136.156-40.315-189.363-47.892-53.212-118.502-73.554-183.731-59.659-21.222 4.537-42.133-9.047-46.638-30.3-4.506-21.253 9.021-42.194 30.239-46.73 91.709-19.563 191.114 8.98 258.467 83.881 67.36 74.839 85.515 176.85 56.781 266.337z" fill="#D32024" ></path><path d="M740.429 304.348v-0.03c-18.217 3.973-36.178-7.732-40.06-26.01-3.947-18.31 7.763-36.373 25.98-40.254 44.692-9.548 93.143 4.322 125.885 40.781 32.866 36.496 41.631 86.17 27.607 129.772a33.833 33.833 0 0 1-42.562 21.847c-17.782-5.76-27.484-24.914-21.724-42.69h-0.062c6.887-21.346 2.565-45.635-13.46-63.473-16.026-17.818-39.752-24.546-61.604-19.943z m30.05 192.184c-14.46-4.352-24.352-7.326-16.774-26.352 16.333-41.313 18.027-76.964 0.317-102.385-33.31-47.734-124.451-45.133-228.838-1.28 0-0.061-32.799 14.367-24.412-11.704 16.056-51.774 13.645-95.186-11.361-120.192-56.658-56.878-207.304 2.12-336.477 131.64C56.187 463.32 0 566.14 0 655.1 0 825.18 217.503 928.594 430.28 928.594c278.917 0 464.527-162.504 464.527-291.59 0-77.936-65.546-122.193-124.329-140.472zM430.842 867.62c-169.774 16.84-316.35-60.155-327.368-171.96-11.049-111.74 117.72-216.034 287.488-232.873 169.805-16.84 316.355 60.16 327.368 171.904 11.018 111.866-117.683 216.09-287.488 232.929z" fill="#D32024" ></path><path d="M447.805 548.859c-80.783-21.09-172.119 19.287-207.206 90.65-35.743 72.862-1.188 153.681 80.44 180.1 84.578 27.357 184.233-14.525 218.88-93.148 34.181-76.81-8.478-155.94-92.114-177.602zM386.12 734.792c-16.43 26.29-51.584 37.806-78.065 25.661-26.107-11.889-33.833-42.44-17.403-68.045 16.215-25.538 50.207-36.869 76.498-25.856 26.604 11.392 35.087 41.687 18.97 68.24z" fill="#D32024" ></path></symbol><symbol id="icon-youtube" viewBox="0 0 1024 1024"><path d="M426.666667 682.666667V384l256 149.845333L426.666667 682.666667z m587.093333-355.541334s-10.026667-71.04-40.704-102.357333c-38.954667-41.088-82.602667-41.258667-102.613333-43.648C727.168 170.666667 512.213333 170.666667 512.213333 170.666667h-0.426666s-214.954667 0-358.229334 10.453333c-20.053333 2.389333-63.658667 2.56-102.656 43.648-30.677333 31.317333-40.661333 102.4-40.661333 102.4S0 410.538667 0 493.952v78.293333c0 83.456 10.24 166.912 10.24 166.912s9.984 71.04 40.661333 102.357334c38.997333 41.088 90.154667 39.765333 112.938667 44.074666C245.76 893.568 512 896 512 896s215.168-0.341333 358.442667-10.752c20.053333-2.432 63.658667-2.602667 102.613333-43.690667 30.72-31.317333 40.704-102.4 40.704-102.4s10.24-83.413333 10.24-166.869333v-78.250667c0-83.456-10.24-166.912-10.24-166.912z" fill="#FF0000" ></path></symbol><symbol id="icon-twitter" viewBox="0 0 1025 1024"><path d="M321.828571 928.212916c386.354599 0 597.767515-320.22544 597.767515-597.767515 0-9.017613-0.200391-18.235616-0.601174-27.253229C960.075147 273.534247 995.744814 236.46184 1023.799609 194.379648c-37.673581 16.832877-78.152642 28.054795-120.635617 33.064579 43.28454-26.050881 76.749902-67.131115 92.380431-116.227006-40.679452 24.046967-85.567123 41.481018-133.460666 50.899413-38.274755-40.879843-92.981605-66.32955-153.299413-66.32955-116.026614 0-210.010176 94.183953-210.010176 210.010176 0 16.432094 1.803523 32.463405 5.410568 47.893542C329.643836 344.873581 174.741292 261.310372 71.138943 134.262231c-18.035225 31.060665-28.455577 67.131115-28.455577 105.606262 0 72.942466 37.072407 137.268102 93.582779 174.941683-34.467319-1.001957-66.930724-10.620744-95.18591-26.251272v2.605088c0 101.798826 72.341292 186.764775 168.529158 206.002349-17.634442 4.809393-36.270841 7.414481-55.308023 7.414481-13.426223 0-26.652055-1.40274-39.477104-3.807436 26.652055 83.563209 104.403914 144.2818 196.18317 145.884931-71.940509 56.30998-162.517417 89.975734-260.909589 89.975734-17.033268 0-33.665753-1.001957-50.097847-3.005871 92.781213 59.716634 203.196869 94.584736 321.828571 94.584736" fill="#1DA1F2" ></path></symbol><symbol id="icon-tuiteX" viewBox="0 0 1177 1024"><path d="M927.4368 0h180.5824l-394.496 433.7664L1177.6 1024h-363.3664l-284.672-357.9904L203.9296 1024H23.2448l422.0416-463.9744L0 0h372.6336l257.2288 327.168L927.4368 0z m-63.4368 920.064h100.096L318.208 98.4576H210.8928L864 920.064z"  ></path></symbol><symbol id="icon-weichat" viewBox="0 0 1024 1024"><path d="M306.176 294.7072c-20.48 0-41.984 13.7216-41.984 37.0688 0 22.3232 21.504 37.0688 41.984 37.0688 19.6608 0 35.2256-14.7456 35.2256-37.0688 0-23.3472-15.7696-37.0688-35.2256-37.0688z m193.536 74.1376c21.504 0 35.2256-14.7456 35.2256-37.0688 0-23.3472-13.7216-37.0688-35.2256-37.0688-20.48 0-40.1408 13.7216-40.1408 37.0688 0.2048 22.3232 19.6608 37.0688 40.1408 37.0688zM743.424 512c-14.7456 0-27.4432 13.7216-27.4432 30.72 0 13.7216 12.6976 27.648 27.4432 27.648 19.456 0 34.2016-13.7216 34.2016-27.648 0-16.9984-14.7456-30.72-34.2016-30.72z m259.8912-368.8448A122.7776 122.7776 0 0 0 880.4352 20.48H143.36C75.776 20.48 20.48 75.776 20.48 143.36v737.28c0 67.584 55.296 122.88 122.88 122.88h737.28c67.584 0 122.88-55.296 122.88-122.88V261.9392l-0.2048-118.784zM397.1072 677.2736c-36.2496 0-62.6688-6.3488-96.8704-16.9984l-98.7136 54.0672 28.2624-91.136c-69.4272-53.0432-110.592-119.808-110.592-201.3184 0-144.1792 125.1328-254.3616 277.7088-254.3616 134.9632 0 255.1808 86.8352 278.7328 209.7152a132.4544 132.4544 0 0 0-26.4192-3.2768c-133.12 0-235.7248 108.1344-235.7248 238.3872 0 22.3232 2.8672 42.3936 7.7824 63.6928-7.5776 1.2288-16.384 1.2288-24.1664 1.2288z m407.7568 103.8336l19.6608 76.3904-74.3424-45.4656c-28.2624 6.3488-55.7056 15.9744-84.1728 15.9744-131.072 0-234.7008-97.4848-234.7008-218.3168 0-120.832 103.6288-218.3168 234.7008-218.3168 124.3136 0 235.7248 97.4848 235.7248 218.3168 0 67.584-41.984 128-96.8704 171.4176zM589.824 512c-13.7216 0-27.4432 13.7216-27.4432 30.72 0 13.7216 13.7216 27.648 27.4432 27.648 20.48 0 35.2256-13.7216 35.2256-27.648 0-16.9984-14.7456-30.72-35.2256-30.72z" fill="#4CBD63" ></path></symbol><symbol id="icon-icon-test" viewBox="0 0 1220 1024"><path d="M854.716616 315.732525h-16.580889a392.414361 392.414361 0 0 0-112.04661 12.310054 414.773438 414.773438 0 0 0-175.857909 87.175277 330.864093 330.864093 0 0 0-106.268421 165.306434 262.530735 262.530735 0 0 0-10.8027 102.500038c2.26103 19.093144 6.28064 37.935063 9.546572 58.03311a115.312543 115.312543 0 0 1-17.08334 1.758579 540.888681 540.888681 0 0 1-63.811298-4.52206c-26.881137-4.773286-53.511049-12.310054-80.140961-19.34437a15.827212 15.827212 0 0 0-13.063731 1.507353l-127.120145 76.875029a25.122558 25.122558 0 0 1-5.778188 2.763481c-7.285542 2.512256-11.807602-1.507354-10.049023-8.792895 4.522061-16.580889 9.295347-33.161777 14.068632-50.245117 7.034316-25.122558 14.571084-47.984086 21.354175-72.101743a11.053926 11.053926 0 0 0-4.01961-9.295346c-20.600498-18.339468-42.708349-34.920356-62.052719-54.515952a320.81507 320.81507 0 0 1-67.579682-100.490233A337.144733 337.144733 0 0 1 0.549632 352.41146a320.81507 320.81507 0 0 1 29.644619-115.563768 311.770949 311.770949 0 0 1 51.75247-81.89954 703.431634 703.431634 0 0 1 67.077231-64.062524A334.883703 334.883703 0 0 1 238.711485 38.379481a658.964705 658.964705 0 0 1 72.352968-23.86643A400.202354 400.202354 0 0 1 441.450531 0.695644a667.506375 667.506375 0 0 1 77.37748 8.039218 417.034468 417.034468 0 0 1 88.68263 25.122559 413.51731 413.51731 0 0 1 152.745155 102.751263 373.321217 373.321217 0 0 1 92.199789 167.81869c0 1.507354 0 2.763481 1.256128 4.270835a42.708349 42.708349 0 0 1 1.004903 7.034316zM266.095074 193.888117A57.028207 57.028207 0 1 0 322.62083 251.921227a56.525756 56.525756 0 0 0-56.525756-58.03311z m337.395958 0a57.028207 57.028207 0 0 0-57.530658 55.018403A58.03311 58.03311 0 0 0 603.491032 307.442081a56.776982 56.776982 0 1 0 0-113.553964z" fill="#24B038" ></path><path d="M836.377148 348.140625a457.230562 457.230562 0 0 1 94.209594 12.812505 320.312619 320.312619 0 0 1 73.860321 25.122559c17.08334 8.792895 34.166679 17.08334 50.245117 25.122558a123.100536 123.100536 0 0 1 14.319858 11.305151l17.837017 12.812505a44.215703 44.215703 0 0 1 5.778188 3.517158A361.76484 361.76484 0 0 1 1131.064757 478.024252a401.960933 401.960933 0 0 1 38.437515 59.540463 247.205974 247.205974 0 0 1 26.881137 136.415492 296.697414 296.697414 0 0 1-20.098047 90.692436 340.913117 340.913117 0 0 1-33.664228 60.796591 215.049099 215.049099 0 0 1-22.107851 25.122558c-8.290444 8.792895-16.580889 17.334565-25.122559 25.122559a151.991478 151.991478 0 0 1-18.339467 15.32476 10.049023 10.049023 0 0 0-4.270835 13.314956l13.566181 40.447319c5.526963 17.08334 11.305151 34.417905 16.580889 51.75247 0 2.009805 0 6.029414-1.507354 6.783091a9.295347 9.295347 0 0 1-7.787993 0q-25.122558-14.319858-52.003695-29.393393l-42.70835-25.122559a21.856626 21.856626 0 0 0-19.846821-1.758579 559.479374 559.479374 0 0 1-56.776982 15.827212 359.252584 359.252584 0 0 1-45.974281 8.039219 340.913117 340.913117 0 0 1-86.170375 0c-22.610303-3.768384-45.220605-6.783091-67.328457-12.561279a388.645978 388.645978 0 0 1-57.028207-21.102949 511.997739 511.997739 0 0 1-50.245117-25.122559 311.519723 311.519723 0 0 1-79.136059-69.338261 290.919226 290.919226 0 0 1-30.649521-43.713251 328.351838 328.351838 0 0 1-22.610302-50.245117 219.57116 219.57116 0 0 1-11.053926-48.988989 464.767329 464.767329 0 0 1-3.014707-67.328456 248.713328 248.713328 0 0 1 16.580889-70.845615 279.614074 279.614074 0 0 1 34.920356-63.560072 277.60427 277.60427 0 0 1 46.476733-52.003696 407.236671 407.236671 0 0 1 44.466928-31.905649 263.284411 263.284411 0 0 1 37.935063-22.359077 566.011239 566.011239 0 0 1 62.303945-23.615205 410.502603 410.502603 0 0 1 59.791688-13.314956c21.856626-2.512256 43.462026-4.773286 64.816201-6.783091z m75.367675 189.926542a50.245117 50.245117 0 0 0 50.245117 54.515951 50.245117 50.245117 0 0 0 53.259823-52.757372 53.008598 53.008598 0 0 0-53.259823-52.003696 53.511049 53.511049 0 0 0-50.245117 50.245117z m-211.280716-50.245117a52.254921 52.254921 0 1 0 1.256128 104.509843 50.245117 50.245117 0 0 0 50.245117-54.767178 48.486538 48.486538 0 0 0-51.501245-49.49144z" fill="#24B038" ></path></symbol><symbol id="icon-QQ" viewBox="0 0 1024 1024"><path d="M511.09761 957.257c-80.159 0-153.737-25.019-201.11-62.386-24.057 6.702-54.831 17.489-74.252 30.864-16.617 11.439-14.546 23.106-11.55 27.816 13.15 20.689 225.583 13.211 286.912 6.767v-3.061z" fill="#FAAD08" ></path><path d="M496.65061 957.257c80.157 0 153.737-25.019 201.11-62.386 24.057 6.702 54.83 17.489 74.253 30.864 16.616 11.439 14.543 23.106 11.55 27.816-13.15 20.689-225.584 13.211-286.914 6.767v-3.061z" fill="#FAAD08" ></path><path d="M497.12861 474.524c131.934-0.876 237.669-25.783 273.497-35.34 8.541-2.28 13.11-6.364 13.11-6.364 0.03-1.172 0.542-20.952 0.542-31.155C784.27761 229.833 701.12561 57.173 496.64061 57.162 292.15661 57.173 209.00061 229.832 209.00061 401.665c0 10.203 0.516 29.983 0.547 31.155 0 0 3.717 3.821 10.529 5.67 33.078 8.98 140.803 35.139 276.08 36.034h0.972z" fill="#000000" ></path><path d="M860.28261 619.782c-8.12-26.086-19.204-56.506-30.427-85.72 0 0-6.456-0.795-9.718 0.148-100.71 29.205-222.773 47.818-315.792 46.695h-0.962C410.88561 582.017 289.65061 563.617 189.27961 534.698 185.44461 533.595 177.87261 534.063 177.87261 534.063 166.64961 563.276 155.56661 593.696 147.44761 619.782 108.72961 744.168 121.27261 795.644 130.82461 796.798c20.496 2.474 79.78-93.637 79.78-93.637 0 97.66 88.324 247.617 290.576 248.996a718.01 718.01 0 0 1 5.367 0C708.80161 950.778 797.12261 800.822 797.12261 703.162c0 0 59.284 96.111 79.783 93.637 9.55-1.154 22.093-52.63-16.623-177.017" fill="#000000" ></path><path d="M434.38261 316.917c-27.9 1.24-51.745-30.106-53.24-69.956-1.518-39.877 19.858-73.207 47.764-74.454 27.875-1.224 51.703 30.109 53.218 69.974 1.527 39.877-19.853 73.2-47.742 74.436m206.67-69.956c-1.494 39.85-25.34 71.194-53.24 69.956-27.888-1.238-49.269-34.559-47.742-74.435 1.513-39.868 25.341-71.201 53.216-69.974 27.909 1.247 49.285 34.576 47.767 74.453" fill="#FFFFFF" ></path><path d="M683.94261 368.627c-7.323-17.609-81.062-37.227-172.353-37.227h-0.98c-91.29 0-165.031 19.618-172.352 37.227a6.244 6.244 0 0 0-0.535 2.505c0 1.269 0.393 2.414 1.006 3.386 6.168 9.765 88.054 58.018 171.882 58.018h0.98c83.827 0 165.71-48.25 171.881-58.016a6.352 6.352 0 0 0 1.002-3.395c0-0.897-0.2-1.736-0.531-2.498" fill="#FAAD08" ></path><path d="M467.63161 256.377c1.26 15.886-7.377 30-19.266 31.542-11.907 1.544-22.569-10.083-23.836-25.978-1.243-15.895 7.381-30.008 19.25-31.538 11.927-1.549 22.607 10.088 23.852 25.974m73.097 7.935c2.533-4.118 19.827-25.77 55.62-17.886 9.401 2.07 13.75 5.116 14.668 6.316 1.355 1.77 1.726 4.29 0.352 7.684-2.722 6.725-8.338 6.542-11.454 5.226-2.01-0.85-26.94-15.889-49.905 6.553-1.579 1.545-4.405 2.074-7.085 0.242-2.678-1.834-3.786-5.553-2.196-8.135" fill="#000000" ></path><path d="M504.33261 584.495h-0.967c-63.568 0.752-140.646-7.504-215.286-21.92-6.391 36.262-10.25 81.838-6.936 136.196 8.37 137.384 91.62 223.736 220.118 224.996H506.48461c128.498-1.26 211.748-87.612 220.12-224.996 3.314-54.362-0.547-99.938-6.94-136.203-74.654 14.423-151.745 22.684-215.332 21.927" fill="#FFFFFF" ></path><path d="M323.27461 577.016v137.468s64.957 12.705 130.031 3.91V591.59c-41.225-2.262-85.688-7.304-130.031-14.574" fill="#EB1C26" ></path><path d="M788.09761 432.536s-121.98 40.387-283.743 41.539h-0.962c-161.497-1.147-283.328-41.401-283.744-41.539l-40.854 106.952c102.186 32.31 228.837 53.135 324.598 51.926l0.96-0.002c95.768 1.216 222.4-19.61 324.6-51.924l-40.855-106.952z" fill="#EB1C26" ></path></symbol><symbol id="icon-mail" viewBox="0 0 1024 1024"><path d="M512.711709 440.905802 236.466108 268.246417 187.709661 268.246417 187.709661 755.754606 268.958126 755.754606 268.958126 400.278499 512.711709 552.626279 756.466316 400.278499 756.466316 755.754606 837.717851 755.754606 837.717851 268.246417 788.958334 268.246417Z" fill="#1296db" ></path><path d="M837.717851 166.528758 187.709661 166.528758c-27.173896 0-52.66343 10.592242-71.773673 29.825282-19.054985 19.177781-29.54899 44.709271-29.54899 71.876004l-0.397043 487.524562c0 56.087413 45.63127 101.716636 101.719706 101.716636l650.00819 0c56.087413 0 101.716636-45.630247 101.716636-101.716636L939.434487 268.246417C939.434487 212.159004 893.804241 166.528758 837.717851 166.528758zM898.502239 755.754606c0 33.517371-27.267017 60.784388-60.784388 60.784388L187.709661 816.538995c-33.518395 0-60.787458-27.267017-60.787458-60.768015l0.397043-487.525586c0-33.517371 27.091008-60.785411 60.391439-60.785411l650.00819 0c33.517371 0 60.784388 27.26804 60.784388 60.785411L898.503263 755.754606z" fill="#1296db" ></path></symbol><symbol id="icon-kaggle_" viewBox="0 0 1024 1024"><path d="M803.214 1017.984c-0.928 3.936-4.992 6.016-12 6.016h-133.92c-7.968 0-14.976-3.488-20.992-10.592l-220.928-281.12-61.792 58.624v218.08q0 15.024-14.976 15.008H234.894q-15.12 0-15.1-15.008V15.072C219.79 5.12 224.814 0 234.894 0h103.712c9.984 0 14.976 5.12 14.976 15.072V627.04l264.672-267.616c7.04-7.04 14.08-10.5 21.12-10.5h138.208c6.144 0 10.08 2.56 12.16 7.68 1.952 6.368 1.44 10.88-1.536 13.44L508.522 640.736l291.68 362.976c4.064 4.448 4.992 8.864 2.976 15.264z" fill="#20BEFF" ></path></symbol><symbol id="icon-xiaohongshu" viewBox="0 0 1024 1024"><path d="M726.51776 457.45152c-6.70208-0.0768-13.39392 0-20.00384-0.0768-2.37056 0-3.0464 1.05984-3.0464 3.23072 0.0768 5.10976 0.0768 10.13248 0.0768 15.232v0.01024c0.07168 4.87936 0 9.7536 0.07168 14.56128 0 3.90656 0.68096 4.66944 4.45952 4.66944 7.1424 0.0768 14.27456 0 21.41696 0.0768 2.67776 0 3.72736-1.28 3.65056-3.75808-0.08704-9.1648-0.08704-18.31936-0.15872-27.48416a6.7584 6.7584 0 0 0-6.46656-6.46144z" fill="#FF2E4D" ></path><path d="M849.92 51.2h-675.84c-67.8656 0-122.88 55.0144-122.88 122.88v675.84c0 67.8656 55.0144 122.88 122.88 122.88h675.84c67.8656 0 122.88-55.0144 122.88-122.88V174.08c0-67.8656-55.0144-122.88-122.88-122.88zM250.78784 505.73312c-0.73728 10.59328-1.41312 21.25312-2.60608 31.8464-2.08896 18.39104-6.24128 36.26496-14.6432 52.864-2.16064 4.12672-5.13536 7.79776-8.18176 12.45696-1.85344-3.90656-3.41504-6.97856-4.82816-10.13248a3203.59424 3203.59424 0 0 1-14.79168-33.56672c-0.52736-1.2032-0.896-2.92352-0.36864-3.97824 3.19488-6.83008 3.41504-14.12096 3.85536-21.40672 0.60416-9.15968 1.35168-18.24256 2.01728-27.39712 0.51712-7.00416 0.80896-13.9776 1.39776-20.96128 0.67584-8.10496 1.49504-16.21504 2.16064-24.24832 0.14848-1.96608 1.04448-2.56 2.82624-2.56 11.0848 0 22.07744 0 33.16224-0.07168 2.37056 0 3.0464 0.98304 2.89792 3.23072-0.96768 14.63296-1.86368 29.28128-2.89792 43.92448z m71.29088 87.32672c-0.73728 9.46176-5.13536 17.49504-12.5696 23.5008-5.43232 4.352-11.74528 6.15936-18.6624 6.08256-5.87264 0-11.66848-0.0768-17.54112 0-2.00192 0-3.27168-0.60416-4.09088-2.55488-3.41504-7.6544-6.90688-15.32416-10.32192-22.97344-0.52736-1.13152-0.67584-2.33472-1.13152-3.456-1.63328-4.12672-1.5616-4.28544 2.97472-4.36224h13.90592c5.94944 0 8.47872-2.46784 8.5504-8.56576 0.07168-4.57216 0.07168-9.14944 0.07168-13.73696V494.2336c0.14848 0.15872 0.22016 0.15872 0.29696 0.15872V408.63744c0-4.28544 0.14848-4.43392 4.38784-4.43392h29.21472c5.13536 0 5.20704 0.14848 5.20704 5.40672 0 27.1872 0 54.36416 0.0768 81.47968 0.0768 23.87456 0.29696 47.75936 0.29696 71.6288 0 10.14272 0.14848 20.26496-0.6656 30.34112z m75.58656-28.90752c-4.98688 11.56096-10.19904 22.97344-15.31904 34.4576-0.45568 1.13664-1.19296 2.25792-2.3808 4.42368v0.01024c-2.97472-4.5056-6.0928-8.18176-8.11008-12.39552-2.82624-6.13888-4.5312-12.83584-7.35744-18.9952-3.0464-6.6816-4.15744-13.88032-5.57568-20.94592-1.1776-6.02112-1.40288-12.25216-1.8432-18.3296-1.2032-15.39584-2.23744-30.78656-3.44064-46.09536a2449.95584 2449.95584 0 0 0-2.0736-25.1648c-0.14848-1.50016 0.2304-2.176 1.94048-2.176 11.52512 0 22.97344-0.14848 34.49856-0.22016 2.1504 0 3.0464 0.96768 3.11808 2.9952 0.29696 4.65408 0.51712 9.31328 0.88576 13.97248 0.29696 3.83488 0.73728 7.6544 1.04448 11.41248 0.51712 5.40672 1.04448 10.81344 1.41312 16.14336 0.51712 6.90688 0.51712 13.81888 1.4848 20.63872 1.34144 10.4448 0.29696 21.10464 3.93216 31.32928 0.89088 2.40128-0.96768 6.08768-2.21696 8.93952z m84.28032 22.016c-2.89792 6.6816-6.02112 13.21472-8.99072 19.82464-1.64352 3.74784-3.19488 7.49568-4.76672 11.25376-1.85344 4.51072-3.11808 5.40672-7.87456 5.40672h-22.2976c-7.52128 0-15.0272 0.23552-22.53312-0.0768-3.56352-0.14336-7.0656-1.27488-10.62912-2.02752-1.792-0.36864-2.16064-1.42336-1.41312-3.14368a3709.71648 3709.71648 0 0 0 13.45024-29.21472c1.04448-2.24768 1.85344-4.65408 3.0464-6.90688 0.29696-0.6144 1.41312-1.28 2.00192-1.13152 12.42112 3.15392 25.13408 2.77504 37.76512 2.63168a874.6496 874.6496 0 0 1 20.07552 0c3.19488 0.00512 3.50208 0.45568 2.16576 3.38432z m3.84-21.86752a4.48512 4.48512 0 0 1-2.74944 1.4336c-13.89568 0.0768-27.8784 0.14848-41.77408-0.0768-4.23936-0.08704-8.5504-1.05472-11.74528-4.28544-3.3536-3.3792-4.98688-7.36256-3.28192-11.93984a897.52576 897.52576 0 0 1 9.58464-24.10496c3.88096-9.15456 7.81312-18.31936 12.05248-28.2368-2.30912-0.14848-3.712-0.29696-5.04832-0.29696-4.09088-0.07168-8.18176 0.29696-12.27264-0.2304-4.45952-0.51712-8.99072-1.04448-12.48256-4.79232-3.42528-3.6864-3.94752-8.04352-2.60608-12.32384 2.1504-6.83008 4.97664-13.44 7.80288-20.04992 2.67776-6.15424 5.72416-12.16 8.47872-18.24256 2.97472-6.53824 5.86752-13.07136 8.77056-19.6096a1361.99168 1361.99168 0 0 0 7.6544-17.33632c0.73728-1.80736 1.8688-2.47808 3.87072-2.47808 10.93632 0.07168 21.92896 0 32.86528 0 3.6352 0 3.712 0.36864 2.29888 3.6864-6.31296 14.63296-12.71808 29.20448-18.95936 43.84768a11.52 11.52 0 0 0-1.19296 4.87936c0.22016 3.90656 1.04448 4.5056 5.06368 4.5056 8.17152 0.0768 16.35328 0 24.448 0 1.64864 0 3.3536 0.22016 4.98688 0.29696 2.30912 0.0768 2.60608 1.05984 1.63328 3.072a2455.21408 2455.21408 0 0 0-13.3888 29.21472c-3.03616 6.91712-5.93408 13.89568-8.9088 20.8128a1530.1632 1530.1632 0 0 1-6.1696 13.80864c-1.94048 4.20352-0.60416 6.31296 4.15232 6.38976 6.02112 0 12.04224 0.0768 18.05824 0 2.08896 0 3.13344 0.60416 2.08896 2.85184-3.6352 8.25344-7.21408 16.58368-10.84928 24.85248-0.67072 1.50016-1.408 3.072-2.3808 4.352z m134.81472 58.73664h-125.3376c-1.72032-0.22016-3.48672-0.22016-5.94432-0.22016v-0.01536c0.88064-2.61632 1.41312-4.41856 2.1504-6.0672 4.69504-10.29632 9.4464-20.5056 14.0544-30.79168 1.04448-2.33472 2.52928-2.92352 4.75648-2.92352h28.6976c4.54656 0 4.75648-0.2304 4.75648-4.74112V461.66016c0-3.97824-0.0768-4.05504-4.08064-4.05504-6.10304 0-12.26752-0.0768-18.36544 0-2.30912 0-3.27168-0.51712-3.27168-3.1488 0.14848-10.97216 0.0768-21.92896 0.0768-32.88576 0-3.90656 0.0768-3.90656 3.86048-3.90656h73.00096c4.23936 0 8.5504 0.0768 12.78976 0 2.01728 0 2.82624 0.82432 2.74944 2.85184-0.0768 11.41248-0.0768 22.82496-0.0768 34.31424 0 2.02752-0.73728 2.77504-2.82624 2.77504-6.6048-0.0768-13.14304 0.07168-19.77856 0.07168-2.29376 0-3.33824 1.05984-3.33824 3.46624 0.0768 18.39104 0.14336 36.7104 0.14336 55.11168 0 20.87424 0 41.74848 0.0768 62.6944 0 3.75808 0.36864 4.21376 4.17792 4.21376h31.4368c3.41504 0 3.87072 0.36864 3.93728 3.81952 0.08704 10.97216 0 21.92896 0.08704 32.89088-0.01024 2.8672-1.57184 3.16416-3.73248 3.16416z m198.69696-34.92864c-0.14848 16.37376-11.008 29.21472-26.38848 32.89088-4.31616 1.05472-8.78592 1.35168-13.24544 1.5104-6.83008 0.22016-13.7472 0.07168-20.58752 0.07168-4.23936 0-5.42208-0.83456-6.9888-4.66432-3.33824-7.95136-6.83008-15.90784-10.26048-23.87456l-0.66048-1.57184c-1.19296-3.072-0.81408-3.61472 2.45248-3.61472 9.43616-0.07168 18.95424 0.15872 28.3904-0.29184 5.65248-0.29696 8.03328-2.85696 8.18688-8.64256 0.22016-11.04384-0.29696-22.07744-0.14848-33.11104 0.0768-5.48864-6.84032-11.42272-11.74528-11.71968a32.8448 32.8448 0 0 0-2.74944-0.14336c-18.73408 0-37.54496 0-56.2688 0.07168-5.27872 0-5.65248 0.53248-5.65248 5.8624l0.20992 77.55776c0 4.14208-0.0768 4.21376-4.23936 4.21376h-31.22176c-4.01408 0-4.3008-0.3072-4.3008-4.28544v-39.94112c0.06144 0.14336 0.13312 0.14336 0.20992 0.14336v-40.99584c0-2.78016-1.85344-2.93888-3.78368-2.93888-10.19392 0.08704-20.44416 0.31232-30.62272 0.31232-6.92224 0-6.17984 0.8192-6.25664-6.38976-0.0768-9.90208 0-19.90144 0-29.80352 0-3.59936 0.36864-4.05504 3.94752-4.13184 10.7008-0.07168 21.33504 0 32.04096-0.07168 4.09088 0 4.31104-0.15872 4.38272-4.21376 0.0768-9.90208-0.0768-19.8144 0-29.73184 0-2.4832-1.04448-3.23072-3.41504-3.23072-6.84544 0.0768-13.76256-0.07168-20.60288 0-2.1504 0-2.89792-0.74752-2.89792-2.92352 0.09216-11.26912 0.09216-22.46144-0.06144-33.72544 0-2.70336 1.03424-3.29216 3.41504-3.29216 6.31296 0.0768 12.6464 0 18.95936 0 4.23424 0 4.45952-0.3072 4.5312-4.74112 0-2.61632 0.14848-5.24288 0-7.87456-0.07168-2.4832 1.04448-3.15904 3.34336-3.15904 9.07776 0.0768 18.22208 0.0768 27.28448 0.0768h4.97664c3.94752 0 4.0192 0 4.1728 4.05504 0.06656 2.4064-0.1536 4.87936-0.08704 7.28576 0.0768 3.3792 0.9728 4.2752 4.31616 4.36224 5.65248 0.0768 11.30496 0.0768 17.024 0.0768 14.6432 0.07168 27.3664 5.09952 37.0176 16.29184 5.35552 6.22592 8.69888 13.81888 9.216 22.14912 0.52736 8.47872 0.15872 17.03936 0.3072 25.52832 0 3.15904 0.22016 6.38976 0.36864 9.53344 0.14336 3.15904 0.896 3.97824 4.09088 3.90656a48.56832 48.56832 0 0 1 19.03104 3.15904c13.00992 5.03808 21.03296 14.18752 23.63904 28.01152a44.4416 44.4416 0 0 1 0.73728 8.33024c0.08192 17.88928 0.06656 35.78368-0.06656 53.6832zM810.14272 453.632c-5.94432 3.90656-12.1856 3.75808-19.4048 3.6864-2.23744 0-5.20192 0.07168-8.09984-0.0768-0.7424-0.07168-2.00704-0.98304-2.08896-1.5872-0.6656-8.84736-1.77152-17.792 1.35168-26.35264 2.75456-7.5776 9.58464-12.01664 17.61792-12.16a19.99872 19.99872 0 0 1 19.32288 14.336c2.30912 8.2688-1.55648 17.42336-8.69888 22.15424z" fill="#FF2E4D" ></path></symbol><symbol id="icon-github" viewBox="0 0 1024 1024"><path d="M512 85.333333C276.266667 85.333333 85.333333 276.266667 85.333333 512a426.410667 426.410667 0 0 0 291.754667 404.821333c21.333333 3.712 29.312-9.088 29.312-20.309333 0-10.112-0.554667-43.690667-0.554667-79.445333-107.178667 19.754667-134.912-26.112-143.445333-50.133334-4.821333-12.288-25.6-50.133333-43.733333-60.288-14.933333-7.978667-36.266667-27.733333-0.554667-28.245333 33.621333-0.554667 57.6 30.933333 65.621333 43.733333 38.4 64.512 99.754667 46.378667 124.245334 35.2 3.754667-27.733333 14.933333-46.378667 27.221333-57.045333-94.933333-10.666667-194.133333-47.488-194.133333-210.688 0-46.421333 16.512-84.778667 43.733333-114.688-4.266667-10.666667-19.2-54.4 4.266667-113.066667 0 0 35.712-11.178667 117.333333 43.776a395.946667 395.946667 0 0 1 106.666667-14.421333c36.266667 0 72.533333 4.778667 106.666666 14.378667 81.578667-55.466667 117.333333-43.690667 117.333334-43.690667 23.466667 58.666667 8.533333 102.4 4.266666 113.066667 27.178667 29.866667 43.733333 67.712 43.733334 114.645333 0 163.754667-99.712 200.021333-194.645334 210.688 15.445333 13.312 28.8 38.912 28.8 78.933333 0 57.045333-0.554667 102.912-0.554666 117.333334 0 11.178667 8.021333 24.490667 29.354666 20.224A427.349333 427.349333 0 0 0 938.666667 512c0-235.733333-190.933333-426.666667-426.666667-426.666667z" fill="#000000" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M729.32864 373.94944c-9.79456-5.94432-19.06176-6.784-19.14368-6.784l-1.06496-0.0512c-57.20064-3.8656-121.1648-5.83168-190.12608-5.83168l-13.98784 0.00512c-68.95616 0-132.92544 1.96096-190.12096 5.83168l-1.06496 0.0512c-0.08192 0-9.34912 0.83968-19.14368 6.784-15.04768 9.12896-24.27392 25.94816-27.4176 49.9712-10.07104 76.91264-4.38272 173.64992 0.18944 251.392 2.93888 49.96608 33.408 62.45888 85.04832 67.1488 10.78272 0.98816 69.08928 5.86752 159.50848 5.89312v-0.00512c90.4192-0.02048 148.72576-4.90496 159.5136-5.888 51.64032-4.68992 82.10944-17.18272 85.0432-67.1488 4.57728-77.74208 10.26048-174.47936 0.18944-251.392-3.1488-24.02816-12.37504-40.84736-27.42272-49.97632z m-390.9888 172.71808a23.64928 23.64928 0 0 1-31.68768-10.84416 23.68 23.68 0 0 1 10.84416-31.68768c2.03776-1.00352 50.69312-24.72448 110.5408-43.06432a23.68 23.68 0 1 1 13.88032 45.29152c-56.2944 17.24928-103.11168 40.07424-103.5776 40.30464z m268.89728 35.88608c-0.44032 2.23232-11.26912 54.64064-50.93888 54.64064-21.44256 0-36.10112-14.04928-44.98432-26.77248-8.69376 12.70784-22.80448 26.77248-42.65472 26.77248-35.5328 0-50.13504-48.26624-51.68128-53.77024a11.3664 11.3664 0 0 1 21.87776-6.1696c2.74944 9.6512 14.1312 37.20192 29.7984 37.20192 16.37376 0 28.89216-23.64416 31.98464-31.92832a11.37152 11.37152 0 0 1 10.6496-7.38816h0.06144c4.76672 0.03072 9.0112 3.02592 10.62912 7.50592 0.10752 0.28672 11.96544 31.81568 34.31424 31.81568 20.864 0 28.56448-35.95264 28.64128-36.32128a11.34592 11.34592 0 0 1 13.35808-8.93952 11.36128 11.36128 0 0 1 8.94464 13.35296z m110.11584-46.73536a23.68 23.68 0 0 1-31.68256 10.84416c-0.47104-0.2304-47.47264-23.1168-103.57248-40.30976a23.69024 23.69024 0 0 1-15.70816-29.58336 23.66976 23.66976 0 0 1 29.57824-15.70304c59.84768 18.33984 108.49792 42.0608 110.55104 43.06432a23.68 23.68 0 0 1 10.83392 31.68768z" fill="#F16C8D" ></path><path d="M849.92 51.2H174.08c-67.8656 0-122.88 55.0144-122.88 122.88v675.84c0 67.87072 55.0144 122.88 122.88 122.88h675.84c67.87072 0 122.88-55.00928 122.88-122.88V174.08c0-67.86048-55.00928-122.88-122.88-122.88z m-36.60288 627.45088c-2.62656 44.57984-21.82144 78.63296-55.51616 98.48832-25.68192 15.13472-54.17472 19.48672-81.13664 21.9392-32.45568 2.94912-92.71808 6.09792-164.66432 6.1184-71.94112-0.02048-132.20864-3.16416-164.66432-6.1184-26.96192-2.45248-55.45472-6.80448-81.13152-21.9392-33.69472-19.85536-52.8896-53.90336-55.51104-98.4832-4.70528-80.13312-10.5728-179.85536 0.19456-262.10816C221.5424 335.16544 280.99072 311.57248 311.5008 310.37952a2482.64192 2482.64192 0 0 1 81.42336-4.08576c-7.53664-8.53504-19.88096-23.3216-28.81536-38.11328-13.73696-22.73792 8.52992-41.68704 8.52992-41.68704s23.68-20.36736 44.52864 5.21216c15.69792 19.26656 38.37952 55.99744 48.61952 72.95488l53.20704-0.21504c13.2608 0 26.33216 0.07168 39.2192 0.21504 10.24-16.95744 32.9216-53.6832 48.61952-72.95488 20.84352-25.57952 44.52864-5.21216 44.52864-5.21216s22.26176 18.94912 8.5248 41.68704c-8.9344 14.79168-21.27872 29.57824-28.81536 38.11328 28.35968 0.97792 55.56224 2.33984 81.42336 4.08064 30.5152 1.19808 89.9584 24.79104 100.61312 106.17344 10.7776 82.24768 4.9152 181.96992 0.20992 262.10304z" fill="#F16C8D" ></path></symbol><symbol id="icon-zhihu" viewBox="0 0 1024 1024"><path d="M656.90624 724.29056l47.42144-33.72544h52.68992V344.89856h-143.31904v346.7264h35.82976z" fill="#0066FF" ></path><path d="M849.92 51.2H174.08c-67.8656 0-122.88 55.0144-122.88 122.88v675.84c0 67.8656 55.0144 122.88 122.88 122.88h675.84c67.8656 0 122.88-55.0144 122.88-122.88V174.08c0-67.8656-55.0144-122.88-122.88-122.88zM495.66208 803.34848l-101.1712-157.05088 44.26752-31.616 67.45088 98.00704c-0.00512 0 23.17824 37.99552-10.5472 90.65984z m38.99392-276.10112v25.2928H408.19712C357.61152 876.06784 204.8 807.04512 204.8 807.04512c140.16512-109.86496 142.7968-254.50496 142.7968-254.50496H208.49152c0-57.9584 52.16256-56.91392 52.16256-56.91392h93.79328v-151.7568h-50.5856C284.89728 429.2352 204.8 425.02144 204.8 425.02144s32.67072-50.5856 54.79936-137.00096c22.12864-86.42048 89.5744-76.928 89.5744-76.928-20.0192 35.82976-29.50656 76.928-29.50656 76.928H485.12c40.04864 0 37.9392 25.2928 37.9392 25.2928v29.51168H411.35616v152.8064H503.04c33.72544 0 31.616 31.616 31.616 31.616zM819.2 747.49952h-102.22592l-88.51968 55.84896-8.42752-55.84896h-64.29184V288.01536H819.2v459.48416z" fill="#0066FF" ></path></symbol></svg>'),  ((h) => {    var c = (l = (l = document.getElementsByTagName("script"))[        l.length - 1      ]).getAttribute("data-injectcss"),      l = l.getAttribute("data-disable-injectsvg");    if (!l) {      var a,        t,        i,        o,        s,        e = function (c, l) {          l.parentNode.insertBefore(c, l);        };      if (c && !h.__iconfont__svg__cssinject__) {        h.__iconfont__svg__cssinject__ = !0;        try {          document.write(            "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"          );        } catch (c) {          console && console.log(c);        }      }      (a = function () {        var c,          l = document.createElement("div");        (l.innerHTML = h._iconfont_svg_string_4810983),          (l = l.getElementsByTagName("svg")[0]) &&            (l.setAttribute("aria-hidden", "true"),            (l.style.position = "absolute"),            (l.style.width = 0),            (l.style.height = 0),            (l.style.overflow = "hidden"),            (l = l),            (c = document.body).firstChild              ? e(l, c.firstChild)              : c.appendChild(l));      }),        document.addEventListener          ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)            ? setTimeout(a, 0)            : ((t = function () {                document.removeEventListener("DOMContentLoaded", t, !1), a();              }),              document.addEventListener("DOMContentLoaded", t, !1))          : document.attachEvent &&            ((i = a),            (o = h.document),            (s = !1),            d(),            (o.onreadystatechange = function () {              "complete" == o.readyState &&                ((o.onreadystatechange = null), v());            }));    }    function v() {      s || ((s = !0), i());    }    function d() {      try {        o.documentElement.doScroll("left");      } catch (c) {        return void setTimeout(d, 50);      }      v();    }  })(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签页</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
