<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isKage`Blog</title>
  
  <subtitle>Welcome :)</subtitle>
  <link href="https://blog.iskage.online/atom.xml" rel="self"/>
  
  <link href="https://blog.iskage.online/"/>
  <updated>2025-03-13T09:13:10.219Z</updated>
  <id>https://blog.iskage.online/</id>
  
  <author>
    <name>isKage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (4) R 语言初步：自定义函数、简单模拟与数据清洗</title>
    <link href="https://blog.iskage.online/posts/502a59cb.html"/>
    <id>https://blog.iskage.online/posts/502a59cb.html</id>
    <published>2025-03-13T09:07:00.000Z</published>
    <updated>2025-03-13T09:13:10.219Z</updated>
    
    <content type="html"><![CDATA[<h1>R 语言初步 (3) 自定义函数、简单模拟与数据清洗</h1><p>本章介绍 R 语言的函数定义方法，以及进行统计模拟、数据清洗的方法。<code>function</code> 关键字自定义函数；<code>r*</code> <code>p*</code> <code>d*</code> <code>q*</code> 分别进行各种分布的模拟；<code>sample</code> 函数进行简单随机抽样；数据清洗包括了缺失数据处理、按行排序、选取/删除部分数据、添加变量/特征和合并数据集操作。</p><h2 id="1-自定义函数">1 自定义函数</h2><h3 id="1-1-函数定义">1.1 函数定义</h3><p>定义函数的一般形式：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myfunction <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>a<span class="punctuation">,</span> b<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line">    <span class="built_in">return</span><span class="punctuation">(</span>object<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>myfunction</code> ：自定义的函数名称</li><li><code>function()</code> ：关键字，告诉 R 语言这是自定义的函数</li><li><code>a, b, c</code> ：为函数的参数，表明函数需要传入的参数</li><li><code>statement</code> ：函数体，编写函数的操作</li><li><code>return(object)</code> ：函数的返回值</li></ul><h3 id="1-2-传参方式">1.2 传参方式</h3><ul><li>方式一：按照参数顺序逐个传入</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myfunction<span class="punctuation">(</span>x1<span class="punctuation">,</span> x2<span class="punctuation">,</span> x3<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>方式二：指定参数</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myfunction<span class="punctuation">(</span>a <span class="operator">=</span> x1<span class="punctuation">,</span> b <span class="operator">=</span> x2<span class="punctuation">,</span> <span class="built_in">c</span> <span class="operator">=</span> x3<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-示例">1.3 示例</h3><ul><li>函数名：<code>my.data.ana</code></li><li>输入：一个向量 <code>x</code></li><li>任务：计算向量的平均值、最大值、最小值</li><li>输出：一个列表储存的结果</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my.data.ana <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    y <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>mean <span class="operator">=</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">max</span> <span class="operator">=</span> <span class="built_in">max</span><span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">min</span> <span class="operator">=</span> <span class="built_in">min</span><span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">    <span class="built_in">return</span><span class="punctuation">(</span>y<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> my.data.ana<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">y</span><br><span class="line"></span><br><span class="line"><span class="comment"># $mean</span></span><br><span class="line"><span class="comment"># [1] 5.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $max</span></span><br><span class="line"><span class="comment"># [1] 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $min</span></span><br><span class="line"><span class="comment"># [1] 1</span></span><br></pre></td></tr></table></figure><h2 id="2-简单模拟">2 简单模拟</h2><h3 id="2-1-有关统计分布的函数">2.1 有关统计分布的函数</h3><p><code>r*</code> ：<code>*</code> 分布的随机数函数</p><p><code>d*</code> ：<code>*</code> 分布的密度函数</p><p><code>p*</code> ：<code>*</code> 分布的分布函数</p><p><code>q*</code> ：<code>*</code> 分布的分位数函数</p><p>例如：</p><ul><li>正态分布的相关函数 <code>rnorm()</code> <code>dnorm()</code> <code>pnorm()</code> <code>qnorm()</code></li><li>Gamma 分布的相关函数 <code>rgamma()</code> <code>dgamma()</code> <code>pgamma()</code> <code>qgamma()</code></li><li>泊松分布相关函数 <code>rpois()</code> <code>dpois()</code> <code>ppois()</code> <code>qpois()</code></li></ul><h4 id="2-1-1-正态分布">2.1.1 正态分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传入分位数点，得到密度函数值</span></span><br><span class="line">dnorm<span class="punctuation">(</span>x<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入分位数点，得到分布函数值/即概率</span></span><br><span class="line">pnorm<span class="punctuation">(</span>q<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入概率值，得到对应的分位数点值</span></span><br><span class="line">qnorm<span class="punctuation">(</span>p<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 n 个随机数</span></span><br><span class="line">rnorm<span class="punctuation">(</span>n<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>分位数向量</td></tr><tr><td><code>p</code></td><td>概率值向量</td></tr><tr><td><code>n</code></td><td><code>rnorm(n)</code> 返回随机数的个数</td></tr><tr><td><code>mean</code></td><td>均值向量</td></tr><tr><td><code>sd</code></td><td>标准差向量</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>是否取对数，为 <code>TRUE</code> ，则传入 <code>log(p)</code></td></tr><tr><td><code>lower.tail</code></td><td>为 <code>TRUE</code> ，则概率表达式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>≤</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X \leq x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 否则，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>&gt;</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X &gt; x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><h4 id="2-1-2-Poisson-分布">2.1.2 Poisson 分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算概率密度函数 (PMF) 值</span></span><br><span class="line">dpois<span class="punctuation">(</span>x<span class="punctuation">,</span> lambda<span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累积分布函数 (CDF) 值</span></span><br><span class="line">ppois<span class="punctuation">(</span>q<span class="punctuation">,</span> lambda<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分位数（逆 CDF）</span></span><br><span class="line">qpois<span class="punctuation">(</span>p<span class="punctuation">,</span> lambda<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数</span></span><br><span class="line">rpois<span class="punctuation">(</span>n<span class="punctuation">,</span> lambda<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>非负整数分位数点。若输入非整数，<code>dpois</code> 返回 0；<code>ppois</code> 自动取 <code>floor(q)</code> 计算。</td></tr><tr><td><code>p</code></td><td>概率值向量，范围必须在 [0, 1] 之间。</td></tr><tr><td><code>n</code></td><td>生成的随机数数量。</td></tr><tr><td><code>lambda</code></td><td>非负向量。若为负数，返回 <code>NaN</code>。</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>逻辑值。若为 <code>TRUE</code>，概率以自然对数形式输入/输出。</td></tr><tr><td><code>lower.tail</code></td><td>逻辑值。若为 <code>TRUE</code>（默认），计算 <code>P(X ≤ x)</code> 或 <code>P(X ≤ q)</code>；否则计算 <code>P(X &gt; x)</code> 或 <code>P(X &gt; q)</code>。</td></tr></tbody></table><p><strong>关键细节</strong></p><ol><li><p><strong>离散性处理</strong><br>• <code>dpois(x, lambda)</code> 仅在 <code>x</code> 为整数时返回非零值，否则返回 0。<br>• <code>ppois(q, lambda)</code> 会对非整数 <code>q</code> 向下取整（等效计算 <code>P(X ≤ floor(q))</code>）。</p></li><li><p><strong>分位数函数逻辑</strong><br>• <code>qpois(p, lambda)</code> 返回最小整数 <code>k</code>，使得 <code>P(X ≤ k) ≥ p</code>。<br>• 当 <code>lower.tail = FALSE</code> 时，寻找最小 <code>k</code> 使得 <code>P(X &gt; k) ≤ p</code>（即右尾分位数）。</p></li><li><p><strong>向量化运算</strong><br>所有参数均支持向量化输入，按元素循环计算。例如：</p></li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 分别计算 λ=2 时 x=1，λ=3 时 x=2，λ=4 时 x=3 的概率</span></span><br><span class="line">dpois<span class="punctuation">(</span>x <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> lambda <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-二项分布">2.1.3 二项分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算概率密度函数 (PMF) 值</span></span><br><span class="line">dbinom<span class="punctuation">(</span>x<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累积分布函数 (CDF) 值</span></span><br><span class="line">pbinom<span class="punctuation">(</span>q<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分位数（逆 CDF）</span></span><br><span class="line">qbinom<span class="punctuation">(</span>p<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数</span></span><br><span class="line">rbinom<span class="punctuation">(</span>n<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>整数分位数点。若输入非整数，<code>dbinom</code> 返回 0；<code>pbinom</code> 自动取 <code>floor(q)</code> 计算。</td></tr><tr><td><code>p</code></td><td>概率值向量，范围必须在 [0, 1] 之间。</td></tr><tr><td><code>n</code></td><td>生成的随机数数量。若输入向量（如 <code>n = c(2,3)</code>），实际生成 <code>sum(n)</code> 个随机数。</td></tr><tr><td><code>size</code></td><td>试验次数（非负整数），若为小数会自动截断为整数。</td></tr><tr><td><code>prob</code></td><td>单次试验成功概率，范围 [0, 1]。若输入负数或 &gt;1 返回 <code>NaN</code>。</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>逻辑值。若为 <code>TRUE</code>，概率以自然对数形式输入/输出（例如 <code>log(0.05)</code>）。</td></tr><tr><td><code>lower.tail</code></td><td>逻辑值。若为 <code>TRUE</code>（默认），计算 <code>P(X ≤ x)</code> 或 <code>P(X ≤ q)</code>；否则计算 <code>P(X &gt; x)</code> 或 <code>P(X &gt; q)</code>。</td></tr></tbody></table><h3 id="2-2-随机抽样函数-sample">2.2 随机抽样函数 sample</h3><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span>x<span class="punctuation">,</span> size<span class="punctuation">,</span> replace <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> prob <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>抽样来源。可以是向量或单个整数：若为向量，直接从中抽样；若为整数 <code>n</code> ，等价于从 <code>1:n</code> 抽样</td></tr><tr><td><code>size</code></td><td>抽样数量。必须为非负整数，且当 <code>replace=FALSE</code> 时，<code>size ≤ length(x)</code></td></tr><tr><td><code>replace</code></td><td>是否放回抽样。默认 <code>FALSE</code>（无放回）；<code>TRUE</code> 时为有放回抽样</td></tr><tr><td><code>prob</code></td><td>权重向量。指定每个元素的抽样概率（自动归一化），需与 <code>x</code> 等长。默认等概率抽样</td></tr></tbody></table><hr><p><strong>关键细节</strong></p><ol><li>当 <code>x</code> 为整数时的特殊行为</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span>          <span class="comment"># 等价于从 1:5 中无放回抽3个数（如 2,4,1）</span></span><br><span class="line">sample<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span>       <span class="comment"># 从单元素向量 5 中有放回抽3次（需设置 replace=TRUE）</span></span><br></pre></td></tr></table></figure><ol start="2"><li>权重概率：若 <code>prob</code> 的和不为1，会自动归一化处理</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span><span class="string">&quot;B&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">5</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">,</span> prob<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">3</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># &quot;A&quot;出现概率为 3/(3+1)=75%</span></span><br></pre></td></tr></table></figure><ol start="3"><li>边界条件限制：<code>size</code> 在无放回时一定要比 <code>x</code> 的长度小</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">15</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">)</span>   <span class="comment"># 允许（有放回）</span></span><br><span class="line">sample<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">15</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">FALSE</span><span class="punctuation">)</span>  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><h3 id="2-3-随机种子-set-seed">2.3 随机种子 set.seed()</h3><p>在电脑上生成随机数字时，生成的数字并不是真正的随机数，它们叫做伪随机数 (pseudo random number)。当从任意分布模拟随机数字时，设置随机数字生成器种子 (seed) 是非常重要的。设置随机种子使得实验结果可复现。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n 指定一个整数</span></span><br><span class="line">set.seed<span class="punctuation">(</span>n<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>当设置随机种子后，随机结果将会相同</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set.seed<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">3</span><span class="punctuation">)</span> <span class="comment"># [1]  0.6328626  0.4042683 -0.1061245</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">4</span><span class="punctuation">)</span> <span class="comment"># [1]  1.5952808  0.3295078 -0.8204684  0.4874291</span></span><br><span class="line"></span><br><span class="line">set.seed<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">3</span><span class="punctuation">)</span> <span class="comment"># [1]  0.6328626  0.4042683 -0.1061245</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">4</span><span class="punctuation">)</span> <span class="comment"># [1]  1.5952808  0.3295078 -0.8204684  0.4874291</span></span><br></pre></td></tr></table></figure><h2 id="3-数据清洗">3 数据清洗</h2><p>结构化数据：表格形式的数据。每一行代表一个样本/观测，每一列对应一个变量/特征。</p><p><strong>创建示例数据表</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">manager <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">)</span></span><br><span class="line">date0 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;10/24/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/28/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/1/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/12/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;5/1/09&quot;</span><span class="punctuation">)</span></span><br><span class="line">nationality <span class="operator">&lt;-</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;US&quot;</span><span class="punctuation">,</span> <span class="string">&quot;UK&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">)</span></span><br><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">32</span><span class="punctuation">,</span> <span class="number">45</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">39</span><span class="punctuation">,</span> <span class="number">99</span><span class="punctuation">)</span></span><br><span class="line">q1 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q2 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q3 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">q4 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q5 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">leadership <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>manager<span class="punctuation">,</span> date0<span class="punctuation">,</span> nationality<span class="punctuation">,</span> gender<span class="punctuation">,</span> age<span class="punctuation">,</span> q1<span class="punctuation">,</span> q2<span class="punctuation">,</span> q3<span class="punctuation">,</span> q4<span class="punctuation">,</span> q5<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leadership</span><br><span class="line"><span class="comment">#   manager    date0 nationality gender age q1 q2 q3 q4 q5</span></span><br><span class="line"><span class="comment"># 1       1 10/24/08          US      M  32  5  4  5  5  5</span></span><br><span class="line"><span class="comment"># 2       2 10/28/08          US      F  45  3  5  2  5  5</span></span><br><span class="line"><span class="comment"># 3       3  10/1/08          UK      F  25  3  5  5  5  2</span></span><br><span class="line"><span class="comment"># 4       4 10/12/08          UK      M  39  3  3  4 NA NA</span></span><br><span class="line"><span class="comment"># 5       5   5/1/09          UK      F  99  2  2  1  2  1</span></span><br></pre></td></tr></table></figure><h3 id="3-1-缺失数据">3.1 缺失数据</h3><p><code>is.na()</code> 逐个元素比较是否为空 <code>NA</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741851904974.png" alt=""></p><p>直接删除 <code>na.omit</code> 非替换操作，删除空值的行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newdata <span class="operator">&lt;-</span> na.omit<span class="punctuation">(</span>leadership<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">newdata</span><br><span class="line"><span class="comment">#   manager    date0 nationality gender age q1 q2 q3 q4 q5</span></span><br><span class="line"><span class="comment"># 1       1 10/24/08          US      M  32  5  4  5  5  5</span></span><br><span class="line"><span class="comment"># 2       2 10/28/08          US      F  45  3  5  2  5  5</span></span><br><span class="line"><span class="comment"># 3       3  10/1/08          UK      F  25  3  5  5  5  2</span></span><br><span class="line"><span class="comment"># 5       5   5/1/09          UK      F  99  2  2  1  2  1</span></span><br></pre></td></tr></table></figure><blockquote><p>或者采用均值填充 <code>mean(leadership$age)</code></p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用中位数代替 q1 列的缺失值</span></span><br><span class="line">leadership<span class="operator">$</span>q1<span class="punctuation">[</span><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="operator">$</span>q1<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> median<span class="punctuation">(</span>leadership<span class="operator">$</span>q1<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值代替 q2 列的缺失值</span></span><br><span class="line">leadership<span class="operator">$</span>q2<span class="punctuation">[</span><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="operator">$</span>q2<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> mean<span class="punctuation">(</span>leadership<span class="operator">$</span>q2<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>其中 <code>na.rm = TRUE</code> 表示在计算均值/中位数等统计量时忽略空值。</p><h3 id="3-2-数据按行排序">3.2 数据按行排序</h3><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">函数/方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">对向量排序</td><td style="text-align:left"><code>sort()</code></td><td style="text-align:left">返回排序后的值</td></tr><tr><td style="text-align:left">获取排序索引</td><td style="text-align:left"><code>order()</code></td><td style="text-align:left">返回排序后的索引值，用于按行排序</td></tr><tr><td style="text-align:left">按列升序排序</td><td style="text-align:left"><code>data[order(data$column), ]</code></td><td style="text-align:left">按指定列升序排列数据框</td></tr><tr><td style="text-align:left">降序排序</td><td style="text-align:left"><code>order(x, decreasing = TRUE)</code></td><td style="text-align:left">按指定列降序排列数据框</td></tr><tr><td style="text-align:left">处理缺失值</td><td style="text-align:left"><code>na.last = TRUE/FALSE</code></td><td style="text-align:left">控制缺失值在排序中的位置（默认放在最后）</td></tr></tbody></table><p>例如：按照 <code>age</code> 升序排序</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newdata <span class="operator">&lt;-</span> leadership<span class="punctuation">[</span>order<span class="punctuation">(</span>leadership<span class="operator">$</span>age<span class="punctuation">)</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>好的，用户需要整理关于R语言中选取和删除部分数据的笔记，特别是使用下标运算、列名以及subset()函数的方法。他们已经提供了一些之前的笔记结构，我需要保持一致的风格和格式。</p><p>首先，我需要回忆R语言中数据框的基本操作。下标运算[ , ]的使用是关键，参数可以是正数、负数、逻辑值或空。用户还提到数据框有行名和列名，可以按列名选取列。另外，subset()函数也是一个重要的方法。</p><p>接下来，我需要确定如何组织内容。之前的笔记有参数详解、关键细节、示例和注意事项，我应该沿用这个结构。需要解释不同的下标类型如何影响选取或删除数据，比如正数选择特定行或列，负数排除，逻辑值过滤，空表示全选。还要说明如何使用列名来选取列，以及subset()函数的参数和使用场景。</p><p>需要注意常见的陷阱，比如混合使用正负下标可能导致错误，逻辑值的回收机制可能引发意外结果，subset()函数在处理变量时的环境问题。还要提到drop参数的影响，避免数据框降维为向量。</p><p>然后，准备示例代码。例如，用正数选取行和列，用负数删除，用逻辑表达式过滤行，按列名选取，以及subset()的使用。同时提供输出结果，帮助理解。</p><p>最后，总结不同方法的适用场景，帮助用户根据需求选择合适的方式。确保内容清晰，结构合理，语言简洁，符合用户之前的笔记风格。</p><h3 id="3-3-选取-删除部分数据">3.3 选取/删除部分数据</h3><h4 id="3-3-1-基础方法：下标运算符">3.3.1 基础方法：下标运算符 [ ]</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据框<span class="punctuation">[</span>行下标<span class="punctuation">,</span> 列下标<span class="punctuation">]</span>  <span class="comment"># 行和列下标可为正数、负数、逻辑值或空（保留所有行/列）</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>下标类型</th><th>说明</th></tr></thead><tbody><tr><td>正数</td><td>选取指定位置的行/列（如 <code>1:3</code> 选取前3行或前3列）</td></tr><tr><td>负数</td><td>排除指定位置的行/列（如 <code>-c(2,4)</code> 删除第2和第4行/列）</td></tr><tr><td>逻辑值</td><td>按 TRUE/FALSE 筛选行/列（如 <code>数据框$列名 &gt; 5</code> 筛选满足条件的行）</td></tr><tr><td>空值</td><td>保留所有行或列（如 <code>数据框[, 2:4]</code> 保留所有行，选取第2到4列）</td></tr><tr><td>列名</td><td>通过列名字符串筛选（如 <code>数据框[, c(&quot;列名1&quot;, &quot;列名2&quot;)]</code>）</td></tr></tbody></table><p><strong>示例</strong></p><ul><li>按照数字索引取/删除</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取前3行和前2列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除第2行和第3列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="operator">-</span><span class="number">2</span><span class="punctuation">,</span> <span class="operator">-</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选取所有行，仅保留第2列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span>      <span class="comment"># 结果可能降维为向量</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> drop<span class="operator">=</span><span class="literal">FALSE</span><span class="punctuation">]</span>  <span class="comment"># 保持数据框结构</span></span><br></pre></td></tr></table></figure><ul><li>按逻辑条件筛选行</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选年龄 &gt;30 的行</span></span><br><span class="line">df<span class="punctuation">[</span>df<span class="operator">$</span>age <span class="operator">&gt;</span> <span class="number">30</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选性别为女性且国籍为US的行</span></span><br><span class="line">df<span class="punctuation">[</span>df<span class="operator">$</span>gender <span class="operator">==</span> <span class="string">&quot;F&quot;</span> <span class="operator">&amp;</span> df<span class="operator">$</span>country <span class="operator">==</span> <span class="string">&quot;US&quot;</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li>按列名选取列</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取指定列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除指定列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="operator">!</span><span class="punctuation">(</span>colnames<span class="punctuation">(</span>df<span class="punctuation">)</span> <span class="operator">%in%</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;date&quot;</span><span class="punctuation">,</span> <span class="string">&quot;q5&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-subset-函数">3.3.2 subset() 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>数据框<span class="punctuation">,</span> subset<span class="operator">=</span>行筛选条件<span class="punctuation">,</span> select<span class="operator">=</span>列筛选条件<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>subset</code></td><td>逻辑表达式，筛选符合条件的行（如 <code>age &gt; 30</code>）</td></tr><tr><td><code>select</code></td><td>指定要保留的列，支持列名或列位置（如 <code>c(&quot;age&quot;, &quot;gender&quot;)</code> 或 <code>2:4</code>）</td></tr></tbody></table><p><strong>示例</strong></p><ul><li>筛选年龄 &gt; 30 且性别为男性的行，保留年龄和性别列</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>df<span class="punctuation">,</span> subset <span class="operator">=</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="operator">&amp;</span> gender <span class="operator">==</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> select <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>subset()</code> 的 <code>select</code> 参数支持负列名，表示删除/不取对应的列</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>数据框<span class="punctuation">,</span> select <span class="operator">=</span> <span class="operator">-</span><span class="built_in">c</span><span class="punctuation">(</span>列名<span class="number">1</span><span class="punctuation">,</span> 列名<span class="number">2</span><span class="punctuation">,</span> ...<span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="3-4-添加变量-特征">3.4 添加变量/特征</h3><h4 id="3-4-1-直接赋值法">3.4.1 直接赋值法</h4><p>通过 <code>$</code> 符号直接创建新变量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算 q1 到 q5 的总和 (qsum)</span></span><br><span class="line">leadership<span class="operator">$</span>qsum <span class="operator">&lt;-</span> leadership<span class="operator">$</span>q1 <span class="operator">+</span> leadership<span class="operator">$</span>q2 <span class="operator">+</span> leadership<span class="operator">$</span>q3 <span class="operator">+</span> leadership<span class="operator">$</span>q4 <span class="operator">+</span> leadership<span class="operator">$</span>q5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 qsum 的平均值 (qmean)</span></span><br><span class="line">leadership<span class="operator">$</span>qmean <span class="operator">&lt;-</span> leadership<span class="operator">$</span>qsum <span class="operator">/</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-within-函数">3.4.2 within() 函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leadership <span class="operator">&lt;-</span> within<span class="punctuation">(</span>leadership<span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    qsum <span class="operator">&lt;-</span> q1 <span class="operator">+</span> q2 <span class="operator">+</span> q3 <span class="operator">+</span> q4 <span class="operator">+</span> q5 <span class="comment"># 计算总和</span></span><br><span class="line">    qmean <span class="operator">&lt;-</span> qsum <span class="operator">/</span> <span class="number">5</span> <span class="comment"># 计算平均值</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-合并数据集">3.5 合并数据集</h3><h4 id="3-5-1-基础合并函数-cbind-rbind">3.5.1 基础合并函数 cbind() rbind()</h4><p><code>cbind()</code>：按列合并</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cbind<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df1 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>ID <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">df2 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>Age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">20</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">30</span><span class="punctuation">)</span><span class="punctuation">,</span> Score <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">85</span><span class="punctuation">,</span> <span class="number">90</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">combined_col <span class="operator">&lt;-</span> cbind<span class="punctuation">(</span>df1<span class="punctuation">,</span> df2<span class="punctuation">)</span>  <span class="comment"># 合并后列数为 df1 列数 + df2 列数</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>ID</th><th>Name</th><th>Age</th><th>Score</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>20</td><td>85</td></tr><tr><td>2</td><td>B</td><td>25</td><td>90</td></tr><tr><td>3</td><td>C</td><td>30</td><td>88</td></tr></tbody></table><blockquote><p>若行数不同，会报错；列名重复时自动添加后缀（如 <code>Score</code> 和 <code>Score.1</code>）</p></blockquote><p><code>rbind()</code>：按行合并</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbind<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df3 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>ID <span class="operator">=</span> <span class="number">4</span><span class="operator">:</span><span class="number">5</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;D&quot;</span><span class="punctuation">,</span> <span class="string">&quot;E&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> Age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">22</span><span class="punctuation">,</span> <span class="number">28</span><span class="punctuation">)</span><span class="punctuation">,</span> Score <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">92</span><span class="punctuation">,</span> <span class="number">80</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">combined_row <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>combined_col<span class="punctuation">,</span> df3<span class="punctuation">)</span>  <span class="comment"># 合并后行数为原两数据框行数之和</span></span><br></pre></td></tr></table></figure><p><strong>结果</strong>：<br>| ID   | Name | Age  | Score |<br>| ---- | ---- | ---- | ----- |<br>| 1    | A    | 20   | 85    |<br>| 2    | B    | 25   | 90    |<br>| 3    | C    | 30   | 88    |<br>| 4    | D    | 22   | 92    |<br>| 5    | E    | 28   | 80    |</p></li></ul><blockquote><p>若列名不一致，会报错</p></blockquote><h4 id="3-5-2-高级合并函数-merge">3.5.2 高级合并函数 merge()</h4><p>根据共同列（键）合并两个数据框。</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merge<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;列名&quot;</span><span class="punctuation">,</span> <span class="built_in">all</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>核心参数</p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>by</code></td><td>指定合并的列名（如 <code>by = &quot;ID&quot;</code>），若未指定则自动匹配同名列。</td></tr><tr><td><code>all.x</code></td><td>是否保留左表所有行（左外连接），默认 <code>FALSE</code>。</td></tr><tr><td><code>all.y</code></td><td>是否保留右表所有行（右外连接），默认 <code>FALSE</code>。</td></tr><tr><td><code>all</code></td><td><code>all = TRUE</code> 表示全外连接（保留所有行）。</td></tr></tbody></table><blockquote><p>左/右/外连接：按照某列合并时，可能会存在其他列个数不匹配。采用左外连接，则保留左表所有行，右表不足则复制，填入空值；采用右外连接，则保留右表所有行，左表不足则复制，填入空值；采用全连接，则保留左右表所有行，不足则复制，填入空值。</p></blockquote><ul><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orders <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>OrderID <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">101</span><span class="punctuation">,</span> <span class="number">102</span><span class="punctuation">,</span> <span class="number">103</span><span class="punctuation">)</span><span class="punctuation">,</span> CustomerID <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">customers <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>CustomerID <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内连接（默认）取交集，[1，2，4] 和 [1, 2, 3] 只有 [1, 2] 相交</span></span><br><span class="line">inner_join <span class="operator">&lt;-</span> merge<span class="punctuation">(</span>orders<span class="punctuation">,</span> customers<span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;CustomerID&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>内连接结果</p><table><thead><tr><th>CustomerID</th><th>OrderID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>A</td></tr><tr><td>2</td><td>102</td><td>B</td></tr></tbody></table><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左外连接，左表的 [1, 2, 4] 都保留，则多出来的无法匹配的留空</span></span><br><span class="line">left_join <span class="operator">&lt;-</span> merge<span class="punctuation">(</span>orders<span class="punctuation">,</span> customers<span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;CustomerID&quot;</span><span class="punctuation">,</span> all.x <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>左外连接结果</p><table><thead><tr><th>CustomerID</th><th>OrderID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>A</td></tr><tr><td>2</td><td>102</td><td>B</td></tr><tr><td>4</td><td>103</td><td>NA</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">本章介绍 R 语言的函数定义方法，以及进行统计模拟、数据清洗的方法。`function` 关键字自定义函数；`r*` `p*` `d*` `q*` 分别进行各种分布的模拟；`sample` 函数进行简单随机抽样；数据清洗包括了缺失数据处理、按行排序、选取/删除部分数据、添加变量/特征和合并数据集操作。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>链表 (2) 含有位置信息的链表、链表的插入排序和 More-To-Front 启发式算法</title>
    <link href="https://blog.iskage.online/posts/416d50d7.html"/>
    <id>https://blog.iskage.online/posts/416d50d7.html</id>
    <published>2025-03-12T12:43:00.000Z</published>
    <updated>2025-03-12T12:57:40.610Z</updated>
    
    <content type="html"><![CDATA[<h1>链表 (2) 含有位置信息的链表、链表的插入排序和 More-To-Front 启发式算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><p>在单向链表、循环链表和双向链表的基础上，引入位置信息，定义基于链表的位置列表数据类型，并基于链表实现了插入排序。</p><p>对于新的位置列表类，本质上利用链表的方法串联了一个复杂的类 <code>Position</code> ，而这个类中包含了链表的节点（<code>_Node</code>）以及这个位置所属的位置列表信息。</p><p>除此之外，介绍了案例：访问频率列表，构建了一个网页收藏夹列表类，存储网页信息和访问次数。并使用 More-To-Front 启发式算法提高查询访问量最高的前 k 个网页的效率。</p><h2 id="1-位置列表的抽象数据类型">1 位置列表的抽象数据类型</h2><p>与内存分布连续的数组相比，链表只要给定特定的节点，便可完成对节点的插入和删除（讨论的是双向链表），正如<a href="https://zhuanlan.zhihu.com/p/29508680467">上一章</a>（<a href="https://blog.iskage.online/posts/9241942.html">博客链接</a>）定义的 <code>_DoublyLinkedBase</code> 类给出的 <code>_insert_between()</code> 和 <code>_delete_node()</code> 方法。</p><p>但是，数组可以在常数时间，根据整数索引，完成索引操作。对于链表而言，却只能一步一步的遍历，直到找到目标节点，这是非常数时间操作。</p><h3 id="1-1-位置信息的抽象类">1.1 位置信息的抽象类</h3><p>为了方便外部用户调用链表类时，我们可以在继承 <code>_DoublyLinkedBase</code> 类后，增加内嵌的<strong>位置类</strong> <code>Position</code> ，而这就是<strong>含位置信息的列表抽象类</strong>。</p><p>这个列表抽象类 <code>PositionalList</code> 应该满足如下的操作例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741769316869.png" alt="位置列表类的操作示意"></p><blockquote><p><code>p</code> 和 <code>q</code> 是实例化后的位置类 <code>Position</code> ，存储了对应节点的位置信息。</p></blockquote><h3 id="1-2-双向链表的实现">1.2 双向链表的实现</h3><p>使用双向链表完整实现位置列表类 <code>PositionalList</code> 的方法。相关解释见后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PositionalList</span>(<span class="title class_ inherited__">_DoublyLinkedBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;利用双向链表实现位置列表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 内嵌的位置类 --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Position</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;抽象的位置类，存储节点的位置信息&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, container, node</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;初始化位置信息&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># _container 存储列表类 PositionalList 表明当前位置类属于这个列表类</span></span><br><span class="line">            <span class="variable language_">self</span>._container = container</span><br><span class="line">            <span class="variable language_">self</span>._node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">element</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;返回当前位置的节点元素值&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._node._element</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;检查二者是否具有相同的位置信息 重载运算符 ==&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> <span class="built_in">type</span>(<span class="variable language_">self</span>) <span class="keyword">and</span> other._node <span class="keyword">is</span> <span class="variable language_">self</span>._node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;与上面相反 重载运算符 !=&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> <span class="variable language_">self</span> == other</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 检查位置类、为节点实例化位置类 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_validate</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否是合法的 Position 类，返回位置类存储的节点类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(p, <span class="variable language_">self</span>.Position):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;p must be proper Position&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._container <span class="keyword">is</span> <span class="keyword">not</span> <span class="variable language_">self</span>:</span><br><span class="line">            <span class="comment"># 检查当前位置类 p 是否属于当前列表，以免误操作了别的列表</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p does not belong to this container&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._node._<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p is no longer valid&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> p._node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_position</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;对每个节点，实例化它的位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="variable language_">self</span>._header <span class="keyword">or</span> node <span class="keyword">is</span> <span class="variable language_">self</span>._trailer:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 创建属于当前列表的位置类</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.Position(<span class="variable language_">self</span>, node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 查看位置列表类的方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第一个节点的位置类，注意不含哨兵节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最后一个节点的位置类，注意不含哨兵节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._trailer._prev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">before</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回位置类 p 前面的位置类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># 检查是否是合法的位置类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._prev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">after</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回位置类 p 后面的位置类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器，逐个生成返回列表的元素值&quot;&quot;&quot;</span></span><br><span class="line">        cursor = <span class="variable language_">self</span>.first()</span><br><span class="line">        <span class="keyword">while</span> cursor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> cursor.element()</span><br><span class="line">            cursor = <span class="variable language_">self</span>.after(cursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 改变位置列表类的方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_between</span>(<span class="params">self, e, predecessor, successor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用父类方法，但返回位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 覆写父类插入方法</span></span><br><span class="line">        node = <span class="built_in">super</span>()._insert_between(e, predecessor, successor)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_first</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在头部插入，返回位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._header, <span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_last</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._trailer._prev, <span class="variable language_">self</span>._trailer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_before</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在位置类 p 前插入&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, original._prev, original)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_after</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, original, original._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除位置类 p 返回 p 上的值&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(original)  <span class="comment"># 父类方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">replace</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;替换位置 p 的值为 e，返回 p 位置之前的值&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        old_value = original._element</span><br><span class="line">        original._element = e</span><br><span class="line">        <span class="keyword">return</span> old_value</span><br></pre></td></tr></table></figure><h4 id="1-2-1-定义-Position-类">1.2.1 定义 Position 类</h4><p>定义位置类 <code>Position</code> 用来方便的得到每个节点的位置。因为只要位置信息已知，链表的插入和删除操作的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p><p>同时 <code>Position._container</code> 属性也为每个节点创建位置类时指定了所属的列表类。以免对别的列表类的位置进行误操作。</p><p>而对于 <code>Position._node</code> 则存储了链表的节点类 <code>_Node</code> ，节点类包含了真正的信息，例如元素值 <code>_element</code> 和前后指针 <code>_prev</code> <code>_next</code> 。</p><h4 id="1-2-2-validate-和-make-position-方法">1.2.2 _validate 和 _make_position 方法</h4><p>首先 <code>_valudate()</code> 方法调用，意在检查传入的是否为位置类 <code>Position</code> ，以及检查是否为本列表 <code>PositionalList</code> 类的位置类。最后返回当前位置的节点类。</p><p>而 <code>_make_position()</code> 方法则打包处理了将节点转换为位置类的过程。传入链表节点，得到含义位置信息的新类（位置类）。同时对于哨兵节点返回 None。</p><h4 id="1-2-3-查看列表-链表信息">1.2.3 查看列表/链表信息</h4><p><code>first(), last()</code> 方法可以得到列表第一个和最后位置的信息，例如 <code>L.first().element()</code> 可以得到第一个位置的值。而 <code>after(), before()</code> 方法可以根据传入的位置类，查看前后位置的信息，返回的仍然为位置类。</p><p><code>__iter__()</code> 方法配合父类的 <code>__len__()</code> 方法一起产生了迭代器。 <code>yield cursor.element()</code> 不断返回列表各个位置存储的值。</p><blockquote><p><code>return</code> 和 <code>yield</code> 的区别：<code>return</code> 是当函数/方法到达时返回结果，同时推出程序；但 <code>yield</code> 在返回结果后会暂停程序，下次调用时再次返回结果，直到函数/方法里的迭代结束。</p></blockquote><h4 id="1-2-4-操作列表-链表信息">1.2.4 操作列表/链表信息</h4><p><code>_insert_between()</code> 方法为非公有方法，父类方法返回的是节点类，这里覆写返回位置类。而后的 <code>add_first(), add_last(), add_before(), add_after()</code> 方法均是在新的插入方法中，传入位置信息，然后进行操作。</p><p><code>_delete_node()</code> 方法为非公有类，父类方法对节点进行操作。这里不做修改，只是定义新的公有方法 <code>delete()</code> 直接根据位置类进行删除。</p><h2 id="2-位置列表的排序">2 位置列表的排序</h2><h3 id="2-1-基于链表的插入排序">2.1 基于链表的插入排序</h3><p>在之前定义的类 <code>PositionalList</code> 之后，我们定义一个排序函数 <code>insertion_sort()</code> ，采用插入排序，实现对位置列表的排序操作。（从小到大）</p><p><strong>原理</strong> 定义一个指针 <code>marker</code> 遍历链表。当指针 <code>marker</code> 对应节点的值小于它后面的指针 <code>pivot</code> 对应节点的值，则 <code>marker</code> 后移即可；否则，让一个新的指针 <code>walk</code> 从现在的位置不断向前移动，寻找最远的一个值比 <code>pivot</code> 指针对应节点的值大的位置，将 <code>pivot</code> 插入到此时 <code>walk</code> 前面。（记录 <code>pivot</code> 的值，然后删除它，将这个值插入到 <code>walk</code> 前）。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741773030496.png" alt="链表插入排序示意" style="zoom:50%;" /><h3 id="2-2-代码实现">2.2 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">L: PositionalList</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对链表插入排序</span></span><br><span class="line"><span class="string">    :param L: 位置列表类 PositionalList</span></span><br><span class="line"><span class="string">    :return: no return</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(L) &gt; <span class="number">1</span>:</span><br><span class="line">        marker = L.first()</span><br><span class="line">        <span class="keyword">while</span> marker != L.last():  <span class="comment"># 遍历链表</span></span><br><span class="line">            pivot = L.after(marker)</span><br><span class="line">            value = pivot.element()  <span class="comment"># 保存后一个节点的值</span></span><br><span class="line">            <span class="keyword">if</span> value &gt; marker.element():  <span class="comment"># 满足排序要求（从小到大）</span></span><br><span class="line">                marker = pivot</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                walk = marker</span><br><span class="line">                <span class="comment"># 当没到第一个元素 并且 walk 前一个元素比 value 大，walk 不断向前找</span></span><br><span class="line">                <span class="keyword">while</span> walk != L.first() <span class="keyword">and</span> L.before(walk).element() &gt; value:</span><br><span class="line">                    walk = L.before(walk)</span><br><span class="line"></span><br><span class="line">                L.delete(pivot)</span><br><span class="line">                L.add_before(walk, value)  <span class="comment"># 插入到此时 walk 前</span></span><br></pre></td></tr></table></figure><h2 id="3-More-To-Front-启发式算法">3 More-To-Front 启发式算法</h2><h3 id="3-1-案例：访问频率列表">3.1 案例：访问频率列表</h3><p>设计一个对象类，用来记录每个节点被访问的次数。在现实中，这样的对象十分常见，例如网页的点击量列表：存储了各个网页对象和其被访问的次数，同时还能得到排名靠前的网页对象。所以，在这一节中，定义收藏夹列表类 <code>FavoritesList</code> 使其满足功能：</p><ul><li><code>access(e)</code> ：访问元素 <code>e</code> ，增加访问次数。如果 <code>e</code> 不在列表里，则添加到列表里。</li><li><code>remove(e)</code> ：移除元素 <code>e</code> ，注意安全移除，需要先判断是否存在。</li><li><code>top(k)</code> ：以迭代器的方式，返回访问量最多的 <code>k</code> 个元素。</li></ul><h3 id="3-2-方案一：有序列表">3.2 方案一：有序列表</h3><p>为了快速实现 <code>top(k)</code> 方法，可以在收藏夹列表类的更新中不断排序，使得 <code>FavoritesList</code> 的元素一直满足访问量从大到小的顺序。</p><p><strong>Python 实现</strong> 收藏夹列表类直接使用之前定义的 <code>PositionalList</code> 存储网页对象 <code>_Item</code> （存储了元素 <code>_value</code> 和次数 <code>_count</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> PositionalList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FavoritesList</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;有序列表方式实现&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 内嵌的 _Item 类 --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Item</span>:</span><br><span class="line">        __slots__ = <span class="string">&#x27;_value&#x27;</span>, <span class="string">&#x27;_count&#x27;</span>  <span class="comment"># 限制实例属性，优化内存使用</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, e</span>):</span><br><span class="line">            <span class="variable language_">self</span>._value = e  <span class="comment"># 用户提供的元素</span></span><br><span class="line">            <span class="variable language_">self</span>._count = <span class="number">0</span>  <span class="comment"># 访问计数，初始为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 非公有方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_position</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回元素 e 的位置类 Position&quot;&quot;&quot;</span></span><br><span class="line">        walk = <span class="variable language_">self</span>._data.first()  <span class="comment"># 在初始化后，self._data 是 PositionalList 类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 寻找元素 e 的位置，返回位置类 Position</span></span><br><span class="line">        <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> walk.element()._value != e:</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.after(walk)  <span class="comment"># 移动到下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> walk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_move_up</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;插入排序思想，按照次数 _count 产生有序列表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 与之前插入排序 insertion_sort 思路基本相同</span></span><br><span class="line">        <span class="comment"># 甚至更为简单，比较对象只用最后新加入的元素</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="variable language_">self</span>._data.first():</span><br><span class="line">            cnt = p.element()._count</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.before(p)</span><br><span class="line">            <span class="keyword">if</span> cnt &gt; walk.element()._count:</span><br><span class="line">                <span class="keyword">while</span> (walk != <span class="variable language_">self</span>._data.first() <span class="keyword">and</span></span><br><span class="line">                       cnt &gt; <span class="variable language_">self</span>._data.before(walk).element()._count):</span><br><span class="line">                    walk = <span class="variable language_">self</span>._data.before(walk)</span><br><span class="line">                <span class="variable language_">self</span>._data.add_before(walk, <span class="variable language_">self</span>._data.delete(p))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 公有方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化收藏夹列表类，直接实例化一个 PositionalList 类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = PositionalList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># PositionalList 已经定义了 __len__()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">access</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;访问元素 e 增加次数/添加元素&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_position(e)</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 不存在则插入</span></span><br><span class="line">            <span class="comment"># 向列表增加对象 _Item</span></span><br><span class="line">            <span class="comment"># 可以理解为 PositionalList 的链表的节点 _Node 的 _element 存储着 _Item 对象的地址</span></span><br><span class="line">            p = <span class="variable language_">self</span>._data.add_last(<span class="variable language_">self</span>._Item(e))</span><br><span class="line">        p.element()._count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._move_up(p)  <span class="comment"># 排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从收藏夹列表类中移除元素 e 对应的 _Item 对象&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_position(e)</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>._data.delete(p)  <span class="comment"># 这里的 _Item 对象相当于链表的 element 值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器的方式产生前 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">1</span> &lt;= k &lt;= <span class="built_in">len</span>(<span class="variable language_">self</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Illegal value of k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        walk = <span class="variable language_">self</span>._data.first()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 迭代后移</span></span><br><span class="line">            item = walk.element()</span><br><span class="line">            <span class="keyword">yield</span> item._value</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.after(walk)</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里链表节点的存储的值为 <code>_Item</code> 对象的地址</p></blockquote><h3 id="3-3-方案二：More-To-Front-启发式算法">3.3 方案二：More-To-Front 启发式算法</h3><p><strong>Move-to-Front 启发式算法</strong> ：每访问一个元素，都会把该元素移动到列表的最前面。这么做是希望这个元素在近期可以被再次/连续访问（这是符合常识的，被多次点击的网页一般都会在近期被再次访问）。</p><h4 id="3-3-1-分析时间复杂度">3.3.1 分析时间复杂度</h4><p>假设对于一个空的收藏夹列表，我们访问 n 个网页 <code>1, 2, 3, ..., n</code> 分别连续 n 次。因为按照访问次数排序，则对于第一个网页，每次访问需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，对于第二个网页每次都要和前一个网页比较（并且在访问 n 次之前都不会排在前一个元素前面），每次访问需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span> ，以此类推，每个访问 n 次：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>3</mn><mi>n</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>⋅</mo><mi>n</mi><mo>=</mo><mi>n</mi><mo>⋅</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n + 2n + 3n + \cdots + n \cdot n = n \cdot \frac{n(n+1)}{2} \sim O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，这是极其低效的。</p><p>但是采用 <strong>More-To-Front</strong> 算法，即按照访问时间排序，最后被访问的网页排在第一。如此对于任何一个网页，连续访问 n 次都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，因为访问第一次后，这个网页就位于第一个位置，链表查询第一个位置只需要 1 次操作。于是，每个访问 n 次的总时间：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>=</mo><mi>n</mi><mo>⋅</mo><mi>n</mi><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \cdot 1 + n \cdot 1 + n \cdot 1 + \cdots + n \cdot 1 = n \cdot n \sim O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，相对高效。</p><h4 id="3-3-2-代码实现-MTF-算法">3.3.2 代码实现 MTF 算法</h4><p>只需覆写 <code>_move_up()</code> 和 <code>top()</code> 方法即可。</p><ul><li>因为 <code>_move_up()</code> 方法只在访问 <code>access()</code> 方法调用时使用，所以每次使用 <code>_move_up()</code> 均代表该元素最近被访问，所以直接放在列表最前即可</li><li>而相比有序列表，查找前 k 个网页的 <code>top()</code> 方法就相对耗时，对于查找 k 个最大，没查找一个就要遍历全部，所以复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(kn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">kn</span><span class="mclose">)</span></span></span></span> ，不过利用以后要学习的其他高效方法，复杂度能降低到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。这也说明 MTF 启发式算法在处理这个问题时相对更加高效。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FavoritesListMTF</span>(<span class="title class_ inherited__">FavoritesList</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;利用 More-To-Front 启发式算法实现收藏夹列表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 只需要重载/覆写 _move_up() 和 top() 方法即可 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_move_up</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;每次调用意味着被访问，被访问就移到最前&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="variable language_">self</span>._data.first():</span><br><span class="line">            <span class="variable language_">self</span>._data.add_first(<span class="variable language_">self</span>._data.delete(p))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;因为列表无序，需要找到最大的前 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">1</span> &lt;= k &lt;= <span class="built_in">len</span>(<span class="variable language_">self</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Illegal value of k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 临时复制一份原列表</span></span><br><span class="line">        temp = PositionalList()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>._data:</span><br><span class="line">            temp.add_last(item)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 遍历一边找到最大的</span></span><br><span class="line">            highPos = temp.first()</span><br><span class="line">            walk = temp.after(highPos)</span><br><span class="line">            <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> walk.element()._count &gt;= highPos.element()._count:</span><br><span class="line">                    highPos = walk</span><br><span class="line">                walk = temp.after(walk)</span><br><span class="line">            <span class="keyword">yield</span> highPos.element()._value</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除最大的之后再遍历</span></span><br><span class="line">            temp.delete(highPos)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在单向链表、循环链表和双向链表的基础上，引入位置信息，定义基于链表的位置列表数据类型，并基于链表实现了插入排序。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>链表 (1) 单向链表、循环链表与双向链表</title>
    <link href="https://blog.iskage.online/posts/9241942.html"/>
    <id>https://blog.iskage.online/posts/9241942.html</id>
    <published>2025-03-11T09:43:00.000Z</published>
    <updated>2025-03-11T09:52:21.985Z</updated>
    
    <content type="html"><![CDATA[<h1>链表 (1) 单向链表、循环链表与双向链表</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><p>数组因为其紧凑的内存空间分配，使得其在索引时非常高效，但是却浪费了许多空间，它存储了远大于实际实例所需的空间。相对应的，<strong>链表</strong>数据结构依赖于分布式表达方法，采用节点的方式，不连续的存放数据。</p><p>本周讲解的链表实现了栈、队列、双端队列三种数据结构。它们的特点就是：可以在头部或者尾部进行插入或删除操作，无法在任意位置进行耗时为常数的操作。</p><h2 id="1-单向链表">1 单向链表</h2><h3 id="1-1-单向链表概念">1.1 单向链表概念</h3><p>单向链表是由多个节点共同构成的一个线性序列，从头指针开始，每个节点存储：元素值和下一个节点的指针。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741601117586.png" alt="每一个节点的示意图" style="zoom:50%;" /><ul><li>单向链表的第一个节点为头节点，最后一个节点为尾节点。</li><li>头指针 <code>head</code> 指向头节点，尾指针 <code>tail</code> 指向尾节点，且尾节点指向下一节点的指针为空指针。</li><li>从头指针开始，通过每个节点的next指针可以到达下一个节点，直至到达尾指针，完成对链表的遍历。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741601218479.png" alt="一个单向链表的示意"></p><h3 id="1-2-在单向链表头部插入元素">1.2 在单向链表头部插入元素</h3><p>链表由一个一个的节点组成，所以不需要预先分配空间，十分灵活。但是对链表的操作要十分谨慎，必须保留相关的指针。例如：对单向链表而言，丢失一个节点的信息，该节点之后的所有信息都会丢失。</p><p>以在单向链表头部插入元素为例：先建立新的节点，新节点的 <code>next</code> 指针指向原链表的头节点，头指针指向最新的节点，链表长度加一。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Algorithm add_first(L, e):</span><br><span class="line">newest = Node(e)           <span class="comment"># 1. 建立新的节点</span></span><br><span class="line">newest.<span class="built_in">next</span> = L.head    <span class="comment"># 2. 新节点的 `next` 指针指向原链表的头节点</span></span><br><span class="line">L.head = newest   <span class="comment"># 3. 头指针指向最新的节点</span></span><br><span class="line">L.size = L.size + <span class="number">1</span>   <span class="comment"># 4. 链表长度加一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741611806111.png" alt="在链表头部插入元素" style="zoom:100%;" /><h3 id="1-3-在单向链表尾部插入元素">1.3 在单向链表尾部插入元素</h3><p>当保存了尾指针时，可以容易的在尾部插入元素：首先创建一个新节点，将新节点 <code>next</code> 指针设为空，然后设置原链表最后一个节点的 <code>next</code> 指针指向新节点，最后设置尾指针指向新节点，链表长度加一。</p><blockquote><p>一定要先将原链表最后一个节点的 <code>next</code> 指针指向新节点，再设置尾指针指向新节点。否则会丢失原链表的信息！！！</p></blockquote><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Algorithm add_last(L, e):</span><br><span class="line">newest = Node(e)           <span class="comment"># 1. 创建一个新节点</span></span><br><span class="line">newest.<span class="built_in">next</span> = <span class="literal">None</span><span class="comment"># 2. 将新节点 `next` 指针设为空</span></span><br><span class="line">L.tail.<span class="built_in">next</span> = newest<span class="comment"># 3. 设置原链表最后一个节点的 `next` 指针指向新节点</span></span><br><span class="line">L.tail = newest<span class="comment"># 4. 设置尾指针指向新节点</span></span><br><span class="line">L.size = L.size + <span class="number">1</span><span class="comment"># 5. 链表长度加一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741612913677.png" alt="在单向链表尾部插入元素" style="zoom:100%;" /><h3 id="1-4-从单向链表头部删除元素">1.4 从单向链表头部删除元素</h3><p>与在单向链表的头部插入元素相反，从单向链表头部删除元素：将头指针直接指向头节点的下一个节点，然后链表长度减一，这样运来的头指针信息丢失，空间被释放。</p><blockquote><p>最后一步的空间释放，在 Python 中无需手动进行，Python 采用<strong>引用计数</strong>管理，当对象的引用计数归零时（即没有变量名保存这个对象的地址时），Python 会自动释放空间。</p><p>但对于其他语言，例如 C 语言，链表的删除需要手动释放内存。</p></blockquote><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Algorithm remove_first(L):</span><br><span class="line"><span class="keyword">if</span> L.head <span class="keyword">is</span> <span class="literal">None</span> then</span><br><span class="line"><span class="comment"># 链表本身为空</span></span><br><span class="line"></span><br><span class="line">L.head = L.head.<span class="built_in">next</span><span class="comment"># 1. 头指针直接指向头节点的下一个节点</span></span><br><span class="line">L.size = L.size - <span class="number">1</span><span class="comment"># 2. 链表长度减一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741613592560.png" alt="从单向链表头部删除元素"></p><h3 id="1-5-从单向链表尾部删除元素？">1.5 从单向链表尾部删除元素？</h3><p>即使保留了尾指针，也无法在常数 <code>O(1)</code> 时间内删除尾节点。因为根据单向链表的组成原理，删除尾节点，必须知道倒数第二个节点的信息。但想得到倒数第二节点的信息，必须要遍历整个链表，复杂度为 <code>O(n)</code> ，这是很低效的，在后面的双向链表里可以快速实现。</p><h3 id="1-6-单向链表实现栈">1.6 单向链表实现栈</h3><p><strong>栈</strong>是由一系列对象组成的一个集合，这些对象的插入和删除操作遵循后进先出（LIFO）的原则。用户可以在任何时刻向栈中插入一个对象，但只能取得或者删除最后一个插人的对象（即所谓的“栈顶”）。</p><p>因为栈满足后进先出的原则，如果我们假定栈顶是头节点，则不需要尾指针也能实现栈的功能。</p><p>首先实现各个节点的定义 <code>class _Node</code> 表示这是非公有的。<code>_Node</code> 嵌套在最终的链表栈类中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现栈&quot;&quot;&quot;</span></span><br><span class="line">    __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>._element = element</span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br></pre></td></tr></table></figure><blockquote><p>为了提高内存的利用率，定义<code>__slots__</code> 。指定一个节点只有两个实例变量：<code>_element</code> 和 <code>_next</code>（元素引用和指向下一个节点的引用）。</p></blockquote><p>下面是完整的链表栈类的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现栈&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现栈&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现栈 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span>  <span class="comment"># 头指针，指向节点，初始化为空</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;栈元素个数 len(obj) 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向栈顶部增加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 新建节点，指向旧的 head 新的 head 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._Node(e, <span class="variable language_">self</span>._head)</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回栈顶值，但不改变链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回栈顶元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element</span><br><span class="line">        <span class="comment"># 删除头部节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>Empty</code> 类可以定义为</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Raised when a value is an empty list.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>对于使用链表方式实现的栈，插入和删除元素都是常数时间完成的，这是相对于数组而言更高效的性质：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741669388492.png" alt="单向链表实现栈的时间复杂度"></p><h3 id="1-7-单向链表实现队列">1.7 单向链表实现队列</h3><p><strong>队列</strong>与栈类似，由一系列对象组成的集合，这些对象的插入和删除遵循先进先出（First in First out, FIFO）的原则。也就是说，元素在尾部插入，但是只有处在队列最前面的元素才能被删除。</p><p>因为队列的操作需要对头和尾操作，所以需要 <code>head</code> 头指针和 <code>tail</code> 尾指针。将头节点作为队列的头部，尾指针作为尾部，这样就满足可以在头部删除元素，在尾部插入元素。（因为对单向链表而言，尾部删除元素是复杂的）。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现队列，先进先出&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回队列长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列第一个节点和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element  <span class="comment"># 获取第一个元素值</span></span><br><span class="line">        <span class="comment"># 头指针指向下一个节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果节点清空，则设置尾指针为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._head = newest  <span class="comment"># 如果为空，则新节点为头节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 否则尾节点的 next 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用单向链表实现队列的时间复杂度也是常数。</p><h2 id="2-循环链表">2 循环链表</h2><h3 id="2-1-循环链表概念">2.1 循环链表概念</h3><p>在链表中，我们可以使链表的尾节点的 <code>next</code> 指针指向链表的头部，由此来获得一个<strong>循环链表</strong>。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741673718987.png" alt="循环链表图示"></p><p>在循环链表中，头指针和尾指针并不常用。相反，从任意一个节点都能进入这个循环链表。例如：使用 <code>current</code> 指针指向一个节点，则使用 <code>current.next</code> 理论上可以取到任意一个节点。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741673829874.png" alt="current 指针取循环链表节点"></p><h3 id="2-2-轮转调度">2.2 轮转调度</h3><p>轮转调度程序：以循环的方式迭代地遍历一个元素的集合，并通过执行一个给定的动作为集合中的每个元素进行“服务”。</p><p>例如：在队列 <code>Q</code> 反复进行下面的步骤，即可轮转调度为每个元素都进行“服务”。</p><ol><li><code>e = Q.dequeue()</code> ：从队列取出元素 e （下一个元素出队）</li><li><code>f(e)</code> ：为元素 e 提供服务、进行操作（“服务”下一个元素）</li><li><code>Q.enqueue(e)</code> ：e 被重新加入队列尾部（所“服务”的元素入队）</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741674177792.png" alt="队列实现轮转调度示意"></p><p>如果使用之前的单向链表，每次取出元素进行操作和插入元素都十分浪费时间。但使用循环链表实现，可以定义一个 <code>rotate()</code> 方法，将头部元素 <code>Q.front()</code> 服务完成后直接移动到尾部。即重复一下步骤即可实现轮转调度：</p><ol><li><code>f(Q.front)</code> ：取出头部元素进行操作/服务</li><li><code>Q.rotate()</code> ：将其直接移动到尾部</li></ol><h3 id="2-3-循环链表实现循环队列">2.3 循环链表实现循环队列</h3><p>使用前面的链表实现队列的代码，但修改尾指针，使得尾指针指向头节点，于是可以舍弃头指针。</p><ul><li>在这个循环类 <code>CircularQueue</code> 中，定义 <code>tail</code> 指针目前的位置为尾部，而 <code>tail.next</code> 为头部。</li><li>同时为循环链表类增加一个 <code>rotate()</code> 方法，将队首移到队尾，相当于 <code>tail = tail.next</code> 更新。</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedCircularQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;循环链表实现循环队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现循环队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只需要一个指针</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值 tail.next ，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对循环链表而言，定义尾指针指向节点的下一个节点为头节点</span></span><br><span class="line">        head = <span class="variable language_">self</span>._tail._<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列头节点 tail.next 和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        oldhead = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 获取头节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._size == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只有一个节点，删除后变成空队列</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = oldhead._<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 原来的 tail.next 即 oldhead 被释放，因为没有指针指向它</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> oldhead._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部 tail 增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="comment"># 如果为空，则新节点自己指向自己，后面再由 tail 指向 newest</span></span><br><span class="line">            newest._<span class="built_in">next</span> = newest</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newest._<span class="built_in">next</span> = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 新节点指向头节点</span></span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 原来的尾节点的 next 指针指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;训练轮转一次&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 指示指针 (尾指针) tail 向后移动一位</span></span><br></pre></td></tr></table></figure><h2 id="3-双向链表">3 双向链表</h2><h3 id="3-1-双向链表概念">3.1 双向链表概念</h3><p><strong>双向链表</strong>：为了提供更好的对称性，我们定义了一个链表，<strong>每个节点都维护了指向其先驱节点以及后继节点的引用</strong>。这样的结构被称双向链表。这些列表支持更多各种时间复杂度为 <code>O(1)</code> 的更新操作，这些更新操作包括在列表的任意位置插入和删除节点。用 <code>next</code> 表示指向当前节点的后继节点的引用，并引入 <code>prev</code> 引用其前驱节点。</p><p>为了更方便的引用，在链表的起始位置添加头节点 <code>header</code> ，在链表的尾部添加尾节点 <code>trailer</code> ，它们并不存储数据，仅仅为链表操作的方便和一些特殊情况，存储链表的头尾信息。称之为<strong>头哨兵</strong>和<strong>尾哨兵</strong>。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741678367710.png" alt="完整的双向链表图示"></p><ul><li>使用哨兵结构可以简单地处理一些操作。因为每次改变链表只是改变头尾节点的中间部分，而中间部分因为头尾节点的存在变得地位相同，可以采用相同的操作进行处理。例如之前，插入和删除元素还要区分头、尾、中间三部分，现在有了哨兵结构，所有节点都可以采用通适的方法。</li></ul><h3 id="3-2-双向链表的插入与删除">3.2 双向链表的插入与删除</h3><p>因为引入了哨兵结构，所以每个节点都是相同的，即使是第一个和最后一个有值的节点也与中间节点相同。</p><p><strong>插入元素图示</strong></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680651867.png" alt="在具有哨兵结构的双向链表的中间插入元素"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680686846.png" alt="在具有哨兵结构的双向链表的头部插入元素"></p><p>从上面两个的图示可以发现，把 <code>header</code> 和 <code>trailer</code> 指向的头尾哨兵节点当作普通元素，即可无论是在头部插入还是中间插入，本质上是一样的。</p><p><strong>删除元素图示</strong></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680740987.png" alt="在具有哨兵结构的双向链表删除一个元素"></p><h3 id="3-3-双向链表的基本实现">3.3 双向链表的基本实现</h3><p>虽然广泛意义的链表的插入和删除已经可以在双向链表中实现，但索引插入和删除的位置却是链表难以高效解决的。对于基于数组的序列而言，利用整数索引非常迅速；但对于链表，由于其不连续的内存空间，无法在常数时间内索引节点，只能逐个遍历。</p><p>所以下面<strong>双向链表的基本实现</strong>的插入和删除暂不考虑索引的问题，而是假设如下条件，直接进行操作：</p><ul><li>假设已知插入节点的前一个和后一个节点的地址</li><li>假设已知被删除节点的地址</li></ul><p>定义用于双向链表的节点类 <code>_Node</code> ，同样也是非公有的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_DoublyLinkedBase</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表的基础类/父类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;双向链表的节点类，包含元素值、prev 指针和 next 指针&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_prev&#x27;</span>, <span class="string">&#x27;_next&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, prev, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._prev = prev</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现链表 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个空链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建头哨兵、尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._header = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="variable language_">self</span>._trailer = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._header._<span class="built_in">next</span> = <span class="variable language_">self</span>._trailer  <span class="comment"># 头哨兵 next 指向尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._trailer._prev = <span class="variable language_">self</span>._header  <span class="comment"># 尾哨兵 prev 指向头哨兵</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 链表长度，不包括头尾哨兵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;链表长度 len() 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_between</span>(<span class="params">self, e, predecessor, successor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 predecessor, successor 插入插入新节点，并返回这个新节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建新节点，并将其 prev 指向 predecessor | 其 next 指向 successor</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, predecessor, successor)</span><br><span class="line"></span><br><span class="line">        predecessor._<span class="built_in">next</span> = newest  <span class="comment"># predecessor 的 next 指向新节点</span></span><br><span class="line">        successor._prev = newest  <span class="comment"># successor 的 prev 指向新节点</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> newest</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_delete_node</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;传入节点并删除，返回被删除的值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 记录将被删除的节点的前后信息</span></span><br><span class="line">        predecessor = node._prev</span><br><span class="line">        successor = node._<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 连接 predecessor 和 successor</span></span><br><span class="line">        predecessor._<span class="built_in">next</span> = successor</span><br><span class="line">        successor._prev = predecessor</span><br><span class="line"></span><br><span class="line">        element = node._element</span><br><span class="line">        <span class="comment"># 孤立节点 node : 设为空，用于标识这是即将被删除的节点</span></span><br><span class="line">        node._prev, node._<span class="built_in">next</span>, node._element = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p><code>_DoublyLinkedBase</code> 类是一个非公有类，其目的是作为被继承的父类所定义。其定义了：</p><ol><li>双向链表的节点类 <code>_Node</code></li><li>初始化了双向链表 <code>__init__</code></li><li>定义了如何取链表长度 <code>__len__</code> ，这是重载了运算符 <code>len()</code></li><li>定义了如何判断链表是否为空 <code>is_empty</code></li><li>给出了非公有方法 <code>_insert_between()</code> 实现了当给前一个和后一个节点时，如何在它们中间安全地插入新节点，同时返回这个新的节点地址。之后的子链表类可以继承使用。</li><li>给出了非公有方法 <code>_delete_node()</code> 实现了当给一个节点，如何安全地删除这个节点，返回被删除的节点存储的值。之后的子链表类可以继承使用。</li></ol><h3 id="3-4-双向链表实现双端队列">3.4 双向链表实现双端队列</h3><p><strong>双端队列</strong>：支持在队列的头部和尾部都进行插人和删除操作。这样一种结构被称为双端队列（double-ended queue 或者 <code>deque</code>）。</p><p>基于上面定义的基础双向链表类 <code>_DoublyLinkedBase</code> ，可以实现双端队列。因为继承了父类，所以新的双端队列链表类 <code>LinkedDeque</code> 不需要定义 <code>__init__</code> <code>__len__</code> <code>is_empty</code> 方法。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedDeque</span>(<span class="title class_ inherited__">_DoublyLinkedBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表实现双端队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 继承父类 --------------</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;不需要定义 `__init__` `__len__` `is_empty` 方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 添加双端队列的功能 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取第一个元素的值，注意头节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._header._<span class="built_in">next</span>._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取最后一个元素的值，注意尾节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._trailer._prev._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_first</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在头部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在头哨兵和第一个元素节点之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._header, <span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_last</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在最后一个元素节点和尾哨兵之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._trailer._prev, <span class="variable language_">self</span>._trailer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除第一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除头节点的下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除最后一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除尾节点的上一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._trailer._prev)</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，队列的头尾存储着两个空值的节点，即哨兵指针。所以在进行操作时，需要注意传入的节点。</p></blockquote>]]></content>
    
    
    <summary type="html">本周讲解的链表实现了栈、队列、双端队列三种数据结构。它们的特点就是：可以在头部或者尾部进行插入或删除操作，无法在任意位置进行耗时为常数的操作。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作系统：文件系统</title>
    <link href="https://blog.iskage.online/posts/dad6b81f.html"/>
    <id>https://blog.iskage.online/posts/dad6b81f.html</id>
    <published>2025-03-10T07:03:00.000Z</published>
    <updated>2025-03-10T07:15:51.852Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux 文件系统</h1><p>Linux 文件系统：路径名、目录 (<code>pwd, cd</code>) 、文件系统组织方式 (inode) 、文件和目录查看 (<code>touch, ls, tree</code>) 、文件和目录操作 (<code>mkdir, rmdir, cp, mv, rm</code>) 和 Linux 的目录结构。</p><h2 id="1-路径名和路径名解析">1 路径名和路径名解析</h2><p>相关命令：<code>dirname</code> <code>basename</code> <code>realpath</code></p><p><strong>文件系统</strong>以一颗目录树的形式来组织：</p><ul><li>根节点称为根 <code>root</code> 目录，用 <code>/</code> 来表示</li><li>目录树中的名字只需在其所在目录中唯一</li></ul><h3 id="1-1-路径名">1.1 路径名</h3><p>路径以 <code>/</code> 分隔，分为相对路径和绝对路径：</p><ul><li>绝对路径：从根目录开始，以 <code>/</code> 分割各级目录，例如：<code>/home/User/Documents/example.txt</code></li><li>相对路径：从当前目录开始，只包含当前目录以下的目录名，例如：如果位于 <code>/home/User</code> 则相对路径为 <code>Documents/example.txt</code> 或者 <code>./Documents/example.txt</code></li></ul><blockquote><p><code>.</code> 和 <code>..</code> 是特殊的目录，所有目录下都有这两个目录，<code>.</code> 指代当前目录，<code>..</code>  指代上一级目录。特别的，根目录的上一级目录为自身。</p></blockquote><h3 id="1-2-路径解析">1.2 路径解析</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>dirname ...</code></td><td>返回 <code>...</code> 所在目录的绝对路径</td></tr><tr><td><code>basename ...</code></td><td>返回路径 <code>...</code> 的文件名，即最后一个名字</td></tr><tr><td><code>realpath [options] ...</code></td><td>返回路径名解析后的绝对路径</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">dirname</span> /home/iskage/docs/example.txt</span><br><span class="line">/home/iskage/docs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">basename</span> /home/iskage/docs/example.txt</span><br><span class="line">example.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">realpath</span> -e example.txt</span><br><span class="line">/home/iskage/docs/example.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">realpath</span> -m wrong.txt</span><br><span class="line">/home/iskage/docs/wrong.txt</span><br></pre></td></tr></table></figure><blockquote><p><code>realpath</code> 返回绝对路径，缺省参数默认为 <code>-e</code></p></blockquote><table><thead><tr><th><code>realpath</code> 参数</th><th>要求</th></tr></thead><tbody><tr><td><code>-e</code></td><td>检查目录是否存在，不要去文件存在，但检查文件夹存在性</td></tr><tr><td><code>-m</code></td><td>不检查目录是否存在</td></tr></tbody></table><h2 id="2-改变目录和波浪号扩展">2 改变目录和波浪号扩展</h2><p>相关命令 <code>pwd</code> <code>cd</code> <code>~..</code></p><h3 id="2-1-改变目录-pwd-cd">2.1 改变目录 pwd, cd</h3><ul><li><code>pwd</code> 检查当前目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/iskage/docs</span><br></pre></td></tr></table></figure><ul><li><code>cd [dir]</code> 切换目录，进入 <code>[dir]</code> 目录</li></ul><p><code>cd</code> 留空进入当前用户主目录，即 <code>~</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/docs$ <span class="built_in">cd</span></span><br><span class="line">~$</span><br></pre></td></tr></table></figure><p><code>cd -</code> 表示工作目录设置为先前的工作目录，可在两个目录中切换：例如在 A 目录使用 <code>cd -</code> ，然后进入目录 B 随后使用 <code>cd -</code> 返回 A 目录，再次使用返回 B 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~$ <span class="built_in">cd</span> -</span><br><span class="line">/home/iskage</span><br><span class="line"></span><br><span class="line">~$ <span class="built_in">cd</span> docs</span><br><span class="line">~/docs</span><br><span class="line"></span><br><span class="line">~/docs$ <span class="built_in">cd</span> -</span><br><span class="line">/home/iskage</span><br><span class="line">~$ </span><br></pre></td></tr></table></figure><h3 id="2-2-扩展">2.2 ~ 扩展</h3><ul><li>单独的波浪号 <code>~</code> 表示当前用户的主目录，而 <code>~user</code> 表示用户 user 的主目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~user</span><br><span class="line">进入 user 的主目录，一般为 /home/user</span><br></pre></td></tr></table></figure><blockquote><p>追踪 bash 的命令和返回，可以设置 <code>set -x</code> 打开追踪功能；<code>set +x</code> 关闭追踪功能。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"><span class="built_in">cd</span> ~iskage</span><br><span class="line">+ <span class="built_in">cd</span> /home/iskage</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~user</span><br><span class="line">+ <span class="built_in">cd</span> <span class="string">&#x27;~user&#x27;</span></span><br><span class="line">bash: <span class="built_in">cd</span>: ~user: No such file or directory</span><br></pre></td></tr></table></figure><h2 id="3-文件系统的组织方式">3 文件系统的组织方式</h2><h3 id="3-1-文件系统的组织">3.1 文件系统的组织</h3><p>文件系统由 2 部分组成：</p><ul><li>保存文件相关的元信息的索引节点 <code>inode</code>（index node）</li><li>实际存储数据的数据块</li></ul><p>索引节点 <code>inode</code> 包含：拥有者的 UID 和 GID（用户和用户组）；文件长度；类型和权限；访问、修改和状态改变时间；引用次数；数据块编号列表。</p><p>实际存储数据的数据块包含：对于普通文件，数据块保存实际的内容；对于目录文件，数据块保存的是该目录包含的子目录和文件所对应的目录项。</p><blockquote><p>目录项：每个目录包含子目录和文件的目录项，目录项保存了其对应的文件（包括子目录）的名字以及该文件对应的 inode 编号</p></blockquote><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741309097697.png" alt="文件结构：索引节点和数据块" style="zoom:67%;" /><ul><li><code>ls -i</code> 可以产看索引节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -i</span><br><span class="line">793134 docs</span><br></pre></td></tr></table></figure><h3 id="3-2-查看磁盘使用情况-df">3.2 查看磁盘使用情况 df</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> [options] [file]</span><br><span class="line"></span><br><span class="line">-h : 以自然语言展示 1k=1024</span><br><span class="line">-H , --si : 以自然语言展示 1k=1000</span><br><span class="line">-i , --inodes : 查看节点类型</span><br><span class="line">-T , --print-type  : 显示文件系统类型</span><br><span class="line">-t , --<span class="built_in">type</span>=TYPE    : 仅仅显示相应类型的文件系统信息，例如 --<span class="built_in">type</span>=ext4 或 -t ext4</span><br><span class="line"></span><br><span class="line">file : 缺省，则展示当前所在目录属于的文件系统</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br><span class="line"></span><br><span class="line">Filesystem     Type   Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs          tmpfs  168M  1.1M  167M   1% /run</span><br><span class="line">/dev/vda3      ext4    40G  3.8G   34G  11% /</span><br><span class="line">tmpfs          tmpfs  837M     0  837M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs  5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/vda2      vfat   197M  6.1M  191M   4% /boot/efi</span><br><span class="line">tmpfs          tmpfs  168M  4.0K  168M   1% /run/user/0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -iT --si</span><br><span class="line"></span><br><span class="line">Filesystem     Type  Inodes IUsed IFree IUse% Mounted on</span><br><span class="line">tmpfs          tmpfs   215k   729  214k    1% /run</span><br><span class="line">/dev/vda3      ext4    2.7M  100k  2.6M    4% /</span><br><span class="line">tmpfs          tmpfs   215k     2  215k    1% /dev/shm</span><br><span class="line">tmpfs          tmpfs   215k     3  215k    1% /run/lock</span><br><span class="line">/dev/vda2      vfat       0     0     0     - /boot/efi</span><br><span class="line">tmpfs          tmpfs    43k    26   43k    1% /run/user/0</span><br></pre></td></tr></table></figure><blockquote><p><code>vda2</code> 表示位于第 1 个磁盘的第 2 区（abc表示磁盘号，123表示分区）</p></blockquote><h3 id="3-3-查看文件使用的空间情况-du">3.3 查看文件使用的空间情况 du</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> [options] [file]</span><br><span class="line"></span><br><span class="line">-c , --total  : 最后显示加和总使用空间</span><br><span class="line">-s , --summarize : 仅仅显示每个参数的总使用情况</span><br><span class="line">-d ,  --max-depth=N : 递归展示子目录的深度，N=0 表示不递归</span><br><span class="line">-B SIZE : 设置展示的单位为 SIZE，缺省默认为 1k bit</span><br><span class="line">-h : 自然语言展示 1k=1024</span><br><span class="line">--si : 与 -h 相同，但 1k=1000</span><br></pre></td></tr></table></figure><blockquote><p>因为 <code>du -s</code> 表示只展示 file 自己的总使用情况，故等价于 <code>du -d 0</code> 深度为 0</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> --si -d 1 -c ./snap</span><br><span class="line"></span><br><span class="line">17k./snap/lxd</span><br><span class="line">21k./snap</span><br><span class="line">21ktotal</span><br></pre></td></tr></table></figure><h3 id="3-4-查看文件类型-file">3.4 查看文件类型 file</h3><p><code>file</code> 指令会查看文件的根本类型，而不是根据拓展名查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file a.py</span><br><span class="line">a.py: ASCII text</span><br><span class="line"></span><br><span class="line">file -i a.py</span><br><span class="line">a.py: text/plain; charset=us-ascii</span><br></pre></td></tr></table></figure><blockquote><p><code>-i , --mime</code> 输出 MIME 头部。</p></blockquote><h2 id="4-文件名和目录查看">4 文件名和目录查看</h2><h3 id="4-1-touch-修改时间">4.1 touch 修改时间</h3><p><code>touch file</code> 文件存在时改变时间，不存在时创建文件。每个文件的时间包括：</p><ul><li>修改时间 <code>mtime</code> ：修改文件内容时更新</li><li>访问时间 <code>atime</code> ：读文件操作时更新的时间</li><li>状态改变时间 <code>ctime</code> ：文件内容或元信息（如权限/名字/时间等）改变时更新，用户无法改变，而是内核自动更新</li></ul><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> [option] file</span><br><span class="line"></span><br><span class="line">-m   : 仅改变修改时间</span><br><span class="line">-a   : 仅改变访问时间</span><br><span class="line">-t <span class="keyword">time</span>   : 指定时间为 <span class="keyword">time</span> 格式为 [[CC]YY]MMDDhhmm[.ss] </span><br><span class="line">  例如 [[20]25]03070938[.11] 表示2025年3月7日9时38分11秒</span><br><span class="line">-r , --reference=BASE : 使用文件 BASE 的时间</span><br></pre></td></tr></table></figure><h3 id="4-2-文件名格式">4.2 文件名格式</h3><ul><li>Linux 系统的文件名（包括目录等）区分大小写。</li><li>文件名不能命名为 <code>.</code> 和 <code>..</code> ，也不能包含 <code>/</code> 和 <code>NULL</code> 字符（ASCII 码为 0 的字符），除此之外可以包含任何字符。</li><li>可以使用后缀，不过并不强制要求。</li><li>一般规范为：使用字母、数字、 <code>.</code> 、<code>-</code> 、<code>_</code> 组成。且避免使用 <code>-</code> 开头，也不使用空格。</li><li>如果出现歧义，可以使用 <code>&quot;&quot;</code> 或 <code>''</code> 包裹起这些文件名。</li></ul><h3 id="4-3-列目录命令-ls">4.3 列目录命令 ls</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [options] [file]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>ls</code> 缺省</td><td>列出当前目录不包含 <code>.</code> 开头的隐藏文件</td></tr><tr><td><code>ls -a</code></td><td>列出所有目录，包含隐藏目录和 <code>.</code> 和 <code>..</code></td></tr><tr><td><code>ls -A</code></td><td>列出所有目录，包含隐藏目录，但不包含 <code>.</code> 和 <code>..</code></td></tr><tr><td><code>ls -F</code></td><td>添加文件类型指示，例如文件夹 snap 表现为 <code>snap/</code></td></tr><tr><td><code>ls -l</code></td><td>长列表形式展示</td></tr><tr><td><code>ls -d</code> <code>ls --directory</code></td><td>显示当前目录的信息，一般和 <code>-l</code> 联合使用</td></tr><tr><td><code>ls -i</code> <code>ls --inode</code></td><td>显示 inode 编号</td></tr><tr><td><code>ls -R</code> <code>ls -recursive</code></td><td>递归展示目录和子目录内容</td></tr><tr><td><code>ls -r</code> <code>ls --reverse</code></td><td>反向排序展示目录</td></tr><tr><td><code>ls -X</code> <code>ls --sort=extension</code></td><td>按照后缀排序，没有后缀的优先</td></tr><tr><td><code>ls -S</code> <code>ls --sort=size</code></td><td>按照文件大小排序，默认从大到小</td></tr><tr><td><code>ls -t</code> <code>ls --sort=time</code></td><td>按照时间排序，默认从新到旧</td></tr><tr><td><code>ls -U</code> <code>ls --sort=none</code></td><td>不排序</td></tr></tbody></table><p>对于 <code>ls -l</code> 列出的信息，里面分别包含：文件类型、访问模式、引用计数、拥有者用户、用户组、文件大小（<code>-h</code> 以自然语言展示）、修改时间、文件名。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741584509233.png" alt="ls -l 文件信息" style="zoom:67%;" /><ul><li>文件类型</li></ul><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>-</code></td><td>普通文件（例如文本文件、二进制文件等）</td></tr><tr><td><code>d</code></td><td>目录</td></tr><tr><td><code>l</code></td><td>符号链接（软链接）</td></tr><tr><td><code>c</code></td><td>字符设备文件</td></tr><tr><td><code>b</code></td><td>块设备文件</td></tr><tr><td><code>p</code></td><td>命名管道（FIFO）</td></tr><tr><td><code>s</code></td><td>套接字文件</td></tr></tbody></table><ul><li>访问模式：所有者权限（<code>1, 2, 3</code>）、所属组权限（<code>4, 5, 6</code>）、其他用户权限</li></ul><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>r</code> <code>-</code></td><td>第一个字符：读权限，r 表示可读，- 表示不可读</td></tr><tr><td><code>w</code> <code>-</code></td><td>第二个字符：写权限，w 表示可写，- 表示不可写</td></tr><tr><td><code>x</code> <code>-</code></td><td>第三个字符：执行权限，x 表示可执行，- 表示不可执行</td></tr></tbody></table><h3 id="4-4-tree-查看目录树">4.4 tree 查看目录树</h3><p>先在 Ubuntu 上安装 <code>tree</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install tree</span><br></pre></td></tr></table></figure><p>然后可以使用 <code>tree</code> 命令以树的形式递归展示目录结构：</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>tree</code></td><td style="text-align:left">显示当前目录及其子目录的树状结构</td></tr><tr><td style="text-align:left"><code>tree -d</code></td><td style="text-align:left">仅显示目录，不显示文件</td></tr><tr><td style="text-align:left"><code>tree -L n</code></td><td style="text-align:left">限制显示的目录层级深度为 <code>n</code>。例如，<code>tree -L 2</code> 显示两层目录</td></tr><tr><td style="text-align:left"><code>tree -a</code></td><td style="text-align:left">显示所有文件和目录，包括隐藏文件（以 <code>.</code> 开头的文件）</td></tr><tr><td style="text-align:left"><code>tree -f</code></td><td style="text-align:left">显示文件的完整路径</td></tr><tr><td style="text-align:left"><code>tree -p</code></td><td style="text-align:left">显示文件和目录的权限</td></tr><tr><td style="text-align:left"><code>tree -s</code></td><td style="text-align:left">显示文件和目录的大小（以字节为单位）</td></tr><tr><td style="text-align:left"><code>tree -h</code></td><td style="text-align:left">以人类可读的格式显示文件和目录的大小（例如 KB、MB）</td></tr><tr><td style="text-align:left"><code>tree -D</code></td><td style="text-align:left">显示文件和目录的最后修改时间</td></tr><tr><td style="text-align:left"><code>tree -I pattern</code></td><td style="text-align:left">排除符合指定模式的文件。例如，<code>tree -I &quot;*.txt&quot;</code> 排除所有 <code>.txt</code> 文件</td></tr><tr><td style="text-align:left"><code>tree -o filename</code></td><td style="text-align:left">将输出保存到指定文件中。例如，<code>tree -o output.txt</code></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~$ tree</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── a.py</span><br><span class="line">├── file1</span><br><span class="line">├── file2</span><br><span class="line">├── file3</span><br><span class="line">└── snap</span><br><span class="line">    └── lxd</span><br><span class="line">        ├── 22923</span><br><span class="line">        ├── 31333</span><br><span class="line">        ├── common</span><br><span class="line">        └── current -&gt; 31333</span><br></pre></td></tr></table></figure><h2 id="5-文件和目录操作">5 文件和目录操作</h2><h3 id="5-1-创建目录-mkdir">5.1 创建目录 mkdir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-p] directory</span><br></pre></td></tr></table></figure><ul><li>同一目录下不可同名</li><li>缺省 <code>-p</code> <code>--parents</code> 时，父目录不存在时不可以创建子目录</li><li>目录可以理解为文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dir1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dir2/dir3</span><br><span class="line"><span class="comment"># mkdir: cannot create directory ‘dir2/dir3’: No such file or directory</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p dir2/dir3</span><br></pre></td></tr></table></figure><h3 id="5-2-删除目录-rmdir">5.2 删除目录 rmdir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> [-p] directory</span><br></pre></td></tr></table></figure><ul><li>仅允许删除空目录，如果有文件则无法删除</li><li>对于一连串的目录，例如 <code>dir1/dir2/dir3</code> 其中 dir3 为空目录。可以使用 <code>rmdir -p dir1/dir2/dir3</code> 删除。这一步等价于先删除 dir1 然后 dir2 dir3 ，即 <code>rmdir dir1/dir2/dir3 &amp;&amp; rmdir dir1/dir2 &amp;&amp; rmdir dir1</code></li><li>如果希望递归删除节点以下所有内容，可以使用 <code>rm -R</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> dir1</span><br><span class="line"><span class="comment"># rmdir: failed to remove &#x27;dir1&#x27;: Directory not empty</span></span><br><span class="line"><span class="built_in">rmdir</span> -p dir1</span><br><span class="line"><span class="comment"># rmdir: failed to remove &#x27;dir1&#x27;: Directory not empty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line"><span class="built_in">rmdir</span> -p dir1/dir2/dir3</span><br></pre></td></tr></table></figure><h3 id="5-3-复制文件和目录-cp">5.3 复制文件和目录 cp</h3><h4 id="5-3-1-复制和创建新文件">5.3.1 复制和创建新文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [options] SOURCE DESTINATION</span><br></pre></td></tr></table></figure><ul><li>SOURCE：要复制的文件或目录。</li><li>DESTINATION：目标文件或目录。如果 <code>DESTINATION</code> 是一个目录，则会将 <code>SOURCE</code> 复制到该目录中；如果 <code>DESTINATION</code> 是一个文件名，则会将 <code>SOURCE</code> 复制并重命名为 <code>DESTINATION</code>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ./dir1/file file_copy</span><br><span class="line"><span class="comment"># 将 ./dir1/ 下的 file 文件复制一份到当前目录的 file_copy 文件</span></span><br></pre></td></tr></table></figure><p>复制目录需要 <code>-r</code> 递归复制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r ./dir1/ dir1_copy</span><br></pre></td></tr></table></figure><h4 id="5-3-2-备份和覆盖">5.3.2 备份和覆盖</h4><p>如果要复制的位置存在相同的文件名，权限允许（即可以写 <code>w</code>）时缺省会直接覆盖。权限不允许（没有写权限）时会报 <code>Permission denied</code> 错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -f : 强制覆盖</span><br><span class="line"><span class="built_in">cp</span> -i : 覆盖前询问用户</span><br><span class="line"><span class="built_in">cp</span> -b : 覆盖前保留备份，以原文件名加 ~ </span><br></pre></td></tr></table></figure><h4 id="5-3-3-递归复制目录">5.3.3 递归复制目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r : 递归复制目录和子目录</span><br><span class="line"><span class="built_in">cp</span> -a : 递归复制目录和子目录，保留原文件的属性</span><br></pre></td></tr></table></figure><blockquote><p>如果目标目录存在，则将复制后的目录直接放在目标目录下</p><p>如果目标目录不存在，则创建新目录，将被复制的目录第一个父目录后的所有子目录放在目标目录下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">└── tmp1</span><br></pre></td></tr></table></figure><ul><li>存在目标目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r dir1 ./tmp1</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">└── tmp1</span><br><span class="line">    └── dir1</span><br><span class="line">        └── dir2</span><br><span class="line">            └── dir3</span><br></pre></td></tr></table></figure><ul><li>但如果不存在目标目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r dir1 ./tmp2</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">├── tmp1</span><br><span class="line">│   └── dir1</span><br><span class="line">│       └── dir2</span><br><span class="line">│           └── dir3</span><br><span class="line">└── tmp2</span><br><span class="line">    └── dir2</span><br><span class="line">        └── dir3</span><br></pre></td></tr></table></figure><h3 id="5-4-移动或重命名-mv">5.4 移动或重命名 mv</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式1：移动并重命名</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] SOURCE DEST</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式2：移动到目录（目录必须存在）</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] SOURCE... DIRECTORY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式3：指定目标目录（与格式2等价）</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] -t DIRECTORY SOURCE...</span><br></pre></td></tr></table></figure><blockquote><ul><li>若 <code>DEST</code> 以 <code>/</code> 结尾，强制使用格式2（目录必须存在，否则报错）</li><li>若目标位置存在同名文件/目录，默认直接覆盖</li></ul></blockquote><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-t</code> <code>--target-directory=...</code></td><td style="text-align:left">指定目标目录</td></tr><tr><td style="text-align:left"><code>-i</code> <code>--interactive</code></td><td style="text-align:left">覆盖前询问确认</td></tr><tr><td style="text-align:left"><code>-f</code> <code>--force</code></td><td style="text-align:left">强制覆盖（不询问）</td></tr><tr><td style="text-align:left"><code>-n</code> <code>--no-clobber</code></td><td style="text-align:left">禁止覆盖已有文件</td></tr><tr><td style="text-align:left"><code>-b</code></td><td style="text-align:left">覆盖前备份（默认添加 <code>~</code> 后缀）</td></tr><tr><td style="text-align:left"><code>-S SUFFIX</code> <code>--suffix=SUFFIX</code></td><td style="text-align:left">自定义备份文件后缀（需配合 <code>-b</code>）</td></tr><tr><td style="text-align:left"><code>-u</code> <code>--update</code></td><td style="text-align:left">仅当目标文件不存在或比源文件旧时移动</td></tr><tr><td style="text-align:left"><code>-v</code> <code>--verbose</code></td><td style="text-align:left">显示详细操作过程</td></tr></tbody></table><ol><li>重命名文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> old_file.txt new_file.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>移动文件到目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> file.txt /target/dir/</span><br></pre></td></tr></table></figure><ol start="3"><li>覆盖前备份</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> -b file.txt /backup/  <span class="comment"># 生成 file.txt~</span></span><br><span class="line"><span class="built_in">mv</span> -b -S .bak file.txt  <span class="comment"># 自定义备份后缀 生成 file.txt.bak</span></span><br></pre></td></tr></table></figure><ol start="4"><li>批量移动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> *.jpg /photos/ -v  <span class="comment"># -v 显示详细操作</span></span><br></pre></td></tr></table></figure><h3 id="5-5-删除-rm">5.5 删除 rm</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><ul><li><p>直接删除文件（不询问）</p></li><li><p>目录删除，需配合 <code>-R/-r</code> 选项删除非空目录；使用 <code>-d</code> 选项可删除空目录</p></li></ul><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-i</code></td><td style="text-align:left">每次删除前询问确认</td></tr><tr><td style="text-align:left"><code>-f</code></td><td style="text-align:left">强制删除（不询问，忽略错误）</td></tr><tr><td style="text-align:left"><code>-R</code>  <code>-r</code>  <code>--recursive</code></td><td style="text-align:left">递归删除目录及其子内容</td></tr><tr><td style="text-align:left"><code>-d</code>  <code>--dir</code></td><td style="text-align:left">删除空目录</td></tr><tr><td style="text-align:left"><code>-v</code>  <code>--verbose</code></td><td style="text-align:left">显示详细操作过程</td></tr></tbody></table><ol><li>删除文件（强制）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f file.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>递归删除目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r directory/</span><br></pre></td></tr></table></figure><ol start="3"><li>删除多个文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -i *.<span class="built_in">log</span>  <span class="comment"># -i 每次删除都询问是否进行</span></span><br></pre></td></tr></table></figure><h2 id="6-Linux-目录结构">6 Linux 目录结构</h2><blockquote><p>由 <strong>DeepSeek</strong> 整理</p></blockquote><h3 id="6-1-核心目录">6.1 核心目录</h3><h4 id="6-1-1-根目录（-）">6.1.1 根目录（/）</h4><p>整个文件系统树的根，包含了许多子目录</p><h4 id="6-1-2-基础功能目录">6.1.2 基础功能目录</h4><table><thead><tr><th>目录</th><th>功能说明</th><th>重要特性</th></tr></thead><tbody><tr><td><code>/bin</code></td><td>基础执行程序</td><td>包含<code>ls</code>、<code>cp</code>等基础命令，单用户模式可用</td></tr><tr><td><code>/sbin</code></td><td>系统管理程序</td><td><code>fdisk</code>、<code>ifconfig</code>等管理员专用命令</td></tr><tr><td><code>/lib</code></td><td>共享库文件</td><td>为 <code>/bin</code> 和 <code>/sbin</code> 提供运行依赖</td></tr><tr><td><code>/dev</code></td><td>设备文件</td><td>由<code>udev</code>管理，如<code>/dev/sda</code>（磁盘设备）</td></tr></tbody></table><h4 id="6-1-3-系统配置目录">6.1.3 系统配置目录</h4><table><thead><tr><th>目录</th><th>核心内容</th><th>典型文件</th></tr></thead><tbody><tr><td><code>/etc</code></td><td>系统级配置文件</td><td><code>passwd</code>、<code>fstab</code>、<code>ssh/</code></td></tr><tr><td><code>/boot</code></td><td>启动相关文件</td><td><code>grub/</code>、<code>vmlinuz</code>（内核文件）</td></tr></tbody></table><h4 id="6-1-4-用户相关目录">6.1.4 用户相关目录</h4><table><thead><tr><th>目录</th><th>功能说明</th><th>用户权限</th></tr></thead><tbody><tr><td><code>/home</code></td><td>用户主目录</td><td><code>~/</code> 指向用户专属目录</td></tr><tr><td><code>/root</code></td><td>管理员主目录</td><td>独立于普通用户的根 /home 结构</td></tr></tbody></table><h4 id="6-1-5-存储相关目录">6.1.5 存储相关目录</h4><table><thead><tr><th>目录</th><th>挂载类型</th><th>典型用途</th></tr></thead><tbody><tr><td><code>/media</code></td><td>可移动存储</td><td>U盘、光盘自动挂载点</td></tr><tr><td><code>/mnt</code></td><td>临时挂载点</td><td>手动挂载硬盘/NFS</td></tr></tbody></table><h3 id="6-2-特殊用途目录">6.2 特殊用途目录</h3><h4 id="6-2-1-运行时数据">6.2.1 运行时数据</h4><table><thead><tr><th>目录</th><th>数据特性</th><th>典型内容</th></tr></thead><tbody><tr><td><code>/var</code></td><td>动态可变数据</td><td><code>log/</code>、<code>mail/</code>、<code>spool/</code></td></tr><tr><td><code>/run</code></td><td>运行时信息</td><td>PID文件、<code>/var/run</code>符号链接</td></tr></tbody></table><h4 id="6-2-2-临时空间">6.2.2 临时空间</h4><table><thead><tr><th>目录</th><th>生命周期</th><th>权限控制</th></tr></thead><tbody><tr><td><code>/tmp</code></td><td>临时文件</td><td>用户可创建，仅创建者可删除</td></tr><tr><td><code>/lost+found</code></td><td>文件恢复</td><td><code>fsck</code>修复后的残留文件</td></tr></tbody></table><h4 id="6-2-3-内核与硬件">6.2.3 内核与硬件</h4><table><thead><tr><th>目录</th><th>信息类型</th><th>访问方式</th></tr></thead><tbody><tr><td><code>/proc</code></td><td>进程与内核数据</td><td>虚拟文件系统，实时读取（如<code>cpuinfo</code>）</td></tr><tr><td><code>/sys</code></td><td>硬件层级信息</td><td>设备驱动、电源管理等</td></tr></tbody></table><h3 id="6-3-资源存储目录">6.3. 资源存储目录</h3><h4 id="6-3-1-静态资源库">6.3.1 静态资源库</h4><table><thead><tr><th>目录</th><th>资源类型</th><th>典型结构</th></tr></thead><tbody><tr><td><code>/usr</code></td><td>只读共享资源</td><td><code>bin/</code>、<code>lib/</code>、<code>share/</code>（文档）</td></tr><tr><td><code>/opt</code></td><td>第三方软件</td><td>独立软件包（如Oracle）</td></tr></tbody></table><h4 id="6-3-2-服务数据">6.3.2 服务数据</h4><table><thead><tr><th>目录</th><th>服务类型</th><th>典型应用</th></tr></thead><tbody><tr><td><code>/srv</code></td><td>本地服务数据</td><td><code>www/</code>（网站数据）、<code>ftp/</code></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Linux 文件系统：路径名、目录 (`pwd, cd`) 、文件系统组织方式 (inode) 、文件和目录查看 (`touch, ls, tree`) 、文件和目录操作 (`mkdir, rmdir, cp, mv, rm`) 和 Linux 的目录结构。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="文件系统" scheme="https://blog.iskage.online/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://blog.iskage.online/posts/340249a9.html"/>
    <id>https://blog.iskage.online/posts/340249a9.html</id>
    <published>2025-03-06T12:43:00.000Z</published>
    <updated>2025-03-07T03:57:56.349Z</updated>
    
    <content type="html"><![CDATA[<h1>基于数组的序列：Python 动态数组原理与插入排序</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><p>本文介绍了低层次数组的原理，并自定义实现了 Python 的一个动态数组。并详细分析了底层存储原理、摊销时间。分析了一些基于数组的案例，例如插入排序算法。同时指出了组成字符串和多维数组创建的常见误用。</p><h2 id="1-Python-序列类型">1 Python 序列类型</h2><p>Python 有各种序列类型，例如：内置的列表 <code>list</code> 、元组 <code>tuple</code> 和字符串 <code>str</code> 类</p><ul><li>这些序列类型支持用下标访间序列元素，如 <code>A[i]</code></li><li>这些类型均使用<strong>数组</strong>来表示序列</li><li>一个数组即为一组相关变量，它们一个接一个地存在内存里的一块<strong>连续区域</strong>内</li></ul><p>而 <code>数组 Array</code> 抽象数据类型为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ADT Array&#123;</span><br><span class="line">数据对象: A = &#123;A1, A2, ..., An｝</span><br><span class="line">基本操作: </span><br><span class="line">A.init(S): 使用序列 S 初始化数组 A</span><br><span class="line"><span class="built_in">len</span>(A): 返回数组 A 的长度</span><br><span class="line">A.is_empty(): 检查数组 A 是否为空，如为空则返回 <span class="literal">True</span></span><br><span class="line">        A.get_item(n): 返回数组 A 的第 n 个元素</span><br><span class="line">        A.locate(e): 返回数组 A 中第一个等于 e 的元素的位置</span><br><span class="line">        A.insert(n, e): 在数组 A 的第 n 个元素前插入元素 e</span><br><span class="line">        A.delete(n): 删除数组 A 的第 n 个元素</span><br><span class="line">        A.clear(): 清空数组 A</span><br><span class="line">&#125; ADT Array</span><br></pre></td></tr></table></figure><h2 id="2-低层次数组">2 低层次数组</h2><p>从计算机底层角度理解数组的存储方式：数组是一些变量一个接一个地存在内存里的一块<strong>连续区域</strong>内。例如：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741166755512.png" style="zoom:67%;" /><p>对于这种连续的存储方式，索引变得十分迅速，例如上例：已知 <code>'S'</code> 的地址为 <code>2146</code> 而它位于位置 <code>index = 0</code> 那么索引 <code>'L'</code> 只要寻找地址 <code>start + cellsize * index</code> 即 <code>2146 + 2 * 4 = 2154</code> 即可找到 <code>'L'</code> 的地址。</p><p>从底层上理解数组，我们又可以分为：紧凑数组和引用数组</p><h3 id="2-1-紧凑数组">2.1 紧凑数组</h3><p>一个存储基本元素（如字符）的数组，被称为紧凑数组。例如上面的例子存储的 <code>SAMPLE</code> 就是紧凑数组。</p><p>除了 Python 默认的紧凑数组，我们也可以利用 <code>array</code> 模块自定义紧凑数组。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">x = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>其中 <code>'i'</code> 参数代表以整型类型存储，这个会定义分配的空间，一般整型分配 <code>2 or 4</code> 个字节。其他类型例：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741167318874.png" alt=""></p><p>例如刚刚的例子 <code>[1, 2, 3, 4]</code> 以 <code>'i'</code> 即有符号整型存储，分配空间为一个元素 4 字节，可以使用 Python 的 <code>id()</code> 函数检查一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">x = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x[<span class="number">1</span>]) - <span class="built_in">id</span>(x[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x[<span class="number">2</span>]) - <span class="built_in">id</span>(x[<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="comment"># 32</span></span><br></pre></td></tr></table></figure><p>这里的 <code>32</code> 表示 32 个比特 <code>bit</code> ，而 <code>8 bit = 1 byte</code> 故二者之间确实相隔 4 字节，而且两两相隔 4 字节，说明是紧凑的。</p><blockquote><p>对于 <code>array</code> 模块，我们只能定义它提供的数据类型的紧凑数组，即 <code>i, f, d</code> （整型、浮点型等），他们的内存大小已经确定。如果想完全自定义一个紧凑数组，同时还有满足底层数组的要求（动态数组），可以采用 <code>ctypes</code> 模块实现，见 [3.3 节：实现动态数组](###3.3 实现动态数组)。</p></blockquote><h3 id="2-2-引用数组">2.2 引用数组</h3><p>一个存储对象的引用的数组，被称为引用数组。例如：对于下面这个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;Rene&#x27;</span>, <span class="string">&#x27;Joseph&#x27;</span>, <span class="string">&#x27;Janet&#x27;</span>, <span class="string">&#x27;Jonas&#x27;</span>, <span class="string">&#x27;Helen&#x27;</span>, <span class="string">&#x27;Virginia&#x27;</span>]</span><br></pre></td></tr></table></figure><p>其存储方式如图，每个数组元素存储的是字符串数据的引用（地址）。不同于紧凑数组，存储不同类型的数据要分配的空间是不同的，而引用数组避免了这个困难。因为不同地址的大小是固定的，所以直接存储地址既能满足快速索引，又可以避免不同数据带来的分配空间难题。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741167621703.png" alt=""></p><p>而这也带了列表的某些特性，例如用下面的方法创建的列表，实则存储了各个数字的地址，而数字本身是不可变的常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p>此时如果有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temp = [<span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><p>那么，<code>temp</code> 的这三个元素与 <code>primes</code> 的对应元素是相同的，因为他们都是存储了不可变常数 <code>7, 11, 13</code> 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line">temp = [<span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="built_in">id</span>(<span class="number">7</span>) == <span class="built_in">id</span>(primes[<span class="number">3</span>]) == <span class="built_in">id</span>(temp[<span class="number">0</span>])</span><br><span class="line">)</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741168198295.png" style="zoom:50%;" /><h2 id="3-动态数组和摊销">3 动态数组和摊销</h2><p>由之前的分析，我们发现：创建低层次数组时，必须明确声明数组的大小，以便系统为其存储分配连续的内存。</p><h3 id="3-1-动态数组">3.1 动态数组</h3><p>不过 Python 提供了一个算法技巧，即<strong>动态数组</strong>。在 Python 中，创建一个列表，分配给这个列表的数组空间一般不与列表相同，而是更大。例如 <code>[1, 2, 3]</code> 列表的数组可能可以存储三个以上的元素。我们可以通过以下的代码验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    size = sys.getsizeof(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数组大小: &#123;&#125;, 数组内存分配: &#123;&#125; Byte (字节)&quot;</span>.<span class="built_in">format</span>(length, size))</span><br><span class="line">    data.append(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741168916651.png" style="zoom:50%;" /><p>注意到，当数组为空时，仍然分配了 56 字节，对于 64 位 (bit) 操作系统，这一般意味着预留了 7 个元素的空间。</p><p>除此之外，而且当数组即将满时，Python 会自动创建一个更大的数组，并将原来的元素完全拷贝进新的数组。正如上图所示，当不断增加元素时，数组内存空间也在不断扩大。</p><h3 id="3-2-摊销">3.2 摊销</h3><p>对于不断扩大数组空间有两种策略：</p><ul><li><strong>固定增量策略</strong>：每次数组大小增大一个常数</li><li><strong>翻倍增量策略</strong>：每次数组大小翻倍</li></ul><p>首先，我们给出结论，实际 Python 采用的是第二种方式——翻倍增量策略，下面证明这样的策略摊销时间更短。</p><p>我们定义<strong>摊销时间</strong>为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{T(n)}{n} \notag</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 表示数组长度，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 表示进行增量的总运行时间。</p><h4 id="3-2-1-固定增量策略">3.2.1 固定增量策略</h4><p>假设每次在数组填满后，扩展 c 个空间。即每次增大的数量都是 c 的倍数，初始化了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mi>n</mi><mi>c</mi></mfrac></mrow><annotation encoding="application/x-tex">k = \frac{n}{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 次数组（如果设从长度为 1 不断加 c 增加到 n 需要的次数为 k，那么 k 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>⋅</mo><mi>c</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">k\cdot c = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>）。那么扩展到 n 这个长度需要操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mi>c</mi><mo>+</mo><mn>2</mn><mi>c</mi><mo>+</mo><mn>3</mn><mi>c</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>k</mi><mi>c</mi><mo>=</mo><mi>n</mi><mo>+</mo><mi>c</mi><mi>k</mi><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n + c + 2c + 3c + \cdots + kc = n + ck(k+1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/2</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo separator="true">,</mo><mn>2</mn><mi>c</mi><mo separator="true">,</mo><mn>3</mn><mi>c</mi><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">c, 2c, 3c, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 代表每次需要初始化新增数组的长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表复制次数。而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">k \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ，故最后的总时间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) \sim O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。那么摊销时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><h4 id="3-2-2-翻倍增量策略">3.2.2 翻倍增量策略</h4><p>假设每次在数组填满后，翻倍自身的大小，初始化了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">k = \log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span> 次数组（如果设从长度为 1 不断乘以 2 翻倍到 n 需要的次数为 k ，那么 k 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2^k = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>）。那么扩展到 n 这个长度需要操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mi>k</mi></msup><mo>=</mo><mi>n</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>3</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1 + 2 + 2^2 + 2^3 + \cdots + 2^k = n + 2^{k+1} - 1 = 3n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">1, 2, 2^2, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 代表每次需要初始化新增数组的长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表复制次数。故最后的总时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>3</mn><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(3n-1) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，于是摊销时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><ul><li>比较二者，翻倍增量策略更优，摊销时间复制度仅为 <code>O(n)</code></li></ul><p>很明显，从摊销时间来看，翻倍增量策略更优。直观地理解：摊销时间代表的是平均时间，而相比每次增加 c ，通过翻倍来达到长度 n 会更快。相当于通过不计空间成本的方式达到长度 n ，所以在平均来看，翻倍更优。</p><h3 id="3-3-实现动态数组">3.3 实现动态数组</h3><p>当知道了 Python 底层如何构建数组后，我们可以使用 Python 的 <code>ctypes</code> 模块来自定义动态数组。我们希望它可以满足：</p><ul><li>初始化成立；</li><li>紧凑的，可以快速索引；</li><li>可以添加元素（添加元素的方法要满足动态数组）；</li><li>针对添加元素，需要判断数组大小是否足够。如果不够，采用翻倍增量策略进行数组扩展；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义实现动态数组，_ 开头表示非公有方法，不建议外部误调用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空数组&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._n = <span class="number">0</span>  <span class="comment"># 数组实际元素个数</span></span><br><span class="line">        <span class="variable language_">self</span>._capacity = <span class="number">1</span>  <span class="comment"># 默认数组空间大小</span></span><br><span class="line">        <span class="variable language_">self</span>._A = <span class="variable language_">self</span>._make_array(<span class="variable language_">self</span>._capacity)  <span class="comment"># 创建大小为 _capacity 的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_array</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建大小为 c 的数组&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (c * ctypes.py_object)()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回数组元素个数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;索引数组第 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= k &lt; <span class="variable language_">self</span>._n:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Invalid index&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._A[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;数组末尾添加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._n == <span class="variable language_">self</span>._capacity:  <span class="comment"># 判断数组空间</span></span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="variable language_">self</span>._capacity)  <span class="comment"># 翻倍增量策略</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A[<span class="variable language_">self</span>._n] = obj  <span class="comment"># 更新数组尾部元素</span></span><br><span class="line">        <span class="variable language_">self</span>._n += <span class="number">1</span>  <span class="comment"># 更新实际元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;扩展数组大小&quot;&quot;&quot;</span></span><br><span class="line">        B = <span class="variable language_">self</span>._make_array(c)  <span class="comment"># 创建大小为 c 的新数组</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n):</span><br><span class="line">            <span class="comment"># 拷贝原来数组元素</span></span><br><span class="line">            B[k] = <span class="variable language_">self</span>._A[k]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A = B  <span class="comment"># 更新数组对象</span></span><br><span class="line">        <span class="variable language_">self</span>._capacity = c  <span class="comment"># 更新存储空间大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;字符串重载，以字符串得到方式展示数组内容&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + <span class="string">&quot;, &quot;</span>.join(<span class="built_in">str</span>(<span class="variable language_">self</span>._A[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n)) + <span class="string">&quot;]&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_memory_size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回数组的内存分配大小（字节）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._capacity * ctypes.sizeof(ctypes.py_object)</span><br></pre></td></tr></table></figure><p>通过下面的方式检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array = DynamicArray()</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(array)</span><br><span class="line">    size = array.get_memory_size()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数组大小: &#123;&#125;, 数组内存分配: &#123;&#125; Byte (字节)&quot;</span>.<span class="built_in">format</span>(length, size))</span><br><span class="line">    array.append(k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(array) <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741175393359.png" alt="自定义动态数组的内存变化"></p><p>从结果可知：每当数组实际元素达到内存分配的个数时，内存分配就会翻倍（即当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>3</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">length = 1, 2, 2^2, 2^3, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 时内存就会乘以 2），这就是手动实现动态数组，采用翻倍增量策略的例子。</p><h2 id="4-Python-列表和元组类的效率">4 Python 列表和元组类的效率</h2><h3 id="4-1-不改变数组内容的操作">4.1 不改变数组内容的操作</h3><p>对于 Python 的列表和元组这两个序列类，<strong>不改变其内容的操作</strong>往往都是常量级别的时间复杂度 <code>O(c)</code>。例如：索引（因为是连续的内存空间，只需知道 index 计算即可得到对应的地址）、长度（因为在基类里保存了 <code>__len__</code> 方法，可以直接调出）等。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741175945153.png" alt="不改变内容的操作"></p><h3 id="4-2-改变数组内容的操作">4.2 改变数组内容的操作</h3><h4 id="4-2-1-数组元素的插入-O-n">4.2.1 数组元素的插入 <code>O(n)</code></h4><p>将对象 <code>o</code> 插入到数组 <code>A</code> 的第 i 个元素前时（<code>insert(o, i)</code>）需要将后 n - i 个元素后移才能插入。最坏的情况就是插入到第 0 个位置，这样需要后移 n 个元素，即复杂度为 <code>O(n)</code> 。</p><ul><li>代码实现插入方法 <code>insert</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, obj, position</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在第 position 位置插入 obj&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 解决索引问题</span></span><br><span class="line">        <span class="keyword">while</span> position &lt; <span class="number">0</span>:</span><br><span class="line">            position += <span class="variable language_">self</span>._n</span><br><span class="line">        position = position % <span class="variable language_">self</span>._n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._n == <span class="variable language_">self</span>._capacity:</span><br><span class="line">            <span class="comment"># 空间不足</span></span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="variable language_">self</span>._capacity)  <span class="comment"># 扩展</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n, position, -<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 后 n - position 向后移动一位</span></span><br><span class="line">            <span class="variable language_">self</span>._A[j] = <span class="variable language_">self</span>._A[j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A[position] = obj  <span class="comment"># 更新第 position 位的元素</span></span><br><span class="line">        <span class="variable language_">self</span>._n += <span class="number">1</span>  <span class="comment"># 更新元素个数</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-数组元素的删除-O-n">4.2.2 数组元素的删除 <code>O(n)</code></h4><p>与插入元素相反，删除元素需要索引到对应元素，删去后需要将后面的元素向前移动一位。最坏的情况就是删除第一个元素，需要移动 n 个元素，复杂度为 <code>O(n)</code> 。</p><ul><li>代码实现删除方法 <code>remove</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除值 obj (不考虑重复)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n):</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._A[k] == obj:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="variable language_">self</span>._n - <span class="number">1</span>):</span><br><span class="line">                    <span class="comment"># 前移</span></span><br><span class="line">                    <span class="variable language_">self</span>._A[j] = <span class="variable language_">self</span>._A[j + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>._A[<span class="variable language_">self</span>._n - <span class="number">1</span>] = <span class="literal">None</span>  <span class="comment"># help garbage collection</span></span><br><span class="line">            <span class="variable language_">self</span>._n -= <span class="number">1</span>  <span class="comment"># 更新个数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Value not found&#x27;</span>)  <span class="comment"># 无匹配</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上，Python 在删除元素后，也会动态调整空间大小，为简单期间，暂不手动实现。</p></blockquote><h4 id="4-2-3-改变数组内容的操作">4.2.3 改变数组内容的操作</h4><p>针对这些会改变数组内容的操作，往往需要至少 <code>O(n)</code> 复杂度才能实现：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741178215624.png" alt="改变内容的操作"></p><blockquote><p>特别的，因为在末尾增加元素、插入元素、删除元素、在末尾删除元素、拼接等操作会带来存储空间的变化，所以可能需要扩展或缩小内存空间。故要考虑摊销的时间复杂度，这里采用的是翻倍增量策略的摊销（平均时间）为 <code>O(1)</code> 。</p></blockquote><blockquote><p>需要注意，摊销的 <code>O(1)</code> 代表的是平均时间，与一般的时间复杂度定义不同，一般时间复杂度考虑的是最坏情况。如果考虑最坏情况，则为 <code>O(n)</code> ，例如 <code>append</code> 最坏的情况需要 n 次，因为扩展空间后需要复制原来数组的 n 个元素。</p></blockquote><h2 id="5-Python-字符串类的效率">5 Python 字符串类的效率</h2><p>字符串的很多方面与列表和元组相同，这里主要介绍一个常见的【误用】。</p><h3 id="5-1-组成字符串的误用">5.1 组成字符串的误用</h3><p><strong>组成字符串</strong></p><p>假设有一个很长的字符串对象 <code>document</code> ，我们的目标是构造一个新的字符串 <code>letter</code> ，该字符串仅包含 <code>document</code> 的所有字母。常见的误用为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是个错误的使用</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalnum():</span><br><span class="line">        <span class="comment"># 使用重载后的 + 进行组合</span></span><br><span class="line">        letter += char</span><br></pre></td></tr></table></figure><p>如果这样使用，每一次 <code>letter = letter + char</code> 都会创建一个新的对象 <code>letter + char</code> 并把它赋值给 <code>letter</code> 。假设 <code>letter</code> 最后长为 n ，那么需要进行近似 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 + 2 + \cdots + n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 次操作，复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><h3 id="5-2-正确使用">5.2 正确使用</h3><p>为了解决时间复杂度，我们可以用空间换时间，即不直接对 <code>letter</code> 操作，而是用一个临时的表 <code>tmp</code> 存储字符，然后在组成新的字符串 <code>letter</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tmp = []  <span class="comment"># 临时表</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        <span class="comment"># append 操作平均为 O(1)</span></span><br><span class="line">        tmp.append(char)</span><br><span class="line"><span class="comment"># 最后再组成字符串</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span>.join(tmp)</span><br></pre></td></tr></table></figure><ul><li>我们可以验证一下二者的速度：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为验证，设置一个足够长的字符串</span></span><br><span class="line">document = <span class="string">&quot;hello world, welcome to Python :) Having a nice day! ....&quot;</span> * <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 误用</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalnum():</span><br><span class="line">        <span class="comment"># 使用重载后的 + 进行组合</span></span><br><span class="line">        letter += char</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="comment"># print(letter)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;直接组成消耗的时间: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line">tmp = []  <span class="comment"># 临时表</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        <span class="comment"># append 操作平均为 O(1)</span></span><br><span class="line">        tmp.append(char)</span><br><span class="line"><span class="comment"># 最后再组成字符串</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span>.join(tmp)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="comment"># print(letter)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用临时表消耗的时间: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">直接组成消耗的时间: 3.8247530460357666</span></span><br><span class="line"><span class="string">使用临时表消耗的时间: 0.07381105422973633</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-插入排序算法">6 插入排序算法</h2><p>从第 2 个元素开始，比较它和之前的元素大小，如果它比前一个元素小，则接着往前比较，直到前一个元素小于它，则插入到这个元素的后面。（从小到大）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741256265390.png" alt="插入排序示意图"></p><h3 id="6-1-代码实现">6.1 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从小到大排序数组</span></span><br><span class="line"><span class="string">    :param arr: 数组</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="comment"># 从第 2 个元素开始</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        j = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> current &lt; arr[j - <span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 当前一个元素不是第 0 个元素且比 current 大时</span></span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>]  <span class="comment"># 后移</span></span><br><span class="line">            j -= <span class="number">1</span>  <span class="comment"># 继续向前找</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入</span></span><br><span class="line">        arr[j] = current</span><br></pre></td></tr></table></figure><h3 id="6-2-算法分析">6.2 算法分析</h3><p>下面考虑的为从小到大排序</p><ul><li>最好的情况：已经是从小到大排序</li></ul><p>此时只需要遍历第 2 个元素到最后一个元素即可，因为每次比较都发现比前一个元素大，没有插入操作。故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><ul><li>最坏的情况：数组为从大到小排序</li></ul><p>此时对第 i 个元素而言，都要插入到最前，前面的 i - 1 个元素均要后移一位，需要操作 <code>i-1 + 1</code> （后移 i - 1 次，插入 1 次）。故对于从第 2 个元素开始遍历，需要次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>2</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum\limits_{i=2}^n\ (i-1+1)\sim n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">2</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> ，故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><p>所以，综合以上分析，插入排序的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><blockquote><p>【注意】插入排序最坏情况才是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，而对于一些运气较好时，插入排序非常高效，可以对比选择排序。</p></blockquote><h3 id="6-3-与选择排序对比">6.3 与选择排序对比</h3><p>每次从未排序的部分中选择最小的元素，将其放到前面已排序部分的末尾。（从小到大）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/selection_sort.jpeg" alt="选择排序示意图"></p><ul><li>选择排序的代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    选择排序：从小到大排序数组</span></span><br><span class="line"><span class="string">    :param arr: 数组</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="comment"># 从起始开始遍历</span></span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j  <span class="comment"># 找到后面最小的元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将后面最小的元素放到前面子列的末尾</span></span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]</span><br></pre></td></tr></table></figure><ul><li>选择排序的算法分析</li></ul><p>无论最好还是最坏（即无轮是从小到大还是从大到小排序的原数组），对于第 i + 1 个位置，选择排序都需要找到 i + 1 到 n 的最小元素，然后插入到第 i 个位置后。即使是从小到大排序好的原数组，都需要遍历以确定是否是最小元素。故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n\ (n - i) \sim n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 即一定为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><p>所以，【选择排序不如插入排序高效】。也可以通过下面的例子验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">start = time.time()</span><br><span class="line">insertion_sort(x)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;insertion sort cost &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">start = time.time()</span><br><span class="line">selection_sort(x)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;selection sort cost &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">insertion sort cost 0.0012428760528564453s</span></span><br><span class="line"><span class="string">selection sort cost 2.98787522315979s</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>当遇见最好情况时，插入排序大约消耗了 0.0012 秒，而选择排序则消耗了 2.99 秒，是前者的 2492 倍！</p><h2 id="7-多维数组的误用">7 多维数组的误用</h2><h3 id="7-1-误用">7.1 误用</h3><p>以创建二维数组（矩阵）为例，如果采用如下方式构建数组：【误用】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">0</span>] * n] * m</span><br></pre></td></tr></table></figure><p>可以初始化一个列表，例如 <code>m = 3, n = 6</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">3</span></span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">data = [[<span class="number">0</span>] * n] * m</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure><p>但是此时 data 的第一维度的索引指向的是同一个列表对象，如图：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741262575523.png" alt="误用：指向同一列表对象" style="zoom:50%;" /><p>此时，如果改变 <code>data[0][0]</code> 的值，对应的 <code>data[1][0]</code> 和 <code>data[2][0]</code> 的值会一起变化（因为他们指向同一个列表对象，需要注意，被指向的列表对象 <code>[0, 0, 0, 0, 0, 0]</code> 这 6 个元素存储的是常数 <code>0</code> 的地址）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure><h3 id="7-2-正确使用">7.2 正确使用</h3><p>正确的创建方式：使用 Python 的列表推导式实例化新的列表对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741262889863.png" alt="正确使用"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">3</span></span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">data = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍了低层次数组的原理，并自定义实现了 Python 的一个动态数组。并详细分析了底层存储原理、摊销时间。分析了一些基于数组的案例，例如插入排序算法。同时指出了组成字符串和多维数组创建的常见误用。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (3) R 语言初步：基本运算、常见操作和控制流</title>
    <link href="https://blog.iskage.online/posts/8bcfe1ac.html"/>
    <id>https://blog.iskage.online/posts/8bcfe1ac.html</id>
    <published>2025-03-06T09:07:00.000Z</published>
    <updated>2025-03-06T09:14:10.882Z</updated>
    
    <content type="html"><![CDATA[<h1>R 语言初步 (2) 基本运算、常见操作和控制流</h1><p>本章介绍了 R 语言中常见的运算和操作（例如索引），以及针对不同数据类型的不同操作函数（例如 apply 函数）。同时介绍了 R 语言控制流（if-else 条件执行、for while repeat 循环结构）的实现。</p><h2 id="1-基本运算和操作">1 基本运算和操作</h2><h3 id="1-1-向量的下标运算">1.1 向量的下标运算</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">age<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="operator">-</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li><code>a[i]</code> 表示取第 <code>i</code> 个元素</li><li><code>a[c(1, 2, 3)]</code> 表示取第 <code>1 , 2, 3</code> 个元素</li><li><code>a[-1]</code> 表示输出 <code>a</code> 删去第 <code>1</code> 个元素的结果</li><li><code>a[-c(1, 2, 3)]</code> 表示输出 <code>a</code> 删去第 <code>1, 2, 3</code> 个元素的结果</li><li>特别地，索引支持逻辑运算</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1.1</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">,</span> <span class="number">4.4</span><span class="punctuation">,</span> <span class="number">5.5</span><span class="punctuation">,</span> <span class="number">6.6</span><span class="punctuation">,</span> <span class="number">7.7</span><span class="punctuation">,</span> <span class="number">8.8</span><span class="punctuation">,</span> <span class="number">9.9</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> age <span class="operator">&gt;</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> weight<span class="punctuation">[</span>age <span class="operator">&gt;</span> <span class="number">4</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">5.5</span> <span class="number">6.6</span> <span class="number">7.7</span> <span class="number">8.8</span> <span class="number">9.9</span></span><br></pre></td></tr></table></figure><p>可以配合逻辑运算符</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">NA</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">,</span> <span class="number">4.4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.na</span><span class="punctuation">(</span>age<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.na</span><span class="punctuation">(</span>weight<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"><span class="operator">&gt;</span> index <span class="operator">&lt;-</span> <span class="operator">!</span><span class="built_in">is.na</span><span class="punctuation">(</span>age<span class="punctuation">)</span> <span class="operator">&amp;</span> <span class="operator">!</span><span class="built_in">is.na</span><span class="punctuation">(</span>weight<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> age<span class="punctuation">[</span>index<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> weight<span class="punctuation">[</span>index<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2.2</span> <span class="number">4.4</span></span><br></pre></td></tr></table></figure><ul><li><code>is.na()</code> 检查每个元素是否为空，返回一个向量</li><li><code>!</code> 表示非运算；<code>&amp;</code> 表示与运算</li></ul><h3 id="1-2-矩阵的下标运算">1.2 矩阵的下标运算</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">9</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">7</span>    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">8</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">6</span>           <span class="comment"># 按列检索 1, 4, 7, 2, 5, 8, 3, 6, 9 的 第 8 个为 6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span><span class="comment"># 第 1 行 第 2 列</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span><span class="comment"># 行全取，列取第 1 列</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="comment"># 列全取，行取第 1 行</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span><span class="punctuation">]</span><span class="comment"># 指定读取 第 1 行 第 1 到 2 列 的数据</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span> <span class="comment"># 指定读取 第 1 行 第 1 和 3 列 的数据</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数据框：列向量的访问">1.3 数据框：列向量的访问</h3><h4 id="1-3-1-使用-访问列">1.3.1 使用 $ 访问列</h4><p>使用 <code>$</code> 访问数据库中的列</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %% 数据框</span></span><br><span class="line"><span class="operator">&gt;</span> df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> weight <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1.1</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">df</span><br><span class="line"><span class="operator">&gt;</span> df</span><br><span class="line">  age weight</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>    <span class="number">1.1</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>    <span class="number">2.2</span></span><br><span class="line"><span class="number">3</span>   <span class="number">3</span>    <span class="number">3.3</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> df<span class="operator">$</span>age</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> df<span class="operator">$</span>weight</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.1</span> <span class="number">2.2</span> <span class="number">3.3</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-使用-attach-和-detach-函数">1.3.2 使用 attach 和 detach 函数</h4><p>也可以使用 <code>attach(df)</code> 进入数据框，然后就可以直接使用列名调用数据，使用 <code>detach(df)</code> 退出数据框</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> attach<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">The following objects are masked from df <span class="punctuation">(</span>pos <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span><span class="operator">:</span></span><br><span class="line"></span><br><span class="line">    age<span class="punctuation">,</span> weight</span><br><span class="line"></span><br><span class="line">age</span><br><span class="line">weight</span><br><span class="line"><span class="operator">&gt;</span> age</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="operator">&gt;</span> weight</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.1</span> <span class="number">2.2</span> <span class="number">3.3</span></span><br><span class="line"><span class="operator">&gt;</span> detach<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>attach</code> 和 <code>detach</code> 也使用与 list 类型</p></blockquote><h3 id="1-4-列表的索引">1.4 列表的索引</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>member <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> name<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Jerry&quot;</span><span class="punctuation">,</span> <span class="string">&quot;John&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line"><span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">$</span>name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br></pre></td></tr></table></figure><ul><li>使用 <code>$</code> 索引</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">x<span class="operator">$</span>name</span><br><span class="line"><span class="operator">&gt;</span> x<span class="operator">$</span>name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>attach</code> 和 <code>detach</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> attach<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"><span class="operator">&gt;</span> name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> detach<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>取一次 <code>[]</code> 得到的还是列表，需要取 <code>[[]]</code> 得到向量</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span>        <span class="comment"># 仍然是 list</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span><span class="comment"># 得到向量</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[[</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span><span class="comment"># 等价于 x[[1]]</span></span><br></pre></td></tr></table></figure><h2 id="2-常用操作符和函数">2 常用操作符和函数</h2><h3 id="2-1-数值型向量">2.1 数值型向量</h3><h4 id="2-1-1-逐元素计算">2.1.1 逐元素计算</h4><table><thead><tr><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td></tr><tr><td><code>-</code></td><td>减</td></tr><tr><td><code>*</code></td><td>乘</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>^</code> 或 <code>**</code></td><td>幂次</td></tr><tr><td><code>x %% y</code></td><td>取余数，等价于 x mod y</td></tr><tr><td><code>x %/% y</code></td><td>除法求商，例如 <code>9 %/% 4 = 2</code></td></tr></tbody></table><ul><li>比较符号返回逻辑运算结果</li><li>其他运算采用逐元素计算的方式</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> 6<span class="operator">:</span><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">*</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="number">6</span> <span class="number">14</span> <span class="number">24</span> <span class="number">36</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">/</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">0.1666667</span> <span class="number">0.2857143</span> <span class="number">0.3750000</span> <span class="number">0.4444444</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">+</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="number">7</span>  <span class="number">9</span> <span class="number">11</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><blockquote><p>特别地，R 语言的向量运算中存在<strong>循环法则</strong></p></blockquote><p>当向量长度不同时，会循环复制短的向量，直到长度相等后再运算：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">4</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line">警告信息<span class="operator">:</span></span><br><span class="line">In <span class="number">1</span><span class="operator">:</span><span class="number">3</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span> <span class="operator">:</span> 长的对象长度不是短的对象长度的整倍数</span><br></pre></td></tr></table></figure><p>例如：<code>(1, 2) + (1, 2, 3, 4)</code> 等价于 <code>(1, 2, 1, 2) + (1, 2, 3, 4)</code></p><p>例如：<code>(1, 2, 3) + (1, 2, 3, 4, 5)</code> 等价于 <code>(1, 2, 3, 1, 2) + (1, 2, 3, 4, 5)</code></p><h4 id="2-1-2-一些常见的函数">2.1.2 一些常见的函数</h4><p>例如：<code>sin, cos, tan, asin, acos, atan, atan2, 10g, 10g10, exp</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">max</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求最大值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">min</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求最小值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">range</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求范围，即返回 (max, min)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">sum</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求和</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> diff<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求差分</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">prod</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求累积</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求平均值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">abs</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求绝对值，逐元素计算</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">sqrt</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求平方根，逐元素计算</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.000000</span> <span class="number">1.414214</span> <span class="number">1.732051</span> <span class="number">2.000000</span></span><br></pre></td></tr></table></figure><h3 id="2-2-数值型矩阵">2.2 数值型矩阵</h3><h4 id="2-2-1-常见操作">2.2.1 常见操作</h4><ul><li><code>t(x)</code> ：转置</li><li><code>diag(X)</code>  ：对角阵</li><li><code>%*%</code> ：矩阵乘法</li><li><code>solve(a, b)</code> ：求解 <code>a %*% X = b</code> 的解 <code>X</code></li><li><code>solve(a)</code> ：矩阵的逆</li><li><code>rowSums(x)</code> ：行方向加和</li><li><code>colSums(x)</code> ：列方向加和</li><li><code>rowMeans(x)</code> ：行平均</li><li><code>colMeans(x)</code> ：列平均</li><li><code>dist(x)</code> ：计算矩阵x行间的距离</li></ul><blockquote><p>简单的 <code>+, -, *, /</code> 仅仅是逐元素计算</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">10</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">2</span>    <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> y</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">10</span>   <span class="number">10</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">10</span>   <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> rowSums<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="operator">&gt;</span> colMeans<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.5</span> <span class="number">3.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">%*%</span> y</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">40</span>   <span class="number">40</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">60</span>   <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> solve<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="operator">-</span><span class="number">2</span>  <span class="number">1.5</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span> <span class="operator">-</span><span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> dist<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">         <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1.414214</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-apply-函数">2.2.2 apply 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply<span class="punctuation">(</span>x<span class="punctuation">,</span> margin<span class="punctuation">,</span> fun<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x: 矩阵对象</span></span><br><span class="line"><span class="comment"># margin: 1 表示对行操作，2 表示对列操作</span></span><br><span class="line"><span class="comment"># fun: 操作函数</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> z <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">z</span><br><span class="line"><span class="operator">&gt;</span> z</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">2</span>    <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> apply<span class="punctuation">(</span>z<span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="built_in">sum</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> apply<span class="punctuation">(</span>z<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> mean<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.5</span> <span class="number">3.5</span></span><br></pre></td></tr></table></figure><h3 id="2-3-逻辑型向量">2.3 逻辑型向量</h3><ul><li><code>any()</code> 函数 ：只要有一个逻辑值为 <code>TRUE</code>，返回 <code>TRUE</code></li><li><code>all()</code> 函数 ：所有逻辑值均为 <code>TRUE</code> 时，返回 <code>TRUE</code></li><li><code>which()</code> 函数 ： 返回 <code>TRUE</code> 的位置</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">,</span> <span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">any</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">all</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> which<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2-4-字符型向量">2.4 字符型向量</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741246687101.png" alt="针对字符型的操作函数"></p><h4 id="2-4-1-paste-函数">2.4.1 paste 函数</h4><ul><li><code>paste()</code> 函数可以将多个字符串连接成一个字符串</li></ul><p><code>paste(str1, str2, ..., sep = &quot; &quot;)</code> 默认以空格隔开，此时合并的是各个元素 <code>str</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> <span class="string">&quot;the&quot;</span><span class="punctuation">,</span> <span class="string">&quot;world&quot;</span><span class="punctuation">,</span> <span class="string">&quot;!&quot;</span><span class="punctuation">)</span> <span class="comment"># 默认 sep 空格隔开</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello the world !&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;file&quot;</span><span class="punctuation">,</span> <span class="string">&quot;100&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.csv&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span> <span class="comment"># 指定 sep 为空</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;file100.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;file&quot;</span><span class="punctuation">,</span> <span class="string">&quot;100&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.csv&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;file 100 .csv&quot;</span></span><br></pre></td></tr></table></figure><p><code>paste(vector1, vector2, ..., sep = &quot; &quot;, collapse = NULL)</code> 连接向量时，默认空格分割各个元素，但默认 <code>collapse</code> 为空，即不连接最后的字符型向量。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;th&quot;</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span>  <span class="comment"># collapse = NULL 返回字符类型向量</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;1th&quot;</span> <span class="string">&quot;2th&quot;</span> <span class="string">&quot;3th&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;th&quot;</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;-&quot;</span><span class="punctuation">,</span> collapse <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">)</span>  <span class="comment"># 指定 collapse 返回一个字符串</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;1-th,2-th,3-th&quot;</span></span><br></pre></td></tr></table></figure><p><code>sep</code> 代表每个元素内的连接方式，<code>collapse</code> 代表每个元素间是否连接和连接方式。</p><blockquote><p>第一个等价于 <code>paste(1:3, &quot;th&quot;, sep = &quot;&quot;)</code> ：只要有一个向量就会返回字符类型向量</p></blockquote><h4 id="2-4-2-strsplit-函数">2.4.2  strsplit 函数</h4><p><code>strsplit</code> 函数用来分割字符串</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x: 字符串</span></span><br><span class="line"><span class="comment"># split : 分割符，按照 split 分割</span></span><br><span class="line"><span class="comment"># 返回一个字符串列表</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="string">&quot;hello the world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello&quot;</span> <span class="string">&quot;the&quot;</span>   <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line">strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;h&quot;</span> <span class="string">&quot;e&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;o&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;t&quot;</span> <span class="string">&quot;h&quot;</span> <span class="string">&quot;e&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;w&quot;</span> <span class="string">&quot;o&quot;</span> <span class="string">&quot;r&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> y<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>返回的是列表，先取 <code>[[1]]</code> 把向量取出，然后 <code>[1]</code> 取出向量的第一个元素。</p></blockquote><h4 id="2-4-3-substr-函数">2.4.3 substr 函数</h4><p><code>substr</code> 函数提取子字符串</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">substr<span class="punctuation">(</span>x<span class="punctuation">,</span> from<span class="punctuation">,</span> stop<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x : 字符串</span></span><br><span class="line"><span class="comment"># from : 从 from 开始提取</span></span><br><span class="line"><span class="comment"># stop : 直到 stop 停止</span></span><br><span class="line"><span class="comment"># 返回一个字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="string">&quot;1234&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> substr<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;23&quot;</span></span><br></pre></td></tr></table></figure><p>也可对向量进行操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span> <span class="string">&quot;456&quot;</span><span class="punctuation">,</span> <span class="string">&quot;789&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> substr<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2&quot;</span> <span class="string">&quot;5&quot;</span> <span class="string">&quot;8&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-控制流">3 控制流</h2><h3 id="3-1-if-else-条件执行">3.1 if-else 条件执行</h3><p>在R语言中，<code>if-else</code> 语句用于根据条件执行不同的代码块。它是一种控制流语句，允许程序根据条件的真假选择执行不同的操作。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果条件为假，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 3</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">if</span> <span class="punctuation">(</span>x <span class="operator">&gt;</span> <span class="number">5</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="operator">+</span>     print<span class="punctuation">(</span><span class="string">&quot;x 大于 5&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">+</span> <span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="operator">+</span>     print<span class="punctuation">(</span><span class="string">&quot;x 小于或等于 5&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">+</span> <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;x 小于或等于 5&quot;</span></span><br></pre></td></tr></table></figure><ul><li>同样也具有 <code>if-else if -else</code> 语句结构</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span>condition1<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果 condition1 条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="keyword">if</span> <span class="punctuation">(</span>condition2<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 如果 condition2 条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 否则，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-ifelse-函数">3.2 ifelse 函数</h3><p><code>ifelse()</code> 对向量中的每个元素进行条件判断并返回结果，得到一个向量。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifelse<span class="punctuation">(</span>condition<span class="punctuation">,</span> statement1<span class="punctuation">,</span> statement2<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># condition 条件为 TRUE 则返回 statement1</span></span><br><span class="line"><span class="comment"># condition 条件为 FALSE 则返回 statement2</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> score <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">40</span><span class="punctuation">,</span> <span class="number">50</span><span class="punctuation">,</span> <span class="number">60</span><span class="punctuation">,</span> <span class="number">70</span><span class="punctuation">,</span> <span class="number">80</span><span class="punctuation">,</span> <span class="number">90</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> result <span class="operator">&lt;-</span> ifelse<span class="punctuation">(</span>score <span class="operator">&gt;=</span> <span class="number">60</span><span class="punctuation">,</span> <span class="string">&quot;Pass&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Fail&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> result</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Fail&quot;</span> <span class="string">&quot;Fail&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-for-循环">3.3 for 循环</h3><p><code>for</code> 循环 ：重复地执行一个语句，直到某个变量 <code>var</code> 的值不再包含在序列 <code>seq</code> 中为止。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>var <span class="keyword">in</span> seq<span class="punctuation">)</span> statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>var <span class="keyword">in</span> seq<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>i <span class="operator">%%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        string <span class="operator">&lt;-</span> paste<span class="punctuation">(</span><span class="string">&quot;i=&quot;</span><span class="punctuation">,</span> i<span class="punctuation">)</span></span><br><span class="line">        print<span class="punctuation">(</span>string<span class="punctuation">)</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出偶数</span></span><br></pre></td></tr></table></figure><h3 id="3-4-while-循环">3.4 while 循环</h3><p><code>while</code> 循环 ：重复地执行一个语句，直到条件不为真为止。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i <span class="operator">&lt;-</span> 0</span><br><span class="line"><span class="keyword">while</span> <span class="punctuation">(</span>i <span class="operator">&lt;</span> <span class="number">10</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    print<span class="punctuation">(</span>i<span class="punctuation">)</span></span><br><span class="line">    i <span class="operator">&lt;-</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 0 - 9</span></span><br></pre></td></tr></table></figure><h3 id="3-5-repeat-循环">3.5 repeat 循环</h3><p><code>repeat</code> 循环是一种无限循环结构，它会重复执行代码块，直到显式地使用 <code>break</code> 语句退出循环。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 代码块</span></span><br><span class="line">  <span class="keyword">if</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> 1</span><br><span class="line"><span class="keyword">repeat</span> <span class="punctuation">&#123;</span></span><br><span class="line">    print<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">    x <span class="operator">&lt;-</span> x <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>x <span class="operator">&gt;</span> <span class="number">5</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不断递增，直到大于 5</span></span><br></pre></td></tr></table></figure><blockquote><p>在R语言中，循环的效率可能较低。尤其是在处理大规模数据时。为了提高代码效率，R提供了许多内建函数和<code>apply</code>族函数，它们通常是基于C语言实现的，执行速度更快。R 语言提高效率的方法大多来自向量计算，使用循环会破坏这种高效的计算方式。</p></blockquote>]]></content>
    
    
    <summary type="html">本章介绍了 R 语言中常见的运算和操作（例如索引），以及针对不同数据类型的不同操作函数（例如 apply 函数）。同时介绍了 R 语言控制流（if-else 条件执行、for while repeat 循环结构）的实现。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作系统：命令帮助和快捷使用</title>
    <link href="https://blog.iskage.online/posts/50fa0735.html"/>
    <id>https://blog.iskage.online/posts/50fa0735.html</id>
    <published>2025-03-05T02:03:00.000Z</published>
    <updated>2025-03-05T02:52:34.903Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux 命令帮助和快捷使用</h1><h2 id="1-命令格式和选项">1 命令格式和选项</h2><h3 id="1-1-命令格式">1.1 命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@linux: ~$ ...</span><br></pre></td></tr></table></figure><ul><li><code>user</code> 表示当前用户</li><li><code>linux</code> 表示主机名</li><li><code>～</code> 表示当前目录，<code>~</code> 表示用户 home 目录</li><li><code>$</code> 表示用户类型，<code>$</code> 表示普通用户，<code>#</code> 表示 root 用户</li></ul><p>命令：一般一行一个命令，也允许多行，使用 <code>\</code> 表示这一行命令没有结束，多行的命令以 <code>&gt;</code> 起始。</p><p>命令格式：一般命令包括了三个部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [options] arguments</span><br></pre></td></tr></table></figure><ul><li><code>command</code> 代表命令，可以是别名、shell 内置命令、外部命令、shell 函数等</li><li><code>options</code> 代表选项，命令执行时要使用的可选的属性或者功能</li><li><code>arguments</code> 代表参数，是命令作用的对象，0 个或者多个</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="built_in">rm</span> -r ~/documents/doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># rm       是命令</span></span><br><span class="line"><span class="comment"># -r   是选项</span></span><br><span class="line"><span class="comment"># ~/documents/doc 是参数，即被执行的对象</span></span><br></pre></td></tr></table></figure><h3 id="1-2-命令格式：选项-options">1.2 命令格式：选项 [options]</h3><p>选项根据连字符 <code>-</code> 个数分为<strong>短选项</strong>和<strong>长选项</strong>：</p><ul><li>短选项：以 <code>-</code> 开始，紧跟单个字符。当选项无须参数时，可以合并单字符。</li><li>长选项：以 <code>--</code> 开始，紧跟单词。后跟参数采用 <code>--option=value</code> 等号前后都不能有空格。</li></ul><blockquote><p><em>几乎</em>所有命令都有 <code>--help</code> 和 <code>--version</code> 选项。</p></blockquote><h2 id="2-联机手册-man-命令">2 联机手册 man 命令</h2><p>对于外部命令，我们需要查看帮助文档。</p><ul><li>软件文档：一般存放在 <code>/usr/share/doc</code> 中，可通过 <code>less</code>、<code>zless</code> （查看压缩过的文本文件）和 <code>web</code> 浏览器（查看html文件）查看。</li><li><code>man</code> 命令查看联机手册，采用 <code>less</code> 分页查看。</li></ul><p>联机手册可以理解为一些命令的帮助文档，一般包含了：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740989011537.png" style="zoom:33%;" /><ul><li><code>man cmd</code> ：查看名字为 cmd 的联机手册</li><li><code>whatis cmd</code> ：在索引库中查找命令名与 cmd 匹配的条目，并且仅仅显示这些条目的一句话的 NAME 信息</li><li><code>apropos cmd</code> ：在索引库中，基于命令名以及 NAME 部分的内容，查找与 cmd 匹配的条目，仅仅显示 NAME 信息</li></ul><h3 id="2-1-已知命令使用-man-查看帮助">2.1 已知命令使用 man 查看帮助</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man cmd  <span class="comment"># 查看 cmd 命令的联机手册 </span></span><br></pre></td></tr></table></figure><ul><li><code>-f</code> 查看名字匹配的命令的 NAME 部分的内容（whatis 提供类似更全面的功能）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -f <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">whatis <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> (1)               - list directory contents</span><br></pre></td></tr></table></figure><ul><li><code>-k</code> 搜索 NAME 部分，列出匹配的命令（apropos 提供类似更全面的功能）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -k <span class="string">&#x27;list directory contents&#x27;</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">apropos –r <span class="string">&#x27;list directory contents&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740990211922.png" style="zoom:50%;" /><h3 id="2-2-whatis-通过匹配查找命令">2.2 whatis 通过匹配查找命令</h3><ul><li><code>whatis</code> 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whatis [options] name</span><br><span class="line"></span><br><span class="line">-e, --exact  : 采用精确匹配，默认</span><br><span class="line">-r, --regex  : 正则表达式匹配，命令名部分匹配</span><br><span class="line">-w, --wildcard   : 通配符匹配</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whatis -e <span class="built_in">ls</span>     <span class="comment"># 精确匹配 ls 与 man -f ls 等价</span></span><br><span class="line"></span><br><span class="line">whatis -r mkdi   <span class="comment"># 部分匹配，包含 mkdi 即可，会查找出 mkdir</span></span><br><span class="line"></span><br><span class="line">whatis -w <span class="string">&#x27;m*dir&#x27;</span><span class="comment"># 匹配 m 开始，dir 结束的命令</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740990706834.png" style="zoom:50%;" /><h3 id="2-3-apropos-通过-NAME-匹配命令">2.3 apropos 通过 NAME 匹配命令</h3><ul><li><code>apropos</code> 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apropos [OPTION] keywords</span><br><span class="line"></span><br><span class="line">-r, --regex         : 默认，采用正则表达式，模糊匹配</span><br><span class="line">-e, --exact    : 采用精确匹配</span><br><span class="line">-w, --wildcard : 采用通配符匹配</span><br><span class="line">-a, --and : 匹配所有的关键字，缺省匹配任意一个</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apropos -r <span class="string">&#x27;list directory contents&#x27;</span></span><br><span class="line"></span><br><span class="line">apropos -e <span class="string">&#x27;list directory contents on&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740991383960.png" style="zoom:50%;" /><h2 id="3-内置命令帮助">3 内置命令帮助</h2><h3 id="3-1-help-查看内置命令帮助">3.1 help 查看内置命令帮助</h3><p><strong>外部命令</strong>：可独立运行的可执行程序</p><ul><li>例如 <code>ls</code> 可执行程序位于 <code>/usr/bin/ls</code></li></ul><p><strong>内置命令</strong>：当前正在执行的终端 shell 所提供的命令</p><ul><li><code>help</code> 内置命令可查看 shell 内置命令相应的帮助信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> [options] [arguments]</span><br><span class="line"></span><br><span class="line">-s : 仅查看语法</span><br><span class="line">-m : 以联机手册形式查看，即采用 less 分页方式查看帮助文档</span><br><span class="line"></span><br><span class="line">[arguments] 可以指定特定的命令</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> -s <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 </span></span><br><span class="line"><span class="built_in">cd</span>: <span class="built_in">cd</span> [-L|[-P [-e]] [-@]] [<span class="built_in">dir</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> <span class="keyword">for</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="keyword">for</span>: <span class="keyword">for</span> NAME [<span class="keyword">in</span> WORDS ... ] ; <span class="keyword">do</span> COMMANDS; <span class="keyword">done</span></span><br><span class="line">    Execute commands <span class="keyword">for</span> each member <span class="keyword">in</span> a list.</span><br><span class="line">    </span><br><span class="line">    The `<span class="keyword">for</span><span class="string">&#x27; loop executes a sequence of commands for each member in a</span></span><br><span class="line"><span class="string">    list of items.  If `in WORDS ...;&#x27;</span> is not present, <span class="keyword">then</span> `<span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span><span class="string">&#x27; is</span></span><br><span class="line"><span class="string">    assumed.  For each element in WORDS, NAME is set to that element, and</span></span><br><span class="line"><span class="string">    the COMMANDS are executed.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Exit Status:</span></span><br><span class="line"><span class="string">    Returns the status of the last command executed.</span></span><br></pre></td></tr></table></figure><h3 id="3-2-info-查看任意命令">3.2 info 查看任意命令</h3><p>针对不同的命令，查看帮助文档却要用不同的指令，这显然是很繁琐的。所以，<code>info</code> 提供了简单的查找方式。直接通过 <code>info cmd</code> 即可查看 <code>cmd</code> 的联机手册。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZuf695p5vw7py8urm4h4fZ:~# <span class="built_in">help</span> <span class="built_in">ls</span></span><br><span class="line">-bash: <span class="built_in">help</span>: no <span class="built_in">help</span> topics match `<span class="built_in">ls</span><span class="string">&#x27;.  Try `help help&#x27;</span> or `man -k <span class="built_in">ls</span><span class="string">&#x27; or `info ls&#x27;</span>.</span><br><span class="line">root@iZuf695p5vw7py8urm4h4fZ:~# info <span class="built_in">ls</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><code>help</code> 查看不了 <code>ls</code> 这个外部命令，但是 <code>info ls</code> 却可以直接跳转进 <code>ls</code> 的联机手册。</p></blockquote><ul><li><code>&lt;Space&gt;</code> 查看下一页</li><li><code>&lt;Delete&gt;</code> 查看上一页</li><li><code>q</code> 退出 <code>info</code> 界面</li><li><code>H</code> 查看 <code>info</code> 所有命令</li><li><code>h</code> 进入 <code>info</code> 教程</li></ul><h2 id="4-命令历史">4 命令历史</h2><p>用户输入的命令会被保存到历史列表，文件存放于 <code>~/.bash_history</code> ，下次打开终端 shell 时也会去  <code>~/.bash_history</code> 加载。</p><ul><li>如果当前命令与上一个命令完全一致，不会加入</li><li>以空白字符开始的命令，不会加入（所以，可以通过先键入空格，而后输入命令的方式，使得命令不被记录）</li></ul><h3 id="4-1-history-命令">4.1 history 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> [n]</span><br></pre></td></tr></table></figure><p><code>history</code> 命令查看命令历史列表，<code>n</code> 指定最近 n 条记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> -c <span class="comment"># 清楚历史记录</span></span><br><span class="line"><span class="built_in">history</span> -r <span class="comment"># 从 history 文件加载历史记录</span></span><br><span class="line"><span class="built_in">history</span> -w (<span class="built_in">history</span> -a) <span class="comment"># 将历史记录写入/附加到历史记录文件</span></span><br></pre></td></tr></table></figure><h3 id="4-2-历史记录扩展">4.2 历史记录扩展</h3><table><thead><tr><th>调用历史记录的命令</th><th>作用</th></tr></thead><tbody><tr><td><code>!num</code></td><td>执行编号 num 的历史命令</td></tr><tr><td><code>!!</code></td><td>执行最近一次历史命令，等价于 <code>!-1</code></td></tr><tr><td><code>!str</code></td><td>执行最近一次以 str 开始的命令</td></tr><tr><td><code>!?str</code></td><td>执行最近一次包含 str 的命令</td></tr><tr><td><code>!$</code></td><td>上一条命令的最后一个单词</td></tr><tr><td><code>!*</code></td><td>上一个命令的所有参数</td></tr></tbody></table><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!l</span><br><span class="line"><span class="comment"># 如果最近有 ls 命令，则会执行 ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!?<span class="built_in">dir</span></span><br><span class="line"><span class="comment"># 如果最近有 mkdir 名，则会执行 mkdir</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!$</span><br><span class="line"><span class="comment"># 如果有命令 ls ./ 则会返回 ./</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!*</span><br><span class="line"><span class="comment"># 如果有命令 ls -a 则会返回 -a</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>!</code> 后均无空格</p></blockquote><h2 id="5-自动完成">5 自动完成</h2><p>输入命令的一部分，按 <code>&lt;Tab&gt;</code> 键或 <code>&lt;Ctrl&gt; + I</code> 触发自动完成功能。如果有多个可选项或者没有可选项时会发出提示声表示有歧义。</p><p>例如：下例按下 Tab 键后，会发出提示音，再按一下，则会返回所有可能结果（文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> .bash&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">.bash_history  .bashrc </span><br></pre></td></tr></table></figure><p>例如：按下 Tab 键后，会发出提示音，再按一下，则会返回所有可能结果（命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">ls</span>lsb_releaselscpulsinitramfslslockslsmemlsnslspcilsusblsattrlsblklshwlsipclsloginslsmodlsoflspgpot</span><br></pre></td></tr></table></figure><h2 id="6-命令别名">6 命令别名</h2><h3 id="6-1-alias-查看命令别名">6.1 alias 查看命令别名</h3><p>有时设置一些命令的别名能方便命令的输入。可以使用 <code>alias</code> 查看别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>这说明了输入 <code>l</code> 相当于输入 <code>ls -CF</code> ；输入 <code>la</code> 相当于输入 <code>ls -A</code></p></blockquote><h3 id="6-2-自定义别名">6.2 自定义别名</h3><ul><li>可以进入 <code>~/.bashrc</code> 中修改（永久修改）【推荐单独创建文件 <code>.bash_aliases</code>】</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740996227062.png" alt="./bashrc 文件内容" style="zoom:30%;" /><p>在用户目录下创建文件 <code>.bash_aliases</code> 写入例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_aliases</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd alias</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># history alias</span></span><br><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br></pre></td></tr></table></figure><p>然后 <code>source .bashrc</code> 之后，便可永久保存别名。</p><ul><li>也可以直接命令输入（不会保存）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> &lt;别名&gt;=<span class="string">&#x27;&lt;完整命令&gt;&#x27;</span>  <span class="comment"># = 无空格</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>设置 <code>h</code> 扩展为 <code>history 20</code> ；<code>..</code> 扩展为 <code>cd ..</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> h</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-取消别名与不进行别名扩展">6.3 取消别名与不进行别名扩展</h3><ul><li>取消别名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unalias</span> &lt;别名&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>unalias -a</code> 取消所有别名</p></blockquote><ul><li><code>\</code> 表示不适用别名扩展</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="7-终端组合键">7 终端组合键</h2><h3 id="7-1-终端-shell-组合键">7.1 终端 shell 组合键</h3><table><thead><tr><th>组合键</th><th>含义</th></tr></thead><tbody><tr><td><code>Ctrl + D</code></td><td>EOF 输入结束</td></tr><tr><td><code>Ctrl + C</code></td><td>中断进程</td></tr><tr><td><code>Ctrl + \</code></td><td>退出进程，对应的内存状态保存到 core 文件</td></tr><tr><td><code>Ctrl + Z</code></td><td>发送终端停止信号，前台作业暂停并放入后台</td></tr><tr><td><code>Ctrl + H</code> 或 <code>&lt;Delete&gt;</code></td><td>删除光标前的最后一个字符</td></tr><tr><td><code>Ctrl + W</code></td><td>删除光标前的最后一个单词，以空格为分割</td></tr><tr><td><code>Ctrl + U</code></td><td>删除这一行</td></tr></tbody></table><blockquote><p><code>fg</code> 命令：将后台作业切换到前台执行；<code>bg</code> 命令：将暂停的作业切换到后台执行</p></blockquote><p>使用命令，可以查看这些组合键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">speed 9600 baud; rows 35; columns 130; line = 0;</span><br><span class="line">intr = ^C; quit = ^\; erase = ^?; <span class="built_in">kill</span> = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S;</span><br><span class="line">susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; discard = ^O; min = 1; <span class="keyword">time</span> = 0;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输入 <code>Ctrl + V</code> 再按 <code>Ctrl + </code> 得到字符 <code>^</code></p><h3 id="7-2-bash-组合键">7.2 bash 组合键</h3><p>bash 使用 <code>readline</code> 库新增其他组合键。</p><table><thead><tr><th>快捷键</th><th>含义</th></tr></thead><tbody><tr><td><code>Ctrl + A</code></td><td>光标移动到行首</td></tr><tr><td><code>Ctrl + E</code></td><td>光标移动到行尾</td></tr><tr><td><code>Ctrl + L</code></td><td>清屏并移动光标到左上角，等价于 <code>clear</code> 命令</td></tr><tr><td><code>Ctrl + _</code></td><td>撤回之前的操作</td></tr><tr><td><code>Ctrl + K</code></td><td>剪切光标处到结尾的字符</td></tr><tr><td><code>Ctrl + Y</code></td><td>在光标处粘贴</td></tr></tbody></table><p>配置文件位于 <code>/etc/inputrc</code> ，建议在 <code>~/.inputrc</code> 中配置。</p>]]></content>
    
    
    <summary type="html">本文介绍了在 Linux 系统中如何查找相关命令和命令的帮助文档。如何命名和管理命令的别名以及一些组合键的使用。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="ssh" scheme="https://blog.iskage.online/tags/ssh/"/>
    
    <category term="远程连接" scheme="https://blog.iskage.online/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作系统：ssh 远程连接服务器和基本指令</title>
    <link href="https://blog.iskage.online/posts/e0a5070b.html"/>
    <id>https://blog.iskage.online/posts/e0a5070b.html</id>
    <published>2025-03-03T07:03:00.000Z</published>
    <updated>2025-03-03T07:10:35.419Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux 操作系统概述</h1><p>本文介绍了使用 ssh 进行 Linux 系统服务区的远程访问与一些简单的命令。服务器可以去往各大服务器商购买，或者在本地安装虚拟机，针对 mac 用户 Linux 操作系统的指令大多可以直接使用，windows 系统的 wsl 或 powershell 也满足 Linux 的习惯。</p><h2 id="1-Linux-的远程访问-ssh">1 Linux 的远程访问 ssh</h2><h3 id="1-1-本地生成-ssh-密钥">1.1 本地生成 ssh 密钥</h3><p>在本地用户目录 <code>~</code> 下终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><blockquote><p>会要求设置密码，可以设置也可以不设置，这个密码只是未来使用 ssh 连接时需要输入的。</p></blockquote><p>便会在用户目录下生成文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">├── id_rsa</span><br><span class="line">└── id_rsa.pub</span><br></pre></td></tr></table></figure><p>其中 <code>id_rsa</code> 为私钥，不可泄漏；<code>id_rsa.pub</code> 为公钥，未来将放置在其他主机上的。</p><h3 id="1-2-服务器存储公钥">1.2 服务器存储公钥</h3><p>在需要登陆的服务器用户目录下创建文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">└── authorized_keys</span><br></pre></td></tr></table></figure><p>将本地主机的公钥 <code>id_rsa.pub</code> 内容复制到远程服务器 <code>.ssh/authorized_keys</code> 文件中。</p><h3 id="1-3-登陆远程服务器">1.3 登陆远程服务器</h3><p>此时就可以通过 ssh 建立安全的访问。</p><ul><li>方式一：直接输入远程的 ip 地址</li></ul><p>在本地主机终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh@&lt;ip地址&gt;</span><br></pre></td></tr></table></figure><p>之后即可通过 ssh 登陆。但相对复杂，推荐使用本地配置登陆。</p><ul><li>方式二：自定义配置文件 <code>config</code></li></ul><p>在本地主机的 <code>~/.ssh/</code> 目录下创建配置文件 <code>config</code> ，<code>.ssh/</code> 目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">├── config</span><br><span class="line">├── id_rsa</span><br><span class="line">└── id_rsa.pub</span><br></pre></td></tr></table></figure><p>在 <code>config</code> 文件中写入配置</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># config 文件，以阿里云服务器为例</span><br><span class="line"></span><br><span class="line"># Aliyun Server</span><br><span class="line">Host &lt;别名&gt;</span><br><span class="line">    HostName &lt;公网ip&gt;</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><blockquote><p><code>#</code> 表示注释，<code>Host</code> 后的可以自定义别名，<code>Hostname</code> 后填入服务器的 ip 地址，<code>User</code> 表示想要登陆的远程服务器用户，例如 <code>root</code> 表示直接登陆到管理员用户，<code>Port 22</code> 表示通过端口 22 连接。</p></blockquote><p>以上配置完成后，直接在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;别名&gt;</span><br></pre></td></tr></table></figure><p>即可登陆。</p><h3 id="1-4-known-hosts-文件">1.4 known_hosts 文件</h3><p>有时，当远端服务器也使用了 <code>ssh-keygen</code> 产生密钥时，本地 <code>.ssh/</code> 目录下会有 <code>known_hosts</code> 文件，其保存了远方 ssh 服务器的公钥，确认是否是之前连接的服务器。</p><h3 id="1-5-文件传输-ssh-cat-或-scp">1.5 文件传输 ssh + cat 或 scp</h3><p>当按照上面配置完成了 ssh 和远程服务器别名后，可以进行快捷的文件传输。</p><ul><li>对于小文件，可以直接使用 <code>cat + ssh</code> 的方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/a.txt | ssh &lt;别名&gt; <span class="string">&#x27;cat &gt; /root/file.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>将本地 <code>~/a.txt</code> 文件复制传输到远程服务器 <code>&lt;别名&gt;</code> 的 <code>/root/file.txt</code> 文件。</p><ul><li>对于大文件，可以使用 <code>scp</code> 递归传输文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/localFile &lt;别名&gt;:/root</span><br></pre></td></tr></table></figure><p>将本地的 <code>~/localFile</code> 文件夹传输到远程服务器 <code>&lt;别名&gt;</code> 的 <code>/root</code> 路径下。</p><h2 id="2-Linux-的简单使用">2 Linux 的简单使用</h2><h3 id="2-1-登录后的信息">2.1 登录后的信息</h3><p>每次登陆 Linux 系统后，会显示 <code>motd</code> (Message of the day) 以及上次登陆的时间和地点。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740976579623.png" style="zoom:23%;" /><ul><li><code>last</code> 命令查看当前或指定用户以前的成功登录情况，来源于 <code>/var/log/wtmp</code></li></ul><h3 id="2-2-注销">2.2 注销</h3><p>退出 Linux 操作系统的文本终端，可以使用：</p><ul><li><code>logout</code></li><li><code>exit</code></li><li>组合 <code>Ctrl + D</code> 退出，代表 <code>EOF (End Of File)</code></li></ul><p>如果不希望按下组合键一次就退出，可以设置 <code>IGNOREEOF</code> ，以免误触</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> IGNOREEOF=3 &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>如此，就需要按压 3 次 <code>Ctrl + D</code> 才能退出。如果只按一次，则会出现以下情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@&lt;name&gt;:~# </span><br><span class="line">Use <span class="string">&quot;logout&quot;</span> to leave the shell.</span><br></pre></td></tr></table></figure><blockquote><p>或者进入用户目录的 <code>.bashrc</code> 文件添加一行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 .bashrc 文件，输入 I 进入编辑模式</span></span><br><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc 文件，添加一行</span></span><br><span class="line">IGNOREEOF=3</span><br></pre></td></tr></table></figure><p>键入 <code>esc</code> 退出编辑模式，输入 <code>:wq</code> 保存并退出。然后在终端输入以下指令以永久生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><h3 id="2-3-关机和重启">2.3 关机和重启</h3><p>在命令行可通过【不推荐】</p><ul><li><code>poweroff</code> 立刻关机并断电</li><li><code>halt</code> 立刻关机</li><li><code>reboot</code> 立刻重启</li></ul><p>【推荐】使用 <code>shutdown</code> 命令指定时间进行关机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [OPTIONS...] [TIME] [WALL...]</span><br></pre></td></tr></table></figure><ul><li><code>[TIME]</code> 填入命令执行的时间：例如 <code>+m</code> 或 <code>m</code> 表示 m 分钟后执行；<code>now</code> 表示立马执行；不指定则默认 1 分钟后执行。或者采用 <code>hh:mm</code> 表示在 hh 时 mm 分时刻执行。</li><li><code>WALL...</code> 要发送的消息，可不传递。</li><li><code>[OPTIONS...]</code> 可项的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 查看 shutdown 的帮助信息</span><br><span class="line">--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">2. 关机（默认，可省略）</span><br><span class="line">-P 或 -h 或 --poweroff</span><br><span class="line"></span><br><span class="line">3. 重启</span><br><span class="line">-r 或 --reboot</span><br><span class="line"></span><br><span class="line">4. 取消前面的命令</span><br><span class="line">-c</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r 10  <span class="comment"># 十分钟后重启</span></span><br><span class="line">Reboot scheduled <span class="keyword">for</span> Mon 2025-03-03 14:08:42 CST, use <span class="string">&#x27;shutdown -c&#x27;</span> to cancel.</span><br><span class="line">shutdown -c   <span class="comment"># 取消操作</span></span><br><span class="line"></span><br><span class="line">shutdown   <span class="comment"># 默认 1 分钟后关机并断电</span></span><br><span class="line">shutdown -c   <span class="comment"># 取消操作</span></span><br><span class="line"></span><br><span class="line">shutdown -r now <span class="comment"># 立即重启</span></span><br></pre></td></tr></table></figure><h3 id="2-4-查看系统信息">2.4 查看系统信息</h3><ul><li><code>hostname</code> ：查看主机的名字（主机名存储在文件 <code>/etc/hostname</code> 中）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@&lt;主机名&gt;:~# hostname</span><br><span class="line">&lt;主机名&gt;</span><br></pre></td></tr></table></figure><ul><li><code>uname</code> ：可以查看更多的系统信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-a  : 显示所有信息</span><br><span class="line">-s  : 内核名，例如 Linux 或 Darwin (MacOS)</span><br><span class="line">-r  : 内核发行版本号</span><br><span class="line">-n  : 节点名</span><br><span class="line">-v  : 内核版本</span><br><span class="line">-m  : 主机硬件架构</span><br><span class="line">-o  : 操作系统，结果为 GNU/Linux 等</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982042004.png" alt=""></p><ul><li><code>lsb_release</code> ：查看 LSB (Linux Standard Base) 一些 Linux 版本信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a  : 查看所有信息 </span><br><span class="line">-i  : 查看发行者 ID</span><br><span class="line">-d  : 发行版描述 </span><br><span class="line">-r  : 发行版发行号 </span><br><span class="line">-c  : 发行版代号</span><br><span class="line">-s  : 短格式，不包括前面的头部部分</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982156204.png" alt=""></p><h3 id="2-5-查看用户信息">2.5 查看用户信息</h3><ul><li><code>whoami</code> ：登录用户名</li><li><code>id</code> ：查看当前用户（也可查看其他用户）的用户和组信息</li><li><code>who</code> ：查看当前系统正在登录的用户信息</li><li><code>uptime</code> ：查看系统运行时间和负载等信息</li><li><code>w</code> ：<code>uptime</code> 和 <code>who</code> 结合的功能，还可查看用户在做什么</li><li><code>tty</code> ：查看当前所连接的终端设备文件</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982352680.png" style="zoom:33%;" /><h3 id="2-6-阅读文本文件">2.6 阅读文本文件</h3><ul><li><code>cat</code> ：阅读文本文件，不分页</li><li><code>more</code> ：阅读文本文件，分页</li><li><code>less</code> ：与 <code>more</code> 相似，但功能更多</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">less &lt;file&gt;</span><br><span class="line"></span><br><span class="line">-- 显示一页内容，然后等待用户的输入 --</span><br><span class="line">h    : 显示帮助 </span><br><span class="line">q        : 退出</span><br><span class="line">&lt;Space&gt; or f  : 查看下一页 </span><br><span class="line">b   : 查看上一页</span><br><span class="line">/xxx          : 向前搜索 xxx </span><br><span class="line">n             : 重复上次搜索（方向不变）</span><br><span class="line">?xxx          : 向后搜索 xxx </span><br><span class="line">N             : 重复上次搜索，但是反方向</span><br><span class="line">:n            : 切换到下一个文件 </span><br><span class="line">:p            : 切换到前一个文件</span><br><span class="line">v   : 采用相应的编辑器来编辑本文件</span><br></pre></td></tr></table></figure><h3 id="2-7-文件编辑">2.7 文件编辑</h3><p>例如：<code>vim</code> 或 <code>nano</code></p><p>使用 <code>nano</code> （<code>Meta</code> 键一般为 <code>Alt</code> 键）</p><ul><li><code>Ctrl + O</code> 保存</li><li><code>Ctrl + X</code> 退出，如有修改，会询问是否保存</li><li><code>Ctrl + G</code> 查看帮助</li><li><code>Shift + &lt;- or -&gt;</code> 使用 Shift 加键盘向左/右，可以选定一段文字</li><li><code>Ctrl + K</code> 剪切</li><li><code>Ctrl + U</code> 粘贴</li><li><code>Ctrl + W</code> 搜索文本</li><li><code>Meta + 6</code> 复制</li><li><code>Meta + U</code> 撤销上次操作</li><li><code>Meta + E</code> 恢复上次撤销的操作</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740983326079.png" style="zoom:23%;" />]]></content>
    
    
    <summary type="html">本文介绍了使用 ssh 进行 Linux 系统服务区的远程访问与一些简单的命令。服务器可以去往各大服务器商购买，或者在本地安装虚拟机，针对 mac 用户 Linux 操作系统的指令大多可以直接使用，windows 系统的 wsl 或 powershell 也满足 Linux 的习惯。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="ssh" scheme="https://blog.iskage.online/tags/ssh/"/>
    
    <category term="远程连接" scheme="https://blog.iskage.online/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>递归算法</title>
    <link href="https://blog.iskage.online/posts/5f7017e8.html"/>
    <id>https://blog.iskage.online/posts/5f7017e8.html</id>
    <published>2025-03-02T07:43:00.000Z</published>
    <updated>2025-03-02T07:36:06.653Z</updated>
    
    <content type="html"><![CDATA[<h1>递归算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><p><strong>递归</strong>：通过一个函数在执行过程中一次或者多次调用其本身，或者通过一种数据结构在其表示中依赖于相同类型的结构更小的实例。简而言之：递归就是自己调用自己。</p><p>本文依据四个例子介绍递归算法的原理和如何搭建：</p><ul><li>阶乘函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></li><li>标尺刻度（分形）</li><li>二分查找</li><li>计算机文件目录的嵌套</li></ul><p>除此之外，还有一些常见的递归例子：递归求和、逆置序列、递归产生斐波那契数列、求和谜题等。以及什么是尾递归，如何将尾递归转换为非递归算法。</p><h2 id="1-常见递归案例">1 常见递归案例</h2><h3 id="1-1-阶乘函数">1.1 阶乘函数</h3><p>由阶乘函数的定义，我们可知</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mi>n</mi><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>×</mo><mo>⋯</mo><mo>×</mo><mn>2</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n! = n \times (n-1) \times (n-2) \times \cdots \times 2 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 时，我们规定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0! = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>根据阶乘的定义，可以写出函数的递推形式，如果我们构造了一个函数 <code>factorial()</code> 应该满足</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">factorial(n) = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    factorial(n) = n * factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>于是我们可以得到阶乘函数的递归算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">4</span>))  <span class="comment"># 24</span></span><br></pre></td></tr></table></figure><ul><li>迭代是通过函数的递归实现的，每次进入函数，查看 <code>n</code> 是否为 <code>0</code> ，如果不为零，则返回 <code>n * f(n)</code> 如此反复调用，直到 <code>n = 0</code> 时才真正开始进行计算。</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740813281185.png" style="zoom:50%;" /><h3 id="1-2-标尺刻度（分形）">1.2 标尺刻度（分形）</h3><p>对于一个刻度尺，每刻度之间距离减半时，刻度线长度也减小。例如：0 - 1 cm 的刻度间，假设 0 和 1 刻度线长 4 个单位，于是有 0.5 cm 刻度线长 3 个单位，0.25 cm 刻度线长 2 个单位，以此类推。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740813701382.png" style="zoom:47%;" /><p>我们定义函数 <code>draw_ruler()</code> ，用来模仿这种分形的过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_line</span>(<span class="params">tick_length, tick_label=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制刻度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        tick_length (int): 刻度长度，即 &#x27;-&#x27; 字符个数</span></span><br><span class="line"><span class="string">        tick_label (str, optional): 刻度数，不重要. Defaults to &#x27;&#x27;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    line = <span class="string">&#x27;-&#x27;</span> * tick_length</span><br><span class="line">    <span class="keyword">if</span> tick_label:</span><br><span class="line">        line += <span class="string">&#x27; &#x27;</span> + tick_label</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_interval</span>(<span class="params">center_length</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录分型个数的辅助函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        center_length (int): 负责传入刻度长度给 draw_line 函数，即 &#x27;-&#x27; 字符个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> center_length &gt; <span class="number">0</span>:</span><br><span class="line">        draw_interval(center_length - <span class="number">1</span>)</span><br><span class="line">        draw_line(center_length)</span><br><span class="line">        draw_interval(center_length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_ruler</span>(<span class="params">len_of_ruler, num_scale</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制刻度尺</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        len_of_ruler (int): 刻度尺长度，即最大刻度</span></span><br><span class="line"><span class="string">        num_scale (int): 最大刻度的长度，即最大刻度的 &#x27;-&#x27; 字符个数，决定了分形次数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    draw_line(num_scale, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + len_of_ruler):</span><br><span class="line">        draw_interval(num_scale - <span class="number">1</span>)</span><br><span class="line">        draw_line(num_scale, <span class="built_in">str</span>(j))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">draw_ruler(len_of_ruler=<span class="number">1</span>, num_scale=<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 0</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">--- 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>细节 &amp; 原理</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740900901780.png" alt=""></p><p>每一个 <code>draw_interval(n)</code> 下都嵌套着一个结构为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">draw_interval(n)</span><br><span class="line">├── draw_interval(n-<span class="number">1</span>)  <span class="comment"># 继续嵌套，直到 n = 0</span></span><br><span class="line">│ ├── ...</span><br><span class="line">├──draw_line(n)        <span class="comment"># 真正画刻度的函数 输出 &#x27;-&#x27; 字符</span></span><br><span class="line">└──draw_interval(n-<span class="number">1</span>)</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure><h3 id="1-3-二分查找">1.3 二分查找</h3><p>二分查找是一种高效的查找序列元素的算法。当序列无序时，通过循环遍历的方式查找某一个元素，复杂度为 <code>O(n)</code> 。但当<strong>序列有序</strong>时，可以使用二分查找。</p><ul><li>二分查找的想法</li></ul><p>需要在一个有序序列中查找 <code>x</code> ，首先将序列分半，检查 <code>x</code> 落入哪个区间，例如落入左边，则抛去右边，在左边继续分半查找。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">left = <span class="number">0</span>           <span class="comment"># 最左边下标</span></span><br><span class="line">right = <span class="built_in">len</span>(seq) - <span class="number">1</span>        <span class="comment"># 最右边下标</span></span><br><span class="line"></span><br><span class="line">mid = (left + right) // <span class="number">2</span>   <span class="comment"># 计算中间下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == seq[mid]:</span><br><span class="line">    <span class="comment"># 完成</span></span><br><span class="line"><span class="keyword">elif</span> x &lt; seq[mid]:</span><br><span class="line">    <span class="comment"># 到左半寻找</span></span><br><span class="line">    <span class="comment"># 调用函数，更新参数</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 到右半寻找</span></span><br><span class="line">    <span class="comment"># 调用函数，更新参数</span></span><br></pre></td></tr></table></figure><ul><li>复杂度</li></ul><p>每次递归调用，序列长度为 <code>right - left + 1</code> 。而二分查找每次调用后，传入 <code>mid = (left + right) // 2</code> ，序列长度减半 <code>(right - left + 1) / 2</code> 。于是有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Algorithms end when</mtext><mspace width="1em"/><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo>∼</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{Algorithms end when} \quad \frac{n}{2^k} \sim 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord text"><span class="mord">Algorithms end when</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∼</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">k \sim \log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 为操作数（调用递归次数）。故复杂度为 <code>O(log n)</code></p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, target, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &gt; right:</span><br><span class="line">        <span class="comment"># 全遍历后仍然没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> target == data[mid]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> target &lt; data[mid]:</span><br><span class="line">        <span class="keyword">return</span> binary_search(data, target, left, mid - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_search(data, target, mid + <span class="number">1</span>, right)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">33</span>, <span class="number">37</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(seq, target=<span class="number">22</span>, left=<span class="number">0</span>, right=<span class="built_in">len</span>(seq) - <span class="number">1</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740821735351.png" alt=""></p><h3 id="1-4-文件系统">1.4 文件系统</h3><p>一般主机的文件目录大致为 <code>a/b/c.py</code> 其中 <code>a/</code> <code>b/</code> 表示其为文件夹，而有文件后缀的 <code>c.py</code> 则为文件。下面编写一个递归算法，计算某个目录下所有文件（文件夹）各自的存储大小。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_usage</span>(<span class="params">path</span>)</span><br><span class="line">    Input: 文件路径</span><br><span class="line">    Output: 存储空间总和</span><br><span class="line"></span><br><span class="line">    total = size(path)  <span class="comment"># 当前目录的大小</span></span><br><span class="line">    <span class="keyword">if</span> path 是文件夹:</span><br><span class="line">        <span class="keyword">for</span> child_path <span class="keyword">in</span> path  <span class="comment"># 查看父目录下的子目录</span></span><br><span class="line">            total += disk_usage(child_path)  <span class="comment"># 递归</span></span><br><span class="line"><span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><ul><li><code>os</code> 模块</li></ul><p><code>os.path.getsize(path)</code> 获取 <code>path</code> 路径文件的大小或文件夹本身的大小（针对文件夹，只返回文件夹自身大小，不包含其下文件和其他子文件夹的大小）</p><p><code>os.path.isdir(path)</code> 判断 <code>path</code> 是否是一个合法且存在的路径</p><p><code>os.listdir(path)</code> 返回一个列表，列表元素为 <code>path</code> 路径下所有文件和文件夹的名称</p><p><code>os.path.join(path, filename)</code> 根据传入的字符串组合成一条合法的路径</p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_usage</span>(<span class="params">path</span>):</span><br><span class="line">    total = os.path.getsize(path)  <span class="comment"># 当前目录自身的大小</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">            <span class="comment"># 遍历其下子目录的名称</span></span><br><span class="line">            child_path = os.path.join(path, filename)</span><br><span class="line">            total += disk_usage(child_path)  <span class="comment"># 递归调用 计算子目录的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;  &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total, path))</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.path.getsize(os.getcwd()))</span><br><span class="line"><span class="comment"># 128 代表目录自身的大小，不包含其下子目录</span></span><br><span class="line"></span><br><span class="line">total = disk_usage(os.getcwd())      <span class="comment"># os.getcwd() 获取当前目录路径</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2262 /Users/&lt;username&gt;/dsa-notes/lec3_recursion/code03_recursion.py</span></span><br><span class="line"><span class="string">6326 /Users/&lt;username&gt;/dsa-notes/lec3_recursion/note03_递归.md</span></span><br><span class="line"><span class="string">8716 /Users/&lt;username&gt;/dsa-notes/lec3_recursion  # 父目录</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"><span class="comment"># 8716</span></span><br></pre></td></tr></table></figure><h2 id="2-递归分类">2 递归分类</h2><ul><li>如果一个递归最多调用一次，称之为<strong>线性递归</strong></li><li>如果一个递归可以同时进行两次调用，称之为<strong>二路递归</strong></li><li>如果一个递归可以同时进行三次及以上调用，称之为<strong>多重递归</strong></li></ul><h3 id="2-1-线性递归">2.1 线性递归</h3><p>递归函数内可能有多个递归调用，但函数内必须最多只能执行一次递归调用。例如：</p><ul><li>阶乘的递归式定义</li><li>二分查找</li></ul><blockquote><p>二分查找虽然有两处出现了递归调用，但因为处于 <code>if - else</code> 语句中，实际最多只执行一次，故仍然是线性递归</p></blockquote><h4 id="2-1-1-递归求和">2.1.1 递归求和</h4><p>递归求和和阶乘的实现如出一辙，都是采用递推的方式构建。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LinearSum(A, n):</span><br><span class="line">Input: 序列和求和长度</span><br><span class="line">Output: 序列前 n 项和</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> A[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> LinearSum(A, n - <span class="number">1</span>) + A[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_sum</span>(<span class="params">seq: <span class="built_in">list</span>, n: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> linear_sum(seq, n - <span class="number">1</span>) + seq[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归求前 n 项和</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(linear_sum(seq, <span class="number">3</span>))  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-逆置序列">2.1.2 逆置序列</h4><p>对于输入一个序列，将其第一项和最后一项交换，第二项与倒数第二项交换，以此类推从而得到逆置后的序列。基本想法是每次调用交换首尾，然后剔除首尾后作为新的序列再次调用。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Agorithm ReverseArray(A, i, j):</span><br><span class="line">Input: 序列 A 和首尾下标 i, j (也可任意指定非首尾下标 i, j)</span><br><span class="line">Output: 无输出，因为序列是可变的，函数操作直接对序列进行</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt; j then</span><br><span class="line">交换 A[i] 和 A[j]</span><br><span class="line">ReverseArray(A, i + <span class="number">1</span>, j - <span class="number">1</span>)  <span class="comment"># 剔除首尾后作为新的序列再次调用</span></span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq, i, j</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; j:</span><br><span class="line">        seq[i], seq[j] = seq[j], seq[i]</span><br><span class="line">        reverse(seq, i + <span class="number">1</span>, j - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆置序列</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">reverse(seq, i=<span class="number">0</span>, j=<span class="built_in">len</span>(seq) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"><span class="comment"># [9, 8, 7, 6, 5, 4, 3, 2, 1] 从 seq[0]=1 到 seq[n-1]=9 开始逆序</span></span><br><span class="line"></span><br><span class="line">reverse(seq, i=<span class="number">3</span>, j=<span class="built_in">len</span>(seq) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"><span class="comment"># [9, 8, 7, 1, 2, 3, 4, 5, 6] 从 seq[3]=6 到 seq[n-1]=1 开始逆序</span></span><br></pre></td></tr></table></figure><h3 id="2-2-二路递归">2.2 二路递归</h3><p>当函数内部执行两次递归调用时，即为二路递归。例如：</p><ul><li>标尺刻度</li></ul><h4 id="2-2-1-二路递归求和">2.2.1 二路递归求和</h4><p>基本思想是将序列拆分为两半，分布调用求和再相加。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm BinarySum(A, i, n):</span><br><span class="line">Input: 序列 A 和起始下标 i 和加和长度 n</span><br><span class="line">Output: 从 i 开始的 n 个元素求和</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> A[i]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> BinarySum(A, i, n / <span class="number">2</span>) + BinarySum(A, i + n / <span class="number">2</span>, n / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740892869633.png" alt=""></p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_sum</span>(<span class="params">seq, i, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        half = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> binary_sum(seq, i, half) + binary_sum(seq, i + half, n - half)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二路递归求和</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_sum(seq, i=<span class="number">0</span>, n=<span class="built_in">len</span>(seq)))</span><br><span class="line"><span class="comment"># 55</span></span><br><span class="line"><span class="built_in">print</span>(binary_sum(seq, i=<span class="number">1</span>, n=<span class="built_in">len</span>(seq) - <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 54</span></span><br></pre></td></tr></table></figure><blockquote><p>代码实现并不良好，因为需要手动计算起始下标和长度，没有检查溢出问题</p></blockquote><h4 id="2-2-2-二路递归产生斐波那契数列">2.2.2 二路递归产生斐波那契数列</h4><p>产生递推式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">F_0 = 0,\ F_1 = 1,\ F_{i} = F_{i - 1} + F_{i - 2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 的斐波那契数列，可以尝试使用二路递归方法。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm BinaryFib(k)</span><br><span class="line">Input: 序列下标 k</span><br><span class="line">Output: 第 k 个斐波那契数列值</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> k</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> BinaryFib(k - <span class="number">1</span>) + BinaryFib(k - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_fib</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 【不推荐】 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_fib(k - <span class="number">1</span>) + binary_fib(k - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二路递归产生斐波那契数列 【不推荐】</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(binary_fib(i), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 0 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><blockquote><p>二路递归产生斐波那契数列复杂度为指数级，【不推荐】使用</p></blockquote><p><strong>证明</strong> 记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示 <code>binary_fib(k)</code> 函数调用递归的次数，则有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>3</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⋯</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mi>k</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align} \notagn_0 &amp;= 1 \\ \notagn_1 &amp;= 1 \\ \notagn_2 &amp;= n_1 + n_0 + 1 = 3 \\ \notagn_3 &amp;= n_2 + n_1 + 1 = 5 \\ \notag&amp;\cdots \\n_k &amp;= n_{k-1} + n_{k-2} + 1 \notag\end{align}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9em;vertical-align:-4.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">3</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>于是可知 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 也为斐波那契数列，由斐波那契数列是二阶线性递推，求通项公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo>∼</mo><mo stretchy="false">(</mo><mfrac><mrow><msqrt><mn>5</mn></msqrt><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><msup><mo stretchy="false">)</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">n_k \sim (\frac{\sqrt{5}- 1}{2})^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.383em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 可知操作次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大约为指数类型的量级。指数增长理论上在算法中是无法实现的。（或者可以证明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大约是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">n_{k-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 的 2 倍以上，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo>∼</mo><msup><mn>2</mn><mrow><mi>k</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n_k \sim 2^{k/2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">/2</span></span></span></span></span></span></span></span></span></span></span></span> 也是指数级别）</p><h4 id="2-2-3-线性递归产生斐波那契数列">2.2.3 线性递归产生斐波那契数列</h4><p>改进递归，使用线性递归产生斐波那契数列。基本思想是每次返回一组（2 个）斐波那契数，每次返回的时候直接进行加和（递推）</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LinearFibonacci(k):</span><br><span class="line">Input: 下标 k</span><br><span class="line">Output: 一次返回 <span class="number">2</span> 个斐波那契数</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i, j = LinearFibonacci(k - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> j, i + j</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_fib</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i, j = linear_fib(k - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> j, i + j</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性递归产生斐波那契数列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    front, back = linear_fib(i)</span><br><span class="line">    <span class="built_in">print</span>(back, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><blockquote><p>线性递归每递归一次就能产生一项，故复杂度为 <code>O(n)</code></p></blockquote><h3 id="2-3-多重递归">2.3 多重递归</h3><p>多重递归中的函数可能执行多于两次递归调用。例如：</p><ul><li>文件系统</li></ul><h4 id="2-3-1-求和谜题">2.3.1 求和谜题</h4><p>可以简单理解为找出集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mn>9</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">U = \{1, 2, 3, \cdots, 9 \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">9</span><span class="mclose">}</span></span></span></span> 所有的三元子集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy="false">{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">S = \{a, b, c\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose">}</span></span></span></span> 使得满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a + b = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span> 。基本想法是每次向 <code>S</code> 中添加一个 <code>U</code> 中元素，并删去 <code>U</code> 中对应的元素，并 <code>k - 1</code> 表示 <code>S</code> 还剩 <code>k - 1</code> 个元素。从而得到新的 <code>k, S, U</code> 此时递归调用。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Algorithm PuzzleSolve(k, S, U):</span><br><span class="line">Input: S 为结果集合，U 为选取元素来源，k 为要求的 S 集合大小</span><br><span class="line">Output: 所以满足 a + b = c 的 S = &#123;a, b, c&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> U do:</span><br><span class="line">    <span class="comment"># 从 U 中逐个挑出元素</span></span><br><span class="line">    Add e to the end of S  <span class="comment"># 将 e 添加到序列 S 的末尾</span></span><br><span class="line">    Remove e <span class="keyword">from</span> U        <span class="comment"># 将 e 从集合 U 中移除（标记为已使用）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span> then:               </span><br><span class="line">        <span class="comment"># 如果当前序列长度满足要求</span></span><br><span class="line">        <span class="keyword">if</span> is_solution(S) then:    </span><br><span class="line">            <span class="comment"># 检查 S 是否是谜题的解</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Solution found: &quot;</span> + S)</span><br><span class="line">    <span class="keyword">else</span>:                         </span><br><span class="line">        <span class="comment"># 否则继续递归扩展，递归调用，并传入新参数</span></span><br><span class="line">        PuzzleSolve(k - <span class="number">1</span>, S, U)</span><br><span class="line"></span><br><span class="line">    Remove e <span class="keyword">from</span> the end of S     // 回溯：将 e 从序列 S 的末尾移除</span><br><span class="line">    Add e back to U                // 回溯：将 e 添加回集合 U（标记为未使用）</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_solution</span>(<span class="params">S</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 检查 a + b = c &quot;&quot;&quot;</span></span><br><span class="line">    res = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> S[<span class="number">0</span>] + S[<span class="number">1</span>] == S[<span class="number">2</span>]:</span><br><span class="line">        res = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">puzzle_solve</span>(<span class="params">k, S, U</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 寻找 S &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">list</span>(U):  <span class="comment"># 遍历集合 U 中的每一个元素</span></span><br><span class="line">        S.append(e)  <span class="comment"># 将 e 添加到序列 S 的末尾</span></span><br><span class="line">        U.remove(e)  <span class="comment"># 将 e 从集合 U 中移除</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> is_solution(S):</span><br><span class="line">                <span class="comment"># 检查当前序列 S 是否是谜题的解</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Solution found: &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(S[<span class="number">0</span>], S[<span class="number">1</span>], S[<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 递归调用，继续扩展序列</span></span><br><span class="line">            puzzle_solve(k - <span class="number">1</span>, S, U)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 回溯</span></span><br><span class="line">        S.pop()  <span class="comment"># 将 e 从序列 S 的末尾移除</span></span><br><span class="line">        U.add(e)  <span class="comment"># 将 e 添加回集合 U</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求和谜题</span></span><br><span class="line">U = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">k = <span class="number">3</span></span><br><span class="line">S = []</span><br><span class="line">puzzle_solve(k, S, U)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Solution found: 1 + 2 = 3</span></span><br><span class="line"><span class="string">Solution found: 1 + 3 = 4</span></span><br><span class="line"><span class="string">Solution found: 2 + 1 = 3</span></span><br><span class="line"><span class="string">Solution found: 3 + 1 = 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740897518866.png" alt=""></p><h2 id="3-递归算法的不足">3 递归算法的不足</h2><h3 id="3-1-不断递归带来的复杂度">3.1 不断递归带来的复杂度</h3><ul><li>递归可能会因为不断的调用自身带来复杂度的急剧上升</li></ul><p>例如：二路递归产生斐波那契的例子就展示了递归的误用</p><h3 id="3-2-最大递归深度">3.2 最大递归深度</h3><ul><li>除了复杂度，递归的误用可能会带来无限深度</li></ul><p>例如出现了下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> f(x)</span><br></pre></td></tr></table></figure><p>这种简单的错误会导致递归无限地调用自身，这会迅速耗尽计算资源。所以，使用递归时，往往会传入<strong>更多的参数</strong>，通过参数的变化和添加终止条件实现递归。</p><ul><li>Python 限制了递归的深度，默认递归不得超过 1000 层，如果超过则会报错 <code>RuntimeError</code></li></ul><p>合法的/高效的递归操作，这个限制（1000 层）是完全足够的。例如，二分查找的复杂度为 <code>O(log n)</code> ，如果要这个算法消耗 1000 次递归，则有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>=</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">\log n = 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span> 可以计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mn>1000</mn></msup></mrow><annotation encoding="application/x-tex">n = 2^{1000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span></span></span></span></span></span></span></span></span></span></span></span> 个输入，这个数字显然在现实中是不可能达到的。所以，1000 层限制对于合法的递归算法是完全足够的。</p><p>当然，也可以自定义最大递归深度限制【不推荐】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">old = sys.getrecursionlimit()</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>无论如何，依靠<strong>参数的加入和限制</strong>对递归算法的设计十分重要。</p></blockquote><h2 id="4-消除尾递归">4 消除尾递归</h2><p>递归算法的优点在于利用问题中的重复结构。然而，递归的成本也十分明显。算法必须记录存储每个调用的状态和结果。这对计算机内存造成负担。</p><p>所以，某些情况下，我们希望能够将递归算法变为非递归算法。</p><h3 id="4-1-尾递归">4.1 尾递归</h3><p><strong>定义</strong>：当递归算法进行的递归调用是此算法的最后一步，即递归调用得到的值被立即当作此算法的输出，则此递归为一个尾递归（<strong>递归调用为最后一步 / 递归调用得到的值作为输出</strong>）。</p><ul><li>尾递归必定是一个线性递归</li></ul><p>例如：阶乘函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)  <span class="comment"># 递归调用 factorial() 为算法的输出被 return</span></span><br></pre></td></tr></table></figure><h3 id="4-2-尾递归的非递归算法">4.2 尾递归的非递归算法</h3><p><strong>任何的尾递归均可转写为一个非递归算法</strong></p><h4 id="4-2-1-阶乘函数（非递归）">4.2.1 阶乘函数（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res = n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="comment"># 使用循环逐个相乘</span></span><br><span class="line">        res *= i</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="4-2-2-逆置序列（非递归）">4.2.2 逆置序列（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq, i, j</span>):</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="comment"># 利用下标的循环交换</span></span><br><span class="line">        seq[i], seq[j] = seq[j], seq[i]</span><br><span class="line">        i, j = i + <span class="number">1</span>, j - <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-二分查找（非递归）">4.2.3 二分查找（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, target, left, right</span>):</span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        <span class="comment"># 利用循环从左右向中间查找</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> target == data[mid]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> target &lt; data[mid]:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">简而言之：递归就是自己调用自己。本文依据四个例子介绍递归算法的原理和如何搭建，除此之外，还有一些常见的递归例子：递归求和、逆置序列、递归产生斐波那契数列、求和谜题等。以及什么是尾递归，如何将尾递归转换为非递归算法。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>CIFAR-10 分类问题 (基于 ResNet18 预训练模型)</title>
    <link href="https://blog.iskage.online/posts/24ab2d0a.html"/>
    <id>https://blog.iskage.online/posts/24ab2d0a.html</id>
    <published>2025-03-01T08:32:00.000Z</published>
    <updated>2025-03-01T08:54:08.826Z</updated>
    
    <content type="html"><![CDATA[<h1>CIFAR-10 分类问题 (基于 ResNet18 预训练模型)</h1><p>项目源码存放在 GitHub 库 <a href="https://github.com/isKage/cifar10-classification">isKage/cifar10-classification</a></p><p><code>PyTorch</code> <code>Python</code> <code>torch</code> <code>nn</code> <code>ResNet</code> <code>ResNet18</code> <code>pre-trained</code></p><p>针对 CIFAR-10 分类问题，搭建神经网络：<code>AlexNet</code>、<code>GoogLeNet</code>、<code>ResNet</code>、<code>ResNet18</code>。最后选择预训练后的 <code>ResNet18</code> 进行该问题的训练、验证和测试。包含自定义数据集 <code>Dataset</code> 类、自定义训练、验证和测试函数、自定义结果表格函数等。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/cifar.jpeg" alt="cifar-10"></p><p><code>kaggle: private score = 0.68100, ranked about 71. (just training once as using cpu)</code></p><p><code>device: cpu</code></p><p><strong>项目目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── README.md                   </span><br><span class="line">├── TempData                  <span class="comment"># 取少量图片模拟 CIFAR10 数据集                 </span></span><br><span class="line">│   └── competitions</span><br><span class="line">│       └── cifar-10</span><br><span class="line">├── checkpoints               <span class="comment"># 存放训练完成后的模型参数 model.save() 存放处</span></span><br><span class="line">├── config.py                 <span class="comment"># 默认的配置文件</span></span><br><span class="line">├── data                      <span class="comment"># 自定义的数据集 Dataset 类</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── dataset.py</span><br><span class="line">├── logfile                   <span class="comment"># 记录模型表现 csv 文件的目录</span></span><br><span class="line">├── logs                      <span class="comment"># 存放 tensorboard 文件</span></span><br><span class="line">├── main.py                   <span class="comment"># 主程序: 包含 train, test 等主要函数</span></span><br><span class="line">├── models                    <span class="comment"># 搭建的各种神经网络 `AlexNet`、`GoogLeNet`、`ResNet`、`ResNet18`</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── alexnet.py</span><br><span class="line">│   ├── basic.py</span><br><span class="line">│   ├── googlenet.py</span><br><span class="line">│   ├── resnet.py</span><br><span class="line">│   └── resnet18.py</span><br><span class="line">├── requirements.txt          <span class="comment"># 安装依赖</span></span><br><span class="line">├── result_example.csv        <span class="comment"># 少量数据模拟数据集得到的测试结果</span></span><br><span class="line">└── sampleSubmission.csv      <span class="comment"># 最后生成的可提交 kaggle 的最终测试结果</span></span><br></pre></td></tr></table></figure><h2 id="1-下载至本地">1 下载至本地</h2><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/cifar10-classification.git</span><br></pre></td></tr></table></figure><h2 id="2-安装依赖和数据集">2 安装依赖和数据集</h2><h3 id="2-1-pip-安装依赖">2.1 pip 安装依赖</h3><p>在项目根目录下终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="2-2-kaggle-下载数据集">2.2 kaggle 下载数据集</h3><p>教程见 <a href="https://zhuanlan.zhihu.com/p/25732245405">从 kaggle 下载数据集 (mac &amp; win)</a>。</p><h2 id="3-本地配置-config-py">3 本地配置 <code>config.py</code></h2><p>在 <code>config.py</code> 中配置相关参数。例如数据集路径。相关配置均已配置好，但需要自己配置数据集的位置。<br>在 <code>_parse()</code> 方法中，需修改 cifar 数据集的路径。例如我的配置：<code>cifar-10</code> 文件夹放在用户目录下的 <code>AllData/competitions/</code> 下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> config.real_or_try == <span class="string">&quot;real&quot;</span>:</span><br><span class="line">    <span class="comment"># 如果数据放在用户目录的 &#x27;AllData&#x27; 下则</span></span><br><span class="line">    config.root = os.path.join(config.user_root, <span class="string">&#x27;AllData&#x27;</span>, <span class="string">&#x27;competitions&#x27;</span>, <span class="string">&#x27;cifar-10&#x27;</span>)  <span class="comment"># 【本地设置: 数据目录】</span></span><br><span class="line">    config.res_path = os.path.join(config.working_root, <span class="string">&#x27;sampleSubmission.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 样本数据尝试</span></span><br><span class="line">    config.root = os.path.join(config.working_root, <span class="string">&#x27;TempData&#x27;</span>, <span class="string">&#x27;competitions&#x27;</span>, <span class="string">&#x27;cifar-10&#x27;</span>)</span><br><span class="line">    config.res_path = os.path.join(config.working_root, <span class="string">&#x27;result_example.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-训练">4 训练</h2><blockquote><p>注意，默认的数据集为模拟数据集，故如果想在完整数据集训练，在指定路径后还需传入参数 <code>--real_or_try=real</code><br>，或者直接在 <code>config.py</code> 中<br>修改默认</p></blockquote><h3 id="4-1-解压数据集">4.1 解压数据集</h3><p>在第 3 步设置完成数据集下载的路径后，终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py unzip</span><br></pre></td></tr></table></figure><p>即可解压数据集。</p><h3 id="4-2-训练">4.2 训练</h3><p>使用 <code>fire</code> 库方便的在终端中进行训练、测试过程。可以在 <code>config.py</code> 中输入默认参数。例如：<code>model</code><br>为选择模型，默认使用 <code>&quot;ResNet18&quot;</code> 模型，<br>会自动进行下载，下载的预训练模型参数保存在 <code>checkpoints/</code> 文件夹里。</p><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>可以使用 <code>--&lt;参数名&gt;=参数值</code> 在终端覆盖默认参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python main.py train model=AlexNet      <span class="comment"># 指定 AlexNet 为模型</span></span><br><span class="line">python main.py train rea_or_try=real    <span class="comment"># 使用完整 CIFAR10 数据集，而不是模拟数据集 </span></span><br></pre></td></tr></table></figure><h3 id="4-3-可视化">4.3 可视化</h3><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=./logs  <span class="comment"># http://localhost:6006/</span></span><br></pre></td></tr></table></figure><p>打开浏览器观察训练过程可视化：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740818446605.png" alt=""></p><h2 id="5-测试">5 测试</h2><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>即可得到测试后的结果表格 <code>result_example.csv</code> 或 <code>sampleSubmission.csv</code> （取决与使用的是模拟数据集还是完整的数据集）。</p><p>注意，测试完成后终端输入一下指令，对结果表格按照 <code>id</code> 进行排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py sort_csv</span><br></pre></td></tr></table></figure><p>最后可以将 <code>sampleSubmission.csv</code> 上传到 kaggle <a href="https://www.kaggle.com/competitions/cifar-10">CIFAR-10 competition</a> 。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740818596562.png" style="zoom:50%;" /><h2 id="6-友链">6 友链</h2><ol><li>关注我的知乎账号 <a href="https://www.zhihu.com/people/--55-97-8-41">Zhuhu</a> 不错过我的笔记更新。</li><li>我会在个人博客 <a href="https://blog.iskage.online/">isKage`Blog</a> 更新相关项目和学习资料。</li></ol>]]></content>
    
    
    <summary type="html">本文介绍如何读取 CIFAR-10 数据集，搭建 ResNet 神经网络，模型训练和验证。可前往 GitHub 库下载项目源码。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (2) R 语言初步：常见对象和数据的输入输出</title>
    <link href="https://blog.iskage.online/posts/a6f8df4a.html"/>
    <id>https://blog.iskage.online/posts/a6f8df4a.html</id>
    <published>2025-02-27T07:43:00.000Z</published>
    <updated>2025-03-06T09:06:28.011Z</updated>
    
    <content type="html"><![CDATA[<h1>R 语言入门 (1)</h1><h2 id="1-常见对象">1 常见对象</h2><h3 id="1-1-向量-vector">1.1 向量 vector</h3><p>最简单的数据结构就是由一串相同类型的元素等构成的向量 <code>vector</code></p><ul><li>标量为长度是 <code>1</code> 的向量</li></ul><h4 id="1-1-1-c-函数">1.1.1 <code>c()</code> 函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0.3</span><span class="punctuation">,</span> <span class="number">0.6</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="built_in">T</span><span class="punctuation">,</span> <span class="built_in">F</span><span class="punctuation">)</span>  <span class="comment"># T is TRUE, F is FALSE</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】R 语言只有 <code>TRUE</code> 和 <code>T</code> 以及 <code>FALSE</code> 和 <code>F</code></p></blockquote><h4 id="1-1-2-rep-函数">1.1.2 <code>rep()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span>x<span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># x 表示数据元素</span></span><br><span class="line"><span class="comment"># times 表示重复次数，可以是向量</span></span><br><span class="line"><span class="comment"># length.out 表示总长度，运行截断</span></span><br><span class="line"><span class="comment"># each 每个元素重复次数，不能为向量</span></span><br></pre></td></tr></table></figure><blockquote><p>先执行 <code>each</code> 复制单个元素，后执行 <code>times</code> 复制整个向量</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span> <span class="comment"># times = 2</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="comment"># times = (1, 2, 3, 4)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> len <span class="operator">=</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】<code>each = x</code> 等价于 <code>times = c(x, x, ...)</code></p></blockquote><h4 id="1-1-3-seq-函数">1.1.3 <code>seq()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seq<span class="punctuation">(</span>from <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> to <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="punctuation">(</span><span class="punctuation">(</span>to <span class="operator">-</span> from<span class="punctuation">)</span> <span class="operator">/</span> <span class="punctuation">(</span>length.out <span class="operator">-</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># from 起始数字</span></span><br><span class="line"><span class="comment"># to 终止数字</span></span><br><span class="line"><span class="comment"># by 步长，默认均匀分布</span></span><br><span class="line"><span class="comment"># len 长度</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq<span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">11</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">17</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740635933658.png" alt="QQ_1740635933658" style="zoom:50%;" /><h3 id="1-2-矩阵-matrix">1.2 矩阵 matrix</h3><p>R 语言的矩阵是</p><ul><li><p>有维度（dimension）属性的向量</p></li><li><p>所有元素属于相同类型</p></li></ul><h4 id="1-2-1-matrix-函数">1.2.1 <code>matrix()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix<span class="punctuation">(</span><span class="literal">NA</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># NA 第一个参数为传入的数据</span></span><br><span class="line"><span class="comment"># nrow 行数</span></span><br><span class="line"><span class="comment"># ncol 列数</span></span><br><span class="line"><span class="comment"># byrow 是否按照行排列</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">6</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">6</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636318797.png" style="zoom:50%;" /><h4 id="1-2-2-cbind-rbind-函数">1.2.2 <code>cbind()</code> <code>rbind()</code> 函数</h4><p>将向量按行/列组合成矩阵</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">)</span></span><br><span class="line">cbind<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">)</span></span><br><span class="line">rbind<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636694142.png" style="zoom:50%;" /><h3 id="1-3-数据框-data-frame">1.3 数据框 data frame</h3><ul><li><p>矩阵 <code>Matrix</code> 中只能是<strong>同一种类型</strong>的元素，一般是数值型</p></li><li><p>数据框 <code>Data Frame</code> 不同列可以是<strong>不同数据类型</strong></p></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">12</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4.4</span><span class="punctuation">,</span> <span class="number">5.3</span><span class="punctuation">,</span> <span class="number">7.2</span><span class="punctuation">,</span> <span class="number">5.2</span><span class="punctuation">,</span> <span class="number">8.5</span><span class="punctuation">,</span> <span class="number">7.3</span><span class="punctuation">,</span> <span class="number">6.0</span><span class="punctuation">,</span> <span class="number">10.4</span><span class="punctuation">,</span> <span class="number">10.2</span><span class="punctuation">,</span> <span class="number">6.1</span><span class="punctuation">)</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>age<span class="punctuation">,</span> weight<span class="punctuation">,</span> gender<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">dim</span><span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">nrow<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">ncol<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636915047.png" style="zoom:50%;" /><blockquote><p><code>dim</code> <code>nrow</code> <code>ncol</code> 函数也可用于矩阵 <code>matrix</code> 类型</p></blockquote><h3 id="1-4-列表-list">1.4 列表 list</h3><ul><li><code>List</code> 是一个广义的 “向量”</li><li>每个位置上是任意的R对象，甚至是一个列表</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>member <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> <span class="built_in">names</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Jerry&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Lily&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740637915471.png" style="zoom:50%;" /><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># x 列表元素的别名</span></span><br><span class="line">x<span class="operator">$</span>member  <span class="comment"># 取 x 列表的 member</span></span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># 取列表长</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740638021720.png" style="zoom:50%;" /><blockquote><p>使用 <code>$</code> 取列表的某一位置的数据</p></blockquote><h3 id="1-5-因子-factors">1.5 因子 factors</h3><p>因子是一种特殊的向量：映射到整数编码，并记录所有可能的类别（称为<strong>水平，levels</strong>）。</p><p>使用 <code>factor()</code> 函数创建因子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：性别数据</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">)</span></span><br><span class="line">gender_factor <span class="operator">&lt;-</span> factor<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line">gender_factor</span><br><span class="line"></span><br><span class="line">levels<span class="punctuation">(</span>gender_factor<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;female&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">gender_factor</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639382068.png" style="zoom:50%;" /><h3 id="1-6-对象的判断和转换">1.6 对象的判断和转换</h3><h4 id="1-6-1-强制转换">1.6.1 强制转换</h4><p>把 R 对象从一种类型强制转化成另一个类型</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">6</span></span><br><span class="line"><span class="built_in">as.logical</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.character</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639618782.png" style="zoom:50%;" /><ul><li>如果转换失败，则返回 <code>NA</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">,</span> <span class="string">&quot;c&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.logical</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639731257.png" style="zoom:50%;" /><h4 id="1-6-2-判断">1.6.2 判断</h4><ul><li><code>NA</code> ：缺失数据 not available</li><li><code>NaN</code> ：无意义的数 not a number</li></ul><p><strong>格式</strong>：使用函数判断</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个元素分别判断</span></span><br><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.nan</span><span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="operator">-</span><span class="number">1</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.nan</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sqrt</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740640084551.png" style="zoom:50%;" /><blockquote><p>特殊的数字计算 <code>Inf</code> 无穷的计算</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Inf</span> <span class="operator">+</span> <span class="punctuation">(</span><span class="operator">-</span><span class="literal">Inf</span><span class="punctuation">)</span>  <span class="comment"># NaN</span></span><br></pre></td></tr></table></figure><h2 id="2-数据的输入">2 数据的输入</h2><h3 id="2-1-外部数据类型">2.1 外部数据类型</h3><ul><li>文本文件</li></ul><p>例如 <code>.txt</code> <code>.csv</code> <code>.dat</code> 文件</p><ul><li>其他文件</li></ul><p>例如 <code>.xls</code> <code>.xlsx</code> (Excel) 、 <code>.sas7bdat</code> (SAS)、 <code>.sav</code> (SPSS)、<code>.dta</code> (Stata)、<code>.RData</code> ® 和 <code>.dat</code> 文件</p><blockquote><p>先进行转化再读取，或用专门的程序包</p></blockquote><h3 id="2-2-文本数据读取">2.2 文本数据读取</h3><p>读取文本数据常见的函数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="string">&quot;example.csv&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-read-table-函数">2.3 <code>read.table()</code> 函数</h3><p><strong>参数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="built_in">quote</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">           dec <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> numerals <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;allow.loss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;warn.loss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;no.loss&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">           row.names<span class="punctuation">,</span> col.names<span class="punctuation">,</span> as.is <span class="operator">=</span> <span class="operator">!</span>stringsAsFactors<span class="punctuation">,</span> tryLogical <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">           na.strings <span class="operator">=</span> <span class="string">&quot;NA&quot;</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> nrows <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">           skip <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> check.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> fill <span class="operator">=</span> <span class="operator">!</span>blank.lines.skip<span class="punctuation">,</span></span><br><span class="line">           strip.white <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> blank.lines.skip <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">           comment.char <span class="operator">=</span> <span class="string">&quot;#&quot;</span><span class="punctuation">,</span></span><br><span class="line">           allowEscapes <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> flush <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">           stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">           fileEncoding <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> encoding <span class="operator">=</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span> text<span class="punctuation">,</span> skipNul <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- file: 文件名路径, 字符串形式</span><br><span class="line">- header: 表示文件第一行是否含有列名</span><br><span class="line">- sep: 分隔符, 字符串, 表示各列按照 sep 指定的符号分隔</span><br><span class="line">- nrows: 表示读取数据部分的最大行数</span><br><span class="line">- skip: 表示跳过一定的行数后开始读取</span><br><span class="line">- comment.char: 注释标记, 此符号右边的所有内容都会被忽略</span><br><span class="line">- row.names: 将某一列设置为行名</span><br><span class="line">- col.names: 将某一行设置为列名</span><br></pre></td></tr></table></figure><p>例如：读取下面的 <code>grade.txt</code> 文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------</span><br><span class="line">%%% grade of class A, year 2020</span><br><span class="line">Name ID Grade GPA Gender</span><br><span class="line">&quot;Xiao Ming&quot; 133001 100 4 F</span><br><span class="line">&quot;Xiao Hong&quot; 133023 90 3.7 M</span><br><span class="line">&quot;Xiao Wan&quot; 133099 85 3.2 M</span><br><span class="line">&quot;Song Hui&quot; 133020 80 3.5 M</span><br><span class="line">&quot;Song Yi&quot; 133019 100 4 M</span><br><span class="line">&quot;Donald Trump&quot; 133012 88 3.7 M</span><br><span class="line">&quot;Clinton Hilary&quot; 133014 90 3.7 F%%% retake</span><br><span class="line">&quot;Obama BH&quot; 133010 &quot;&quot; &quot;&quot; M%%% Fail</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t <span class="operator">&lt;-</span> read.table<span class="punctuation">(</span></span><br><span class="line">    file <span class="operator">=</span> <span class="string">&quot;./grade.txt&quot;</span><span class="punctuation">,</span> <span class="comment"># 文件路径</span></span><br><span class="line">    header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> <span class="comment"># 第一行为列名</span></span><br><span class="line">    sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span> <span class="comment"># 按照空格分割</span></span><br><span class="line">    comment.char <span class="operator">=</span> <span class="string">&quot;%&quot;</span><span class="punctuation">,</span> <span class="comment"># % 为注释</span></span><br><span class="line">    skip <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> <span class="comment"># 跳过一行</span></span><br><span class="line">    nrows <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> <span class="comment"># 跳过一行后读 8 行</span></span><br><span class="line">    row.names <span class="operator">=</span> <span class="number">2</span> <span class="comment"># 第 2 列设为行名</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> t</span><br><span class="line">                 Name Grade GPA Gender</span><br><span class="line"><span class="number">133001</span>      Xiao Ming   <span class="number">100</span> <span class="number">4.0</span>      <span class="built_in">F</span></span><br><span class="line"><span class="number">133023</span>      Xiao Hong    <span class="number">90</span> <span class="number">3.7</span>      M</span><br><span class="line"><span class="number">133099</span>       Xiao Wan    <span class="number">85</span> <span class="number">3.2</span>      M</span><br><span class="line"><span class="number">133020</span>       Song Hui    <span class="number">80</span> <span class="number">3.5</span>      M</span><br><span class="line"><span class="number">133019</span>        Song Yi   <span class="number">100</span> <span class="number">4.0</span>      M</span><br><span class="line"><span class="number">133012</span>   Donald Trump    <span class="number">88</span> <span class="number">3.7</span>      M</span><br><span class="line"><span class="number">133014</span> Clinton Hilary    <span class="number">90</span> <span class="number">3.7</span>      <span class="built_in">F</span></span><br><span class="line"><span class="number">133010</span>       Obama BH    <span class="literal">NA</span>  <span class="literal">NA</span>      M</span><br></pre></td></tr></table></figure><blockquote><p>其他读取函数类似，只是参数默认值不同，可以相互替代</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.csv<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">read.delim<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>对于一些常规的文本文件，可直接使用默认参数。例如：</p><ul><li>标准的 <code>.txt</code> 数据文件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;A&quot;, 1, 10.1</span><br><span class="line">&quot;B&quot;, 2, 20.5</span><br><span class="line">&quot;C&quot;, 4, 1031.1</span><br></pre></td></tr></table></figure><ul><li>标准的 <code>.csv</code> 文件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a,b,c</span><br><span class="line">1,2,3</span><br><span class="line">4,5,6</span><br><span class="line">7,8,9</span><br></pre></td></tr></table></figure><p>可以直接使用</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="string">&quot;example.csv&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-4-scan-函数">2.4 <code>scan()</code> 函数</h3><p><code>scan()</code> 函数更灵活，可以读进不规则的数值文档，得到一个向量或者列表</p><ul><li>需要 <code>what</code> 参数指定变量类型，得到一个<code>列表</code></li></ul><p>例如：针对下面的 <code>.txt</code> 文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">M 65 168</span><br><span class="line">M 70 172</span><br><span class="line">F 54 156</span><br><span class="line">F 58 163</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定第一列字符，第二、三列为数值</span></span><br><span class="line">scan<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">,</span> what <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定每一列的名称</span></span><br><span class="line">scan<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">,</span> what <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span><span class="string">&quot;gender&quot;</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;weight&quot;</span> <span class="operator">=</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;height&quot;</span> <span class="operator">=</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740646352843.png" style="zoom:50%;" /><ul><li><code>scan()</code> 函数还可以读取不规则长度的数值文档，得到一个<code>向量</code></li></ul><p>例如：对于数值文档 <code>example2.txt</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2 3 4</span><br><span class="line">5 6 7 8 9</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> scan<span class="punctuation">(</span><span class="string">&quot;example2.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">Read <span class="number">9</span> items</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="2-5-read-fwf-函数">2.5 <code>read.fwf()</code> 函数</h3><p>读取文件中一些固定宽度数据，例如可以指定每一列的宽度为几，函数便会按照提前设置的宽度读取数据</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># M65168</span></span><br><span class="line"><span class="comment"># M70172</span></span><br><span class="line"><span class="comment"># F54156</span></span><br><span class="line"><span class="comment"># F58163</span></span><br><span class="line"></span><br><span class="line">t <span class="operator">&lt;-</span> read.fwf<span class="punctuation">(</span></span><br><span class="line">    file <span class="operator">=</span> <span class="string">&quot;example3.txt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    widths <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    col.names <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;gender&quot;</span><span class="punctuation">,</span> <span class="string">&quot;weight&quot;</span><span class="punctuation">,</span> <span class="string">&quot;height&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">)</span> <span class="comment"># 指定每一列宽度分别为 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> t</span><br><span class="line">  gender weight height</span><br><span class="line"><span class="number">1</span>      M     <span class="number">65</span>    <span class="number">168</span></span><br><span class="line"><span class="number">2</span>      M     <span class="number">70</span>    <span class="number">172</span></span><br><span class="line"><span class="number">3</span>      <span class="built_in">F</span>     <span class="number">54</span>    <span class="number">156</span></span><br><span class="line"><span class="number">4</span>      <span class="built_in">F</span>     <span class="number">58</span>    <span class="number">163</span></span><br></pre></td></tr></table></figure><h3 id="2-6-读取-excel-数据">2.6 读取 excel 数据</h3><ul><li>转换为 <code>csv</code> 文件读取</li><li>复制后使用 <code>read.delim(&quot;clipboard&quot;)</code> 从<code>剪切板</code>中读取</li><li>使用程序包读取</li></ul><p>常用程序包 <code>readxl</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;readxl&quot;</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">&quot;readxl&quot;</span><span class="punctuation">)</span></span><br><span class="line">t <span class="operator">&lt;-</span> read_excel<span class="punctuation">(</span><span class="string">&quot;example.xlsx&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-7-读取网页-url-和-readLines-函数">2.7 读取网页 <code>url()</code> 和 <code>readLines()</code> 函数</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">con <span class="operator">&lt;-</span> url<span class="punctuation">(</span><span class="string">&quot;https://www.baidu.com/&quot;</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> readLines<span class="punctuation">(</span>con<span class="punctuation">)</span></span><br><span class="line">head<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="3-数据的输出">3 数据的输出</h2><h3 id="3-1-write-table-函数">3.1 <code>write.table()</code> 函数</h3><p><strong>参数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write.table<span class="punctuation">(</span>x<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> append <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> <span class="built_in">quote</span> <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">            eol <span class="operator">=</span> <span class="string">&quot;\n&quot;</span><span class="punctuation">,</span> na <span class="operator">=</span> <span class="string">&quot;NA&quot;</span><span class="punctuation">,</span> dec <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">            col.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> qmethod <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;escape&quot;</span><span class="punctuation">,</span> <span class="string">&quot;double&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">            fileEncoding <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;将 x 写入文件 file 中&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># sep: 各列分割符号</span></span><br><span class="line"><span class="comment"># quote = TRUE: 字符和因子列就会被 &quot;&quot; 所包裹</span></span><br><span class="line"><span class="comment"># eol: 尾行分隔符</span></span><br><span class="line"><span class="comment"># na: 缺失值字符串</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据框 d</span></span><br><span class="line">d <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>obs <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> treat <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;A&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> weight <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2.3</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为简单文本 txt</span></span><br><span class="line">write.table<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.txt&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 保存为 , 分割文本</span></span><br><span class="line">write.csv<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.csv&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 保存为 .RData 格式文件</span></span><br><span class="line">save<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文详细介绍了 R 语言常见的对象类型，包括向量、矩阵、数据框等。同时介绍了如何读取数据和输出数据，包括 read.table 函数等。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>搭建神经网络 PyTorch 实战：MNIST 手写数字集分类问题训练全流程</title>
    <link href="https://blog.iskage.online/posts/6dd74203.html"/>
    <id>https://blog.iskage.online/posts/6dd74203.html</id>
    <published>2025-02-26T12:32:00.000Z</published>
    <updated>2025-02-26T10:40:06.548Z</updated>
    
    <content type="html"><![CDATA[<h1>MNIST 手写数字集分类问题：基于 AlexNet 神经网络</h1><p><code>Python</code> <code>PyTorch</code> <code>MNIST</code> <code>Dataset</code> <code>Dataloarder</code> <code>Tensorboard</code></p><p>本文介绍如何读取 MNIST 数据集，搭建 AlexNet 简单卷积神经网络，模型训练和验证。模型在验证集的准确率大约 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>95</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">95\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">95%</span></span></span></span> 。</p><p>已开源在 <a href="https://github.com/isKage/mnist-classification">GitHub库</a></p><p>使用 <code>git</code> 下载。进入空目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/mnist-classification.git</span><br></pre></td></tr></table></figure><ul><li>PyTorch 的安装和环境配置可见 <a href="https://zhuanlan.zhihu.com/p/22230632892">zhihu</a></li><li>安装指定依赖：【进入 <code>requirements.txt</code> 根目录下安装】</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="0-本地配置-config-py">0 本地配置 <a href="http://config.py">config.py</a></h2><p>在根目录下创建 <code>config.py</code> 文件写入本地配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultConfig</span>:</span><br><span class="line">    model = <span class="string">&#x27;Classification10Class&#x27;</span></span><br><span class="line">    root = <span class="string">&#x27;&lt;路径&gt;/AllData/datasets/hojjatk/mnist-dataset&#x27;</span></span><br><span class="line">    logdir = <span class="string">&#x27;./logs&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取最新模型参数</span></span><br><span class="line">    param_path = <span class="string">&#x27;./checkpoints/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.listdir(param_path):</span><br><span class="line">        load_model_path = <span class="literal">None</span>  <span class="comment"># 加载预训练的模型的路径，为None代表不加载</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        load_model_path = os.path.join(</span><br><span class="line">            param_path,</span><br><span class="line">            <span class="built_in">sorted</span>(</span><br><span class="line">                os.listdir(param_path),</span><br><span class="line">                key=<span class="keyword">lambda</span> x: datetime.strptime(</span><br><span class="line">                    x.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.pth&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )[-<span class="number">1</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    lr = <span class="number">0.03</span></span><br><span class="line">    max_epochs = <span class="number">1</span>  <span class="comment"># 暂时不调参，只训练一次</span></span><br><span class="line">    batch_size = <span class="number">64</span></span><br><span class="line">    num_workers = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    print_feq = <span class="number">100</span>  <span class="comment"># 输出频率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        gpu = <span class="literal">True</span></span><br><span class="line">        device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gpu = <span class="literal">False</span></span><br><span class="line">        device = torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据字典kwargs 更新 config 参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, k):</span><br><span class="line">                warnings.warn(<span class="string">&quot;Warning: opt has not attribute %s&quot;</span> % k)</span><br><span class="line">            <span class="built_in">setattr</span>(<span class="variable language_">self</span>, k, v)</span><br><span class="line"></span><br><span class="line">        config.device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span>) <span class="keyword">if</span> config.gpu <span class="keyword">else</span> torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;User config:&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="variable language_">self</span>.__class__.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(k, <span class="built_in">getattr</span>(<span class="variable language_">self</span>, k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = DefaultConfig()</span><br></pre></td></tr></table></figure><h2 id="1-读取-MNIST-数据集">1 读取 MNIST 数据集</h2><p>直接使用 <code>torchvision.datasets.MNIST</code> 会出现网络问题，难以下载。<br>可以先前往 <a href="https://www.kaggle.com/datasets/hojjatk/mnist-dataset">kaggle</a> 下载。<br>使用 kaggle 命令下载教程可见 <a href="https://zhuanlan.zhihu.com/p/25732245405">从 Kaggle 下载数据集（mac 和 win 端）</a>。</p><p>然后自定义 <code>get_data.py</code> 的 <code>getData</code> 函数读取数据集。其中 <code>config</code> 为本地配置（包含了一些参数和文件路径）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getData</span>(<span class="params">root=config.root, batch_size=config.batch_size</span>):</span><br><span class="line">    <span class="comment"># 1. 准备数据集</span></span><br><span class="line">    train_dataset = torchvision.datasets.MNIST(</span><br><span class="line">        root=root,</span><br><span class="line">        train=<span class="literal">True</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(),</span><br><span class="line">        download=<span class="literal">False</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    test_dataset = torchvision.datasets.MNIST(</span><br><span class="line">        root=root,</span><br><span class="line">        train=<span class="literal">False</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(),</span><br><span class="line">        download=<span class="literal">False</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_dataset)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_dataset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集长度为 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集长度为 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">    train_dataloader = DataLoader(</span><br><span class="line">        dataset=train_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    test_dataloader = DataLoader(</span><br><span class="line">        dataset=test_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_dataset, test_dataset, train_dataloader, test_dataloader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train_dataset, test_dataset, train_dataloader, test_dataloader = getData()</span><br><span class="line">    img, label = train_dataset[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(img.shape)</span><br><span class="line">    <span class="built_in">print</span>(label)</span><br></pre></td></tr></table></figure><h2 id="2-搭建网络">2 搭建网络</h2><p>MNIST 数据集较为简单，使用简单的 AlexNet 卷积神经网络即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicModule</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作为基类，继承 nn.Module 但增加了模型保存和加载功能 save and load</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="built_in">str</span>(<span class="built_in">type</span>(<span class="variable language_">self</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, model_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据模型路径加载模型</span></span><br><span class="line"><span class="string">        :param model_path: 模型路径</span></span><br><span class="line"><span class="string">        :return: 模型</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.load_state_dict(torch.load(model_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, filename=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        保存模型，默认使用 &quot;模型名字 + 时间&quot; 作为文件名，也可以自定义</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            filename = <span class="string">&#x27;checkpoints/&#x27;</span> + <span class="variable language_">self</span>.model_name + <span class="string">&#x27;_&#x27;</span> + time.strftime(<span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span>) + <span class="string">&#x27;.pth&#x27;</span></span><br><span class="line">        torch.save(<span class="variable language_">self</span>.state_dict(), filename)</span><br><span class="line">        <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(<span class="title class_ inherited__">BasicModule</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="string">&#x27;Classification10Class&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">16</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">3</span> * <span class="number">3</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证网络正确性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    classification = Classification10Class()</span><br><span class="line">    <span class="comment"># 按照batch_size=64，channel=1，size=28 * 28输入</span></span><br><span class="line">    inputs = torch.ones((<span class="number">64</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">    outputs = classification(inputs)</span><br><span class="line">    <span class="built_in">print</span>(outputs.shape)</span><br></pre></td></tr></table></figure><h2 id="3-主程序">3 主程序</h2><p>主程序 <code>main.py</code> 包含了训练、验证和写入 tensorboard 可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> get_data <span class="keyword">import</span> getData</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    config._parse(kwargs)</span><br><span class="line">    classification = <span class="built_in">getattr</span>(models, config.model)()</span><br><span class="line">    classification.to(config.device)</span><br><span class="line"></span><br><span class="line">    train_dataset, test_dataset, train_dataloader, test_dataloader = getData()</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_dataset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 损失函数</span></span><br><span class="line">    loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 优化器</span></span><br><span class="line">    learning_rate = <span class="number">0.01</span></span><br><span class="line">    optimizer = torch.optim.SGD(</span><br><span class="line">        params=classification.parameters(),</span><br><span class="line">        lr=config.lr,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">    total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数 == epoch</span></span><br><span class="line">    epochs = config.max_epochs  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8. 开始训练</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练步骤</span></span><br><span class="line">        classification.train()</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">            <span class="comment"># 输入输出</span></span><br><span class="line">            images, targets = data</span><br><span class="line">            images, targets = images.to(config.device), targets.to(config.device)</span><br><span class="line"></span><br><span class="line">            outputs = classification(images)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 损失函数</span></span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 清零梯度</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 反向传播</span></span><br><span class="line">            loss.backward()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新参数</span></span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> total_train_step % config.print_feq == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">                writer.add_scalar(</span><br><span class="line">                    tag=<span class="string">&quot;train_loss (every 100 steps)&quot;</span>,</span><br><span class="line">                    scalar_value=loss.item(),</span><br><span class="line">                    global_step=total_train_step,</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">        classification.<span class="built_in">eval</span>()</span><br><span class="line">        total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">        total_accuracy = <span class="number">0</span>  <span class="comment"># 分类问题正确率</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">                images, targets = data</span><br><span class="line">                images, targets = images.to(config.device), targets.to(config.device)</span><br><span class="line"></span><br><span class="line">                outputs = classification(images)</span><br><span class="line"></span><br><span class="line">                loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">                total_test_loss += loss.item()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 正确率</span></span><br><span class="line">                accuracy = (outputs.argmax(axis=<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">                total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在测试集上的损失</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的 loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">        writer.add_scalar(</span><br><span class="line">            tag=<span class="string">&quot;test_loss (every epoch)&quot;</span>,</span><br><span class="line">            scalar_value=total_test_loss,</span><br><span class="line">            global_step=epoch,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在测试集上的正确率</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的正确率: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_accuracy / test_data_size))</span><br><span class="line">        writer.add_scalar(</span><br><span class="line">            tag=<span class="string">&quot;test_accuracy (every epoch)&quot;</span>,</span><br><span class="line">            scalar_value=total_accuracy / test_data_size,</span><br><span class="line">            global_step=epoch,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">        classification.save()  <span class="comment"># 保存</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line">    fire.Fire()</span><br></pre></td></tr></table></figure><h2 id="4-运行程序">4 运行程序</h2><p>使用 <code>fire</code> 包，从而实现终端训练。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>即可运行主程序的 <code>train</code> 函数。</p>]]></content>
    
    
    <summary type="html">本文介绍如何读取 MNIST 数据集，搭建 AlexNet 简单卷积神经网络，模型训练和验证。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>算法分析：原子操作与时间复杂度</title>
    <link href="https://blog.iskage.online/posts/45784f54.html"/>
    <id>https://blog.iskage.online/posts/45784f54.html</id>
    <published>2025-02-26T11:43:00.000Z</published>
    <updated>2025-02-26T10:12:31.180Z</updated>
    
    <content type="html"><![CDATA[<h1>算法分析：原子操作与时间复杂度</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><p>研究算法运行的时间非常重要，我们往往关注：</p><ol><li>算法运行时间与输入大小的关系</li><li>往往考虑最差的情况</li></ol><h2 id="1-实验研究">1 实验研究</h2><p>如果算法是准确的，且已经可以正常运行。可以采用最简单的方法检验时间，即直接计算算法执行的时间差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># run algorithm</span></span><br><span class="line"><span class="comment"># 算法执行</span></span><br><span class="line"></span><br><span class="line">end = time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br></pre></td></tr></table></figure><p>显然这种方法简单，但缺点明显【不推荐使用】：</p><ul><li>比较不同算法时，要控制硬件等条件相同</li><li>算法的输入可能并不够，例如对于巨量数据输入，每次都测试显然是不明智的</li><li>这个方法必须要求算法能过成功运行</li></ul><h2 id="2-原子操作">2 原子操作</h2><h3 id="2-1-伪代码">2.1 伪代码</h3><p>所以为了解决上面的问题，我们往往分析伪代码，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Algorithm method (arg [, arg, ...])</span><br><span class="line">Input: ...</span><br><span class="line">    Output: ...</span><br><span class="line">    <span class="comment"># 一些操作</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>不关注代码能否执行，只用于评价算法的好坏。</p><h3 id="2-2-原子操作">2.2 原子操作</h3><p>原子操作是算法进行的一些基本运算：</p><ul><li>在伪代码中可被识别出来（无须算法成立即可进行评价）</li><li>很大程度上独立于编程语言而存在（即适用于各种环境）</li><li>执行时间为常数（基本单元，与输入大小 <code>n</code> 无关）</li></ul><p>按照原子操作的观点，我们可以根据操作总时间与输入大小的关系，评价一个算法的好坏。即寻找某种函数关系：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t = f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> 为算法执行的时间，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 为算法输入的大小。下面是常见的函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span> 形式。</p><h2 id="3-常见函数">3 常见函数</h2><h3 id="3-1-常见-7-个函数">3.1 常见 7 个函数</h3><p>算法分析里常见的 7 个函数为：</p><ul><li>常数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">f(n) = C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>这表明，无论算法输入的大小 <code>n</code> 如何变化，算法所有原子操作的执行时间总和大约为一个常数。这是算法分析里最好的情况，表示这个算法非常的迅速。</p><ul><li>对数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，这里的对数底数并不重要。</p><ul><li>线性函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，添加常数系数不影响，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">C \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 等价于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 。</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = n \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 是一个比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 更小的函数，可以理解为</p><p>\lim_\limits{n \to \infty} \frac{\log n}{n} = 0</p><ul><li>二次函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">f(n) = n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>常见的输入大小为 <code>n</code> 却要执行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 次的算法为两层 <code>for</code> 循环（嵌套循环）。</p><ul><li>三次函数和其他多项式</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo>×</mo><mi>n</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>×</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>d</mi></msub><mo>×</mo><msup><mi>n</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">f(n) = a_0 + a_1 \times n + a_2 \times n^2 + \cdots + a_d \times n^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></p><p>与二次函数类似，这一类问题的操作数满足一个多项式函数。</p><ul><li>指数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">f(n) = b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 为某一个常数，指数增长非常迅速。</p><h3 id="3-2-比较增长率">3.2 比较增长率</h3><p>一般而言，我们希望</p><ul><li>数据结构的操作运行时间与常数函数或对数函数成正比</li><li>算法以线性函数或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 函数运行</li><li>运行时间与二次、三次函数相关的难以应对大规模输入数据的情形</li><li>指数函数则完全不可行</li></ul><p>使用双对数刻度画出这 7 个函数的图像，即可直观地体悟它们的增长速度。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740560780545.png" alt=""></p><blockquote><p>双对数刻度：指的是对坐标轴刻度进行放缩，按照 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>10</mn><mn>1</mn></msup><mo separator="true">,</mo><msup><mn>10</mn><mn>2</mn></msup><mo separator="true">,</mo><msup><mn>10</mn><mn>3</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">10^1, 10^2, 10^3, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 的数值等距标注刻度。</p></blockquote><h2 id="4-渐进分析">4 渐进分析</h2><p>实际分析中，我们不用求出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的确切表达。只需知道算法操作时间与哪个形式的函数成正比即可。</p><h3 id="4-1-大-O-符号">4.1 大 O 符号</h3><p><strong>定义</strong>：令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>:</mo><mi mathvariant="double-struck">N</mi><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">f(n),\ g(n): \N \to \R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">R</span></span></span></span> 的函数，如果对任意常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">c &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ，都存在整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 \geq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 使得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mtext>when  </mtext><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">f(n) \leq c \cdot g(n),\quad \text{when}\ \ n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">when</span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>成立，则称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span> 。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740564008502.png" alt="QQ_1740564008502" style="zoom:50%;" /><p>例如：对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">f(n) = 3n+5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span> 我们寻找 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>5</mn><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo>⋅</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = 3n+5 \leq c\cdot g(n) = c \cdot n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 不难发现，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><mo stretchy="false">[</mo><mfrac><mn>5</mn><mrow><mi>c</mi><mo>−</mo><mn>3</mn></mrow></mfrac><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>:</mo><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq [\frac{5}{c-3}] + 1 := n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2484em;vertical-align:-0.4033em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mbin mtight">−</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) \leq c\cdot g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。所以可知  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><h3 id="4-2-大-O-的性质">4.2 大 O 的性质</h3><p>大 O 符号能让我们忽略那些常量因子和低阶项。常见的有</p><ul><li>多项式保留最高阶即可</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo>×</mo><mi>n</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>×</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>d</mi></msub><mo>×</mo><msup><mi>n</mi><mi>d</mi></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mi>d</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(a_0 + a_1 \times n + a_2 \times n^2 + \cdots + a_d \times n^d) = O(n^d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 增长的更快</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + \log n) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 + n \log n) = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 次方求和</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><msup><mi>i</mi><mi>k</mi></msup><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n \ i^k = O(n^{k+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>指数项含有常数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>b</mi><mrow><mi>n</mi><mo>+</mo><mi>c</mi></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>b</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(b^{n+c}) = O(b^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0713em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>b</mi><mrow><mi>n</mi><mo>+</mo><mi>c</mi></mrow></msup><mo>=</mo><msup><mi>b</mi><mi>c</mi></msup><mo>⋅</mo><msup><mi>b</mi><mi>n</mi></msup><mo>:</mo><mo>=</mo><mi>C</mi><mo>⋅</mo><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">b^{n+c} = b^c \cdot b^{n} := C\cdot b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7713em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>但需要注意的是，不可以更换底数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>。</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740563935444.png" alt=""></p><h2 id="5-算法分析实例">5 算法分析实例</h2><h3 id="5-1-寻找最大数">5.1 寻找最大数</h3><p>输入一个列表，输出列表中的最大值。列表的长度可以理解为输入大小 <code>n</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_max</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; # 寻找最大数 # &quot;&quot;&quot;</span></span><br><span class="line">    biggest = data[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> val &gt; biggest:</span><br><span class="line">            biggest = val</span><br><span class="line">    <span class="keyword">return</span> biggest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(find_max(data))</span><br></pre></td></tr></table></figure><p>一层循环，所以大约执行 n 次。其他操作均为常数次，故这个算法时间复杂度为 <code>O(n)</code></p><h3 id="5-2-计算前缀平均值">5.2 计算前缀平均值</h3><p>输入一个列表，计算前 <code>i</code> 个数字的平均值。列表的长度可以理解为输入大小 <code>n</code> 。</p><h4 id="5-2-1-二次算法">5.2.1 二次算法</h4><p>整个列表循环一层，然后在循环中再次循环加和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_average1</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 计算前缀平均值 二次算法 &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    ave = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">            total += data[j]</span><br><span class="line">        ave.append(total / (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> ave</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(prefix_average1(data))</span><br></pre></td></tr></table></figure><p>第二层循环执行 i + 1 次，而 i 在第一层循环里从 0 到 n - 1 ，故整个算法操作次数大约为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{i=0}^{n-1}\ (i+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2537em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 省略低阶项，大致为 <code>O(n^2)</code></p><h4 id="5-2-2-线性算法">5.2.2 线性算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_average2</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 计算前缀平均值 线性算法 &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    ave = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total += data[i]</span><br><span class="line">        ave.append(total / (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> ave</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(prefix_average2(data))</span><br></pre></td></tr></table></figure><p>如此只有一层循环，大致为 <code>O(n)</code></p><h3 id="5-3-三集不相交">5.3 三集不相交</h3><p>输入三个序列 <code>A, B, C</code> ，输出是否存在交集。如果存在交集，则返回 <code>True</code> 否则返回 <code>False</code></p><h4 id="5-3-1-三层循环">5.3.1 三层循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disjoint1</span>(<span class="params">A, B, C</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 三集不相交 三层循环 O(n^3) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">                <span class="keyword">if</span> a == b == c:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">B = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">C = [<span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(disjoint1(A, B, C))</span><br></pre></td></tr></table></figure><p>显然，使用了三层循环。复杂度大致为 <code>O(n^3)</code> 。（准确而言应该为三个集合大小的乘积，但本质一样）</p><h4 id="5-3-2-循环中加入判断">5.3.2 循环中加入判断</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disjoint2</span>(<span class="params">A, B, C</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 三集不相交 循环中加入判断 O(n^3) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">if</span> a == b:</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">                    <span class="keyword">if</span> a == c:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">B = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br><span class="line">C = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(disjoint2(A, B, C))</span><br></pre></td></tr></table></figure><p>仍然为 <code>O(n^3)</code> 例如上面的例子，当 <code>A, B, C</code> 的相同元素在最后时，不得不完全遍历。</p><h3 id="5-4-元素唯一性">5.4 元素唯一性</h3><p>给定一个长为 <code>n</code> 的序列，判断是否元素互不相同，是则为 <code>True</code></p><h4 id="5-4-1-简单的迭代">5.4.1 简单的迭代</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique1</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 元素唯一性 简单迭代 O(n^2) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> data[i] == data[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(unique1(data))</span><br></pre></td></tr></table></figure><p>与 5.2.1 节 计算前缀平均值的二次算法类似，复杂度为 <code>O(n^2)</code></p><h4 id="5-4-2-先排序">5.4.2 先排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique2</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;元素唯一性 先排序 O(n * log n)&quot;&quot;&quot;</span></span><br><span class="line">    temp = <span class="built_in">sorted</span>(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(temp)):</span><br><span class="line">        <span class="keyword">if</span> temp[i] == temp[i - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(unique2(data))</span><br></pre></td></tr></table></figure><p>循环执行了 n 次，Python 内置的 sorted 方法执行了 log n 次，故最后的复杂度为 <code>O(n * log n)</code></p>]]></content>
    
    
    <summary type="html">研究算法运行的时间非常重要，我们往往关注：算法运行时间与输入大小的关系以及最差的情况。本文介绍大 O 符号和一些算法分析实例。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（9）数据处理：增删改</title>
    <link href="https://blog.iskage.online/posts/51c8092d.html"/>
    <id>https://blog.iskage.online/posts/51c8092d.html</id>
    <published>2025-02-25T09:43:00.000Z</published>
    <updated>2025-02-25T09:05:52.236Z</updated>
    
    <content type="html"><![CDATA[<h1>数据处理：增删改</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">b站尚硅谷宋红康 MySQL 课程</a>整理。</p><hr><p><a href="https://zhuanlan.zhihu.com/column/c_1864781236800720896">之前章节</a>介绍了如何查询数据，本章介绍数据处理里另外三个基本操作：增加、删除、更改数据库数据。</p><h2 id="1-增加数据">1 增加数据</h2><p>使用 <code>INSERT INTO</code> 语句向数据表里插入数据。</p><h3 id="1-1-VALUES-方法">1.1 <code>VALUES</code> 方法</h3><ul><li>按照列名默认顺序插入数据</li></ul><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2, ...);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据，默认顺序</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;IT&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入空值</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><ul><li>指定列名插入</li></ul><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line">(列名<span class="number">1</span>, 列名<span class="number">2</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2);</span><br></pre></td></tr></table></figure><blockquote><p>指定列名进行插入，顺序默认，未插入的列按照创建表时的默认值填充。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line">(dept_name, location)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;MKT&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> MKT       <span class="operator">|</span> Beijing  <span class="operator">|</span>  <span class="comment">-- dept_id 是创建时的主键，默认安装数字递增</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><ul><li>插入多条数据</li></ul><p>以上两个方法都可以通过使用 <code>,</code> 分隔的方式插入多条数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2, ...),</span><br><span class="line">   (val1, val2, ...),</span><br><span class="line">   ...</span><br><span class="line">   (val1, val2, ...);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2),</span><br><span class="line">       (val1, val2),</span><br><span class="line">       ...</span><br><span class="line">       (val1, val2);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;SALE&#x27;</span>, <span class="string">&#x27;Guangzhou&#x27;</span>),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;FINA&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>),</span><br><span class="line">       (<span class="number">6</span>, <span class="string">&#x27;MANA&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept(dept_id, dept_name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;IT&#x27;</span>),</span><br><span class="line">       (<span class="number">8</span>, <span class="string">&#x27;ACCT&#x27;</span>),</span><br><span class="line">       (<span class="number">9</span>, <span class="string">&#x27;LAW&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740470744341.png" alt=""></p><blockquote><p><code>VALUES</code> 关键字等价于 <code>VALUE</code> 关键字</p><p>字符和日期类型数据写在 <code>' '</code> 内</p></blockquote><h3 id="1-2-将查询结果增加到表中">1.2 将查询结果增加到表中</h3><p>使用 <code>INSERT</code> 语句和 <code>SELECT</code> 语句的组合实现先查询后增加。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 目标表</span><br><span class="line">(列名<span class="number">1</span>, 列名<span class="number">2</span>, ...)  <span class="comment">-- 可选</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">列名<span class="number">1</span>, 列名<span class="number">2</span>, ...  <span class="comment">-- 或者选择一些列</span></span><br><span class="line"><span class="keyword">FROM</span> 被查询的表</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>不需要 <code>VALUES</code> 子句，但是需要查询结果与 INSERT 目标表列相对应</li></ul><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line">    (dept_name, location)</span><br><span class="line"><span class="keyword">SELECT</span> dept_name,</span><br><span class="line">       location</span><br><span class="line"><span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740471589785.png" alt=""></p><h2 id="2-更新数据">2 更新数据</h2><p><code>UPDATE</code> 语句对数据表数据进行修改。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> 列名<span class="number">1</span><span class="operator">=</span>val1, 列名<span class="number">2</span><span class="operator">=</span>val2, ...</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>如果需要备份/回滚，提取设置</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> AUTOCOMMIT <span class="operator">=</span> <span class="literal">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UPDATE 语句 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;  <span class="comment">-- ROLLBACK 后，更新结果被撤回</span></span><br></pre></td></tr></table></figure><p>例如：更新 dept_id = 3 的 dept_name 为 IT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> dept</span><br><span class="line"><span class="keyword">SET</span> dept_name <span class="operator">=</span> <span class="string">&#x27;IT&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>如果不加入 <code>WHERE</code> 语句的条件，则会对整列进行修改。</li></ul><blockquote><p>【注意】对主键、外键更新时需要先确认是否正确。例如修改后的外键并不存在，则会报错！</p></blockquote><ul><li>更新的表达式也可以使用列名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> a <span class="operator">+</span> <span class="number">100</span>  <span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="3-删除数据">3 删除数据</h2><p>使用 <code>DELETE</code> 语句删除一行数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>如果不加入条件，则会清空表中数据（表仍然存在）</li></ul><p>例如：删除 id 为 10 的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】同样地，删除主键和外键都会带来问题，需要先处理关联表之间的联系，再进行删除。</p></blockquote><h2 id="4-计算列">4 计算列</h2><p>类似与 Excel 表格，由几列计算得到另一列。这样被计算得到的列称为计算列。在 <code>MySQL 8.0</code> 中，支持在 <code>CREATE</code> 和 <code>ALTER</code> 语句中定义计算列。</p><p>例如：创建一个新表，定义唯一主键 <code>id</code> ，以及用于计算的 <code>a</code> 和 <code>b</code> 两列。以及计算列 <code>c</code> 其中 <code>c = a + b</code> 即 c 列的数据由 a 列数据与 b 列数据相加得到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> calculate</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    a  <span class="type">INT</span>,</span><br><span class="line">    b  <span class="type">INT</span>,</span><br><span class="line">    c  <span class="type">INT</span> GENERATED ALWAYS <span class="keyword">AS</span> (a <span class="operator">+</span> b) VIRTUAL,</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>插入数据前，需要先创建表。使用计算列的前提是，必须在表的定义中指明哪一列计算列、如何计算得到。可以在创建 <code>CREATE</code> 时指明，也可以在后续修改表 <code>ALTER</code> 时指明。</p></blockquote><p>在表和计算列被定义好后，使用 <code>INSERT</code> 语句插入数据，MySQL 会自动进行计算填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> calculate</span><br><span class="line">    (a, b)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">100</span>, <span class="number">200</span>),</span><br><span class="line">       (<span class="number">120</span>, <span class="number">310</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740473410739.png" alt=""></p><p>更新数据时，同样会自动更新计算结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> calculate</span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> <span class="number">-100</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740473493702.png" alt=""></p><blockquote><p>但是不能对计算列进行修改数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> calculate</span><br><span class="line"><span class="keyword">SET</span> c <span class="operator">=</span> <span class="number">-100</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">3105</span> (HY000): The <span class="keyword">value</span> specified <span class="keyword">for</span> generated <span class="keyword">column</span> <span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> <span class="keyword">table</span> <span class="string">&#x27;calculate&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍数据处理里另外三个基本操作：增加、删除、更改数据库数据。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>搭建神经网络 PyTorch 实战：猫狗分类问题训练全流程</title>
    <link href="https://blog.iskage.online/posts/c89b028f.html"/>
    <id>https://blog.iskage.online/posts/c89b028f.html</id>
    <published>2025-02-25T05:32:00.000Z</published>
    <updated>2025-02-25T05:19:35.740Z</updated>
    
    <content type="html"><![CDATA[<h1>搭建神经网络 PyTorch 实战: 猫狗分类问题训练全流程</h1><p>根据之前的知识 <a href="https://zhuanlan.zhihu.com/column/c_1864780737208799232">专栏：PyTorch 教程</a>，本文将一步一步详细介绍如何获取数据，自定义数据集，搭建神经网络，训练、验证和测试结果的全流程。针对的问题是 kaggle 经典竞赛：猫狗二分类问题（<a href="https://www.kaggle.com/competitions/dog-vs-cat-classification">dog-vs-cat-classification</a>）</p><p>相关代码均已开源在我的 Github 库 <a href="https://github.com/isKage/dog-vs-cat-classification">https://github.com/isKage/dog-vs-cat-classification</a> 。【注意】代码只是用于介绍搭建网络、训练模型，实际参考网络效果极差，不建议使用。文章根据 <a href="https://github.com/chenyuntc/pytorch-book">深度学习框架PyTorch：入门与实践 (陈云) </a> 整理。</p><p>注意数据集较大，如果想要训练出结果需要 GPU。如果只是学习如何训练搭建网络等流程，可以自己在根目录下创建 <code>AllData</code> 文件夹，模拟数据集文件结构放入部分图片。</p><p>如果想直接运行我的 Github 代码，还可以阅读 <a href="https://github.com/isKage/dog-vs-cat-classification/blob/main/README.md">README.md</a> 文档。</p><h2 id="0-项目目录">0 项目目录</h2><p>如果直接下载我的 Github 源码。进入一个空目录后，打开终端输入【或者跟着后文一步一步编写】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/dog-vs-cat-classification.git</span><br></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AllData  <span class="comment"># 数据集存放</span></span><br><span class="line">├── README.md</span><br><span class="line">├── checkpoints  <span class="comment"># 训练好的模型        【需要自己创建】</span></span><br><span class="line">├── config.py  <span class="comment"># 配置文件，如何创建见下  【需要自己创建】</span></span><br><span class="line">├── data  <span class="comment"># 自定义数据集处理包</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   │   └── dataset.cpython-312.pyc</span><br><span class="line">│   └── dataset.py</span><br><span class="line">├── logs  <span class="comment"># 存放 tensorboard logs 文件 【需要自己创建】</span></span><br><span class="line">├── main.py  <span class="comment"># 主程序</span></span><br><span class="line">├── models  <span class="comment"># 网络模型定义</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── basic.py</span><br><span class="line">│   └── cnn.py</span><br><span class="line">├── notes  <span class="comment"># 一些笔记</span></span><br><span class="line">│   ├── kaggle_download.md</span><br><span class="line">│   └── note06_dog_vs_cat.md</span><br><span class="line">├── requirements.txt  <span class="comment"># 依赖包</span></span><br><span class="line">├── result.csv  <span class="comment"># 预测/测试结果</span></span><br><span class="line">└── utils  <span class="comment"># 一些辅助包</span></span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── visualizer.py  <span class="comment"># 封装可视化功能</span></span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="1-获取数据">1 获取数据</h2><p>从 kaggle 官网下载数据集，可以自定义数据集的统一放置路径，方便未来训练使用。具体教程见：<a href="https://zhuanlan.zhihu.com/p/25732245405">从 Kaggle 下载数据集（mac 和 win 端）</a></p><p>下载后解压，数据集结构大致为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dog-vs-cat-classification</span><br><span class="line">├── dog-vs-cat-classification.zip</span><br><span class="line">├── sample_submission.csv</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   └── <span class="built_in">test</span> <span class="comment"># 测试图片</span></span><br><span class="line">└── train</span><br><span class="line">    └── train  <span class="comment"># 训练图片</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740458311037.png" alt=""></p><h2 id="2-自定义数据集">2 自定义数据集</h2><p>根据如上的数据集文件结构，我们自定义数据集 Dataset 类。相关教程见：<a href="https://zhuanlan.zhihu.com/p/23210343084">数据处理：Dataset 类和 Dataloader 类</a>。</p><p>定义 Python 函数包 <code>data</code> ，结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">├── __init__.py  <span class="comment"># 初始化包</span></span><br><span class="line">└── dataset.py  <span class="comment"># 自定义的 dataset 类</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>__init__.py</code> 声明 <code>data</code> 文件夹视为 Python 的程序包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .dataset <span class="keyword">import</span> DogVsCatDataset</span><br></pre></td></tr></table></figure><p>其中 <code>.dataset</code> 指向文件 <code>dataset.py</code> 而 <code>DogVsCatDataset</code> 为我们在 <code>dataset.py</code> 中自定义的类</p><p>如此就可以在其他程序里使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> DogVsCatDataset</span><br></pre></td></tr></table></figure><ul><li><code>dataset.py</code> 中定义读取猫狗分类问题的数据集 Dataset 类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataset.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogVsCatDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载猫狗数据集&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root, trans=<span class="literal">None</span>, mode=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param root: 数据集文件路径</span></span><br><span class="line"><span class="string">        :param trans: 变换操作</span></span><br><span class="line"><span class="string">        :param mode: [&#x27;train&#x27;, &#x27;val&#x27;, &#x27;test&#x27;]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> mode <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;val&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]  <span class="comment"># 判断 mode 是否合法，否则报错</span></span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode != <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="comment"># 训练集和验证集要把猫狗训练数据都获取</span></span><br><span class="line">            root = os.path.join(root, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">            img_dir_dict = [os.path.join(root, <span class="string">&#x27;cats&#x27;</span>, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root, <span class="string">&#x27;cats&#x27;</span>))]</span><br><span class="line">            img_dir_dict += [os.path.join(root, <span class="string">&#x27;dogs&#x27;</span>, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root, <span class="string">&#x27;dogs&#x27;</span>))]</span><br><span class="line">            random.shuffle(img_dir_dict)  <span class="comment"># 猫狗图片打乱</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 测试集路径不同</span></span><br><span class="line">            root = os.path.join(root, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">            img_dir_dict = [os.path.join(root, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root))]</span><br><span class="line"></span><br><span class="line">        img_num = <span class="built_in">len</span>(img_dir_dict)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存入图片路径</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict</span><br><span class="line">        <span class="comment"># 划分数据集</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.mode == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict[:<span class="built_in">int</span>(img_num * <span class="number">0.7</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict[<span class="built_in">int</span>(img_num * <span class="number">0.7</span>):]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> trans <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 数据转换操作，测试、验证和训练集的数据转换有所区别</span></span><br><span class="line">            normalize = transforms.Normalize(</span><br><span class="line">                mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], </span><br><span class="line">                std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 测试集 test 和验证集 val 不需要数据增强</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;test&quot;</span> <span class="keyword">or</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;val&quot;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.trans = transforms.Compose([</span><br><span class="line">                    transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                    transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                    transforms.ToTensor(),</span><br><span class="line">                    normalize</span><br><span class="line">                ])</span><br><span class="line">            <span class="comment"># 训练集 需要数据增强</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.trans = transforms.Compose([</span><br><span class="line">                    transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                    transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">                    transforms.RandomHorizontalFlip(),</span><br><span class="line">                    transforms.ToTensor(),</span><br><span class="line">                    normalize</span><br><span class="line">                ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        真正开始读取数据，对于测试集 test 返回 id，如 100.jpg 返回 100</span></span><br><span class="line"><span class="string">        :param index: 图片下标</span></span><br><span class="line"><span class="string">        :return: 返回张量数据和标签</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        img_path = <span class="variable language_">self</span>.img_dir_dict[index]</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">            label = <span class="built_in">int</span>(os.path.basename(img_path).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># dog is 1, cat is 0</span></span><br><span class="line">            label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> os.path.basename(img_path).split(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取图片</span></span><br><span class="line">        data = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        data = <span class="variable language_">self</span>.trans(data)</span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回图片个数</span></span><br><span class="line"><span class="string">        :return: 数据集大小</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.img_dir_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = <span class="string">&quot;../AllData/competitions/dog-vs-cat-classification&quot;</span></span><br><span class="line">    train_dataset = DogVsCatDataset(root, mode=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    test_dataset = DogVsCatDataset(root, mode=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(train_dataset))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(test_dataset))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(os.path.basename(train_dataset.img_dir_dict[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(os.path.basename(test_dataset.img_dir_dict[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="3-搭建网络模型">3 搭建网络模型</h2><p>创建 Python 包 <code>models</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">models</span><br><span class="line">├── __init__.py</span><br><span class="line">├── basic.py</span><br><span class="line">└── cnn.py</span><br></pre></td></tr></table></figure><ul><li>同样地，使用 <code>__init__.py</code> 声明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .cnn <span class="keyword">import</span> AlexNetClassification</span><br></pre></td></tr></table></figure><ul><li>为了方便的保存模型和加载模型，我们定义一个基类，继承 <code>nn.Module</code> 提前添加 <code>save</code> 和 <code>load</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># basic.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicModule</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作为基类，继承 nn.Module 但增加了模型保存和加载功能 save and load</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="built_in">str</span>(<span class="built_in">type</span>(<span class="variable language_">self</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, model_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据模型路径加载模型</span></span><br><span class="line"><span class="string">        :param model_path: 模型路径</span></span><br><span class="line"><span class="string">        :return: 模型</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.load_state_dict(torch.load(model_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, filename=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        保存模型，默认使用 &quot;模型名字 + 时间&quot; 作为文件名，也可以自定义</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            filename = <span class="string">&#x27;checkpoints/&#x27;</span> + <span class="variable language_">self</span>.model_name + <span class="string">&#x27;_&#x27;</span> + time.strftime(<span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span>) + <span class="string">&#x27;.pth&#x27;</span></span><br><span class="line">        torch.save(<span class="variable language_">self</span>.state_dict(), filename)</span><br><span class="line">        <span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure><ul><li>然后定义真正的网络模型，我们这使用了最传统简单的 AlexNet 网络【故效果不佳，可以前往 kaggle 查看更好的模型】，神经网络搭建教程可见：<a href="https://zhuanlan.zhihu.com/p/22793450207">利用 torch.nn 搭建神经网络</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cnn.py</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .basic <span class="keyword">import</span> BasicModule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlexNetClassification</span>(<span class="title class_ inherited__">BasicModule</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes=<span class="number">2</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(AlexNetClassification, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="string">&#x27;CNNClassification&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 特征提取部分</span></span><br><span class="line">        <span class="variable language_">self</span>.features = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">11</span>, stride=<span class="number">4</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">192</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">192</span>, <span class="number">384</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">384</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分类部分</span></span><br><span class="line">        <span class="variable language_">self</span>.classifier = nn.Sequential(</span><br><span class="line">            nn.Dropout(),</span><br><span class="line">            nn.Linear(<span class="number">256</span> * <span class="number">6</span> * <span class="number">6</span>, <span class="number">4096</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Dropout(),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, num_classes),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.features(x)</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)</span><br><span class="line">        x = <span class="variable language_">self</span>.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="4-可视化插件">4 可视化插件</h2><p>为了方便直观地观测训练过程，我们可以提前自定义一个可视化的 Python 包，如上一样的套路</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">utils</span><br><span class="line">├── __init__.py</span><br><span class="line">└── visualizer.py</span><br></pre></td></tr></table></figure><ul><li><code>__init__py</code>  声明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .visualizer <span class="keyword">import</span> Visualizer</span><br></pre></td></tr></table></figure><ul><li><code>visualizer.py</code> 中封装可视化的类，这里使用的是 Tensorboard ，具体教程可见：<a href="https://zhuanlan.zhihu.com/p/23467081773">可视化工具：Tensorboard</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visualizer</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    封装了基本的 TensorBoard 操作。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, log_dir</span>):</span><br><span class="line">        <span class="comment"># 初始化 TensorBoard SummaryWriter</span></span><br><span class="line">        <span class="variable language_">self</span>.writer = SummaryWriter(log_dir=log_dir)</span><br><span class="line">        <span class="variable language_">self</span>.index = &#123;&#125;  <span class="comment"># 用于追踪图表的点</span></span><br><span class="line">        <span class="variable language_">self</span>.log_text = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 用于记录日志信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reinit</span>(<span class="params">self, log_dir, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        重新初始化 TensorBoard writer，并设置新的日志目录。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.writer = SummaryWriter(log_dir=log_dir)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plot</span>(<span class="params">self, name, y, step=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将标量值记录到 TensorBoard。</span></span><br><span class="line"><span class="string">        例如：plot(&#x27;loss&#x27;, 1.00)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(name, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_scalar(name, y, step)</span><br><span class="line">        <span class="variable language_">self</span>.index[name] = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">img</span>(<span class="params">self, name, img_, step=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将图像记录到 TensorBoard。</span></span><br><span class="line"><span class="string">        img_ 应该是一个张量（例如，torch.Tensor）。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(name, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_images(name, img_, step)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">self, info, step=<span class="literal">None</span>, win=<span class="string">&#x27;log_text&#x27;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        记录信息为文本（可选）。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(win, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.log_text += (<span class="string">&#x27;[&#123;time&#125;] &#123;info&#125; &lt;br&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            time=time.strftime(<span class="string">&#x27;%m%d_%H%M%S&#x27;</span>),</span><br><span class="line">            info=info))</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_text(win, <span class="variable language_">self</span>.log_text, step)</span><br><span class="line">        <span class="variable language_">self</span>.index[win] = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        允许访问其他 TensorBoard writer 的函数。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(<span class="variable language_">self</span>.writer, name)</span><br></pre></td></tr></table></figure><blockquote><p>使用 tensorboard ：下载 tensorboard ，程序完成后使用命令开启</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=./logs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740458248881.png" alt=""></p><h2 id="5-config-本地配置和-fire-包">5 config 本地配置和 fire 包</h2><h3 id="5-1-config-本地配置">5.1 config 本地配置</h3><p>创建 <code>config.py</code> 用于提取写好训练的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultConfig</span>:</span><br><span class="line">    model = <span class="string">&#x27;AlexNetClassification&#x27;</span></span><br><span class="line">    root = <span class="string">&#x27;./AllData/competitions/dog-vs-cat-classification&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取最新的文件</span></span><br><span class="line">    param_path = <span class="string">&#x27;./checkpoints/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.listdir(param_path):</span><br><span class="line">        load_model_path = <span class="literal">None</span>  <span class="comment"># 加载预训练的模型的路径，为None代表不加载</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        load_model_path = os.path.join(</span><br><span class="line">            param_path,</span><br><span class="line">            <span class="built_in">sorted</span>(</span><br><span class="line">                os.listdir(param_path),</span><br><span class="line">                key=<span class="keyword">lambda</span> x: datetime.strptime(</span><br><span class="line">                    x.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.pth&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )[-<span class="number">1</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        use_gpu = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        use_gpu = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    num_workers = <span class="number">0</span></span><br><span class="line">    print_freq = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    max_epochs = <span class="number">10</span></span><br><span class="line">    lr = <span class="number">0.003</span></span><br><span class="line">    lr_decay = <span class="number">0.5</span>  <span class="comment"># when val_loss increase, lr = lr*lr_decay</span></span><br><span class="line">    weight_decay = <span class="number">0e-5</span>  <span class="comment"># 损失函数</span></span><br><span class="line"></span><br><span class="line">    tensorboard_log_dir = <span class="string">&#x27;./logs&#x27;</span></span><br><span class="line"></span><br><span class="line">    result_file = <span class="string">&#x27;result.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据字典kwargs 更新 config参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, k):</span><br><span class="line">                warnings.warn(<span class="string">&quot;Warning: opt has not attribute %s&quot;</span> % k)</span><br><span class="line">            <span class="built_in">setattr</span>(<span class="variable language_">self</span>, k, v)</span><br><span class="line"></span><br><span class="line">        config.device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span>) <span class="keyword">if</span> config.use_gpu <span class="keyword">else</span> torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;user config:&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="variable language_">self</span>.__class__.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(k, <span class="built_in">getattr</span>(<span class="variable language_">self</span>, k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = DefaultConfig()</span><br></pre></td></tr></table></figure><h3 id="5-2-fire-包">5.2 fire 包</h3><p><code>fire</code> 包能够在终端直接进行传参和训练。先下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fire</span><br></pre></td></tr></table></figure><p>而后当主程序 <code>main.py</code> 中定义了训练、测试、验证函数时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">val</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>于是可以在终端中使用如下方法进行训练和传入参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train --参数1=&lt;param&gt; --参数2=&lt;param&gt;</span><br></pre></td></tr></table></figure><h2 id="6-主程序">6 主程序</h2><h3 id="6-1-训练和验证函数">6.1 训练和验证函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> DogVsCatDataset</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> Visualizer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="comment"># 根据命令行参数更新配置</span></span><br><span class="line">    config._parse(kwargs)</span><br><span class="line">    vis = Visualizer(log_dir=config.tensorboard_log_dir)  <span class="comment"># 使用 TensorBoard</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step1: 模型</span></span><br><span class="line">    model = <span class="built_in">getattr</span>(models, config.model)()</span><br><span class="line">    model.to(config.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2: 数据</span></span><br><span class="line">    train_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;train&quot;</span>)</span><br><span class="line">    val_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;val&quot;</span>)</span><br><span class="line">    train_dataloader = DataLoader(train_data, config.batch_size, shuffle=<span class="literal">True</span>, num_workers=config.num_workers)</span><br><span class="line">    val_dataloader = DataLoader(val_data, config.batch_size, shuffle=<span class="literal">False</span>, num_workers=config.num_workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step3: 目标函数和优化器</span></span><br><span class="line">    criterion = torch.nn.CrossEntropyLoss()</span><br><span class="line">    lr = config.lr</span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=config.weight_decay)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化误差</span></span><br><span class="line">    previous_loss = <span class="number">1e10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(config.max_epochs):</span><br><span class="line">        epoch_loss = <span class="number">0</span>  <span class="comment"># 记录当前 epoch 的平均损失</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ii, (data, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_dataloader):</span><br><span class="line">            <span class="comment"># 训练模型参数</span></span><br><span class="line">            inputs = data.to(config.device)</span><br><span class="line">            target = label.to(config.device)</span><br><span class="line"></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            score = model(inputs)</span><br><span class="line">            loss = criterion(score, target)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            epoch_loss += loss.item()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录损失到 TensorBoard</span></span><br><span class="line">            <span class="keyword">if</span> (ii + <span class="number">1</span>) % config.print_freq == <span class="number">0</span>:</span><br><span class="line">                vis.plot(<span class="string">&#x27;loss&#x27;</span>, loss.item(), step=epoch * <span class="built_in">len</span>(train_dataloader) + ii)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        model.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在每个 epoch 结束后验证模型</span></span><br><span class="line">        val_accuracy = val(model, val_dataloader)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Validation Accuracy: <span class="subst">&#123;val_accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        vis.plot(<span class="string">&#x27;val_accuracy&#x27;</span>, val_accuracy, step=epoch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录训练日志</span></span><br><span class="line">        vis.log(</span><br><span class="line">            <span class="string">f&quot;epoch:<span class="subst">&#123;epoch&#125;</span>, lr:<span class="subst">&#123;lr&#125;</span>, loss:<span class="subst">&#123;epoch_loss / <span class="built_in">len</span>(train_dataloader):<span class="number">.4</span>f&#125;</span>, val_accuracy:<span class="subst">&#123;val_accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新学习率</span></span><br><span class="line">        <span class="keyword">if</span> epoch_loss / <span class="built_in">len</span>(train_dataloader) &gt; previous_loss:</span><br><span class="line">            lr = lr * config.lr_decay</span><br><span class="line">            <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">                param_group[<span class="string">&#x27;lr&#x27;</span>] = lr</span><br><span class="line"></span><br><span class="line">        previous_loss = epoch_loss / <span class="built_in">len</span>(train_dataloader)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">val</span>(<span class="params">model, dataloader</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算模型在验证集上的准确率等信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii, (val_input, label) <span class="keyword">in</span> tqdm(<span class="built_in">enumerate</span>(dataloader)):</span><br><span class="line">        val_input = val_input.to(config.device)</span><br><span class="line">        label = label.to(config.device)</span><br><span class="line">        score = model(val_input)</span><br><span class="line">        _, predicted = score.<span class="built_in">max</span>(<span class="number">1</span>)</span><br><span class="line">        total += label.size(<span class="number">0</span>)</span><br><span class="line">        correct += (predicted == label).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    model.train()</span><br><span class="line">    accuracy = <span class="number">100.</span> * correct / total</span><br><span class="line">    <span class="keyword">return</span> accuracy</span><br></pre></td></tr></table></figure><h3 id="6-2-测试和写入结果函数">6.2 测试和写入结果函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    config._parse(kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># configure model</span></span><br><span class="line">    model = <span class="built_in">getattr</span>(models, config.model)().<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">if</span> config.load_model_path:</span><br><span class="line">        model.load(config.load_model_path)</span><br><span class="line"></span><br><span class="line">    model.to(config.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data</span></span><br><span class="line">    test_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    test_dataloader = DataLoader(test_data, batch_size=config.batch_size, shuffle=<span class="literal">False</span>, num_workers=config.num_workers)</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> ii, (data, path) <span class="keyword">in</span> tqdm(<span class="built_in">enumerate</span>(test_dataloader)):</span><br><span class="line">        inputs = data.to(config.device)</span><br><span class="line">        score = model(inputs)</span><br><span class="line"></span><br><span class="line">        predicted_label = score.<span class="built_in">max</span>(dim=<span class="number">1</span>)[<span class="number">1</span>].detach().tolist()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果你要保存为 id, label 的格式，修改为：</span></span><br><span class="line">        batch_results = [(path_.item(), label_) <span class="keyword">for</span> path_, label_ <span class="keyword">in</span> <span class="built_in">zip</span>(path, predicted_label)]</span><br><span class="line"></span><br><span class="line">        results += batch_results</span><br><span class="line"></span><br><span class="line">    write_csv(results, config.result_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_csv</span>(<span class="params">results, file_name</span>):</span><br><span class="line">    <span class="keyword">import</span> csv</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;label&#x27;</span>])</span><br><span class="line">        writer.writerows(results)</span><br></pre></td></tr></table></figure><p>最后使用 fire 包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line">    fire.Fire()</span><br></pre></td></tr></table></figure><h2 id="7-训练和预测过程">7 训练和预测过程</h2><h3 id="7-1-开始训练">7.1 开始训练</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>一定要先定义好参数和数据集路径。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/47ef5337feb656be8b726fe2cdcf8f6f_720.png" alt=""></p><h3 id="7-2-测试">7.2 测试</h3><p>在上面训练结束后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="7-3-结果">7.3 结果</h3><p>得到结果，写入了 <code>result.csv</code> ，之后可以提交到 kaggle</p>]]></content>
    
    
    <summary type="html">本文将一步一步详细介绍如何获取数据，自定义数据集，搭建神经网络，训练、验证和测试结果的全流程。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>从 Kaggle 下载数据集（mac 和 win 端）</title>
    <link href="https://blog.iskage.online/posts/86ecc33b.html"/>
    <id>https://blog.iskage.online/posts/86ecc33b.html</id>
    <published>2025-02-23T02:27:00.000Z</published>
    <updated>2025-02-22T09:56:27.594Z</updated>
    
    <content type="html"><![CDATA[<h1>从 Kaggle 下载数据集</h1><p>Kaggle 是全球最大的数据科学社区，里面具有丰富的数据集和相关教程代码，是所有数据科学相关专业和从业人员必须熟悉的网站。</p><p>本文介绍如何使用终端/命令行工具从 Kaggle 下载数据（mac 和 win 系统）。官网地址 <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p><hr><h2 id="1-注册-kaggle-账户">1 注册 kaggle 账户</h2><p>进入官网地址 <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215562957.png" alt=""></p><p>点击【Register】注册</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215612893.png" alt=""></p><p>可以选择 Google 账户登陆（【推荐】），或换邮箱注册。</p><h2 id="2-下载-API-Token">2 下载 API Token</h2><p>点击右侧头像，选择【Settings】，找到【API】，点击【Create New Token】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215710310.png" alt=""></p><p>点击后会下载一个 <code>kaggle.json</code> 文件，保存好这个文件，等会使用。</p><h2 id="3-安装-kaggle-包">3 安装 kaggle 包</h2><p>新建虚拟环境，并在虚拟环境中下载安装 kaggle 包</p><blockquote><p>虚拟环境是可选，但推荐在虚拟环境中操作，有利于后续管理。有关如何搭建虚拟环境可见教程 <a href="https://zhuanlan.zhihu.com/p/21629604277">Conda 创建虚拟环境全流程</a></p></blockquote><p>使用 <code>pip</code> 下载，在终端中（激活环境后）输入，然后回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kaggle</span><br></pre></td></tr></table></figure><p>完成后可以继续输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions list</span><br></pre></td></tr></table></figure><p>此时应该无法正常使用 kaggle ，需要我们去往用户目录下配置。</p><h2 id="4-配置-kaggle">4 配置 <code>.kaggle</code></h2><h3 id="4-1-MacOS-系统">4.1 MacOS 系统</h3><p>对于 mac 系统，前往用户目录下。一般为 <code>~</code> 或 <code>/Users/&lt;你的用户名&gt;</code> ，在终端 (Terminal) 中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><blockquote><p>一般默认打开终端就已经是位于用户目录下</p></blockquote><p>此时显示如下，表示成功进入用户目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;你的用户名&gt;@MacBook ~ % </span><br></pre></td></tr></table></figure><p>然后再输入如下指令，就可以打开文件夹 <code>.kaggle</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .kaggle</span><br></pre></td></tr></table></figure><p>此时再把第二步下载的 API Token 文件 <code>kaggle.json</code> 移入 <code>.kaggle</code> 文件夹。</p><blockquote><p>对于 mac 用户打开用户目录比较复杂。<code>open 文件夹名</code> 指令能直接以资源管理器的方式打开。</p><p>与此同时，mac 还会默认隐藏一些文件夹，例如这里的 <code>.kaggle</code> ，可以在进入目录之后，同时按下键盘的 <code>cmd + shift + .</code> 就可以查看隐藏的文件和文件夹。</p></blockquote><ul><li>此时便可以正常使用 kaggle</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions list</span><br></pre></td></tr></table></figure><blockquote><p>如果实在虚拟环境中 pip 安装的 kaggle ，需要激活虚拟环境才能正常使用。</p></blockquote><h3 id="4-2-Windows-系统">4.2 Windows 系统</h3><p>Windows 系统操作与 mac 相同，而且寻找用户文件夹更为简单。（类似地，【推荐】在虚拟环境里操作）</p><ul><li>如果使用 PowerShell 终端的话，指令相同，只是用户目录一般为</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\&lt;你的用户名&gt;</span><br></pre></td></tr></table></figure><p>然后打开文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer .kaggle</span><br></pre></td></tr></table></figure><p>相同地，将 <code>kaggle.json</code> 文件移入 <code>.kaggle</code> 文件夹。</p><ul><li>或者直接点击【C 盘】，点击【Users】，进入【&lt;你的用户名&gt;】，找到【.kaggle】文件夹实行与上面相同的操作。Windows 电脑一般不会隐藏文件。</li></ul><h2 id="5-配置-kaggle-数据集下载路径">5 配置 kaggle 数据集下载路径</h2><p>我们希望数据能下载在同一处文件夹内，方便以后程序的读取，而不用每次都在不同的地方下载数据，这会造成电脑存储空间的浪费。</p><p>这一步操作 mac 和 win 系统没有区别，只是路径的书写要注意。</p><ul><li>打开【.kaggle】文件夹内的【kaggle.json】文件进行编辑。</li></ul><p>原始 <code>kaggle.json</code> 文件默认为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此时在文件中添加一行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># mac</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/用户名/AllData&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># win</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\AllData&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如此以后所有的数据都会下载在 <code>/Users/用户名/AllData</code> AllData 文件夹里。（win 可以存放在 D 盘，注意要使用两个反斜杠 <code>\\</code> ）</p><h2 id="6-从-kaggle-官网下载数据">6 从 kaggle 官网下载数据</h2><p>在上面都配置好后，可以前往 kaggle 官网下载数据。下面以猫狗分类竞赛数据集为例，地址 <a href="https://www.kaggle.com/competitions/dog-vs-cat-classification/data">dog-vs-cat-classification</a></p><ul><li>找到【Data】界面，然后向下翻找 kaggle 命令</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740217509899.png" alt=""></p><p>例如此处输入如下，就可以正常下载了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions download -c dog-vs-cat-classification</span><br></pre></td></tr></table></figure><p>下载完成后去往我们设置的 AllData 文件夹查看数据集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AllData</span><br><span class="line">└── competitions</span><br><span class="line">    └── dog-vs-cat-classification</span><br><span class="line">        └── dog-vs-cat-classification.zip</span><br></pre></td></tr></table></figure><p>会得到一个 <code>.zip</code> 文件，解压后即为数据集。</p>]]></content>
    
    
    <summary type="html">本文介绍如何使用终端/命令行工具从 Kaggle 下载数据（mac 和 win 系统）。包括教学如何下载、安装和配置 kaggle。</summary>
    
    
    
    <category term="Kaggle" scheme="https://blog.iskage.online/categories/Kaggle/"/>
    
    
    <category term="kaggle" scheme="https://blog.iskage.online/tags/kaggle/"/>
    
    <category term="数据集" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
    <category term="虚拟环境" scheme="https://blog.iskage.online/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="conda" scheme="https://blog.iskage.online/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>Python 面向对象程序设计</title>
    <link href="https://blog.iskage.online/posts/e3ce1591.html"/>
    <id>https://blog.iskage.online/posts/e3ce1591.html</id>
    <published>2025-02-22T07:43:00.000Z</published>
    <updated>2025-02-26T10:11:06.256Z</updated>
    
    <content type="html"><![CDATA[<h1>Python 面向对象编程</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><h2 id="1-类定义">1 类定义</h2><p>类是面向对象程序设计中抽象的主要方法。下面以创建 <code>CreditCard</code> 类作为例子讲解面向对象如何定义类。</p><h3 id="1-1-例：CreditCard-类">1.1 例：CreditCard 类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;有关一个用户的信用卡&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, customer, bank, acnt, limit</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个信用卡实例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            customer (str): 用户名</span></span><br><span class="line"><span class="string">            bank (str): 银行名</span></span><br><span class="line"><span class="string">            acnt (str): 用户账户ID</span></span><br><span class="line"><span class="string">            limit (float): 信用卡限额</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._customer = customer</span><br><span class="line">        <span class="variable language_">self</span>._bank = bank</span><br><span class="line">        <span class="variable language_">self</span>._acnt = acnt</span><br><span class="line">        <span class="variable language_">self</span>._limit = limit</span><br><span class="line">        <span class="variable language_">self</span>._balance = <span class="number">0.</span>  <span class="comment"># 初始账户额度为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_customer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回用户名&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._customer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回银行名&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._bank</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_acnt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回账户ID&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._acnt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_limit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回额度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._limit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回是否能继续提款，即检查是否超出额度</span></span><br><span class="line"><span class="string">        :param price: 希望提取的额度</span></span><br><span class="line"><span class="string">        :return: True 如果加上目前所用额度没有超出限度，否则 False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._balance + price &gt; <span class="variable language_">self</span>._limit:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._balance += price</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_payment</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用现金抵消了部分信用卡贷款&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._balance -= amount</span><br></pre></td></tr></table></figure><h4 id="1-1-2-self-标识符">1.1.2 <code>self</code> 标识符</h4><p><code>self</code> 代表了一个实例，可以理解为对象自己。同时，<code>self</code> 也确定了调用方法时作用的对象。例如 <code>obj.get_customer()</code> 表示对实例化后的对象 <code>obj</code> 调用方法 <code>get_customer()</code> 。</p><h4 id="1-1-3-init-方法">1.1.3 <code>__init__()</code> 方法</h4><p>在面向对象编程中，我们称位于类定义 <code>class</code> 之中的各种函数 <code>def</code> 为方法。而 <code>__init__()</code> 称为初始化方法，它是当实例化对象时首先被执行的。在这个例子中，参数除了对象自己 <code>self</code> ，也包含了 <code>customer, bank, acnt, limit</code> 这些都是初始化时需要传入的。</p><h4 id="1-1-4-其他方法">1.1.4 其他方法</h4><p>类似于初始化方法，其他的函数也是接受参数，返回结果。例如：<code>charge()</code> 方法，使用 <code>obj.charge(100)</code> 表示对于对象 <code>obj</code> ，传入参数 <code>price = 100</code> ，然后返回一个结果。</p><h4 id="1-1-5-变量名">1.1.5 <code>_</code> 变量名</h4><p>在数据成员名称中的前加下划线，比如 <code>_balance</code> ，表明它被设计为非公有的（nonpublic）。类的用户不应该直接访问这样的成员。可以提供类似于 <code>get_balance</code> 的访问函数，以提供拥有只读访问特性的类的用户。</p><h3 id="1-2-实例化">1.2 实例化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc = CreditCard(customer=<span class="string">&quot;John Doe&quot;</span>, bank=<span class="string">&quot;Nation Bank&quot;</span>, acnt=<span class="string">&quot;123 456 789&quot;</span>, limit=<span class="number">1000.</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>cc = CreditCard()</code> 并传入初始化参数的方式实例化对象。此时就可以对对象 <code>cc</code> 进行操作，调用方法。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740044330309.png" alt=""></p><h3 id="1-3-错误检查">1.3 错误检查</h3><p><code>CreditCard</code> 类的实现方法不够稳健：</p><ul><li>例如：没有明确地检查参数的类型，如果用户创建了一个类似于 <code>visa.charge('candy)</code> 的调用，代码可能会崩溃。所以应该设计一些抛出异常。</li><li>例如：逻辑错误的。如果允许用户收取一个类似于 <code>visa.charge(-300)</code> 的负价格，这将导致用户的余额变少，这是不和逻辑的</li></ul><p>所以，这个例子只是介绍面向对象编程时，定义类、实例化和调用方法的基础知识。之后需要不断完善。</p><h3 id="1-4-对类进行测试">1.4 对类进行测试</h3><p>一般对类的定义会单独放在一个 <code>.py</code> 文件中，那么我们需要对类进行检查，测试其是否合理，是否报错。但是，如果通过 <code>from ... import ...</code> 的方法导入主程序测试显然不是我们希望的。所以，我们可以在定义类的 <code>.py</code> 文件下使用 <code>if __name__ = '__main__':</code> 的方法。</p><ul><li><code>if __name__ = '__main__':</code> ：这个判断表示，只有当当前文件以主程序的方式运行时，<code>if</code> 语句后面的内容才运行。这样可以避免在 <code>from ... import ...</code> 代入类时，连带运行 <code>if</code> 语句后的测试语句。</li></ul><p>例如：在当前目录下创建文件夹 <code>utils</code> 内部放置文件 <code>cc.py</code> ，在 <code>cc.py</code> 书写类的定义，于是可以代入类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.cc <span class="keyword">import</span> CreditCard</span><br><span class="line"></span><br><span class="line">cc_new = CreditCard(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Bank1&quot;</span>, <span class="string">&quot;123 456 789&quot;</span>, <span class="number">3010.</span>)</span><br></pre></td></tr></table></figure><p>而在文件 <code>./utils/cc.py</code> 中就可以书写 <code>if __name__ = '__main__':</code> 的测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>: ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    wallet = []</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Bank1&quot;</span>, <span class="string">&quot;123 456 789&quot;</span>, <span class="number">3010.</span>))</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Bank2&quot;</span>, <span class="string">&quot;456 123 789&quot;</span>, <span class="number">6210.</span>))</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;Ann&quot;</span>, <span class="string">&quot;Bank3&quot;</span>, <span class="string">&quot;789 456 123&quot;</span>, <span class="number">4010.</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">0</span>].charge(<span class="number">1000.</span>))</span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">1</span>].charge(<span class="number">2000.</span>))</span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">2</span>].charge(<span class="number">5000.</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> account <span class="keyword">in</span> wallet:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Customer: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_customer()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Balance: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_balance()))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> account.get_balance() &gt; <span class="number">100.</span>:</span><br><span class="line">            account.make_payment(<span class="number">100.</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;New Balance: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_balance()))</span><br></pre></td></tr></table></figure><h2 id="2-运算符重载">2 运算符重载</h2><h3 id="2-1-介绍">2.1 介绍</h3><p>Python 的内置类为许多操作提供了自然的语义。比如，<code>a + b</code> 可以是数值相加，也可以是字符串相连。</p><p>默认情况下，对于新的类来说，<code>+</code> 操作符是未定义的，可通过<strong>操作符重载</strong>来定义它。例如：在类的定义里定义方法 <code>__add__()</code> 即可定义 <code>+</code> 的含义。</p><p>以 <code>a + b</code> 为例，其中 <code>a</code> 和 <code>b</code> 均为字符串，则 <code>a + b</code> 能成立是因为 Python 内置类 <code>字符串</code> 定义了方法 <code>__add__()</code> 将其表达为字符串相连，于是 <code>a + b</code> 才会正常使用。类似地，自定义类时也可以去重载这些运算符，下面是常见的重载：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740048941341.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740048963901.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740049031958.png" alt=""></p><h3 id="2-2-例：多维向量类">2.2 例：多维向量类</h3><p>下面通过定义向量，来解释如何自定义重载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多维向量&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;d 维度向量&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._coords = [<span class="number">0</span>] * d  <span class="comment"># 初始化 d 维向量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取维度: 重载 len(a)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._coords)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第 k 个维度的值: 重载 a[k]&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._coords[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, k, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置第 k 个维度的值为 v: 重载 a[k] = v&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._coords[k] = v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义向量加法: 重载 a + b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) != <span class="built_in">len</span>(other):  <span class="comment"># 此处可以直接使用重载后的定义</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Dimensions must be the same!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        result = Vector(<span class="built_in">len</span>(<span class="variable language_">self</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            result[i] = <span class="variable language_">self</span>[i] + other[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义向量减法: 重载 a - b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) != <span class="built_in">len</span>(other):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Dimensions must be the same!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        result = Vector(<span class="built_in">len</span>(<span class="variable language_">self</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            result[i] = <span class="variable language_">self</span>[i] - other[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断向量坐标是否相等: 重载 a == b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._coords == other._coords</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断向量坐标是否不相等: 重载 a != b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> <span class="variable language_">self</span> == other  <span class="comment"># 等价于 self.__eq__(other) 直接使用重载后的定义</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;以字符串的形式展现这个向量类: 重载 str(a) 或 a 可以以字符串形式展示&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>._coords)[<span class="number">1</span>:-<span class="number">1</span>] + <span class="string">&#x27;&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>以上的方法各个方法都重载了一些运算符，具体解释见代码注释。</p><h3 id="2-3-补：自定义-Python-的包">2.3 补：自定义 Python 的包</h3><p>在上面引入类时，我们使用了 <code>from utils.cc import CreditCard</code> ，这并不规范。我们可以将类定义写入一个 python 文件，然后统一放在文件夹 utils 中，并且再写一个 <code>__init__.py</code> 文件将 utils 文件夹整个变成一个标准的 python 包，目录结构见下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./utils</span><br><span class="line">├── __init__.py</span><br><span class="line">├── cc.py</span><br><span class="line">└── vector.py</span><br></pre></td></tr></table></figure><p>然后在 <code>__init__.py</code> 文件中写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> .cc <span class="keyword">import</span> CreditCard</span><br><span class="line"><span class="keyword">from</span> .vector <span class="keyword">import</span> Vector</span><br></pre></td></tr></table></figure><p>如此便可在其他文件中直接引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> CreditCard, Vector</span><br></pre></td></tr></table></figure><h2 id="3-迭代器">3 迭代器</h2><h3 id="3-1-介绍">3.1 介绍</h3><p>集合迭代器（iterator）提供了一个关键功能：它支持一个名为 <code>__next__</code> 的特殊方法，如果集合有下一个元素，该方法返回该元素，否则产生一个 <code>StopIteration</code> 异常来表明没有下一个元素。</p><p>Python 为实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法的的类提供了一个自动的迭代器，每次调用 <code>__next__</code> 方法时便会索引递增。例如，下面的 <code>SquenceIterator</code> 类。</p><h3 id="3-2-例：SequenceIterator-类">3.2 例：SequenceIterator 类</h3><blockquote><p>【注意】迭代器的实现必须要求【已经实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SequenceIterator</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;为已经定义了__len__和__getitem__的对象实现迭代器方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seq</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器初始化&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._seq = seq</span><br><span class="line">        <span class="variable language_">self</span>._k = -<span class="number">1</span>  <span class="comment"># 只有迭代器调用时才从 0 开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._k &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>._seq):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._seq[<span class="variable language_">self</span>._k]  <span class="comment"># 返回向前一步后的值</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;一般__iter__方法都要返回自己，一种书写规范&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><h3 id="3-3-练习：实现一个类模拟-Python-的-Range">3.3 练习：实现一个类模拟 Python 的 Range</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟Python的Range类: range(start, stop, step)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start, stop=<span class="literal">None</span>, step=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param self: 对象自身</span></span><br><span class="line"><span class="string">        :param start: 起始数字</span></span><br><span class="line"><span class="string">        :param stop: 终止数字</span></span><br><span class="line"><span class="string">        :param step: 每步跨度</span></span><br><span class="line"><span class="string">        :return: Range类</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;step can not be zero&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> stop <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 应对输入 Range(n), 则当作 Range(0, n) 处理</span></span><br><span class="line">            start = <span class="number">0</span></span><br><span class="line">            stop = start</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算真实长度，应对有余数的情形</span></span><br><span class="line">        <span class="variable language_">self</span>._length = <span class="built_in">max</span>(<span class="number">0</span>, (stop - start + step - <span class="number">1</span>) // step)</span><br><span class="line">        <span class="comment"># 考虑到已经计算长度，故无需记录 stop</span></span><br><span class="line">        <span class="variable language_">self</span>._start = start</span><br><span class="line">        <span class="variable language_">self</span>._step = step</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;取数值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            index += <span class="variable language_">self</span>._length  <span class="comment"># 从后向前取</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="variable language_">self</span>._length <span class="keyword">or</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._start + index * <span class="variable language_">self</span>._step</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;只是以列表的形式展示，不重要。因为Range是模仿Python的range功能&quot;&quot;&quot;</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> Range(<span class="variable language_">self</span>._start, <span class="variable language_">self</span>._length):</span><br><span class="line">            result += <span class="built_in">str</span>(<span class="variable language_">self</span>._start + i * <span class="variable language_">self</span>._step) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        result = <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="4-继承">4 继承</h2><h3 id="4-1-介绍">4.1 介绍</h3><p><strong>继承</strong>技术允许基于一个现有的类作为起点定义新的类。在面向对象的术语中，通常描述现有的类为基类 (base class)、父类 (parent class) 或者超类 (superclass)，而称新定义的类为子类 (subclass 或者 child class)</p><p>子类可以覆盖父类方法，也可以在父类的基础上扩展方法。</p><p>下面以第一节中定义的 <code>CreditCard</code> 类为父类，定义新的子类 <code>PredatoryCreditCard</code> 。</p><h3 id="4-2-例：PredatoryCreditCard-子类">4.2 例：PredatoryCreditCard 子类</h3><p>我们希望实现的新功能：</p><ul><li>当尝试收费由于超过信用卡额度被拒绝时，将会收取 5 美元的费用</li><li>将有一个对未清余额按月收取利息的机制，即基于参数年利率 <code>apr</code> 计算利息</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740131659710.png" style="zoom:35%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;继承父类，扩展方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, customer, bank, acnt, limit, apr</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        继承父类，常见新的一个账户</span></span><br><span class="line"><span class="string">        :param customer: 用户名</span></span><br><span class="line"><span class="string">        :param bank: 银行名</span></span><br><span class="line"><span class="string">        :param acnt: 账户ID</span></span><br><span class="line"><span class="string">        :param limit: 额度限制</span></span><br><span class="line"><span class="string">        :param apr: 年利率，用以计算利息</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(customer, bank, acnt, limit)  <span class="comment"># 调用父类的初始化方法 __init__</span></span><br><span class="line">        <span class="variable language_">self</span>._apr = apr</span><br><span class="line">        <span class="comment"># self._balance 在调用父类初始化时也已经赋值 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆盖父类的charge方法，添加扣除手续费功能&quot;&quot;&quot;</span></span><br><span class="line">        success = <span class="built_in">super</span>().charge(price)  <span class="comment"># 调用父类方法，检查是否仍在限额内</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="variable language_">self</span>._balance += <span class="number">5</span>  <span class="comment"># 如果失败收取 5 元手续费，贷款 balance 提高</span></span><br><span class="line">        <span class="keyword">return</span> success  <span class="comment"># 返回结果 True or False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_month</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;收取每月利息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._balance &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 月贴现因子，apr 为年利率，故除以 12 年化</span></span><br><span class="line">            monthly_factor = <span class="built_in">pow</span>(<span class="number">1</span> + <span class="variable language_">self</span>._apr, <span class="number">1</span> / <span class="number">12</span>)</span><br><span class="line">            <span class="variable language_">self</span>._balance *= monthly_factor</span><br></pre></td></tr></table></figure><h4 id="4-2-1-继承语法">4.2.1 继承语法</h4><p>定义子类 B 继承父类 A 时，采用下面的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-初始化语句">4.2.2 初始化语句</h4><p>在子类中首先需要调用父类的初始化语句和传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, param1, param2, sub_param</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">super</span>().__init__(param1, param2)  <span class="comment"># 调用父类的初始化方法 __init__</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.sub_param = sub_param  <span class="comment"># 子类的参数</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-调用父类方法">4.2.3 调用父类方法</h4><p>在子类中调用父类方法，使用 <code>super()</code> 代替父类对象。例如：在使用父类的方法 <code>charge()</code> 时，直接采用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>().charge(param1)  <span class="comment"># 传入相应参数</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】在子类中，我们直接调用了父类的受保护数据 <code>_balance</code> (以 <code>_</code> 开头的数据视为受保护数据)，这不是最好的方法。只是在这里，我们需要在子类中修改 balance ，但如果调用 <code>get_balance</code> 方法是无法修改 balance 的，所以只好直接修改 <code>._balance</code> 。</p><p>【改进】不过可以在父类中定义非公有/受保护的方法 <code>_set_balance()</code> 让子类能使用它改变 <code>._balance</code> 而外界则不使用这个方法。如此可以做到子类使用父类方法改变父类受保护数据，而不是直接在父类数据上改变。</p></blockquote><h3 id="4-3-例：迭代数列的类的层次">4.3 例：迭代数列的类的层次</h3><p>Progression 类的分层如图。我们希望之后定义的各种数列均以 Progression 类为父类。</p><ul><li>Progression 类产生 <code>0, 1, 2, ...</code> 的无穷数列。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740193477222.png" alt=""></p><h4 id="4-3-1-父类：Progression-类">4.3.1 父类：Progression 类</h4><ul><li>定义 <code>__next__, __iter__</code> 方法，实现 <code>next(obj)</code> 的方法迭代，同时也支持 <code>for i in obj</code>  的方法</li><li>定义 <code>_advance</code> 方法，为更新提供了非公有方法，为未来子类不同的更新形式提供方法</li><li>定义 <code>print_progression</code> 方法，方便以字符串的方式展示当前值的后 n 位数值，以序列的形式展示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Progression</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义普适的数列父类</span></span><br><span class="line"><span class="string">    默认产生 0, 1, 2, ... 的无穷数列</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化记录起始默认值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        非公有方法，用于更新 self._current</span></span><br><span class="line"><span class="string">        为后续子类覆盖提供方法，子类不同的数列需要覆写不同的更新方法</span></span><br><span class="line"><span class="string">        父类默认的更新方式为 += 1</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代下一个值，或抛出异常 StopIteration&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._current <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="variable language_">self</span>._current</span><br><span class="line">            <span class="variable language_">self</span>._advance()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        习惯于 iter 与 next 合并使用</span></span><br><span class="line"><span class="string">        By convention, an iterator must return itself as an iterator.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_progression</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印当前值之后的 n 个值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(<span class="built_in">str</span>(<span class="built_in">next</span>(<span class="variable language_">self</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)))</span><br></pre></td></tr></table></figure><blockquote><p>注意此个例子，使用 <code>for i in obj</code> 会进入无穷序列。</p></blockquote><h4 id="4-3-2-子类：等差数列类">4.3.2 子类：等差数列类</h4><p>我们希望等差数列 ArithmeticProgression 类产生等差数列，只需要继承父类后，覆写 <code>_advance</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArithmeticProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;继承基础数列类，定义等差数列类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, increment=<span class="number">1</span>, start=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化等差数列</span></span><br><span class="line"><span class="string">        :param increment: 公差</span></span><br><span class="line"><span class="string">        :param start: 首项</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(start)</span><br><span class="line">        <span class="variable language_">self</span>._increment = increment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写新更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current += <span class="variable language_">self</span>._increment</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aprog1 = ArithmeticProgression(<span class="number">4</span>)</span><br><span class="line">aprog2 = ArithmeticProgression(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">aprog1.print_progression(<span class="number">7</span>)</span><br><span class="line">aprog2.print_progression(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0 4 8 12 16 20 24</span></span><br><span class="line"><span class="string">1 5 9 13 17 21 25</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-3-子类：等比数列类">4.3.3 子类：等比数列类</h4><p>类似地定义等比数列 GeometricProgression 类，需要注意首选不能为 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeometricProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;等比数列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base=<span class="number">2</span>, start=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化等比数列</span></span><br><span class="line"><span class="string">        :param base: 公比，默认为 2</span></span><br><span class="line"><span class="string">        :param start: 首项，不可为 0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(start)</span><br><span class="line">        <span class="variable language_">self</span>._base = base</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current *= <span class="variable language_">self</span>._base</span><br></pre></td></tr></table></figure><h4 id="4-3-4-子类：斐波那契数列类">4.3.4 子类：斐波那契数列类</h4><p>定义斐波那契数列 FibonacciProgression 类。除了提供父类需要的参数首项和自己的参数第二项，还需要增加一个非公有参数记录相邻两项的差 <code>_prev</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FibonacciProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;斐波那契数列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, first=<span class="number">0</span>, second=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化，提供第一第二项</span></span><br><span class="line"><span class="string">        :param first: 第一项，作为参数传给父类的 start</span></span><br><span class="line"><span class="string">        :param second: 第二项</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(first)</span><br><span class="line">        <span class="variable language_">self</span>._prev = second - first</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._prev, <span class="variable language_">self</span>._current = <span class="variable language_">self</span>._current, <span class="variable language_">self</span>._prev + <span class="variable language_">self</span>._current</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fcprog1 = FibonacciProgression()</span><br><span class="line">fcprog2 = FibonacciProgression(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fcprog1.print_progression(<span class="number">7</span>)</span><br><span class="line">fcprog2.print_progression(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0 1 1 2 3 5 8</span></span><br><span class="line"><span class="string">1 1 2 3 5 8 13</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-抽象基类">4.4 抽象基类</h3><p><strong>抽象基类</strong>：一个类的唯一目的是作为继承的基类。其中被继承的我们称之为抽象基类，而其他的类则为具体的类。</p><ul><li>一般而言，抽象类不能直接实例化，而具体的类可以被实例化。</li><li>理论上之前的例子中， Progression 类虽然严格来说是具体的类，但我们希望把它设计为一个抽象基类。</li></ul><h4 id="4-4-1-abc-模块">4.4.1 <code>abc</code> 模块</h4><p>Python 的 <code>abc</code> 模块提供了正式的抽象基类的定义，例如我们定义一个抽象基类 Sequence</p><ul><li>其一，我们不需要这个抽象基类 Sequence 提供 <code>__len__</code> 和 <code>__getitem__</code> 的具体实现，这两个方法的实现由继承它的子类完成。</li><li>其二，我们希望这个基类能完成功能：通过整数查看序列元素，所以要具体实现 <code>__contains__</code> <code>index</code> 和 <code>count</code> 方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sequence</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;抽象基类 Sequence&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回序列长度，由子类实现&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第 j 位置的值，由子类实现&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看 val 是否在序列中，返回 True or False&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回 val 在序列中的下标&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                <span class="keyword">return</span> j</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Value not found&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计数多少值等于 val&quot;&quot;&quot;</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure><blockquote><p>这一类与 Python 的 collections 模块的 <code>collections.abc.Sequence</code> 类似。</p><p>因为采用抽象定义，故类 <code>Sequence</code> 不能被实例化。</p></blockquote><ul><li><p>继承 <code>abc.ABC</code> 类，表明这是一个抽象基类，只能被继承不可被实例化。</p></li><li><p>上述的修饰器 <code>@abstractmethod</code> 表名这个方法必须由子类实现，抽象基类无需实现。</p></li></ul><h4 id="4-4-2-collections-模块">4.4.2 <code>collections</code> 模块</h4><p>使用 <code>abc</code> 模块定义过于复杂，可以直接使用 Python 的 <code>collections</code> 模块，它已经封装了常见的抽象基类。</p><ul><li>例如在第 3.3 节实现的 Range 类，已经实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法，但没有实现抽象基类中的<code>__contains__</code> <code>index</code> 和 <code>count</code> 方法。</li><li>而这与 <code>collections.abc.Sequence</code> 类相匹配，可以让我们定义的 <code>Range</code> 类继承 <code>collections.abc.Sequence</code> 类，从覆写 <code>__len__</code> 和 <code>__getitem__</code> ，同时也依靠父类实现 contains、index 和 count 方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> <span class="type">Sequence</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写 Range 的定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>(<span class="title class_ inherited__">Sequence</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><blockquote><p>【注意】在 <code>Python3.x</code> 版本后 <code>collections</code> 相关抽象基类被移动到了 <code>collections.abc</code> 中。故使用时应导入 <code>from collections.abc import Sequence</code></p></blockquote><p>【结果测试】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    r = NewRange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">in</span> r)  <span class="comment"># 判断 4 是否在序列中 __contains__ 方法</span></span><br><span class="line">    <span class="built_in">print</span>(r.index(<span class="number">0</span>))  <span class="comment"># 返回下标 index 方法</span></span><br><span class="line">    <span class="built_in">print</span>(r.count(<span class="number">1</span>))  <span class="comment"># 查看多少值等于 1</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>其实采用之前我们自定义的 <code>Sequence</code> 抽象基类也可以达到相同目的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sequence</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>(<span class="title class_ inherited__">Sequence</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="5-命名空间和面对对象">5 命名空间和面对对象</h2><h3 id="5-1-实例和类的命名空间">5.1 实例和类的命名空间</h3><p>以 CreditCard 类和 PredatoryCreditCard 类为例，展示出其类命名空间和实例命名空间如下：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740205039504.png" alt=""></p><h3 id="5-2-类数据成员">5.2 类数据成员</h3><p><strong>类级别的数据成员</strong>：一些值（如常量）被一个类的所有实例共享</p><ul><li>在这种情况下，在每个实例的命名空间中存储这个值就会造成不必要的浪费。所以使用如下格式定义这样的类数据成员。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    OVER_LIMIT_FEE = <span class="number">5</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆盖父类的charge方法，添加扣除手续费功能&quot;&quot;&quot;</span></span><br><span class="line">        success = <span class="built_in">super</span>().charge(price)  <span class="comment"># 调用父类方法，检查是否仍在限额内</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="comment"># 使用 PredatoryCreditCard.OVER_LIMIT_FEE 方式调用类数据成员</span></span><br><span class="line">            <span class="variable language_">self</span>._balance += PredatoryCreditCard.OVER_LIMIT_FEE</span><br><span class="line">        <span class="keyword">return</span> success  <span class="comment"># 返回结果 True or False</span></span><br></pre></td></tr></table></figure><h3 id="5-3-嵌套类">5.3 嵌套类</h3><p><strong>嵌套类</strong>：在一个类的定义里定义另一个类。需要注意的是，二者只是嵌套关系，没有继承关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h3 id="5-4-字典和-slots-声明">5.4 字典和 <code>__slots__</code> 声明</h3><p>Python 提供了一种直接的机制来表示实例命名空间：类定义必须提供一个名为 <code>__slots__</code> 的类级别的成员分配给一个固定的字符串序列。例如，在 <code>CreditCard</code> 类中，声明如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>:</span><br><span class="line">    __slots__ = <span class="string">&#x27;_customer&#x27;</span>, <span class="string">&#x27;_bank&#x27;</span>, <span class="string">&#x27;_acnt&#x27;</span>, <span class="string">&#x27;_limit&#x27;</span>, <span class="string">&#x27;_balance&#x27;</span></span><br></pre></td></tr></table></figure><p>当子类继承时，只需要声明子类新增的实例即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    __slots__ = <span class="string">&#x27;_apr&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-深拷贝和浅拷贝">6 深拷贝和浅拷贝</h2><h3 id="6-1-直接赋值复制">6.1 直接赋值复制</h3><p>当使用 <code>a = b</code> 时，Python 在做的只是拷贝了一个别名，或者说是一个地址。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206027790.png" alt=""></p><p>当遇到不可变类型时还不会出现问题，一旦二者指向的是可变类型，例如列表。则会出现一方变，整体变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1. 简单赋值，复制了地址 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1. 简单赋值，复制了地址&quot;</span>)</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a</span><br><span class="line">b.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="6-2-浅拷贝">6.2 浅拷贝</h3><p>例如：列表中写入颜色对象。 <code>warmtones</code> 表示现有的颜色列表。希望创建一个新的 <code>palette</code> 列表，复制一份 <code>warmtones</code> 列表。但是对 <code>palette</code> 不希望影响到 <code>warmtones</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 2. 浅拷贝，简历了新地址，但仍然指向同一不可变数据 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2. 浅拷贝，简历了新地址，但仍然指向同一不可变数据&quot;</span>)</span><br><span class="line">warmtones = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">palette = <span class="built_in">list</span>(warmtones)  <span class="comment"># 浅拷贝</span></span><br><span class="line">palette[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(warmtones)  <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(palette)  <span class="comment"># [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206762911.png" alt=""></p><p>这比直接赋值更好，即复制了一份可变数据类型 (list) ，但指向的不可变数据仍然相同。例如：<code>warmtones[0]</code>  和 <code>palette[0]</code> 为实例 <code>_red</code> 的别名，实际指向相同。</p><h3 id="6-3-深拷贝">6.3 深拷贝</h3><p>我们希望让 <code>warmtones</code> 和 <code>palette</code> 之间完全没有关联，就可以使用 <code>copy.deepcopy()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 3. 深拷贝，完全拷贝一份 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3. 深拷贝，完全拷贝一份&quot;</span>)</span><br><span class="line">warmtones = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">palette = copy.deepcopy(warmtones)  <span class="comment"># 深拷贝</span></span><br><span class="line">palette[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(warmtones)  <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(palette)  <span class="comment"># [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206987932.png" alt=""></p>]]></content>
    
    
    <summary type="html">本文介绍了 Python 中的面向对象编程技术。包括了类的定义、运算符重载、迭代器、继承、命名空间和面向对象、深拷贝与浅拷贝。重点结合了各种代码案例进行分析。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (1) R 语言基本介绍</title>
    <link href="https://blog.iskage.online/posts/d4da4a15.html"/>
    <id>https://blog.iskage.online/posts/d4da4a15.html</id>
    <published>2025-02-20T07:43:00.000Z</published>
    <updated>2025-02-20T08:42:07.092Z</updated>
    
    <content type="html"><![CDATA[<h1>R 语言基本介绍</h1><p>代码和笔记可以前往我的 Github 库里下载。<a href="https://github.com/isKage/r-notes">isKage/r-notes</a></p><hr><p>本文介绍如何下载 R 语言和软件 RStudio 以及 R 语言的基本语法、R 的程序包、R 的对象。具体介绍了如何下载包、管理包、加载包和删除包，以及对象的命名和删除方法，和对象的属性和类别。</p><h2 id="1-下载安装-R">1 下载安装 R</h2><p>官网地址 <a href="https://cran.r-project.org/">https://cran.r-project.org/</a></p><blockquote><p>不可含有中文路径</p></blockquote><h2 id="2-安装-RStudio">2 安装 RStudio</h2><p>官网地址 <a href="https://posit.co/downloads/">https://posit.co/downloads/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740033669420.png" alt=""></p><h2 id="3-基本语法">3 基本语法</h2><h3 id="3-1-常见符号">3.1 常见符号</h3><ul><li><code>&gt;</code> ：命令或运算提示符</li><li><code>+</code> ：续行符</li><li>多条语句之间用 <code>;</code> 或者回车符分隔</li><li>多个语句可以用 <code>&#123;&#125;</code> 组合</li><li>以 <code>#</code> 开始为注释部分</li><li>向上，向下键可以浏览以前输入过的命令</li><li>赋值符：<code>=</code> <code>&lt;-</code>  <code>-&gt;</code></li></ul><p>赋值符号例：下面三个等价</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span> <span class="operator">-&gt;</span> sales;</span><br><span class="line">sales <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span>;</span><br><span class="line">sales <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-帮助文档">3.2 帮助文档</h3><ul><li>查看<strong>函数</strong>的帮助文档</li></ul><p><code>help(func)</code> 或者 <code>?func</code> 从而打开帮助文档。</p><ul><li>查看<strong>运算符和关键字</strong>的帮助文档</li></ul><p><code>help('')</code> 或者 <code>?''</code> 从而打开帮助文档，但要使用引号。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">help<span class="punctuation">(</span>cor<span class="punctuation">)</span>;</span><br><span class="line"><span class="operator">?</span>cor;</span><br><span class="line"></span><br><span class="line">help<span class="punctuation">(</span><span class="string">&quot;+&quot;</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="operator">?</span><span class="string">&#x27;+&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740033121414.png" alt=""></p><ul><li>Description ：函数的描述</li><li>Usage ：函数的具体形式/格式</li><li>Arguments ：函数的输入参数</li><li>Value ： 输出值</li><li>Examples ：【使用样例】</li></ul><h3 id="3-3-工作目录">3.3 工作目录</h3><p><strong>工作目录</strong> ：读取外部文件和保存结果到外部文件的默认目录。使用 <code>getwd()</code> 查看和 <code>setwd()</code> 设置。例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> getwd<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;/Users/username&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> setwd<span class="punctuation">(</span><span class="string">&quot;/Users/username/Desktop/code/r/r-notes&quot;</span><span class="punctuation">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> getwd<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;/Users/username/Desktop/code/r/r-notes&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-工作空间">3.4 工作空间</h3><h4 id="3-4-1-工作空间">3.4.1 工作空间</h4><p><strong>工作空间</strong>是 R 语言中当前会话的环境，它包含了所有用户定义的变量、函数、数据框、列表等对象。</p><ul><li>查看工作空间：可以使用<code>ls()</code>函数查看当前工作空间中的所有对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><ul><li>删除对象：可以使用<code>rm()</code>函数从工作空间中删除对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><ul><li>清空工作空间：可以使用<code>rm(list = ls())</code>清空所有对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-RData-文件">3.4.2 .RData 文件</h4><p><code>.RData</code> 文件是 R 语言中用于保存和加载工作空间的文件格式。</p><ul><li>保存工作空间：使用 <code>save.image()</code> 函数可以将当前工作空间保存到 <code>.RData</code> 文件中。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save.image<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>默认情况下，R 会将工作空间保存到名为 <code>.RData</code> 的文件中。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save.image<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 保存到默认的 .RData 文件</span></span><br></pre></td></tr></table></figure><ul><li>加载工作空间：使用 <code>load()</code> 函数可以从 <code>.RData</code> 文件中加载保存的工作空间。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>加载后，工作空间中的所有对象会恢复到当前会话中。</p><ul><li>选择性保存：可以使用 <code>save()</code> 函数选择性地保存特定对象到 <code>.RData</code> 文件中。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save<span class="punctuation">(</span>object1<span class="punctuation">,</span> object2<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;my_data.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="3-4-3-示例">3.4.3 示例</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一些对象</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">10</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作空间</span></span><br><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存工作空间到文件</span></span><br><span class="line">save.image<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作空间中的对象</span></span><br><span class="line">rm<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">,</span> df<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载工作空间</span></span><br><span class="line">load<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看工作空间</span></span><br><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="4-R-的程序包-Packages">4 R 的程序包 Packages</h2><p>R程序包是多个函数的集合，具有详细的说明和示例。每个程序包包括R函数，数据，帮助文件，描述文件等。</p><h3 id="4-1-R-程序包分类">4.1 R 程序包分类</h3><p>R 包可以分为以下几类：</p><ul><li>基础包：随R安装自带的包</li><li>推荐包：通常随R一起安装，但不是核心包</li><li>第三方包：由社区或开发者贡献的包，需要通过CRAN、GitHub等平台安装</li></ul><h3 id="4-2-安装-R-包">4.2 安装 R 包</h3><h4 id="4-2-1-从-CRAN-安装">4.2.1 从 CRAN 安装</h4><p>CRAN 是 R 包的官方仓库。使用 <code>install.packages()</code> 函数安装</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;dplyr&quot;</span><span class="punctuation">)</span>  <span class="comment"># 安装dplyr包</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-从-GitHub-安装">4.2.2 从 GitHub 安装</h4><p>一些开发者会将包发布在 GitHub 上，可以使用 <code>devtools</code> 包安装：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;devtools&quot;</span><span class="punctuation">)</span>  <span class="comment"># 安装 devtools 包</span></span><br><span class="line"></span><br><span class="line">devtools<span class="operator">::</span>install_github<span class="punctuation">(</span><span class="string">&quot;tidyverse/dplyr&quot;</span><span class="punctuation">)</span>  <span class="comment"># 从 GitHub 安装 dplyr</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-本地安装">4.2.3 本地安装</h4><p>从 CRAN 上下载 <code>.zip</code> 文件，然后在 RStudio 中选择：【Tools】-&gt;【Install Packages …】-&gt;【Install from】后选择下载的 <code>.zip</code> 文件。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740035683185.png" style="zoom:50%;" /><h3 id="4-3-加载和使用-R-包">4.3 加载和使用 R 包</h3><p>安装包后，需要使用 <code>library()</code> 或 <code>require()</code> 函数加载包</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>dplyr<span class="punctuation">)</span>  <span class="comment"># 加载dplyr包</span></span><br><span class="line">require<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span>  <span class="comment"># 加载ggplot2包</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>library()</code>：加载包，如果包未安装会报错。</li><li><code>require()</code>：尝试加载包，如果包未安装会返回<code>FALSE</code>，但不会报错。</li></ul></blockquote><ul><li>查看所有已安装的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">installed.packages<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>查看当前加载的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>更新已安装的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update.packages<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="4-4-卸载-R-包">4.4 卸载 R 包</h3><p>使用 <code>remove.packages()</code> 函数卸载包</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove.packages<span class="punctuation">(</span><span class="string">&quot;dplyr&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="5-R-的对象-Objects">5 R 的对象 Objects</h2><p>在 R 中，所有的数据集、函数、函数结果等，均统称为 “对象”（Object）</p><h3 id="5-1-对象的命名">5.1 对象的命名</h3><ul><li>区分大小写</li><li>由 <code>A-Z</code> <code>a-z</code> <code>0-9</code> <code>_</code> <code>.</code> 组成名字</li><li>对象名要以字母或者 <code>.</code> 开始</li><li>如果以 <code>.</code> 开头，后面不能跟数字</li><li>尽量避免使用保留名</li></ul><h3 id="5-2-查看与移除对象">5.2 查看与移除对象</h3><ul><li>使用 <code>ls()</code> 查看当前所有对象</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 查看当前工作空间所有对象</span></span><br><span class="line"></span><br><span class="line">ls<span class="punctuation">(</span>pat <span class="operator">=</span> <span class="string">&quot;m&quot;</span><span class="punctuation">)</span>  <span class="comment"># 名字包含 m 的所有对象</span></span><br><span class="line">ls<span class="punctuation">(</span>pat <span class="operator">=</span> <span class="string">&quot;^m&quot;</span><span class="punctuation">)</span>  <span class="comment"># 名字以 m 开头的所有对象</span></span><br><span class="line">ls.str<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 展示所有对象的详细信息</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>rm()</code> 删除对象</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 可以填入对象名</span></span><br><span class="line"></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;x&quot;</span><span class="punctuation">,</span> <span class="string">&quot;y&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 删除对象 x 和 y</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 删除所有对象</span></span><br></pre></td></tr></table></figure><blockquote><p>【推荐】在每个脚本文件 <code>.R</code> 都在文件开始设置工作路径和清空对象</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setwd<span class="punctuation">(</span><span class="string">&quot;&quot;</span><span class="punctuation">)</span>;  <span class="comment"># 填入路径</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-对象的属性-Attribute-与类别-Class">5.3 对象的属性 Attribute 与类别  Class</h3><h4 id="5-3-1-使用-mode-判断对象的属性">5.3.1 使用 <code>mode()</code> 判断对象的属性</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 1;</span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;numeric&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.integer</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> <span class="built_in">is.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>y<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;logical&quot;</span></span><br></pre></td></tr></table></figure><p>或者使用 <code>is.numeric(); is.logical(); is.character; is.complex()</code> 进行判断。</p><h4 id="5-3-2-使用-class-判断对象的类别">5.3.2 使用 <code>class()</code> 判断对象的类别</h4><p>常见的类型：</p><ul><li>向量 vector</li><li>矩阵 matrix</li><li>数组 array</li><li>数据框 dataframe</li><li>列表 list</li></ul>]]></content>
    
    
    <summary type="html">本文介绍如何下载 R 语言和软件 RStudio 以及 R 语言的基本语法、R 的程序包、R 的对象。具体介绍了如何下载包、管理包、加载包和删除包，以及对象的命名和删除方法，和对象的属性和类别。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（9）创建和管理数据库和数据表</title>
    <link href="https://blog.iskage.online/posts/4bd5b58e.html"/>
    <id>https://blog.iskage.online/posts/4bd5b58e.html</id>
    <published>2025-02-19T07:43:00.000Z</published>
    <updated>2025-02-19T11:27:30.685Z</updated>
    
    <content type="html"><![CDATA[<h1>创建和管理数据库和数据表</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>存储和管理数据需要我们创建并管理数据库以及数据库中的各种表。本文介绍如何创建和管理数据库、数据表。包括了数据库的创建、管理；数据表的创建、修改、命名和删除。</p><h2 id="1-数据管理">1 数据管理</h2><p>对数据进行管理，首先要存储数据。一般按照 <code>创建数据库 -&gt; 选择字段 -&gt; 创建数据表 -&gt; 存储数据</code> 的方式进行管理。</p><h3 id="1-1-命名规则">1.1 命名规则</h3><ul><li>数据库名、表名不得超过 <code>30</code> 个字符，变量名不得超过 <code>29</code> 个字符</li><li>只含 <code>A-Z</code> <code>a-z</code> <code>0-9</code> 共 63 个字符</li><li>名中不要包含 <code>空格</code></li><li>同一个 MySQL 软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>不要使用关键字，不得不使用时使用 <code>``</code> 框选</li></ul><h3 id="1-2-MySQL-中的数据类型">1.2 MySQL 中的数据类型</h3><table><thead><tr><th>数据类型类别</th><th>数据类型</th><th>关键字/特点</th><th>描述</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code></td><td>1字节，有符号范围：-128到127，无符号范围：0到255</td><td>非常小的整数</td></tr><tr><td></td><td><code>SMALLINT</code></td><td>2字节，有符号范围：-32768到32767，无符号范围：0到65535</td><td>小整数</td></tr><tr><td></td><td><code>MEDIUMINT</code></td><td>3字节，有符号范围：-8388608到8388607，无符号范围：0到16777215</td><td>中等大小的整数</td></tr><tr><td></td><td><code>INT</code></td><td>4字节，有符号范围：-2147483648到2147483647，无符号范围：0到4294967295</td><td>标准整数</td></tr><tr><td></td><td><code>BIGINT</code></td><td>8字节，有符号范围：-2^63到2^63-1，无符号范围：0到2^64-1</td><td>大整数</td></tr><tr><td>浮点数类型</td><td><code>FLOAT</code></td><td>4字节，单精度浮点数</td><td>单精度浮点数，精度约为7位小数</td></tr><tr><td></td><td><code>DOUBLE</code></td><td>8字节，双精度浮点数</td><td>双精度浮点数，精度约为15位小数</td></tr><tr><td></td><td><code>DECIMAL(M, D)</code></td><td>定点数，M为总位数，D为小数位数</td><td>精确小数，适用于财务计算</td></tr><tr><td>日期时间类型</td><td><code>DATE</code></td><td>格式：‘YYYY-MM-DD’</td><td>日期值，仅包含日期</td></tr><tr><td></td><td><code>TIME</code></td><td>格式：‘HH:MM:SS’</td><td>时间值，仅包含时间</td></tr><tr><td></td><td><code>DATETIME</code></td><td>格式：‘YYYY-MM-DD HH:MM:SS’</td><td>日期和时间值</td></tr><tr><td></td><td><code>TIMESTAMP</code></td><td>格式：‘YYYY-MM-DD HH:MM:SS’，范围：‘1970-01-01 00:00:01’到’2038-01-19 03:14:07’</td><td>时间戳，自动更新</td></tr><tr><td></td><td><code>YEAR</code></td><td>格式：‘YYYY’</td><td>年份值</td></tr><tr><td>字符串类型</td><td><code>CHAR(M)</code></td><td>固定长度字符串，M为字符数，最大255</td><td>定长字符串，适合存储固定长度的数据</td></tr><tr><td></td><td><code>VARCHAR(M)</code></td><td>可变长度字符串，M为最大字符数，最大65535</td><td>变长字符串，适合存储长度不固定的数据</td></tr><tr><td></td><td><code>TINYTEXT</code></td><td>最大长度255字符</td><td>非常小的文本字符串</td></tr><tr><td></td><td><code>TEXT</code></td><td>最大长度65535字符</td><td>文本字符串</td></tr><tr><td></td><td><code>MEDIUMTEXT</code></td><td>最大长度16777215字符</td><td>中等长度的文本字符串</td></tr><tr><td></td><td><code>LONGTEXT</code></td><td>最大长度4294967295字符</td><td>长文本字符串</td></tr><tr><td></td><td><code>BINARY(M)</code></td><td>固定长度二进制字符串，M为字节数，最大255</td><td>定长二进制字符串</td></tr><tr><td></td><td><code>VARBINARY(M)</code></td><td>可变长度二进制字符串，M为最大字节数，最大65535</td><td>变长二进制字符串</td></tr><tr><td>枚举类型</td><td><code>ENUM('val1', 'val2', ...)</code></td><td>枚举类型，只能存储列出的值之一</td><td>枚举类型，适合存储有限个数的可能值</td></tr><tr><td>集合类型</td><td><code>SET('val1', 'val2', ...)</code></td><td>集合类型，可以存储多个列出的值</td><td>集合类型，适合存储多个可能值</td></tr><tr><td>二进制大对象</td><td><code>TINYBLOB</code></td><td>最大长度255字节</td><td>非常小的二进制对象</td></tr><tr><td></td><td><code>BLOB</code></td><td>最大长度65535字节</td><td>二进制大对象</td></tr><tr><td></td><td><code>MEDIUMBLOB</code></td><td>最大长度16777215字节</td><td>中等大小的二进制对象</td></tr><tr><td></td><td><code>LONGBLOB</code></td><td>最大长度4294967295字节</td><td>长二进制对象</td></tr><tr><td>空间数据类型</td><td><code>GEOMETRY</code></td><td>空间数据类型，存储几何对象</td><td>几何对象</td></tr><tr><td></td><td><code>POINT</code></td><td>点类型</td><td>二维平面上的点</td></tr><tr><td></td><td><code>LINESTRING</code></td><td>线类型</td><td>二维平面上的线</td></tr><tr><td></td><td><code>POLYGON</code></td><td>多边形类型</td><td>二维平面上的多边形</td></tr><tr><td></td><td><code>MULTIPOINT</code></td><td>多点类型</td><td>多个点的集合</td></tr><tr><td></td><td><code>MULTILINESTRING</code></td><td>多线类型</td><td>多条线的集合</td></tr><tr><td></td><td><code>MULTIPOLYGON</code></td><td>多多边形类型</td><td>多个多边形的集合</td></tr><tr><td></td><td><code>GEOMETRYCOLLECTION</code></td><td>几何集合类型</td><td>多个几何对象的集合</td></tr><tr><td>JSON类型</td><td><code>JSON</code></td><td>存储JSON格式数据</td><td>用于存储JSON格式的数据</td></tr></tbody></table><blockquote><p>以上由 <a href="https://www.deepseek.com/">DeepSeek 总结</a> ，并不重要，现实使用时可以查询官方文档。</p></blockquote><h2 id="2-创建和管理数据库">2 创建和管理数据库</h2><h3 id="2-1-创建数据库">2.1 创建数据库</h3><ul><li>方法1： 直接创建，完全默认</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><ul><li>方法2：创建数据库并指定字符集</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名 <span class="keyword">CHARACTER SET</span> 字符集;</span><br></pre></td></tr></table></figure><p>可以指定数据库的字符集（如 <code>utf8mb4</code> ），确保数据存储时使用正确的编码。</p><ul><li>方法3【推荐】：先判断是否已经存在，不存在则创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>注意：数据库不能改名！</p><p>如果需要重命名，则需要：创建新数据库；复制原数据库数据导入新库；删除旧库。</p></blockquote><h3 id="2-2-使用数据库">2.2 使用数据库</h3><ul><li>查看所有数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><ul><li>查看当前使用的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><blockquote><p>未使用数据库时返回 <code>NULL</code></p></blockquote><ul><li>查看数据库的所有表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">FROM</span> 数据库名];</span><br></pre></td></tr></table></figure><blockquote><p>若省略 <code>FROM 数据库名</code> 则查看当前使用的数据库</p></blockquote><ul><li>查看数据库创建时的相关信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739872321265.png" alt=""></p><ul><li>使用某个数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>因为数据表均存储在不同数据库下，所以在对表操作前，必须先指定使用某个数据库。</p></blockquote><h3 id="2-3-更改字符集">2.3 更改字符集</h3><p>虽然更改数据库名理论上是不可行，不推荐的。但修改字符集非常简单，只需一行指令即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="keyword">CHARACTER SET</span> 字符集; <span class="comment">-- e.g. : gbk, utf8</span></span><br></pre></td></tr></table></figure><h3 id="2-4-删除数据库">2.4 删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>IF EXISTS</code> 先判断是否存在，存在则删除。可以省略，但【不推荐】。</p></blockquote><h2 id="3-创建表">3 创建表</h2><p>在数据库创建完成后，进入/使用指定的数据库，而后就可以开始创建和管理数据表。</p><h3 id="3-1-CREATE-TABLE-创建新的数据表">3.1 <code>CREATE TABLE</code> 创建新的数据表</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名</span><br><span class="line">(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">...</span><br><span class="line">[表约束条件]</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- [] 表示可省略</span></span><br></pre></td></tr></table></figure><p>例如：不做约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp</span><br><span class="line">(</span><br><span class="line">    emp_id   <span class="type">INT</span>,</span><br><span class="line">    emp_name <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="comment">-- 20 为长度</span></span><br><span class="line">    salary   <span class="keyword">DOUBLE</span>,</span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们可以查看一下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739873501483.png" alt=""></p><p>例如：增加约束条件，指定自增性质，指定表的主键【推荐指定主键】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> dept</span><br><span class="line">(</span><br><span class="line">    dept_id   <span class="type">INT</span> AUTO_INCREMENT, <span class="comment">-- 增加约束条件: 自增</span></span><br><span class="line">    dept_name <span class="type">VARCHAR</span>(<span class="number">14</span>),</span><br><span class="line">    location  <span class="type">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (dept_id)         <span class="comment">-- 表的约束条件: 指定 deptno 为主键</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>同样，我们可以查看一下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> dept;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739873713040.png" alt=""></p><h3 id="3-2-AS-其他表名-创建表同时导入数据">3.2 <code>AS 其他表名</code> 创建表同时导入数据</h3><p>使用 <code>CREATE TABLE 新表 AS 其他表的数据</code> 在创建新表的同时，插入数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 新表</span><br><span class="line">(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">...</span><br><span class="line">[表约束条件]</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 其他表</span><br><span class="line">[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><blockquote><p>其中，指定新表属性和字段的 <code>(字段1, ..., 表约束条件])</code> 部分可以省略。如果不省略，则要满足后面填充数据时的匹配。即 <code>SELECT</code> 语句找出的数据和新表的列要一一对应。</p></blockquote><p>例如：选取数据库 <code>atguigudb</code> 的 <code>employees</code> 表中收入高于 13000 的员工的部分信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp_high_salary</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.last_name, e.department_name, e.salary, e.hire_date</span><br><span class="line"><span class="keyword">FROM</span> atguigudb.employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;</span> <span class="number">13000</span>;</span><br></pre></td></tr></table></figure><p>查看这个新表的信息，继承了表的信息（执行  <code>DESC emp_high_salary;</code> ）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739874352421.png" alt=""></p><p>查看具体表的内容，发现已经填充了数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> test.emp_high_salary;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739874466224.png" alt=""></p><h3 id="3-3-查看数据表结构">3.3 查看数据表结构</h3><p>除了上面的采用 <code>DESC</code> 的方式查看表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><p>也可以采用 <code>SHOW CREATE TABLE</code> 查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> 表名;</span><br></pre></td></tr></table></figure><blockquote><p><code>SHOW CREATE TABLE</code> 查看的表结构更为详细</p></blockquote><h2 id="4-修改表">4 修改表</h2><p>使用 <code>ALTER TABLE</code> 语句修改表的结构</p><h3 id="4-1-新增一列-ADD">4.1 新增一列 ADD</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line"><span class="keyword">ADD</span> 字段名 字段类型 </span><br><span class="line">[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名];</span><br><span class="line"><span class="comment">-- [] 代表可选</span></span><br><span class="line"><span class="comment">-- A|B 代表或者, A 或 B</span></span><br></pre></td></tr></table></figure><p>例如：在表 emp 中新增一列 job_id 使得其在字段 salary 的后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp</span><br><span class="line">    <span class="keyword">ADD</span> job_id <span class="type">varchar</span>(<span class="number">15</span>)</span><br><span class="line">        AFTER salary;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739937896250.png" alt=""></p><h3 id="4-2-修改一列-MODIFY">4.2 修改一列 MODIFY</h3><p>可以修改列的 <code>数据类型</code> <code>长度</code> <code>默认值</code> <code>位置</code></p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line">MODIFY 字段名<span class="number">1</span> 字段类型 [<span class="keyword">DEFAULT</span> 默认值] </span><br><span class="line">[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>例如：修改表 emp_high_salary 的 salary 的数据类型和默认值，并放置在 last_name 后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_high_salary</span><br><span class="line">    MODIFY salary <span class="keyword">double</span>(<span class="number">9</span>, <span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1000</span></span><br><span class="line">        AFTER last_name;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739938248613.png" alt=""></p><blockquote><p>默认值的修改只对以后存储的新数据有影响</p></blockquote><h3 id="4-3-对列重命名-CHANGE">4.3 对列重命名 CHANGE</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line">CHANGE 列名 新列名 新数据类型;</span><br></pre></td></tr></table></figure><p>例如：将表 emp_high_salary 的 department_name 改为 dept_name</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_high_salary</span><br><span class="line">    CHANGE department_name dept_name <span class="type">varchar</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739938432301.png" alt=""></p><h3 id="4-4-删除某列-DROP">4.4 删除某列 DROP</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line"><span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>例如：删除之前在表 emp 中新增的 job_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp</span><br><span class="line">    <span class="keyword">DROP</span> job_id;</span><br></pre></td></tr></table></figure><h2 id="5-重命名表">5 重命名表</h2><h3 id="5-1-RENAME-方法">5.1 RENAME 方法</h3><p>使用 <code>RENAME ... TO</code> 方法重命名表，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 旧表名</span><br><span class="line"><span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure><p>例如：更改表 emp 为新名字 employee_info</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> emp</span><br><span class="line">    <span class="keyword">TO</span> employee_info;</span><br></pre></td></tr></table></figure><h3 id="5-2-ALTER-RENAME-方法">5.2 ALTER RENAME 方法</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> 旧表名</span><br><span class="line">    RENAME [<span class="keyword">TO</span>] 新表名;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> employee_info</span><br><span class="line">    RENAME emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-删除表">6 删除表</h2><p>当当前表与其他表没有关联时，例如没有外键链接时，可以直接删除。格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></table></figure><p>例如：删除之前常见的 emp_high_salary 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp_high_salary;</span><br></pre></td></tr></table></figure><h2 id="7-清空表内数据">7 清空表内数据</h2><p>只是删除表内的数据，并不删除表结构。</p><h3 id="7-1-TRUNCATE-语句">7.1 TRUNCATE 语句</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="7-2-DELETE-语句">7.2 DELETE 语句</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="7-3-是否回滚-ROLLBACK">7.3 是否回滚 ROLLBACK</h3><p><code>DELETE</code> 支持回滚 <code>ROLLBACK</code> ，而 <code>TRUNCATE</code> 不支持。</p><p>例如：先查看原始表内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>使用 <code>DELETE</code> 删除，然后回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开始事务，暂不提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><blockquote><p><code>START TRANSACTION;</code> ：它标志着一个事务的开始。在事务中，可以执行多个 SQL 语句。在事务结束之前，所有的修改都不会真正生效，直到显式地提交事务（<code>COMMIT;</code>）或回滚事务（<code>ROLLBACK;</code>）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DELETE 删除</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="comment">-- 查看结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary; <span class="comment">-- 查看结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>此时 <code>ROLLBACK;</code> 回滚事务结束，结果被提交给数据库，数据完成所有操作，显示最终结果。</p></blockquote><ul><li>但是 <code>TRUNCATE</code> 不支持回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> emp_high_salary;</span><br><span class="line"><span class="comment">-- 执行后，表中所有数据被清空，无法回滚</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>清除数据而已，表结构仍然存在</p></blockquote><h2 id="8-注意事项">8 注意事项</h2><ul><li><p>在第 6 和第 7 部分：删除表和清除表数据需要十分谨慎。【建议先备份】然后进行删除。</p></li><li><p>除此之外，为了避免误操作，<code>MySQL8.0</code> 推出了 <strong>DDL（Data Definition Language）原子化</strong> ，即操作要么成功要么失败，绝对不会出现部分成功的情况。</p></li></ul><p>例如：在删除表时，如果 <code>表1</code> 存在，而 <code>表2</code> 不存在。此时同时删除 <code>表1</code> 和 <code>表2</code> 的操作会完全失败，不会出现 <code>表1</code> 被删除了，而 <code>表2</code> 不存在报错的情况。</p>]]></content>
    
    
    <summary type="html">本文介绍如何创建和管理数据库、数据表。包括了数据库的创建、管理；数据表的创建、修改、命名和删除。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（8）子查询</title>
    <link href="https://blog.iskage.online/posts/73aff18a.html"/>
    <id>https://blog.iskage.online/posts/73aff18a.html</id>
    <published>2025-02-17T07:43:00.000Z</published>
    <updated>2025-02-19T11:27:03.023Z</updated>
    
    <content type="html"><![CDATA[<h1>子查询</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询。</p><h2 id="1-子查询的基本使用">1 子查询的基本使用</h2><ul><li>例子引入：查询工资大于 Abel 的员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 之前所学：自连接</span></span><br><span class="line"><span class="keyword">SELECT</span> e2.last_name, e2.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e1,</span><br><span class="line">     employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> e1.salary <span class="operator">&lt;</span> e2.salary;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-1-基本格式">1.1 基本格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件   </span><br><span class="line">            (<span class="keyword">SELECT</span> 列名</span><br><span class="line">             <span class="keyword">FROM</span> 表名</span><br><span class="line">             <span class="keyword">WHERE</span> 条件);</span><br></pre></td></tr></table></figure><h3 id="1-2-子查询分类">1.2 子查询分类</h3><h4 id="1-2-1-单行子查询-vs-多行子查询">1.2.1 单行子查询 vs 多行子查询</h4><ul><li>查询的结果返回一条还是多条记录，将子查询分为<strong>单行子查询</strong>和<strong>多行子查询</strong></li></ul><h4 id="1-2-2-相关子查询-vs-不相关子查询">1.2.2 相关子查询 vs 不相关子查询</h4><ul><li><p><strong>不相关子查询</strong>：子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做不相关子查询。</p></li><li><p><strong>相关子查询</strong>：如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p></li></ul><h2 id="2-单行子查询">2 单行子查询</h2><h3 id="2-1-常见案例">2.1 常见案例</h3><p>常见条件：<code>=, &gt;, &gt;=, &lt;=, &lt;&gt;</code> ，要求子查询返回的是唯一一个结果</p><ul><li>例如：上述的查询工资大于 Abel 的员工</li><li>例如：多条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多条件</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (<span class="keyword">SELECT</span> job_id</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">103</span>)</span><br><span class="line">  <span class="keyword">AND</span> salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778436446.png" alt=""></p><blockquote><p>【注意】当使用简单比较符时，单行子查询返回的结果必须唯一，如此才能比较。例如：若子查询查询到的 <code>job_id</code> 有多个，则无法比较。</p></blockquote><ul><li>例如：利用单行函数返回工资最少的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">                <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><h3 id="2-2-HAVING-中的子查询">2.2 HAVING 中的子查询</h3><p>子查询优先执行，得到子查询的结果后返回给主句的 <code>WHERE</code> 或 <code>HAVING</code> 充当过滤条件的一部分。</p><ul><li>例如：查询最低工资大于部门 <code>department_id = 50</code> 的最低工资的部门</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span></span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">        <span class="keyword">FROM</span> employees</span><br><span class="line">        <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779142944.png" alt=""></p><blockquote><p><code>GROUP BY ... HAVING ...</code> 用于分组查询，见<a href="https://blog.iskage.online/posts/b266e599.html#3-GROUP-BY-%E2%80%A6-HAVING-%E6%9C%89%E7%BA%A6%E6%9D%9F%E7%9A%84%E5%88%86%E7%BB%84">聚合函数</a>章节笔记。</p></blockquote><h3 id="2-3-CASE-中的子查询">2.3 CASE 中的子查询</h3><ul><li>例如：若员工的 <code>department_id</code> 与 <code>location_id</code> 为 1800 的 <code>department_id</code> 相同，则 <code>location</code> 为 ‘Canada’ ，其余则为 ‘USA’</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       last_name,</span><br><span class="line">       <span class="keyword">CASE</span> department_id</span><br><span class="line">           <span class="keyword">WHEN</span></span><br><span class="line">               (<span class="keyword">SELECT</span> department_id</span><br><span class="line">                <span class="keyword">FROM</span> departments</span><br><span class="line">                <span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1800</span>)</span><br><span class="line">               <span class="keyword">THEN</span> <span class="string">&#x27;Canada&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;USA&#x27;</span> <span class="keyword">END</span> location</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779580573.png" alt=""></p><blockquote><p><code>CASE WHEN</code> 根据不同条件返回不同结果，见<a href="https://blog.iskage.online/posts/35d72c0b.html#4-3-%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C">单行函数</a>章节笔记。</p></blockquote><h3 id="2-4-子查询中的空值问题">2.4 子查询中的空值问题</h3><p>如果子查询查不到结果，并不会报错，只是返回空。</p><ul><li>例如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span></span><br><span class="line">      (<span class="keyword">SELECT</span> salary</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Nobody&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779760433.png" alt=""></p><h3 id="2-5-常见错误：返回多行">2.5 常见错误：返回多行</h3><p>使用单行子查询，返回的结果确实多行，则会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br></pre></td></tr></table></figure><blockquote><p>单行比较符，需要比较的两者是唯一值，不可以一个值与多个值比较</p></blockquote><h2 id="3-多行子查询">3 多行子查询</h2><h3 id="3-1-案例引入">3.1 案例引入</h3><ul><li>例如：查询与 141 号或 174 号员工的 <code>manager_id</code> 和 <code>department_id</code> 相同的其他员工的 <code>employee_id</code> <code>manager_id</code> 和 <code>department_id</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 不成对比较，逐个增加条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> manager_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>))</span><br><span class="line">  <span class="keyword">AND</span> department_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> department_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>))</span><br><span class="line">  <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 2. 当作一个集合进行比较</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (manager_id, department_id) <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>))</span><br><span class="line">  <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778806369.png" alt=""></p><p>【补充】可以查看一下具体的条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778790765.png" alt=""></p><h3 id="3-2-常见多行比较操作符">3.2 常见多行比较操作符</h3><table><thead><tr><th style="text-align:left">操作符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>IN</code></td><td>等于列表中任意一个即可</td></tr><tr><td style="text-align:left"><code>ANY</code></td><td>和子查询返回的某个值比较</td></tr><tr><td style="text-align:left"><code>ALL</code></td><td>和子查询返回的所有值比较</td></tr><tr><td style="text-align:left"><code>SOME</code></td><td>和 ANY 相同</td></tr></tbody></table><h3 id="3-3-示例">3.3 示例</h3><h4 id="3-3-1-ANY-和-ALL">3.3.1 ANY 和 ALL</h4><ul><li><code>ANY</code> ：返回其 <code>job_id</code> 中比 <code>job_id</code> 为 <code>IT_PROG</code> 部门<strong>任一</strong>工资低的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ANY</span></span><br><span class="line">      (<span class="keyword">SELECT</span> e.salary</span><br><span class="line">       <span class="keyword">FROM</span> employees e</span><br><span class="line">       <span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> e.job_id <span class="operator">!=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780719982.png" alt=""></p><blockquote><p>子查询会返回很多行数据（不同的 <code>salary</code>）但我们需要找到的是只要比子查询的结果任意一个低即可，类似于 <code>&lt; MAX()</code></p></blockquote><ul><li><code>ALL</code> ：返回其 <code>job_id</code> 中比 <code>job_id</code> 为 <code>IT_PROG</code> 部门<strong>任意</strong>工资低的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ALL</span></span><br><span class="line">      (<span class="keyword">SELECT</span> e.salary</span><br><span class="line">       <span class="keyword">FROM</span> employees e</span><br><span class="line">       <span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> e.job_id <span class="operator">!=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780740500.png" alt=""></p><blockquote><p>子查询会返回很多行数据（不同的 <code>salary</code>）但我们需要找到的是比子查询的结果任意都低，类似于 <code>&lt; MIN()</code></p></blockquote><p>观察一下子查询的条件返回的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- condition</span></span><br><span class="line"><span class="keyword">SELECT</span> e.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780820060.png" alt=""></p><p>最大为 9000 ，最小为 4200 ：在使用 ANY 时，小于 9000 即可；但在使用 ALL 时，却需要小于 4200 。这就是二者明显的不同。</p><h4 id="3-3-2-FROM-后嵌套查询分组语句">3.3.2 FROM 后嵌套查询分组语句</h4><ul><li>查询平均工资最低的部门 id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法 1: 直接使用 MIN</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(avg_sal)</span><br><span class="line">                      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">                            <span class="keyword">FROM</span> employees</span><br><span class="line">                            <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) dept_avg_sal);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法 2: 使用 ALL 间接表达最小</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&lt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">                           <span class="keyword">FROM</span> employees</span><br><span class="line">                           <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id);</span><br></pre></td></tr></table></figure><blockquote><p><code>GROUP BY</code> 和单行函数联合使用，返回多行结果</p></blockquote><h2 id="4-相关子查询">4 相关子查询</h2><h3 id="4-1-相关子查询的例子">4.1 相关子查询的例子</h3><p>例如：查询员工信息，筛选条件为其工资要大于他所在部门的平均工资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span></span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> department_id <span class="operator">=</span> e.department_id)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>如此，每次查一行数据时，就会执行子查询计算 <code>department_id</code> 等于当前行的平均工资，再返回给 WHERE 子句进行判断，决定是否查询这一行。</p><h3 id="4-2-FROM-后使用子查询">4.2 FROM 后使用子查询</h3><p>同样是上面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary, e1.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1,</span><br><span class="line">     (<span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary) dept_avg_sal</span><br><span class="line">      <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.department_id <span class="operator">=</span> e2.department_id</span><br><span class="line">  <span class="keyword">AND</span> e1.salary <span class="operator">&gt;</span> e2.dept_avg_sal</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>FROM 后使用子查询，相当于创造了一张虚拟表，一定要使用 <code>()</code> 和别名。</p><h3 id="4-3-ORDER-BY-后使用子查询">4.3 ORDER BY 后使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">SELECT</span> d.department_name</span><br><span class="line">          <span class="keyword">FROM</span> departments d</span><br><span class="line">          <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure><h3 id="4-4-EXISTS-与-NOT-EXISTS">4.4  EXISTS 与 NOT EXISTS</h3><p><code>EXISTS</code> ：检查在子查询中是否存在满足条件的行。逐行查询时：</p><ul><li><p>如果在子查询中<strong>不存在</strong>满足条件的行：条件返回 <code>FALSE</code> 。继续在子查询中查找</p></li><li><p>如果在子查询中<strong>存在</strong>满足条件的行：条件返回 <code>TRUE</code> 。不在子查询中继续查找</p></li></ul><p><code>NOT EXISTS</code> 则相反。</p><p>例如：返回是公司管理者，即查找是否有 <code>manager_id</code> 等于这个员工的 <code>employee.id</code></p><p>【方法一】EXISTS</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">              <span class="keyword">FROM</span> employees e2</span><br><span class="line">              <span class="keyword">WHERE</span> e2.manager_id <span class="operator">=</span></span><br><span class="line">                    e1.employee_id);</span><br></pre></td></tr></table></figure><blockquote><p>注意：EXISTS 返回的是 True 和 False</p></blockquote><p>【方法二】自连接</p><p>或者使用自连接，即创造一个虚拟表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e1.employee_id, e1.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line">         <span class="keyword">JOIN</span> employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.employee_id <span class="operator">=</span> e2.manager_id;</span><br></pre></td></tr></table></figure><blockquote><p>【推荐】：相比子查询，自连接更为高效</p></blockquote><p>【方法三】多行子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> manager_id</span><br><span class="line">       <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><h3 id="4-5-相关子查询去更新与更新">4.5 相关子查询去更新与更新</h3><h4 id="4-5-1-相关更新">4.5.1 相关更新</h4><p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p><ul><li>先增加一个字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> employees</span><br><span class="line">    <span class="keyword">ADD</span>(department_name <span class="type">VARCHAR</span>(<span class="number">50</span>));</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field           <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date       <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary          <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct  <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id      <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_name <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span> <span class="comment">-- 新增字段</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>然后更新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees e</span><br><span class="line"><span class="keyword">SET</span> department_name <span class="operator">=</span></span><br><span class="line">        (<span class="keyword">SELECT</span> department_name</span><br><span class="line">         <span class="keyword">FROM</span> departments d</span><br><span class="line">         <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739783513615.png" alt=""></p><h4 id="4-5-2-相关删除">4.5.2 相关删除</h4><p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名<span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> 列名</span><br><span class="line">       <span class="keyword">FROM</span> 表名<span class="number">2</span></span><br><span class="line">       <span class="keyword">WHERE</span> 条件);</span><br></pre></td></tr></table></figure><blockquote><p><code>IN</code> 也可以是其他操作符</p></blockquote>]]></content>
    
    
    <summary type="html">子查询指一个查询语句嵌套在另一个查询语句内部的查询。包括了单行子查询和多行子查询；相关子查询与不相关子查询。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
