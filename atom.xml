<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isKage`Blog</title>
  
  <subtitle>Welcome :)</subtitle>
  <link href="https://blog.iskage.online/atom.xml" rel="self"/>
  
  <link href="https://blog.iskage.online/"/>
  <updated>2025-04-07T03:40:35.070Z</updated>
  <id>https://blog.iskage.online/</id>
  
  <author>
    <name>isKage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优先级队列 (Priority Queue) 和堆 (Heap)</title>
    <link href="https://blog.iskage.online/posts/78a0681d.html"/>
    <id>https://blog.iskage.online/posts/78a0681d.html</id>
    <published>2025-04-06T12:16:00.000Z</published>
    <updated>2025-04-07T03:40:35.070Z</updated>
    
    <content type="html"><![CDATA[<h1>优先级队列 (Priority Queue) 和堆 (Heap)</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本章讲解优先级队列、基于堆实现的优先级队列、一些常用的排序算法（选择排序、插入排序和高级排序算法——堆排序）。特别地，堆是一种特殊的二叉树，我们基于 Python 数组实现堆；Python 实现排序算法。</p><h2 id="1-优先级队列">1 优先级队列</h2><h3 id="1-1-优先级队列的抽象数据类型">1.1 优先级队列的抽象数据类型</h3><h4 id="1-1-1-优先级">1.1.1 优先级</h4><p>队列这一数据结构，遵循 <strong>FIFO（先入先出）<strong>的规则进行元素的插入和删除。然而，现实生活中有时我们需要一个除 FIFO 功能外还有额外删除功能的队列。我们引入</strong>优先级队列（Priority Queue）<strong>这一概念来描述这一类队列，其删除操作为删除具有</strong>最高优先级</strong>的元素。</p><ul><li>例如：航空公司的候补等待（standby）队列中，优先级更高的乘客即使到的更晚，也有可能更早获得候补机会。</li></ul><h4 id="1-1-2-优先级队列-ADT">1.1.2 优先级队列 ADT</h4><p>优先级队列中存储：一个元素和其优先级，构成键-值对结构 <code>(key, value)</code> 。在优先级队列 <code>P</code> 上定义的优先级队列 ADT 支持以下方法（本章的优先级不妨设为<strong>最小值 min</strong>）：</p><ul><li><code>P.add(k, v)</code> ：向优先级队列 P 中插人一个键值对 <code>(k, v)</code> 。</li><li><code>P.min()</code> ：返回一个元组 <code>(k, v)</code> ，代表优先级队列 P 中一个键值对，该元组的键值是最小值（但是没有移除该元组）；如果队列为空，将发生错误。</li><li><code>P.remove_min()</code> ：从优先级队列 P 中移除一个拥有最小键值的元组，并且返回这个被移除的元组，<code>(k, v)</code> 代表这个被移除的元组的键和值；如果优先级队列为空，将发生错误。</li><li><code>P.is_empty()</code> ：如果优先级队列不包含任何元组，将返回 <code>True</code> 。</li><li><code>len(P)</code> ：返回优先级队列中元组的数量。</li></ul><p>下面的例子展示了这些功能的具体过程：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743831618569.png" alt="优先级队列的 ADT"></p><h3 id="1-2-优先级队列的实现">1.2 优先级队列的实现</h3><h4 id="1-2-1-组合设计模式">1.2.1 组合设计模式</h4><p>组合设计模式：定义一个 <code>_Item</code> 类，用它来确保在主要的数据结构中每个元组保存它相关计数值。</p><p>对于优先级队列，我们将使用组合设计模式来存储内部元组，该元组包含键 <code>k</code> 和值 <code>v</code> 构成的数值对。为后续的构建提供方便，这里构建了一个基础父类，未来的类均继承于 <code>PriorityQueueBase</code> 类，其中包含一个嵌套类 <code>_Item</code> 的定义。对于元组实例 <code>a</code> 和 <code>b</code> ，重载比较符 <code>&lt;</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PriorityQueueBase</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优先级队列的抽象数据类型基础类 ADT</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 嵌套的 _Item 类 ----------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Item</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;每一个元素的存储方式：(k, v)&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_key&#x27;</span>, <span class="string">&#x27;_value&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, k, v</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;初始化键值对 (k, v)&quot;&quot;&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>._key = k</span><br><span class="line">            <span class="variable language_">self</span>._value = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;重载运算符 &lt;&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._key &lt; other._key  <span class="comment"># 根据 key 键值比较大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 优先级队列 ADT ----------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;__len__ 方法暂时未定义，由子类定义&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) == <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的键值需要满足<strong>全序关系</strong>：</p></blockquote><p>**全序关系：**一个集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 上的全序关系需满足</p><ul><li>自反性</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>x</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>≤</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\forall\ x \in A,\quad x \leq x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></span></p><ul><li>反对称性</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>x</mi><mo separator="true">,</mo><mtext> </mtext><mi>y</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>≤</mo><mi>y</mi><mtext> </mtext><mo>∧</mo><mtext> </mtext><mi>y</mi><mo>≤</mo><mi>x</mi><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">\forall\ x,\ y \in A,\quad x \leq y\ \wedge\ y \leq x \quad\Rightarrow\quad x = y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span></p><ul><li>传递性</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>x</mi><mo separator="true">,</mo><mtext> </mtext><mi>y</mi><mo separator="true">,</mo><mtext> </mtext><mi>z</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>≤</mo><mi>y</mi><mo separator="true">,</mo><mtext> </mtext><mi>y</mi><mo>≤</mo><mi>z</mi><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mi>x</mi><mo>≤</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">\forall\ x,\ y,\ z \in A,\quad x\leq y,\ y\leq z \quad\Rightarrow\quad x \leq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 中任意两个元素均可比较</li></ul><h4 id="1-2-2-未排序列表实现优先级队列">1.2.2 未排序列表实现优先级队列</h4><p>创建未排序的列表实现优先级队列的 <code>UnsortedPriorityQueue</code> 类，它继承优先级队列 ADT <code>PriorityQueueBase</code> 类。未排序指的是，每次 <code>add</code> 增加新元素时，直接在列表后面加入；但每次查找/删除元素时 <code>min()</code> <code>remove_min()</code> 都需要遍历列表找到最小值。</p><blockquote><p>注意：这里使用了之前章节 <a href="https://zhuanlan.zhihu.com/p/29813136429">链表</a> 定义的 <code>PositionalList</code> 。也可以在我的 <a href="https://github.com/isKage/dsa-notes/blob/main/lec8_priority_queue_heap/utils/positional_list.py">Github 库</a> 中找到代码内容。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UnsortedPriorityQueue</span>(<span class="title class_ inherited__">PriorityQueueBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;未排序的列表实现优先级队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化，利用队列类 PositionalList&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = PositionalList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;增加元素 (key, value)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 向 PositionalList 队列类新增 _Item 类实例</span></span><br><span class="line">        <span class="variable language_">self</span>._data.add_last(<span class="variable language_">self</span>._Item(key, value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_min</span>(<span class="params">self</span>) -&gt; PositionalList.Position:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;最小键值元素 _Item&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历</span></span><br><span class="line">        small = <span class="variable language_">self</span>._data.first()</span><br><span class="line">        walk = <span class="variable language_">self</span>._data.after(small)</span><br><span class="line">        <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 这里的 element 返回的是一个 _Item 类</span></span><br><span class="line">            <span class="keyword">if</span> walk.element() &lt; small.element():</span><br><span class="line">                small = walk  <span class="comment"># 记录最小值</span></span><br><span class="line">            walk = <span class="variable language_">self</span>._data.after(walk)  <span class="comment"># 向后更新一步</span></span><br><span class="line">        <span class="keyword">return</span> small  <span class="comment"># 遍历完后得到最小值 (返回的是 PositionalList.Position 类)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">min</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最小 (key, value)&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_min()</span><br><span class="line">        item = p.element()  <span class="comment"># PositionalList.Position._node._element -&gt; _Item 类</span></span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_min</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最小 (key, value) 并删除&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_min()</span><br><span class="line">        item = <span class="variable language_">self</span>._data.delete(p)</span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upq = UnsortedPriorityQueue()</span><br><span class="line">    upq.add(<span class="number">1</span>, <span class="string">&#x27;small&#x27;</span>)</span><br><span class="line">    upq.add(<span class="number">3</span>, <span class="string">&#x27;median&#x27;</span>)</span><br><span class="line">    upq.add(<span class="number">5</span>, <span class="string">&#x27;large&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The min is:&quot;</span>, upq.<span class="built_in">min</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Delete the min:&quot;</span>, upq.remove_min())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Now, the min is:&quot;</span>, upq.<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># The min is: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Delete the min: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Now, the min is: (3, &#x27;median&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-排序列表实现优先级队列">1.2.3 排序列表实现优先级队列</h4><p>创建排序的列表实现优先级队列的 <code>SortedPriorityQueue</code> 类，它继承优先级队列 ADT <code>PriorityQueueBase</code> 类。排序指的是，每次 <code>add</code> 增加新元素时，都进行比较，使得队列一直都是有序状态，例如从小到大；每次查找/删除元素时 <code>min()</code> <code>remove_min()</code> 只需要拿出队列第一个元素即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SortedPriorityQueue</span>(<span class="title class_ inherited__">PriorityQueueBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;排序的列表实现优先级队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化，利用队列类 PositionalList&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = PositionalList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;增加元素 (key, value)&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Item(key, value)  <span class="comment"># 创建新的 _Item 类实例</span></span><br><span class="line">        walk = <span class="variable language_">self</span>._data.last()  <span class="comment"># 从最后开始检查</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到第一个比 newest 大的元素</span></span><br><span class="line">        <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> newest &lt; walk.element():</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.before(walk)  <span class="comment"># go ahead</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向 PositionalList 队列类新增 _Item 类实例</span></span><br><span class="line">        <span class="keyword">if</span> walk <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>._data.add_first(newest)  <span class="comment"># 第一个位置插入</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._data.add_after(walk, newest)  <span class="comment"># 在 walk 后插入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">min</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最小 (key, value)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 有序队列：第一个元素即为最小</span></span><br><span class="line">        p = <span class="variable language_">self</span>._data.first()</span><br><span class="line">        item = p.element()</span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_min</span>(<span class="params">self</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最小 (key, value) 并删除&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 同理，第一个元素即为最小</span></span><br><span class="line">        item = <span class="variable language_">self</span>._data.delete(<span class="variable language_">self</span>._data.first())</span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br></pre></td></tr></table></figure><p>例如：结果相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">spq = SortedPriorityQueue()</span><br><span class="line">    spq.add(<span class="number">1</span>, <span class="string">&#x27;small&#x27;</span>)</span><br><span class="line">    spq.add(<span class="number">3</span>, <span class="string">&#x27;median&#x27;</span>)</span><br><span class="line">    spq.add(<span class="number">5</span>, <span class="string">&#x27;large&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The min is:&quot;</span>, spq.<span class="built_in">min</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Delete the min:&quot;</span>, spq.remove_min())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Now, the min is:&quot;</span>, spq.<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># The min is: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Delete the min: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Now, the min is: (3, &#x27;median&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4-算法分析-比较">1.2.4 算法分析&amp;比较</h4><p>排序与未排序列表实现优先级队列的主要区别在于 (1) 插入 (2) 删除/查找最小元素</p><ul><li><strong>未排序列表</strong>：每次直接在尾部插入新元素，所以复杂度为 <code>O(1)</code> ；但查找和删除最小元素却需要遍历列表寻找，复杂度为 <code>O(n)</code> 。</li><li><strong>排序列表</strong>：排序列表则相反。每次插入新元素，都需要遍历来找到最佳位置，所以复杂度为 <code>O(n)</code> ；但查找和删除最小元素只需要对队列第一个元素操作，复杂度为 <code>O(1)</code> 。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743837646130.png" alt="排序与否的比较"></p><h2 id="2-堆">2 堆</h2><p><strong>二进制堆的数据结构</strong>：一个更加有效的优先级队列的实现。这个数据结构允许我们以对数时间复杂度 <code>O(log(n))</code> 来实现插人和删除操作。</p><h3 id="2-1-堆的数据结构">2.1 堆的数据结构</h3><p>**堆是一棵二叉树 T **，该树的节点上存储了集合中的元组并且满足两个附加的属性：关系属性以存储键的形式在 T 中定义；结构属性以树 T 自身形状的方式定义。</p><h4 id="2-1-1-Heap-Order-属性">2.1.1 Heap-Order 属性</h4><p><strong>在堆 T 中，对于除了根的每个位置 p ，存储在 p 中的键值大于或等于存储在 p 的父节点的键值。即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">(</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">key(p) \geq key(parent(p))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">re</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">))</span></span></span></span> 。</strong></p><p>作为 Heap-Order 属性的结果，T 中从根到叶子的路径上的键值是以非递减顺序排列的。也就是说，一个<strong>最小的键总是存储在 T 的根节点</strong>中。这使得调用 <code>min</code> 或 <code>remove_min</code> 时，能够比较容易地定位这样的元组，一般情况下它被认为“在堆的顶部”。</p><h4 id="2-1-2-完全二叉树属性">2.1.2 完全二叉树属性</h4><p><strong>一个高度为 h 的堆 T 是一棵完全二叉树：即 T 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mn>2</mn><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>h</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0,\ 1,\ 2,\ \cdots,\ h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 层上尽可能达到节点数的最大值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> ，并且剩余的节点在 h 层尽可能保存在最左的位置。</strong></p><p>完全二叉树属性是为了尽可能提高遍历效率，后面我们会看到，影响高度 h 是影响堆效率的主要因素，而完全二叉树能保证在节点数固定为 n 时使得高度最小，大概为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 。</p><h4 id="2-1-3-堆的高度">2.1.3 堆的高度</h4><p><strong>堆/完全二叉树的高度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy="false">[</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">h = [\log n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span> 。其中 [] 表示取整。</strong></p><p>这是完全二叉树的性质，我们假设节点数为 n 的高度为 h ，则完全二叉树需要满足：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mi>h</mi></msup><mo>≤</mo><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn><mo>+</mo><msup><mn>2</mn><mi>h</mi></msup><mo>=</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1+ (1 + 2 + \cdots + 2^{h-1}) = 2^h \leq n \leq 2^h - 1 + 2^h = 2^{h+1} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0351em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>于是可以推出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo stretchy="false">[</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">n = [\log n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span> 。</p><p>下面是一个标准的堆的例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743840261916.png" alt="堆的完全二叉树结构例子"></p><h3 id="2-2-使用堆实现优先级队列">2.2 使用堆实现优先级队列</h3><p><code>min()</code> 方法的实现很简单，由于堆的 Heap-Order 属性，位于根节点的元素一定是 <code>min()</code> ，所以时间复杂度为 <code>O(1)</code> 。</p><h4 id="2-2-1-插入和向上冒泡">2.2.1 插入和向上冒泡</h4><p>优先级队列的 <code>add(k, v)</code> 操作对应于在堆中插入一个新元组</p><p>堆中元素的插入由三个步骤组成：</p><ul><li>找到插入新节点的位置 z</li><li>将新元组放在位置 z 处</li><li>通过<strong>向上冒泡</strong>恢复堆的 Heap-Order 属性</li></ul><p>插入新元组后，堆可能变得不满足 Heap-Order 性质：</p><ul><li>通过对新节点和其父节点的键值进行比较，并在必要时交换两个节点的位置，不断重复即可恢复其Heap-Order 性质，这种操作被称为<strong>堆向上冒泡 Up-Heap Bubbling</strong></li><li>堆向上冒泡操作在新节点成为根节点或其键值大于其父节点键值时停止</li><li>堆向上冒泡操作的时间复杂度为 <code>O(log n)</code> （即最坏情况要遍历树的每一层，而树的高度为 <code>[log n]</code> ）</li></ul><p>下面的图示，展示了一个插入和向上冒泡的过程：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743927952888.png" alt="a 为原始堆，b 在堆尾部插入元素 (2,T)"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928016199.png" alt="c 对新元素 (2,T) 进行冒泡，因为 2 &lt; 20 ，得到 d"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928073600.png" alt="e 同理进行父子节点比较，向上冒泡，得到 f"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928122435.png" alt="同样操作，直到冒泡到根节点/键值关系满足 Heap-Order 属性"></p><h4 id="2-2-2-删除和向下冒泡">2.2.2 删除和向下冒泡</h4><p>因为 Heap-Order 属性保证了根节点即为 min ，所以优先级队列的 <code>remove_min()</code> 操作对应于在堆中删除根节点。</p><p>堆中元素的删除由三个步骤组成：</p><ul><li>将<strong>根节点用最后一个节点 w 代替</strong></li><li>移除最后一个节点 w</li><li>通过<strong>向下冒泡</strong>恢复堆的 Heap-Order属性</li></ul><p>用最后一个节点将根节点替代后，堆可能变得不满足 Heap-Order 性质：</p><ul><li>通过对新的根节点和其孩子节点的键值进行比较，并在必要时交换根节点和有较小键值的孩子节点的位置，不断重复即可恢复其 Heap-Order 性质，这种操作被称为<strong>堆向下冒泡 Down-Heap Bubbling</strong></li><li>堆向下冒泡操作在最后一个节点成为叶子节点或其键值小于其所有孩子节点键值时停止</li><li>堆向下冒泡操作的时间复杂度为 <code>O(log n)</code> （即最坏情况要遍历树的每一层，而树的高度为 <code>[log n]</code> ）</li></ul><p>下面的图示，展示了一个删除和向下冒泡的过程：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928511145.png" alt="a 将最后节点 (13,W) 替换到根节点，并删除根节点 (4,C) ，得到 b 图"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928578370.png" alt="c 父节点 13 大于子节点最小键值 5 ，故向下冒泡，得到 d"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928664804.png" alt="类似地，重复冒泡过程"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743928679120.png" alt="继续冒泡，直到到达叶子节点/键值均小于子节点时，恢复 Heap-Order 性质"></p><blockquote><p>【注意】每次向下冒泡，都需要找 <strong>2 个子节点最小键值</strong> 进行交换。</p></blockquote><h3 id="2-3-基于数组的堆-完全二叉树表示">2.3 基于数组的堆/完全二叉树表示</h3><p>基于数组实现树，对于完全二叉树十分适用。这是因为完全二叉树尽可能的用满了每一层的空间，且剩余的叶子节点都在左侧，这非常符合数组的结构。</p><p>那么假设一个基于数组 A 的完全二叉树 T 已经实现，则对于在 A 中索引为 p 的节点，则有：</p><ul><li>若 p 为根节点，则 <code>p = 0</code></li><li>若 q 为 p 的左子节点，则 <code>q = 2 * p + 1</code></li><li>若 q 为 p 的右子节点，则 <code>q = 2 * p + 2</code></li></ul><p>下面是一个堆/完全二叉树存储在数组里的例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743929197105.png" alt="堆/完全二叉树"></p><p>它存储在数组里为：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743929444547.png" alt=""></p><h3 id="2-4-Python-实现堆">2.4 Python 实现堆</h3><h4 id="2-4-1-Python-实现">2.4.1 Python 实现</h4><p>基于堆的优先级队列的 Python 实现。我们使用基于数组的表示，保存了元组组合表示的 Python 列表。采用递归来实现 <code>_upheap</code> 和 <code>_downheap</code> 中的重复调用。继承之前的 <code>PriorityQueueBase</code> 基础类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapPriorityQueue</span>(<span class="title class_ inherited__">PriorityQueueBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    堆的实现：完全二叉树，根节点为 min</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 非公有方法：二叉树结构 ----------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parent</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回父节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (j - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;当前位置的左子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * j + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;当前位置的右子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * j + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_has_left</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;左子节点是否存在/合法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._left(j) &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_has_right</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;右子节点是否存在/合法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._right(j) &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_swap</span>(<span class="params">self, i, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;交换 i j 位置上的元素 &lt;=&gt; 冒泡&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data[i], <span class="variable language_">self</span>._data[j] = <span class="variable language_">self</span>._data[j], <span class="variable language_">self</span>._data[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_upheap</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向上冒泡&quot;&quot;&quot;</span></span><br><span class="line">        parent = <span class="variable language_">self</span>._parent(j)  <span class="comment"># j 的父节点</span></span><br><span class="line">        <span class="keyword">if</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="variable language_">self</span>._data[j] &lt; <span class="variable language_">self</span>._data[parent]:  <span class="comment"># 非根节点/不满足 Heap-Order</span></span><br><span class="line">            <span class="variable language_">self</span>._swap(j, parent)  <span class="comment"># 冒泡/交换</span></span><br><span class="line">            <span class="variable language_">self</span>._upheap(parent)  <span class="comment"># 递归实现，向上 (parent) 冒泡</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_downheap</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向下冒泡&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 找到最小的子节点 small_child</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._has_left(j):  <span class="comment"># 左/非叶节点</span></span><br><span class="line">            left = <span class="variable language_">self</span>._left(j)</span><br><span class="line">            small_child = left</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._has_right(j):  <span class="comment"># 右/非叶节点</span></span><br><span class="line">                right = <span class="variable language_">self</span>._right(j)</span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>._data[right] &lt; <span class="variable language_">self</span>._data[left]:</span><br><span class="line">                    small_child = right</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 不满足 Heap-Order</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._data[small_child] &lt; <span class="variable language_">self</span>._data[j]:</span><br><span class="line">                <span class="variable language_">self</span>._swap(small_child, j)  <span class="comment"># 冒泡/交换</span></span><br><span class="line">                <span class="variable language_">self</span>._downheap(small_child)  <span class="comment"># 递归实现，向下 (small_child) 冒泡</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------- 公有方法：堆结构 ----------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;列表用来存储完全二叉树&quot;&quot;&quot;</span>  <span class="comment"># 可优化，见后</span></span><br><span class="line">        <span class="variable language_">self</span>._data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;重载 len()&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;增加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data.append(<span class="variable language_">self</span>._Item(key, value))  <span class="comment"># 尾部新增</span></span><br><span class="line">        <span class="variable language_">self</span>._upheap(<span class="built_in">len</span>(<span class="variable language_">self</span>._data) - <span class="number">1</span>)  <span class="comment"># 从最后一个向上冒泡</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">min</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看 min 不删除&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        item = <span class="variable language_">self</span>._data[<span class="number">0</span>]  <span class="comment"># 由 Heap-Order 性质，第一个元素为 min</span></span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_min</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除 min&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Priority queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._swap(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>._data) - <span class="number">1</span>)  <span class="comment"># 交换最后一个元素和根节点</span></span><br><span class="line">        item = <span class="variable language_">self</span>._data.pop()  <span class="comment"># 删除最后一个元素，即交换来的根节点/min</span></span><br><span class="line">        <span class="variable language_">self</span>._downheap(<span class="number">0</span>)  <span class="comment"># 从根/第一个开始向下冒泡</span></span><br><span class="line">        <span class="keyword">return</span> (item._key, item._value)</span><br></pre></td></tr></table></figure><h4 id="2-4-2-基于堆的优先级队列的算法分析">2.4.2 基于堆的优先级队列的算法分析</h4><p>注意到，基于堆的优先级队列，在 <code>min()</code> 操作时，由于 Heap-Order 性质，可以在 <code>O(1)</code> 内完成。而在新增元素和删除/查看最小元素时，最坏的情况都是遍历每一层，而不是每一个节点，这使得对于 n 个节点完全二叉树/堆，其高度/层数仅 <code>log n</code> 级别，故复杂度也只有 <code>O(log n)</code> ，这明显是大大提高了效率。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743931198577.png" alt="算法复杂度分析"></p><p><strong>结论</strong>：堆数据结构都是优先级队列非常有效的实现方式。与基于未排序或已排序列表的实现不同，基于堆的实现在插人和移除操作中均能快速地获得运行结果。</p><h4 id="2-4-3-自底向上构建堆">2.4.3 自底向上构建堆</h4><p>在初始化构建堆时，从一个空堆开始连续调用 n 次 <code>add()</code> 操作的时间复杂度为 <code>O(n log n)</code> （因为每次新增元素在最坏的情况下都是 <code>O(log n)</code> 级别的复杂度，调用 n 次则为 <code>O(n log n)</code> 这是不高效的）。</p><p><strong>自底向上构建堆</strong>可将此操作的时间复杂度降为 <code>O(n)</code> 。初始化的是非空的堆，堆中元素由 n 个。为了叙述简单，我们设：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n = 2^{h+1} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>即这个初始的堆为一个满二叉树（即每一次都满了，每层 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点）。那么，自底向上构建堆进行如下操作：</p><ul><li>第 1 步，任意取 <code>(n + 1)/2</code> 个节点最为最底部的叶子节点；</li><li>第 2 步，再任意取 <code>(n + 1)/4</code> 个节点，作为最后 1 层的父节点，同时对倒数第 2 层每个节点进行一次<strong>向下冒泡</strong>，使得满足 Heap-Order 属性；</li><li>······</li><li>第 i 步，再任意取 <code>(n+1)/2^i</code> 个节点，作为倒数第 i+1 层的父节点，同时对本层（倒数第 i 层）每个节点进行向下冒泡，使得满足 Heap-Order 属性；</li><li>······</li><li>第 h + 1 = log(n + 1) 步，按照同样的方式，此次创建的是根节点，仍然进行最后 1 次向下冒泡，最终得到初始堆。</li></ul><p>例如：如下图，15 = 2^4 - 1 个节点的堆，任意取 8 个元素构成最底部的节点；然后任意取 4 个构成倒数第二层节点，进行向下冒泡，使得满足 Heap-Order 性质；如此重复得到初始化后的堆。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743933519764.png" alt="15 个节点的堆"></p><p><strong>Python 实现</strong>：修改之前的 <code>HeapPriorityQueue</code> 的 <code>__init__()</code> 方法，使得可以根据 <code>contents</code> 序列类快速初始化，复杂度为 <code>O(n)</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapPriorityQueue</span>(<span class="title class_ inherited__">PriorityQueueBase</span>):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="comment"># ---------- 公有方法：堆结构 ----------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, contents=(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;列表用来存储完全二叉树，可根据 contents 自底向上初始化&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(contents[<span class="number">0</span>], <span class="built_in">tuple</span>): <span class="comment"># 若 contents 元素不是元组</span></span><br><span class="line">            <span class="comment"># 则键值对存储 (e, e) for e in contents</span></span><br><span class="line">            <span class="variable language_">self</span>._data = [<span class="variable language_">self</span>._Item(e, e) <span class="keyword">for</span> e <span class="keyword">in</span> contents]</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 为元组就可以正常按照 (k, v) 存储</span></span><br><span class="line">            <span class="variable language_">self</span>._data = [<span class="variable language_">self</span>._Item(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> contents]  </span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data) &gt; <span class="number">1</span>:  <span class="comment"># 确实需要初始化，若为空或只有 1 个则不需要冒泡</span></span><br><span class="line">            <span class="variable language_">self</span>._heapify()  <span class="comment"># 自底向上，逐个冒泡，使得满足 Heap-Order</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_heapify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从底向上初始化堆的冒泡过程&quot;&quot;&quot;</span></span><br><span class="line">        start = <span class="variable language_">self</span>._parent(<span class="built_in">len</span>(<span class="variable language_">self</span>) - <span class="number">1</span>)  <span class="comment"># 从最后一个节点的父节点开始向下冒泡</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 从后向前，一直到根节点</span></span><br><span class="line">            <span class="variable language_">self</span>._downheap(j)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如此可以一开始指定初始化的堆：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment"># a example</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;Heap Priority Queue by Array&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [(<span class="number">1</span>, <span class="string">&#x27;small&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;median&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;large&#x27;</span>)]</span><br><span class="line">    hpq = HeapPriorityQueue(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The min is:&quot;</span>, hpq.<span class="built_in">min</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Delete the min:&quot;</span>, hpq.remove_min())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Now, the min is:&quot;</span>, hpq.<span class="built_in">min</span>())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># =============== Heap Priority Queue by Array ===============</span></span><br><span class="line"><span class="comment"># The min is: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Delete the min: (1, &#x27;small&#x27;)</span></span><br><span class="line"><span class="comment"># Now, the min is: (2, &#x27;median&#x27;)</span></span><br></pre></td></tr></table></figure><p><strong>时间复杂度为 <code>O(n)</code> 的证明：</strong></p><p>在最坏的情况下，如何进行冒泡，即冒泡的路径，并不影响复杂度。所以我们不妨假设每个节点处的堆向下泡冒路径均先向右走，然后一直向左走，直到堆底部。</p><p>每个节点最多被两条路径经过，因此所有路径经过的边数总和为 <code>O(n)</code> 。因此，自底向上构建堆的时间为 <code>O(n)</code> 。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743934486425.png" alt="可视化证明图示"></p><h4 id="2-4-4-heapq-模块">2.4.4 heapq 模块</h4><p>Python 的标准分布包含一个 <code>heapq</code> 模块，该模块提供对基于堆的优先级队列的支持。该模块不提供任何优先级队列类，而是提供一些函数，<strong>这些函数把标准 Python 列表作为堆进行管理</strong>。</p><p><strong>heapq</strong> 的一些常见函数，针对列表类 L 操作（假设 L <strong>已经满足</strong> Heap-Order 属性）：</p><ul><li><p><code>heappush(L, e)</code>：将元素 e 存入列表 L ，并重新调整列表以满足 heap-order 属性。该函数执行的时间复杂度为 <code>O(log n)</code> 。</p></li><li><p><code>heappop(L)</code> ：取出并返回列表 L 中拥有最小值的元素，并且重新调整存储以满足 heap-order 属性。该函数执行的时间复杂度为 <code>O(log n)</code> 。</p></li><li><p><code>heappushpop(L, e)</code> ：将元素 e 存人列表 L 中，同时取出和返回最小的元组。该函数执行的时间复杂度为 <code>O(log n)</code> ，但是它较分别调用 push 和 pop 方法的效率稍微高一些。因为如果最新被插入列表的元素值是最小的，那么该函数立刻返回；否则，即为常见的 push + pop 操作。</p></li><li><p><code>heapreplace(L, e)</code> ：与 heappushpop 方法类似。</p></li></ul><p><strong>heapq</strong> 的一些常见函数，针对列表类 L 操作（假设 L <strong>不满足</strong> Heap-Order 属性）：</p><ul><li><code>heapify(L)</code> ：改变未排序的列表，使其满足 heap-order 属性。这个函数使用自底向上的堆构造算法，时间复杂度为 <code>O(n)</code> 。</li><li><code>nlargest(k, iterable)</code>：从一个给定的迭代 <code>iterable</code> 中生成含有 k 个最大值的列表。执行该函数的时间复杂度为 <code>O(n + k log n)</code> 。</li><li><code>nsmallest(k, iterable)</code> ：从一个给定的选代 <code>iterable</code> 中生成含有 k 个最小值的列表。该函数使用与 nlargest 相同的技术，其时间复杂度为 <code>O(n + k log n)</code> 。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">L = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>]  <span class="comment"># 不满足 Heap-Order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 自底向上构建堆</span></span><br><span class="line">heapq.heapify(L)</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2 3</span></span><br><span class="line"><span class="string">4 5 6 7</span></span><br><span class="line"><span class="string">10 9 8</span></span><br><span class="line"><span class="string">满足 Heap-Order</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 返回最大最小的 2 个</span></span><br><span class="line"><span class="built_in">print</span>(heapq.nlargest(<span class="number">2</span>, L))</span><br><span class="line"><span class="built_in">print</span>(heapq.nsmallest(<span class="number">2</span>, L))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[10, 9]</span></span><br><span class="line"><span class="string">[1, 2]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 去除最小</span></span><br><span class="line"><span class="built_in">print</span>(heapq.heappop(L))</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2, 4, 3, 8, 5, 6, 7, 10, 9]</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">4 3</span></span><br><span class="line"><span class="string">8 5 6 7</span></span><br><span class="line"><span class="string">10 9</span></span><br><span class="line"><span class="string">满足 Heap-Order</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-排序">3 排序</h2><h3 id="3-1-使用优先级队列进行排序">3.1 使用优先级队列进行排序</h3><p>我们可以使用优先级队列对一个可比较元素集合进行排序：</p><ul><li>首先使用 <code>add</code> 操作将集合中的元素一个接一个地插入到优先级队列中</li><li>再使用 <code>remove_min</code> 操作将元素以某种顺序从优先级队列中移出</li></ul><p>此算法的运行时间取决于优先级队列的具体实现方式。</p><p>通用伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pq_sort</span>(<span class="params">C, pq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;伪代码：对 C 排序，借用 pq 优先级队列类&quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(C)</span><br><span class="line">    P = pq()  <span class="comment"># 辅助优先级队列</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        element = C.delete(C.first())  <span class="comment"># 拿出 C 的元素</span></span><br><span class="line">        P.add(element, element)  <span class="comment"># 存储 (e, e)</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        (k, v) = P.remove_min()  <span class="comment"># 取出最小的 e</span></span><br><span class="line">        C.add_last(v)  <span class="comment"># 放回原来的 C</span></span><br></pre></td></tr></table></figure><h3 id="3-2-选择排序和插入排序">3.2 选择排序和插入排序</h3><h4 id="3-2-1-选择排序">3.2.1 选择排序</h4><p>当使用<strong>未排序列表</strong>实现优先级队列时，PQ-sort 即为<strong>选择排序</strong>。</p><p><strong>选择排序的复杂度：<code>O(n^2)</code></strong></p><ul><li>将所有元素使用 <code>add</code> 操作插入优先级队列需要 n 次操作，运行时间为 <code>O(n)</code> 。</li><li>将元素按顺序移出长为 n 的优先级队列需要每次使用 <code>remove_min</code> 操作选择优先级最高的元素，其运行时间正比于：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo>⋯</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n + (n-1) + (n-2) + \cdots + 1 = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743941045902.png" alt="选择排序示例" style="zoom:50%;" /><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> UnsortedPriorityQueue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">C</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(C)</span><br><span class="line">    P = UnsortedPriorityQueue()  <span class="comment"># 见之前定义的 UnsortedPriorityQueue 类</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        element = C.pop()</span><br><span class="line">        P.add(element, element)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        (k, v) = P.remove_min()</span><br><span class="line">        C.append(v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;Selection Sort&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [<span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Initial list:&quot;</span>, l)</span><br><span class="line">    selection_sort(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After sort:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============== Selection Sort ===============</span></span><br><span class="line"><span class="comment"># Initial list: [7, 4, 8, 2, 5, 3]</span></span><br><span class="line"><span class="comment"># After sort: [2, 3, 4, 5, 7, 8]</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-插入排序">3.2.2 插入排序</h4><p>当使用<strong>排序列表</strong>实现优先级队列时，PQ-sort 即为<strong>插入排序</strong>。</p><p><strong>插入排序的复杂度：<code>O(n^2)</code></strong></p><ul><li>将所有元素使用 <code>add</code> 操作插入优先级队列的运行时间正比于：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1 + 2 +3 + \cdots + n = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>将排好序的元素使用 <code>remove_min</code> 操作从优先级队列中移出需要 n 次操作，运行时间为 <code>O(n)</code></li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743941482500.png" alt="插入排序示例" style="zoom:50%;" /><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> UnsortedPriorityQueue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">C</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(C)</span><br><span class="line">    P = SortedPriorityQueue()  <span class="comment"># 见之前定义的 UnsortedPriorityQueue 类</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        element = C.pop()</span><br><span class="line">        P.add(element, element)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        (k, v) = P.remove_min()</span><br><span class="line">        C.append(v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;Insertion Sort&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [<span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Initial list:&quot;</span>, l)</span><br><span class="line">    insertion_sort(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After sort:&quot;</span>, l)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># =============== Insertion Sort ===============</span></span><br><span class="line"><span class="comment"># Initial list: [7, 4, 8, 2, 5, 3]</span></span><br><span class="line"><span class="comment"># After sort: [2, 3, 4, 5, 7, 8]</span></span><br></pre></td></tr></table></figure><h3 id="3-3-堆排序">3.3 堆排序</h3><p>正如前面所说，使用优先级队列进行排序，其效率完全取决于优先级队列的实现方式；更具体一点，效率取决于优先级序列 <code>add</code> 和 <code>remove_min</code> 操作的复杂度。而对于堆，其插入和删除的复杂度均为 <code>O(log n)</code> 相对于 <code>O(n)</code> 复杂度高效的多。</p><ul><li>add 阶段：由于第 i 次 add 操作完成后堆有 i 个元组，所以第 i 次 add操作的时间复杂度 <code>O(log i)</code> 。因此，这一阶段整体的时间复杂度 <code>O(n log n)</code> ，但通过<strong>自底向上的构建堆</strong>，时间复杂度能够被提升到 <code>O(n)</code> 。</li><li>remove_min 阶段：第 j 次 remove_min 操作执行时堆中有 <code>(n - j + 1)</code> 个元组，因此第 j 次 remove_min 操作的时间复杂度为 <code>O(log (n - j + 1))</code> 。将所有这些 remove_min 操作累加起来，这一阶段的时间复杂度 <code>O(n log n)</code> 。</li></ul><p><strong>结论：当使用堆来实现优先级队列时，整个优先级队列排序算法的时间复杂度为 <code>O(n log n)</code> 。这个排序算法就称为堆排序。</strong></p><h4 id="3-3-1-简单实现堆排序">3.3.1 简单实现堆排序</h4><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utiles <span class="keyword">import</span> HeapPriorityQueue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">C</span>):</span><br><span class="line">    <span class="comment"># 特别地，利用了自底向上构建堆的初始化方法 O(n)</span></span><br><span class="line">    P = HeapPriorityQueue(C)  <span class="comment"># 见之前定义的 HeapPriorityQueue 类</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(C)):  <span class="comment"># O(n log n)</span></span><br><span class="line">        C[j] = P.remove_min()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;Heap Sort&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [<span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Initial list:&quot;</span>, l)</span><br><span class="line">    heap_sort(l)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;After sort:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============== Heap Sort ===============</span></span><br><span class="line"><span class="comment"># Initial list: [7, 4, 8, 2, 5, 3]</span></span><br><span class="line"><span class="comment"># After sort: [2, 3, 4, 5, 7, 8]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-原地堆排序">3.3.2 原地堆排序</h4><p>更进一步，如果需要排序的对象也是用数组存储的，例如上面的例子。则可以原地进行堆排序，如此可以节省空间，也节省了申请一个新空间和摊销的时间成本：</p><ul><li>重新定义堆的操作，使其成为最大堆（maximum-oriented heap）（并不重要，仅仅影响是升序还是降序），即父节点键值不小于孩子节点；算法执行过程中，始终使用<strong>列表的左半部分表示堆，右半部分表示序列</strong>。</li><li>add 阶段：我们从一个空堆开始，从左向右移动堆与序列之间的边界，一次一步；每一步将序列中的下一个元素追加到堆中。</li><li>remove_add 阶段：我们从一个空的序列开始，从右向左移动堆与序列之间的边界，一次一步；每一步将最大值元素从堆中移除并存储到当前序列的最前方。</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743944140925.png" alt="原地堆排序图示" style="zoom: 45%;" /><p><strong>代码实现</strong>：同时实现了升序和降序，只需指定 <code>descend=False</code> 则为升序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">heapsort</span>(<span class="params">arr, descend=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;原地堆排序&quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">downheap</span>(<span class="params">start, end</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从 start 开始向下冒泡，堆的范围是 [0, end)&quot;&quot;&quot;</span></span><br><span class="line">        parent = start</span><br><span class="line">        <span class="comment"># while True:</span></span><br><span class="line">        left = <span class="number">2</span> * parent + <span class="number">1</span></span><br><span class="line">        right = <span class="number">2</span> * parent + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> descend:</span><br><span class="line">            <span class="comment"># 从小到大，堆的根节点为 max</span></span><br><span class="line">            largest_child = parent</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left &lt; end <span class="keyword">and</span> arr[left] &gt; arr[largest_child]:</span><br><span class="line">                largest_child = left</span><br><span class="line">            <span class="keyword">if</span> right &lt; end <span class="keyword">and</span> arr[right] &gt; arr[largest_child]:</span><br><span class="line">                largest_child = right</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> largest_child == parent:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果父节点已经是最大的，停止</span></span><br><span class="line"></span><br><span class="line">            arr[parent], arr[largest_child] = arr[largest_child], arr[parent]</span><br><span class="line">            downheap(largest_child, end)  <span class="comment"># 继续向下冒泡</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 从大到小，堆的根节点为 min</span></span><br><span class="line">            smallest_child = parent</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left &lt; end <span class="keyword">and</span> arr[left] &lt; arr[smallest_child]:</span><br><span class="line">                smallest_child = left</span><br><span class="line">            <span class="keyword">if</span> right &lt; end <span class="keyword">and</span> arr[right] &lt; arr[smallest_child]:</span><br><span class="line">                smallest_child = right</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> smallest_child == parent:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果父节点已经是最小的，停止</span></span><br><span class="line"></span><br><span class="line">            arr[parent], arr[smallest_child] = arr[smallest_child], arr[parent]</span><br><span class="line">            downheap(smallest_child, end)  <span class="comment"># 继续向下冒泡</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 构建最大堆（从最后一个非叶子节点开始）</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n // <span class="number">2</span>) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># &lt;=&gt; 整个序列为一个暂未满足 heap-order 的堆，进行冒泡调整</span></span><br><span class="line">        downheap(i, n)  <span class="comment"># 自底向上的构建</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 排序阶段：每次将堆顶（最大值）交换到末尾，并向下冒泡</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        arr[<span class="number">0</span>], arr[i] = arr[i], arr[<span class="number">0</span>]  <span class="comment"># 交换堆顶和当前末尾</span></span><br><span class="line">        downheap(<span class="number">0</span>, i)  <span class="comment"># 向下冒泡</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">15</span>, <span class="string">&quot;The Best! - In-place Heap Sort&quot;</span>, <span class="string">&quot;=&quot;</span> * <span class="number">15</span>)</span><br><span class="line">    l = [<span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Initial list:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line">    heapsort(l, descend=<span class="literal">False</span>)  <span class="comment"># 从小到大</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sort not descend:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line">    heapsort(l, descend=<span class="literal">True</span>)  <span class="comment"># 从大到小</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sort descend:&quot;</span>, l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============== The Best! - In-place Heap Sort ===============</span></span><br><span class="line"><span class="comment"># Initial list: [7, 4, 8, 2, 5, 3]</span></span><br><span class="line"><span class="comment"># sort not descend: [2, 3, 4, 5, 7, 8]</span></span><br><span class="line"><span class="comment"># sort descend: [8, 7, 5, 4, 3, 2]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">优先级队列、基于堆实现的优先级队列、一些常用的排序算法（选择排序、插入排序）、高级排序算法——堆排序）。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (7) 统计量</title>
    <link href="https://blog.iskage.online/posts/46a852b4.html"/>
    <id>https://blog.iskage.online/posts/46a852b4.html</id>
    <published>2025-04-04T01:44:00.000Z</published>
    <updated>2025-04-03T07:57:57.310Z</updated>
    
    <content type="html"><![CDATA[<h1>描述统计：统计量</h1><p>在描述行统计中，除了统计图表，统计量可以定量的描述数据。本章介绍常见的统计量：均值、方差、标准差、中位数、四分位数、变异系数、IQR、极差、偏度、峰度、Q-Q 图。以及分类汇总函数 aggregate 。</p><h2 id="1-描述统计：统计量">1 描述统计：统计量</h2><p><strong>定性变量</strong>：频数、比例</p><p><strong>定量变量</strong>：集中信息、波动信息、形状信息</p><h3 id="1-1-集中信息">1.1 集中信息</h3><h4 id="1-1-1-样本均值">1.1.1 样本均值</h4><p>对于数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,\ x_2,\ \cdots,\ x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的<strong>样本均值</strong>为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><mo>=</mo><mfrac><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><mi>n</mi></mfrac><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\bar{x} = \frac{x_1 + x_2 + \cdots + x_n}{n} = \frac{1}{n}\sum\limits_{i = 1}^n\ x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5678em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>缺点：均值容易受到极端值影响。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mean<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="1-1-2-中位数">1.1.2 中位数</h4><p><strong>样本中位数</strong>是对原始数据排序，位于数据中心的数据。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>M</mi><mi>E</mi><mi>D</mi></mrow></msub><mo>=</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow></msub><mspace width="1em"/><mi>o</mi><mi>r</mi><mspace width="1em"/><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow></msub><mo>+</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">x_{MED} = x_{(\frac{n+1}{2})}\quad or\quad (x_{(\frac{n}{2})} + x_{(\frac{n}{2} + 1)})/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">ME</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.237em;vertical-align:-0.487em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.7538em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.487em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.8198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.421em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.171em;vertical-align:-0.421em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.8198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.421em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/2</span></span></span></span></span></p><p>假设有定量数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,\ x_2,\ \cdots,\ x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，定义排序后的数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><mo>⋯</mo><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">x_{(1)} \leq x_{(2)} \leq \cdots \leq x_{(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9912em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9912em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7858em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>优点：稳健，不容易受到极端值影响。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">median<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="1-1-3-示例">1.1.3 示例</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">finalgrades <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span><span class="string">&quot;finalgrades.csv&quot;</span><span class="punctuation">)</span></span><br><span class="line">mydata <span class="operator">&lt;-</span> finalgrades<span class="punctuation">[</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">6</span><span class="operator">:</span><span class="number">9</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 均值</span></span><br><span class="line">grade.mean <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> mean<span class="punctuation">)</span></span><br><span class="line">grade.mean</span><br><span class="line"><span class="comment">#     政治     语文     数学     物理 </span></span><br><span class="line"><span class="comment"># 50.31056 81.64907 41.29503 24.76708 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 中位数</span></span><br><span class="line">grade.median <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> median<span class="punctuation">)</span></span><br><span class="line">grade.median</span><br><span class="line"><span class="comment"># 政治 语文 数学 物理 </span></span><br><span class="line"><span class="comment">#   51   84   40   24 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 左偏/右偏</span></span><br><span class="line">grade.mean <span class="operator">&gt;</span> grade.median</span><br><span class="line"><span class="comment">#  政治  语文  数学  物理 </span></span><br><span class="line"><span class="comment"># FALSE FALSE  TRUE  TRUE </span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/grades.png" alt=""></p><h3 id="1-2-波动信息">1.2 波动信息</h3><h4 id="1-2-1-方差-标准差">1.2.1 方差/标准差</h4><p><strong>样本方差</strong>：反映了所有数据离中心的平均的平方距离</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>s</mi><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">s^2 = \frac{1}{n-1}\sum\limits_{i=1}^n\ (x_i - \bar{x})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>样本标准差</strong>：近似反映了所有数据离中心的平均距离</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mo>=</mo><msqrt><msup><mi>s</mi><mn>2</mn></msup></msqrt><mo>=</mo><msqrt><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">s = \sqrt{s^2} = \sqrt{\frac{1}{n-1}\sum\limits_{i=1}^n\ (x_i - \bar{x})^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.0361em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0039em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9639em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0361em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1568em;vertical-align:-1.2777em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8791em;"><span class="svg-align" style="top:-5.1168em;"><span class="pstrut" style="height:5.1168em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8391em;"><span class="pstrut" style="height:5.1168em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.1968em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="3.1968em" viewBox="0 0 400000 3196" preserveAspectRatio="xMinYMin slice"><path d="M702 80H40000040H742v3062l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667219 661 l218 661zM702 80H400000v40H742z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sd<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-变异系数">1.2.2 变异系数</h4><p><strong>变异系数 Coefficient of Variation</strong> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">CV</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>) ：比较不同单位的数据的离散程度；比较单位相同而平均数相差较大的数据组资料的差异程度。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mi>V</mi><mo>=</mo><mfrac><mi>s</mi><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover></mfrac><mo>×</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">CV = \frac{s}{\bar{x}} \times 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> <span class="operator">*</span> sd<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="operator">/</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-四分位间距-极差">1.2.3 四分位间距/极差</h4><p><strong>四分位差</strong> (Inter - Quartile Range, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mi>Q</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">IQR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.00773em;">QR</span></span></span></span>) ：中间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>50</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">50\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">50%</span></span></span></span> 数据的范围。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mi>Q</mi><mi>P</mi><mo>=</mo><msub><mi>Q</mi><mn>3</mn></msub><mo>−</mo><msub><mi>Q</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">IQP = Q_3 - Q_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.13889em;">QP</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IQR<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>极差</strong> ：所有数据的范围</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mo>=</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">range = x_{(n)} - x_{(1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9385em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7858em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-形状信息">1.3 形状信息</h3><h4 id="1-3-1-偏度">1.3.1 偏度</h4><p><strong>总体偏度</strong>的定义</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>k</mi><mi>e</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>E</mi><mtext> </mtext><mo stretchy="false">(</mo><mfrac><mrow><mi>X</mi><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac><msup><mo stretchy="false">)</mo><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">Skewness = E\ (\frac{X - \mu}{\sigma})^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">n</span><span class="mord mathnormal">ess</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>样本偏度</strong>的定义</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>g</mi><mn>1</mn></msub><mo>=</mo><mfrac><mi>n</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>⋅</mo><msup><mi>s</mi><mn>3</mn></msup></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">g_1 = \frac{n}{(n-1)(n-2)\cdot s^3} \sum\limits_{i=1}^n\ (x_i - \bar{x})^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p><p>偏度判断：</p><ul><li>对称：Skewness = 0</li><li>右偏：Skewness &gt; 0</li><li>左偏：Skewness &lt; 0</li></ul><h4 id="1-3-2-峰度">1.3.2 峰度</h4><p><strong>峰度</strong>反应了峰部的尖度，总体峰度的定义：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>K</mi><mi>u</mi><mi>r</mi><mi>t</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>=</mo><mi>E</mi><mtext> </mtext><mo stretchy="false">(</mo><mfrac><mrow><mi>X</mi><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac><msup><mo stretchy="false">)</mo><mn>4</mn></msup><mo>−</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">Kurtosis = E\ (\frac{X - \mu}{\sigma})^4 - 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">os</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></span></p><p><strong>样本峰度</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>g</mi><mn>2</mn></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo><mo>⋅</mo><msup><mi>s</mi><mn>4</mn></msup></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover><msup><mo stretchy="false">)</mo><mn>4</mn></msup><mo>−</mo><mn>3</mn><mo>⋅</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>3</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">g_2 = \frac{n(n+1)}{(n-1)(n-2)(n-3)\cdot s^4}\sum\limits_{i=1}^n\ (x_i - \bar{x})^4 - 3\cdot \frac{(n-1)^2}{(n-2)(n-3)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5678em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2222em;"><span class="mord">ˉ</span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4271em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>峰度判断：</p><ul><li><p>正态分布：Kurtosis = 0</p></li><li><p>峰度越大，高峰分布：两端数据多（厚尾），中间数据少，且集中在均值附近。</p></li><li><p>Kurtosis &gt; 0 ，与正态分布相比是高峰</p></li></ul><h4 id="1-3-3-R-语言实现">1.3.3 R 语言实现</h4><p>调用 <code>moments</code> 包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span><span class="string">&quot;moments&quot;</span><span class="punctuation">)</span></span><br><span class="line">grade.skewness <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> skewness<span class="punctuation">)</span></span><br><span class="line">grade.kurtosis <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> kurtosis<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">grade.skewness</span><br><span class="line"><span class="comment">#       政治       语文       数学       物理 </span></span><br><span class="line"><span class="comment"># -0.3105433 -0.6525492  0.5757198  0.5463615 </span></span><br><span class="line"></span><br><span class="line">grade.kurtosis  <span class="comment"># 没有减 3</span></span><br><span class="line"><span class="comment">#     政治     语文     数学     物理 </span></span><br><span class="line"><span class="comment"># 2.832892 3.416347 3.539414 3.308497 </span></span><br><span class="line"></span><br><span class="line">grade.kurtosis <span class="operator">&lt;-</span> apply<span class="punctuation">(</span>mydata<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> kurtosis<span class="punctuation">)</span> <span class="operator">-</span> <span class="number">3</span></span><br><span class="line">grade.kurtosis</span><br><span class="line"><span class="comment">#       政治       语文       数学       物理 </span></span><br><span class="line"><span class="comment"># -0.1671077  0.4163471  0.5394144  0.3084971 </span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】：R 语言的 <code>kurtosis()</code> 函数没有进行 <code>- 3</code> 操作。</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kurtosis<span class="punctuation">(</span>rnorm<span class="punctuation">(</span><span class="number">10000</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 没有减 3</span></span><br><span class="line"><span class="comment"># [1] 2.999622</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-Q-Q-图">1.3.4 Q-Q 图</h4><p><strong>Q-Q Plot</strong> ：对于观测数据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1,\ x_2,\ \cdots,\ x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 对其排序后得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><mo>⋯</mo><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">x_{(1)} \leq x_{(2)} \leq \cdots \leq x_{(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9912em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9912em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7858em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span> ，它们的概率为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>j</mi><mi>n</mi></mfrac><mo>≈</mo><mfrac><mrow><mi>j</mi><mo>−</mo><mn>0.375</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>0.25</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(X \leq x_{(j)}) = \frac{j}{n} \approx \frac{j - 0.375}{n + 0.25}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0225em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1059em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.25</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.375</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>然后取出标准正态分布的分位数点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>F</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mfrac><mrow><mi>j</mi><mo>−</mo><mn>0.375</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>0.25</mn></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F^{-1}(\frac{j - 0.375}{n + 0.25})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3111em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9078em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">0.25</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">0.375</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span> 。绘制散点图：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>F</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mfrac><mrow><mi>j</mi><mo>−</mo><mn>0.375</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>0.25</mn></mrow></mfrac><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(F^{-1}(\frac{j - 0.375}{n + 0.25}),\ x_{(j)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1059em;vertical-align:-0.7693em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.25</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0.375</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>若大致为线性关系/直线，则可以认为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 满足近似正态。</p><p><strong>R 语言实现</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> mydata<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">qqnorm<span class="punctuation">(</span>x<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Q-Q Plot&quot;</span><span class="punctuation">)</span></span><br><span class="line">qqline<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/qq.png" style="zoom:25%;" /><p>对于非正态的 Q-Q 图，有如下的例子：左边为右偏，右边为左偏</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743665372563.png" alt=""></p><h3 id="1-4-其他">1.4 其他</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fivenum<span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># 5 个分位数 min, q1, median, q3, max</span></span><br><span class="line">summary<span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># 5 个分位数 + mean</span></span><br><span class="line">quantile<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 5 个分位数 0%  25%  50%  75% 100%</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> fivenum<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">14</span> <span class="number">42</span> <span class="number">51</span> <span class="number">59</span> <span class="number">79</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> summary<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">   Min. <span class="number">1</span>st Qu.  Median    Mean <span class="number">3</span>rd Qu.    Max. </span><br><span class="line">  <span class="number">14.00</span>   <span class="number">42.00</span>   <span class="number">51.00</span>   <span class="number">50.31</span>   <span class="number">59.00</span>   <span class="number">79.00</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> quantile<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">  <span class="number">0</span><span class="operator">%  25%</span>  <span class="number">50</span><span class="operator">%  75%</span> <span class="number">100</span>% </span><br><span class="line">  <span class="number">14</span>   <span class="number">42</span>   <span class="number">51</span>   <span class="number">59</span>   <span class="number">79</span> </span><br></pre></td></tr></table></figure><h2 id="2-描述统计：分类汇总">2 描述统计：分类汇总</h2><h3 id="2-1-aggregate-函数">2.1 aggregate 函数</h3><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aggregate<span class="punctuation">(</span>x <span class="operator">~</span> by<span class="punctuation">,</span> FUN<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> data<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x<span class="operator">:</span> 列名，或是列序号，多个使用 cbind<span class="punctuation">(</span><span class="punctuation">)</span> 组合</span><br><span class="line">by<span class="operator">:</span> 分类依据的列名，多个使用 <span class="operator">+</span> 组合</span><br><span class="line">FUN<span class="operator">:</span> 表示整合的方式，传入函数</span><br><span class="line">na.rm<span class="operator">:</span> 如果为 <span class="literal">NA</span> 则直接删去行数据</span><br><span class="line">data<span class="operator">:</span> 操作的数据框</span><br></pre></td></tr></table></figure><h3 id="2-2-示例">2.2 示例</h3><p>例：按照 <code>city</code> 和 <code>R</code> 计算 <code>minimumpay, maximumpay, logmeanpay</code> 列的均值</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mydata <span class="operator">&lt;-</span> read.csv<span class="punctuation">(</span><span class="string">&quot;jobinfor201xE.csv&quot;</span><span class="punctuation">,</span> encoding <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span><span class="punctuation">)</span></span><br><span class="line">head<span class="punctuation">(</span>mydata<span class="punctuation">)</span></span><br><span class="line">str<span class="punctuation">(</span>mydata<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">aggregate<span class="punctuation">(</span>cbind<span class="punctuation">(</span>minimumpay<span class="punctuation">,</span> maximumpay<span class="punctuation">,</span> logmeanpay<span class="punctuation">)</span> <span class="operator">~</span> city <span class="operator">+</span> R<span class="punctuation">,</span> FUN <span class="operator">=</span> mean<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">,</span> data <span class="operator">=</span> mydata<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   city R minimumpay maximumpay logmeanpay</span><br><span class="line"><span class="number">1</span>  北京 <span class="number">0</span>   <span class="number">8245.586</span>  <span class="number">12548.425</span>   <span class="number">9.035330</span></span><br><span class="line"><span class="number">2</span>  河北 <span class="number">0</span>   <span class="number">4536.095</span>   <span class="number">6748.496</span>   <span class="number">8.521607</span></span><br><span class="line"><span class="number">3</span>  山西 <span class="number">0</span>   <span class="number">6045.913</span>   <span class="number">8798.888</span>   <span class="number">8.678785</span></span><br><span class="line"><span class="number">4</span>  陕西 <span class="number">0</span>   <span class="number">5225.994</span>   <span class="number">7964.530</span>   <span class="number">8.610160</span></span><br><span class="line"><span class="number">5</span>  上海 <span class="number">0</span>   <span class="number">7733.406</span>  <span class="number">11325.135</span>   <span class="number">9.018670</span></span><br><span class="line"><span class="number">6</span>  深圳 <span class="number">0</span>   <span class="number">7430.474</span>  <span class="number">11419.152</span>   <span class="number">9.001751</span></span><br><span class="line"><span class="number">7</span>  北京 <span class="number">1</span>   <span class="number">9533.537</span>  <span class="number">14261.561</span>   <span class="number">9.245172</span></span><br><span class="line"><span class="number">8</span>  河北 <span class="number">1</span>   <span class="number">4500.000</span>   <span class="number">5999.000</span>   <span class="number">8.565888</span></span><br><span class="line"><span class="number">9</span>  山西 <span class="number">1</span>   <span class="number">3500.000</span>   <span class="number">5499.500</span>   <span class="number">8.301702</span></span><br><span class="line"><span class="number">10</span> 陕西 <span class="number">1</span>   <span class="number">8318.182</span>  <span class="number">11226.455</span>   <span class="number">9.007055</span></span><br><span class="line"><span class="number">11</span> 上海 <span class="number">1</span>  <span class="number">10665.874</span>  <span class="number">16020.449</span>   <span class="number">9.388033</span></span><br><span class="line"><span class="number">12</span> 深圳 <span class="number">1</span>  <span class="number">10682.540</span>  <span class="number">16854.706</span>   <span class="number">9.418756</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在描述行统计中，除了统计图表，统计量可以定量的描述数据。本章介绍常见的统计量：均值、方差、标准差、中位数、四分位数、变异系数、IQR、极差、偏度、峰度、Q-Q 图。以及分类汇总函数 aggregate 。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>树的遍历算法</title>
    <link href="https://blog.iskage.online/posts/cb9a2247.html"/>
    <id>https://blog.iskage.online/posts/cb9a2247.html</id>
    <published>2025-04-03T07:16:00.000Z</published>
    <updated>2025-04-06T13:33:20.624Z</updated>
    
    <content type="html"><![CDATA[<h1>树的遍历算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p><strong>树的遍历</strong>常见方案：前序遍历 (preorder traversal) ，后序遍历 (postorder traversal) ，二叉树的中序遍历 (inorder traversal) ，层序遍历/广度优先遍历 (level order traversal/breadth-first traversal) 。</p><h2 id="1-树的遍历算法">1 树的遍历算法</h2><p>树的遍历（traversal）：按某种规则不重复地访问树的所有节点</p><ul><li>前序遍历（preorder traversal）：先访问根，再递归访问子树。如树有序，则按顺序访问子树。</li><li>后序遍历（postorder traversal） ：先递归访问子树，再访问根。如树有序，则按顺序访问子树</li><li>二叉树的中序遍历（inorder traversal）：先递归访问左孩子，再访问根节点，再递归访问右孩子。</li><li>层序遍历/广度优先遍历（level order traversal/breadth-first traversal）：按层为顺序遍历，每一层从左到右遍历。</li></ul><p>以二叉树的遍历算法为例，可直观的理解为：设二叉树由根𝐷 、左子树𝐿和右子树𝑅构成</p><ul><li>前序遍历：<code>D -&gt; L -&gt; R</code></li><li>后序遍历：<code>L -&gt; R -&gt; D</code></li><li>中序遍历：<code>L -&gt; D -&gt; R</code></li><li>层序遍历：从低到高逐层，从左到右遍历</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    D --&gt; L</span><br><span class="line">    D --&gt; R</span><br></pre></td></tr></table></figure><h3 id="1-1-深度优先">1.1 深度优先</h3><h4 id="1-1-1-前序遍历">1.1.1 前序遍历</h4><p>在树 T 的<strong>前序遍历</strong>中，首先访问 T 的根，然后递归地访问子树的根。如果这棵树是有序的，则根据孩子的顺序遍历子树。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Algorithm preOrder(T, p):</span><br><span class="line">visit(p)</span><br><span class="line"><span class="keyword">for</span> each child c <span class="keyword">in</span> T.children(p) do</span><br><span class="line">preOrder(T, c)</span><br></pre></td></tr></table></figure><p>可以递归理解：对每一个节点，逐步进行如下操作</p><ol><li>访问根节点</li><li>前序遍历左子树</li><li>前序遍历右子树</li></ol><p>例如：在打印章节时，按照章节顺序打印</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743585357300.png" alt="前序遍历"></p><h4 id="1-1-2-后序遍历">1.1.2 后序遍历</h4><p><strong>后序遍历</strong>可以看作相反的前序遍历，它优先遍历子树的根，即首先从孩子的根开始，然后访问根（因此叫作后序）。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Algorithm postOrder(T, p):</span><br><span class="line"><span class="keyword">for</span> each child c <span class="keyword">in</span> T.children(p) do</span><br><span class="line">postOrder(T, c)</span><br><span class="line">visit(p)</span><br></pre></td></tr></table></figure><p>可以递归理解：对每一个节点，逐步进行如下操作</p><ol><li>后序遍历左子树</li><li>后序遍历右子树</li><li>访问根节点</li></ol><p>例如：反向打印章节</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743585587312.png" alt="后序遍历"></p><h4 id="1-1-3-二叉树的中序遍历">1.1.3 二叉树的中序遍历</h4><p>在<strong>中序遍历</strong>中，我们通过递归遍历左右子树后再访问根节点。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Algorithm inOrder(T, p):</span><br><span class="line"><span class="keyword">if</span> p has a left child lc then</span><br><span class="line">inOrder(T, lc)</span><br><span class="line">visit(p)</span><br><span class="line"><span class="keyword">if</span> p has a right child rc then</span><br><span class="line">inOrder(T, rc)</span><br></pre></td></tr></table></figure><p>可以递归理解：对每一个节点，逐步进行如下操作</p><ol><li>中序遍历左子树</li><li>访问根节点</li><li>中序遍历右子树</li></ol><p>例如：表达式树</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743586675803.png" alt="中序遍历" style="zoom:50%;" /><h4 id="1-1-4-算法分析">1.1.4 算法分析</h4><p>前/中/后序遍历均为<strong>深度优先</strong>遍历算法，可用递归实现，也可用模拟递归栈的方式进行非递归实现。</p><p>递归栈的最大深度和树的深度保持一致：</p><ul><li>最好情况，空间复杂度 <code>O(log n)</code> 。</li><li>最坏情况，空间复杂度 <code>O(n)</code> 。</li></ul><p>因为是遍历，所以时间复杂度为 <code>O(n)</code> 。</p><h3 id="1-2-广度优先：层序遍历">1.2 广度优先：层序遍历</h3><p>用<strong>广度优先</strong>遍历算法，即<strong>层序遍历</strong>算法。在访问深度 d 的位置之前先访问深度 d+1 的位置。按照层次自低向高，每层从左向右访问。伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Algorithm breadthfirst(T):</span><br><span class="line">    Initialize queue Q to contain T.root()</span><br><span class="line">    <span class="keyword">while</span> Q <span class="keyword">not</span> empty do</span><br><span class="line">        p = Q.dequeue()</span><br><span class="line">        visit(p)</span><br><span class="line">        <span class="keyword">for</span> each child c <span class="keyword">in</span> T.children(p) do</span><br><span class="line">        Q.enqueue(c)</span><br></pre></td></tr></table></figure><p>无法用递归实现，借助队列理解：</p><ul><li>先将根节点入队</li><li>每出队一个节点，将其孩子节点依次放入队列</li></ul><p>例如：下面实现了对一个树的逐步层序遍历。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743587103579.png" alt="层序遍历" style="zoom:50%;" /><h2 id="2-Python-实现树遍历">2 Python 实现树遍历</h2><p>首先，继续上一章 <a href="https://blog.iskage.online/posts/7542010b.html#1-5-%E6%A0%91%E7%9A%84%E5%9F%BA%E7%B1%BB-Python-%E5%AE%9E%E7%8E%B0">树与二叉树</a> 定义的 <code>Tree</code> 类进行补充。先定义 <code>__iter__</code> 方法，产生迭代器，其中的 <code>positions()</code> 方法就可以用于指代不同的遍历方式。这个迭代器只是可以使用 <code>for i in obj</code> 的方式直接获取 <code>element</code> 值，而非 <code>Position</code> 节点类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义迭代器：遍历方式可选&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.positions():  <span class="comment"># positions() 可选不同的遍历方式</span></span><br><span class="line">        <span class="keyword">yield</span> p.element()</span><br></pre></td></tr></table></figure><h3 id="2-1-前序遍历">2.1 前序遍历</h3><p>在 <code>Tree</code> 类后继续补充 <code>preorder</code> 方法和 <code>_subtree_preorder</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;前序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_preorder(<span class="variable language_">self</span>.root()):  <span class="comment"># 递归实现</span></span><br><span class="line">            <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_subtree_preorder</span>(<span class="params">self, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;前序遍历子树&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> p  <span class="comment"># 访问根节点</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p):  <span class="comment"># 遍历子树</span></span><br><span class="line">        <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_preorder(c):</span><br><span class="line">            <span class="keyword">yield</span> other</span><br></pre></td></tr></table></figure><p>然后知道 <code>positions()</code> 方法为 <code>preorder()</code> 前序遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">positions</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;指定遍历方法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.preorder()</span><br></pre></td></tr></table></figure><p>或者直接继承 <code>Tree</code> 父类，覆写子类 <code>PreorderTree</code> 类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PreorderTree</span>(<span class="title class_ inherited__">Tree</span>):</span><br><span class="line">    <span class="comment"># ---------------- 遍历算法 ----------------</span></span><br><span class="line">    <span class="comment"># 迭代器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义迭代器：遍历方式可选&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.positions():  <span class="comment"># positions() 可选不同的遍历方式</span></span><br><span class="line">            <span class="keyword">yield</span> p.element()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;前序遍历&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_preorder(<span class="variable language_">self</span>.root()):  <span class="comment"># 递归实现</span></span><br><span class="line">                <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_subtree_preorder</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;前序遍历子树&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">yield</span> p  <span class="comment"># 访问根节点</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p):  <span class="comment"># 遍历子树</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_preorder(c):</span><br><span class="line">                <span class="keyword">yield</span> other</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">positions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;指定遍历方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.preorder()</span><br></pre></td></tr></table></figure><h3 id="2-2-后序遍历">2.2 后序遍历</h3><p>同理，为清晰展示，后面采用继承的方法，子类覆写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostorderTree</span>(<span class="title class_ inherited__">Tree</span>):</span><br><span class="line">    <span class="comment"># ---------------- 遍历算法 ----------------</span></span><br><span class="line">    <span class="comment"># 迭代器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义迭代器：遍历方式可选&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.positions():  <span class="comment"># positions() 可选不同的遍历方式</span></span><br><span class="line">            <span class="keyword">yield</span> p.element()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorder</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;后序遍历&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_postorder(<span class="variable language_">self</span>.root()):  <span class="comment"># 开始递归</span></span><br><span class="line">                <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_subtree_postorder</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;后序遍历子树&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p):  <span class="comment"># 后序遍历子树</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_postorder(c):</span><br><span class="line">                <span class="keyword">yield</span> other</span><br><span class="line">        <span class="keyword">yield</span> p  <span class="comment"># 访问根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">positions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;指定遍历方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.postorder()</span><br></pre></td></tr></table></figure><h3 id="2-3-二叉树的中序遍历">2.3 二叉树的中序遍历</h3><p>此处是在二叉树类 <code>BinaryTree</code> 类中实现，见  <a href="https://blog.iskage.online/posts/7542010b.html#2-6-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95%E7%9A%84-Python-%E5%AE%9E%E7%8E%B0">树与二叉树</a> 。为简单起见，也采用继承 <code>BinaryTree</code> 的方式定义一个新的类 <code>InorderTree</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InorderTree</span>(<span class="title class_ inherited__">BinaryTree</span>):</span><br><span class="line">    <span class="comment"># ---------------- 遍历算法 ----------------</span></span><br><span class="line">    <span class="comment"># 迭代器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义迭代器：遍历方式可选&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>.positions():  <span class="comment"># positions() 可选不同的遍历方式</span></span><br><span class="line">            <span class="keyword">yield</span> p.element()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorder</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;中序遍历&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_inorder(<span class="variable language_">self</span>.root()):  <span class="comment"># 递归实现</span></span><br><span class="line">                <span class="keyword">yield</span> p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_subtree_inorder</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;中序遍历子树&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.left(p) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 遍历左子树</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_inorder(<span class="variable language_">self</span>.left(p)):</span><br><span class="line">                <span class="keyword">yield</span> other</span><br><span class="line">        <span class="keyword">yield</span> p  <span class="comment"># 访问根节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.right(p) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 遍历右子树</span></span><br><span class="line">            <span class="keyword">for</span> other <span class="keyword">in</span> <span class="variable language_">self</span>._subtree_inorder(<span class="variable language_">self</span>.right(p)):</span><br><span class="line">                <span class="keyword">yield</span> other</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">positions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;指定遍历方法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.inorder()</span><br></pre></td></tr></table></figure><h3 id="2-4-广度优先：层序遍历">2.4 广度优先：层序遍历</h3><p>为简单起见，直接在 <code>Tree</code> 基础类中加入新方法 <code>breadthfirst</code> 。其中 <code>LinkedQueue</code> 类是用链表实现的队列结构，具体可见 <a href="https://blog.iskage.online/posts/583f8c56.html#4-%E5%9F%BA%E4%BA%8E%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0">队列 Queue</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">breadthfirst</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;广度优先：层序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">        fringe = LinkedQueue()  <span class="comment"># 队列实现</span></span><br><span class="line">        fringe.enqueue(<span class="variable language_">self</span>.root())  <span class="comment"># 根节点入队</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> fringe.is_empty():</span><br><span class="line">            p = fringe.dequeue()  <span class="comment"># 取出头部</span></span><br><span class="line">            <span class="keyword">yield</span> p  <span class="comment"># 生成</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p):  <span class="comment"># 将子节点入队</span></span><br><span class="line">                fringe.enqueue(c)</span><br></pre></td></tr></table></figure><h2 id="3-树的遍历的应用">3 树的遍历的应用</h2><h3 id="3-1-前序遍历：目录表">3.1 前序遍历：目录表</h3><p>树的前序遍历可以自然地被用于产生文档或书籍的目录表：</p><ul><li>如不需要缩进，则可直接使用<strong>前序遍历</strong>打印目录表</li><li>如需要缩进，则需要定义一个特殊的前序遍历函数</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743596275805.png" alt="通过前序遍历打印目录表" style="zoom:45%;" /><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder_indent</span>(<span class="params">T, p, d</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;前序遍历：打印目录</span></span><br><span class="line"><span class="string">    :param T: 目录树</span></span><br><span class="line"><span class="string">    :param p: 当前节点</span></span><br><span class="line"><span class="string">    :param d: 记录深度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span> * d * <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(p.element()))  <span class="comment"># 记录深度</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> T.children(p):</span><br><span class="line">        preorder_indent(T, c, d + <span class="number">1</span>)  <span class="comment"># 递归打印子树</span></span><br></pre></td></tr></table></figure><h3 id="3-2-后序遍历：计算磁盘空间">3.2 后序遍历：计算磁盘空间</h3><p>计算磁盘空间：</p><ul><li>计算磁盘空间需要将文件系统表示为树后，使用<strong>后序遍历</strong></li><li>需要定义一个特殊的后序遍历函数记录当前占有的存储空间</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743597039347.png" alt="后序遍历计算磁盘空间"></p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_space</span>(<span class="params">T, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算文件系统树，p 节点后的总磁盘空间</span></span><br><span class="line"><span class="string">    :param T: 文件系统树</span></span><br><span class="line"><span class="string">    :param p: 当前节点</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    subtotal = p.element().space()  <span class="comment"># 节点 p 占有的空间</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> T.children(p):  <span class="comment"># 计算 p 的子树总空间</span></span><br><span class="line">        subtotal += disk_space(T, c)  <span class="comment"># 递归计算子树空间</span></span><br><span class="line">    <span class="keyword">return</span> subtotal</span><br></pre></td></tr></table></figure><h3 id="3-3-中序遍历：打印表达式">3.3 中序遍历：打印表达式</h3><p>表达式树是一棵<strong>二叉树</strong>，使用表达式树输出表达式需要一种特殊的<strong>中序遍历</strong>算法：</p><ul><li>访问节点时输出节点存储的值或运算符</li><li>遍历左子树前输出 <code>(</code></li><li>遍历右子树后输出 <code>)</code></li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743586675803.png" alt="中序遍历打印表达式" style="zoom:50%;" /><p><strong>伪代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm printExpression(v)：</span><br><span class="line">    <span class="keyword">if</span> v has a left child</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">        printExpression(left(v))</span><br><span class="line">    <span class="built_in">print</span>(v.element())</span><br><span class="line">    <span class="keyword">if</span> v has a right child</span><br><span class="line">        printExpression(right(v))</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;)&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-4-后序遍历：计算表达式">3.4 后序遍历：计算表达式</h3><p>使用表达式树计算表达式的值需要一种特殊的<strong>后序遍历</strong>：</p><ul><li>使用递归返回子树的值</li><li>访问内部节点时，使用内部节点的运算符对左、右子树的值做运算</li></ul><p><strong>伪代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm evalExpr(v):</span><br><span class="line">    <span class="keyword">if</span> is_leaf (v)</span><br><span class="line">    <span class="keyword">return</span> v.element()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x = evalExpr(left(v))</span><br><span class="line">        y = evalExpr(right(v))</span><br><span class="line">        op = operator stored at v</span><br><span class="line">    <span class="keyword">return</span> x  y</span><br></pre></td></tr></table></figure><h3 id="3-5-后序遍历：剪去值为-0-的子树">3.5 后序遍历：剪去值为 0 的子树</h3><p>给定一棵二叉树，假设其根节点为 <code>root</code> ，此二叉树的所有节点为 <code>0</code> 或 <code>1</code> 。请剪除该二叉树中所有节点的值均为 <code>0</code> 的子树。即若对于 p 节点，它的子节点 q 和以 q 为根节点的子树的值均为 0 ，则删去 q 子树。</p><p><strong>后序遍历</strong>：先对子树进行剪枝、再对当前节点进行剪枝。</p><p>例如：原始左边的树被剪为右边的树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span><span class="number">1</span></span><br><span class="line">   / \ \</span><br><span class="line">  <span class="number">0</span>   <span class="number">1</span>        -&gt;         <span class="number">1</span></span><br><span class="line"> / \ / \   \</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span> <span class="number">0</span>  <span class="number">1</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>代码实现</p><p>为简单起见，先定义节点类（右视图同样沿用这个定义）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">1</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val</span><br><span class="line">        <span class="variable language_">self</span>.left = left</span><br><span class="line">        <span class="variable language_">self</span>.right = right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_left</span>(<span class="params">self, val</span>):</span><br><span class="line">        new = TreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.left <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.left = new</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_right</span>(<span class="params">self, val</span>):</span><br><span class="line">        new = TreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.right = new</span><br><span class="line">        <span class="keyword">return</span> new</span><br></pre></td></tr></table></figure><p>剪枝函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pruneTree</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">should_prune</span>(<span class="params">node: TreeNode</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理左子树</span></span><br><span class="line">        left_prune = should_prune(node.left)  <span class="comment"># 递归查看是否能剪枝</span></span><br><span class="line">        <span class="keyword">if</span> left_prune:</span><br><span class="line">            node.left = <span class="literal">None</span>  <span class="comment"># 剪去</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理右子树</span></span><br><span class="line">        right_prune = should_prune(node.right)  <span class="comment"># 递归查看是否能剪枝</span></span><br><span class="line">        <span class="keyword">if</span> right_prune:</span><br><span class="line">            node.right = <span class="literal">None</span>  <span class="comment"># 剪去</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断当前节点是否可以被剪掉</span></span><br><span class="line">        <span class="keyword">return</span> node.val == <span class="number">0</span> <span class="keyword">and</span> node.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> node.right <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> should_prune(root):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># root 也被剪去</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=============== Before Prune ===============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">=============== After pruning ===============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-6-树的右视图：深度-广度优先">3.6 树的右视图：深度/广度优先</h3><p>给定一棵<strong>二叉树</strong>，假设其根节点为 <code>root</code> 。想象站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值（即二叉树的“右视图”）。</p><p><strong>思路 1：深度优先搜索</strong></p><ul><li>使用特殊的<strong>前序遍历</strong>：先访问右子树、再访问左子树</li><li>遍历时，同时记录当前节点深度，以及一个记录在不同深度碰到的第一个节点的数组</li><li>遍历结束后，数组中的结果即为树的“右视图”</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DFS_rightSideView</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">    result = []  <span class="comment"># 存放右视图</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node, depth</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> depth == <span class="built_in">len</span>(result):</span><br><span class="line">            result.append(node.val)  <span class="comment"># 最右一个元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        dfs(node.right, depth + <span class="number">1</span>)</span><br><span class="line">        dfs(node.left, depth + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    dfs(root, <span class="number">0</span>)  <span class="comment"># 初始 root 根节点</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=============== Initial Tree ===============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line">=============== Right Side View ===============</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>思路 2：广度优先搜索</strong></p><ul><li>使用特殊的<strong>层序遍历</strong>，每一层最后一个访问的节点即为树“右视图”中能看到的该层节点</li><li>使用队列作为辅助结构，可以同时记录下当前深度，或用不同队列记录不同层的遍历结果</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BFS_rightSideView</span>(<span class="params">root: TreeNode</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    result = []  <span class="comment"># 存放右视图</span></span><br><span class="line">    queue = [root]  <span class="comment"># 辅助队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:  <span class="comment"># 队列非空</span></span><br><span class="line">        size = <span class="built_in">len</span>(queue)  <span class="comment"># 树这一层的节点数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">            node = queue.pop(<span class="number">0</span>)  <span class="comment"># 头部出队</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i == size - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 最后一个节点：进入右视图结果列表 result</span></span><br><span class="line">                result.append(node.val)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 否则子树进队</span></span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                queue.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                queue.append(node.right)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=============== Initial Tree ===============</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line">=============== Right Side View ===============</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">树的遍历常见方案：前序遍历 (preorder traversal) ，后序遍历 (postorder traversal) ，二叉树的中序遍历 (inorder traversal) ，层序遍历/广度优先遍历 (level order traversal/breadth-first traversal) 。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（11）MySQL 数据类型</title>
    <link href="https://blog.iskage.online/posts/42004b0.html"/>
    <id>https://blog.iskage.online/posts/42004b0.html</id>
    <published>2025-04-01T13:24:00.000Z</published>
    <updated>2025-04-01T13:25:48.106Z</updated>
    
    <content type="html"><![CDATA[<h1>MySQL 数据类型</h1><p>本章详细的介绍了 MySQL 中主要的数据类型，包括：整数类型、浮点类型、定点数类型、位类型、日期时间类型、文本字符串类型、枚举类型、集合类型、二进制字符串类型、JSON 类型。并详细介绍了它们的使用和区别，以及实际中的选择。</p><h2 id="1-MySQL-的数据类型">1 MySQL 的数据类型</h2><h3 id="1-1-常见的数据类型">1.1 常见的数据类型</h3><p>对于任何一个数据表，每一行的每一列对应的元素都是下列数据类型的一种。</p><table><thead><tr><th>类型</th><th>关键字</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code> <code>SMALLINT</code> <code>MEDIUMINT</code> <code>INT</code> (<code>INTEGER</code>) <code>BIGINT</code></td></tr><tr><td>浮点类型</td><td><code>FLOAT</code> <code>DOUBLE</code></td></tr><tr><td>定点数类型</td><td><code>DECIMAL</code></td></tr><tr><td>位类型</td><td><code>BIT</code></td></tr><tr><td>日期时间类型</td><td><code>YEAR</code> <code>TIME</code> <code>DATE</code> <code>DATETIME</code> <code>TIMESTAMP</code></td></tr><tr><td>文本字符串类型</td><td><code>CHAR</code> <code>VARCHAR</code> <code>TINYTEXT</code> <code>TEXT</code> <code>MEDIUMTEXT</code> <code>LONGTEXT</code></td></tr><tr><td>枚举类型</td><td><code>ENUM</code></td></tr><tr><td>集合类型</td><td><code>SET</code></td></tr><tr><td>二进制字符串类型</td><td><code>BINARY</code> <code>VARBINARY</code> <code>TINYBLOB</code> <code>BLOB</code> <code>MEDIUMBLOB</code> <code>LONGBLOB</code></td></tr><tr><td>JSON 类型</td><td><code>JSON对象</code> <code>JSON 数组</code></td></tr><tr><td>空间数据类型 (单值类型)</td><td><code>GEOMETRY</code> <code>POINT</code> <code>LINESTRING</code> <code>POLYGON</code></td></tr><tr><td>空间数据类型 (集合类型)</td><td><code>MULTIPOINT</code> <code>MULTILINESTRING</code> <code>MULTIPOLYGON</code> <code>GEOMETRYCOLLECTION</code></td></tr></tbody></table><h3 id="1-2-常见数据类型的属性">1.2 常见数据类型的属性</h3><p>在常见数据表时，除了可以指定列的数据类型，还可以指定列的属性。</p><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td><code>NULL</code></td><td>数据列可包含 NULL 值</td></tr><tr><td><code>NOT NULL</code></td><td>数据列不允许包含 NULL 值</td></tr><tr><td><code>DEFAULT</code></td><td>默认值</td></tr><tr><td><code>PRIMARY KEY</code></td><td>主键</td></tr><tr><td><code>AUTO_INCREMENT</code></td><td>自动递增，适用于整数类型</td></tr><tr><td><code>UNSIGNED</code></td><td>无符号</td></tr><tr><td><code>CHARACTER SET name</code></td><td>指定一个字符集</td></tr></tbody></table><p><strong>下面分门别类的介绍这些数据类型：</strong></p><h2 id="2-整数类型">2 整数类型</h2><p><strong>整数类型</strong>一共有 5 种，分别是：<code>TINYINT</code> <code>SMALLINT</code> <code>MEDIUMINT</code> <code>INT</code> (<code>INTEGER</code>) <code>BIGINT</code> 。下面的表展示了他们的区别和特征。</p><h3 id="2-1-整数类型概述">2.1 整数类型概述</h3><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td><code>1</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">-2^7 \sim 2^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><code>SMALLINT</code></td><td><code>2</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15} \sim 2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><code>MEDIUMINT</code></td><td><code>3</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>23</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>23</mn></msup></mrow><annotation encoding="application/x-tex">-2^{23} \sim 2^{23}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>24</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^{24}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">24</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><code>INT</code></td><td><code>4</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31} \sim 2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><code>BIGINT</code></td><td><code>8</code></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup><mo>∼</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63} \sim 2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">0 \sim 2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">64</span></span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table><h3 id="2-2-可选属性">2.2 可选属性</h3><p>整数类型有 3 个可选属性：<code>M</code> <code>UNSIGNED</code> <code>ZEROFILL</code></p><h4 id="2-2-1-M-显示宽度">2.2.1 M 显示宽度</h4><p><code>M</code> : 表示显示宽度，取值范围是 <code>(0, 255)</code> 。例如，<code>int(5)</code> 表示当数据宽度小于 5 位的时候在数字前面需要用字符填满宽度。必须配合 <code>ZEROFILL</code> 表示用 <code>0</code> 填充，否则指定显示宽度无效。</p><blockquote><p>如果数据宽度超过显示宽度限制，不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存。</p></blockquote><p>不过，对于 <code>MySQL8.0</code> ，整数数据类型【不推荐】使用显示宽度属性。如果不指定，则系统为每一种类型指定默认的宽度值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_int1</span><br><span class="line">(</span><br><span class="line">    x TINYINT,</span><br><span class="line">    y <span class="type">SMALLINT</span>,</span><br><span class="line">    z MEDIUMINT,</span><br><span class="line">    m <span class="type">INT</span>,</span><br><span class="line">    n <span class="type">BIGINT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_int1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type      <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> x     <span class="operator">|</span> tinyint   <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> y     <span class="operator">|</span> <span class="type">smallint</span>  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> z     <span class="operator">|</span> mediumint <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> m     <span class="operator">|</span> <span class="type">int</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> n     <span class="operator">|</span> <span class="type">bigint</span>    <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-----------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>在 MySQL 8.0 中，不再推荐显式的使用 <code>M</code> 显示宽度属性。</p><h4 id="2-2-2-UNSIGNED-无符号类型-非负">2.2.2 UNSIGNED 无符号类型 (非负)</h4><p><code>UNSIGNED</code> ：无符号类型（非负），无符号整数类型的最小取值为 <code>0</code> 。所以，如果需要保存非负整数值时，可以将整数类型设置为无符号类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_int3</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">INT</span> UNSIGNED</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_int3;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1    <span class="operator">|</span> <span class="type">int</span> unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h4 id="2-2-3-ZEROFILL-0-填充">2.2.3 ZEROFILL 0 填充</h4><p><code>ZEROFILL</code> ：0填充，（如果某列设置了 ZEROFILL 属性，那么 MySQL 会自动为当前列添加 UNSIGNED 属性），ZEROFILL 只是表示不够 M 位时，用 0 在左边填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_int2</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">INT</span>,</span><br><span class="line">    f2 <span class="type">INT</span>(<span class="number">5</span>),</span><br><span class="line">    f3 <span class="type">INT</span>(<span class="number">5</span>) ZEROFILL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_int2(f1, f2, f3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">123</span>, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_int2(f1, f2)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">123456</span>, <span class="number">123456</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_int2(f1, f2, f3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">123456</span>, <span class="number">123456</span>, <span class="number">123456</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_int2;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> f1     <span class="operator">|</span> f2     <span class="operator">|</span> f3     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">123</span> <span class="operator">|</span>  <span class="number">00123</span> <span class="operator">|</span>  <span class="comment">-- 填充 0</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span> <span class="number">123456</span> <span class="operator">|</span>  <span class="comment">-- 超过显示宽度不影响</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="3-浮点类型">3 浮点类型</h2><p>浮点数和定点数类型的都可以处理<strong>小数</strong>。MySQL 支持的浮点数类型，分别是 <code>FLOAT</code> <code>DOUBLE</code> <code>REAL</code> 。</p><h3 id="3-1-浮点类型概述">3.1 浮点类型概述</h3><ul><li><p><code>FLOAT</code> 表示单精度浮点数；</p></li><li><p><code>DOUBLE</code> 表示双精度浮点数；</p></li><li><p><code>REAL</code> 默认就是 <code>DOUBLE</code> 。</p></li></ul><blockquote><p>若启用 <code>REAL_AS_FLOAT</code> 则 MySQL 就认为 <code>REAL</code> 是 <code>FLOAT</code> 。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> sql_mode <span class="operator">=</span> &quot;REAL_AS_FLOAT&quot;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>类型</th><th>占有字节数</th></tr></thead><tbody><tr><td><code>FLOAT</code></td><td><code>4</code></td></tr><tr><td><code>DOUBLE</code></td><td><code>8</code></td></tr></tbody></table><h3 id="3-2-数据精度【不推荐使用】">3.2 数据精度【不推荐使用】</h3><p>使用 <code>FLOAT(M, D)</code> 或 <code>DOUBLE(M, D)</code> 可以指定浮点数的精度：<code>M</code> 代表<strong>整数位+小数位</strong>，<code>D</code>  代表<strong>小数位</strong>。</p><ul><li>如果存储时，整数部分超出了范围，MySQL 就会报错，不允许存这样的值</li><li>如果存储时，小数点部分若超出范围，则观察四舍五路后是否满足</li></ul><blockquote><p>从 MySQL 8 开始，<code>FLOAT(M, D)</code> 和 <code>DOUBLE(M, D)</code> 用法在官方文档中已经明确【不推荐使用】。另外，关于浮点型的 <code>UNSIGNED</code> 也【不推荐使用】。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_double1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">FLOAT</span>,</span><br><span class="line">    f2 <span class="type">FLOAT</span>(<span class="number">5</span>, <span class="number">2</span>),</span><br><span class="line">    f3 <span class="keyword">DOUBLE</span>,</span><br><span class="line">    f4 <span class="keyword">DOUBLE</span>(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_double1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1    <span class="operator">|</span> <span class="type">float</span>       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f2    <span class="operator">|</span> <span class="type">float</span>(<span class="number">5</span>,<span class="number">2</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f3    <span class="operator">|</span> <span class="keyword">double</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f4    <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>存储报错/警告情况：超出范围</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT INTO</span> test_double1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span> (<span class="number">123.456</span>, <span class="number">1234.456</span>, <span class="number">123.4567</span>, <span class="number">123.45</span>);</span><br><span class="line">ERROR <span class="number">1264</span> (<span class="number">22003</span>): <span class="keyword">Out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;f2&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>正常插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_double1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">123.456</span>, <span class="number">123.456</span>, <span class="number">123.4567</span>, <span class="number">123.45</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> test_double1;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> f1      <span class="operator">|</span> f2     <span class="operator">|</span> f3       <span class="operator">|</span> f4     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123.456</span> <span class="operator">|</span> <span class="number">123.46</span> <span class="operator">|</span> <span class="number">123.4567</span> <span class="operator">|</span> <span class="number">123.45</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-精度误差">3.3 精度误差</h3><p>采用浮点数存储小数会出现明显的精度误差，因为浮点数采用二进制的方式存储小数。以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9.625</mn></mrow><annotation encoding="application/x-tex">9.625</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9.625</span></span></span></span> 为例，其在 MySQL 的浮点数的存储方式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1001.101</mn></mrow><annotation encoding="application/x-tex">1001.101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1001.101</span></span></span></span> 即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.001101</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1.001101 \times 2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.001101</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 。此时如果结尾不是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mn>5</mn></mrow><annotation encoding="application/x-tex">0,\ 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span></span></span></span> ，则无法用二进制精确表达。</p><p>因此，如果用到浮点数，由于浮点数是不准确的，所以避免使用 <code>==</code> 判断两个浮点数是否相等。在一些对精确度要求较高的项目中，不要使用浮点数。</p><p>使用 MySQL 中精准的数据类型：<strong>定点数类型</strong> <code>DECIMAL</code> 。</p><h2 id="4-定点数类型">4 定点数类型</h2><h3 id="4-1-定点数概述">4.1 定点数概述</h3><p>使用 <code>DECIMAL(M, D)</code> 的方式表示<strong>高精度小数</strong>。其中，<code>M</code> 被称为精度，<code>D</code> 被称为标度。其中范围为 <code>0 &lt;= M &lt;= 65</code>  <code>0 &lt;= D &lt;= 30</code> <code>D &lt; M</code> 。例如， <code>DECIMAL(5, 2)</code> 表示该列取值范围是 <code>-999.99~999.99</code> 。</p><table><thead><tr><th>类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td><code>DECIMAL(M, D)</code></td><td><code>M+2</code> 字节</td><td>有效范围由 <code>M</code> 和 <code>D</code> 决定</td></tr></tbody></table><h3 id="4-2-精度">4.2 精度</h3><p><code>DECIMAL(M, D)</code> 的最大取值范围与 <code>DOUBLE</code> 类型一样，但是有效的数据范围是由 <code>M</code> 和 <code>D</code> 决定的</p><ul><li><code>DECIMAL</code> 的存储空间并不是固定的，由精度值 <code>M</code> 决定，总共占用的存储空间为 <code>M+2</code> 个字节。</li><li>定点数在 MySQL 内部以 <code>字符串</code> 的形式进行存储，这就决定了它一定是精准的。</li><li>当 <code>DECIMAL</code> 类型不指定精度和标度时，其默认为 <code>DECIMAL(10, 0)</code> 。当数据的精度超出了定点数类型的精度范围时，同样会进行四舍五入处理。</li></ul><p>浮点数 vs 定点数</p><ul><li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景。</li><li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_decimal1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">DECIMAL</span>,</span><br><span class="line">    f2 <span class="type">DECIMAL</span>(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_decimal1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type          <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1    <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f2    <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="5-位类型">5 位类型</h2><p><code>BIT</code> 类型中存储的是<strong>二进制值</strong>。</p><h3 id="5-1-位类型概述">5.1 位类型概述</h3><table><thead><tr><th>类型</th><th>长度</th><th>长度范围</th><th>占有空间</th></tr></thead><tbody><tr><td><code>BIT(M)</code></td><td><code>M</code></td><td><code>1 &lt;= M &lt;= 64</code></td><td>约 <code>(M + 7) / 8</code> 个字节</td></tr></tbody></table><p>位数 <code>M</code> 的含义：</p><ul><li><p><code>BIT</code> 类型，如果没有指定 <code>M</code> ，默认是 <code>1</code> 位，表示只能存 <code>1</code> 位的二进制值。</p></li><li><p><code>M</code> 是表示二进制的位数，位数最小值为 <code>1</code> ，最大值为 <code>64</code> 。</p></li></ul><h3 id="5-2-实际使用">5.2 实际使用</h3><p>创建表并指定属性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_bit1</span><br><span class="line">(</span><br><span class="line">    f1 BIT,</span><br><span class="line">    f2 BIT(<span class="number">5</span>),</span><br><span class="line">    f3 BIT(<span class="number">64</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_bit1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type    <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1    <span class="operator">|</span> bit(<span class="number">1</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f2    <span class="operator">|</span> bit(<span class="number">5</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f3    <span class="operator">|</span> bit(<span class="number">64</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>在向 <code>BIT</code> 类型的字段中插入数据时，一定要确保插入的数据在 <code>BIT</code> 类型支持的范围内，即位数不可超过 <code>M</code> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT INTO</span> test_bit1(f1)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span> (<span class="number">2</span>);</span><br><span class="line">ERROR <span class="number">1406</span> (<span class="number">22001</span>): Data too long <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;f1&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用 <code>SELECT</code> 命令查询位字段时，可以用 <code>BIN()</code> 或 <code>HEX()</code> 或 <code>+ 0</code> 的方法进行读取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_bit1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> f1         <span class="operator">|</span> f2         <span class="operator">|</span> f3         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x01</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="number">0x17</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x01</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BIN(f2), HEX(f2), f2 <span class="operator">+</span> <span class="number">0</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> test_bit1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> BIN(f2) <span class="operator">|</span> HEX(f2) <span class="operator">|</span> f2 <span class="operator">+</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10111</span>   <span class="operator">|</span> <span class="number">17</span>      <span class="operator">|</span>     <span class="number">23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><code>BIN()</code> 查看二进制；<code>HEX()</code> 查看十六进制；<code>+ 0</code> 间接转换为十进制。</p></blockquote><h2 id="6-日期与时间类型">6 日期与时间类型</h2><p><strong>日期和时间类型</strong>主要有：<code>YEAR</code> <code>TIME</code> <code>DATE</code> <code>DATETIME</code> <code>TIMESTAMP</code></p><ul><li><code>YEAR</code> 类型通常用来表示 年</li><li><code>DATE</code> 类型通常用来表示 年、月、日</li><li><code>TIME</code> 类型通常用来表示 时、分、秒</li><li><code>DATETIME</code> 类型通常用来表示 年、月、日、时、分、秒</li><li><code>TIMESTAMP</code> 类型通常用来表示 带时区的年、月、日、时、分、秒</li></ul><h3 id="6-1-日期与时间类型概述">6.1 日期与时间类型概述</h3><table><thead><tr><th>类型</th><th>字节</th><th>日期格式</th><th>最小值</th></tr></thead><tbody><tr><td><code>YEAR</code></td><td><code>1</code></td><td><code>YYYY</code> <code>YY</code></td><td><code>1901</code> - <code>2155</code></td></tr><tr><td><code>TIME</code></td><td><code>3</code></td><td><code>HH:MM:SS</code></td><td><code>-838:59:59</code>- <code>838:59:59</code></td></tr><tr><td><code>DATE</code></td><td><code>3</code></td><td><code>YYYY-MM-DD</code></td><td><code>1000-01-01</code> - <code>9999-12-03</code></td></tr><tr><td><code>DATETIME</code></td><td><code>8</code></td><td><code>YYYY-MM-DD HH:MM:SS</code></td><td><code>1000-01-01 00:00:00</code> - <code>9999-12-31 23:59:59</code></td></tr><tr><td><code>TIMESTAMP</code></td><td><code>4</code></td><td><code>YYYY-MM-DD HH:MM:SS</code></td><td><code>1970-01-01 00:00:00 UTC</code> - <code>2038-01-19 03:14:07 UTC</code></td></tr></tbody></table><blockquote><p><code>TIME</code> 的范围是因为可以用来表示时间间隔。</p></blockquote><h3 id="6-2-各种类型">6.2 各种类型</h3><h4 id="6-2-1-YEAR-类型">6.2.1 YEAR 类型</h4><p><code>YEAR</code> 类型用来表示年份，只需要 <code>1</code> 个字节的存储空间。</p><p>以 4 位字符串或数字格式表示 YEAR 类型，其格式为 <code>YYYY</code> ，最小值为 1901 ，最大值为 2155 。以 2 位字符串格式表示 YEAR 类型，最小值为 00 ，最大值为 99 ：</p><ul><li><p>当取值为 <code>01</code> 到 <code>69</code> 时，表示 2001 到 2069</p></li><li><p>当取值为 <code>70</code> 到 <code>99</code> 时，表示 1970 到 1999</p></li><li><p>当取值为整数的 <code>0</code> 或 <code>00</code> 添加时，表示 0000 年</p></li><li><p>当取值为日期/字符串的 <code>'0'</code> 添加时，表示 2000 年</p></li></ul><blockquote><p>【不推荐】使用 2 位格式。默认 <code>YEAR</code> 就是 <code>YEAR(4)</code> 即为 4 位。同时，也【不推荐】指定显示宽度 <code>(M)</code> 。最好直接使用 <code>YEAR</code> 。</p></blockquote><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_year</span><br><span class="line">(</span><br><span class="line">    f1 <span class="keyword">YEAR</span>,  <span class="comment">-- 推荐</span></span><br><span class="line">    f2 <span class="keyword">YEAR</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_year</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2020&#x27;</span>, <span class="string">&#x27;2021&#x27;</span>);  <span class="comment">-- 推荐</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_year</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;45&#x27;</span>, <span class="string">&#x27;71&#x27;</span>);  <span class="comment">-- 不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_year</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">0</span>, <span class="string">&#x27;0&#x27;</span>);  <span class="comment">-- 0 和 &#x27;0&#x27; 对应 0000 年和 2000 年</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_year;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> f1   <span class="operator">|</span> f2   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2020</span> <span class="operator">|</span> <span class="number">2021</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2045</span> <span class="operator">|</span> <span class="number">1971</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0000</span> <span class="operator">|</span> <span class="number">2000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="6-2-2-DATE-类型">6.2.2 DATE 类型</h4><p><code>DATE</code> 类型表示日期，格式为 <code>YYYY-MM-DD</code> ，其中，YYYY 表示年份，MM 表示月份，DD 表示日期。需要 3 个字节的存储空间。</p><p>在向 DATE 类型的字段插入数据时：</p><ul><li>以 <code>YYYY-MM-DD</code> 格式或者 <code>YYYYMMDD</code> 格式表示的字符串日期（<code>YYYYMMDD</code> 格式会被转化为<code>YYYY-MM-DD</code> 格式）</li><li>以 <code>YY-MM-DD</code> 格式或者 <code>YYMMDD</code> 格式表示的字符串日期</li><li>使用 <code>CURRENT_DATE()</code> 或者 <code>NOW()</code> 函数，会插入当前系统的日期</li></ul><blockquote><p>仍然【不推荐】使用 2 位表达年。</p></blockquote><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_date1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据：字符串/整型/<code>CURRENT_DATE()</code> <code>NOW()</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_date1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2024-04-01&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;20240401&#x27;</span>),</span><br><span class="line">       (<span class="number">20201001</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_date1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="built_in">CURRENT_DATE</span>()),</span><br><span class="line">       (NOW());</span><br></pre></td></tr></table></figure><h4 id="6-2-3-TIME-类型">6.2.3 TIME 类型</h4><p><code>TIME</code> 类型用来表示时间。需要 3 个字节的存储空间，格式为 <code>HH:MM:SS</code> 其中，<code>HH</code> 表示小时，<code>MM</code> 表示分钟，<code>SS</code> 表示秒。</p><p>在向 TIME 类型的字段插入数据时：</p><ul><li>可以使用带有冒号的字符串，格式为 <code>'D HH:MM:SS'</code> <code>'HH:MM:SS'</code> <code>'HH:MM'</code> <code>'D HH:MM'</code> <code>'D HH'</code>  <code>'SS'</code> 。其中 <code>D</code> 表示天，其最小值为 <code>0</code> ，最大值为 <code>34</code> ，D 会被转化为小时，<code>D * 24 + HH</code></li><li>可以使用不带有冒号的字符串或者数字，格式为 <code>'HHMMSS'</code> <code>HHMMSS</code> 。特别地，<code>1210</code> 表示 <code>00:12:10</code></li><li>使用 <code>CURRENT_TIME()</code> <code>NOW()</code> 插入当前系统的时间</li></ul><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_time1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">TIME</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_time1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2 12:30:29&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;12:35:29&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_time1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;123520&#x27;</span>),</span><br><span class="line">       (<span class="number">124011</span>),</span><br><span class="line">       (<span class="number">1210</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_time1</span><br><span class="line"><span class="keyword">VALUES</span> (NOW()),</span><br><span class="line">       (<span class="built_in">CURRENT_TIME</span>());</span><br></pre></td></tr></table></figure><h4 id="6-2-4-DATETIME-类型">6.2.4 DATETIME 类型</h4><p><code>DATETIME</code> 总共需要 8 个字节的存储空间。在格式上为 DATE 类型和 TIME 类型的组合，可以表示为 <code>YYYY-MM-DD HH:MM:SS</code> ，其中 YYYY 表示年份，MM 表示月份，DD 表示日期，HH 表示小时，MM 表示分钟，SS 表示秒。</p><p>在向 DATETIME 类型的字段插入数据时：</p><ul><li>以 <code>'YYYY-MM-DD HH:MM:SS'</code> 格式或者 <code>'YYYYMMDDHHMMSS'</code> 格式的字符串插入，被转化为 <code>YYYY-MM-DD HH:MM:SS</code> 格式</li><li>【不推荐】以 <code>'YY-MM-DD HH:MM:SS'</code> 格式或者 <code>'YYMMDDHHMMSS'</code> 格式的字符串插入，被转化为 <code>YYYY-MM-DD HH:MM:SS</code> 格式</li><li>使用 <code>CURRENT_TIME()</code> <code>NOW()</code> 插入当前系统的时间</li></ul><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_datetime1</span><br><span class="line">(</span><br><span class="line">    dt DATETIME</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_datetime1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2024-04-01 06:50:30&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;20240401065030&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_datetime1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">20240402065030</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_datetime1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="built_in">CURRENT_TIMESTAMP</span>()),</span><br><span class="line">       (NOW());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_datetime1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> dt                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2024</span><span class="number">-04</span><span class="number">-01</span> <span class="number">06</span>:<span class="number">50</span>:<span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2024</span><span class="number">-04</span><span class="number">-01</span> <span class="number">06</span>:<span class="number">50</span>:<span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2024</span><span class="number">-04</span><span class="number">-02</span> <span class="number">06</span>:<span class="number">50</span>:<span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2025</span><span class="number">-04</span><span class="number">-01</span> <span class="number">19</span>:<span class="number">56</span>:<span class="number">03</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2025</span><span class="number">-04</span><span class="number">-01</span> <span class="number">19</span>:<span class="number">56</span>:<span class="number">03</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="6-2-5-TIMESTAMP-类型">6.2.5 TIMESTAMP 类型</h4><p><code>TIMESTAMP</code> 显示格式与 DATETIME 类型相同，都是 <code>YYYY-MM-DD HH:MM:SS</code> ，需要 4 个字节的存储空间。但是 TIMESTAMP 存储的时间范围比 DATETIME 要小很多，只能存储 <code>'1970-01-01 00:00:01 UTC'</code> 到 <code>'2038-01-19 03:14:07 UTC'</code> 之间的时间。其中，UTC 表示世界统一时间，也叫作世界标准时间。</p><ul><li>TIMESTAMP 会对当前时间所在的时区进行转换。因此，使用 TIMESTAMP 存储的同一个时间值，在不同的时区查询时会显示不同的时间。</li><li>插入的时间超出了 TIMESTAMP 类型的范围，则报错。</li></ul><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_timestamp1</span><br><span class="line">(</span><br><span class="line">    ts <span class="type">TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_timestamp1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1970-01-02 03:04:50&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;19700102030405&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_timestamp1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="built_in">CURRENT_TIMESTAMP</span>()),</span><br><span class="line">       (NOW());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_timestamp1;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> ts                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-02</span> <span class="number">03</span>:<span class="number">04</span>:<span class="number">50</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-02</span> <span class="number">03</span>:<span class="number">04</span>:<span class="number">05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2025</span><span class="number">-04</span><span class="number">-01</span> <span class="number">20</span>:<span class="number">02</span>:<span class="number">42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2025</span><span class="number">-04</span><span class="number">-01</span> <span class="number">20</span>:<span class="number">02</span>:<span class="number">42</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>超出范围</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT INTO</span> test_timestamp1</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;2038-01-20 03:14:07&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1292</span> (<span class="number">22007</span>): Incorrect datetime <span class="keyword">value</span>: <span class="string">&#x27;2038-01-20 03:14:07&#x27;</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;ts&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>修改时区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> time_zone <span class="operator">=</span> <span class="string">&#x27;+9:00&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>TIMESTAMP</code> 底层存储的是距离 <code>1970-1-1 0:0:0</code> 0 毫秒的毫秒值。</p></blockquote><h2 id="7-文本字符串类型">7 文本字符串类型</h2><p><strong>文本字符串</strong>分为： <code>CHAR</code> <code>VARCHAR</code> <code>TINYTEXT</code> <code>TEXT</code> <code>MEDIUMTEXT</code> <code>LONGTEXT</code> <code>ENUM</code> <code>SET</code>类型。除了传统的 <code>CHAR</code> <code>VARCHAR</code> <code>TINYTEXT</code> <code>TEXT</code> <code>MEDIUMTEXT</code> <code>LONGTEXT</code> 类型，<code>ENUM</code> 类型也被称为枚举类型，<code>SET</code> 类型被称为集合类型。</p><h3 id="7-1-CHAR-与-VARCHAR-类型">7.1 CHAR 与 VARCHAR 类型</h3><p><code>CHAR</code> 和 <code>VARCHAR</code> 类型可以存储比较短的字符串。</p><table><thead><tr><th>类型</th><th>特点</th><th>长度范围</th><th>占有存储空间</th></tr></thead><tbody><tr><td><code>CHAR(M)</code></td><td>固定长度</td><td><code>0 &lt;= M &lt;= 255</code></td><td>M 个字节</td></tr><tr><td><code>VARCHAR(M)</code></td><td>可变长度</td><td><code>0 &lt;= M &lt;= 65535</code></td><td>(实际长度 + 1) 个字节</td></tr></tbody></table><h4 id="7-1-1-CHAR-类型">7.1.1 CHAR 类型</h4><p><strong>CHAR 类型：</strong></p><ul><li><code>CHAR(M)</code> 需要预先定义字符串长度。如果不指定，则长度默认是 <code>1</code> 个字符。</li><li>如果数据的实际长度比 CHAR 类型声明的长度小，则会在<strong>右侧填充</strong>空格以达到指定的长度。</li><li>当检索 CHAR 类型的数据时，会<strong>去除尾部的空格</strong>。</li><li>定义 CHAR 类型字段时，声明的 <code>M</code> 即为 CHAR 类型字段所占的存储空间的字节数。</li></ul><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_char1</span><br><span class="line">(</span><br><span class="line">    c1 <span class="type">CHAR</span>,</span><br><span class="line">    c2 <span class="type">CHAR</span>(<span class="number">5</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_char1</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_char1(c2)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;a  &#x27;</span>);</span><br></pre></td></tr></table></figure><p>检索数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(c2)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> test_char1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">CHAR_LENGTH</span>(c2) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">4</span> <span class="operator">|</span>  <span class="comment">-- &#x27;test&#x27; 4 个字符</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>  <span class="comment">-- &#x27;a  &#x27;  1 个字符，说明删去了右边的空格</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="7-1-2-VARCHAR-类型">7.1.2 VARCHAR 类型</h4><p><strong>VARCHAR 类型：</strong></p><ul><li><code>VARCHAR(M)</code> 必须指定长度 <code>M</code> ，否则报错。</li><li>MySQL 5.0 以上，<code>VARCHAR(M)</code> 指的是 M 个字符，不是 M 个字节。</li><li>检索 VARCHAR 类型的字段数据时，会<strong>保留数据尾部的空格</strong>。</li><li>VARCHAR 类型的字段所占用的存储空间为<strong>字符串实际长度加1个字节</strong>。</li></ul><p>创建、插入、检索方法与 <code>CHAR</code> 相同，只是检索 VARCHAR 类型的字段数据时，会保留数据尾部的空格，且二者的存储方式不同。</p><blockquote><p><code>CHAR</code> 和 <code>VARCHAR</code> 比较：存储很短的信息、固定长度信息、以及需要频繁修改数据时，都推荐使用 <code>CHAR</code> 。（最后一个是因为，VARCHAR 是可变的，其存储长度需要计算实际字符串长度，频繁修改会增加计算负担）</p></blockquote><h3 id="7-2-TEXT-类型">7.2 TEXT 类型</h3><p><code>TEXT</code> 用来保存文本类型的字符串，总共包含 4 种类型，分别为 <code>TINYTEXT</code> <code>TEXT</code> <code>MEDIUMTEXT</code> <code>LONGTEXT</code> 。保存和查询数据时，自动按照实际长度存储，不需要预先定义长度。</p><ul><li>由于实际存储的长度不确定，<strong>TEXT 类型的字段不能作主键</strong>。</li><li>存储和查询时，都<strong>不删除右边的空格</strong>。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513462778.png" alt=""></p><p>创建、插入和检索</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_text</span><br><span class="line">(</span><br><span class="line">    tx TEXT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_text</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;With space on the right.    &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(tx)</span><br><span class="line"><span class="keyword">FROM</span> test_text;  </span><br><span class="line"># <span class="number">28</span> 没有删除右边的空格</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_text;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> tx                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">With</span> space <span class="keyword">on</span> the right.     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>TEXT 文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用 CHAR、VARCHAR 来代替。</p><p>TEXT 和 BLOB 类型的数据是大文件，删除后容易导致“空洞”，使得文件碎片比较多，所以频繁使用的表不建议包含 TEXT 类型字段，建议单独用一个表。</p></blockquote><h3 id="7-3-ENUM-类型">7.3 ENUM 类型</h3><p><code>ENUM</code> 类型（枚举类型），取值范围需要在定义字段时进行指定。设置字段值时，ENUM 类型只允许从成员中选取单个值，不能一次选取多个值。其所需要的存储空间由定义 ENUM 类型时指定的成员个数决定：</p><ul><li>当 ENUM 类型包含 1 ~ 255 个成员时，需要 1 个字节的存储空间</li><li>当 ENUM 类型包含 256 ~ 65535 个成员时，需要 2 个字节的存储空间</li><li>ENUM 类型的成员个数的上限为 65535 个</li></ul><p>下面使用例子说明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_enum</span><br><span class="line">(</span><br><span class="line">    season ENUM (<span class="string">&#x27;春&#x27;</span>, <span class="string">&#x27;夏&#x27;</span>, <span class="string">&#x27;秋&#x27;</span>, <span class="string">&#x27;冬&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 按照值插入</span><br><span class="line"><span class="keyword">INSERT INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;春&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;秋&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;unknown&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 允许按照数字索引的方式获取指定位置的枚举值</span><br><span class="line"><span class="keyword">INSERT INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 报错：未知数字索引</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_enum;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> season  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> 春      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 秋      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="literal">unknown</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 春      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 秋      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="7-4-SET-类型">7.4 SET 类型</h3><p><code>SET</code> 表示一个字符串对象，可以包含 0 个或多个成员，但成员个数的上限为 64 。当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的。</p><blockquote><p>【注意】<code>SET</code> 类型在选取成员时，可以<strong>一次选择多个成员</strong>，这一点与 <code>ENUM</code> 类型不同。</p></blockquote><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_set</span><br><span class="line">(</span><br><span class="line">    s <span class="keyword">SET</span> (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_set (s)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;A&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;A,B&#x27;</span>);  <span class="comment">-- 插入多个成员 &#x27;A&#x27; 和 &#x27;B&#x27;</span></span><br><span class="line"></span><br><span class="line"># 插入重复的 <span class="keyword">SET</span> 类型成员时，自动删除重复的成员</span><br><span class="line"><span class="keyword">INSERT INTO</span> test_set (s)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;A,B,C,A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 报错：插入 SET 成员中不存在的值</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_set (s)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;A, B, C, D&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_set;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> s     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> A     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A,B   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> A,B,C <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="8-二进制字符串类型">8 二进制字符串类型</h2><p>MySQL 中的二进制字符串类型主要存储一些二进制数据，比如可以存储<strong>图片、音频和视频</strong>等二进制数据。MySQL 中支持的二进制字符串类型主要包括 <code>BINARY</code> <code>VARBINARY</code> <code>TINYBLOB</code> <code>BLOB</code> <code>MEDIUMBLOB</code> <code>LONGBLOB</code> 。</p><h3 id="8-1-BINARY-与-VARBINARY-类型">8.1 BINARY 与 VARBINARY 类型</h3><p><code>BINARY(M)</code> 为固定长度的二进制字符串，<code>M</code> 表示最多能存储的字节数，取值范围是 <code>0~255</code> 。如果未指定 M ，表示只能存储 1 个字节。如果字段值不足 M 个字节，将<strong>在右边填充 <code>'\0'</code> 以补齐</strong>指定长度。</p><p><code>VARBINARY(M)</code> 为可变长度的二进制字符串，<code>M</code> 表示最多能存储的字节数。VARBINARY 类型的数据除了存储数据本身外，还需要 1 或 2 个字节来存储数据的字节数。VARBINARY类型**必须指定 M **，否则报错。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513410216.png" alt=""></p><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_binary1</span><br><span class="line">(</span><br><span class="line">    f1 <span class="type">BINARY</span>,</span><br><span class="line">    f2 <span class="type">BINARY</span>(<span class="number">3</span>),</span><br><span class="line">    f3 <span class="type">VARBINARY</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_binary1(f1, f2)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_binary1(f1, f2)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;256&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_binary1(f2, f3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;中文&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> test_binary1(f2, f3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">1024</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_binary1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> f1         <span class="operator">|</span> f2         <span class="operator">|</span> f3             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x61</span>       <span class="operator">|</span> <span class="number">0x610000</span>   <span class="operator">|</span> <span class="keyword">NULL</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x32</span>       <span class="operator">|</span> <span class="number">0x323536</span>   <span class="operator">|</span> <span class="keyword">NULL</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="number">0x380000</span>   <span class="operator">|</span> <span class="number">0xE4B8ADE69687</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="number">0x380000</span>   <span class="operator">|</span> <span class="number">0x31303234</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="8-2-BLOB-类型">8.2 BLOB 类型</h3><p><code>BLOB</code> 是一个<strong>二进制大对象</strong>，可以容纳可变数量的数据。BLOB 包括 <code>TINYBLOB</code> <code>BLOB</code> <code>MEDIUMBLOB</code> <code>LONGBLOB</code> ，它们可容纳值的最大长度不同。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513381573.png" alt=""></p><blockquote><p>实际上，往往不会在 MySQL 数据库中使用 BLOB 类型存储大对象数据，通常会将图片、音频和视频文件存储到服务器的磁盘上，并将图片、音频和视频的访问路径存储到 MySQL 中。</p></blockquote><p>创建的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_blob1</span><br><span class="line">(</span><br><span class="line">    id  <span class="type">INT</span>,</span><br><span class="line">    img MEDIUMBLOB</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="9-JSON-类型">9 JSON 类型</h2><p><code>JSON (JavaScript Object Notation)</code> 是一种<strong>轻量级的数据交换格式</strong>。</p><p>举例说明：创建数据表，表中包含一个 <code>JSON</code> 类型的字段 <code>js</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> test_json</span><br><span class="line">(</span><br><span class="line">    js JSON</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>向表中插入 JSON 数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> test_json (js)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;Mike&quot;,</span></span><br><span class="line"><span class="string">  &quot;age&quot;: 21,</span></span><br><span class="line"><span class="string">  &quot;contact&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;tel&quot;: &quot;123456789&quot;,</span></span><br><span class="line"><span class="string">    &quot;email&quot;: &quot;123@work.com&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查询数据</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513181515.png" alt=""></p><p>**当需要检索 JSON 类型的字段中数据的具体值时，可以使用 <code>-&gt;</code> 或 <code>-&gt;&gt;</code> **</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.name&#x27;</span>          <span class="keyword">AS</span> name,</span><br><span class="line">       js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.age&#x27;</span>           <span class="keyword">AS</span> age,</span><br><span class="line">       js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.contact.tel&#x27;</span></span><br><span class="line">                               <span class="keyword">AS</span> tel,</span><br><span class="line">       js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.contact.email&#x27;</span> <span class="keyword">AS</span> email</span><br><span class="line"><span class="keyword">FROM</span> test_json;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743513350224.png" alt=""></p>]]></content>
    
    
    <summary type="html">本章详细的介绍了 MySQL 中主要的数据类型，包括：整数类型、浮点类型、定点数类型、位类型、日期时间类型、文本字符串类型、枚举类型、集合类型、二进制字符串类型、JSON 类型。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树 Tree &amp; 二叉树 Binary Tree</title>
    <link href="https://blog.iskage.online/posts/7542010b.html"/>
    <id>https://blog.iskage.online/posts/7542010b.html</id>
    <published>2025-03-27T07:16:00.000Z</published>
    <updated>2025-04-06T13:33:24.235Z</updated>
    
    <content type="html"><![CDATA[<h1>树 Tree &amp; 二叉树 Binary Tree</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本章介绍了重要的数据结构：树。并详细讲解了二叉树。包括：树的定义、树的图论性质。并通过 Python 实现了树（基于链表 vs 基于数组），同时分析了时间复杂度。</p><h2 id="1-树-Tree">1 树 Tree</h2><h3 id="1-1-树的定义">1.1 树的定义</h3><p><strong>树 Tree</strong>是一种将元素分层次存储的抽象数据类型。除了最顶部的元素，每个元素在树中都有一个 <em>双亲节点</em> 和零个或者多个 <em>孩子节点</em> 。</p><p><strong>正式定义</strong>：通常我们将树 T 定义为存储一系列元素的有限节点集合，这些节点具有 parent-children 关系并且满足如下属性：</p><ul><li>如果树 T 不为空，则它一定具有一个称为 <em>根节点</em> root 的特殊节点，并且该节点没有父节点。</li><li>每个非根节点 v 都具有唯一的父节点 w ，每个具有父节点 w 的节点都是节点 w 的一个孩子。</li></ul><h3 id="1-2-相关术语">1.2 相关术语</h3><p><strong>根节点</strong> <code>root</code> ：只有直接后继，没有先驱节点</p><p><strong>节点</strong> <code>node</code> ：树的基本组成单位，包含一个数据元素和指向子树的分支</p><p><strong>节点的度</strong> <code>degree</code> ：每个节点拥有的子树的数目</p><p><strong>叶子节点</strong> <code>leaf</code> ：度为 0 的节点，也称为<strong>外部节点</strong> <code>external node</code></p><p><strong>分支节点</strong> ：度不为 0 的节点，也称为<strong>内部节点</strong> <code>internal node</code></p><p><strong>孩子节点</strong> <code>child</code> ：某个节点的直接后继</p><p><strong>父节点</strong> <code>parent</code> ：一个节点是其孩子节点的父节点，也称为双亲节点</p><p><strong>兄弟节点</strong> <code>sibling</code> ：具有相同父节点的节点</p><p><strong>边</strong> <code>edge</code> ：一对节点 <code>(u, v)</code>，u 是 v 的父节点或反之</p><p><strong>路径</strong> <code>path</code> ：一条从 <code>ni</code> 到 <code>nj</code> 的路径，其中任意两个相邻的节点前者是后者的父节点</p><p><strong>祖先节点</strong> <code>ancestor</code> ：根节点到某节点的路径上所有的节点都是该节点的祖先节点</p><p><strong>子孙节点</strong> <code>descendant</code> ：某节点的所有子树上的节点都是其子孙节点</p><p><strong>树的度</strong> ：树中节点度的最大值</p><p><strong>节点的深度</strong> <code>depth</code> ：节点的祖先节点的个数，也称为<strong>层次</strong> <code>level</code></p><p><strong>节点的高度</strong> <code>height</code> ：节点的高度是连接它与它的子孙节点中叶子节点的最长路径的长度</p><p><strong>树的高度</strong> ：根节点的高度为树的高度</p><p><strong>有序树/无序树</strong> ：树中节点的子树从左到右安排有序/无序，各子树位置不能/可以交换</p><p><strong>森林</strong> <code>forest</code> ：数棵互不相交的树的集合</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742982398986.png" alt="树的例子：文件系统"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742982331017.png" alt="树的例子：有序树"></p><h3 id="1-3-树的图论性质">1.3 树的图论性质</h3><h4 id="1-3-1-节点数与度">1.3.1 节点数与度</h4><p><strong>树的节点数等于所有节点度的总和加 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n\ d_i = n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p><strong>证明</strong> 每个节点的度等于后继节点（子节点）的数量；而除了根节点外，每个节点都有一个分支指向它；总的分支数目等于除根节点外所有节点的数目，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><h4 id="1-3-2-树的第-i-层的节点数">1.3.2 树的第 i 层的节点数</h4><p><strong>节点度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 的树，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层至多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>𝑘</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">𝑘^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>n</mi><mi>i</mi></msub><mo>≤</mo><msup><mi>k</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">n_i \leq k^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8747em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">n_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层层的节点数。</p><p><strong>证明</strong> 第 0 层仅有根节点， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k_0 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ；假设结论对第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 层成立，即该层最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>k</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">k^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个节点；而根据定义，树的度为节点度的最大值，即第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 层每个节点最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个后继节点，因此第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层至多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>×</mo><msup><mi>k</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>k</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">k \times k^{i-1} = k^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点。由归纳法，证毕。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><h4 id="1-3-3-树的最大节点数">1.3.3 树的最大节点数</h4><p><strong>度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 且高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 的树，至多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{k^{h+1} - 1}{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 个节点</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>≤</mo><mfrac><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">n \leq \dfrac{k^{h+1} - 1}{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>证明</strong> 由 [性质 1.3.2](####1.3.2 树的度与第 i 层的节点数) 可知，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>k</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">k^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点。则总共节点数不得超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>h</mi></msubsup><mtext> </mtext><msup><mi>k</mi><mi>i</mi></msup><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\sum\limits_{i=0}^{h}\ k^i = \dfrac{k^{h+1} - 1}{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5138em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5361em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。证明完毕。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><h4 id="1-3-4-树的最小高度">1.3.4 树的最小高度</h4><p><strong>节点数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 的树的高度至少为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">[\log_k\ (n(k-1)+1)] -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo>≤</mo><mo stretchy="false">[</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq [\log_k\ (n(k-1)+1)] -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p><strong>证明</strong> 要想达到最小高度，则第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mi>h</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0,\ 1,\ \cdots,\ h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 层均需尽可能多地存储节点；由 [性质 1.3.3](####1.3.3 树的最大节点数) 可知</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><msup><mi>k</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>&lt;</mo><mi>n</mi><mo>≤</mo><mfrac><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\dfrac{k^{h} - 1}{k - 1}&lt; n \leq \dfrac{k^{h+1} - 1}{k - 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>变换可得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>≤</mo><mo stretchy="false">[</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq [\log_k\ (n(k-1)+1)] -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。证毕。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><h3 id="1-4-树的抽象数据类型-ADT">1.4 树的抽象数据类型 ADT</h3><p>树中的节点 ADT 仅支持一个方法：</p><ul><li><code>p.element()</code> : 返回存储在节点p处的元素</li></ul><p>树的基础抽象数据类型 ADT：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ADT Tree &#123;</span><br><span class="line">数据对象: T</span><br><span class="line">基本操作</span><br><span class="line">        T.root(): 返回树 T 的根节点，如 T 为空则返回 <span class="literal">None</span></span><br><span class="line">        T.parent(p): 返回 p 的父节点，如 p 为根节点则返回 <span class="literal">None</span></span><br><span class="line">        T.children(p): 产生 p 的孩子节点的迭代器</span><br><span class="line">        T.num_children(p): 返回 p 的孩子节点的数目</span><br><span class="line">        T.is_root(p): 如 p 为 T 的根，则返回 <span class="literal">True</span></span><br><span class="line">        T.is_leaf(p): 如 p 为树 T 的叶子节点，则返回 <span class="literal">True</span></span><br><span class="line">        T.depth(p): 返回树 T 中 p 节点的深度</span><br><span class="line">        T.height(p): 返回树 T 中 p 节点的高度</span><br><span class="line">        T.is_empty(): 如 T 为空树则返回 <span class="literal">True</span></span><br><span class="line">        <span class="built_in">len</span>(T): 返回树 T 中元素（节点）个数</span><br><span class="line">        T.nodes(): 生成树 T 所有节点的迭代器</span><br><span class="line">        <span class="built_in">iter</span>(T): 生成树 T 中存储的所有元素的迭代</span><br><span class="line">&#125; ADT Tree</span><br></pre></td></tr></table></figure><h3 id="1-5-树的基类-Python-实现">1.5 树的基类 Python 实现</h3><h4 id="1-5-1-抽象类的实现">1.5.1 抽象类的实现</h4><p>下面实现树的基础抽象类：其中内嵌了节点类 <code>Position</code> 。同时，此处只定义了方法名，并没有具体定义，具体定义需要子类继承时具体定义（针对不同类型的树，子类定义方式不同）。</p><p>特别地，基于暂时没有具体定义的抽象方法，具体定义了一些树的通用方法 <code>is_root()</code> <code>is_leaf()</code> <code>is_empty()</code> <code>depth()</code> <code>height()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;树的抽象基础类，基础方法需要子类定义&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 抽象方法: 节点类 具体实现由子类实现 ----------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Position</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;每个元素的位置/节点类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">element</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="comment"># 由子类定义</span></span><br><span class="line">            <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;比较节点是否相同&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 由子类定义</span></span><br><span class="line">            <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;比较节点是否不同&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> (<span class="variable language_">self</span> == other)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 抽象方法: 树的抽象基础类 具体实现由子类实现 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">root</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回根节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parent</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回父节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_children</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回节点 p 下的子节点数目&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器方式返回 p 节点的子类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;树的所有节点数目&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 具体方法: 如果抽象方法被子类定义后 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_root</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断 p 节点是否为根节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.root() == p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断 p 节点是否为叶子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.num_children(p) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断树是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算深度算法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">depth</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回节点 p 的深度，即到根节点的路径距离&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_root(p):</span><br><span class="line">            <span class="comment"># 根节点深度为 0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 递归：当前节点的深度 = 父节点的深度 + 1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + <span class="variable language_">self</span>.depth(<span class="variable language_">self</span>.parent(p))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算高度算法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回节点 p 的高度，即距离其最远叶子节点的路径长&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_root(p):</span><br><span class="line">            <span class="comment"># 叶子节点高度为 0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 当前节点的高度 = 所有子节点高度最大值 + 1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(<span class="variable language_">self</span>.height(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p))</span><br></pre></td></tr></table></figure><h4 id="1-5-2-递归计算深度和高度">1.5.2 递归计算深度和高度</h4><p><strong>计算深度</strong>：根据树中节点的深度的定义，节点的祖先节点的个数即为深度，故可以使用<strong>递归</strong>的方式计算深度：</p><ul><li>如果 <code>p</code> 为根节点，则其深度为 <code>0</code></li><li>否则，<code>p</code> 的深度为其父节点的深度加 <code>1</code></li></ul><p><strong>时间复杂度</strong>：对于位置 <code>p</code> ，计算深度的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mi>d</mi><mi>p</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d_p + 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">d_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 指的是节点 <code>p</code> 的深度，因为该算法对于p的每个祖先节点执行的时间是常数。最坏的情况下运行时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。其中n是树中节点的总个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算深度算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">depth</span>(<span class="params">self, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回节点 p 的深度，即到根节点的路径距离&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.is_root(p):</span><br><span class="line">        <span class="comment"># 根节点深度为 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 递归：当前节点的深度 = 父节点的深度 + 1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="variable language_">self</span>.depth(<span class="variable language_">self</span>.parent(p))</span><br></pre></td></tr></table></figure><p><strong>计算高度</strong>：根据树中节点的高度的定义，连接它与它的子孙节点中叶子节点的最长路径的长度即为高度，故可以使用<strong>递归</strong>的方式计算高度：</p><ul><li>如果 <code>p</code> 为叶子节点，则其高度为 <code>0</code></li><li>否则，<code>p</code> 的高度为其孩子节点中最大的高度加 <code>1</code></li></ul><p><strong>时间复杂度</strong>：如以 <code>p</code> 为根节点的子树有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">n_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 个节点，则时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>p</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n_p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算高度算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">self, p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回节点 p 的高度，即距离其最远叶子节点的路径长&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.is_root(p):</span><br><span class="line">        <span class="comment"># 叶子节点高度为 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 当前节点的高度 = 所有子节点高度最大值 + 1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(<span class="variable language_">self</span>.height(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.children(p))</span><br></pre></td></tr></table></figure><h2 id="2-二叉树-Binary-Tree">2 二叉树 Binary Tree</h2><h3 id="2-1-二叉树的定义">2.1 二叉树的定义</h3><p><strong>二叉树</strong>：是具有以下属性的有序树</p><ul><li>每个节点最多有两个孩子节点。</li><li>每个孩子节点被命名为左孩子或右孩子。</li><li>对于每个节点的孩子节点，在顺序上，左孩子先于右孩子。</li></ul><p><strong>二叉树的递归定义</strong>：二叉树或为空树，或满足以下<strong>任一条件</strong>：</p><ul><li>为一个单独的节点</li><li>根节点有至多两个有序的孩子节点，且根节点的子树也为二叉树</li></ul><h3 id="2-2-二叉树的例子">2.2 二叉树的例子</h3><p><strong>算式表达树</strong></p><p>二叉树能用于表示算术表达式</p><ul><li>内部节点：存储操作符</li><li>叶子节点：存储变量或常数</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742994629723.png" alt="算式表达树" style="zoom:50%;" /><p><strong>决策树</strong></p><p>二叉树可以用来描述决策过程</p><ul><li>内部节点：存储一个回答为“是”或“否”的问题</li><li>叶子节点：存储决策</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742994742939.png" alt="提供投资决策的决策树" style="zoom:50%;" /><p><strong>搜索树</strong></p><p>二叉树可存储有序序列，并使用此二叉树进行搜索</p><ul><li>节点：存储元素</li><li>节点左子树（右子树）的元素均小于（大于）节点存储的元素</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742994851160.png" alt="实线为搜索36（成功），虚线为搜索70（不成功）"></p><h3 id="2-3-二叉树的图论性质">2.3 二叉树的图论性质</h3><p>记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 表示二叉树的节点总数； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>E</mi></msub></mrow><annotation encoding="application/x-tex">n_E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示二叉树的叶子节点数目； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>I</mi></msub></mrow><annotation encoding="application/x-tex">n_I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示二叉树的内部节点数目； <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 表示二叉树的高度。</p><h4 id="2-3-1-基于树的性质">2.3.1 基于树的性质</h4><p>因为二叉树的每个节点的度最多为 2 ，所以基于树的性质可以推出：</p><p><strong>第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层至多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 个节点</strong></p><p><strong>二叉树的节点总数满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>+</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h + 1 \leq n \leq 2^{h+1} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><strong>二叉树的高度满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>≤</mo><mo stretchy="false">[</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq [\log_k\ (n+1)] -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><strong>二叉树叶子节点数目满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>n</mi><mi>E</mi></msub><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">1 \leq n_E \leq 2^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span></span></span></strong> ：叶子节点最少，当整个二叉树为链式结构时成立，此时只有最后一个叶子节点；叶子节点最多，则对于高度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 的二叉树，每一个节点都是度为 2 ，最后有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">2^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span></span></span> 个叶子节点。</p><p><strong>二叉树内部节点数目满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>≤</mo><msub><mi>n</mi><mi>I</mi></msub><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq n_I \leq 2^h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong> ：内部节点最少，当整个二叉树为链式结构时成立，此时内部节点即为链长 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> ；内部节点最多，与叶子节点最多情况相同，排除根节点，所以为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个。</p><h4 id="2-3-2-二叉树独有性质">2.3.2 二叉树独有性质</h4><p><strong>对任何非空二叉树，设叶子节点数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，度为 2 的节点数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，则有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 = n_2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong></p><p><strong>证法1</strong> 设二叉树中度为 1 度节点个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，则有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n = n_0 + n_1 + n+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 。</p><p>根据树的 [性质 1.3.1](####1.3.1 节点数与度) ，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn><mo>×</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><mn>1</mn><mo>×</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><mo>×</mo><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n = 0 \times n_0 + 1 \times n_1 + 2 \times n_2 = n_1 + 2n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</p><p>比较以上两式，可得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 = n_2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。证明完毕 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><p><strong>证法2</strong> 我们从树中取下一个（任意的）外部节点 w 和其父节点 v ，v 为内部节点。若 v 有父节点 u ，则将 u 与 w 之前的兄弟节点 z 连接起来，如图所示。</p><p>重复上述操作，我们最后将会得到仅有一个节点（根节点）的最终树。</p><p>每次操作，叶子节点数目减一；度为 2 的节点数目减一。最后剩下根节点一个孤点（可视作叶子节点），所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 = n_2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。证明完毕 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">□</mi></mrow><annotation encoding="application/x-tex">\square</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.675em;"></span><span class="mord amsrm">□</span></span></span></span></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742998908752.png" alt="归纳过程的变换"></p><h3 id="2-4-二叉树的类别">2.4 二叉树的类别</h3><p><strong>完美二叉树 Perfect Binary Tree</strong> ：高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 且有恰好有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h+1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个节点的二叉树，称为完美二叉树或满二叉树。</p><p><strong>完全二叉树 Complete Binary Tree</strong> ：高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 的完全二叉树，除第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 层外其他各层结点数均达到最大值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> ；第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 层元素尽可能存放在左侧的节点中，使得若某节点右子树高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> ，则其左子树高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。</p><p><strong>完满二叉树 Full Binary Tree</strong> ：也称为 Proper Binary Tree，所有内部节点度均为 2（均有两个孩子）的二叉树。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/tree.png" alt="三种二叉树"></p><h3 id="2-5-二叉树的抽象数据类型-ADT">2.5 二叉树的抽象数据类型 ADT</h3><p>二叉树的 ADT 是对树的 ADT 的拓展，它<strong>继承了树的 ADT 的所有基本操作</strong>，并附加了以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T.left(p): 返回 p 的左孩子节点，若没有则返回 <span class="literal">None</span></span><br><span class="line">T.right(p): 返回 p 的右孩子节点，若没有则返回 <span class="literal">None</span></span><br><span class="line">T.sibling(p): 返回 p 的兄弟节点，若没有则返回 <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="2-6-二叉树新增方法的-Python-实现">2.6 二叉树新增方法的 Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> .basic_tree <span class="keyword">import</span> Tree</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> basic_tree <span class="keyword">import</span> Tree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span>(<span class="title class_ inherited__">Tree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;二叉树的抽象基类，继承 Tree，一些方法暂不定义&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 新增的抽象方法: 具体实现由子类实现 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回当前节点 p 的左孩子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回当前节点 p 的右孩子节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&#x27;must be implemented by subclass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 具体方法: 如果抽象方法被子类定义后 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sibling</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回当前节点 p 的兄弟节点&quot;&quot;&quot;</span></span><br><span class="line">        parent = <span class="variable language_">self</span>.parent(p)  <span class="comment"># 获取父节点</span></span><br><span class="line">        <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 根节点无兄弟节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 非左即右</span></span><br><span class="line">            <span class="keyword">if</span> p == <span class="variable language_">self</span>.left(parent):</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.right(parent)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.left(parent)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;以迭代器的方式返回子节点（先左后右）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.left(p) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">self</span>.left(p)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.right(p) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">self</span>.right(p)</span><br></pre></td></tr></table></figure><h2 id="3-树的实际实现">3 树的实际实现</h2><p>之前定义的 <code>Tree</code> 和 <code>BinaryTree</code> 类都只是形式上的抽象基类。尽管给出了许多支持操作，但它们都不能直接被实例化。</p><p>特别地，具体实现树要能提供 <code>Root</code>、<code>parent</code>、<code>num_children</code>、<code>children</code> 和 <code>__len__</code> 这些方法，对于 Binary Tree 类，还要提供 <code>left</code> 和 <code>right</code> 方法。</p><p>我们可以采用<strong>链式结构</strong>存储树，也可采用<strong>数组</strong>存储树。下面基于二叉树的实现介绍：</p><h3 id="3-1-基于链表：链式存储结构">3.1 基于链表：链式存储结构</h3><p>目标：定义 <code>BinaryTree</code> 类的一个具体子类 <code>LinkedBinaryTree</code> ，该类能够实现二叉树 ADT。</p><h4 id="3-1-1-思路">3.1.1 思路</h4><p>定义一个简单、非公开的 <code>_Node</code> 类表示一个节点，再定义一个公开的 <code>Position</code> 类用于封装节点。</p><p>一个节点存储以下信息：</p><ul><li>元素值</li><li>指向父节点的指针</li><li>指向左孩子的指针</li><li>指向右孩子的指针</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743054428079.png" alt="二叉树链式结构的图示"></p><h4 id="3-1-2-Python-实现">3.1.2 Python 实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> .binary_tree <span class="keyword">import</span> BinaryTree</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> binary_tree <span class="keyword">import</span> BinaryTree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedBinaryTree</span>(<span class="title class_ inherited__">BinaryTree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;链式结构的二叉树&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 非公开节点类 ----------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;非公开节点类&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_parent&#x27;</span>, <span class="string">&#x27;_left&#x27;</span>, <span class="string">&#x27;_right&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, parent=<span class="literal">None</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._parent = parent</span><br><span class="line">            <span class="variable language_">self</span>._left = left</span><br><span class="line">            <span class="variable language_">self</span>._right = right</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 公有的节点类 ----------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Position</span>(BinaryTree.Position):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写父类 BinaryTree 的显式节点类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, container, node</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;具体初始化&quot;&quot;&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>._container = container  <span class="comment"># 标记属于的树</span></span><br><span class="line">            <span class="variable language_">self</span>._node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">element</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;具体实现返回元素值&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._node._element</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;具体实现 ==&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> <span class="built_in">type</span>(<span class="variable language_">self</span>) <span class="keyword">and</span> other._node <span class="keyword">is</span> <span class="variable language_">self</span>._node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 封装公有节点类 Position ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_validate</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在封装 Position 类前判断节点 p 是否合法&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(p, <span class="variable language_">self</span>.Position):</span><br><span class="line">            <span class="comment"># 不是合法的节点类</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;p must be proper Position type&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._container <span class="keyword">is</span> <span class="keyword">not</span> <span class="variable language_">self</span>:</span><br><span class="line">            <span class="comment"># 不属于当前树</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p does not belong to this container&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._node._parent <span class="keyword">is</span> p._node:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p is no longer valid&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> p._node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_position</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据接受的节点类 _Node 封装为一个 Position 类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.Position(<span class="variable language_">self</span>, node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 二叉树具体实现 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个空的二叉树&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._root = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 二叉树公有方法具体实现：覆写父类方法 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回树的节点总数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">root</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回根节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._root)  <span class="comment"># 返回 self.Position 类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parent</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回父节点&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># 判断合法并返回合法对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._parent)  <span class="comment"># 封装为 Position 返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回左子节点&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._left)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回右子节点&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_children</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回孩子节点数目&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> node._left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> node._right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------- 二叉树非公有方法具体实现：一些对树的操作 ----------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_root</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;填入根元素，并返回封装后的 Position 类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Root exists&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>._root = <span class="variable language_">self</span>._Node(e)  <span class="comment"># 创建节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._root)  <span class="comment"># 封装返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_left</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 p 下加左子节点，并返回封装后的类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># 判断是否合法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node._left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Left node exists&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        node._left = <span class="variable language_">self</span>._Node(e, parent=node)  <span class="comment"># 父节点为 node</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._left)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_right</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 p 下加右子节点，并返回封装后的类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">if</span> node._right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Right node exists&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        node._right = <span class="variable language_">self</span>._Node(e, parent=node)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._right)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_replace</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;替换节点 p 的元素值，并返回旧元素&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        old = node._element</span><br><span class="line">        node._element = e</span><br><span class="line">        <span class="keyword">return</span> old</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_delete</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除节点 p 用其孩子替代。当 p 非法或有两个孩子则报错&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># p 非法与否</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.num_children(p) == <span class="number">2</span>:  <span class="comment"># p 有 2 个孩子</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p has two children&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取 p 的孩子节点</span></span><br><span class="line">        child = node._left <span class="keyword">if</span> node._left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> node._right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> child <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 子节点连接父节点的父节点</span></span><br><span class="line">            child._parent = node._parent</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="variable language_">self</span>._root:</span><br><span class="line">            <span class="comment"># 父节点为根节点则子节点成为新根节点</span></span><br><span class="line">            <span class="variable language_">self</span>._root = child</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 更新父节点的父节点的孩子节点</span></span><br><span class="line">            parent = node._parent</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> parent._left:</span><br><span class="line">                parent._left = child</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                parent._right = child</span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span>  <span class="comment"># 节点数减一</span></span><br><span class="line">        node._parent = node  <span class="comment"># 惯例：self.parent -&gt; self</span></span><br><span class="line">        <span class="keyword">return</span> node._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_attach</span>(<span class="params">self, p, t1, t2</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将子树 t1, t2 作为 p 的左右子节点连入树&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_leaf(p):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;position must be leaf&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">type</span>(<span class="variable language_">self</span>) <span class="keyword">is</span> <span class="built_in">type</span>(t1) <span class="keyword">is</span> <span class="built_in">type</span>(t2):  <span class="comment"># 三个树类型必须相同</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Tree types must match&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="built_in">len</span>(t1) + <span class="built_in">len</span>(t2)  <span class="comment"># 更新节点数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t1.is_empty():</span><br><span class="line">            t1._root._parent = node</span><br><span class="line">            node._left = t1._root</span><br><span class="line">            t1._root = <span class="literal">None</span></span><br><span class="line">            t1._size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t2.is_empty():</span><br><span class="line">            t2._root._parent = node</span><br><span class="line">            node._right = t2._root</span><br><span class="line">            t2._root = <span class="literal">None</span></span><br><span class="line">            t2._size = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="3-1-3-算法分析">3.1.3 算法分析</h4><ul><li><p><code>len</code> 方法：在 LinkedBinaryTree 内部实现，使用一个实例变量 <code>self._size</code> 存储T的节点数，花费 <code>O(1)</code> 的时间。</p></li><li><p><code>is_empty</code> 方法：继承自 Tree 类，对 <code>len</code> 方法进行一次调用，因此需要花费 <code>O(1)</code> 的时间。</p></li><li><p>访问方法 <code>root</code>、<code>left</code>、<code>right</code>、<code>parent</code> 和 <code>num_children</code> ：直接在 LinkedBinaryTree 中执行，花费 <code>O(1)</code> 的时间。</p></li><li><p><code>sibling</code> 和 <code>children</code> 方法：从 BinaryTree 类派生，对其他访问方法做固定次的调用，因此，它们的运行时间也是 <code>O(1)</code> 。</p></li><li><p>Tree 类的 <code>is_ root</code> 和 <code>is_leaf</code> 方法：都运行 <code>O(1)</code> 的时间，因为 <code>is_root</code> 调用 <code>root</code> 方法，之后判定两者的位置是否相等；而 <code>is_leaf</code> 调用 <code>left</code> 和 <code>right</code> 方法，并验证二者是否返回 <code>None</code> 。</p></li><li><p><code>depth</code> 和 <code>height</code> 方法：见 [1.5.2 递归计算深度和高度](####1.5.2 递归计算深度和高度) 。</p></li><li><p>各种更新方法 <code>add_root</code>、<code>add_left</code>、<code>add_right</code>、<code>replace</code>、<code>delete</code> 和 <code>attach</code> ：都运行 <code>O(1)</code> 的时间，因为它们每次操作都仅仅重新链接到固定的节点数。</p></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743059677999.png" alt="链式结构的二叉树时间复杂度"></p><h3 id="3-2-基于数组：数组实现二叉树">3.2 基于数组：数组实现二叉树</h3><p>二叉树 T 的一种可供选择的表示法是对 T 的位置进行编号。对于 T 的每个位置 p ，设 f(p) 为整数且定义如下：</p><ul><li>若 p 是 T 的根节点，则 <code>f(p) = 0</code></li><li>若 p 是位置 q 的左孩子，则 <code>f(p) = 2 * f(q) + 1</code></li><li>若 p 是位置 q 的右孩子，则 <code>f(p) = 2 * f(q) + 2</code></li><li>而 p 的父节点的编号为 <code>(f(p) - 1) / 2</code></li></ul><p>编号函数 <code>f</code> 被称二叉树 T 的位置的<strong>层编号</strong>，因为它将 T 每一层的位置从左往右按递增顺序编号。</p><h4 id="3-2-1-思路">3.2.1 思路</h4><p>层编号函数 <code>f</code> 是一种二叉树 T 依据基于数组结构 A（例如，Python 列表）的表示方法，<strong>T 的 p 位置元素存储在数组下标为 <code>f(p)</code> 的内存中</strong>。</p><p>注意，层编号是基于树内的潜在位置，而不是所给树的实际位置，因此编号不一定是连续的。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743060184180.png" alt="数组存储树的示例" style="zoom:67%;" /><h4 id="3-2-2-算法分析-缺点">3.2.2 算法分析/缺点</h4><ul><li>空间使用极大依赖于树的形状，在二叉树为完全二叉树时效率最高；最坏情况下数组长度 N 与节点数 n 有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N = 2^n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 的关系</li><li>删除、插入等更新操作花费时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul><h3 id="3-3-一般树的链式结构">3.3 一般树的链式结构</h3><p>对于一般的树结构，<code>parent</code> 父节点唯一，没有变化；<code>element</code> 元素存储也大致相同；唯一不同的是子节点可以是多个，可以通过<strong>存储一个指向指针数组的指针</strong>来实现指向多个子节点。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743060645944.png" alt="一般树的链式结构"></p><p><strong>算法分析</strong></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1743060700401.png" alt="一般树链式结构的时间复杂度"></p>]]></content>
    
    
    <summary type="html">本章介绍了重要的数据结构：树。并详细讲解了二叉树。包括：树的定义、树的图论性质。并通过 Python 实现了树（基于链表 vs 基于数组），同时分析了时间复杂度。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (6) 统计图表</title>
    <link href="https://blog.iskage.online/posts/86c8422a.html"/>
    <id>https://blog.iskage.online/posts/86c8422a.html</id>
    <published>2025-03-26T01:44:00.000Z</published>
    <updated>2025-03-27T07:39:36.978Z</updated>
    
    <content type="html"><![CDATA[<h1>统计软件 R 语言笔记 (6)：统计图表</h1><p>本章介绍了常见的统计图表和其 R 语言实现方法：频数频率图表、条形/柱状图、列联表、饼图；直方图、箱线图、散点图。同时介绍了 R 语言绘图的范式：高级&amp;低级绘图函数、常见参数设置、子图、保存图片的方法。</p><h2 id="1-定性变量的统计图表">1 定性变量的统计图表</h2><h3 id="1-1-频率-频数表（Frequency-Table）">1.1 频率/频数表（Frequency Table）</h3><p><strong>定义</strong>：统计各分类出现的次数或比例。</p><p><strong>R实现</strong></p><ul><li>简单频数表：<code>table()</code> 函数</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 示例：性别频数表</span></span><br><span class="line"><span class="operator">&gt;</span> gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> freq_table <span class="operator">&lt;-</span> table<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>freq_table<span class="punctuation">)</span></span><br><span class="line">gender</span><br><span class="line">男 女 </span><br><span class="line"> <span class="number">3</span>  <span class="number">2</span> </span><br></pre></td></tr></table></figure><ul><li><strong>频率表（百分比）</strong>：<code>prop.table()</code> 函数</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> prop_table <span class="operator">&lt;-</span> prop.table<span class="punctuation">(</span>freq_table<span class="punctuation">)</span> <span class="operator">*</span> <span class="number">100</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>prop_table<span class="punctuation">)</span></span><br><span class="line">gender</span><br><span class="line">男 女 </span><br><span class="line"><span class="number">60</span> <span class="number">40</span> </span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：若数据为数值型但需按分类统计，需先转换为因子：<code>factor(data)</code>。</p><h3 id="1-2-条形图-柱状图（Bar-Chart）">1.2 条形图/柱状图（Bar Chart）</h3><p><strong>用途</strong>：展示分类变量的频数分布，支持横向/纵向排列。</p><p><strong>R实现</strong></p><ul><li>基础绘图：<code>barplot()</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">barplot<span class="punctuation">(</span>freq_table<span class="punctuation">,</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;gender bar plot&quot;</span><span class="punctuation">,</span>  <span class="comment"># 标题</span></span><br><span class="line">    xlab <span class="operator">=</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">,</span><span class="comment"># x 轴</span></span><br><span class="line">    ylab <span class="operator">=</span> <span class="string">&quot;freq&quot;</span><span class="punctuation">,</span><span class="comment"># y 轴</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="comment"># 颜色</span></span><br><span class="line">    horiz <span class="operator">=</span> <span class="literal">TRUE</span><span class="comment"># 是否横向</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>堆叠条形图：<code>barplot(height)</code> 当 <code>height</code> 为矩阵时</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">data <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">20</span><span class="punctuation">,</span> <span class="number">30</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">35</span><span class="punctuation">,</span> <span class="number">15</span><span class="punctuation">,</span> <span class="number">40</span><span class="punctuation">)</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line">rownames<span class="punctuation">(</span>data<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">)</span></span><br><span class="line">colnames<span class="punctuation">(</span>data<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制堆叠条形图</span></span><br><span class="line">barplot<span class="punctuation">(</span>data<span class="punctuation">,</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Gender Distribution by Category&quot;</span><span class="punctuation">,</span></span><br><span class="line">    beside <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span>  <span class="comment"># 默认 FALSE ，为 TRUE 则不是堆叠而是并列</span></span><br><span class="line">    xlab <span class="operator">=</span> <span class="string">&quot;Category&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ylab <span class="operator">=</span> <span class="string">&quot;Frequency&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    legend.text <span class="operator">=</span> rownames<span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">,</span> <span class="comment"># 添加图例</span></span><br><span class="line">    args.legend <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span>x <span class="operator">=</span> <span class="string">&quot;topright&quot;</span><span class="punctuation">)</span> <span class="comment"># 图例位置</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/stacked_and_grouped_barplot.png" alt="并列和堆叠"></p><ul><li><code>ggplot2</code> 库</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span></span><br><span class="line">ggplot<span class="punctuation">(</span>data.frame<span class="punctuation">(</span>gender<span class="punctuation">)</span><span class="punctuation">,</span> aes<span class="punctuation">(</span>x <span class="operator">=</span> gender<span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    geom_bar<span class="punctuation">(</span>fill <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    labs<span class="punctuation">(</span>title <span class="operator">=</span> <span class="string">&quot;gender bar plot&quot;</span><span class="punctuation">,</span> x <span class="operator">=</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">,</span> y <span class="operator">=</span> <span class="string">&quot;freq&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-列联表（Contingency-Table）">1.3 列联表（Contingency Table）</h3><p><strong>定义</strong>：分析两个或多个分类变量的交叉分布。</p><p><strong>R实现</strong></p><ul><li>基础方法：<code>table(var1, var2)</code> 或 <code>xtabs(~var1 + var2, data)</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 示例：性别与血型列联表</span></span><br><span class="line"><span class="operator">&gt;</span> blood_type <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;O&quot;</span><span class="punctuation">,</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> cross_table <span class="operator">&lt;-</span> table<span class="punctuation">(</span>gender<span class="punctuation">,</span> blood_type<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>cross_table<span class="punctuation">)</span></span><br><span class="line">      blood_type</span><br><span class="line">gender A B O</span><br><span class="line">    男 <span class="number">2</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">    女 <span class="number">0</span> <span class="number">2</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>添加边际和：<code>addmargins()</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> addmargins<span class="punctuation">(</span>cross_table<span class="punctuation">)</span></span><br><span class="line">      blood_type</span><br><span class="line">gender A B O Sum</span><br><span class="line">   男  <span class="number">2</span> <span class="number">0</span> <span class="number">1</span>   <span class="number">3</span></span><br><span class="line">   女  <span class="number">0</span> <span class="number">2</span> <span class="number">0</span>   <span class="number">2</span></span><br><span class="line">   Sum <span class="number">2</span> <span class="number">2</span> <span class="number">1</span>   <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>比例表：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> prop.table<span class="punctuation">(</span>cross_table<span class="punctuation">,</span> margin <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span>  <span class="comment"># 按行计算比例</span></span><br><span class="line">      blood_type</span><br><span class="line">gender         A         B         O</span><br><span class="line">    男 <span class="number">0.6666667</span> <span class="number">0.0000000</span> <span class="number">0.3333333</span></span><br><span class="line">    女 <span class="number">0.0000000</span> <span class="number">1.0000000</span> <span class="number">0.0000000</span></span><br></pre></td></tr></table></figure><h3 id="1-4-饼图（Pie-Chart）">1.4 饼图（Pie Chart）</h3><p><strong>用途</strong>：展示各类别占比（适用于少量分类）。</p><p><strong>R实现</strong></p><ul><li>基础绘图：<code>pie()</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">)</span></span><br><span class="line">freq_table <span class="operator">&lt;-</span> table<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line">pie<span class="punctuation">(</span>freq_table<span class="punctuation">,</span></span><br><span class="line">    labels <span class="operator">=</span> <span class="built_in">names</span><span class="punctuation">(</span>freq_table<span class="punctuation">)</span><span class="punctuation">,</span> <span class="comment"># 每一块扇形标签 字符型向量</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Pie of gender&quot;</span><span class="punctuation">,</span> <span class="comment"># 表头</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span> <span class="comment"># 颜色</span></span><br><span class="line"><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以展示占比</span></span><br><span class="line">prop_table <span class="operator">&lt;-</span> prop.table<span class="punctuation">(</span>freq_table<span class="punctuation">)</span> <span class="operator">*</span> <span class="number">100</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Female&quot;</span><span class="punctuation">)</span></span><br><span class="line">freq_table <span class="operator">&lt;-</span> table<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line">pie<span class="punctuation">(</span>freq_table<span class="punctuation">,</span></span><br><span class="line">    labels <span class="operator">=</span> paste<span class="punctuation">(</span>prop_table<span class="punctuation">,</span> <span class="string">&quot;%&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="comment"># 每一块扇形标签 字符型向量</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Pie of gender&quot;</span><span class="punctuation">,</span> <span class="comment"># 表头</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span> <span class="comment"># 颜色</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/pie.png" alt=""></p><ul><li><code>ggplot2</code> 库</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ggplot<span class="punctuation">(</span>data.frame<span class="punctuation">(</span>gender<span class="punctuation">)</span><span class="punctuation">,</span> aes<span class="punctuation">(</span>x <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> fill <span class="operator">=</span> gender<span class="punctuation">)</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    geom_bar<span class="punctuation">(</span>width <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    coord_polar<span class="punctuation">(</span>theta <span class="operator">=</span> <span class="string">&quot;y&quot;</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    labs<span class="punctuation">(</span>title <span class="operator">=</span> <span class="string">&quot;Pie of gender&quot;</span><span class="punctuation">)</span> <span class="operator">+</span></span><br><span class="line">    theme_void<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="2-定量变量的统计图表">2 定量变量的统计图表</h2><h3 id="2-1-直方图（Histogram）">2.1 直方图（Histogram）</h3><p><strong>用途</strong>：展示连续变量的分布与频数，通过分箱（bin）统计。直方图中，矩形的高度表示每一组的频数或频率，宽度则表示各组的组距，因此其高度与宽度均有意义。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hist<span class="punctuation">(</span>x<span class="punctuation">,</span> breaks <span class="operator">=</span> <span class="string">&quot;Sturges&quot;</span><span class="punctuation">,</span></span><br><span class="line">     freq <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> probability <span class="operator">=</span> <span class="operator">!</span>freq<span class="punctuation">,</span></span><br><span class="line">     include.lowest <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> right <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> fuzz <span class="operator">=</span> <span class="number">1e-7</span><span class="punctuation">,</span></span><br><span class="line">     density <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> angle <span class="operator">=</span> <span class="number">45</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;lightgray&quot;</span><span class="punctuation">,</span> border <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span></span><br><span class="line">     main <span class="operator">=</span> paste<span class="punctuation">(</span><span class="string">&quot;Histogram of&quot;</span> <span class="punctuation">,</span> xname<span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">     xlim <span class="operator">=</span> <span class="built_in">range</span><span class="punctuation">(</span>breaks<span class="punctuation">)</span><span class="punctuation">,</span> ylim <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span></span><br><span class="line">     xlab <span class="operator">=</span> xname<span class="punctuation">,</span> ylab<span class="punctuation">,</span></span><br><span class="line">     axes <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> plot <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> labels <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">     nclass <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> warn.unused <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left"><strong>参数</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:left"><code>x</code></td><td style="text-align:left">输入数据，通常为数值型向量。</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left"><code>breaks</code></td><td style="text-align:left">定义直方图的区间划分方式。可以是区间数（如 10）、区间向量（如 <code>c(0, 10, 20)</code>）或字符串（如 “Sturges”）。</td><td style="text-align:left"><code>&quot;Sturges&quot;</code></td></tr><tr><td style="text-align:left"><code>freq</code></td><td style="text-align:left">是否显示频数（TRUE）或概率密度（FALSE）。</td><td style="text-align:left"><code>NULL</code></td></tr><tr><td style="text-align:left"><code>probability</code></td><td style="text-align:left">是否绘制概率密度图（TRUE）或频数直方图（FALSE）。</td><td style="text-align:left"><code>!freq</code></td></tr><tr><td style="text-align:left"><code>include.lowest</code></td><td style="text-align:left">是否包含区间的最小值。</td><td style="text-align:left"><code>TRUE</code></td></tr><tr><td style="text-align:left"><code>right</code></td><td style="text-align:left">区间是否右闭合（TRUE）或左闭合（FALSE）。</td><td style="text-align:left"><code>TRUE</code></td></tr><tr><td style="text-align:left"><code>col</code></td><td style="text-align:left">填充颜色。</td><td style="text-align:left"><code>&quot;lightgray&quot;</code></td></tr><tr><td style="text-align:left"><code>main</code></td><td style="text-align:left">图形标题。</td><td style="text-align:left"><code>paste(&quot;Histogram of&quot;, xname)</code></td></tr><tr><td style="text-align:left"><code>xlim</code></td><td style="text-align:left">x轴范围。</td><td style="text-align:left"><code>range(breaks)</code></td></tr><tr><td style="text-align:left"><code>ylim</code></td><td style="text-align:left">y轴范围。</td><td style="text-align:left"><code>NULL</code></td></tr><tr><td style="text-align:left"><code>xlab</code></td><td style="text-align:left">x轴标签。</td><td style="text-align:left"><code>xname</code></td></tr><tr><td style="text-align:left"><code>ylab</code></td><td style="text-align:left">y轴标签。</td><td style="text-align:left">自动生成</td></tr><tr><td style="text-align:left"><code>axes</code></td><td style="text-align:left">是否绘制坐标轴。</td><td style="text-align:left"><code>TRUE</code></td></tr><tr><td style="text-align:left"><code>plot</code></td><td style="text-align:left">是否绘制图形（TRUE）或仅返回计算结果（FALSE）。</td><td style="text-align:left"><code>TRUE</code></td></tr><tr><td style="text-align:left"><code>labels</code></td><td style="text-align:left">是否在条形上方显示标签。</td><td style="text-align:left"><code>FALSE</code></td></tr><tr><td style="text-align:left"><code>nclass</code></td><td style="text-align:left">区间数的替代参数。</td><td style="text-align:left"><code>NULL</code></td></tr></tbody></table><p><strong>示例</strong></p><ul><li>基础绘图：<code>hist()</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">1000</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">50</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">hist<span class="punctuation">(</span>data<span class="punctuation">,</span></span><br><span class="line">    breaks <span class="operator">=</span> <span class="number">20</span><span class="punctuation">,</span> <span class="comment"># 分箱数</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Histogram&quot;</span><span class="punctuation">,</span></span><br><span class="line">    xlab <span class="operator">=</span> <span class="string">&quot;values&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="string">&quot;skyblue&quot;</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加趋势线</span></span><br><span class="line">xfit <span class="operator">&lt;-</span> seq<span class="punctuation">(</span><span class="built_in">min</span><span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">max</span><span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">length</span> <span class="operator">=</span> <span class="number">40</span><span class="punctuation">)</span></span><br><span class="line">yfit <span class="operator">&lt;-</span> dnorm<span class="punctuation">(</span>xfit<span class="punctuation">,</span> mean <span class="operator">=</span> mean<span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">,</span> sd <span class="operator">=</span> sd<span class="punctuation">(</span>data<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">lines<span class="punctuation">(</span>xfit<span class="punctuation">,</span> yfit<span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span> lwd <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/hist.png" alt="hist" style="zoom:67%;" /><h3 id="2-2-箱线图（Boxplot）">2.2 箱线图（Boxplot）</h3><p><strong>用途</strong>： 展示数据的中位数、四分位数、离群点，支持分组比较。</p><p><strong>格式</strong></p><table><thead><tr><th style="text-align:center"><strong>参数</strong></th><th style="text-align:center"><strong>说明</strong></th><th style="text-align:center"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">输入数据，可以是向量、列表或公式（如 <code>y ~ group</code>）。</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center"><code>...</code></td><td style="text-align:center">其他图形参数（如 <code>main</code>, <code>xlab</code>, <code>ylab</code> 等）。</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center"><code>range</code></td><td style="text-align:center">定义异常值的范围（默认为 1.5 倍的四分位距）。</td><td style="text-align:center"><code>1.5</code></td></tr><tr><td style="text-align:center"><code>width</code></td><td style="text-align:center">箱线图的宽度。</td><td style="text-align:center"><code>NULL</code></td></tr><tr><td style="text-align:center"><code>varwidth</code></td><td style="text-align:center">是否根据样本量调整箱线图宽度。</td><td style="text-align:center"><code>FALSE</code></td></tr><tr><td style="text-align:center"><code>notch</code></td><td style="text-align:center">是否绘制缺口以比较中位数的显著性。</td><td style="text-align:center"><code>FALSE</code></td></tr><tr><td style="text-align:center"><code>outline</code></td><td style="text-align:center">是否显示异常值。</td><td style="text-align:center"><code>TRUE</code></td></tr><tr><td style="text-align:center"><code>names</code></td><td style="text-align:center">箱线图的组别标签。</td><td style="text-align:center">自动生成</td></tr><tr><td style="text-align:center"><code>col</code></td><td style="text-align:center">箱线图的填充颜色。</td><td style="text-align:center"><code>&quot;lightgray&quot;</code></td></tr><tr><td style="text-align:center"><code>log</code></td><td style="text-align:center">是否对坐标轴取对数。</td><td style="text-align:center"><code>&quot;&quot;</code></td></tr><tr><td style="text-align:center"><code>pars</code></td><td style="text-align:center">图形参数的列表（如 <code>boxwex</code>, <code>staplewex</code>, <code>outwex</code>）。</td><td style="text-align:center"><code>list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5)</code></td></tr><tr><td style="text-align:center"><code>ann</code></td><td style="text-align:center">是否绘制坐标轴标签和标题。</td><td style="text-align:center"><code>!add</code></td></tr><tr><td style="text-align:center"><code>horizontal</code></td><td style="text-align:center">是否绘制水平箱线图。</td><td style="text-align:center"><code>FALSE</code></td></tr><tr><td style="text-align:center"><code>add</code></td><td style="text-align:center">是否将箱线图添加到现有图形中。</td><td style="text-align:center"><code>FALSE</code></td></tr><tr><td style="text-align:center"><code>at</code></td><td style="text-align:center">箱线图的位置（用于并排箱线图）。</td><td style="text-align:center"><code>NULL</code></td></tr></tbody></table><p><strong>示例</strong></p><ul><li>单组箱线图</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">)</span></span><br><span class="line">boxplot<span class="punctuation">(</span>data<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Boxplot of Normal Data&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;skyblue&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>并排箱线图</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 并排箱线图</span></span><br><span class="line">group1 <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">)</span></span><br><span class="line">group2 <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">boxplot<span class="punctuation">(</span></span><br><span class="line">    group1<span class="punctuation">,</span></span><br><span class="line">    group2<span class="punctuation">,</span></span><br><span class="line">    <span class="built_in">names</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Group 1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Group 2&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Side-by-Side Boxplot&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>带缺口的箱线图（只是为了突出中位数）</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">group1 <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">)</span></span><br><span class="line">group2 <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">100</span><span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">boxplot<span class="punctuation">(</span></span><br><span class="line">    group1<span class="punctuation">,</span></span><br><span class="line">    group2<span class="punctuation">,</span></span><br><span class="line">    notch <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">    <span class="built_in">names</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Group 1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Group 2&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;Notched Boxplot&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/boxplots.png" alt="boxplots"></p><ul><li><code>~</code> 分组绘制</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用内置数据集 mtcars</span></span><br><span class="line">boxplot<span class="punctuation">(</span>mpg <span class="operator">~</span> cyl<span class="punctuation">,</span> <span class="comment"># mpg 按照 cyl 分组画出 boxplot</span></span><br><span class="line">    data <span class="operator">=</span> mtcars<span class="punctuation">,</span> <span class="comment"># mpg, cyl 都是数据框 mtcars 的列</span></span><br><span class="line">    main <span class="operator">=</span> <span class="string">&quot;MPG by Cylinder&quot;</span><span class="punctuation">,</span></span><br><span class="line">    xlab <span class="operator">=</span> <span class="string">&quot;Number of Cylinders&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ylab <span class="operator">=</span> <span class="string">&quot;Miles per Gallon&quot;</span><span class="punctuation">,</span></span><br><span class="line">    col <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;skyblue&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pink&quot;</span><span class="punctuation">,</span> <span class="string">&quot;lightgreen&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/grouped_boxplots.png" alt="分组绘制：mpg 按照 cyl 分组画出 boxplot，而 cyl 有三组"></p><h3 id="2-3-散点图（Scatter-Plot）两个定量变量">2.3 散点图（Scatter Plot）两个定量变量</h3><p><strong>用途</strong>：分析两个定量变量的相关性或分布模式。</p><p><strong>基础使用</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot<span class="punctuation">(</span>women<span class="operator">$</span>height<span class="punctuation">,</span> women<span class="operator">$</span>weight<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>下面，借由这个例子，介绍 R 语言绘图的范式。</p><h2 id="3-R-语言绘图">3 R 语言绘图</h2><h3 id="3-1-高级-低级绘图函数">3.1 高级 &amp; 低级绘图函数</h3><p>在R中有两种绘图函数：</p><ul><li><strong>高级绘图函数</strong>：创建一个新的图形，如 <code>hist</code> <code>plot</code> 。</li><li><strong>低级绘图函数</strong>：在现有的图形上添加元素，对原有图进行补充，如 <code>lines</code> 。</li></ul><h4 id="3-1-1-高级绘图函数">3.1.1 高级绘图函数</h4><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td><code>plot(x)</code></td><td>以 x 的元素值为纵坐标、以序号为横坐标绘图</td></tr><tr><td><code>plot(x,y)</code></td><td>x 与 y 的二元作图</td></tr><tr><td><code>pie(x)</code></td><td>饼图</td></tr><tr><td><code>boxplot(x)</code></td><td>盒形图（也称箱线图）</td></tr><tr><td><code>hist(x)</code></td><td>x 的频率直方图</td></tr><tr><td><code>barplot(x)</code></td><td>x 的值的条形图</td></tr><tr><td><code>qqnorm(x)</code></td><td>正态分位数-分位数图</td></tr></tbody></table><h4 id="3-1-2-低级绘图函数">3.1.2 低级绘图函数</h4><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td><code>points(x, y)</code></td><td>添加点</td></tr><tr><td><code>lines(X, Y)</code></td><td>添加线</td></tr><tr><td><code>text(x, y, labels, ...)</code></td><td>加标记，在 (x, y) 处添加用 labels 指定的文字</td></tr><tr><td><code>abline(a, b)</code></td><td>加直线，绘制斜率为 b 和截距为 a 的直线</td></tr><tr><td><code>abline(h = y)</code></td><td>加直线，在纵坐标 y 处画水平线</td></tr><tr><td><code>abline(v = x)</code></td><td>加直线，在横坐标 x 处画垂直线</td></tr><tr><td><code>abline(lm.obj)</code></td><td>加直线，画出 lm.obj 确定的回归线</td></tr><tr><td><code>legend(x, y, legend)</code></td><td>加注释，在点 (x, y) 处，说明内容由 legend 给定</td></tr><tr><td><code>title()</code></td><td>加标题，也可添加一个副标题</td></tr><tr><td><code>axis(side, vect)</code></td><td>加坐标轴</td></tr></tbody></table><h3 id="3-2-参数">3.2 参数</h3><h4 id="3-2-1-共同参数选项">3.2.1 共同参数选项</h4><table><thead><tr><th><strong>选项</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><code>axes=TRUE</code></td><td>如果是 FALSE，不绘制轴与边框</td></tr><tr><td><code>type=&quot;p&quot;</code></td><td>指定图形的类型</td></tr><tr><td><code>xlim=, ylim=</code></td><td>指定轴的显示范围</td></tr><tr><td><code>xlab=, ylab=</code></td><td>坐标轴的标签</td></tr><tr><td><code>main=</code></td><td>主标题</td></tr><tr><td><code>sub=</code></td><td>副标题</td></tr></tbody></table><blockquote><p><code>&quot;p&quot;</code>：点</p><p><code>&quot;l&quot;</code>：线</p><p><code>&quot;b&quot;</code>：点连线</p><p><code>&quot;o&quot;</code>：同上，但是线在点上</p><p><code>&quot;h&quot;</code>：垂直线</p><p><code>&quot;s&quot;</code>：阶梯式，垂直线顶端显示数据</p><p><code>&quot;S&quot;</code>：同上，但是垂直线底端显示数据</p></blockquote><p>示例：一些常见参数的用法</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742892621595.png" alt="共同参数的指代"></p><p>示例：不同的点类型 <code>type</code></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742892676179.png" alt="不同点类型，参数 type"></p><h4 id="3-2-2-其他常用绘图参数">3.2.2 其他常用绘图参数</h4><table><thead><tr><th><strong>选项</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><code>adj</code></td><td>控制关于文字对齐方式（0-左对齐，0.5-居中对齐，1-右对齐）</td></tr><tr><td><code>cex</code></td><td>符号和文字大小：<code>cex.axis</code>, <code>cex.main</code>, <code>cex.axis</code>, <code>cex.main</code></td></tr><tr><td><code>col</code></td><td>颜色： <code>col.axis</code>, <code>col.lab</code>, <code>col.main</code>, <code>col.axis</code>, <code>col.lab</code>, <code>col.main</code></td></tr><tr><td><code>font</code></td><td>文字字体（1-正常，2-粗体，3-斜体，4-粗斜体）：<code>font.axis</code>, <code>font.lab</code>, <code>font.main</code>, <code>font.axis</code>, <code>font.lab</code>, <code>font.main</code></td></tr><tr><td><code>lwd</code></td><td>线的宽度</td></tr><tr><td><code>lty</code></td><td>连线的线型（1-实线，2-虚线，3-点线，4-点虚线，5-长虚线，6-双虚线）</td></tr><tr><td><code>pch</code></td><td>绘图符号的类型（1到25的整数）</td></tr><tr><td><code>pty</code></td><td>绘图区域类型</td></tr><tr><td><code>xaxt</code> <code>yaxt</code></td><td>如果 <code>xaxt=&quot;n&quot;</code>，设置 x 轴不显示；如果 <code>yaxt=&quot;n&quot;</code>，设置 y 轴不显示</td></tr><tr><td><code>srt</code></td><td>文字旋转角度</td></tr></tbody></table><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742893115596.png" alt="pch 不同数字对应的图案" style="zoom:100%;" /><p>特别地，<code>pch</code> 可以传入一个字符串向量，当作图案：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pch_type <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;?&quot;</span><span class="punctuation">,</span> <span class="string">&quot;1&quot;</span><span class="punctuation">)</span></span><br><span class="line">X <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">5</span></span><br><span class="line">Y <span class="operator">&lt;-</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="number">6</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> col <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> pch <span class="operator">=</span> pch_type<span class="punctuation">,</span> cex <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;pch:*aA?1&quot;</span><span class="punctuation">,</span> font.lab <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>pch = pch_type</code> ：图案可以自定义 <code>pch_type</code></p></blockquote><h3 id="3-3-画图面板分割：子图">3.3 画图面板分割：子图</h3><p><code>mfrow</code> 参数：</p><ul><li><p>按<strong>行顺序</strong>填充子面板。</p></li><li><p>语法：<code>par(mfrow = c(nrow, ncol))</code>，其中 <code>nrow</code> 是行数，<code>ncol</code> 是列数。</p></li><li><p>示例：<code>par(mfrow = c(2, 2))</code> 将绘图窗口分割为 2 行 2 列，共 4 个子面板。</p></li></ul><p><code>mfcol</code> 参数：</p><ul><li>按<strong>列顺序</strong>填充子面板。</li><li>语法：<code>par(mfcol = c(nrow, ncol))</code>。</li></ul><p>示例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置绘图面板为 2 行 2 列</span></span><br><span class="line">op <span class="operator">&lt;-</span> par<span class="punctuation">(</span>mfrow <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据</span></span><br><span class="line">X <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">10</span></span><br><span class="line">Y <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制默认点图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制蓝色点图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Blue Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制红色点图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Red Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;red&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制绿色点图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Green Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;green&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">par<span class="punctuation">(</span>op<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p>用 <code>op</code> 对象存储 <code>par()</code> 函数的子图设置，再次使用 <code>par(op)</code> 即可重置默认设置。否则，之后的绘图会一直按照 最开始 <code>par()</code> 的设置放置。</p></blockquote><h3 id="3-4-保存图片">3.4 保存图片</h3><h4 id="3-4-1-png-保存为-PNG-图片">3.4.1 png() 保存为 PNG 图片</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 PNG 设备，设置文件名和尺寸</span></span><br><span class="line">png<span class="punctuation">(</span><span class="string">&quot;my_plot.png&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">800</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">600</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;My Plot&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭设备，保存图片</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>&quot;my_plot.png&quot;</code>：保存的文件名。</li><li><code>width</code> 和 <code>height</code>：图片的宽度和高度（单位：像素）。</li><li><code>dev.off()</code>：关闭图形设备，保存图片。</li></ul><h4 id="3-4-2-pdf-保存为-PDF-文件">3.4.2 pdf() 保存为 PDF 文件</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 PDF 设备，设置文件名和尺寸</span></span><br><span class="line">pdf<span class="punctuation">(</span><span class="string">&quot;my_plot.pdf&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">6</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;My Plot&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭设备，保存文件</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>&quot;my_plot.pdf&quot;</code>：保存的文件名。</li><li><code>width</code> 和 <code>height</code>：图片的宽度和高度（单位：英寸）。</li></ul><hr><h4 id="3-4-3-jpeg-保存为-JPEG-图片">3.4.3 jpeg() 保存为 JPEG 图片</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 JPEG 设备，设置文件名和尺寸</span></span><br><span class="line">jpeg<span class="punctuation">(</span><span class="string">&quot;my_plot.jpg&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">800</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">600</span><span class="punctuation">,</span> quality <span class="operator">=</span> <span class="number">100</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;My Plot&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭设备，保存图片</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>quality</code>：图片质量（0-100），值越大质量越高。</li></ul><h4 id="3-4-4-dev-copy-保存当前图片">3.4.4 dev.copy() 保存当前图片</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;My Plot&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前图形并保存为 PNG</span></span><br><span class="line">dev.copy<span class="punctuation">(</span>png<span class="punctuation">,</span> <span class="string">&quot;my_plot.png&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">800</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">600</span><span class="punctuation">)</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>适用场景</strong>：在已经绘制图形的情况下，直接保存当前图形。</p><h4 id="3-4-5-保存多子图面板">3.4.5 保存多子图面板</h4><p>如果使用 <code>par(mfrow = c(nrow, ncol))</code> 绘制了多子图面板，可以直接保存整个面板：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 PNG 设备</span></span><br><span class="line">png<span class="punctuation">(</span><span class="string">&quot;multi_panel_plot.png&quot;</span><span class="punctuation">,</span> width <span class="operator">=</span> <span class="number">1200</span><span class="punctuation">,</span> height <span class="operator">=</span> <span class="number">800</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置面板布局</span></span><br><span class="line">par<span class="punctuation">(</span>mfrow <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制多个子图</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Blue Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Red Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;red&quot;</span><span class="punctuation">)</span></span><br><span class="line">plot<span class="punctuation">(</span>X<span class="punctuation">,</span> Y<span class="punctuation">,</span> main <span class="operator">=</span> <span class="string">&quot;Green Point&quot;</span><span class="punctuation">,</span> col <span class="operator">=</span> <span class="string">&quot;green&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭设备，保存图片</span></span><br><span class="line">dev.off<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍了常见的统计图表和其 R 语言实现方法：频数频率图表、条形/柱状图、列联表、饼图；直方图、箱线图、散点图。同时介绍了 R 语言绘图的范式：高级&amp;低级绘图函数、常见参数设置、子图、保存图片的方法。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (5) 统计数据类型和日期时间数据</title>
    <link href="https://blog.iskage.online/posts/ccdaeb5f.html"/>
    <id>https://blog.iskage.online/posts/ccdaeb5f.html</id>
    <published>2025-03-25T04:44:00.000Z</published>
    <updated>2025-03-25T04:46:26.079Z</updated>
    
    <content type="html"><![CDATA[<h1>统计数据类型和日期时间数据</h1><p>本章介绍统计数据的计量尺度（定类、定序、定距、定比），重点介绍了一种特殊的数据类型：时间和日期。并讲解了一些常用时间日期函数：<code>strptime</code> <code>as.Date</code> ，除此之外还介绍了时间 Times 类型的两种类型 <code>POSIXct</code> 和 <code>POSIXlt</code> 。</p><h2 id="1-统计数据的计量尺度">1 统计数据的计量尺度</h2><p>统计数据的四种计量尺度：</p><ul><li>定类尺度</li><li>定序尺度</li><li>定距尺度</li><li>定比尺度</li></ul><h3 id="1-1-定类尺度">1.1 定类尺度</h3><p><strong>概念</strong>：又称列名尺度或类别尺度，是按照研究对象的某种属性将其划分为若干组或类的一种测度。</p><p><strong>举例</strong>：性别 、籍贯、民族等</p><p><strong>特征</strong>：</p><ol><li>只能区分事物的类别，无法比较优劣或大小，</li><li>对应变量：名义变量，比如用 X 表示性别</li><li>文字，数值（标签）：不能加减乘除</li></ol><h3 id="1-2-定序尺度">1.2 定序尺度</h3><p><strong>概念</strong>：又称顺序尺度，它是对事物之间等级或顺序差别的一种测度。</p><p><strong>举例</strong>：成绩 (A, B, C) 、绩点、学历、年级等。</p><p><strong>特征</strong>：</p><ol><li>对事物可以分类、可以比较优劣和大小，</li><li>对应变量：次序变量</li><li>文字，数值（标签）：不能加减乘除</li></ol><h3 id="1-3-定距尺度">1.3 定距尺度</h3><p><strong>概念</strong>：又称间隔尺度，是对事物类别或次序之间的间隔进行的一种测度。</p><p><strong>举例</strong>：摄氏温度、年份等。</p><p><strong>特征</strong>：</p><ol><li>能分类、比较大小，计量差距</li><li>没有绝对零点，“0”表示“0”水平，不表示“没有”或“不存在”。</li><li>对应变量：定距变量</li><li>数值，可以加减，不能乘除</li></ol><h3 id="1-4-定比尺度">1.4 定比尺度</h3><p><strong>概念</strong>：也称比率尺度，是对事物之间比值的一种测度。</p><p><strong>举例</strong>：成绩（0-100）、年龄、企业的产值利润等</p><p><strong>特征</strong>：</p><ol><li>分类、排序、比较大小、求出差异、计算两个数值之间的比率。</li><li>具有绝对零点，即数字 0 表示 “没有” 或 “不存在” 。</li><li>对应变量：定比变量</li><li>数值，可以加减乘除</li></ol><h3 id="1-5-四种计量尺度的比较">1.5 四种计量尺度的比较</h3><table><thead><tr><th style="text-align:left">数字特征</th><th style="text-align:center">定类尺度</th><th style="text-align:center">定序尺度</th><th style="text-align:center">定距尺度</th><th style="text-align:center">定比尺度</th></tr></thead><tbody><tr><td style="text-align:left">分类 <code>==</code> <code>!=</code></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:left">排序 <code>&gt;</code> <code>&lt;</code></td><td style="text-align:center"></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:left">间距 <code>+</code> <code>-</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><code>True</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:left">比值 <code>*</code> <code>/</code></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><code>True</code></td></tr></tbody></table><p>四种尺度所包含的信息量是依次递增的，级别由低到高。（ 定类 &lt; 定序 &lt; 定距 &lt; 定比 ）</p><p>根据较高层次的计量尺度可以获得较低层次的计量尺度。</p><p>不同的尺度数据对应着不同数据显示方法和分析方法。</p><h3 id="1-6-统计数据的类型">1.6 统计数据的类型</h3><p><strong>定性数据</strong> ( qualitative data ) ：由 <em>定类</em> 和 <em>定序</em> 尺度计量而成，反映事物的品质特征, 又称为属性数据。</p><p><strong>定量数据</strong> ( quantitative data ) ：由 <em>定距</em> 和 <em>定比</em> 尺度计量而成，反映事物的数量特征。</p><blockquote><p>图 举例：</p><ul><li><p>定性数据：条形图、饼图</p></li><li><p>定量数据：直方图，线图，茎叶图</p></li></ul><p>分析方法 举例</p><ul><li>定性数据：频数，频率表，众数，列联表</li><li>定量数据：均值，方差，相应回归分析</li></ul></blockquote><h2 id="2-特殊的数据类型：时间与日期">2 特殊的数据类型：时间与日期</h2><p>R 语言用了一种特殊的数据类型来表示日期和时间</p><ul><li>日期用Date类来表示</li><li>时间则是由两个不同的类：<code>POS Xct</code> 、 <code>POSIXIt</code></li></ul><p>例如：查看当前日期和时间 <code>date()</code> <code>Sys.Date()</code> <code>Sys.time()</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> date<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Mon Mar 24 21:40:23 2025&quot;</span></span><br><span class="line"><span class="operator">&gt;</span> Sys.Date<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2025-03-24&quot;</span></span><br><span class="line"><span class="operator">&gt;</span> Sys.time<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2025-03-24 21:40:37 CST&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>CST</code> ：英语全称为 Central Standard Time (USA) 、Central Standard Time (Australia)、China Standard Time 或 Cuba Standard Time 等四个地方。</p></blockquote><h3 id="2-1-日期-Date">2.1 日期 Date</h3><ul><li>日期不包括时间，只表示“某年某月某日”。</li><li>内部日期是以 1970年1月1日 至今的天数来存储。</li></ul><h4 id="2-1-1-as-Date-函数基本使用">2.1.1 as.Date() 函数基本使用</h4><ul><li>日期作为 Date 类对象来存储，在 R 里的工作方式是输入一个字符串，比如 <code>'1970-01-01'</code> ，然后用 <code>as.Date()</code> 函数转换成日期。</li><li><code>as.Date()</code> 方法默认传入字符串格式为 <code>'年(4位)-月(2位)-日(2位)'</code>；或者 <code>'年(4位)/月(2位)/日(2位)'</code> 。</li></ul><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> date1 <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2025-03-25&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>date1<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;numeric&quot;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">class</span><span class="punctuation">(</span>date1<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Date&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> date2 <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2025/03/25&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>date2<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;numeric&quot;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">class</span><span class="punctuation">(</span>date2<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Date&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-unclass-Date-计算日期差">2.1.2 unclass(Date) 计算日期差</h4><p>因为 R 语言采用距离 1970年1月1日 的天数来存储日期，所以使用 <code>unclass()</code> 可以检查距离 <code>1970/01/01/</code> 相差的日期数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="built_in">unclass</span><span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;2025/03/25&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">20172</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">unclass</span><span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;1970/01/01&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 距离 0 天</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">unclass</span><span class="punctuation">(</span>as.Date<span class="punctuation">(</span><span class="string">&quot;1969/12/31&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 相差 -1 天</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="operator">-</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-as-Date-日期格式">2.1.3 as.Date() 日期格式</h4><p><strong>默认格式</strong>：<code>as.Date</code> 函数的默认日期格式为 <code>'年(4位)-月(2位)-日(2位)'</code> 例如<code>&quot;2008-10-24&quot;</code></p><p><strong>自定义格式</strong>：</p><p><code>as.Date</code> 函数支持通过 <code>format</code> 参数指定自定义日期格式。</p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>%d</code></td><td>数字表示的日期</td><td>01~31</td></tr><tr><td><code>%a</code></td><td>缩写的星期名</td><td>Mon</td></tr><tr><td><code>%A</code></td><td>非缩写星期名</td><td>Monday</td></tr><tr><td><code>%m</code></td><td>月份（00-12）</td><td>00~12</td></tr><tr><td><code>%b</code></td><td>缩写的月份</td><td>Jan</td></tr><tr><td><code>%B</code></td><td>非缩写月份</td><td>January</td></tr><tr><td><code>%y</code></td><td>两位数的年份</td><td>07</td></tr><tr><td><code>%Y</code></td><td>四位数的年份</td><td>2007</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as.Date<span class="punctuation">(</span><span class="string">&quot;10/24/08&quot;</span><span class="punctuation">,</span> format<span class="operator">=</span><span class="string">&quot;%m/%d/%y&quot;</span><span class="punctuation">)</span></span><br><span class="line">as.Date<span class="punctuation">(</span><span class="string">&quot;October-24-2008&quot;</span><span class="punctuation">,</span> format<span class="operator">=</span><span class="string">&quot;%B-%d-%Y&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="2-1-4-日期计算">2.1.4 日期计算</h4><p>R 语言支持直接计算两个日期之间的差异，结果为 <code>difftime</code> 类型。</p><p><strong>示例</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T1 <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;October-24-2008&quot;</span><span class="punctuation">,</span> format<span class="operator">=</span><span class="string">&quot;%B-%d-%Y&quot;</span><span class="punctuation">)</span></span><br><span class="line">T2 <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;October-28-2008&quot;</span><span class="punctuation">,</span> format<span class="operator">=</span><span class="string">&quot;%B-%d-%Y&quot;</span><span class="punctuation">)</span></span><br><span class="line">time_diff <span class="operator">&lt;-</span> T2 <span class="operator">-</span> T1</span><br><span class="line">print<span class="punctuation">(</span>time_diff<span class="punctuation">)</span>  <span class="comment"># Time difference of 4 days</span></span><br><span class="line"><span class="built_in">class</span><span class="punctuation">(</span>time_diff<span class="punctuation">)</span>  <span class="comment"># &quot;difftime&quot;</span></span><br><span class="line">mode<span class="punctuation">(</span>time_diff<span class="punctuation">)</span>   <span class="comment"># &quot;numeric&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项</strong></p><ul><li>如果日期字符串格式与 <code>format</code> 参数不匹配，<code>as.Date</code> 函数会返回 <code>NA</code>。</li><li>确保日期格式化符号与日期字符串中的分隔符一致。</li></ul></blockquote><h3 id="2-2-时间-Times">2.2 时间 Times</h3><h4 id="2-2-1-strptime-函数">2.2.1 strptime() 函数</h4><p><code>strptime()</code> 函数用于将字符串解析为时间对象。其语法如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strptime<span class="punctuation">(</span>x<span class="punctuation">,</span> format<span class="punctuation">,</span> tz <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>x</code>: 表示时间的字符串。<br>例如：<code>&quot;October-7-2015 10:40:30&quot;</code>，<code>&quot;December 9, 2011 9:10&quot;</code>。</li><li><code>format</code>: 转换格式，需与字符串格式对应。<br>例如：<code>%B-%d-%Y %H:%M:%S</code>，<code>%B %d, %Y %H:%M</code>。</li><li><code>tz</code>: 表示时区，默认为当前时区。<br>例如：<code>CST</code>（北京时区），<code>GMT</code>（格林威治时间），<code>UTC</code>（世界协调时间）。</li></ul><p><strong>格式化符号</strong></p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>%B</code></td><td>英文全拼月份</td><td>October</td></tr><tr><td><code>%d</code></td><td>第几天（01-31）</td><td>07</td></tr><tr><td><code>%Y</code></td><td>带世纪的年份</td><td>2015</td></tr><tr><td><code>%H</code></td><td>小时（00-24）</td><td>10</td></tr><tr><td><code>%M</code></td><td>分钟（00-59）</td><td>40</td></tr><tr><td><code>%S</code></td><td>秒（00-61）</td><td>30</td></tr></tbody></table><p><strong>示例代码</strong></p><p>解析时间字符串</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> datestring <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;10 7, 2015 10:40&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10 9, 2011 9:10&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> strptime<span class="punctuation">(</span>datestring<span class="punctuation">,</span> <span class="string">&quot;%m %d, %Y %H:%M&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2015-10-07 10:40:00 CST&quot;</span> <span class="string">&quot;2011-10-09 09:10:00 CST&quot;</span></span><br></pre></td></tr></table></figure><p>查看对象类型</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="built_in">class</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;POSIXlt&quot;</span> <span class="string">&quot;POSIXt&quot;</span> </span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>格式匹配：确保 <code>format</code> 参数与时间字符串的格式完全一致，否则会返回 <code>NA</code>。</li><li>时区设置：如果未指定 <code>tz</code> 参数，默认使用当前时区。</li><li>大小写敏感：格式化符号（如 <code>%B</code>）区分大小写，需确保正确使用。</li></ol><h4 id="2-2-2-POSIXct-和-POSIXlt">2.2.2 POSIXct 和 POSIXlt</h4><p>R 语言中，时间用两种类型表示：<code>POSIXct</code> 和 <code>POSIXlt</code>。</p><h5 id="1-POSIXct">1. POSIXct</h5><p><strong>定义</strong>：时间用大整数表示，即从 1970 年 1 月 1 日至今的秒数。</p><p><strong>特点</strong>：</p><ul><li>适合存储在数据框中，因为它本质上是一个很大的整数向量。</li><li>适用于时间戳计算和存储。</li></ul><p><strong>示例</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> time_ct <span class="operator">&lt;-</span> as.POSIXct<span class="punctuation">(</span><span class="string">&quot;2023-10-05 14:30:00&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_ct<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 CST&quot;</span></span><br></pre></td></tr></table></figure><h5 id="2-POSIXlt">2. POSIXlt</h5><p><strong>定义</strong>：时间以列表形式存储，包含更多与时间相关的信息。</p><p><strong>特点</strong>：</p><ul><li>包含星期几、一年中的第几天、月份、日期等详细信息。</li><li>适合需要提取具体时间信息的场景。</li></ul><p><strong>示例</strong>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> time_lt <span class="operator">&lt;-</span> as.POSIXlt<span class="punctuation">(</span><span class="string">&quot;2023-10-05 14:30:00&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 CST&quot;</span></span><br></pre></td></tr></table></figure><p>提取具体信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="operator">$</span>wday<span class="punctuation">)</span> <span class="comment"># 星期几（0=周日，1=周一，...）</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="operator">$</span>yday<span class="punctuation">)</span> <span class="comment"># 一年中的第几天（0-365）</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">277</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="operator">$</span>mon<span class="punctuation">)</span> <span class="comment"># 月份（0-11，0=1月，1=2月，...）</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-类型转换">2.2.3 类型转换</h4><p>使用 <code>as.POSIXct()</code> 和 <code>as.POSIXlt()</code> 函数可以在 <code>POSIXct</code> 和 <code>POSIXlt</code> 之间进行转换。</p><p><strong>示例</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 从 POSIXct 转换为 POSIXlt</span></span><br><span class="line"><span class="operator">&gt;</span> time_lt <span class="operator">&lt;-</span> as.POSIXlt<span class="punctuation">(</span>time_ct<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_lt<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 CST&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 从 POSIXlt 转换为 POSIXct</span></span><br><span class="line"><span class="operator">&gt;</span> time_ct <span class="operator">&lt;-</span> as.POSIXct<span class="punctuation">(</span>time_lt<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_ct<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 CST&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>时区问题：默认情况下，R 使用当前时区（如 <code>CST</code>）。可以通过 <code>tz</code> 参数指定时区，例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> as.POSIXct<span class="punctuation">(</span><span class="string">&quot;2023-10-05 14:30:00&quot;</span><span class="punctuation">,</span> tz <span class="operator">=</span> <span class="string">&quot;UTC&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2023-10-05 14:30:00 UTC&quot;</span></span><br></pre></td></tr></table></figure><p>时间格式：确保时间字符串与 <code>as.POSIXct()</code> 或 <code>as.POSIXlt()</code> 的默认格式（<code>%Y-%m-%d %H:%M:%S</code>）一致，否则需要指定 <code>format</code> 参数。</p><h4 id="2-2-4-时间处理注意事项">2.2.4 时间处理注意事项</h4><p><code>as.POSIXlt()</code> 函数用于将时间转换为 <code>POSIXlt</code> 类，该类以列表形式存储时间信息，便于提取具体的时间元素（如秒、分钟、小时等）。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 获取当前时间</span></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> Sys.time<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 输出当前时间</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2025-03-25 12:33:14 CST&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 查看时间类型</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">class</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;POSIXct&quot;</span> <span class="string">&quot;POSIXt&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 转换为 POSIXlt 类</span></span><br><span class="line"><span class="operator">&gt;</span> tempx <span class="operator">&lt;-</span> as.POSIXlt<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>tempx<span class="punctuation">)</span> <span class="comment"># 输出转换后的时间</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2025-03-25 12:33:14 CST&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 解构 POSIXlt 对象</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">unclass</span><span class="punctuation">(</span>tempx<span class="punctuation">)</span> <span class="comment"># 查看内部结构</span></span><br><span class="line"><span class="comment"># 包含许多属性，例如：$sec [1] 14.19524 、 $min [1] 33 等</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 提取秒数 （POSIXlt 类 才可以提取秒数）</span></span><br><span class="line"><span class="operator">&gt;</span> seconds <span class="operator">&lt;-</span> tempx<span class="operator">$</span>sec</span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>seconds<span class="punctuation">)</span> <span class="comment"># 输出秒数（可能包含小数部分）</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">14.19524</span></span><br></pre></td></tr></table></figure><p>计算日期差</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 定义两个日期</span></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2012-03-01&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> as.Date<span class="punctuation">(</span><span class="string">&quot;2012-02-28&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="comment"># 计算日期差</span></span><br><span class="line"><span class="operator">&gt;</span> time_diff <span class="operator">&lt;-</span> x <span class="operator">-</span> y</span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>time_diff<span class="punctuation">)</span> <span class="comment"># 输出: Time difference of 2 days</span></span><br><span class="line">Time difference of <span class="number">2</span> days</span><br></pre></td></tr></table></figure><p>比较日期大小</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="comment"># 比较日期</span></span><br><span class="line"><span class="operator">&gt;</span> is_later <span class="operator">&lt;-</span> x <span class="operator">&gt;</span> y</span><br><span class="line"><span class="operator">&gt;</span> print<span class="punctuation">(</span>is_later<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><blockquote><p>只有同一类型的时间才可以比较计算等。</p></blockquote>]]></content>
    
    
    <summary type="html">本章介绍统计数据的计量尺度（定类、定序、定距、定比），重点介绍了一种特殊的数据类型：时间和日期。并讲解了一些常用时间日期函数：`strptime` `as.Date` ，除此之外还介绍了时间 Times 类型的两种类型 `POSIXct` 和 `POSIXlt` 。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>队列 Queue</title>
    <link href="https://blog.iskage.online/posts/583f8c56.html"/>
    <id>https://blog.iskage.online/posts/583f8c56.html</id>
    <published>2025-03-21T14:16:00.000Z</published>
    <updated>2025-04-06T13:33:27.937Z</updated>
    
    <content type="html"><![CDATA[<h1>队列 Queue</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本章介绍了队列 (Queue) 数据类型，并实现了队列的抽象数据类型 (Queue ADT) 。并基于<strong>数组和链表</strong>分别实现了<strong>队列、循环队列和双端队列</strong>。由于队列的先进先出性 (FIFO) 能够实现很多应用，本章介绍了两个实际问题的应用：1. 使用队列实现杨辉三角；2. 使用<strong>栈+回溯法</strong>实现了迷宫问题的路径寻找、使用<strong>队列+洪水算法</strong>实现了迷宫问题的最短路寻找。</p><h2 id="1-队列的概念">1 队列的概念</h2><p><strong>队列</strong>：限制数据插入在一端进行、删除在另一端进行的特殊序列（FIFO）</p><ul><li>允许插入的一端称为队尾，允许删除的一端称为队头</li><li>在队尾插入元素称为入队（enqueue），在队头删除元素称为出队（dequeue）</li><li>队列中元素个数称为队列的长度</li></ul><h2 id="2-队列的抽象数据类型">2 队列的抽象数据类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ADT Queue &#123;</span><br><span class="line">数据对象：Q = &#123;Q1, Q2, ..., QN&#125;</span><br><span class="line">基本操作：</span><br><span class="line">Q.enqueue(e): 向队列 Q 的队尾添加一个元素</span><br><span class="line">Q.dequeue(): 从队列 Q 中移除并返回第一个元素</span><br><span class="line">Q.first(): 在不移除的前提下，返回队列的第一个元素</span><br><span class="line">        <span class="built_in">len</span>(Q): 返回队列 Q 的长度</span><br><span class="line">        Q.init(Q0): 使用序列 Q0 初始化队列 Q</span><br><span class="line">        Q.is_empty(): 检查队列 Q 是否为空，如为空则返回 <span class="literal">True</span></span><br><span class="line">        Q.clear(): 清空队列 Q</span><br><span class="line">&#125; ADT Queue</span><br></pre></td></tr></table></figure><p>例如：下面给出了一个队列的例子和一些操作的影响</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742524105408.png" alt="队列操作例子"></p><h2 id="3-基于数组的队列实现">3 基于数组的队列实现</h2><p>对于队列，可以使用<strong>数组</strong>的方式来实现队列：</p><ul><li>潜在的问题：<code>append(e)</code> 高效，但 <code>pop()</code> 很低效。</li><li>解决方案：用一个变量存储当前队头元素的索引，用指针指向 <code>None</code> 表示数组中的离队元素。</li><li>缺点：存储队列的列表长度为 <code>O(m)</code> ，其中 m 为自队列创建以来追加元素操作的数量总和，可能远远大于队列长度。即列表可能长度不足，当队列满时，仍然需要进行动态序列扩展，效率会有所较低（摊销成本）。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742524506790.png" alt=""></p><p>例如：上面 <code>f</code> 指代了队列的头部，如果队列头部元素出队，则 <code>f</code> 指针后移，其前面的元素置空 <code>None</code> 从而实现出队操作。</p><h3 id="3-1-循环使用数组">3.1 循环使用数组</h3><p>上面的方法会出现空间的浪费，例如 <code>f</code> 前面的出队后的空位，这部分的空间也可以利用起来。于是，<strong>循环使用数组</strong>的方法被发现。即：当新的元素入队时，如果列表在 <code>f</code> 的后面全满，则可以将新元素放在列表的头部（之前出队后空出的位置），这一个操作可以通过取模实现 <code>f = (f + 1) % N</code> 。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742524853272.png" alt="循环使用数组"></p><h3 id="3-2-代码实现">3.2 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;队列为空的异常类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;FIFO 队列实现&quot;&quot;&quot;</span></span><br><span class="line">    DEFAULT_CAPACITY = <span class="number">10</span>  <span class="comment"># 默认数组长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列，预留空间 DEFAULT_CAPACITY&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = [<span class="literal">None</span>] * ArrayQueue.DEFAULT_CAPACITY  <span class="comment"># 真实列表内存大小</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 队列大小</span></span><br><span class="line">        <span class="variable language_">self</span>._front = <span class="number">0</span>  <span class="comment"># 头指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():  <span class="comment"># 是否为空</span></span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._data[<span class="variable language_">self</span>._front]  <span class="comment"># 返回队列头部元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从头部出队&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">        answer = <span class="variable language_">self</span>._data[<span class="variable language_">self</span>._front]  <span class="comment"># 获取出队元素值</span></span><br><span class="line">        <span class="variable language_">self</span>._data[<span class="variable language_">self</span>._front] = <span class="literal">None</span>  <span class="comment"># 出队位置置空</span></span><br><span class="line">        <span class="variable language_">self</span>._front = (<span class="variable language_">self</span>._front + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># 循环利用数组</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span>  <span class="comment"># 长度减一</span></span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;队尾插入元素 e&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._size == <span class="built_in">len</span>(<span class="variable language_">self</span>._data):</span><br><span class="line">            <span class="comment"># 如果列表已满，则增倍扩展数组</span></span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="built_in">len</span>(<span class="variable language_">self</span>._data))</span><br><span class="line"></span><br><span class="line">        avail = (<span class="variable language_">self</span>._front + <span class="variable language_">self</span>._size) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># 队尾索引</span></span><br><span class="line">        <span class="variable language_">self</span>._data[avail] = e</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize</span>(<span class="params">self, capacity</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;空间为 capacity 新列表&quot;&quot;&quot;</span></span><br><span class="line">        old = <span class="variable language_">self</span>._data  <span class="comment"># 原始列表</span></span><br><span class="line">        <span class="variable language_">self</span>._data = [<span class="literal">None</span>] * capacity  <span class="comment"># 扩展后的空列表</span></span><br><span class="line"></span><br><span class="line">        walk = <span class="variable language_">self</span>._front  <span class="comment"># 队列的头部</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._size):</span><br><span class="line">            <span class="variable language_">self</span>._data[k] = old[walk]  <span class="comment"># 复制 old 到新的队列</span></span><br><span class="line">            walk = (walk + <span class="number">1</span>) % <span class="built_in">len</span>(old)  <span class="comment"># old 是循环使用的</span></span><br><span class="line">        <span class="variable language_">self</span>._front = <span class="number">0</span>  <span class="comment"># 新队列的头部和列表的 0 (列表头部) 是对齐的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_list</span>(<span class="params">cls, l</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从列表快速产生队列&quot;&quot;&quot;</span></span><br><span class="line">        aq = cls()</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> l:</span><br><span class="line">            aq.enqueue(e)</span><br><span class="line">        <span class="keyword">return</span> aq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;以列表形式展示&quot;&quot;&quot;</span></span><br><span class="line">        tmp = []</span><br><span class="line">        walk = <span class="variable language_">self</span>._front</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._size):</span><br><span class="line">            tmp.append(<span class="variable language_">self</span>._data[walk])</span><br><span class="line">            walk = (walk + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(tmp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清空队列，保持当前容量，仅清除有效元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():  <span class="comment"># 如果队列非空</span></span><br><span class="line">            walk = <span class="variable language_">self</span>._front</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._size):  <span class="comment"># 遍历所有有效元素</span></span><br><span class="line">                <span class="variable language_">self</span>._data[walk] = <span class="literal">None</span>  <span class="comment"># 将元素置为 None</span></span><br><span class="line">                walk = (walk + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># 循环数组</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 重置队列大小</span></span><br><span class="line">        <span class="variable language_">self</span>._front = <span class="number">0</span>  <span class="comment"># 重置头指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回一个迭代器，用于遍历队列中的元素&quot;&quot;&quot;</span></span><br><span class="line">        walk = <span class="variable language_">self</span>._front  <span class="comment"># 从队列的头部开始</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._size):  <span class="comment"># 遍历所有有效元素</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">self</span>._data[walk]  <span class="comment"># 返回当前元素</span></span><br><span class="line">            walk = (walk + <span class="number">1</span>) % <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># 移动到下一个位置（循环数组）</span></span><br></pre></td></tr></table></figure><h3 id="3-3-算法分析">3.3 算法分析</h3><p>基于数组的队列实现，在不考虑数组的前提下， 都是常数级的复杂度。考虑数组的动态扩展，则在摊销成本下常数级的复杂度。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742528402140.png" alt="基于数组实现队列的算法复杂度分析"></p><h2 id="4-基于单向链表的队列实现">4 基于单向链表的队列实现</h2><p>这一部分可见链表章节的介绍 <a href="https://blog.iskage.online/posts/9241942.html#1-7-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">Blog Link</a> 或 <a href="https://zhuanlan.zhihu.com/p/29508680467">知乎链接</a> 。代码实现见下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现队列，先进先出&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回队列长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列第一个节点和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element  <span class="comment"># 获取第一个元素值</span></span><br><span class="line">        <span class="comment"># 头指针指向下一个节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果节点清空，则设置尾指针为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._head = newest  <span class="comment"># 如果为空，则新节点为头节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 否则尾节点的 next 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="5-循环队列">5 循环队列</h2><p><strong>轮转调度</strong>程序：以循环的方式迭代地遍历一个元素的集合，并通过执行一个给定的动作为集合中的每个元素进行“服务”。</p><p>例如：在队列 <code>Q</code> 反复进行下面的步骤，即可轮转调度为每个元素都进行“服务”。</p><ol><li><code>e = Q.dequeue()</code> ：从队列取出元素 e （下一个元素出队）</li><li><code>f(e)</code> ：为元素 e 提供服务、进行操作（“服务”下一个元素）</li><li><code>Q.enqueue(e)</code> ：e 被重新加入队列尾部（所“服务”的元素入队）</li></ol><p>利用循环链表实现循环队列见 <a href="https://blog.iskage.online/posts/9241942.html#2-3-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97">Blog Link</a> 或 <a href="https://zhuanlan.zhihu.com/p/29508680467">知乎链接</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedCircularQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;循环链表实现循环队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现循环队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只需要一个指针</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值 tail.next ，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对循环链表而言，定义尾指针指向节点的下一个节点为头节点</span></span><br><span class="line">        head = <span class="variable language_">self</span>._tail._<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列头节点 tail.next 和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        oldhead = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 获取头节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._size == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只有一个节点，删除后变成空队列</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = oldhead._<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 原来的 tail.next 即 oldhead 被释放，因为没有指针指向它</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> oldhead._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部 tail 增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="comment"># 如果为空，则新节点自己指向自己，后面再由 tail 指向 newest</span></span><br><span class="line">            newest._<span class="built_in">next</span> = newest</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newest._<span class="built_in">next</span> = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 新节点指向头节点</span></span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 原来的尾节点的 next 指针指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;训练轮转一次&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 指示指针 (尾指针) tail 向后移动一位</span></span><br></pre></td></tr></table></figure><h2 id="6-双端队列">6 双端队列</h2><h3 id="6-1-双端队列的概念和抽象数据类型">6.1 双端队列的概念和抽象数据类型</h3><p><strong>双端队列</strong>：类队列数据结构，支持在队列的头部和尾部都进行插入和删除。双端队列被称为 <code>deque</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ADT Deque &#123;</span><br><span class="line">     数据对象：D = &#123;D1, D2, ..., DN&#125;</span><br><span class="line">     基本操作：</span><br><span class="line">D.add_first(e): 向双端队列 D 的队头添加一个元素</span><br><span class="line">        D.add_last(e): 向队列 D 的队尾添加一个元素</span><br><span class="line">        D.delete_first(): 从双端队列 Q 中移除并返回第一个元素</span><br><span class="line">        D.delete_last(): 从双端队列 Q 中移除并返回最后一个元素</span><br><span class="line">        D.first(): 在不移除的前提下，返回双端队列的第一个元素</span><br><span class="line">        D.last(): 在不移除的前提下，返回双端队列的最后一个元素</span><br><span class="line">        <span class="built_in">len</span>(D): 返回双端队列 D 的长度</span><br><span class="line">         D.init(D0): 使用序列 D0 初始化队列 D</span><br><span class="line">        D.is_empty(): 检查双端队列 D 是否为空，如为空则返回 <span class="literal">True</span></span><br><span class="line">        D.clear(): 清空队列 D</span><br><span class="line">&#125; ADT Deque</span><br></pre></td></tr></table></figure><h3 id="6-2-基于双向链表实现双端队列">6.2 基于双向链表实现双端队列</h3><p>详细的搭建可见 <a href="https://blog.iskage.online/posts/9241942.html#3-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8">Blog Link</a> 或 <a href="https://zhuanlan.zhihu.com/p/29508680467">知乎链接</a> 。</p><p>先实现双向链表的基础类 <code>_DoublyLinkedBase</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_DoublyLinkedBase</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表的基础类/父类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;双向链表的节点类，包含元素值、prev 指针和 next 指针&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_prev&#x27;</span>, <span class="string">&#x27;_next&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, prev, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._prev = prev</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现链表 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个空链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建头哨兵、尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._header = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="variable language_">self</span>._trailer = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._header._<span class="built_in">next</span> = <span class="variable language_">self</span>._trailer  <span class="comment"># 头哨兵 next 指向尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._trailer._prev = <span class="variable language_">self</span>._header  <span class="comment"># 尾哨兵 prev 指向头哨兵</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 链表长度，不包括头尾哨兵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;链表长度 len() 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_between</span>(<span class="params">self, e, predecessor, successor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 predecessor, successor 插入插入新节点，并返回这个新节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建新节点，并将其 prev 指向 predecessor | 其 next 指向 successor</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, predecessor, successor)</span><br><span class="line"></span><br><span class="line">        predecessor._<span class="built_in">next</span> = newest  <span class="comment"># predecessor 的 next 指向新节点</span></span><br><span class="line">        successor._prev = newest  <span class="comment"># successor 的 prev 指向新节点</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> newest</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_delete_node</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;传入节点并删除，返回被删除的值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 记录将被删除的节点的前后信息</span></span><br><span class="line">        predecessor = node._prev</span><br><span class="line">        successor = node._<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 连接 predecessor 和 successor</span></span><br><span class="line">        predecessor._<span class="built_in">next</span> = successor</span><br><span class="line">        successor._prev = predecessor</span><br><span class="line"></span><br><span class="line">        element = node._element</span><br><span class="line">        <span class="comment"># 孤立节点 node : 设为空，用于标识这是即将被删除的节点</span></span><br><span class="line">        node._prev, node._<span class="built_in">next</span>, node._element = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p>再实现双向队列 <code>LinkedDeque</code> ，基础父类 <code>_DoublyLinkedBase</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedDeque</span>(<span class="title class_ inherited__">_DoublyLinkedBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表实现双端队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 继承父类 --------------</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;不需要定义 `__init__` `__len__` `is_empty` 方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 添加双端队列的功能 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取第一个元素的值，注意头节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._header._<span class="built_in">next</span>._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取最后一个元素的值，注意尾节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._trailer._prev._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_first</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在头部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在头哨兵和第一个元素节点之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._header, <span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_last</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在最后一个元素节点和尾哨兵之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._trailer._prev, <span class="variable language_">self</span>._trailer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除第一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除头节点的下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除最后一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除尾节点的上一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._trailer._prev)</span><br></pre></td></tr></table></figure><h2 id="7-队列的实际应用">7 队列的实际应用</h2><h3 id="7-1-杨辉三角">7.1 杨辉三角</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">YanghuiTri</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;杨辉三角队列实现&quot;&quot;&quot;</span></span><br><span class="line">    TriQ = ArrayQueue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一行</span></span><br><span class="line">    TriQ.enqueue(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>.center(<span class="number">5</span> * n))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每一次队列中仅仅保存上一行的数据</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):  <span class="comment"># 第 2 到 n 行</span></span><br><span class="line">        Line = <span class="string">&#x27;1&#x27;</span>  <span class="comment"># 展示这一行的结果（字符串形式）</span></span><br><span class="line">        TriQ.enqueue(<span class="number">1</span>)</span><br><span class="line">        p = TriQ.dequeue()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取上一行的两个元素进行加和，放在队尾</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, m):</span><br><span class="line">            q = TriQ.dequeue()</span><br><span class="line">            TriQ.enqueue(p + q)</span><br><span class="line">            Line += <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(p + q)</span><br><span class="line">            p = q</span><br><span class="line">        TriQ.enqueue(<span class="number">1</span>)</span><br><span class="line">        Line += <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(Line.center(<span class="number">5</span> * n))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    YanghuiTri(<span class="number">7</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#    1                 </span></span><br><span class="line"><span class="comment">#             1 1                </span></span><br><span class="line"><span class="comment">#            1 2 1               </span></span><br><span class="line"><span class="comment">#           1 3 3 1              </span></span><br><span class="line"><span class="comment">#          1 4 6 4 1             </span></span><br><span class="line"><span class="comment">#        1 5 10 10 5 1           </span></span><br><span class="line"><span class="comment">#       1 6 15 20 15 6 1      </span></span><br></pre></td></tr></table></figure><h3 id="7-2-迷宫问题">7.2 迷宫问题</h3><p>考虑一个长为 M 宽为 N 的迷官。其入口在 <code>(1, 1)</code> 处，出口在 <code>(M, N)</code> 处。例如，下图中 <code>M = N = 5</code> 。请设计一个算法，找到一条从入口到出口的路（也可能没有这样的路），并给出其运行的时间复杂度。</p><p>问题一：找出一条可能的路径（栈 ｜ 回溯法）</p><p>问题二：找出最短的路径（队列 ｜ 洪水算法）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742550035394.png" alt="迷宫问题样例"></p><h4 id="7-2-1-利用栈：回溯法">7.2.1 利用栈：回溯法</h4><p>回溯法的主要想法是<strong>深度优先</strong>，即一直走知道无路可走再回退。</p><p>考虑用栈来实现这个问题，每次存入经过的格子的坐标 <code>(i, j)</code> ，除去来时的路，下一步有 3 种走法，然后继续将新的位置压入栈。每次进行下一步都要检查是否为墙/是否在栈中，当无路可走时，将栈顶元素出栈，继续寻找。</p><p>有关栈的抽象数据类型见 <a href="https://blog.iskage.online/posts/c69bd6a6.html">Blog Link</a> 或 <a href="https://zhuanlan.zhihu.com/p/30420213013">知乎链接</a> 。代码实现迷宫问题见下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maze_path</span>(<span class="params">maze, M, N</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;找出一条可能的路径: 栈 ｜ 回溯法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化栈</span></span><br><span class="line">    stack = ArrayStack()</span><br><span class="line"></span><br><span class="line">    stack.push((<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># 起始点入栈</span></span><br><span class="line">    visited = <span class="built_in">set</span>()  <span class="comment"># 已经走过的路</span></span><br><span class="line">    visited.add((<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># 起始点入路</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义四个方向：左、右、上、下</span></span><br><span class="line">    directions = [(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后栈空说明无解</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        current = stack.top()  <span class="comment"># 栈顶元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current == (M, N):  <span class="comment"># 到达终点</span></span><br><span class="line">            path = [<span class="literal">None</span>] * <span class="built_in">len</span>(stack)</span><br><span class="line">            i = <span class="built_in">len</span>(stack) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">                path[i] = stack.pop()</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> path  <span class="comment"># 返回路径</span></span><br><span class="line"></span><br><span class="line">        found = <span class="literal">False</span>  <span class="comment"># 是否找到新的位置可走</span></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> directions:</span><br><span class="line">            i, j = current[<span class="number">0</span>] + d[<span class="number">0</span>], current[<span class="number">1</span>] + d[<span class="number">1</span>]  <span class="comment"># 新位置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查新坐标是否未访问，且是否是通路</span></span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="number">0</span> <span class="keyword">and</span> (i, j) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                stack.push((i, j))  <span class="comment"># (i, j) 通路且不在之前的路中</span></span><br><span class="line">                visited.add((i, j))  <span class="comment"># 入路，保证未来不会重走</span></span><br><span class="line">                found = <span class="literal">True</span>  <span class="comment"># 找到下一步</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">            <span class="comment"># 无路可走则回溯</span></span><br><span class="line">            stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 无解</span></span><br></pre></td></tr></table></figure><p>例如：使用 <code>1</code> 代表墙，即不可走；<code>0</code> 表示可以走。最外围的 <code>1</code> 只是为了表示边界，减少对边界判断的繁琐工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># M = N = 5 外面一圈 1 为了方便表示边界</span></span><br><span class="line">    maze = [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    ans = maze_path(maze, <span class="built_in">len</span>(maze) - <span class="number">2</span>, <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p><strong>算法分析</strong> ：按照回溯法，每个位置最多被首次访问一次并入栈，被回溯一次并出栈。在此之间，最多探索该位置周围的位置三次（即常数次操作）故复杂度为 <code>O(MN)</code> 。</p><h4 id="7-2-2-利用队列：洪水算法">7.2.2 利用队列：洪水算法</h4><p>洪水算法主要思想是<strong>广度优先</strong>，即保存每一步可能的所有情况，最后先出最短的路。</p><p>我们可以使用队列，从 <code>(1, 1)</code> 开始，重复以下操作：取出队头元素，将队头元素可以到达但并未走过的相邻点放入队列，并记录下从队头元素可以立即到达某一相邻点这一信息：</p><ul><li>如最终抵达终点，则已找到最短路，可根据之前记录的信息复原出这条路。</li><li>否则，如最终队列为空，则不存在这样的路。</li></ul><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maze_shortest_path</span>(<span class="params">maze, M, N</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;找出最短的路径: 队列 ｜ 洪水算法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack_path</span>(<span class="params">parent: <span class="built_in">dict</span>, start: <span class="built_in">tuple</span>, end: <span class="built_in">tuple</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从 end 回溯到 start，生成路径&quot;&quot;&quot;</span></span><br><span class="line">        path = []</span><br><span class="line">        current = end</span><br><span class="line">        <span class="keyword">while</span> current != start:</span><br><span class="line">            path.append(current)</span><br><span class="line">            current = parent[current]  <span class="comment"># 找到当前点的父节点</span></span><br><span class="line">        path.append(start)  <span class="comment"># 添加起点</span></span><br><span class="line">        path.reverse()  <span class="comment"># 反转路径，使其从 start 到 end</span></span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">    queue = ArrayQueue()</span><br><span class="line">    queue.enqueue((<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    parent = &#123;&#125;  <span class="comment"># 记录当前点的上一个点位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义四个方向：左、右、上、下</span></span><br><span class="line">    directions = [(<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> queue.is_empty():</span><br><span class="line">        current = queue.dequeue()  <span class="comment"># 当前位置</span></span><br><span class="line">        maze[current[<span class="number">0</span>]][current[<span class="number">1</span>]] = <span class="number">2</span>  <span class="comment"># 记当前位置为 2 放置重复走</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current == (M, N):  <span class="comment"># 在广度优先下，最先找到终点，即为最短路径</span></span><br><span class="line">            <span class="keyword">return</span> backtrack_path(parent, (<span class="number">1</span>, <span class="number">1</span>), (M, N))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> directions:  <span class="comment"># 四个方向都要考虑并入队</span></span><br><span class="line">            i, j = current[<span class="number">0</span>] + d[<span class="number">0</span>], current[<span class="number">1</span>] + d[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="number">0</span> <span class="keyword">and</span> maze[i][j] != <span class="number">2</span>:  <span class="comment"># 不是墙/且不重复</span></span><br><span class="line">                queue.enqueue((i, j))  <span class="comment"># 入队</span></span><br><span class="line">                parent[(i, j)] = current  <span class="comment"># 记录当前点的上一个点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 无解</span></span><br></pre></td></tr></table></figure><p>例如：仍然是上面的例子，最短路应该为从左边到底然后向右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># M = N = 5 外面一圈 1 为了方便表示边界</span></span><br><span class="line">    maze = [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    ans = maze_path(maze, <span class="built_in">len</span>(maze) - <span class="number">2</span>, <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line">    shortest_ans = maze_shortest_path(maze, <span class="built_in">len</span>(maze) - <span class="number">2</span>, <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(shortest_ans)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Output&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 利用栈：回溯法，不是最短</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用队列：洪水算法，最短路</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">5</span>, <span class="number">1</span>), (<span class="number">5</span>, <span class="number">2</span>), (<span class="number">5</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>)]</span><br></pre></td></tr></table></figure><p><strong>算法分析</strong>：每个位置最多被放入队列一次、出队一次，﻿﻿算法复杂度 <code>O(MN)</code> 。</p>]]></content>
    
    
    <summary type="html">本章介绍了队列 (Queue) 数据类型，并实现了队列的抽象数据类型 (Queue ADT) 。并基于数组和链表分别实现了队列、循环队列和双端队列。由于队列的先进先出性 (FIFO) 能够实现很多应用，本章介绍了两个实际问题的应用：1. 使用队列实现杨辉三角；2. 使用栈+回溯法实现了迷宫问题的路径寻找、使用队列+洪水算法实现了迷宫问题的最短路寻找。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作系统：重定向和通配符扩展</title>
    <link href="https://blog.iskage.online/posts/753a6f85.html"/>
    <id>https://blog.iskage.online/posts/753a6f85.html</id>
    <published>2025-03-16T06:03:00.000Z</published>
    <updated>2025-03-16T06:42:18.120Z</updated>
    
    <content type="html"><![CDATA[<h1>重定向和通配符扩展</h1><p>本章介绍了 Linux 操作系统中的重定向和通配符扩展：包括 <code>cat</code> 和 <code>split</code> 命令以及管道 <code>|</code> 的使用；有关通配符 <code>?, *, [abc]</code> 等的使用，快速查找文件内容和处理命令输入输出。</p><h2 id="1-重定向">1 重定向</h2><h3 id="1-1-cat-和-split">1.1 cat 和 split</h3><h4 id="1-1-1-cat命令">1.1.1 cat命令</h4><p>• <strong>功能</strong>：连接文件并打印到标准输出，支持文本处理功能。<br>• <strong>参数</strong>：</p><table><thead><tr><th>参数</th><th>功能描述</th></tr></thead><tbody><tr><td><code>-n</code></td><td>显示行号（包括空行）</td></tr><tr><td><code>-b</code></td><td>显示行号（跳过空行）</td></tr><tr><td><code>-s</code></td><td>压缩连续空行为一行</td></tr><tr><td><code>-A</code></td><td>显示不可打印字符（如<code>^I</code>代表Tab，<code>$</code>代表换行）</td></tr></tbody></table><p>• <strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并两个文件</span></span><br><span class="line"><span class="built_in">cat</span> file1 file2 &gt; merged_file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示行号（含空行）</span></span><br><span class="line"><span class="built_in">cat</span> -n tmp.txt</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># 1 id name desc</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3 1 John 99</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示不可打印字符</span></span><br><span class="line"><span class="built_in">cat</span> -A tmp.txt</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># id^Iname^Idesc$</span></span><br><span class="line"><span class="comment"># $</span></span><br><span class="line"><span class="comment"># 1^IJohn^I99$</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742105899621.png" alt="示例"></p><h4 id="1-1-2-split命令">1.1.2 split命令</h4><p>• <strong>功能</strong>：将大文件拆分为多个小文件。<br>• <strong>参数</strong>：</p><table><thead><tr><th>参数</th><th>功能描述</th></tr></thead><tbody><tr><td><code>-l N</code></td><td>按每N行拆分</td></tr><tr><td><code>-b SIZE</code></td><td>按文件大小拆分（如<code>900K</code>）</td></tr><tr><td><code>-d</code></td><td>使用数字后缀（如<code>00</code>, <code>01</code>）</td></tr><tr><td><code>-a N</code></td><td>指定后缀长度（默认2位）</td></tr></tbody></table><p>• <strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拆分二进制文件为900KB片段</span></span><br><span class="line"><span class="built_in">split</span> -d -b 900k /bin/bash bash_part.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并拆分文件</span></span><br><span class="line"><span class="built_in">cat</span> bash_part.00 bash_part.01 &gt; restored_bash</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742106093707.png" alt="示例"></p><h3 id="1-2-重定向基本原理和机制">1.2 重定向基本原理和机制</h3><h4 id="1-2-1-文件描述符">1.2.1 文件描述符</h4><p>• <strong>标准输入/输出</strong>：<br>• <code>0</code>（STDIN）：默认从键盘读取输入。<br>• <code>1</code>（STDOUT）：默认输出到屏幕。<br>• <code>2</code>（STDERR）：默认输出错误到屏幕。</p><h4 id="1-2-2-重定向操作">1.2.2 重定向操作</h4><p>• <strong>输入重定向</strong>：将 <code>input.txt</code> 的内容读到命令 <code>command</code> 后作为命令的输入</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从文件读取输入</span></span><br><span class="line"><span class="built_in">command</span> &lt; input.txt</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742106782177.png" alt="示例"></p><p>• <strong>输出重定向</strong>：将命令的输出写入文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 覆盖写入文件</span></span><br><span class="line"><span class="built_in">command</span> &gt; output.txt</span><br><span class="line"><span class="comment"># 追加写入文件</span></span><br><span class="line"><span class="built_in">command</span> &gt;&gt; output.txt</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1742106463558.png" alt="示例"></p><p>• <strong>错误重定向</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将错误输出到文件</span></span><br><span class="line"><span class="built_in">command</span> 2&gt; error.log</span><br><span class="line"><span class="comment"># 合并标准输出和错误到同一文件</span></span><br><span class="line"><span class="built_in">command</span> &amp;&gt; combined.log</span><br></pre></td></tr></table></figure><h3 id="1-3-管道">1.3 管道</h3><h4 id="1-3-1-管道机制">1.3.1 管道机制</h4><p>• <strong>语法</strong>：<code>cmd1 | cmd2 | cmd3</code><br>• <strong>功能</strong>：将前一个命令的 STDOUT 输出作为下一个命令的 STDIN 输入。<br>• <strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计包含&quot;error&quot;的行数</span></span><br><span class="line">grep <span class="string">&quot;error&quot;</span> log.txt | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><h4 id="1-3-2-tee-命令">1.3.2 tee 命令</h4><p>• <strong>功能</strong>：将数据同时输出到文件和屏幕。<br>• <strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将输出保存到文件并显示在屏幕</span></span><br><span class="line"><span class="built_in">ls</span> /usr/bin | grep zip | <span class="built_in">tee</span> ziplist.txt</span><br></pre></td></tr></table></figure><h2 id="2-通配符扩展">2 通配符扩展</h2><h3 id="2-1-通配符模式">2.1 通配符模式</h3><h4 id="2-1-1-基础通配符">2.1.1 基础通配符</h4><p>• <code>?</code>：匹配单个字符。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file?.txt  <span class="comment"># 匹配 file1.txt, fileA.txt</span></span><br></pre></td></tr></table></figure><p>• <code>*</code>：匹配任意数量字符。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> *.<span class="built_in">log</span>      <span class="comment"># 匹配所有.log文件</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-字符集合">2.1.2 字符集合</h4><p>• <code>[abc]</code>：匹配a、b、c中的任意一个字符。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file[123].txt  <span class="comment"># 匹配 file1.txt, file2.txt, file3.txt</span></span><br></pre></td></tr></table></figure><p>• <code>[a-z]</code>：匹配范围（依赖本地化设置）。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [a-c]*.txt     <span class="comment"># 匹配a、b、c开头的文件</span></span><br></pre></td></tr></table></figure><h3 id="2-2-通配符扩展">2.2 通配符扩展</h3><h4 id="2-2-1-否定匹配">2.2.1 否定匹配</h4><p>• <code>[!abc]</code>：匹配不在集合中的字符。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file[!1-3].txt  <span class="comment"># 排除file1-3.txt</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-特殊字符处理">2.2.2 特殊字符处理</h4><p>• <strong>转义字符</strong>：使用反斜杠<code>\</code>或引号避免扩展。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> file\?.txt    <span class="comment"># 匹配file?.txt字面量</span></span><br></pre></td></tr></table></figure><h3 id="2-3-扩展通配符（需启用extglob）">2.3 扩展通配符（需启用<code>extglob</code>）</h3><h4 id="2-3-1-模式扩展">2.3.1 模式扩展</h4><p>• <strong>启用和关闭扩展</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shopt</span> -s extglob  <span class="comment"># 启用</span></span><br><span class="line"><span class="built_in">shopt</span> -u extglob  <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure><p>• <strong>语法</strong>：<br>• <code>?(pattern)</code>：匹配 0 或 1 次。<br>• <code>*(pattern)</code>：匹配 0 或多次。<br>• <code>+(pattern)</code>：匹配 1 或多次。<br>• <code>@(pat1|pat2)</code>：匹配 pat1 或 pat2 。</p><h4 id="2-3-2-示例">2.3.2 示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配所有.jpg或.png文件</span></span><br><span class="line"><span class="built_in">ls</span> @(*.jpg|*.png)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍了 Linux 操作系统中的重定向和通配符扩展：包括 `cat` 和 `split` 命令以及管道 `|` 的使用；有关通配符 `?, *, [abc]` 等的使用，快速查找文件内容和处理命令输入输出。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="文件系统" scheme="https://blog.iskage.online/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>栈 Stack 和回溯法 Backtracking</title>
    <link href="https://blog.iskage.online/posts/c69bd6a6.html"/>
    <id>https://blog.iskage.online/posts/c69bd6a6.html</id>
    <published>2025-03-15T05:43:00.000Z</published>
    <updated>2025-04-06T13:33:33.225Z</updated>
    
    <content type="html"><![CDATA[<h1>栈 Stack 和回溯法 Backtracking</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本章介绍<strong>栈</strong>数据类型，包括栈的概念、如何用 Python 实现栈（数组、链表）、栈的实际使用（数据逆置、匹配问题、算数计算原理、函数调用等原理）以及<strong>回溯法</strong>的概念和使用，包括常见案例（全排列、子集问题、求和谜题以及著名的 N 皇后问题）。</p><h2 id="1-栈的概念">1 栈的概念</h2><p><strong>栈 (stack)</strong>：限制数据插入、删除操作只能在一端进行的特殊序列，遵循后进先出的原则（Last In First Out, LIFO）。</p><ul><li>允许插入、删除的一端为<strong>栈顶</strong>（top），另一段为<strong>栈底</strong>（bottom）。</li><li>在栈顶插入元素称为<strong>入栈</strong>（push），删除元素称为<strong>出栈</strong>（pop）。</li><li>栈中元素个数称为栈的长度。</li></ul><h2 id="2-栈的抽象数据类型">2 栈的抽象数据类型</h2><p>对于栈的抽象数据类型 (stack ADT) ，它应该满足如下操作：</p><ol><li><code>S.push(e)</code> ：将元素 e 从栈顶插入栈。</li><li><code>S.pop()</code> ：将栈顶的元素出栈，即删除头部元素，并返回元素的值。如果栈为空，则报错。</li><li><code>S.top()</code> ：返回栈顶元素的值。如果栈为空，则报错。</li><li><code>S.is_empty()</code> ：如果栈中无元素，则返回 <code>True</code> 。</li><li><code>len(S)</code> ：重载运算符 <code>__len__()</code> ，返回栈的元素个数。</li></ol><p>以下是栈的抽象数据类型的一些操作示意：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741869902612.png" alt="栈的抽象数据类型的操作示意"></p><h2 id="3-基于数组实现栈">3 基于数组实现栈</h2><p>Python 提供的 <code>list</code> 类是数组的一种，它已经提供了 <code>append()</code> 和 <code>pop()</code> 方法，所以可以自然的利用 <code>list</code> 类来实现栈，只需要将列表类的尾部视作栈的顶部即可。但 <code>list</code> 类支持从列表中间插入元素，这违反了栈的规定。所以我们要利用 <code>list</code> 类重新定义一个新的栈类 <code>ArrayStack</code> 。</p><h3 id="3-1-适配器模式">3.1 适配器模式</h3><p>对于创建一个新类，可以包含一个现存类的实例作为隐藏域，然后用这个隐藏实例变量的原有方法实现新类的方法。</p><p>例如：对于栈，可以在 Python 的 <code>list</code> 类上进行修改。那么在初始化 <code>ArrayStack</code> 时，可以包含 <code>list</code> 类的实例对象。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArraryStack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._data = []</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741870532231.png" alt=""></p><h3 id="3-2-代码实现">3.2 代码实现</h3><p>特别地，在判断栈为空时，需要自定义一个异常类，以免触发 <code>list</code> 类自带的异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;栈为空的异常类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>完整 <code>ArrayStack</code> 类实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于数组的栈数据类型 LIFO&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = []  <span class="comment"># 适配器模式，隐藏 list 实例化对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;栈的元素个数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向栈顶插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data.append(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回栈顶元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&quot;Stack is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._data[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从栈顶删除元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&quot;Stack is empty&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._data.pop()</span><br></pre></td></tr></table></figure><h3 id="3-3-算法分析">3.3 算法分析</h3><p>由于 <code>ArrayStack</code> 类基于 Python 的 <code>list</code> 类实现，如之前所述（<a href="https://blog.iskage.online/posts/340249a9.html">基于数组的序列</a>），由于数组的紧凑/连续内存分布，使得其索引操作都是在常数时间内完成的。而删除与插入操作，又因为栈的特性，每次操作均是在栈顶进行，故复杂度也为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。但不得不考虑 Python 在数组是以动态数组的方式存在，存在着<strong>摊销时间</strong>成本，如果没有扩大数组内存空间然后复制，则为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，但遇到最坏情况则为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741871355451.png" alt="基于数组的栈的算法复杂度分析"></p><blockquote><p>也正是因为摊销成本的存在，一开始如果先初始化一个有长度的数组，会比空数组更为划算。</p></blockquote><h2 id="4-基于链表实现栈">4 基于链表实现栈</h2><p>正是因为栈的特殊性（插入、删除、查看均在头部进行），这使得链表是实现栈的良好选择。而相比数组，链表不需要连续的内存分布，也不存在摊销成本。这一部分可参见上一章 <a href="https://blog.iskage.online/posts/9241942.html">链表</a> 。这里给出一个用单向链表实现栈的抽象类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现栈&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现栈&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现栈 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span>  <span class="comment"># 头指针，指向节点，初始化为空</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;栈元素个数 len(obj) 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向栈顶部增加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 新建节点，指向旧的 head 新的 head 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._Node(e, <span class="variable language_">self</span>._head)</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回栈顶值，但不改变链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回栈顶元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element</span><br><span class="line">        <span class="comment"># 删除头部节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="5-栈的实际使用">5 栈的实际使用</h2><h3 id="5-1-使用栈实现数据的逆置">5.1 使用栈实现数据的逆置</h3><p>由于栈的特殊性，即后进先出，用栈实现逆置是一个十分自然的想法。主要思想是：先将元素一个一个压入栈中，然后再一个一个返回，而返回的过程其实就是逆置的过程。</p><p>例如：读取 <code>example.txt</code> 的内容，按照每行为一个元素，逆置写入原文档。即将原文档行行逆置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;逆置文件句子，覆写进原文档&quot;&quot;&quot;</span></span><br><span class="line">    S = ArrayStack()  <span class="comment"># 实例化栈对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读原文件</span></span><br><span class="line">    original = <span class="built_in">open</span>(filename)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> original:</span><br><span class="line">        <span class="comment"># 将每一行 push 进栈</span></span><br><span class="line">        S.push(line.rstrip(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">    original.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读文档，准备写入逆置文本</span></span><br><span class="line">    output = <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> S.is_empty():</span><br><span class="line">        <span class="comment"># 出栈，写入原文档</span></span><br><span class="line">        output.write(S.pop() + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    output.close()</span><br></pre></td></tr></table></figure><p>原文档如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">File name: example.txt</span><br><span class="line">Create time: 2025/3/13</span><br><span class="line">Objective: for reverse</span><br><span class="line">Body:</span><br><span class="line">By using stack data structure,</span><br><span class="line">we read this file</span><br><span class="line">and push every lines into the stack.</span><br><span class="line">After that,</span><br><span class="line">pop the objects (lines)</span><br><span class="line">one by one.</span><br><span class="line">And that is the result</span><br><span class="line">--- a reversed file</span><br><span class="line">End!</span><br></pre></td></tr></table></figure><p>经过逆置后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse_file(<span class="string">&#x27;example.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">End!</span><br><span class="line">--- a reversed file</span><br><span class="line">And that is the result</span><br><span class="line">one by one.</span><br><span class="line">pop the objects (lines)</span><br><span class="line">After that,</span><br><span class="line">and push every lines into the stack.</span><br><span class="line">we read this file</span><br><span class="line">By using stack data structure,</span><br><span class="line">Body:</span><br><span class="line">Objective: for reverse</span><br><span class="line">Create time: 2025/3/13</span><br><span class="line">File name: example.txt</span><br></pre></td></tr></table></figure><h3 id="5-2-括号和-HTML-标签匹配">5.2 括号和 HTML 标签匹配</h3><p>很多需要匹配，且匹配对象往往是相邻最近的对象进行匹配的问题，大多可以使用栈的思想来解决。</p><h4 id="5-2-1-括号匹配">5.2.1 括号匹配</h4><p>例如<strong>括号匹配</strong>问题：对于三种括号 <code>&#123;&#125;</code> <code>[]</code> <code>()</code> 它们都需要左括号和右括号相匹配。对于一个括号序列例如 <code>&#123;[()]&#125;</code> 它是否满足括号匹配要求。</p><p>匹配原则：对于右括号，必须保证在它的左边第一个出现的未匹配成功左括号一定与自己相匹配，否则这一串括号序列就是匹配失败的。例如下面的例子：</p><ol><li><code>()(())&#123;([()])&#125;</code> ：匹配成功</li><li><code>((()())&#123;([()])&#125;)</code> ：匹配成功</li><li><code>(&#123;[])&#125;</code> ：匹配失败。因为对于位于位置 5 的右小括号 <code>)</code> ，它的左边第一个为匹配成功的左括号为 <code>&#123;</code> ，所以匹配失败。（不是 <code>[</code> 因为其已经和 <code>]</code> 匹配成功）</li></ol><p>括号匹配栈算法思路：将括号序列从左到右逐个压入栈，对于左括号直接压入。一旦遇到右括号，则比较其和现在的栈顶括号是否匹配，不匹配则算法结束，返回 <code>False</code> ；否则匹配成功，该右括号不入栈，栈顶元素也出栈，如此继续。如果最后成功将栈清空，则匹配成功。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_matched</span>(<span class="params">expr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断左右括号是否匹配&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 左右括号集，注意同一类型括号位置相同</span></span><br><span class="line">    lefty = <span class="string">&quot;&#123;[(&quot;</span></span><br><span class="line">    righty = <span class="string">&quot;&#125;])&quot;</span></span><br><span class="line"></span><br><span class="line">    S = ArrayStack()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> expr:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> lefty:</span><br><span class="line">            <span class="comment"># 左括号入栈</span></span><br><span class="line">            S.push(c)</span><br><span class="line">        <span class="keyword">elif</span> c <span class="keyword">in</span> righty:</span><br><span class="line">            <span class="comment"># 右括号比较</span></span><br><span class="line">            <span class="keyword">if</span> S.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 如果右括号前没有栈元素，肯定不匹配</span></span><br><span class="line">            <span class="keyword">if</span> righty.index(c) != lefty.index(S.pop()):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 删去栈顶，查看栈顶左括号和现在右括号是否匹配</span></span><br><span class="line">    <span class="comment"># 栈清空，则匹配成功</span></span><br><span class="line">    <span class="keyword">return</span> S.is_empty()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(is_matched(<span class="string">&quot;((()())&#123;([()])&#125;)&quot;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(is_matched(<span class="string">&quot;(&#123;[])&#125;&quot;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(is_matched(<span class="string">&quot;&#123;(5 + x) - [1 + (y - z) * 4]&#125;&quot;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><blockquote><p>只需遍历一次，故时间复杂的为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p></blockquote><h4 id="5-2-2-HTML-标签匹配">5.2.2 HTML 标签匹配</h4><p>HTML 标签以 <code>&lt;item&gt;</code> 和 <code>&lt;/item&gt;</code> 的方式成对出现。判断匹配方式与括号相同，只是需要多考虑一层：标签内容要一致，即左标签内容 <code>item</code> 和右标签去除 <code>/</code> 后的内容 <code>item</code> 相同。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_matched_html</span>(<span class="params">raw</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断 html 标签匹配与否&quot;&quot;&quot;</span></span><br><span class="line">    S = ArrayStack()</span><br><span class="line">    j = raw.find(<span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> j != -<span class="number">1</span>:</span><br><span class="line">        k = raw.find(<span class="string">&#x27;&gt;&#x27;</span>, j + <span class="number">1</span>)  <span class="comment"># 从 j + 1 开始找 &#x27;&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> k == -<span class="number">1</span>:  <span class="comment"># 找到结尾都没找到，则匹配失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        tag = raw[j + <span class="number">1</span>:k]  <span class="comment"># 提取 &#x27;&lt;&#x27; &#x27;&gt;&#x27; 之间的字符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tag.startswith(<span class="string">&#x27;/&#x27;</span>):  <span class="comment"># 是否以 &#x27;/&#x27; 开头</span></span><br><span class="line">            <span class="comment"># 不以 &#x27;/&#x27; 开头，说明为左标签，入栈</span></span><br><span class="line">            S.push(tag)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 否则以 &#x27;/&#x27; 开头，为右标签，判断</span></span><br><span class="line">            <span class="keyword">if</span> S.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 如果为空，说明没有左标签匹配</span></span><br><span class="line">            <span class="keyword">if</span> tag[<span class="number">1</span>:] != S.pop():</span><br><span class="line">                <span class="comment"># 右标签去除 &#x27;/&#x27; 后是否与此时栈顶左标签匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 从 k + 1 寻找下一对标签</span></span><br><span class="line">        j = raw.find(<span class="string">&#x27;&lt;&#x27;</span>, k + <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 栈清空，则匹配成功</span></span><br><span class="line">    <span class="keyword">return</span> S.is_empty()</span><br></pre></td></tr></table></figure><ul><li>使用案例：读取下面的 <code>example.html</code> 文件，判断标签是否匹配。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> The Little Boat <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> The storm tossed the little</span><br><span class="line">    boat like a cheap sneaker in an</span><br><span class="line">    old washing machine. The three</span><br><span class="line">    drunken fishermen were used to</span><br><span class="line">    such treatment, of course, but</span><br><span class="line">    not the tree salesman, who even as</span><br><span class="line">    a stowaway now felt that he</span><br><span class="line">    had overpaid for the voyage. <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> Will the salesman die?<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> What color is the boat?<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> And what about Naomi?<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">html_file = <span class="built_in">open</span>(<span class="string">&#x27;example.html&#x27;</span>)</span><br><span class="line">html_content = html_file.read()</span><br><span class="line"></span><br><span class="line">row = <span class="string">&quot;&quot;</span>.join(html_content.split(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_matched_html(row))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">html_file.close()</span><br></pre></td></tr></table></figure><blockquote><p>只需遍历一次，故时间复杂的为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p></blockquote><h3 id="5-3-函数调用">5.3 函数调用</h3><p>当调用新函数时，系统需要保存当前调用的所有局部变量，否则新函数将覆盖这些变量。此外，必须保存例程中的当前位置，以便新功能在完成后知道返回何处。所有这些工作都可以通过<strong>操作系统自动使用栈</strong>来完成。</p><p>可以理解为：当程序进行时，最先出现的变量和其对应的值会被放入栈底，逐个放入这些变量和结果。当遇到函数时，将函数压入栈中，函数调用的参数实际值来自之前栈中存储的数据。当函数结束时，函数出栈，（函数中的局部变量全部出栈，空间被释放），然后压入程序后面的其他数据。</p><p>例如：在内存中，递归实际上是通过栈操作来完成的</p><h3 id="5-4-升序序列跨度">5.4 升序序列跨度</h3><p>跨度问题：对于数组 <code>X</code> ，其任意位置的 <code>X[i]</code> 的跨度 <code>S[i]</code> 定义为 <code>X[i]</code> 前符合 <code>X[j] &lt;= X[i]</code> 的连续元素个数。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spans</span>(<span class="params">X, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算最长升序跨度</span></span><br><span class="line"><span class="string">    :param X: 原序列</span></span><br><span class="line"><span class="string">    :param n: 考察序列 X 的前 n 项</span></span><br><span class="line"><span class="string">    :return S 跨度列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    S = []  <span class="comment"># 记录跨度</span></span><br><span class="line">    A = ArrayStack()  <span class="comment"># 栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 遍历 X 的每个元素</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">not</span> A.is_empty()) <span class="keyword">and</span> X[A.top()] &lt;= X[i]:</span><br><span class="line">            <span class="comment"># 当栈非空并且栈顶元素仍然更小时，不断出栈，直到找到比当前元素更大的数</span></span><br><span class="line">            A.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> A.is_empty():</span><br><span class="line">            <span class="comment"># 如果栈空，当前位置 i 前所有数都比当前数小，那跨度为 i + 1</span></span><br><span class="line">            S.append(i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 否则，跨度为当前位置 i 减去比自己大的数的位置 A.top()</span></span><br><span class="line">            S.append(i - A.top())</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 记录目前最大值的位置</span></span><br><span class="line">        A.push(i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> S</span><br></pre></td></tr></table></figure><p>例如：对于 <code>X = [6, 3, 4, 5, 2, 1, 4, 9, 10, 1, 3, 20, 11, 9]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(spans(X, <span class="built_in">len</span>(X)))</span><br><span class="line"><span class="comment"># [1, 1, 2, 3, 1, 1, 3, 8, 9, 1, 2, 12, 1, 1]</span></span><br></pre></td></tr></table></figure><h3 id="5-5-计算算数表达式">5.5 计算算数表达式</h3><p>在计算算数表达式时，计算机需要比较各个运算符的优先级，然后计算。这一过程可以使用栈来实现。</p><p><strong>主要思路</strong>：分别创建两个栈 <code>opStk</code> 存储运算符和 <code>valStk</code> 存储值。每次遇到值则压入 <code>valStk</code> ，遇到运算符则比较其和 <code>opStk</code> 栈顶的运算符优先级，要是优先级高，则直接入栈；否则值栈 <code>valStk</code> 出栈 2 个值进行此时 <code>opStk</code> 栈顶的运算（栈顶运算符出栈），运算结果再进栈 <code>valStk</code> 。然后继续比较此时 <code>opStk</code> 栈顶运算符的优先级，如此类推。这样，最后 <code>valStk</code> 剩余的元素即为计算结果。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> ArrayStack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_exp</span>(<span class="params">tokens</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">precedence</span>(<span class="params">op</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;为运算符定义优先级&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">&#x27;$&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 结束符优先级最低</span></span><br><span class="line">        <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>  <span class="comment"># 比较运算符</span></span><br><span class="line">        <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>  <span class="comment"># 加减</span></span><br><span class="line">        <span class="keyword">elif</span> op <span class="keyword">in</span> (<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>  <span class="comment"># 乘除</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Invalid operator: <span class="subst">&#123;op&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">repeat_ops</span>(<span class="params">ref_op, opStk, valStk</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断优先级&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(valStk) &gt;= <span class="number">2</span> <span class="keyword">and</span> precedence(ref_op) &lt;= precedence(opStk.top()):</span><br><span class="line">            <span class="comment"># 如果当前运算符优先级比 opStk 栈顶低，则先计算栈顶运算符</span></span><br><span class="line">            do_op(opStk, valStk)  <span class="comment"># 直到栈顶的低，或 valStk 不足 2 个元素可以计算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_op</span>(<span class="params">op_stk, val_stk</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;正式计算过程&quot;&quot;&quot;</span></span><br><span class="line">        op = op_stk.pop()  <span class="comment"># 提取运算符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取栈顶计算的两个元素</span></span><br><span class="line">        x = val_stk.pop()</span><br><span class="line">        y = val_stk.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按照运算符的含义进行计算</span></span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            val_stk.push(y + x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            val_stk.push(y - x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            val_stk.push(y * x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            val_stk.push(y / x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">            val_stk.push(y &lt; x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">            val_stk.push(y &gt; x)</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            val_stk.push(y == x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Invalid operator: <span class="subst">&#123;op&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始计算</span></span><br><span class="line">    tokens = tokens + [<span class="string">&#x27;$&#x27;</span>]  <span class="comment"># $ 代表算数式起始</span></span><br><span class="line">    valStk = ArrayStack()  <span class="comment"># 记录值</span></span><br><span class="line">    opStk = ArrayStack()  <span class="comment"># 记录运算符</span></span><br><span class="line">    opStk.push(<span class="string">&#x27;$&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> token <span class="keyword">in</span> tokens:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(token).isdigit():</span><br><span class="line">            <span class="comment"># 如果为数字，直接入栈 valStk</span></span><br><span class="line">            valStk.push(<span class="built_in">int</span>(token))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果为运算符</span></span><br><span class="line">            repeat_ops(token, opStk, valStk)  <span class="comment"># 检查优先级</span></span><br><span class="line">            opStk.push(token)  <span class="comment"># 当前运算符入栈 opStk</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回最后 valStk 栈顶元素，即为结果</span></span><br><span class="line">    <span class="keyword">return</span> valStk.top()</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">expr = [<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]  <span class="comment"># 3 + 5 * 2 = 13</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(expr)&#125;</span> is <span class="subst">&#123;eval_exp(expr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增比较运算测试</span></span><br><span class="line">expr = [<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]  <span class="comment"># (3 + 5) &lt; (2 * 4) -&gt; 8 &lt; 8 -&gt; False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(expr)&#125;</span> is <span class="subst">&#123;eval_exp(expr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">expr = [<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]  <span class="comment"># 5 &gt; (2 * 3) -&gt; 5 &gt; 6 -&gt; False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(expr)&#125;</span> is <span class="subst">&#123;eval_exp(expr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">expr = [<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]  <span class="comment"># 7 = (3 + 4) -&gt; True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(expr)&#125;</span> is <span class="subst">&#123;eval_exp(expr)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> + <span class="number">5</span> * <span class="number">2</span> <span class="keyword">is</span> <span class="number">13</span></span><br><span class="line"><span class="number">3</span> + <span class="number">5</span> &lt; <span class="number">2</span> * <span class="number">4</span> <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line"><span class="number">5</span> &gt; <span class="number">2</span> * <span class="number">3</span> <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line"><span class="number">7</span> = <span class="number">3</span> + <span class="number">4</span> <span class="keyword">is</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="6-算法：回溯法">6 算法：回溯法</h2><h3 id="6-1-概念">6.1 概念</h3><p>回溯法是一种通过<strong>试错</strong>寻找问题解的算法。它通过深度优先的方式遍历所有可能的路径，当发现当前路径无法得到有效解时，回退到上一步（<strong>回溯 Backtracking</strong>）并将之前找不到解的路径减去，以后不再寻找，即<strong>剪枝 pruning</strong>，尝试其他可能性。</p><h3 id="6-2-常见步骤">6.2 常见步骤</h3><p>与递归类似，回溯法可分解为很多步，每一步的常见做法为：</p><ul><li>首先从该步可以尝试的所有元素的集合 <code>U</code> 中选出一个元素 <code>e</code></li><li>将该元素 <code>e</code> 加入到当前尝试的解中，进入下一步</li><li>在某些条件下可以在该步判定当前尝试的解是否为真解，以及当前情况可否进行剪枝</li><li>将元素 <code>e</code> 从当前解中移除（有必要时需将 <code>U</code> 放回集合 <code>U</code>）</li></ul><h3 id="6-3-实际应用和代码实现">6.3 实际应用和代码实现</h3><h4 id="6-3-1-全排列问题">6.3.1 全排列问题</h4><p><strong>思路</strong>：从 <code>U</code> 取出 <code>e</code> ，然后从 <code>U</code> 去除 <code>e</code> 。不同于子集问题，因为全排列允许重复，所以只需要去除 <code>e</code> 。子集问题和全排列问题都不需要设置约束条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permute_stack</span>(<span class="params">nums</span>):</span><br><span class="line">    res = []</span><br><span class="line">    stack = ArrayStack()</span><br><span class="line">    stack.push(([], nums))  <span class="comment"># 初始状态：空排列 []，剩余元素 nums</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        <span class="comment"># Step 1: 每次拿出栈顶元素检查，如果不是全排列则进入 Step 2</span></span><br><span class="line">        path, remaining = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> remaining:  <span class="comment"># 如果剩余元素为空，说明 path 是一个完整的排列</span></span><br><span class="line">            res.append(path)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: 遍历元素，直到将 remaining 的所以剩余元素都加入新的排列中</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(remaining))):  <span class="comment"># 从剩余的 remaining 中取</span></span><br><span class="line">            e = remaining[i]  <span class="comment"># 取出当前元素</span></span><br><span class="line">            new_remaining = remaining[:i] + remaining[i + <span class="number">1</span>:]  <span class="comment"># 从剩余元素中移除 e</span></span><br><span class="line">            new_path = path + [e]  <span class="comment"># 将 e 加入排列 []</span></span><br><span class="line">            stack.push((new_path, new_remaining))  <span class="comment"># 压入新状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(permute_stack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 全排列</span></span><br><span class="line"><span class="comment"># [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span></span><br></pre></td></tr></table></figure><h4 id="6-3-2-子集问题">6.3.2 子集问题</h4><p><strong>思路</strong>：从 <code>U</code> 取出 <code>e</code> ，然后从 <code>U</code> 去除 <code>e</code> 。不过不同于全排列问题，由于子集不运行重复，所以需要去除 <code>e</code> 和之前的剩余元素，避免重复。子集问题和全排列问题都不需要设置约束条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subsets_stack</span>(<span class="params">nums</span>):</span><br><span class="line">    res = []</span><br><span class="line">    stack = ArrayStack()</span><br><span class="line">    stack.push(([], nums))  <span class="comment"># 初始状态：空子集，剩余元素为 nums</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        <span class="comment"># Step 1: 取栈顶元素，直接加入结果集，因为是子集问题</span></span><br><span class="line">        path, remaining = stack.pop()</span><br><span class="line">        res.append(path)  <span class="comment"># 将当前子集加入结果集</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: 遍历剩余元素，加入子集</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(remaining))):</span><br><span class="line">            e = remaining[i]  <span class="comment"># 取出当前元素</span></span><br><span class="line">            <span class="comment"># 从剩余元素中移除 e 及其之前的元素，因为子集不允许重复</span></span><br><span class="line">            new_remaining = remaining[i + <span class="number">1</span>:]</span><br><span class="line">            new_path = path + [e]  <span class="comment"># 将 e 加入子集</span></span><br><span class="line">            stack.push((new_path, new_remaining))  <span class="comment"># 压入新状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(subsets_stack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 子集</span></span><br><span class="line"><span class="comment"># [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]</span></span><br></pre></td></tr></table></figure><h4 id="6-3-3-求和谜题">6.3.3 求和谜题</h4><p><strong>思路</strong>：求和谜题，需要考虑得到的解是否满足求和要求。所以在上述的思路基础下，需要设置约束条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">combinationSum_stack</span>(<span class="params">candidates, target</span>):</span><br><span class="line">    res = []</span><br><span class="line">    stack = ArrayStack()</span><br><span class="line">    <span class="comment"># 初始状态：空组合，剩余目标值 target 即离 target 的差，起始位置 0</span></span><br><span class="line">    stack.push(([], target, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        path, remaining, start = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> remaining == <span class="number">0</span>:  <span class="comment"># 如果剩余目标值为 0，说明 path 是一个有效组合</span></span><br><span class="line">            res.append(path)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 candidates 的 start 开始选择元素</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, <span class="built_in">len</span>(candidates)):</span><br><span class="line">            e = candidates[i]</span><br><span class="line">            <span class="keyword">if</span> e &gt; remaining:</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 剪枝：如果当前元素大于剩余目标值，跳过</span></span><br><span class="line">            new_path = path + [e]  <span class="comment"># 将 e 加入组合</span></span><br><span class="line">            new_remaining = remaining - e  <span class="comment"># 更新剩余目标值</span></span><br><span class="line">            stack.push((new_path, new_remaining, i + <span class="number">1</span>))  <span class="comment"># 压入新状态，不允许重复选择</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><blockquote><p><code>stack.push((new_path, new_remaining, i + 1))</code> 的 <code>i + 1</code> 表示从下一个位置开始寻找，即不允许重复；若改为 <code>i</code> 则允许重复。</p></blockquote><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(combinationSum_stack([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">9</span>))  <span class="comment"># 组合总和Q</span></span><br><span class="line"><span class="comment"># [[4, 5], [3, 6], [2, 7], [2, 3, 4], [1, 8], [1, 3, 5], [1, 2, 6]]</span></span><br></pre></td></tr></table></figure><h4 id="6-3-4-N-皇后问题">6.3.4 N 皇后问题</h4><p><strong>问题</strong>：在 NxN 格的国际象棋上摆放 N 个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法？</p><p><strong>思路</strong>：</p><ul><li>每行只能放置一个皇后，逐行处理。</li><li>在放置皇后时，需要确保当前列、正对角线（<code>row - col</code>）和反对角线（<code>row + col</code>）没有被其他皇后占据。</li><li>当发现当前路径无法继续时，回退到上一步，尝试其他可能性。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solveNQueens_stack</span>(<span class="params">N</span>):</span><br><span class="line">    res = []  <span class="comment"># 存储所有有效解</span></span><br><span class="line">    stack = ArrayStack()</span><br><span class="line">    <span class="comment"># 初始状态：空路径，第 0 行，第一个 set 表示列，第二个表示正对角线，第三个表示反对角线</span></span><br><span class="line">    stack.push(([], <span class="number">0</span>, <span class="built_in">set</span>(), <span class="built_in">set</span>(), <span class="built_in">set</span>()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stack.is_empty():</span><br><span class="line">        <span class="comment"># Step 1: 出栈当前状态</span></span><br><span class="line">        path, row, cols, diag1, diag2 = stack.pop()</span><br><span class="line">        <span class="comment"># 如果所有行都处理完毕，说明 path 是一个有效解</span></span><br><span class="line">        <span class="keyword">if</span> row == N:</span><br><span class="line">            <span class="comment"># 转换为棋盘表示</span></span><br><span class="line">            res.append([<span class="string">&#x27; · &#x27;</span> * i + <span class="string">&#x27; Q &#x27;</span> + <span class="string">&#x27; · &#x27;</span> * (N - i - <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> path])</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: 在当前行选择列的位置</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="comment"># 计算当前列所在的正对角线和反对角线</span></span><br><span class="line">            curr_diag1 = row - col  <span class="comment"># 正对角线：行 - 列</span></span><br><span class="line">            curr_diag2 = row + col  <span class="comment"># 反对角线：行 + 列</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果当前列或对角线已经被占用，则跳过</span></span><br><span class="line">            <span class="keyword">if</span> col <span class="keyword">in</span> cols <span class="keyword">or</span> curr_diag1 <span class="keyword">in</span> diag1 <span class="keyword">or</span> curr_diag2 <span class="keyword">in</span> diag2:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的集合</span></span><br><span class="line">            new_cols = <span class="built_in">set</span>(cols)  <span class="comment"># 创建新的列冲突集</span></span><br><span class="line">            new_diag1 = <span class="built_in">set</span>(diag1)  <span class="comment"># 创建新的正对角线冲突集</span></span><br><span class="line">            new_diag2 = <span class="built_in">set</span>(diag2)  <span class="comment"># 创建新的反对角线冲突集</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新</span></span><br><span class="line">            new_cols.add(col)  <span class="comment"># 将当前列加入列冲突集</span></span><br><span class="line">            new_diag1.add(curr_diag1)  <span class="comment"># 将当前正对角线加入冲突集</span></span><br><span class="line">            new_diag2.add(curr_diag2)  <span class="comment"># 将当前反对角线加入冲突集</span></span><br><span class="line">            new_path = path + [col]  <span class="comment"># 将当前列加入路径</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 压入新状态：更新路径、下一行、新的冲突集</span></span><br><span class="line">            stack.push((new_path, row + <span class="number">1</span>, new_cols, new_diag1, new_diag2))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> solveNQueens_stack(<span class="number">4</span>):  <span class="comment"># 4 皇后问题</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Answer:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Answer:</span><br><span class="line"> ·  ·  Q  · </span><br><span class="line"> Q  ·  ·  · </span><br><span class="line"> ·  ·  ·  Q </span><br><span class="line"> ·  Q  ·  · </span><br><span class="line">Answer:</span><br><span class="line"> ·  Q  ·  · </span><br><span class="line"> ·  ·  ·  Q </span><br><span class="line"> Q  ·  ·  · </span><br><span class="line"> ·  ·  Q  · </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍栈数据类型，包括栈的概念、如何用 Python 实现栈（数组、链表）、栈的实际使用（数据逆置、匹配问题、算数计算原理、函数调用等原理）以及回溯法的概念和使用，包括常见案例（全排列、子集问题、求和谜题以及著名的 N 皇后问题）。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (4) R 语言初步：自定义函数、简单模拟与数据清洗</title>
    <link href="https://blog.iskage.online/posts/502a59cb.html"/>
    <id>https://blog.iskage.online/posts/502a59cb.html</id>
    <published>2025-03-13T09:07:00.000Z</published>
    <updated>2025-03-13T09:13:27.637Z</updated>
    
    <content type="html"><![CDATA[<h1>R 语言初步 (3) 自定义函数、简单模拟与数据清洗</h1><p>本章介绍 R 语言的函数定义方法，以及进行统计模拟、数据清洗的方法。<code>function</code> 关键字自定义函数；<code>r*</code> <code>p*</code> <code>d*</code> <code>q*</code> 分别进行各种分布的模拟；<code>sample</code> 函数进行简单随机抽样；数据清洗包括了缺失数据处理、按行排序、选取/删除部分数据、添加变量/特征和合并数据集操作。</p><h2 id="1-自定义函数">1 自定义函数</h2><h3 id="1-1-函数定义">1.1 函数定义</h3><p>定义函数的一般形式：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myfunction <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>a<span class="punctuation">,</span> b<span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line">    <span class="built_in">return</span><span class="punctuation">(</span>object<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>myfunction</code> ：自定义的函数名称</li><li><code>function()</code> ：关键字，告诉 R 语言这是自定义的函数</li><li><code>a, b, c</code> ：为函数的参数，表明函数需要传入的参数</li><li><code>statement</code> ：函数体，编写函数的操作</li><li><code>return(object)</code> ：函数的返回值</li></ul><h3 id="1-2-传参方式">1.2 传参方式</h3><ul><li>方式一：按照参数顺序逐个传入</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myfunction<span class="punctuation">(</span>x1<span class="punctuation">,</span> x2<span class="punctuation">,</span> x3<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>方式二：指定参数</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myfunction<span class="punctuation">(</span>a <span class="operator">=</span> x1<span class="punctuation">,</span> b <span class="operator">=</span> x2<span class="punctuation">,</span> <span class="built_in">c</span> <span class="operator">=</span> x3<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="1-3-示例">1.3 示例</h3><ul><li>函数名：<code>my.data.ana</code></li><li>输入：一个向量 <code>x</code></li><li>任务：计算向量的平均值、最大值、最小值</li><li>输出：一个列表储存的结果</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my.data.ana <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    y <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>mean <span class="operator">=</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">max</span> <span class="operator">=</span> <span class="built_in">max</span><span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">min</span> <span class="operator">=</span> <span class="built_in">min</span><span class="punctuation">(</span>x<span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">    <span class="built_in">return</span><span class="punctuation">(</span>y<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> my.data.ana<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">y</span><br><span class="line"></span><br><span class="line"><span class="comment"># $mean</span></span><br><span class="line"><span class="comment"># [1] 5.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $max</span></span><br><span class="line"><span class="comment"># [1] 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $min</span></span><br><span class="line"><span class="comment"># [1] 1</span></span><br></pre></td></tr></table></figure><h2 id="2-简单模拟">2 简单模拟</h2><h3 id="2-1-有关统计分布的函数">2.1 有关统计分布的函数</h3><p><code>r*</code> ：<code>*</code> 分布的随机数函数</p><p><code>d*</code> ：<code>*</code> 分布的密度函数</p><p><code>p*</code> ：<code>*</code> 分布的分布函数</p><p><code>q*</code> ：<code>*</code> 分布的分位数函数</p><p>例如：</p><ul><li>正态分布的相关函数 <code>rnorm()</code> <code>dnorm()</code> <code>pnorm()</code> <code>qnorm()</code></li><li>Gamma 分布的相关函数 <code>rgamma()</code> <code>dgamma()</code> <code>pgamma()</code> <code>qgamma()</code></li><li>泊松分布相关函数 <code>rpois()</code> <code>dpois()</code> <code>ppois()</code> <code>qpois()</code></li></ul><h4 id="2-1-1-正态分布">2.1.1 正态分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传入分位数点，得到密度函数值</span></span><br><span class="line">dnorm<span class="punctuation">(</span>x<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入分位数点，得到分布函数值/即概率</span></span><br><span class="line">pnorm<span class="punctuation">(</span>q<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入概率值，得到对应的分位数点值</span></span><br><span class="line">qnorm<span class="punctuation">(</span>p<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 n 个随机数</span></span><br><span class="line">rnorm<span class="punctuation">(</span>n<span class="punctuation">,</span> mean <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> sd <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>分位数向量</td></tr><tr><td><code>p</code></td><td>概率值向量</td></tr><tr><td><code>n</code></td><td><code>rnorm(n)</code> 返回随机数的个数</td></tr><tr><td><code>mean</code></td><td>均值向量</td></tr><tr><td><code>sd</code></td><td>标准差向量</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>是否取对数，为 <code>TRUE</code> ，则传入 <code>log(p)</code></td></tr><tr><td><code>lower.tail</code></td><td>为 <code>TRUE</code> ，则概率表达式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>≤</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X \leq x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 否则，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>X</mi><mo>&gt;</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(X &gt; x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><h4 id="2-1-2-Poisson-分布">2.1.2 Poisson 分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算概率密度函数 (PMF) 值</span></span><br><span class="line">dpois<span class="punctuation">(</span>x<span class="punctuation">,</span> lambda<span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累积分布函数 (CDF) 值</span></span><br><span class="line">ppois<span class="punctuation">(</span>q<span class="punctuation">,</span> lambda<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分位数（逆 CDF）</span></span><br><span class="line">qpois<span class="punctuation">(</span>p<span class="punctuation">,</span> lambda<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数</span></span><br><span class="line">rpois<span class="punctuation">(</span>n<span class="punctuation">,</span> lambda<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>非负整数分位数点。若输入非整数，<code>dpois</code> 返回 0；<code>ppois</code> 自动取 <code>floor(q)</code> 计算。</td></tr><tr><td><code>p</code></td><td>概率值向量，范围必须在 [0, 1] 之间。</td></tr><tr><td><code>n</code></td><td>生成的随机数数量。</td></tr><tr><td><code>lambda</code></td><td>非负向量。若为负数，返回 <code>NaN</code>。</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>逻辑值。若为 <code>TRUE</code>，概率以自然对数形式输入/输出。</td></tr><tr><td><code>lower.tail</code></td><td>逻辑值。若为 <code>TRUE</code>（默认），计算 <code>P(X ≤ x)</code> 或 <code>P(X ≤ q)</code>；否则计算 <code>P(X &gt; x)</code> 或 <code>P(X &gt; q)</code>。</td></tr></tbody></table><p><strong>关键细节</strong></p><ol><li><p><strong>离散性处理</strong><br>• <code>dpois(x, lambda)</code> 仅在 <code>x</code> 为整数时返回非零值，否则返回 0。<br>• <code>ppois(q, lambda)</code> 会对非整数 <code>q</code> 向下取整（等效计算 <code>P(X ≤ floor(q))</code>）。</p></li><li><p><strong>分位数函数逻辑</strong><br>• <code>qpois(p, lambda)</code> 返回最小整数 <code>k</code>，使得 <code>P(X ≤ k) ≥ p</code>。<br>• 当 <code>lower.tail = FALSE</code> 时，寻找最小 <code>k</code> 使得 <code>P(X &gt; k) ≤ p</code>（即右尾分位数）。</p></li><li><p><strong>向量化运算</strong><br>所有参数均支持向量化输入，按元素循环计算。例如：</p></li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 分别计算 λ=2 时 x=1，λ=3 时 x=2，λ=4 时 x=3 的概率</span></span><br><span class="line">dpois<span class="punctuation">(</span>x <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> lambda <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">,</span><span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-二项分布">2.1.3 二项分布</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算概率密度函数 (PMF) 值</span></span><br><span class="line">dbinom<span class="punctuation">(</span>x<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> <span class="built_in">log</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算累积分布函数 (CDF) 值</span></span><br><span class="line">pbinom<span class="punctuation">(</span>q<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分位数（逆 CDF）</span></span><br><span class="line">qbinom<span class="punctuation">(</span>p<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">,</span> lower.tail <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> log.p <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成随机数</span></span><br><span class="line">rbinom<span class="punctuation">(</span>n<span class="punctuation">,</span> size<span class="punctuation">,</span> prob<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code> <code>q</code></td><td>整数分位数点。若输入非整数，<code>dbinom</code> 返回 0；<code>pbinom</code> 自动取 <code>floor(q)</code> 计算。</td></tr><tr><td><code>p</code></td><td>概率值向量，范围必须在 [0, 1] 之间。</td></tr><tr><td><code>n</code></td><td>生成的随机数数量。若输入向量（如 <code>n = c(2,3)</code>），实际生成 <code>sum(n)</code> 个随机数。</td></tr><tr><td><code>size</code></td><td>试验次数（非负整数），若为小数会自动截断为整数。</td></tr><tr><td><code>prob</code></td><td>单次试验成功概率，范围 [0, 1]。若输入负数或 &gt;1 返回 <code>NaN</code>。</td></tr><tr><td><code>log</code> <code>log.p</code></td><td>逻辑值。若为 <code>TRUE</code>，概率以自然对数形式输入/输出（例如 <code>log(0.05)</code>）。</td></tr><tr><td><code>lower.tail</code></td><td>逻辑值。若为 <code>TRUE</code>（默认），计算 <code>P(X ≤ x)</code> 或 <code>P(X ≤ q)</code>；否则计算 <code>P(X &gt; x)</code> 或 <code>P(X &gt; q)</code>。</td></tr></tbody></table><h3 id="2-2-随机抽样函数-sample">2.2 随机抽样函数 sample</h3><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span>x<span class="punctuation">,</span> size<span class="punctuation">,</span> replace <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> prob <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>抽样来源。可以是向量或单个整数：若为向量，直接从中抽样；若为整数 <code>n</code> ，等价于从 <code>1:n</code> 抽样</td></tr><tr><td><code>size</code></td><td>抽样数量。必须为非负整数，且当 <code>replace=FALSE</code> 时，<code>size ≤ length(x)</code></td></tr><tr><td><code>replace</code></td><td>是否放回抽样。默认 <code>FALSE</code>（无放回）；<code>TRUE</code> 时为有放回抽样</td></tr><tr><td><code>prob</code></td><td>权重向量。指定每个元素的抽样概率（自动归一化），需与 <code>x</code> 等长。默认等概率抽样</td></tr></tbody></table><hr><p><strong>关键细节</strong></p><ol><li>当 <code>x</code> 为整数时的特殊行为</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span>          <span class="comment"># 等价于从 1:5 中无放回抽3个数（如 2,4,1）</span></span><br><span class="line">sample<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span>       <span class="comment"># 从单元素向量 5 中有放回抽3次（需设置 replace=TRUE）</span></span><br></pre></td></tr></table></figure><ol start="2"><li>权重概率：若 <code>prob</code> 的和不为1，会自动归一化处理</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span><span class="string">&quot;B&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">5</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">,</span> prob<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">3</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># &quot;A&quot;出现概率为 3/(3+1)=75%</span></span><br></pre></td></tr></table></figure><ol start="3"><li>边界条件限制：<code>size</code> 在无放回时一定要比 <code>x</code> 的长度小</li></ol>  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">15</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">TRUE</span><span class="punctuation">)</span>   <span class="comment"># 允许（有放回）</span></span><br><span class="line">sample<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">,</span> size<span class="operator">=</span><span class="number">15</span><span class="punctuation">,</span> replace<span class="operator">=</span><span class="literal">FALSE</span><span class="punctuation">)</span>  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><h3 id="2-3-随机种子-set-seed">2.3 随机种子 set.seed()</h3><p>在电脑上生成随机数字时，生成的数字并不是真正的随机数，它们叫做伪随机数 (pseudo random number)。当从任意分布模拟随机数字时，设置随机数字生成器种子 (seed) 是非常重要的。设置随机种子使得实验结果可复现。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n 指定一个整数</span></span><br><span class="line">set.seed<span class="punctuation">(</span>n<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>当设置随机种子后，随机结果将会相同</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set.seed<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">3</span><span class="punctuation">)</span> <span class="comment"># [1]  0.6328626  0.4042683 -0.1061245</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">4</span><span class="punctuation">)</span> <span class="comment"># [1]  1.5952808  0.3295078 -0.8204684  0.4874291</span></span><br><span class="line"></span><br><span class="line">set.seed<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">3</span><span class="punctuation">)</span> <span class="comment"># [1]  0.6328626  0.4042683 -0.1061245</span></span><br><span class="line">rnorm<span class="punctuation">(</span><span class="number">4</span><span class="punctuation">)</span> <span class="comment"># [1]  1.5952808  0.3295078 -0.8204684  0.4874291</span></span><br></pre></td></tr></table></figure><h2 id="3-数据清洗">3 数据清洗</h2><p>结构化数据：表格形式的数据。每一行代表一个样本/观测，每一列对应一个变量/特征。</p><p><strong>创建示例数据表</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">manager <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">)</span></span><br><span class="line">date0 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;10/24/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/28/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/1/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;10/12/08&quot;</span><span class="punctuation">,</span> <span class="string">&quot;5/1/09&quot;</span><span class="punctuation">)</span></span><br><span class="line">nationality <span class="operator">&lt;-</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;US&quot;</span><span class="punctuation">,</span> <span class="string">&quot;UK&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">)</span></span><br><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">32</span><span class="punctuation">,</span> <span class="number">45</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">39</span><span class="punctuation">,</span> <span class="number">99</span><span class="punctuation">)</span></span><br><span class="line">q1 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q2 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q3 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line">q4 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">q5 <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">leadership <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>manager<span class="punctuation">,</span> date0<span class="punctuation">,</span> nationality<span class="punctuation">,</span> gender<span class="punctuation">,</span> age<span class="punctuation">,</span> q1<span class="punctuation">,</span> q2<span class="punctuation">,</span> q3<span class="punctuation">,</span> q4<span class="punctuation">,</span> q5<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">leadership</span><br><span class="line"><span class="comment">#   manager    date0 nationality gender age q1 q2 q3 q4 q5</span></span><br><span class="line"><span class="comment"># 1       1 10/24/08          US      M  32  5  4  5  5  5</span></span><br><span class="line"><span class="comment"># 2       2 10/28/08          US      F  45  3  5  2  5  5</span></span><br><span class="line"><span class="comment"># 3       3  10/1/08          UK      F  25  3  5  5  5  2</span></span><br><span class="line"><span class="comment"># 4       4 10/12/08          UK      M  39  3  3  4 NA NA</span></span><br><span class="line"><span class="comment"># 5       5   5/1/09          UK      F  99  2  2  1  2  1</span></span><br></pre></td></tr></table></figure><h3 id="3-1-缺失数据">3.1 缺失数据</h3><p><code>is.na()</code> 逐个元素比较是否为空 <code>NA</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741851904974.png" alt=""></p><p>直接删除 <code>na.omit</code> 非替换操作，删除空值的行</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newdata <span class="operator">&lt;-</span> na.omit<span class="punctuation">(</span>leadership<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">newdata</span><br><span class="line"><span class="comment">#   manager    date0 nationality gender age q1 q2 q3 q4 q5</span></span><br><span class="line"><span class="comment"># 1       1 10/24/08          US      M  32  5  4  5  5  5</span></span><br><span class="line"><span class="comment"># 2       2 10/28/08          US      F  45  3  5  2  5  5</span></span><br><span class="line"><span class="comment"># 3       3  10/1/08          UK      F  25  3  5  5  5  2</span></span><br><span class="line"><span class="comment"># 5       5   5/1/09          UK      F  99  2  2  1  2  1</span></span><br></pre></td></tr></table></figure><blockquote><p>或者采用均值填充 <code>mean(leadership$age)</code></p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用中位数代替 q1 列的缺失值</span></span><br><span class="line">leadership<span class="operator">$</span>q1<span class="punctuation">[</span><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="operator">$</span>q1<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> median<span class="punctuation">(</span>leadership<span class="operator">$</span>q1<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值代替 q2 列的缺失值</span></span><br><span class="line">leadership<span class="operator">$</span>q2<span class="punctuation">[</span><span class="built_in">is.na</span><span class="punctuation">(</span>leadership<span class="operator">$</span>q2<span class="punctuation">)</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> mean<span class="punctuation">(</span>leadership<span class="operator">$</span>q2<span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>其中 <code>na.rm = TRUE</code> 表示在计算均值/中位数等统计量时忽略空值。</p><h3 id="3-2-数据按行排序">3.2 数据按行排序</h3><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">函数/方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">对向量排序</td><td style="text-align:left"><code>sort()</code></td><td style="text-align:left">返回排序后的值</td></tr><tr><td style="text-align:left">获取排序索引</td><td style="text-align:left"><code>order()</code></td><td style="text-align:left">返回排序后的索引值，用于按行排序</td></tr><tr><td style="text-align:left">按列升序排序</td><td style="text-align:left"><code>data[order(data$column), ]</code></td><td style="text-align:left">按指定列升序排列数据框</td></tr><tr><td style="text-align:left">降序排序</td><td style="text-align:left"><code>order(x, decreasing = TRUE)</code></td><td style="text-align:left">按指定列降序排列数据框</td></tr><tr><td style="text-align:left">处理缺失值</td><td style="text-align:left"><code>na.last = TRUE/FALSE</code></td><td style="text-align:left">控制缺失值在排序中的位置（默认放在最后）</td></tr></tbody></table><p>例如：按照 <code>age</code> 升序排序</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newdata <span class="operator">&lt;-</span> leadership<span class="punctuation">[</span>order<span class="punctuation">(</span>leadership<span class="operator">$</span>age<span class="punctuation">)</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>好的，用户需要整理关于R语言中选取和删除部分数据的笔记，特别是使用下标运算、列名以及subset()函数的方法。他们已经提供了一些之前的笔记结构，我需要保持一致的风格和格式。</p><p>首先，我需要回忆R语言中数据框的基本操作。下标运算[ , ]的使用是关键，参数可以是正数、负数、逻辑值或空。用户还提到数据框有行名和列名，可以按列名选取列。另外，subset()函数也是一个重要的方法。</p><p>接下来，我需要确定如何组织内容。之前的笔记有参数详解、关键细节、示例和注意事项，我应该沿用这个结构。需要解释不同的下标类型如何影响选取或删除数据，比如正数选择特定行或列，负数排除，逻辑值过滤，空表示全选。还要说明如何使用列名来选取列，以及subset()函数的参数和使用场景。</p><p>需要注意常见的陷阱，比如混合使用正负下标可能导致错误，逻辑值的回收机制可能引发意外结果，subset()函数在处理变量时的环境问题。还要提到drop参数的影响，避免数据框降维为向量。</p><p>然后，准备示例代码。例如，用正数选取行和列，用负数删除，用逻辑表达式过滤行，按列名选取，以及subset()的使用。同时提供输出结果，帮助理解。</p><p>最后，总结不同方法的适用场景，帮助用户根据需求选择合适的方式。确保内容清晰，结构合理，语言简洁，符合用户之前的笔记风格。</p><h3 id="3-3-选取-删除部分数据">3.3 选取/删除部分数据</h3><h4 id="3-3-1-基础方法：下标运算符">3.3.1 基础方法：下标运算符 [ ]</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据框<span class="punctuation">[</span>行下标<span class="punctuation">,</span> 列下标<span class="punctuation">]</span>  <span class="comment"># 行和列下标可为正数、负数、逻辑值或空（保留所有行/列）</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>下标类型</th><th>说明</th></tr></thead><tbody><tr><td>正数</td><td>选取指定位置的行/列（如 <code>1:3</code> 选取前3行或前3列）</td></tr><tr><td>负数</td><td>排除指定位置的行/列（如 <code>-c(2,4)</code> 删除第2和第4行/列）</td></tr><tr><td>逻辑值</td><td>按 TRUE/FALSE 筛选行/列（如 <code>数据框$列名 &gt; 5</code> 筛选满足条件的行）</td></tr><tr><td>空值</td><td>保留所有行或列（如 <code>数据框[, 2:4]</code> 保留所有行，选取第2到4列）</td></tr><tr><td>列名</td><td>通过列名字符串筛选（如 <code>数据框[, c(&quot;列名1&quot;, &quot;列名2&quot;)]</code>）</td></tr></tbody></table><p><strong>示例</strong></p><ul><li>按照数字索引取/删除</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取前3行和前2列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除第2行和第3列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="operator">-</span><span class="number">2</span><span class="punctuation">,</span> <span class="operator">-</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选取所有行，仅保留第2列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span>      <span class="comment"># 结果可能降维为向量</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> drop<span class="operator">=</span><span class="literal">FALSE</span><span class="punctuation">]</span>  <span class="comment"># 保持数据框结构</span></span><br></pre></td></tr></table></figure><ul><li>按逻辑条件筛选行</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 筛选年龄 &gt;30 的行</span></span><br><span class="line">df<span class="punctuation">[</span>df<span class="operator">$</span>age <span class="operator">&gt;</span> <span class="number">30</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选性别为女性且国籍为US的行</span></span><br><span class="line">df<span class="punctuation">[</span>df<span class="operator">$</span>gender <span class="operator">==</span> <span class="string">&quot;F&quot;</span> <span class="operator">&amp;</span> df<span class="operator">$</span>country <span class="operator">==</span> <span class="string">&quot;US&quot;</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li>按列名选取列</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取指定列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除指定列</span></span><br><span class="line">df<span class="punctuation">[</span><span class="punctuation">,</span> <span class="operator">!</span><span class="punctuation">(</span>colnames<span class="punctuation">(</span>df<span class="punctuation">)</span> <span class="operator">%in%</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;date&quot;</span><span class="punctuation">,</span> <span class="string">&quot;q5&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-subset-函数">3.3.2 subset() 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>数据框<span class="punctuation">,</span> subset<span class="operator">=</span>行筛选条件<span class="punctuation">,</span> select<span class="operator">=</span>列筛选条件<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>subset</code></td><td>逻辑表达式，筛选符合条件的行（如 <code>age &gt; 30</code>）</td></tr><tr><td><code>select</code></td><td>指定要保留的列，支持列名或列位置（如 <code>c(&quot;age&quot;, &quot;gender&quot;)</code> 或 <code>2:4</code>）</td></tr></tbody></table><p><strong>示例</strong></p><ul><li>筛选年龄 &gt; 30 且性别为男性的行，保留年龄和性别列</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>df<span class="punctuation">,</span> subset <span class="operator">=</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="operator">&amp;</span> gender <span class="operator">==</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> select <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gender&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>subset()</code> 的 <code>select</code> 参数支持负列名，表示删除/不取对应的列</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset<span class="punctuation">(</span>数据框<span class="punctuation">,</span> select <span class="operator">=</span> <span class="operator">-</span><span class="built_in">c</span><span class="punctuation">(</span>列名<span class="number">1</span><span class="punctuation">,</span> 列名<span class="number">2</span><span class="punctuation">,</span> ...<span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="3-4-添加变量-特征">3.4 添加变量/特征</h3><h4 id="3-4-1-直接赋值法">3.4.1 直接赋值法</h4><p>通过 <code>$</code> 符号直接创建新变量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算 q1 到 q5 的总和 (qsum)</span></span><br><span class="line">leadership<span class="operator">$</span>qsum <span class="operator">&lt;-</span> leadership<span class="operator">$</span>q1 <span class="operator">+</span> leadership<span class="operator">$</span>q2 <span class="operator">+</span> leadership<span class="operator">$</span>q3 <span class="operator">+</span> leadership<span class="operator">$</span>q4 <span class="operator">+</span> leadership<span class="operator">$</span>q5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 qsum 的平均值 (qmean)</span></span><br><span class="line">leadership<span class="operator">$</span>qmean <span class="operator">&lt;-</span> leadership<span class="operator">$</span>qsum <span class="operator">/</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-within-函数">3.4.2 within() 函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leadership <span class="operator">&lt;-</span> within<span class="punctuation">(</span>leadership<span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    qsum <span class="operator">&lt;-</span> q1 <span class="operator">+</span> q2 <span class="operator">+</span> q3 <span class="operator">+</span> q4 <span class="operator">+</span> q5 <span class="comment"># 计算总和</span></span><br><span class="line">    qmean <span class="operator">&lt;-</span> qsum <span class="operator">/</span> <span class="number">5</span> <span class="comment"># 计算平均值</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-合并数据集">3.5 合并数据集</h3><h4 id="3-5-1-基础合并函数-cbind-rbind">3.5.1 基础合并函数 cbind() rbind()</h4><p><code>cbind()</code>：按列合并</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cbind<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df1 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>ID <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">df2 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>Age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">20</span><span class="punctuation">,</span> <span class="number">25</span><span class="punctuation">,</span> <span class="number">30</span><span class="punctuation">)</span><span class="punctuation">,</span> Score <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">85</span><span class="punctuation">,</span> <span class="number">90</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">combined_col <span class="operator">&lt;-</span> cbind<span class="punctuation">(</span>df1<span class="punctuation">,</span> df2<span class="punctuation">)</span>  <span class="comment"># 合并后列数为 df1 列数 + df2 列数</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>ID</th><th>Name</th><th>Age</th><th>Score</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>20</td><td>85</td></tr><tr><td>2</td><td>B</td><td>25</td><td>90</td></tr><tr><td>3</td><td>C</td><td>30</td><td>88</td></tr></tbody></table><blockquote><p>若行数不同，会报错；列名重复时自动添加后缀（如 <code>Score</code> 和 <code>Score.1</code>）</p></blockquote><p><code>rbind()</code>：按行合并</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbind<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df3 <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>ID <span class="operator">=</span> <span class="number">4</span><span class="operator">:</span><span class="number">5</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;D&quot;</span><span class="punctuation">,</span> <span class="string">&quot;E&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> Age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">22</span><span class="punctuation">,</span> <span class="number">28</span><span class="punctuation">)</span><span class="punctuation">,</span> Score <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">92</span><span class="punctuation">,</span> <span class="number">80</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">combined_row <span class="operator">&lt;-</span> rbind<span class="punctuation">(</span>combined_col<span class="punctuation">,</span> df3<span class="punctuation">)</span>  <span class="comment"># 合并后行数为原两数据框行数之和</span></span><br></pre></td></tr></table></figure><p><strong>结果</strong>：<br>| ID   | Name | Age  | Score |<br>| ---- | ---- | ---- | ----- |<br>| 1    | A    | 20   | 85    |<br>| 2    | B    | 25   | 90    |<br>| 3    | C    | 30   | 88    |<br>| 4    | D    | 22   | 92    |<br>| 5    | E    | 28   | 80    |</p></li></ul><blockquote><p>若列名不一致，会报错</p></blockquote><h4 id="3-5-2-高级合并函数-merge">3.5.2 高级合并函数 merge()</h4><p>根据共同列（键）合并两个数据框。</p><ul><li><p>语法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merge<span class="punctuation">(</span>数据框<span class="number">1</span><span class="punctuation">,</span> 数据框<span class="number">2</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;列名&quot;</span><span class="punctuation">,</span> <span class="built_in">all</span> <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li><li><p>核心参数</p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>by</code></td><td>指定合并的列名（如 <code>by = &quot;ID&quot;</code>），若未指定则自动匹配同名列。</td></tr><tr><td><code>all.x</code></td><td>是否保留左表所有行（左外连接），默认 <code>FALSE</code>。</td></tr><tr><td><code>all.y</code></td><td>是否保留右表所有行（右外连接），默认 <code>FALSE</code>。</td></tr><tr><td><code>all</code></td><td><code>all = TRUE</code> 表示全外连接（保留所有行）。</td></tr></tbody></table><blockquote><p>左/右/外连接：按照某列合并时，可能会存在其他列个数不匹配。采用左外连接，则保留左表所有行，右表不足则复制，填入空值；采用右外连接，则保留右表所有行，左表不足则复制，填入空值；采用全连接，则保留左右表所有行，不足则复制，填入空值。</p></blockquote><ul><li><p>示例</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">orders <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>OrderID <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">101</span><span class="punctuation">,</span> <span class="number">102</span><span class="punctuation">,</span> <span class="number">103</span><span class="punctuation">)</span><span class="punctuation">,</span> CustomerID <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">customers <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>CustomerID <span class="operator">=</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> Name <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;C&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内连接（默认）取交集，[1，2，4] 和 [1, 2, 3] 只有 [1, 2] 相交</span></span><br><span class="line">inner_join <span class="operator">&lt;-</span> merge<span class="punctuation">(</span>orders<span class="punctuation">,</span> customers<span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;CustomerID&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>内连接结果</p><table><thead><tr><th>CustomerID</th><th>OrderID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>A</td></tr><tr><td>2</td><td>102</td><td>B</td></tr></tbody></table><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左外连接，左表的 [1, 2, 4] 都保留，则多出来的无法匹配的留空</span></span><br><span class="line">left_join <span class="operator">&lt;-</span> merge<span class="punctuation">(</span>orders<span class="punctuation">,</span> customers<span class="punctuation">,</span> by <span class="operator">=</span> <span class="string">&quot;CustomerID&quot;</span><span class="punctuation">,</span> all.x <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>左外连接结果</p><table><thead><tr><th>CustomerID</th><th>OrderID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>101</td><td>A</td></tr><tr><td>2</td><td>102</td><td>B</td></tr><tr><td>4</td><td>103</td><td>NA</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">本章介绍 R 语言的函数定义方法，以及进行统计模拟、数据清洗的方法。`function` 关键字自定义函数；`r*` `p*` `d*` `q*` 分别进行各种分布的模拟；`sample` 函数进行简单随机抽样；数据清洗包括了缺失数据处理、按行排序、选取/删除部分数据、添加变量/特征和合并数据集操作。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>链表 (2) 含有位置信息的链表、链表的插入排序和 More-To-Front 启发式算法</title>
    <link href="https://blog.iskage.online/posts/416d50d7.html"/>
    <id>https://blog.iskage.online/posts/416d50d7.html</id>
    <published>2025-03-12T12:43:00.000Z</published>
    <updated>2025-04-06T13:33:36.953Z</updated>
    
    <content type="html"><![CDATA[<h1>链表 (2) 含有位置信息的链表、链表的插入排序和 More-To-Front 启发式算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>在单向链表、循环链表和双向链表的基础上，引入位置信息，定义基于链表的位置列表数据类型，并基于链表实现了插入排序。</p><p>对于新的位置列表类，本质上利用链表的方法串联了一个复杂的类 <code>Position</code> ，而这个类中包含了链表的节点（<code>_Node</code>）以及这个位置所属的位置列表信息。</p><p>除此之外，介绍了案例：访问频率列表，构建了一个网页收藏夹列表类，存储网页信息和访问次数。并使用 More-To-Front 启发式算法提高查询访问量最高的前 k 个网页的效率。</p><h2 id="1-位置列表的抽象数据类型">1 位置列表的抽象数据类型</h2><p>与内存分布连续的数组相比，链表只要给定特定的节点，便可完成对节点的插入和删除（讨论的是双向链表），正如<a href="https://zhuanlan.zhihu.com/p/29508680467">上一章</a>（<a href="https://blog.iskage.online/posts/9241942.html">博客链接</a>）定义的 <code>_DoublyLinkedBase</code> 类给出的 <code>_insert_between()</code> 和 <code>_delete_node()</code> 方法。</p><p>但是，数组可以在常数时间，根据整数索引，完成索引操作。对于链表而言，却只能一步一步的遍历，直到找到目标节点，这是非常数时间操作。</p><h3 id="1-1-位置信息的抽象类">1.1 位置信息的抽象类</h3><p>为了方便外部用户调用链表类时，我们可以在继承 <code>_DoublyLinkedBase</code> 类后，增加内嵌的<strong>位置类</strong> <code>Position</code> ，而这就是<strong>含位置信息的列表抽象类</strong>。</p><p>这个列表抽象类 <code>PositionalList</code> 应该满足如下的操作例子：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741769316869.png" alt="位置列表类的操作示意"></p><blockquote><p><code>p</code> 和 <code>q</code> 是实例化后的位置类 <code>Position</code> ，存储了对应节点的位置信息。</p></blockquote><h3 id="1-2-双向链表的实现">1.2 双向链表的实现</h3><p>使用双向链表完整实现位置列表类 <code>PositionalList</code> 的方法。相关解释见后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PositionalList</span>(<span class="title class_ inherited__">_DoublyLinkedBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;利用双向链表实现位置列表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 内嵌的位置类 --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Position</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;抽象的位置类，存储节点的位置信息&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, container, node</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;初始化位置信息&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># _container 存储列表类 PositionalList 表明当前位置类属于这个列表类</span></span><br><span class="line">            <span class="variable language_">self</span>._container = container</span><br><span class="line">            <span class="variable language_">self</span>._node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">element</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;返回当前位置的节点元素值&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._node._element</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;检查二者是否具有相同的位置信息 重载运算符 ==&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> <span class="built_in">type</span>(<span class="variable language_">self</span>) <span class="keyword">and</span> other._node <span class="keyword">is</span> <span class="variable language_">self</span>._node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;与上面相反 重载运算符 !=&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> <span class="variable language_">self</span> == other</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 检查位置类、为节点实例化位置类 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_validate</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否是合法的 Position 类，返回位置类存储的节点类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(p, <span class="variable language_">self</span>.Position):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;p must be proper Position&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._container <span class="keyword">is</span> <span class="keyword">not</span> <span class="variable language_">self</span>:</span><br><span class="line">            <span class="comment"># 检查当前位置类 p 是否属于当前列表，以免误操作了别的列表</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p does not belong to this container&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> p._node._<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;p is no longer valid&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> p._node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_position</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;对每个节点，实例化它的位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="variable language_">self</span>._header <span class="keyword">or</span> node <span class="keyword">is</span> <span class="variable language_">self</span>._trailer:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 创建属于当前列表的位置类</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.Position(<span class="variable language_">self</span>, node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 查看位置列表类的方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第一个节点的位置类，注意不含哨兵节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回最后一个节点的位置类，注意不含哨兵节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(<span class="variable language_">self</span>._trailer._prev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">before</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回位置类 p 前面的位置类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)  <span class="comment"># 检查是否是合法的位置类</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._prev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">after</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回位置类 p 后面的位置类&quot;&quot;&quot;</span></span><br><span class="line">        node = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器，逐个生成返回列表的元素值&quot;&quot;&quot;</span></span><br><span class="line">        cursor = <span class="variable language_">self</span>.first()</span><br><span class="line">        <span class="keyword">while</span> cursor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> cursor.element()</span><br><span class="line">            cursor = <span class="variable language_">self</span>.after(cursor)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 改变位置列表类的方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_between</span>(<span class="params">self, e, predecessor, successor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用父类方法，但返回位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 覆写父类插入方法</span></span><br><span class="line">        node = <span class="built_in">super</span>()._insert_between(e, predecessor, successor)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._make_position(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_first</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在头部插入，返回位置类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._header, <span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_last</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._trailer._prev, <span class="variable language_">self</span>._trailer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_before</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在位置类 p 前插入&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, original._prev, original)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_after</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, original, original._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除位置类 p 返回 p 上的值&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(original)  <span class="comment"># 父类方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">replace</span>(<span class="params">self, p, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;替换位置 p 的值为 e，返回 p 位置之前的值&quot;&quot;&quot;</span></span><br><span class="line">        original = <span class="variable language_">self</span>._validate(p)</span><br><span class="line">        old_value = original._element</span><br><span class="line">        original._element = e</span><br><span class="line">        <span class="keyword">return</span> old_value</span><br></pre></td></tr></table></figure><h4 id="1-2-1-定义-Position-类">1.2.1 定义 Position 类</h4><p>定义位置类 <code>Position</code> 用来方便的得到每个节点的位置。因为只要位置信息已知，链表的插入和删除操作的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p><p>同时 <code>Position._container</code> 属性也为每个节点创建位置类时指定了所属的列表类。以免对别的列表类的位置进行误操作。</p><p>而对于 <code>Position._node</code> 则存储了链表的节点类 <code>_Node</code> ，节点类包含了真正的信息，例如元素值 <code>_element</code> 和前后指针 <code>_prev</code> <code>_next</code> 。</p><h4 id="1-2-2-validate-和-make-position-方法">1.2.2 _validate 和 _make_position 方法</h4><p>首先 <code>_valudate()</code> 方法调用，意在检查传入的是否为位置类 <code>Position</code> ，以及检查是否为本列表 <code>PositionalList</code> 类的位置类。最后返回当前位置的节点类。</p><p>而 <code>_make_position()</code> 方法则打包处理了将节点转换为位置类的过程。传入链表节点，得到含义位置信息的新类（位置类）。同时对于哨兵节点返回 None。</p><h4 id="1-2-3-查看列表-链表信息">1.2.3 查看列表/链表信息</h4><p><code>first(), last()</code> 方法可以得到列表第一个和最后位置的信息，例如 <code>L.first().element()</code> 可以得到第一个位置的值。而 <code>after(), before()</code> 方法可以根据传入的位置类，查看前后位置的信息，返回的仍然为位置类。</p><p><code>__iter__()</code> 方法配合父类的 <code>__len__()</code> 方法一起产生了迭代器。 <code>yield cursor.element()</code> 不断返回列表各个位置存储的值。</p><blockquote><p><code>return</code> 和 <code>yield</code> 的区别：<code>return</code> 是当函数/方法到达时返回结果，同时推出程序；但 <code>yield</code> 在返回结果后会暂停程序，下次调用时再次返回结果，直到函数/方法里的迭代结束。</p></blockquote><h4 id="1-2-4-操作列表-链表信息">1.2.4 操作列表/链表信息</h4><p><code>_insert_between()</code> 方法为非公有方法，父类方法返回的是节点类，这里覆写返回位置类。而后的 <code>add_first(), add_last(), add_before(), add_after()</code> 方法均是在新的插入方法中，传入位置信息，然后进行操作。</p><p><code>_delete_node()</code> 方法为非公有类，父类方法对节点进行操作。这里不做修改，只是定义新的公有方法 <code>delete()</code> 直接根据位置类进行删除。</p><h2 id="2-位置列表的排序">2 位置列表的排序</h2><h3 id="2-1-基于链表的插入排序">2.1 基于链表的插入排序</h3><p>在之前定义的类 <code>PositionalList</code> 之后，我们定义一个排序函数 <code>insertion_sort()</code> ，采用插入排序，实现对位置列表的排序操作。（从小到大）</p><p><strong>原理</strong> 定义一个指针 <code>marker</code> 遍历链表。当指针 <code>marker</code> 对应节点的值小于它后面的指针 <code>pivot</code> 对应节点的值，则 <code>marker</code> 后移即可；否则，让一个新的指针 <code>walk</code> 从现在的位置不断向前移动，寻找最远的一个值比 <code>pivot</code> 指针对应节点的值大的位置，将 <code>pivot</code> 插入到此时 <code>walk</code> 前面。（记录 <code>pivot</code> 的值，然后删除它，将这个值插入到 <code>walk</code> 前）。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741773030496.png" alt="链表插入排序示意" style="zoom:50%;" /><h3 id="2-2-代码实现">2.2 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">L: PositionalList</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对链表插入排序</span></span><br><span class="line"><span class="string">    :param L: 位置列表类 PositionalList</span></span><br><span class="line"><span class="string">    :return: no return</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(L) &gt; <span class="number">1</span>:</span><br><span class="line">        marker = L.first()</span><br><span class="line">        <span class="keyword">while</span> marker != L.last():  <span class="comment"># 遍历链表</span></span><br><span class="line">            pivot = L.after(marker)</span><br><span class="line">            value = pivot.element()  <span class="comment"># 保存后一个节点的值</span></span><br><span class="line">            <span class="keyword">if</span> value &gt; marker.element():  <span class="comment"># 满足排序要求（从小到大）</span></span><br><span class="line">                marker = pivot</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                walk = marker</span><br><span class="line">                <span class="comment"># 当没到第一个元素 并且 walk 前一个元素比 value 大，walk 不断向前找</span></span><br><span class="line">                <span class="keyword">while</span> walk != L.first() <span class="keyword">and</span> L.before(walk).element() &gt; value:</span><br><span class="line">                    walk = L.before(walk)</span><br><span class="line"></span><br><span class="line">                L.delete(pivot)</span><br><span class="line">                L.add_before(walk, value)  <span class="comment"># 插入到此时 walk 前</span></span><br></pre></td></tr></table></figure><h2 id="3-More-To-Front-启发式算法">3 More-To-Front 启发式算法</h2><h3 id="3-1-案例：访问频率列表">3.1 案例：访问频率列表</h3><p>设计一个对象类，用来记录每个节点被访问的次数。在现实中，这样的对象十分常见，例如网页的点击量列表：存储了各个网页对象和其被访问的次数，同时还能得到排名靠前的网页对象。所以，在这一节中，定义收藏夹列表类 <code>FavoritesList</code> 使其满足功能：</p><ul><li><code>access(e)</code> ：访问元素 <code>e</code> ，增加访问次数。如果 <code>e</code> 不在列表里，则添加到列表里。</li><li><code>remove(e)</code> ：移除元素 <code>e</code> ，注意安全移除，需要先判断是否存在。</li><li><code>top(k)</code> ：以迭代器的方式，返回访问量最多的 <code>k</code> 个元素。</li></ul><h3 id="3-2-方案一：有序列表">3.2 方案一：有序列表</h3><p>为了快速实现 <code>top(k)</code> 方法，可以在收藏夹列表类的更新中不断排序，使得 <code>FavoritesList</code> 的元素一直满足访问量从大到小的顺序。</p><p><strong>Python 实现</strong> 收藏夹列表类直接使用之前定义的 <code>PositionalList</code> 存储网页对象 <code>_Item</code> （存储了元素 <code>_value</code> 和次数 <code>_count</code>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> PositionalList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FavoritesList</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;有序列表方式实现&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 内嵌的 _Item 类 --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Item</span>:</span><br><span class="line">        __slots__ = <span class="string">&#x27;_value&#x27;</span>, <span class="string">&#x27;_count&#x27;</span>  <span class="comment"># 限制实例属性，优化内存使用</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, e</span>):</span><br><span class="line">            <span class="variable language_">self</span>._value = e  <span class="comment"># 用户提供的元素</span></span><br><span class="line">            <span class="variable language_">self</span>._count = <span class="number">0</span>  <span class="comment"># 访问计数，初始为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 非公有方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_position</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回元素 e 的位置类 Position&quot;&quot;&quot;</span></span><br><span class="line">        walk = <span class="variable language_">self</span>._data.first()  <span class="comment"># 在初始化后，self._data 是 PositionalList 类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 寻找元素 e 的位置，返回位置类 Position</span></span><br><span class="line">        <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> walk.element()._value != e:</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.after(walk)  <span class="comment"># 移动到下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> walk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_move_up</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;插入排序思想，按照次数 _count 产生有序列表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 与之前插入排序 insertion_sort 思路基本相同</span></span><br><span class="line">        <span class="comment"># 甚至更为简单，比较对象只用最后新加入的元素</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="variable language_">self</span>._data.first():</span><br><span class="line">            cnt = p.element()._count</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.before(p)</span><br><span class="line">            <span class="keyword">if</span> cnt &gt; walk.element()._count:</span><br><span class="line">                <span class="keyword">while</span> (walk != <span class="variable language_">self</span>._data.first() <span class="keyword">and</span></span><br><span class="line">                       cnt &gt; <span class="variable language_">self</span>._data.before(walk).element()._count):</span><br><span class="line">                    walk = <span class="variable language_">self</span>._data.before(walk)</span><br><span class="line">                <span class="variable language_">self</span>._data.add_before(walk, <span class="variable language_">self</span>._data.delete(p))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 公有方法 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化收藏夹列表类，直接实例化一个 PositionalList 类&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._data = PositionalList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data)  <span class="comment"># PositionalList 已经定义了 __len__()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._data) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">access</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;访问元素 e 增加次数/添加元素&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_position(e)</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">is</span> <span class="literal">None</span>:  <span class="comment"># 不存在则插入</span></span><br><span class="line">            <span class="comment"># 向列表增加对象 _Item</span></span><br><span class="line">            <span class="comment"># 可以理解为 PositionalList 的链表的节点 _Node 的 _element 存储着 _Item 对象的地址</span></span><br><span class="line">            p = <span class="variable language_">self</span>._data.add_last(<span class="variable language_">self</span>._Item(e))</span><br><span class="line">        p.element()._count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._move_up(p)  <span class="comment"># 排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从收藏夹列表类中移除元素 e 对应的 _Item 对象&quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="variable language_">self</span>._find_position(e)</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>._data.delete(p)  <span class="comment"># 这里的 _Item 对象相当于链表的 element 值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器的方式产生前 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">1</span> &lt;= k &lt;= <span class="built_in">len</span>(<span class="variable language_">self</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Illegal value of k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        walk = <span class="variable language_">self</span>._data.first()</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 迭代后移</span></span><br><span class="line">            item = walk.element()</span><br><span class="line">            <span class="keyword">yield</span> item._value</span><br><span class="line">            walk = <span class="variable language_">self</span>._data.after(walk)</span><br></pre></td></tr></table></figure><blockquote><p>注意：这里链表节点的存储的值为 <code>_Item</code> 对象的地址</p></blockquote><h3 id="3-3-方案二：More-To-Front-启发式算法">3.3 方案二：More-To-Front 启发式算法</h3><p><strong>Move-to-Front 启发式算法</strong> ：每访问一个元素，都会把该元素移动到列表的最前面。这么做是希望这个元素在近期可以被再次/连续访问（这是符合常识的，被多次点击的网页一般都会在近期被再次访问）。</p><h4 id="3-3-1-分析时间复杂度">3.3.1 分析时间复杂度</h4><p>假设对于一个空的收藏夹列表，我们访问 n 个网页 <code>1, 2, 3, ..., n</code> 分别连续 n 次。因为按照访问次数排序，则对于第一个网页，每次访问需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，对于第二个网页每次都要和前一个网页比较（并且在访问 n 次之前都不会排在前一个元素前面），每次访问需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span> ，以此类推，每个访问 n 次：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>3</mn><mi>n</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>⋅</mo><mi>n</mi><mo>=</mo><mi>n</mi><mo>⋅</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n + 2n + 3n + \cdots + n \cdot n = n \cdot \frac{n(n+1)}{2} \sim O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，这是极其低效的。</p><p>但是采用 <strong>More-To-Front</strong> 算法，即按照访问时间排序，最后被访问的网页排在第一。如此对于任何一个网页，连续访问 n 次都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ，因为访问第一次后，这个网页就位于第一个位置，链表查询第一个位置只需要 1 次操作。于是，每个访问 n 次的总时间：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi><mo>⋅</mo><mn>1</mn><mo>=</mo><mi>n</mi><mo>⋅</mo><mi>n</mi><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n \cdot 1 + n \cdot 1 + n \cdot 1 + \cdots + n \cdot 1 = n \cdot n \sim O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，相对高效。</p><h4 id="3-3-2-代码实现-MTF-算法">3.3.2 代码实现 MTF 算法</h4><p>只需覆写 <code>_move_up()</code> 和 <code>top()</code> 方法即可。</p><ul><li>因为 <code>_move_up()</code> 方法只在访问 <code>access()</code> 方法调用时使用，所以每次使用 <code>_move_up()</code> 均代表该元素最近被访问，所以直接放在列表最前即可</li><li>而相比有序列表，查找前 k 个网页的 <code>top()</code> 方法就相对耗时，对于查找 k 个最大，没查找一个就要遍历全部，所以复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(kn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">kn</span><span class="mclose">)</span></span></span></span> ，不过利用以后要学习的其他高效方法，复杂度能降低到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + k\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。这也说明 MTF 启发式算法在处理这个问题时相对更加高效。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FavoritesListMTF</span>(<span class="title class_ inherited__">FavoritesList</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;利用 More-To-Front 启发式算法实现收藏夹列表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 只需要重载/覆写 _move_up() 和 top() 方法即可 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_move_up</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;每次调用意味着被访问，被访问就移到最前&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="variable language_">self</span>._data.first():</span><br><span class="line">            <span class="variable language_">self</span>._data.add_first(<span class="variable language_">self</span>._data.delete(p))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;因为列表无序，需要找到最大的前 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">1</span> &lt;= k &lt;= <span class="built_in">len</span>(<span class="variable language_">self</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Illegal value of k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 临时复制一份原列表</span></span><br><span class="line">        temp = PositionalList()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>._data:</span><br><span class="line">            temp.add_last(item)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="comment"># 遍历一边找到最大的</span></span><br><span class="line">            highPos = temp.first()</span><br><span class="line">            walk = temp.after(highPos)</span><br><span class="line">            <span class="keyword">while</span> walk <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> walk.element()._count &gt;= highPos.element()._count:</span><br><span class="line">                    highPos = walk</span><br><span class="line">                walk = temp.after(walk)</span><br><span class="line">            <span class="keyword">yield</span> highPos.element()._value</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除最大的之后再遍历</span></span><br><span class="line">            temp.delete(highPos)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在单向链表、循环链表和双向链表的基础上，引入位置信息，定义基于链表的位置列表数据类型，并基于链表实现了插入排序。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>链表 (1) 单向链表、循环链表与双向链表 Linked List</title>
    <link href="https://blog.iskage.online/posts/9241942.html"/>
    <id>https://blog.iskage.online/posts/9241942.html</id>
    <published>2025-03-11T09:43:00.000Z</published>
    <updated>2025-04-06T13:33:40.227Z</updated>
    
    <content type="html"><![CDATA[<h1>链表 (1) 单向链表、循环链表与双向链表</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>数组因为其紧凑的内存空间分配，使得其在索引时非常高效，但是却浪费了许多空间，它存储了远大于实际实例所需的空间。相对应的，<strong>链表</strong>数据结构依赖于分布式表达方法，采用节点的方式，不连续的存放数据。</p><p>本周讲解的链表实现了栈、队列、双端队列三种数据结构。它们的特点就是：可以在头部或者尾部进行插入或删除操作，无法在任意位置进行耗时为常数的操作。</p><h2 id="1-单向链表">1 单向链表</h2><h3 id="1-1-单向链表概念">1.1 单向链表概念</h3><p>单向链表是由多个节点共同构成的一个线性序列，从头指针开始，每个节点存储：元素值和下一个节点的指针。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741601117586.png" alt="每一个节点的示意图" style="zoom:50%;" /><ul><li>单向链表的第一个节点为头节点，最后一个节点为尾节点。</li><li>头指针 <code>head</code> 指向头节点，尾指针 <code>tail</code> 指向尾节点，且尾节点指向下一节点的指针为空指针。</li><li>从头指针开始，通过每个节点的next指针可以到达下一个节点，直至到达尾指针，完成对链表的遍历。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741601218479.png" alt="一个单向链表的示意"></p><h3 id="1-2-在单向链表头部插入元素">1.2 在单向链表头部插入元素</h3><p>链表由一个一个的节点组成，所以不需要预先分配空间，十分灵活。但是对链表的操作要十分谨慎，必须保留相关的指针。例如：对单向链表而言，丢失一个节点的信息，该节点之后的所有信息都会丢失。</p><p>以在单向链表头部插入元素为例：先建立新的节点，新节点的 <code>next</code> 指针指向原链表的头节点，头指针指向最新的节点，链表长度加一。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Algorithm add_first(L, e):</span><br><span class="line">newest = Node(e)           <span class="comment"># 1. 建立新的节点</span></span><br><span class="line">newest.<span class="built_in">next</span> = L.head    <span class="comment"># 2. 新节点的 `next` 指针指向原链表的头节点</span></span><br><span class="line">L.head = newest   <span class="comment"># 3. 头指针指向最新的节点</span></span><br><span class="line">L.size = L.size + <span class="number">1</span>   <span class="comment"># 4. 链表长度加一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741611806111.png" alt="在链表头部插入元素" style="zoom:100%;" /><h3 id="1-3-在单向链表尾部插入元素">1.3 在单向链表尾部插入元素</h3><p>当保存了尾指针时，可以容易的在尾部插入元素：首先创建一个新节点，将新节点 <code>next</code> 指针设为空，然后设置原链表最后一个节点的 <code>next</code> 指针指向新节点，最后设置尾指针指向新节点，链表长度加一。</p><blockquote><p>一定要先将原链表最后一个节点的 <code>next</code> 指针指向新节点，再设置尾指针指向新节点。否则会丢失原链表的信息！！！</p></blockquote><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Algorithm add_last(L, e):</span><br><span class="line">newest = Node(e)           <span class="comment"># 1. 创建一个新节点</span></span><br><span class="line">newest.<span class="built_in">next</span> = <span class="literal">None</span><span class="comment"># 2. 将新节点 `next` 指针设为空</span></span><br><span class="line">L.tail.<span class="built_in">next</span> = newest<span class="comment"># 3. 设置原链表最后一个节点的 `next` 指针指向新节点</span></span><br><span class="line">L.tail = newest<span class="comment"># 4. 设置尾指针指向新节点</span></span><br><span class="line">L.size = L.size + <span class="number">1</span><span class="comment"># 5. 链表长度加一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741612913677.png" alt="在单向链表尾部插入元素" style="zoom:100%;" /><h3 id="1-4-从单向链表头部删除元素">1.4 从单向链表头部删除元素</h3><p>与在单向链表的头部插入元素相反，从单向链表头部删除元素：将头指针直接指向头节点的下一个节点，然后链表长度减一，这样运来的头指针信息丢失，空间被释放。</p><blockquote><p>最后一步的空间释放，在 Python 中无需手动进行，Python 采用<strong>引用计数</strong>管理，当对象的引用计数归零时（即没有变量名保存这个对象的地址时），Python 会自动释放空间。</p><p>但对于其他语言，例如 C 语言，链表的删除需要手动释放内存。</p></blockquote><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Algorithm remove_first(L):</span><br><span class="line"><span class="keyword">if</span> L.head <span class="keyword">is</span> <span class="literal">None</span> then</span><br><span class="line"><span class="comment"># 链表本身为空</span></span><br><span class="line"></span><br><span class="line">L.head = L.head.<span class="built_in">next</span><span class="comment"># 1. 头指针直接指向头节点的下一个节点</span></span><br><span class="line">L.size = L.size - <span class="number">1</span><span class="comment"># 2. 链表长度减一</span></span><br></pre></td></tr></table></figure><ul><li>图示</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741613592560.png" alt="从单向链表头部删除元素"></p><h3 id="1-5-从单向链表尾部删除元素？">1.5 从单向链表尾部删除元素？</h3><p>即使保留了尾指针，也无法在常数 <code>O(1)</code> 时间内删除尾节点。因为根据单向链表的组成原理，删除尾节点，必须知道倒数第二个节点的信息。但想得到倒数第二节点的信息，必须要遍历整个链表，复杂度为 <code>O(n)</code> ，这是很低效的，在后面的双向链表里可以快速实现。</p><h3 id="1-6-单向链表实现栈">1.6 单向链表实现栈</h3><p><strong>栈</strong>是由一系列对象组成的一个集合，这些对象的插入和删除操作遵循后进先出（LIFO）的原则。用户可以在任何时刻向栈中插入一个对象，但只能取得或者删除最后一个插人的对象（即所谓的“栈顶”）。</p><p>因为栈满足后进先出的原则，如果我们假定栈顶是头节点，则不需要尾指针也能实现栈的功能。</p><p>首先实现各个节点的定义 <code>class _Node</code> 表示这是非公有的。<code>_Node</code> 嵌套在最终的链表栈类中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现栈&quot;&quot;&quot;</span></span><br><span class="line">    __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>._element = element</span><br><span class="line">        <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br></pre></td></tr></table></figure><blockquote><p>为了提高内存的利用率，定义<code>__slots__</code> 。指定一个节点只有两个实例变量：<code>_element</code> 和 <code>_next</code>（元素引用和指向下一个节点的引用）。</p></blockquote><p>下面是完整的链表栈类的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现栈&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现栈&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现栈 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span>  <span class="comment"># 头指针，指向节点，初始化为空</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;栈元素个数 len(obj) 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向栈顶部增加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 新建节点，指向旧的 head 新的 head 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._Node(e, <span class="variable language_">self</span>._head)</span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回栈顶值，但不改变链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回栈顶元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element</span><br><span class="line">        <span class="comment"># 删除头部节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>Empty</code> 类可以定义为</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Raised when a value is an empty list.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>对于使用链表方式实现的栈，插入和删除元素都是常数时间完成的，这是相对于数组而言更高效的性质：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741669388492.png" alt="单向链表实现栈的时间复杂度"></p><h3 id="1-7-单向链表实现队列">1.7 单向链表实现队列</h3><p><strong>队列</strong>与栈类似，由一系列对象组成的集合，这些对象的插入和删除遵循先进先出（First in First out, FIFO）的原则。也就是说，元素在尾部插入，但是只有处在队列最前面的元素才能被删除。</p><p>因为队列的操作需要对头和尾操作，所以需要 <code>head</code> 头指针和 <code>tail</code> 尾指针。将头节点作为队列的头部，尾指针作为尾部，这样就满足可以在头部删除元素，在尾部插入元素。（因为对单向链表而言，尾部删除元素是复杂的）。</p><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单向链表实现队列，先进先出&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回队列长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否为空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列第一个节点和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ans = <span class="variable language_">self</span>._head._element  <span class="comment"># 获取第一个元素值</span></span><br><span class="line">        <span class="comment"># 头指针指向下一个节点</span></span><br><span class="line">        <span class="variable language_">self</span>._head = <span class="variable language_">self</span>._head._<span class="built_in">next</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果节点清空，则设置尾指针为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="variable language_">self</span>._head = newest  <span class="comment"># 如果为空，则新节点为头节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 否则尾节点的 next 指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用单向链表实现队列的时间复杂度也是常数。</p><h2 id="2-循环链表">2 循环链表</h2><h3 id="2-1-循环链表概念">2.1 循环链表概念</h3><p>在链表中，我们可以使链表的尾节点的 <code>next</code> 指针指向链表的头部，由此来获得一个<strong>循环链表</strong>。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741673718987.png" alt="循环链表图示"></p><p>在循环链表中，头指针和尾指针并不常用。相反，从任意一个节点都能进入这个循环链表。例如：使用 <code>current</code> 指针指向一个节点，则使用 <code>current.next</code> 理论上可以取到任意一个节点。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741673829874.png" alt="current 指针取循环链表节点"></p><h3 id="2-2-轮转调度">2.2 轮转调度</h3><p>轮转调度程序：以循环的方式迭代地遍历一个元素的集合，并通过执行一个给定的动作为集合中的每个元素进行“服务”。</p><p>例如：在队列 <code>Q</code> 反复进行下面的步骤，即可轮转调度为每个元素都进行“服务”。</p><ol><li><code>e = Q.dequeue()</code> ：从队列取出元素 e （下一个元素出队）</li><li><code>f(e)</code> ：为元素 e 提供服务、进行操作（“服务”下一个元素）</li><li><code>Q.enqueue(e)</code> ：e 被重新加入队列尾部（所“服务”的元素入队）</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741674177792.png" alt="队列实现轮转调度示意"></p><p>如果使用之前的单向链表，每次取出元素进行操作和插入元素都十分浪费时间。但使用循环链表实现，可以定义一个 <code>rotate()</code> 方法，将头部元素 <code>Q.front()</code> 服务完成后直接移动到尾部。即重复一下步骤即可实现轮转调度：</p><ol><li><code>f(Q.front)</code> ：取出头部元素进行操作/服务</li><li><code>Q.rotate()</code> ：将其直接移动到尾部</li></ol><h3 id="2-3-循环链表实现循环队列">2.3 循环链表实现循环队列</h3><p>使用前面的链表实现队列的代码，但修改尾指针，使得尾指针指向头节点，于是可以舍弃头指针。</p><ul><li>在这个循环类 <code>CircularQueue</code> 中，定义 <code>tail</code> 指针目前的位置为尾部，而 <code>tail.next</code> 为头部。</li><li>同时为循环链表类增加一个 <code>rotate()</code> 方法，将队首移到队尾，相当于 <code>tail = tail.next</code> 更新。</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedCircularQueue</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;循环链表实现循环队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单向链表的节点，非公有，实现循环队列&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>  <span class="comment"># _Node 类只拥有这 2 个属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现队列 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只需要一个指针</span></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;展示队列第一个元素值 tail.next ，但不改变队列&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对循环链表而言，定义尾指针指向节点的下一个节点为头节点</span></span><br><span class="line">        head = <span class="variable language_">self</span>._tail._<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除并返回队列头节点 tail.next 和元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        oldhead = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 获取头节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._size == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail = <span class="literal">None</span>  <span class="comment"># 只有一个节点，删除后变成空队列</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = oldhead._<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 原来的 tail.next 即 oldhead 被释放，因为没有指针指向它</span></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> oldhead._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部 tail 增加新节点&quot;&quot;&quot;</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="comment"># 如果为空，则新节点自己指向自己，后面再由 tail 指向 newest</span></span><br><span class="line">            newest._<span class="built_in">next</span> = newest</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            newest._<span class="built_in">next</span> = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 新节点指向头节点</span></span><br><span class="line">            <span class="variable language_">self</span>._tail._<span class="built_in">next</span> = newest  <span class="comment"># 原来的尾节点的 next 指针指向新节点</span></span><br><span class="line">        <span class="variable language_">self</span>._tail = newest  <span class="comment"># 尾节点更新</span></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;训练轮转一次&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Queue is empty&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._tail = <span class="variable language_">self</span>._tail._<span class="built_in">next</span>  <span class="comment"># 指示指针 (尾指针) tail 向后移动一位</span></span><br></pre></td></tr></table></figure><h2 id="3-双向链表">3 双向链表</h2><h3 id="3-1-双向链表概念">3.1 双向链表概念</h3><p><strong>双向链表</strong>：为了提供更好的对称性，我们定义了一个链表，<strong>每个节点都维护了指向其先驱节点以及后继节点的引用</strong>。这样的结构被称双向链表。这些列表支持更多各种时间复杂度为 <code>O(1)</code> 的更新操作，这些更新操作包括在列表的任意位置插入和删除节点。用 <code>next</code> 表示指向当前节点的后继节点的引用，并引入 <code>prev</code> 引用其前驱节点。</p><p>为了更方便的引用，在链表的起始位置添加头节点 <code>header</code> ，在链表的尾部添加尾节点 <code>trailer</code> ，它们并不存储数据，仅仅为链表操作的方便和一些特殊情况，存储链表的头尾信息。称之为<strong>头哨兵</strong>和<strong>尾哨兵</strong>。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741678367710.png" alt="完整的双向链表图示"></p><ul><li>使用哨兵结构可以简单地处理一些操作。因为每次改变链表只是改变头尾节点的中间部分，而中间部分因为头尾节点的存在变得地位相同，可以采用相同的操作进行处理。例如之前，插入和删除元素还要区分头、尾、中间三部分，现在有了哨兵结构，所有节点都可以采用通适的方法。</li></ul><h3 id="3-2-双向链表的插入与删除">3.2 双向链表的插入与删除</h3><p>因为引入了哨兵结构，所以每个节点都是相同的，即使是第一个和最后一个有值的节点也与中间节点相同。</p><p><strong>插入元素图示</strong></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680651867.png" alt="在具有哨兵结构的双向链表的中间插入元素"></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680686846.png" alt="在具有哨兵结构的双向链表的头部插入元素"></p><p>从上面两个的图示可以发现，把 <code>header</code> 和 <code>trailer</code> 指向的头尾哨兵节点当作普通元素，即可无论是在头部插入还是中间插入，本质上是一样的。</p><p><strong>删除元素图示</strong></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741680740987.png" alt="在具有哨兵结构的双向链表删除一个元素"></p><h3 id="3-3-双向链表的基本实现">3.3 双向链表的基本实现</h3><p>虽然广泛意义的链表的插入和删除已经可以在双向链表中实现，但索引插入和删除的位置却是链表难以高效解决的。对于基于数组的序列而言，利用整数索引非常迅速；但对于链表，由于其不连续的内存空间，无法在常数时间内索引节点，只能逐个遍历。</p><p>所以下面<strong>双向链表的基本实现</strong>的插入和删除暂不考虑索引的问题，而是假设如下条件，直接进行操作：</p><ul><li>假设已知插入节点的前一个和后一个节点的地址</li><li>假设已知被删除节点的地址</li></ul><p>定义用于双向链表的节点类 <code>_Node</code> ，同样也是非公有的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_DoublyLinkedBase</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表的基础类/父类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 嵌套的节点类 _Node --------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Node</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;双向链表的节点类，包含元素值、prev 指针和 next 指针&quot;&quot;&quot;</span></span><br><span class="line">        __slots__ = <span class="string">&#x27;_element&#x27;</span>, <span class="string">&#x27;_prev&#x27;</span>, <span class="string">&#x27;_next&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, element, prev, <span class="built_in">next</span></span>):</span><br><span class="line">            <span class="variable language_">self</span>._element = element</span><br><span class="line">            <span class="variable language_">self</span>._prev = prev</span><br><span class="line">            <span class="variable language_">self</span>._<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 正式实现链表 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个空链表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建头哨兵、尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._header = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="variable language_">self</span>._trailer = <span class="variable language_">self</span>._Node(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._header._<span class="built_in">next</span> = <span class="variable language_">self</span>._trailer  <span class="comment"># 头哨兵 next 指向尾哨兵</span></span><br><span class="line">        <span class="variable language_">self</span>._trailer._prev = <span class="variable language_">self</span>._header  <span class="comment"># 尾哨兵 prev 指向头哨兵</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size = <span class="number">0</span>  <span class="comment"># 链表长度，不包括头尾哨兵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;链表长度 len() 重载&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_between</span>(<span class="params">self, e, predecessor, successor</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在节点 predecessor, successor 插入插入新节点，并返回这个新节点&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建新节点，并将其 prev 指向 predecessor | 其 next 指向 successor</span></span><br><span class="line">        newest = <span class="variable language_">self</span>._Node(e, predecessor, successor)</span><br><span class="line"></span><br><span class="line">        predecessor._<span class="built_in">next</span> = newest  <span class="comment"># predecessor 的 next 指向新节点</span></span><br><span class="line">        successor._prev = newest  <span class="comment"># successor 的 prev 指向新节点</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> newest</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_delete_node</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;传入节点并删除，返回被删除的值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 记录将被删除的节点的前后信息</span></span><br><span class="line">        predecessor = node._prev</span><br><span class="line">        successor = node._<span class="built_in">next</span></span><br><span class="line">        <span class="comment"># 连接 predecessor 和 successor</span></span><br><span class="line">        predecessor._<span class="built_in">next</span> = successor</span><br><span class="line">        successor._prev = predecessor</span><br><span class="line"></span><br><span class="line">        element = node._element</span><br><span class="line">        <span class="comment"># 孤立节点 node : 设为空，用于标识这是即将被删除的节点</span></span><br><span class="line">        node._prev, node._<span class="built_in">next</span>, node._element = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p><code>_DoublyLinkedBase</code> 类是一个非公有类，其目的是作为被继承的父类所定义。其定义了：</p><ol><li>双向链表的节点类 <code>_Node</code></li><li>初始化了双向链表 <code>__init__</code></li><li>定义了如何取链表长度 <code>__len__</code> ，这是重载了运算符 <code>len()</code></li><li>定义了如何判断链表是否为空 <code>is_empty</code></li><li>给出了非公有方法 <code>_insert_between()</code> 实现了当给前一个和后一个节点时，如何在它们中间安全地插入新节点，同时返回这个新的节点地址。之后的子链表类可以继承使用。</li><li>给出了非公有方法 <code>_delete_node()</code> 实现了当给一个节点，如何安全地删除这个节点，返回被删除的节点存储的值。之后的子链表类可以继承使用。</li></ol><h3 id="3-4-双向链表实现双端队列">3.4 双向链表实现双端队列</h3><p><strong>双端队列</strong>：支持在队列的头部和尾部都进行插人和删除操作。这样一种结构被称为双端队列（double-ended queue 或者 <code>deque</code>）。</p><p>基于上面定义的基础双向链表类 <code>_DoublyLinkedBase</code> ，可以实现双端队列。因为继承了父类，所以新的双端队列链表类 <code>LinkedDeque</code> 不需要定义 <code>__init__</code> <code>__len__</code> <code>is_empty</code> 方法。</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedDeque</span>(<span class="title class_ inherited__">_DoublyLinkedBase</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表实现双端队列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 继承父类 --------------</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;不需要定义 `__init__` `__len__` `is_empty` 方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------- 添加双端队列的功能 --------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取第一个元素的值，注意头节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._header._<span class="built_in">next</span>._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取最后一个元素的值，注意尾节点是哨兵，没有值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._trailer._prev._element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_first</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在头部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在头哨兵和第一个元素节点之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._header, <span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_last</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在尾部插入元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用父类 _insert_between 方法，在最后一个元素节点和尾哨兵之间插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._insert_between(e, <span class="variable language_">self</span>._trailer._prev, <span class="variable language_">self</span>._trailer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除第一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除头节点的下一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._header._<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除最后一个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Deque is empty&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 直接调用父类 _delete_node 方法，删除尾节点的上一个节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._delete_node(<span class="variable language_">self</span>._trailer._prev)</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，队列的头尾存储着两个空值的节点，即哨兵指针。所以在进行操作时，需要注意传入的节点。</p></blockquote>]]></content>
    
    
    <summary type="html">本周讲解的链表实现了栈、队列、双端队列三种数据结构。它们的特点就是：可以在头部或者尾部进行插入或删除操作，无法在任意位置进行耗时为常数的操作。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作系统：文件系统</title>
    <link href="https://blog.iskage.online/posts/dad6b81f.html"/>
    <id>https://blog.iskage.online/posts/dad6b81f.html</id>
    <published>2025-03-10T07:03:00.000Z</published>
    <updated>2025-03-10T07:15:51.852Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux 文件系统</h1><p>Linux 文件系统：路径名、目录 (<code>pwd, cd</code>) 、文件系统组织方式 (inode) 、文件和目录查看 (<code>touch, ls, tree</code>) 、文件和目录操作 (<code>mkdir, rmdir, cp, mv, rm</code>) 和 Linux 的目录结构。</p><h2 id="1-路径名和路径名解析">1 路径名和路径名解析</h2><p>相关命令：<code>dirname</code> <code>basename</code> <code>realpath</code></p><p><strong>文件系统</strong>以一颗目录树的形式来组织：</p><ul><li>根节点称为根 <code>root</code> 目录，用 <code>/</code> 来表示</li><li>目录树中的名字只需在其所在目录中唯一</li></ul><h3 id="1-1-路径名">1.1 路径名</h3><p>路径以 <code>/</code> 分隔，分为相对路径和绝对路径：</p><ul><li>绝对路径：从根目录开始，以 <code>/</code> 分割各级目录，例如：<code>/home/User/Documents/example.txt</code></li><li>相对路径：从当前目录开始，只包含当前目录以下的目录名，例如：如果位于 <code>/home/User</code> 则相对路径为 <code>Documents/example.txt</code> 或者 <code>./Documents/example.txt</code></li></ul><blockquote><p><code>.</code> 和 <code>..</code> 是特殊的目录，所有目录下都有这两个目录，<code>.</code> 指代当前目录，<code>..</code>  指代上一级目录。特别的，根目录的上一级目录为自身。</p></blockquote><h3 id="1-2-路径解析">1.2 路径解析</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td><code>dirname ...</code></td><td>返回 <code>...</code> 所在目录的绝对路径</td></tr><tr><td><code>basename ...</code></td><td>返回路径 <code>...</code> 的文件名，即最后一个名字</td></tr><tr><td><code>realpath [options] ...</code></td><td>返回路径名解析后的绝对路径</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">dirname</span> /home/iskage/docs/example.txt</span><br><span class="line">/home/iskage/docs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">basename</span> /home/iskage/docs/example.txt</span><br><span class="line">example.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">realpath</span> -e example.txt</span><br><span class="line">/home/iskage/docs/example.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">realpath</span> -m wrong.txt</span><br><span class="line">/home/iskage/docs/wrong.txt</span><br></pre></td></tr></table></figure><blockquote><p><code>realpath</code> 返回绝对路径，缺省参数默认为 <code>-e</code></p></blockquote><table><thead><tr><th><code>realpath</code> 参数</th><th>要求</th></tr></thead><tbody><tr><td><code>-e</code></td><td>检查目录是否存在，不要去文件存在，但检查文件夹存在性</td></tr><tr><td><code>-m</code></td><td>不检查目录是否存在</td></tr></tbody></table><h2 id="2-改变目录和波浪号扩展">2 改变目录和波浪号扩展</h2><p>相关命令 <code>pwd</code> <code>cd</code> <code>~..</code></p><h3 id="2-1-改变目录-pwd-cd">2.1 改变目录 pwd, cd</h3><ul><li><code>pwd</code> 检查当前目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/iskage/docs</span><br></pre></td></tr></table></figure><ul><li><code>cd [dir]</code> 切换目录，进入 <code>[dir]</code> 目录</li></ul><p><code>cd</code> 留空进入当前用户主目录，即 <code>~</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/docs$ <span class="built_in">cd</span></span><br><span class="line">~$</span><br></pre></td></tr></table></figure><p><code>cd -</code> 表示工作目录设置为先前的工作目录，可在两个目录中切换：例如在 A 目录使用 <code>cd -</code> ，然后进入目录 B 随后使用 <code>cd -</code> 返回 A 目录，再次使用返回 B 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~$ <span class="built_in">cd</span> -</span><br><span class="line">/home/iskage</span><br><span class="line"></span><br><span class="line">~$ <span class="built_in">cd</span> docs</span><br><span class="line">~/docs</span><br><span class="line"></span><br><span class="line">~/docs$ <span class="built_in">cd</span> -</span><br><span class="line">/home/iskage</span><br><span class="line">~$ </span><br></pre></td></tr></table></figure><h3 id="2-2-扩展">2.2 ~ 扩展</h3><ul><li>单独的波浪号 <code>~</code> 表示当前用户的主目录，而 <code>~user</code> 表示用户 user 的主目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~user</span><br><span class="line">进入 user 的主目录，一般为 /home/user</span><br></pre></td></tr></table></figure><blockquote><p>追踪 bash 的命令和返回，可以设置 <code>set -x</code> 打开追踪功能；<code>set +x</code> 关闭追踪功能。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"><span class="built_in">cd</span> ~iskage</span><br><span class="line">+ <span class="built_in">cd</span> /home/iskage</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~user</span><br><span class="line">+ <span class="built_in">cd</span> <span class="string">&#x27;~user&#x27;</span></span><br><span class="line">bash: <span class="built_in">cd</span>: ~user: No such file or directory</span><br></pre></td></tr></table></figure><h2 id="3-文件系统的组织方式">3 文件系统的组织方式</h2><h3 id="3-1-文件系统的组织">3.1 文件系统的组织</h3><p>文件系统由 2 部分组成：</p><ul><li>保存文件相关的元信息的索引节点 <code>inode</code>（index node）</li><li>实际存储数据的数据块</li></ul><p>索引节点 <code>inode</code> 包含：拥有者的 UID 和 GID（用户和用户组）；文件长度；类型和权限；访问、修改和状态改变时间；引用次数；数据块编号列表。</p><p>实际存储数据的数据块包含：对于普通文件，数据块保存实际的内容；对于目录文件，数据块保存的是该目录包含的子目录和文件所对应的目录项。</p><blockquote><p>目录项：每个目录包含子目录和文件的目录项，目录项保存了其对应的文件（包括子目录）的名字以及该文件对应的 inode 编号</p></blockquote><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741309097697.png" alt="文件结构：索引节点和数据块" style="zoom:67%;" /><ul><li><code>ls -i</code> 可以产看索引节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -i</span><br><span class="line">793134 docs</span><br></pre></td></tr></table></figure><h3 id="3-2-查看磁盘使用情况-df">3.2 查看磁盘使用情况 df</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> [options] [file]</span><br><span class="line"></span><br><span class="line">-h : 以自然语言展示 1k=1024</span><br><span class="line">-H , --si : 以自然语言展示 1k=1000</span><br><span class="line">-i , --inodes : 查看节点类型</span><br><span class="line">-T , --print-type  : 显示文件系统类型</span><br><span class="line">-t , --<span class="built_in">type</span>=TYPE    : 仅仅显示相应类型的文件系统信息，例如 --<span class="built_in">type</span>=ext4 或 -t ext4</span><br><span class="line"></span><br><span class="line">file : 缺省，则展示当前所在目录属于的文件系统</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -Th</span><br><span class="line"></span><br><span class="line">Filesystem     Type   Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs          tmpfs  168M  1.1M  167M   1% /run</span><br><span class="line">/dev/vda3      ext4    40G  3.8G   34G  11% /</span><br><span class="line">tmpfs          tmpfs  837M     0  837M   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs  5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/vda2      vfat   197M  6.1M  191M   4% /boot/efi</span><br><span class="line">tmpfs          tmpfs  168M  4.0K  168M   1% /run/user/0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -iT --si</span><br><span class="line"></span><br><span class="line">Filesystem     Type  Inodes IUsed IFree IUse% Mounted on</span><br><span class="line">tmpfs          tmpfs   215k   729  214k    1% /run</span><br><span class="line">/dev/vda3      ext4    2.7M  100k  2.6M    4% /</span><br><span class="line">tmpfs          tmpfs   215k     2  215k    1% /dev/shm</span><br><span class="line">tmpfs          tmpfs   215k     3  215k    1% /run/lock</span><br><span class="line">/dev/vda2      vfat       0     0     0     - /boot/efi</span><br><span class="line">tmpfs          tmpfs    43k    26   43k    1% /run/user/0</span><br></pre></td></tr></table></figure><blockquote><p><code>vda2</code> 表示位于第 1 个磁盘的第 2 区（abc表示磁盘号，123表示分区）</p></blockquote><h3 id="3-3-查看文件使用的空间情况-du">3.3 查看文件使用的空间情况 du</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> [options] [file]</span><br><span class="line"></span><br><span class="line">-c , --total  : 最后显示加和总使用空间</span><br><span class="line">-s , --summarize : 仅仅显示每个参数的总使用情况</span><br><span class="line">-d ,  --max-depth=N : 递归展示子目录的深度，N=0 表示不递归</span><br><span class="line">-B SIZE : 设置展示的单位为 SIZE，缺省默认为 1k bit</span><br><span class="line">-h : 自然语言展示 1k=1024</span><br><span class="line">--si : 与 -h 相同，但 1k=1000</span><br></pre></td></tr></table></figure><blockquote><p>因为 <code>du -s</code> 表示只展示 file 自己的总使用情况，故等价于 <code>du -d 0</code> 深度为 0</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> --si -d 1 -c ./snap</span><br><span class="line"></span><br><span class="line">17k./snap/lxd</span><br><span class="line">21k./snap</span><br><span class="line">21ktotal</span><br></pre></td></tr></table></figure><h3 id="3-4-查看文件类型-file">3.4 查看文件类型 file</h3><p><code>file</code> 指令会查看文件的根本类型，而不是根据拓展名查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file a.py</span><br><span class="line">a.py: ASCII text</span><br><span class="line"></span><br><span class="line">file -i a.py</span><br><span class="line">a.py: text/plain; charset=us-ascii</span><br></pre></td></tr></table></figure><blockquote><p><code>-i , --mime</code> 输出 MIME 头部。</p></blockquote><h2 id="4-文件名和目录查看">4 文件名和目录查看</h2><h3 id="4-1-touch-修改时间">4.1 touch 修改时间</h3><p><code>touch file</code> 文件存在时改变时间，不存在时创建文件。每个文件的时间包括：</p><ul><li>修改时间 <code>mtime</code> ：修改文件内容时更新</li><li>访问时间 <code>atime</code> ：读文件操作时更新的时间</li><li>状态改变时间 <code>ctime</code> ：文件内容或元信息（如权限/名字/时间等）改变时更新，用户无法改变，而是内核自动更新</li></ul><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> [option] file</span><br><span class="line"></span><br><span class="line">-m   : 仅改变修改时间</span><br><span class="line">-a   : 仅改变访问时间</span><br><span class="line">-t <span class="keyword">time</span>   : 指定时间为 <span class="keyword">time</span> 格式为 [[CC]YY]MMDDhhmm[.ss] </span><br><span class="line">  例如 [[20]25]03070938[.11] 表示2025年3月7日9时38分11秒</span><br><span class="line">-r , --reference=BASE : 使用文件 BASE 的时间</span><br></pre></td></tr></table></figure><h3 id="4-2-文件名格式">4.2 文件名格式</h3><ul><li>Linux 系统的文件名（包括目录等）区分大小写。</li><li>文件名不能命名为 <code>.</code> 和 <code>..</code> ，也不能包含 <code>/</code> 和 <code>NULL</code> 字符（ASCII 码为 0 的字符），除此之外可以包含任何字符。</li><li>可以使用后缀，不过并不强制要求。</li><li>一般规范为：使用字母、数字、 <code>.</code> 、<code>-</code> 、<code>_</code> 组成。且避免使用 <code>-</code> 开头，也不使用空格。</li><li>如果出现歧义，可以使用 <code>&quot;&quot;</code> 或 <code>''</code> 包裹起这些文件名。</li></ul><h3 id="4-3-列目录命令-ls">4.3 列目录命令 ls</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [options] [file]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>ls</code> 缺省</td><td>列出当前目录不包含 <code>.</code> 开头的隐藏文件</td></tr><tr><td><code>ls -a</code></td><td>列出所有目录，包含隐藏目录和 <code>.</code> 和 <code>..</code></td></tr><tr><td><code>ls -A</code></td><td>列出所有目录，包含隐藏目录，但不包含 <code>.</code> 和 <code>..</code></td></tr><tr><td><code>ls -F</code></td><td>添加文件类型指示，例如文件夹 snap 表现为 <code>snap/</code></td></tr><tr><td><code>ls -l</code></td><td>长列表形式展示</td></tr><tr><td><code>ls -d</code> <code>ls --directory</code></td><td>显示当前目录的信息，一般和 <code>-l</code> 联合使用</td></tr><tr><td><code>ls -i</code> <code>ls --inode</code></td><td>显示 inode 编号</td></tr><tr><td><code>ls -R</code> <code>ls -recursive</code></td><td>递归展示目录和子目录内容</td></tr><tr><td><code>ls -r</code> <code>ls --reverse</code></td><td>反向排序展示目录</td></tr><tr><td><code>ls -X</code> <code>ls --sort=extension</code></td><td>按照后缀排序，没有后缀的优先</td></tr><tr><td><code>ls -S</code> <code>ls --sort=size</code></td><td>按照文件大小排序，默认从大到小</td></tr><tr><td><code>ls -t</code> <code>ls --sort=time</code></td><td>按照时间排序，默认从新到旧</td></tr><tr><td><code>ls -U</code> <code>ls --sort=none</code></td><td>不排序</td></tr></tbody></table><p>对于 <code>ls -l</code> 列出的信息，里面分别包含：文件类型、访问模式、引用计数、拥有者用户、用户组、文件大小（<code>-h</code> 以自然语言展示）、修改时间、文件名。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741584509233.png" alt="ls -l 文件信息" style="zoom:67%;" /><ul><li>文件类型</li></ul><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>-</code></td><td>普通文件（例如文本文件、二进制文件等）</td></tr><tr><td><code>d</code></td><td>目录</td></tr><tr><td><code>l</code></td><td>符号链接（软链接）</td></tr><tr><td><code>c</code></td><td>字符设备文件</td></tr><tr><td><code>b</code></td><td>块设备文件</td></tr><tr><td><code>p</code></td><td>命名管道（FIFO）</td></tr><tr><td><code>s</code></td><td>套接字文件</td></tr></tbody></table><ul><li>访问模式：所有者权限（<code>1, 2, 3</code>）、所属组权限（<code>4, 5, 6</code>）、其他用户权限</li></ul><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>r</code> <code>-</code></td><td>第一个字符：读权限，r 表示可读，- 表示不可读</td></tr><tr><td><code>w</code> <code>-</code></td><td>第二个字符：写权限，w 表示可写，- 表示不可写</td></tr><tr><td><code>x</code> <code>-</code></td><td>第三个字符：执行权限，x 表示可执行，- 表示不可执行</td></tr></tbody></table><h3 id="4-4-tree-查看目录树">4.4 tree 查看目录树</h3><p>先在 Ubuntu 上安装 <code>tree</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install tree</span><br></pre></td></tr></table></figure><p>然后可以使用 <code>tree</code> 命令以树的形式递归展示目录结构：</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>tree</code></td><td style="text-align:left">显示当前目录及其子目录的树状结构</td></tr><tr><td style="text-align:left"><code>tree -d</code></td><td style="text-align:left">仅显示目录，不显示文件</td></tr><tr><td style="text-align:left"><code>tree -L n</code></td><td style="text-align:left">限制显示的目录层级深度为 <code>n</code>。例如，<code>tree -L 2</code> 显示两层目录</td></tr><tr><td style="text-align:left"><code>tree -a</code></td><td style="text-align:left">显示所有文件和目录，包括隐藏文件（以 <code>.</code> 开头的文件）</td></tr><tr><td style="text-align:left"><code>tree -f</code></td><td style="text-align:left">显示文件的完整路径</td></tr><tr><td style="text-align:left"><code>tree -p</code></td><td style="text-align:left">显示文件和目录的权限</td></tr><tr><td style="text-align:left"><code>tree -s</code></td><td style="text-align:left">显示文件和目录的大小（以字节为单位）</td></tr><tr><td style="text-align:left"><code>tree -h</code></td><td style="text-align:left">以人类可读的格式显示文件和目录的大小（例如 KB、MB）</td></tr><tr><td style="text-align:left"><code>tree -D</code></td><td style="text-align:left">显示文件和目录的最后修改时间</td></tr><tr><td style="text-align:left"><code>tree -I pattern</code></td><td style="text-align:left">排除符合指定模式的文件。例如，<code>tree -I &quot;*.txt&quot;</code> 排除所有 <code>.txt</code> 文件</td></tr><tr><td style="text-align:left"><code>tree -o filename</code></td><td style="text-align:left">将输出保存到指定文件中。例如，<code>tree -o output.txt</code></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~$ tree</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── a.py</span><br><span class="line">├── file1</span><br><span class="line">├── file2</span><br><span class="line">├── file3</span><br><span class="line">└── snap</span><br><span class="line">    └── lxd</span><br><span class="line">        ├── 22923</span><br><span class="line">        ├── 31333</span><br><span class="line">        ├── common</span><br><span class="line">        └── current -&gt; 31333</span><br></pre></td></tr></table></figure><h2 id="5-文件和目录操作">5 文件和目录操作</h2><h3 id="5-1-创建目录-mkdir">5.1 创建目录 mkdir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-p] directory</span><br></pre></td></tr></table></figure><ul><li>同一目录下不可同名</li><li>缺省 <code>-p</code> <code>--parents</code> 时，父目录不存在时不可以创建子目录</li><li>目录可以理解为文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dir1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dir2/dir3</span><br><span class="line"><span class="comment"># mkdir: cannot create directory ‘dir2/dir3’: No such file or directory</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p dir2/dir3</span><br></pre></td></tr></table></figure><h3 id="5-2-删除目录-rmdir">5.2 删除目录 rmdir</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> [-p] directory</span><br></pre></td></tr></table></figure><ul><li>仅允许删除空目录，如果有文件则无法删除</li><li>对于一连串的目录，例如 <code>dir1/dir2/dir3</code> 其中 dir3 为空目录。可以使用 <code>rmdir -p dir1/dir2/dir3</code> 删除。这一步等价于先删除 dir1 然后 dir2 dir3 ，即 <code>rmdir dir1/dir2/dir3 &amp;&amp; rmdir dir1/dir2 &amp;&amp; rmdir dir1</code></li><li>如果希望递归删除节点以下所有内容，可以使用 <code>rm -R</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> dir1</span><br><span class="line"><span class="comment"># rmdir: failed to remove &#x27;dir1&#x27;: Directory not empty</span></span><br><span class="line"><span class="built_in">rmdir</span> -p dir1</span><br><span class="line"><span class="comment"># rmdir: failed to remove &#x27;dir1&#x27;: Directory not empty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line"><span class="built_in">rmdir</span> -p dir1/dir2/dir3</span><br></pre></td></tr></table></figure><h3 id="5-3-复制文件和目录-cp">5.3 复制文件和目录 cp</h3><h4 id="5-3-1-复制和创建新文件">5.3.1 复制和创建新文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [options] SOURCE DESTINATION</span><br></pre></td></tr></table></figure><ul><li>SOURCE：要复制的文件或目录。</li><li>DESTINATION：目标文件或目录。如果 <code>DESTINATION</code> 是一个目录，则会将 <code>SOURCE</code> 复制到该目录中；如果 <code>DESTINATION</code> 是一个文件名，则会将 <code>SOURCE</code> 复制并重命名为 <code>DESTINATION</code>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ./dir1/file file_copy</span><br><span class="line"><span class="comment"># 将 ./dir1/ 下的 file 文件复制一份到当前目录的 file_copy 文件</span></span><br></pre></td></tr></table></figure><p>复制目录需要 <code>-r</code> 递归复制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r ./dir1/ dir1_copy</span><br></pre></td></tr></table></figure><h4 id="5-3-2-备份和覆盖">5.3.2 备份和覆盖</h4><p>如果要复制的位置存在相同的文件名，权限允许（即可以写 <code>w</code>）时缺省会直接覆盖。权限不允许（没有写权限）时会报 <code>Permission denied</code> 错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -f : 强制覆盖</span><br><span class="line"><span class="built_in">cp</span> -i : 覆盖前询问用户</span><br><span class="line"><span class="built_in">cp</span> -b : 覆盖前保留备份，以原文件名加 ~ </span><br></pre></td></tr></table></figure><h4 id="5-3-3-递归复制目录">5.3.3 递归复制目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r : 递归复制目录和子目录</span><br><span class="line"><span class="built_in">cp</span> -a : 递归复制目录和子目录，保留原文件的属性</span><br></pre></td></tr></table></figure><blockquote><p>如果目标目录存在，则将复制后的目录直接放在目标目录下</p><p>如果目标目录不存在，则创建新目录，将被复制的目录第一个父目录后的所有子目录放在目标目录下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">└── tmp1</span><br></pre></td></tr></table></figure><ul><li>存在目标目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r dir1 ./tmp1</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">└── tmp1</span><br><span class="line">    └── dir1</span><br><span class="line">        └── dir2</span><br><span class="line">            └── dir3</span><br></pre></td></tr></table></figure><ul><li>但如果不存在目标目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r dir1 ./tmp2</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   └── dir2</span><br><span class="line">│       └── dir3</span><br><span class="line">├── tmp1</span><br><span class="line">│   └── dir1</span><br><span class="line">│       └── dir2</span><br><span class="line">│           └── dir3</span><br><span class="line">└── tmp2</span><br><span class="line">    └── dir2</span><br><span class="line">        └── dir3</span><br></pre></td></tr></table></figure><h3 id="5-4-移动或重命名-mv">5.4 移动或重命名 mv</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式1：移动并重命名</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] SOURCE DEST</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式2：移动到目录（目录必须存在）</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] SOURCE... DIRECTORY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式3：指定目标目录（与格式2等价）</span></span><br><span class="line"><span class="built_in">mv</span> [OPTION] -t DIRECTORY SOURCE...</span><br></pre></td></tr></table></figure><blockquote><ul><li>若 <code>DEST</code> 以 <code>/</code> 结尾，强制使用格式2（目录必须存在，否则报错）</li><li>若目标位置存在同名文件/目录，默认直接覆盖</li></ul></blockquote><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-t</code> <code>--target-directory=...</code></td><td style="text-align:left">指定目标目录</td></tr><tr><td style="text-align:left"><code>-i</code> <code>--interactive</code></td><td style="text-align:left">覆盖前询问确认</td></tr><tr><td style="text-align:left"><code>-f</code> <code>--force</code></td><td style="text-align:left">强制覆盖（不询问）</td></tr><tr><td style="text-align:left"><code>-n</code> <code>--no-clobber</code></td><td style="text-align:left">禁止覆盖已有文件</td></tr><tr><td style="text-align:left"><code>-b</code></td><td style="text-align:left">覆盖前备份（默认添加 <code>~</code> 后缀）</td></tr><tr><td style="text-align:left"><code>-S SUFFIX</code> <code>--suffix=SUFFIX</code></td><td style="text-align:left">自定义备份文件后缀（需配合 <code>-b</code>）</td></tr><tr><td style="text-align:left"><code>-u</code> <code>--update</code></td><td style="text-align:left">仅当目标文件不存在或比源文件旧时移动</td></tr><tr><td style="text-align:left"><code>-v</code> <code>--verbose</code></td><td style="text-align:left">显示详细操作过程</td></tr></tbody></table><ol><li>重命名文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> old_file.txt new_file.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>移动文件到目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> file.txt /target/dir/</span><br></pre></td></tr></table></figure><ol start="3"><li>覆盖前备份</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> -b file.txt /backup/  <span class="comment"># 生成 file.txt~</span></span><br><span class="line"><span class="built_in">mv</span> -b -S .bak file.txt  <span class="comment"># 自定义备份后缀 生成 file.txt.bak</span></span><br></pre></td></tr></table></figure><ol start="4"><li>批量移动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> *.jpg /photos/ -v  <span class="comment"># -v 显示详细操作</span></span><br></pre></td></tr></table></figure><h3 id="5-5-删除-rm">5.5 删除 rm</h3><p><strong>格式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><ul><li><p>直接删除文件（不询问）</p></li><li><p>目录删除，需配合 <code>-R/-r</code> 选项删除非空目录；使用 <code>-d</code> 选项可删除空目录</p></li></ul><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>-i</code></td><td style="text-align:left">每次删除前询问确认</td></tr><tr><td style="text-align:left"><code>-f</code></td><td style="text-align:left">强制删除（不询问，忽略错误）</td></tr><tr><td style="text-align:left"><code>-R</code>  <code>-r</code>  <code>--recursive</code></td><td style="text-align:left">递归删除目录及其子内容</td></tr><tr><td style="text-align:left"><code>-d</code>  <code>--dir</code></td><td style="text-align:left">删除空目录</td></tr><tr><td style="text-align:left"><code>-v</code>  <code>--verbose</code></td><td style="text-align:left">显示详细操作过程</td></tr></tbody></table><ol><li>删除文件（强制）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f file.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>递归删除目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r directory/</span><br></pre></td></tr></table></figure><ol start="3"><li>删除多个文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -i *.<span class="built_in">log</span>  <span class="comment"># -i 每次删除都询问是否进行</span></span><br></pre></td></tr></table></figure><h2 id="6-Linux-目录结构">6 Linux 目录结构</h2><blockquote><p>由 <strong>DeepSeek</strong> 整理</p></blockquote><h3 id="6-1-核心目录">6.1 核心目录</h3><h4 id="6-1-1-根目录（-）">6.1.1 根目录（/）</h4><p>整个文件系统树的根，包含了许多子目录</p><h4 id="6-1-2-基础功能目录">6.1.2 基础功能目录</h4><table><thead><tr><th>目录</th><th>功能说明</th><th>重要特性</th></tr></thead><tbody><tr><td><code>/bin</code></td><td>基础执行程序</td><td>包含<code>ls</code>、<code>cp</code>等基础命令，单用户模式可用</td></tr><tr><td><code>/sbin</code></td><td>系统管理程序</td><td><code>fdisk</code>、<code>ifconfig</code>等管理员专用命令</td></tr><tr><td><code>/lib</code></td><td>共享库文件</td><td>为 <code>/bin</code> 和 <code>/sbin</code> 提供运行依赖</td></tr><tr><td><code>/dev</code></td><td>设备文件</td><td>由<code>udev</code>管理，如<code>/dev/sda</code>（磁盘设备）</td></tr></tbody></table><h4 id="6-1-3-系统配置目录">6.1.3 系统配置目录</h4><table><thead><tr><th>目录</th><th>核心内容</th><th>典型文件</th></tr></thead><tbody><tr><td><code>/etc</code></td><td>系统级配置文件</td><td><code>passwd</code>、<code>fstab</code>、<code>ssh/</code></td></tr><tr><td><code>/boot</code></td><td>启动相关文件</td><td><code>grub/</code>、<code>vmlinuz</code>（内核文件）</td></tr></tbody></table><h4 id="6-1-4-用户相关目录">6.1.4 用户相关目录</h4><table><thead><tr><th>目录</th><th>功能说明</th><th>用户权限</th></tr></thead><tbody><tr><td><code>/home</code></td><td>用户主目录</td><td><code>~/</code> 指向用户专属目录</td></tr><tr><td><code>/root</code></td><td>管理员主目录</td><td>独立于普通用户的根 /home 结构</td></tr></tbody></table><h4 id="6-1-5-存储相关目录">6.1.5 存储相关目录</h4><table><thead><tr><th>目录</th><th>挂载类型</th><th>典型用途</th></tr></thead><tbody><tr><td><code>/media</code></td><td>可移动存储</td><td>U盘、光盘自动挂载点</td></tr><tr><td><code>/mnt</code></td><td>临时挂载点</td><td>手动挂载硬盘/NFS</td></tr></tbody></table><h3 id="6-2-特殊用途目录">6.2 特殊用途目录</h3><h4 id="6-2-1-运行时数据">6.2.1 运行时数据</h4><table><thead><tr><th>目录</th><th>数据特性</th><th>典型内容</th></tr></thead><tbody><tr><td><code>/var</code></td><td>动态可变数据</td><td><code>log/</code>、<code>mail/</code>、<code>spool/</code></td></tr><tr><td><code>/run</code></td><td>运行时信息</td><td>PID文件、<code>/var/run</code>符号链接</td></tr></tbody></table><h4 id="6-2-2-临时空间">6.2.2 临时空间</h4><table><thead><tr><th>目录</th><th>生命周期</th><th>权限控制</th></tr></thead><tbody><tr><td><code>/tmp</code></td><td>临时文件</td><td>用户可创建，仅创建者可删除</td></tr><tr><td><code>/lost+found</code></td><td>文件恢复</td><td><code>fsck</code>修复后的残留文件</td></tr></tbody></table><h4 id="6-2-3-内核与硬件">6.2.3 内核与硬件</h4><table><thead><tr><th>目录</th><th>信息类型</th><th>访问方式</th></tr></thead><tbody><tr><td><code>/proc</code></td><td>进程与内核数据</td><td>虚拟文件系统，实时读取（如<code>cpuinfo</code>）</td></tr><tr><td><code>/sys</code></td><td>硬件层级信息</td><td>设备驱动、电源管理等</td></tr></tbody></table><h3 id="6-3-资源存储目录">6.3. 资源存储目录</h3><h4 id="6-3-1-静态资源库">6.3.1 静态资源库</h4><table><thead><tr><th>目录</th><th>资源类型</th><th>典型结构</th></tr></thead><tbody><tr><td><code>/usr</code></td><td>只读共享资源</td><td><code>bin/</code>、<code>lib/</code>、<code>share/</code>（文档）</td></tr><tr><td><code>/opt</code></td><td>第三方软件</td><td>独立软件包（如Oracle）</td></tr></tbody></table><h4 id="6-3-2-服务数据">6.3.2 服务数据</h4><table><thead><tr><th>目录</th><th>服务类型</th><th>典型应用</th></tr></thead><tbody><tr><td><code>/srv</code></td><td>本地服务数据</td><td><code>www/</code>（网站数据）、<code>ftp/</code></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Linux 文件系统：路径名、目录 (`pwd, cd`) 、文件系统组织方式 (inode) 、文件和目录查看 (`touch, ls, tree`) 、文件和目录操作 (`mkdir, rmdir, cp, mv, rm`) 和 Linux 的目录结构。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="文件系统" scheme="https://blog.iskage.online/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数组 Array</title>
    <link href="https://blog.iskage.online/posts/340249a9.html"/>
    <id>https://blog.iskage.online/posts/340249a9.html</id>
    <published>2025-03-06T12:43:00.000Z</published>
    <updated>2025-04-06T13:33:44.037Z</updated>
    
    <content type="html"><![CDATA[<h1>基于数组的序列：Python 动态数组原理与插入排序</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p>本文介绍了低层次数组的原理，并自定义实现了 Python 的一个动态数组。并详细分析了底层存储原理、摊销时间。分析了一些基于数组的案例，例如插入排序算法。同时指出了组成字符串和多维数组创建的常见误用。</p><h2 id="1-Python-序列类型">1 Python 序列类型</h2><p>Python 有各种序列类型，例如：内置的列表 <code>list</code> 、元组 <code>tuple</code> 和字符串 <code>str</code> 类</p><ul><li>这些序列类型支持用下标访间序列元素，如 <code>A[i]</code></li><li>这些类型均使用<strong>数组</strong>来表示序列</li><li>一个数组即为一组相关变量，它们一个接一个地存在内存里的一块<strong>连续区域</strong>内</li></ul><p>而 <code>数组 Array</code> 抽象数据类型为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ADT Array&#123;</span><br><span class="line">数据对象: A = &#123;A1, A2, ..., An｝</span><br><span class="line">基本操作: </span><br><span class="line">A.init(S): 使用序列 S 初始化数组 A</span><br><span class="line"><span class="built_in">len</span>(A): 返回数组 A 的长度</span><br><span class="line">A.is_empty(): 检查数组 A 是否为空，如为空则返回 <span class="literal">True</span></span><br><span class="line">        A.get_item(n): 返回数组 A 的第 n 个元素</span><br><span class="line">        A.locate(e): 返回数组 A 中第一个等于 e 的元素的位置</span><br><span class="line">        A.insert(n, e): 在数组 A 的第 n 个元素前插入元素 e</span><br><span class="line">        A.delete(n): 删除数组 A 的第 n 个元素</span><br><span class="line">        A.clear(): 清空数组 A</span><br><span class="line">&#125; ADT Array</span><br></pre></td></tr></table></figure><h2 id="2-低层次数组">2 低层次数组</h2><p>从计算机底层角度理解数组的存储方式：数组是一些变量一个接一个地存在内存里的一块<strong>连续区域</strong>内。例如：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741166755512.png" style="zoom:67%;" /><p>对于这种连续的存储方式，索引变得十分迅速，例如上例：已知 <code>'S'</code> 的地址为 <code>2146</code> 而它位于位置 <code>index = 0</code> 那么索引 <code>'L'</code> 只要寻找地址 <code>start + cellsize * index</code> 即 <code>2146 + 2 * 4 = 2154</code> 即可找到 <code>'L'</code> 的地址。</p><p>从底层上理解数组，我们又可以分为：紧凑数组和引用数组</p><h3 id="2-1-紧凑数组">2.1 紧凑数组</h3><p>一个存储基本元素（如字符）的数组，被称为紧凑数组。例如上面的例子存储的 <code>SAMPLE</code> 就是紧凑数组。</p><p>除了 Python 默认的紧凑数组，我们也可以利用 <code>array</code> 模块自定义紧凑数组。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">x = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>其中 <code>'i'</code> 参数代表以整型类型存储，这个会定义分配的空间，一般整型分配 <code>2 or 4</code> 个字节。其他类型例：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741167318874.png" alt=""></p><p>例如刚刚的例子 <code>[1, 2, 3, 4]</code> 以 <code>'i'</code> 即有符号整型存储，分配空间为一个元素 4 字节，可以使用 Python 的 <code>id()</code> 函数检查一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">x = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x[<span class="number">1</span>]) - <span class="built_in">id</span>(x[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x[<span class="number">2</span>]) - <span class="built_in">id</span>(x[<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="comment"># 32</span></span><br></pre></td></tr></table></figure><p>这里的 <code>32</code> 表示 32 个比特 <code>bit</code> ，而 <code>8 bit = 1 byte</code> 故二者之间确实相隔 4 字节，而且两两相隔 4 字节，说明是紧凑的。</p><blockquote><p>对于 <code>array</code> 模块，我们只能定义它提供的数据类型的紧凑数组，即 <code>i, f, d</code> （整型、浮点型等），他们的内存大小已经确定。如果想完全自定义一个紧凑数组，同时还有满足底层数组的要求（动态数组），可以采用 <code>ctypes</code> 模块实现，见 [3.3 节：实现动态数组](###3.3 实现动态数组)。</p></blockquote><h3 id="2-2-引用数组">2.2 引用数组</h3><p>一个存储对象的引用的数组，被称为引用数组。例如：对于下面这个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;Rene&#x27;</span>, <span class="string">&#x27;Joseph&#x27;</span>, <span class="string">&#x27;Janet&#x27;</span>, <span class="string">&#x27;Jonas&#x27;</span>, <span class="string">&#x27;Helen&#x27;</span>, <span class="string">&#x27;Virginia&#x27;</span>]</span><br></pre></td></tr></table></figure><p>其存储方式如图，每个数组元素存储的是字符串数据的引用（地址）。不同于紧凑数组，存储不同类型的数据要分配的空间是不同的，而引用数组避免了这个困难。因为不同地址的大小是固定的，所以直接存储地址既能满足快速索引，又可以避免不同数据带来的分配空间难题。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741167621703.png" alt=""></p><p>而这也带了列表的某些特性，例如用下面的方法创建的列表，实则存储了各个数字的地址，而数字本身是不可变的常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p>此时如果有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">temp = [<span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><p>那么，<code>temp</code> 的这三个元素与 <code>primes</code> 的对应元素是相同的，因为他们都是存储了不可变常数 <code>7, 11, 13</code> 的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line">temp = [<span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="built_in">id</span>(<span class="number">7</span>) == <span class="built_in">id</span>(primes[<span class="number">3</span>]) == <span class="built_in">id</span>(temp[<span class="number">0</span>])</span><br><span class="line">)</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741168198295.png" style="zoom:50%;" /><h2 id="3-动态数组和摊销">3 动态数组和摊销</h2><p>由之前的分析，我们发现：创建低层次数组时，必须明确声明数组的大小，以便系统为其存储分配连续的内存。</p><h3 id="3-1-动态数组">3.1 动态数组</h3><p>不过 Python 提供了一个算法技巧，即<strong>动态数组</strong>。在 Python 中，创建一个列表，分配给这个列表的数组空间一般不与列表相同，而是更大。例如 <code>[1, 2, 3]</code> 列表的数组可能可以存储三个以上的元素。我们可以通过以下的代码验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(data)</span><br><span class="line">    size = sys.getsizeof(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数组大小: &#123;&#125;, 数组内存分配: &#123;&#125; Byte (字节)&quot;</span>.<span class="built_in">format</span>(length, size))</span><br><span class="line">    data.append(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741168916651.png" style="zoom:50%;" /><p>注意到，当数组为空时，仍然分配了 56 字节，对于 64 位 (bit) 操作系统，这一般意味着预留了 7 个元素的空间。</p><p>除此之外，而且当数组即将满时，Python 会自动创建一个更大的数组，并将原来的元素完全拷贝进新的数组。正如上图所示，当不断增加元素时，数组内存空间也在不断扩大。</p><h3 id="3-2-摊销">3.2 摊销</h3><p>对于不断扩大数组空间有两种策略：</p><ul><li><strong>固定增量策略</strong>：每次数组大小增大一个常数</li><li><strong>翻倍增量策略</strong>：每次数组大小翻倍</li></ul><p>首先，我们给出结论，实际 Python 采用的是第二种方式——翻倍增量策略，下面证明这样的策略摊销时间更短。</p><p>我们定义<strong>摊销时间</strong>为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{T(n)}{n} \notag</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 表示数组长度，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 表示进行增量的总运行时间。</p><h4 id="3-2-1-固定增量策略">3.2.1 固定增量策略</h4><p>假设每次在数组填满后，扩展 c 个空间。即每次增大的数量都是 c 的倍数，初始化了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mi>n</mi><mi>c</mi></mfrac></mrow><annotation encoding="application/x-tex">k = \frac{n}{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 次数组（如果设从长度为 1 不断加 c 增加到 n 需要的次数为 k，那么 k 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>⋅</mo><mi>c</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">k\cdot c = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>）。那么扩展到 n 这个长度需要操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mi>c</mi><mo>+</mo><mn>2</mn><mi>c</mi><mo>+</mo><mn>3</mn><mi>c</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>k</mi><mi>c</mi><mo>=</mo><mi>n</mi><mo>+</mo><mi>c</mi><mi>k</mi><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n + c + 2c + 3c + \cdots + kc = n + ck(k+1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/2</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo separator="true">,</mo><mn>2</mn><mi>c</mi><mo separator="true">,</mo><mn>3</mn><mi>c</mi><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">c, 2c, 3c, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 代表每次需要初始化新增数组的长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表复制次数。而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">k \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ，故最后的总时间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>∼</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) \sim O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。那么摊销时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><h4 id="3-2-2-翻倍增量策略">3.2.2 翻倍增量策略</h4><p>假设每次在数组填满后，翻倍自身的大小，初始化了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">k = \log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span> 次数组（如果设从长度为 1 不断乘以 2 翻倍到 n 需要的次数为 k ，那么 k 满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2^k = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>）。那么扩展到 n 这个长度需要操作：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mi>k</mi></msup><mo>=</mo><mi>n</mi><mo>+</mo><msup><mn>2</mn><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>3</mn><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n + 1 + 2 + 2^2 + 2^3 + \cdots + 2^k = n + 2^{k+1} - 1 = 3n - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">1, 2, 2^2, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 代表每次需要初始化新增数组的长度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表复制次数。故最后的总时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>3</mn><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(3n-1) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，于是摊销时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><ul><li>比较二者，翻倍增量策略更优，摊销时间复制度仅为 <code>O(n)</code></li></ul><p>很明显，从摊销时间来看，翻倍增量策略更优。直观地理解：摊销时间代表的是平均时间，而相比每次增加 c ，通过翻倍来达到长度 n 会更快。相当于通过不计空间成本的方式达到长度 n ，所以在平均来看，翻倍更优。</p><h3 id="3-3-实现动态数组">3.3 实现动态数组</h3><p>当知道了 Python 底层如何构建数组后，我们可以使用 Python 的 <code>ctypes</code> 模块来自定义动态数组。我们希望它可以满足：</p><ul><li>初始化成立；</li><li>紧凑的，可以快速索引；</li><li>可以添加元素（添加元素的方法要满足动态数组）；</li><li>针对添加元素，需要判断数组大小是否足够。如果不够，采用翻倍增量策略进行数组扩展；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义实现动态数组，_ 开头表示非公有方法，不建议外部误调用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化空数组&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._n = <span class="number">0</span>  <span class="comment"># 数组实际元素个数</span></span><br><span class="line">        <span class="variable language_">self</span>._capacity = <span class="number">1</span>  <span class="comment"># 默认数组空间大小</span></span><br><span class="line">        <span class="variable language_">self</span>._A = <span class="variable language_">self</span>._make_array(<span class="variable language_">self</span>._capacity)  <span class="comment"># 创建大小为 _capacity 的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_make_array</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;创建大小为 c 的数组&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (c * ctypes.py_object)()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回数组元素个数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;索引数组第 k 个元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= k &lt; <span class="variable language_">self</span>._n:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Invalid index&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._A[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;数组末尾添加元素&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._n == <span class="variable language_">self</span>._capacity:  <span class="comment"># 判断数组空间</span></span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="variable language_">self</span>._capacity)  <span class="comment"># 翻倍增量策略</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A[<span class="variable language_">self</span>._n] = obj  <span class="comment"># 更新数组尾部元素</span></span><br><span class="line">        <span class="variable language_">self</span>._n += <span class="number">1</span>  <span class="comment"># 更新实际元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize</span>(<span class="params">self, c</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;扩展数组大小&quot;&quot;&quot;</span></span><br><span class="line">        B = <span class="variable language_">self</span>._make_array(c)  <span class="comment"># 创建大小为 c 的新数组</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n):</span><br><span class="line">            <span class="comment"># 拷贝原来数组元素</span></span><br><span class="line">            B[k] = <span class="variable language_">self</span>._A[k]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A = B  <span class="comment"># 更新数组对象</span></span><br><span class="line">        <span class="variable language_">self</span>._capacity = c  <span class="comment"># 更新存储空间大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;字符串重载，以字符串得到方式展示数组内容&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + <span class="string">&quot;, &quot;</span>.join(<span class="built_in">str</span>(<span class="variable language_">self</span>._A[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n)) + <span class="string">&quot;]&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_memory_size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回数组的内存分配大小（字节）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._capacity * ctypes.sizeof(ctypes.py_object)</span><br></pre></td></tr></table></figure><p>通过下面的方式检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array = DynamicArray()</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(array)</span><br><span class="line">    size = array.get_memory_size()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数组大小: &#123;&#125;, 数组内存分配: &#123;&#125; Byte (字节)&quot;</span>.<span class="built_in">format</span>(length, size))</span><br><span class="line">    array.append(k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(array) <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741175393359.png" alt="自定义动态数组的内存变化"></p><p>从结果可知：每当数组实际元素达到内存分配的个数时，内存分配就会翻倍（即当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><msup><mn>2</mn><mn>3</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">length = 1, 2, 2^2, 2^3, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 时内存就会乘以 2），这就是手动实现动态数组，采用翻倍增量策略的例子。</p><h2 id="4-Python-列表和元组类的效率">4 Python 列表和元组类的效率</h2><h3 id="4-1-不改变数组内容的操作">4.1 不改变数组内容的操作</h3><p>对于 Python 的列表和元组这两个序列类，<strong>不改变其内容的操作</strong>往往都是常量级别的时间复杂度 <code>O(c)</code>。例如：索引（因为是连续的内存空间，只需知道 index 计算即可得到对应的地址）、长度（因为在基类里保存了 <code>__len__</code> 方法，可以直接调出）等。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741175945153.png" alt="不改变内容的操作"></p><h3 id="4-2-改变数组内容的操作">4.2 改变数组内容的操作</h3><h4 id="4-2-1-数组元素的插入-O-n">4.2.1 数组元素的插入 <code>O(n)</code></h4><p>将对象 <code>o</code> 插入到数组 <code>A</code> 的第 i 个元素前时（<code>insert(o, i)</code>）需要将后 n - i 个元素后移才能插入。最坏的情况就是插入到第 0 个位置，这样需要后移 n 个元素，即复杂度为 <code>O(n)</code> 。</p><ul><li>代码实现插入方法 <code>insert</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, obj, position</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在第 position 位置插入 obj&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 解决索引问题</span></span><br><span class="line">        <span class="keyword">while</span> position &lt; <span class="number">0</span>:</span><br><span class="line">            position += <span class="variable language_">self</span>._n</span><br><span class="line">        position = position % <span class="variable language_">self</span>._n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._n == <span class="variable language_">self</span>._capacity:</span><br><span class="line">            <span class="comment"># 空间不足</span></span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * <span class="variable language_">self</span>._capacity)  <span class="comment"># 扩展</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n, position, -<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 后 n - position 向后移动一位</span></span><br><span class="line">            <span class="variable language_">self</span>._A[j] = <span class="variable language_">self</span>._A[j - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>._A[position] = obj  <span class="comment"># 更新第 position 位的元素</span></span><br><span class="line">        <span class="variable language_">self</span>._n += <span class="number">1</span>  <span class="comment"># 更新元素个数</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-数组元素的删除-O-n">4.2.2 数组元素的删除 <code>O(n)</code></h4><p>与插入元素相反，删除元素需要索引到对应元素，删去后需要将后面的元素向前移动一位。最坏的情况就是删除第一个元素，需要移动 n 个元素，复杂度为 <code>O(n)</code> 。</p><ul><li>代码实现删除方法 <code>remove</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicArray</span>:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除值 obj (不考虑重复)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>._n):</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._A[k] == obj:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k, <span class="variable language_">self</span>._n - <span class="number">1</span>):</span><br><span class="line">                    <span class="comment"># 前移</span></span><br><span class="line">                    <span class="variable language_">self</span>._A[j] = <span class="variable language_">self</span>._A[j + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>._A[<span class="variable language_">self</span>._n - <span class="number">1</span>] = <span class="literal">None</span>  <span class="comment"># help garbage collection</span></span><br><span class="line">            <span class="variable language_">self</span>._n -= <span class="number">1</span>  <span class="comment"># 更新个数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Value not found&#x27;</span>)  <span class="comment"># 无匹配</span></span><br></pre></td></tr></table></figure><blockquote><p>实际上，Python 在删除元素后，也会动态调整空间大小，为简单期间，暂不手动实现。</p></blockquote><h4 id="4-2-3-改变数组内容的操作">4.2.3 改变数组内容的操作</h4><p>针对这些会改变数组内容的操作，往往需要至少 <code>O(n)</code> 复杂度才能实现：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741178215624.png" alt="改变内容的操作"></p><blockquote><p>特别的，因为在末尾增加元素、插入元素、删除元素、在末尾删除元素、拼接等操作会带来存储空间的变化，所以可能需要扩展或缩小内存空间。故要考虑摊销的时间复杂度，这里采用的是翻倍增量策略的摊销（平均时间）为 <code>O(1)</code> 。</p></blockquote><blockquote><p>需要注意，摊销的 <code>O(1)</code> 代表的是平均时间，与一般的时间复杂度定义不同，一般时间复杂度考虑的是最坏情况。如果考虑最坏情况，则为 <code>O(n)</code> ，例如 <code>append</code> 最坏的情况需要 n 次，因为扩展空间后需要复制原来数组的 n 个元素。</p></blockquote><h2 id="5-Python-字符串类的效率">5 Python 字符串类的效率</h2><p>字符串的很多方面与列表和元组相同，这里主要介绍一个常见的【误用】。</p><h3 id="5-1-组成字符串的误用">5.1 组成字符串的误用</h3><p><strong>组成字符串</strong></p><p>假设有一个很长的字符串对象 <code>document</code> ，我们的目标是构造一个新的字符串 <code>letter</code> ，该字符串仅包含 <code>document</code> 的所有字母。常见的误用为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是个错误的使用</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalnum():</span><br><span class="line">        <span class="comment"># 使用重载后的 + 进行组合</span></span><br><span class="line">        letter += char</span><br></pre></td></tr></table></figure><p>如果这样使用，每一次 <code>letter = letter + char</code> 都会创建一个新的对象 <code>letter + char</code> 并把它赋值给 <code>letter</code> 。假设 <code>letter</code> 最后长为 n ，那么需要进行近似 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo>⋯</mo><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 + 2 + \cdots + n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 次操作，复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><h3 id="5-2-正确使用">5.2 正确使用</h3><p>为了解决时间复杂度，我们可以用空间换时间，即不直接对 <code>letter</code> 操作，而是用一个临时的表 <code>tmp</code> 存储字符，然后在组成新的字符串 <code>letter</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tmp = []  <span class="comment"># 临时表</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        <span class="comment"># append 操作平均为 O(1)</span></span><br><span class="line">        tmp.append(char)</span><br><span class="line"><span class="comment"># 最后再组成字符串</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span>.join(tmp)</span><br></pre></td></tr></table></figure><ul><li>我们可以验证一下二者的速度：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为验证，设置一个足够长的字符串</span></span><br><span class="line">document = <span class="string">&quot;hello world, welcome to Python :) Having a nice day! ....&quot;</span> * <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 误用</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalnum():</span><br><span class="line">        <span class="comment"># 使用重载后的 + 进行组合</span></span><br><span class="line">        letter += char</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="comment"># print(letter)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;直接组成消耗的时间: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line">tmp = []  <span class="comment"># 临时表</span></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        <span class="comment"># append 操作平均为 O(1)</span></span><br><span class="line">        tmp.append(char)</span><br><span class="line"><span class="comment"># 最后再组成字符串</span></span><br><span class="line">letter = <span class="string">&quot;&quot;</span>.join(tmp)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="comment"># print(letter)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用临时表消耗的时间: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">直接组成消耗的时间: 3.8247530460357666</span></span><br><span class="line"><span class="string">使用临时表消耗的时间: 0.07381105422973633</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-插入排序算法">6 插入排序算法</h2><p>从第 2 个元素开始，比较它和之前的元素大小，如果它比前一个元素小，则接着往前比较，直到前一个元素小于它，则插入到这个元素的后面。（从小到大）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741256265390.png" alt="插入排序示意图"></p><h3 id="6-1-代码实现">6.1 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从小到大排序数组</span></span><br><span class="line"><span class="string">    :param arr: 数组</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="comment"># 从第 2 个元素开始</span></span><br><span class="line">        current = arr[i]</span><br><span class="line">        j = i</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> current &lt; arr[j - <span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 当前一个元素不是第 0 个元素且比 current 大时</span></span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>]  <span class="comment"># 后移</span></span><br><span class="line">            j -= <span class="number">1</span>  <span class="comment"># 继续向前找</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入</span></span><br><span class="line">        arr[j] = current</span><br></pre></td></tr></table></figure><h3 id="6-2-算法分析">6.2 算法分析</h3><p>下面考虑的为从小到大排序</p><ul><li>最好的情况：已经是从小到大排序</li></ul><p>此时只需要遍历第 2 个元素到最后一个元素即可，因为每次比较都发现比前一个元素大，没有插入操作。故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><ul><li>最坏的情况：数组为从大到小排序</li></ul><p>此时对第 i 个元素而言，都要插入到最前，前面的 i - 1 个元素均要后移一位，需要操作 <code>i-1 + 1</code> （后移 i - 1 次，插入 1 次）。故对于从第 2 个元素开始遍历，需要次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>2</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum\limits_{i=2}^n\ (i-1+1)\sim n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">2</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> ，故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><p>所以，综合以上分析，插入排序的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><blockquote><p>【注意】插入排序最坏情况才是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，而对于一些运气较好时，插入排序非常高效，可以对比选择排序。</p></blockquote><h3 id="6-3-与选择排序对比">6.3 与选择排序对比</h3><p>每次从未排序的部分中选择最小的元素，将其放到前面已排序部分的末尾。（从小到大）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/selection_sort.jpeg" alt="选择排序示意图"></p><ul><li>选择排序的代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    选择排序：从小到大排序数组</span></span><br><span class="line"><span class="string">    :param arr: 数组</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="comment"># 从起始开始遍历</span></span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_index]:</span><br><span class="line">                min_index = j  <span class="comment"># 找到后面最小的元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将后面最小的元素放到前面子列的末尾</span></span><br><span class="line">        arr[i], arr[min_index] = arr[min_index], arr[i]</span><br></pre></td></tr></table></figure><ul><li>选择排序的算法分析</li></ul><p>无论最好还是最坏（即无轮是从小到大还是从大到小排序的原数组），对于第 i + 1 个位置，选择排序都需要找到 i + 1 到 n 的最小元素，然后插入到第 i 个位置后。即使是从小到大排序好的原数组，都需要遍历以确定是否是最小元素。故复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo><mo>∼</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n\ (n - i) \sim n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 即一定为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p><p>所以，【选择排序不如插入排序高效】。也可以通过下面的例子验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">start = time.time()</span><br><span class="line">insertion_sort(x)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;insertion sort cost &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>)]</span><br><span class="line">start = time.time()</span><br><span class="line">selection_sort(x)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;selection sort cost &#123;&#125;s&quot;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">insertion sort cost 0.0012428760528564453s</span></span><br><span class="line"><span class="string">selection sort cost 2.98787522315979s</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>当遇见最好情况时，插入排序大约消耗了 0.0012 秒，而选择排序则消耗了 2.99 秒，是前者的 2492 倍！</p><h2 id="7-多维数组的误用">7 多维数组的误用</h2><h3 id="7-1-误用">7.1 误用</h3><p>以创建二维数组（矩阵）为例，如果采用如下方式构建数组：【误用】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">0</span>] * n] * m</span><br></pre></td></tr></table></figure><p>可以初始化一个列表，例如 <code>m = 3, n = 6</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">3</span></span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">data = [[<span class="number">0</span>] * n] * m</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure><p>但是此时 data 的第一维度的索引指向的是同一个列表对象，如图：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741262575523.png" alt="误用：指向同一列表对象" style="zoom:50%;" /><p>此时，如果改变 <code>data[0][0]</code> 的值，对应的 <code>data[1][0]</code> 和 <code>data[2][0]</code> 的值会一起变化（因为他们指向同一个列表对象，需要注意，被指向的列表对象 <code>[0, 0, 0, 0, 0, 0]</code> 这 6 个元素存储的是常数 <code>0</code> 的地址）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure><h3 id="7-2-正确使用">7.2 正确使用</h3><p>正确的创建方式：使用 Python 的列表推导式实例化新的列表对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741262889863.png" alt="正确使用"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">3</span></span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">data = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># data = </span></span><br><span class="line"><span class="comment"># [[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍了低层次数组的原理，并自定义实现了 Python 的一个动态数组。并详细分析了底层存储原理、摊销时间。分析了一些基于数组的案例，例如插入排序算法。同时指出了组成字符串和多维数组创建的常见误用。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (3) R 语言初步：基本运算、常见操作和控制流</title>
    <link href="https://blog.iskage.online/posts/8bcfe1ac.html"/>
    <id>https://blog.iskage.online/posts/8bcfe1ac.html</id>
    <published>2025-03-06T09:07:00.000Z</published>
    <updated>2025-03-06T09:14:10.882Z</updated>
    
    <content type="html"><![CDATA[<h1>R 语言初步 (2) 基本运算、常见操作和控制流</h1><p>本章介绍了 R 语言中常见的运算和操作（例如索引），以及针对不同数据类型的不同操作函数（例如 apply 函数）。同时介绍了 R 语言控制流（if-else 条件执行、for while repeat 循环结构）的实现。</p><h2 id="1-基本运算和操作">1 基本运算和操作</h2><h3 id="1-1-向量的下标运算">1.1 向量的下标运算</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">,</span> <span class="number">7</span><span class="punctuation">,</span> <span class="number">8</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">age<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line">age<span class="punctuation">[</span><span class="operator">-</span><span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li><code>a[i]</code> 表示取第 <code>i</code> 个元素</li><li><code>a[c(1, 2, 3)]</code> 表示取第 <code>1 , 2, 3</code> 个元素</li><li><code>a[-1]</code> 表示输出 <code>a</code> 删去第 <code>1</code> 个元素的结果</li><li><code>a[-c(1, 2, 3)]</code> 表示输出 <code>a</code> 删去第 <code>1, 2, 3</code> 个元素的结果</li><li>特别地，索引支持逻辑运算</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1.1</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">,</span> <span class="number">4.4</span><span class="punctuation">,</span> <span class="number">5.5</span><span class="punctuation">,</span> <span class="number">6.6</span><span class="punctuation">,</span> <span class="number">7.7</span><span class="punctuation">,</span> <span class="number">8.8</span><span class="punctuation">,</span> <span class="number">9.9</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> age <span class="operator">&gt;</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> weight<span class="punctuation">[</span>age <span class="operator">&gt;</span> <span class="number">4</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">5.5</span> <span class="number">6.6</span> <span class="number">7.7</span> <span class="number">8.8</span> <span class="number">9.9</span></span><br></pre></td></tr></table></figure><p>可以配合逻辑运算符</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">NA</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">,</span> <span class="number">4.4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.na</span><span class="punctuation">(</span>age<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.na</span><span class="punctuation">(</span>weight<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"><span class="operator">&gt;</span> index <span class="operator">&lt;-</span> <span class="operator">!</span><span class="built_in">is.na</span><span class="punctuation">(</span>age<span class="punctuation">)</span> <span class="operator">&amp;</span> <span class="operator">!</span><span class="built_in">is.na</span><span class="punctuation">(</span>weight<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> age<span class="punctuation">[</span>index<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> weight<span class="punctuation">[</span>index<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2.2</span> <span class="number">4.4</span></span><br></pre></td></tr></table></figure><ul><li><code>is.na()</code> 检查每个元素是否为空，返回一个向量</li><li><code>!</code> 表示非运算；<code>&amp;</code> 表示与运算</li></ul><h3 id="1-2-矩阵的下标运算">1.2 矩阵的下标运算</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">9</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">7</span>    <span class="number">8</span>    <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">8</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">6</span>           <span class="comment"># 按列检索 1, 4, 7, 2, 5, 8, 3, 6, 9 的 第 8 个为 6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span><span class="comment"># 第 1 行 第 2 列</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span><span class="comment"># 行全取，列取第 1 列</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span><span class="comment"># 列全取，行取第 1 行</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span><span class="punctuation">]</span><span class="comment"># 指定读取 第 1 行 第 1 到 2 列 的数据</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">]</span> <span class="comment"># 指定读取 第 1 行 第 1 和 3 列 的数据</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数据框：列向量的访问">1.3 数据框：列向量的访问</h3><h4 id="1-3-1-使用-访问列">1.3.1 使用 $ 访问列</h4><p>使用 <code>$</code> 访问数据库中的列</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %% 数据框</span></span><br><span class="line"><span class="operator">&gt;</span> df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>age <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> weight <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1.1</span><span class="punctuation">,</span> <span class="number">2.2</span><span class="punctuation">,</span> <span class="number">3.3</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">df</span><br><span class="line"><span class="operator">&gt;</span> df</span><br><span class="line">  age weight</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>    <span class="number">1.1</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>    <span class="number">2.2</span></span><br><span class="line"><span class="number">3</span>   <span class="number">3</span>    <span class="number">3.3</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> df<span class="operator">$</span>age</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> df<span class="operator">$</span>weight</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.1</span> <span class="number">2.2</span> <span class="number">3.3</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-使用-attach-和-detach-函数">1.3.2 使用 attach 和 detach 函数</h4><p>也可以使用 <code>attach(df)</code> 进入数据框，然后就可以直接使用列名调用数据，使用 <code>detach(df)</code> 退出数据框</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> attach<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">The following objects are masked from df <span class="punctuation">(</span>pos <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span><span class="operator">:</span></span><br><span class="line"></span><br><span class="line">    age<span class="punctuation">,</span> weight</span><br><span class="line"></span><br><span class="line">age</span><br><span class="line">weight</span><br><span class="line"><span class="operator">&gt;</span> age</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="operator">&gt;</span> weight</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.1</span> <span class="number">2.2</span> <span class="number">3.3</span></span><br><span class="line"><span class="operator">&gt;</span> detach<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p><code>attach</code> 和 <code>detach</code> 也使用与 list 类型</p></blockquote><h3 id="1-4-列表的索引">1.4 列表的索引</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>member <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> name<span class="operator">=</span><span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Jerry&quot;</span><span class="punctuation">,</span> <span class="string">&quot;John&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line"><span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">$</span>name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br></pre></td></tr></table></figure><ul><li>使用 <code>$</code> 索引</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">x<span class="operator">$</span>name</span><br><span class="line"><span class="operator">&gt;</span> x<span class="operator">$</span>name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>attach</code> 和 <code>detach</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> attach<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span></span><br><span class="line"><span class="operator">&gt;</span> name</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> detach<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>取一次 <code>[]</code> 得到的还是列表，需要取 <code>[[]]</code> 得到向量</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">$</span>member</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">3</span>        <span class="comment"># 仍然是 list</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span><span class="comment"># 得到向量</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x<span class="punctuation">[[</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Tom&quot;</span>   <span class="string">&quot;Jerry&quot;</span> <span class="string">&quot;John&quot;</span><span class="comment"># 等价于 x[[1]]</span></span><br></pre></td></tr></table></figure><h2 id="2-常用操作符和函数">2 常用操作符和函数</h2><h3 id="2-1-数值型向量">2.1 数值型向量</h3><h4 id="2-1-1-逐元素计算">2.1.1 逐元素计算</h4><table><thead><tr><th>算术运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td></tr><tr><td><code>-</code></td><td>减</td></tr><tr><td><code>*</code></td><td>乘</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>^</code> 或 <code>**</code></td><td>幂次</td></tr><tr><td><code>x %% y</code></td><td>取余数，等价于 x mod y</td></tr><tr><td><code>x %/% y</code></td><td>除法求商，例如 <code>9 %/% 4 = 2</code></td></tr></tbody></table><ul><li>比较符号返回逻辑运算结果</li><li>其他运算采用逐元素计算的方式</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> 6<span class="operator">:</span><span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">*</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="number">6</span> <span class="number">14</span> <span class="number">24</span> <span class="number">36</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">/</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">0.1666667</span> <span class="number">0.2857143</span> <span class="number">0.3750000</span> <span class="number">0.4444444</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">+</span> y</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span>  <span class="number">7</span>  <span class="number">9</span> <span class="number">11</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><blockquote><p>特别地，R 语言的向量运算中存在<strong>循环法则</strong></p></blockquote><p>当向量长度不同时，会循环复制短的向量，直到长度相等后再运算：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="number">1</span><span class="operator">:</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">4</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">1</span><span class="operator">:</span><span class="number">3</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line">警告信息<span class="operator">:</span></span><br><span class="line">In <span class="number">1</span><span class="operator">:</span><span class="number">3</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">:</span><span class="number">5</span> <span class="operator">:</span> 长的对象长度不是短的对象长度的整倍数</span><br></pre></td></tr></table></figure><p>例如：<code>(1, 2) + (1, 2, 3, 4)</code> 等价于 <code>(1, 2, 1, 2) + (1, 2, 3, 4)</code></p><p>例如：<code>(1, 2, 3) + (1, 2, 3, 4, 5)</code> 等价于 <code>(1, 2, 3, 1, 2) + (1, 2, 3, 4, 5)</code></p><h4 id="2-1-2-一些常见的函数">2.1.2 一些常见的函数</h4><p>例如：<code>sin, cos, tan, asin, acos, atan, atan2, 10g, 10g10, exp</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">max</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求最大值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">min</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求最小值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">range</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求范围，即返回 (max, min)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">sum</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求和</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> diff<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求差分</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">prod</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求累积</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> mean<span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求平均值</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">abs</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求绝对值，逐元素计算</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">sqrt</span><span class="punctuation">(</span>x<span class="punctuation">)</span> <span class="comment"># 求平方根，逐元素计算</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.000000</span> <span class="number">1.414214</span> <span class="number">1.732051</span> <span class="number">2.000000</span></span><br></pre></td></tr></table></figure><h3 id="2-2-数值型矩阵">2.2 数值型矩阵</h3><h4 id="2-2-1-常见操作">2.2.1 常见操作</h4><ul><li><code>t(x)</code> ：转置</li><li><code>diag(X)</code>  ：对角阵</li><li><code>%*%</code> ：矩阵乘法</li><li><code>solve(a, b)</code> ：求解 <code>a %*% X = b</code> 的解 <code>X</code></li><li><code>solve(a)</code> ：矩阵的逆</li><li><code>rowSums(x)</code> ：行方向加和</li><li><code>colSums(x)</code> ：列方向加和</li><li><code>rowMeans(x)</code> ：行平均</li><li><code>colMeans(x)</code> ：列平均</li><li><code>dist(x)</code> ：计算矩阵x行间的距离</li></ul><blockquote><p>简单的 <code>+, -, *, /</code> 仅仅是逐元素计算</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">10</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> x</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">2</span>    <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> y</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">10</span>   <span class="number">10</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">10</span>   <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> rowSums<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="operator">&gt;</span> colMeans<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.5</span> <span class="number">3.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> x <span class="operator">%*%</span> y</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">40</span>   <span class="number">40</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="number">60</span>   <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> solve<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>   <span class="operator">-</span><span class="number">2</span>  <span class="number">1.5</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span> <span class="operator">-</span><span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> dist<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">         <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1.414214</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-apply-函数">2.2.2 apply 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply<span class="punctuation">(</span>x<span class="punctuation">,</span> margin<span class="punctuation">,</span> fun<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x: 矩阵对象</span></span><br><span class="line"><span class="comment"># margin: 1 表示对行操作，2 表示对列操作</span></span><br><span class="line"><span class="comment"># fun: 操作函数</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> z <span class="operator">&lt;-</span> matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">z</span><br><span class="line"><span class="operator">&gt;</span> z</span><br><span class="line">     <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span> <span class="punctuation">[</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span><span class="punctuation">]</span>    <span class="number">2</span>    <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> apply<span class="punctuation">(</span>z<span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="built_in">sum</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> apply<span class="punctuation">(</span>z<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> mean<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1.5</span> <span class="number">3.5</span></span><br></pre></td></tr></table></figure><h3 id="2-3-逻辑型向量">2.3 逻辑型向量</h3><ul><li><code>any()</code> 函数 ：只要有一个逻辑值为 <code>TRUE</code>，返回 <code>TRUE</code></li><li><code>all()</code> 函数 ：所有逻辑值均为 <code>TRUE</code> 时，返回 <code>TRUE</code></li><li><code>which()</code> 函数 ： 返回 <code>TRUE</code> 的位置</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">,</span> <span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">any</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">all</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> which<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2-4-字符型向量">2.4 字符型向量</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1741246687101.png" alt="针对字符型的操作函数"></p><h4 id="2-4-1-paste-函数">2.4.1 paste 函数</h4><ul><li><code>paste()</code> 函数可以将多个字符串连接成一个字符串</li></ul><p><code>paste(str1, str2, ..., sep = &quot; &quot;)</code> 默认以空格隔开，此时合并的是各个元素 <code>str</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> <span class="string">&quot;the&quot;</span><span class="punctuation">,</span> <span class="string">&quot;world&quot;</span><span class="punctuation">,</span> <span class="string">&quot;!&quot;</span><span class="punctuation">)</span> <span class="comment"># 默认 sep 空格隔开</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello the world !&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;file&quot;</span><span class="punctuation">,</span> <span class="string">&quot;100&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.csv&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span> <span class="comment"># 指定 sep 为空</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;file100.csv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="string">&quot;file&quot;</span><span class="punctuation">,</span> <span class="string">&quot;100&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.csv&quot;</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;file 100 .csv&quot;</span></span><br></pre></td></tr></table></figure><p><code>paste(vector1, vector2, ..., sep = &quot; &quot;, collapse = NULL)</code> 连接向量时，默认空格分割各个元素，但默认 <code>collapse</code> 为空，即不连接最后的字符型向量。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;th&quot;</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span>  <span class="comment"># collapse = NULL 返回字符类型向量</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;1th&quot;</span> <span class="string">&quot;2th&quot;</span> <span class="string">&quot;3th&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> paste<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">3</span><span class="punctuation">,</span> <span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;th&quot;</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;-&quot;</span><span class="punctuation">,</span> collapse <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">)</span>  <span class="comment"># 指定 collapse 返回一个字符串</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;1-th,2-th,3-th&quot;</span></span><br></pre></td></tr></table></figure><p><code>sep</code> 代表每个元素内的连接方式，<code>collapse</code> 代表每个元素间是否连接和连接方式。</p><blockquote><p>第一个等价于 <code>paste(1:3, &quot;th&quot;, sep = &quot;&quot;)</code> ：只要有一个向量就会返回字符类型向量</p></blockquote><h4 id="2-4-2-strsplit-函数">2.4.2  strsplit 函数</h4><p><code>strsplit</code> 函数用来分割字符串</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x: 字符串</span></span><br><span class="line"><span class="comment"># split : 分割符，按照 split 分割</span></span><br><span class="line"><span class="comment"># 返回一个字符串列表</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="string">&quot;hello the world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello&quot;</span> <span class="string">&quot;the&quot;</span>   <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line">strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;h&quot;</span> <span class="string">&quot;e&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;o&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;t&quot;</span> <span class="string">&quot;h&quot;</span> <span class="string">&quot;e&quot;</span> <span class="string">&quot; &quot;</span> <span class="string">&quot;w&quot;</span> <span class="string">&quot;o&quot;</span> <span class="string">&quot;r&quot;</span> <span class="string">&quot;l&quot;</span> <span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> strsplit<span class="punctuation">(</span>x<span class="punctuation">,</span> split <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> y<span class="punctuation">[[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>返回的是列表，先取 <code>[[1]]</code> 把向量取出，然后 <code>[1]</code> 取出向量的第一个元素。</p></blockquote><h4 id="2-4-3-substr-函数">2.4.3 substr 函数</h4><p><code>substr</code> 函数提取子字符串</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">substr<span class="punctuation">(</span>x<span class="punctuation">,</span> from<span class="punctuation">,</span> stop<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x : 字符串</span></span><br><span class="line"><span class="comment"># from : 从 from 开始提取</span></span><br><span class="line"><span class="comment"># stop : 直到 stop 停止</span></span><br><span class="line"><span class="comment"># 返回一个字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="string">&quot;1234&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> substr<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;23&quot;</span></span><br></pre></td></tr></table></figure><p>也可对向量进行操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span> <span class="string">&quot;456&quot;</span><span class="punctuation">,</span> <span class="string">&quot;789&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> substr<span class="punctuation">(</span>x<span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;2&quot;</span> <span class="string">&quot;5&quot;</span> <span class="string">&quot;8&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-控制流">3 控制流</h2><h3 id="3-1-if-else-条件执行">3.1 if-else 条件执行</h3><p>在R语言中，<code>if-else</code> 语句用于根据条件执行不同的代码块。它是一种控制流语句，允许程序根据条件的真假选择执行不同的操作。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果条件为假，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 3</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">if</span> <span class="punctuation">(</span>x <span class="operator">&gt;</span> <span class="number">5</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="operator">+</span>     print<span class="punctuation">(</span><span class="string">&quot;x 大于 5&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">+</span> <span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="operator">+</span>     print<span class="punctuation">(</span><span class="string">&quot;x 小于或等于 5&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">+</span> <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;x 小于或等于 5&quot;</span></span><br></pre></td></tr></table></figure><ul><li>同样也具有 <code>if-else if -else</code> 语句结构</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="punctuation">(</span>condition1<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 如果 condition1 条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="keyword">if</span> <span class="punctuation">(</span>condition2<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 如果 condition2 条件为真，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span> <span class="keyword">else</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment"># 否则，执行此代码块</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-ifelse-函数">3.2 ifelse 函数</h3><p><code>ifelse()</code> 对向量中的每个元素进行条件判断并返回结果，得到一个向量。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifelse<span class="punctuation">(</span>condition<span class="punctuation">,</span> statement1<span class="punctuation">,</span> statement2<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># condition 条件为 TRUE 则返回 statement1</span></span><br><span class="line"><span class="comment"># condition 条件为 FALSE 则返回 statement2</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> score <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">40</span><span class="punctuation">,</span> <span class="number">50</span><span class="punctuation">,</span> <span class="number">60</span><span class="punctuation">,</span> <span class="number">70</span><span class="punctuation">,</span> <span class="number">80</span><span class="punctuation">,</span> <span class="number">90</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> result <span class="operator">&lt;-</span> ifelse<span class="punctuation">(</span>score <span class="operator">&gt;=</span> <span class="number">60</span><span class="punctuation">,</span> <span class="string">&quot;Pass&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Fail&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> result</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;Fail&quot;</span> <span class="string">&quot;Fail&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span> <span class="string">&quot;Pass&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-for-循环">3.3 for 循环</h3><p><code>for</code> 循环 ：重复地执行一个语句，直到某个变量 <code>var</code> 的值不再包含在序列 <code>seq</code> 中为止。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>var <span class="keyword">in</span> seq<span class="punctuation">)</span> statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>var <span class="keyword">in</span> seq<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="punctuation">(</span>i <span class="keyword">in</span> <span class="number">1</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>i <span class="operator">%%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        string <span class="operator">&lt;-</span> paste<span class="punctuation">(</span><span class="string">&quot;i=&quot;</span><span class="punctuation">,</span> i<span class="punctuation">)</span></span><br><span class="line">        print<span class="punctuation">(</span>string<span class="punctuation">)</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出偶数</span></span><br></pre></td></tr></table></figure><h3 id="3-4-while-循环">3.4 while 循环</h3><p><code>while</code> 循环 ：重复地执行一个语句，直到条件不为真为止。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    statement</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i <span class="operator">&lt;-</span> 0</span><br><span class="line"><span class="keyword">while</span> <span class="punctuation">(</span>i <span class="operator">&lt;</span> <span class="number">10</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    print<span class="punctuation">(</span>i<span class="punctuation">)</span></span><br><span class="line">    i <span class="operator">&lt;-</span> i <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 0 - 9</span></span><br></pre></td></tr></table></figure><h3 id="3-5-repeat-循环">3.5 repeat 循环</h3><p><code>repeat</code> 循环是一种无限循环结构，它会重复执行代码块，直到显式地使用 <code>break</code> 语句退出循环。</p><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment"># 代码块</span></span><br><span class="line">  <span class="keyword">if</span> <span class="punctuation">(</span>condition<span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> 1</span><br><span class="line"><span class="keyword">repeat</span> <span class="punctuation">&#123;</span></span><br><span class="line">    print<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line">    x <span class="operator">&lt;-</span> x <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="punctuation">(</span>x <span class="operator">&gt;</span> <span class="number">5</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不断递增，直到大于 5</span></span><br></pre></td></tr></table></figure><blockquote><p>在R语言中，循环的效率可能较低。尤其是在处理大规模数据时。为了提高代码效率，R提供了许多内建函数和<code>apply</code>族函数，它们通常是基于C语言实现的，执行速度更快。R 语言提高效率的方法大多来自向量计算，使用循环会破坏这种高效的计算方式。</p></blockquote>]]></content>
    
    
    <summary type="html">本章介绍了 R 语言中常见的运算和操作（例如索引），以及针对不同数据类型的不同操作函数（例如 apply 函数）。同时介绍了 R 语言控制流（if-else 条件执行、for while repeat 循环结构）的实现。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作系统：命令帮助和快捷使用</title>
    <link href="https://blog.iskage.online/posts/50fa0735.html"/>
    <id>https://blog.iskage.online/posts/50fa0735.html</id>
    <published>2025-03-05T02:03:00.000Z</published>
    <updated>2025-03-05T02:52:34.903Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux 命令帮助和快捷使用</h1><h2 id="1-命令格式和选项">1 命令格式和选项</h2><h3 id="1-1-命令格式">1.1 命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@linux: ~$ ...</span><br></pre></td></tr></table></figure><ul><li><code>user</code> 表示当前用户</li><li><code>linux</code> 表示主机名</li><li><code>～</code> 表示当前目录，<code>~</code> 表示用户 home 目录</li><li><code>$</code> 表示用户类型，<code>$</code> 表示普通用户，<code>#</code> 表示 root 用户</li></ul><p>命令：一般一行一个命令，也允许多行，使用 <code>\</code> 表示这一行命令没有结束，多行的命令以 <code>&gt;</code> 起始。</p><p>命令格式：一般命令包括了三个部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [options] arguments</span><br></pre></td></tr></table></figure><ul><li><code>command</code> 代表命令，可以是别名、shell 内置命令、外部命令、shell 函数等</li><li><code>options</code> 代表选项，命令执行时要使用的可选的属性或者功能</li><li><code>arguments</code> 代表参数，是命令作用的对象，0 个或者多个</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="built_in">rm</span> -r ~/documents/doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># rm       是命令</span></span><br><span class="line"><span class="comment"># -r   是选项</span></span><br><span class="line"><span class="comment"># ~/documents/doc 是参数，即被执行的对象</span></span><br></pre></td></tr></table></figure><h3 id="1-2-命令格式：选项-options">1.2 命令格式：选项 [options]</h3><p>选项根据连字符 <code>-</code> 个数分为<strong>短选项</strong>和<strong>长选项</strong>：</p><ul><li>短选项：以 <code>-</code> 开始，紧跟单个字符。当选项无须参数时，可以合并单字符。</li><li>长选项：以 <code>--</code> 开始，紧跟单词。后跟参数采用 <code>--option=value</code> 等号前后都不能有空格。</li></ul><blockquote><p><em>几乎</em>所有命令都有 <code>--help</code> 和 <code>--version</code> 选项。</p></blockquote><h2 id="2-联机手册-man-命令">2 联机手册 man 命令</h2><p>对于外部命令，我们需要查看帮助文档。</p><ul><li>软件文档：一般存放在 <code>/usr/share/doc</code> 中，可通过 <code>less</code>、<code>zless</code> （查看压缩过的文本文件）和 <code>web</code> 浏览器（查看html文件）查看。</li><li><code>man</code> 命令查看联机手册，采用 <code>less</code> 分页查看。</li></ul><p>联机手册可以理解为一些命令的帮助文档，一般包含了：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740989011537.png" style="zoom:33%;" /><ul><li><code>man cmd</code> ：查看名字为 cmd 的联机手册</li><li><code>whatis cmd</code> ：在索引库中查找命令名与 cmd 匹配的条目，并且仅仅显示这些条目的一句话的 NAME 信息</li><li><code>apropos cmd</code> ：在索引库中，基于命令名以及 NAME 部分的内容，查找与 cmd 匹配的条目，仅仅显示 NAME 信息</li></ul><h3 id="2-1-已知命令使用-man-查看帮助">2.1 已知命令使用 man 查看帮助</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man cmd  <span class="comment"># 查看 cmd 命令的联机手册 </span></span><br></pre></td></tr></table></figure><ul><li><code>-f</code> 查看名字匹配的命令的 NAME 部分的内容（whatis 提供类似更全面的功能）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -f <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">whatis <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> (1)               - list directory contents</span><br></pre></td></tr></table></figure><ul><li><code>-k</code> 搜索 NAME 部分，列出匹配的命令（apropos 提供类似更全面的功能）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -k <span class="string">&#x27;list directory contents&#x27;</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">apropos –r <span class="string">&#x27;list directory contents&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740990211922.png" style="zoom:50%;" /><h3 id="2-2-whatis-通过匹配查找命令">2.2 whatis 通过匹配查找命令</h3><ul><li><code>whatis</code> 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whatis [options] name</span><br><span class="line"></span><br><span class="line">-e, --exact  : 采用精确匹配，默认</span><br><span class="line">-r, --regex  : 正则表达式匹配，命令名部分匹配</span><br><span class="line">-w, --wildcard   : 通配符匹配</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whatis -e <span class="built_in">ls</span>     <span class="comment"># 精确匹配 ls 与 man -f ls 等价</span></span><br><span class="line"></span><br><span class="line">whatis -r mkdi   <span class="comment"># 部分匹配，包含 mkdi 即可，会查找出 mkdir</span></span><br><span class="line"></span><br><span class="line">whatis -w <span class="string">&#x27;m*dir&#x27;</span><span class="comment"># 匹配 m 开始，dir 结束的命令</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740990706834.png" style="zoom:50%;" /><h3 id="2-3-apropos-通过-NAME-匹配命令">2.3 apropos 通过 NAME 匹配命令</h3><ul><li><code>apropos</code> 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apropos [OPTION] keywords</span><br><span class="line"></span><br><span class="line">-r, --regex         : 默认，采用正则表达式，模糊匹配</span><br><span class="line">-e, --exact    : 采用精确匹配</span><br><span class="line">-w, --wildcard : 采用通配符匹配</span><br><span class="line">-a, --and : 匹配所有的关键字，缺省匹配任意一个</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apropos -r <span class="string">&#x27;list directory contents&#x27;</span></span><br><span class="line"></span><br><span class="line">apropos -e <span class="string">&#x27;list directory contents on&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740991383960.png" style="zoom:50%;" /><h2 id="3-内置命令帮助">3 内置命令帮助</h2><h3 id="3-1-help-查看内置命令帮助">3.1 help 查看内置命令帮助</h3><p><strong>外部命令</strong>：可独立运行的可执行程序</p><ul><li>例如 <code>ls</code> 可执行程序位于 <code>/usr/bin/ls</code></li></ul><p><strong>内置命令</strong>：当前正在执行的终端 shell 所提供的命令</p><ul><li><code>help</code> 内置命令可查看 shell 内置命令相应的帮助信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> [options] [arguments]</span><br><span class="line"></span><br><span class="line">-s : 仅查看语法</span><br><span class="line">-m : 以联机手册形式查看，即采用 less 分页方式查看帮助文档</span><br><span class="line"></span><br><span class="line">[arguments] 可以指定特定的命令</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> -s <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 </span></span><br><span class="line"><span class="built_in">cd</span>: <span class="built_in">cd</span> [-L|[-P [-e]] [-@]] [<span class="built_in">dir</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> <span class="keyword">for</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="keyword">for</span>: <span class="keyword">for</span> NAME [<span class="keyword">in</span> WORDS ... ] ; <span class="keyword">do</span> COMMANDS; <span class="keyword">done</span></span><br><span class="line">    Execute commands <span class="keyword">for</span> each member <span class="keyword">in</span> a list.</span><br><span class="line">    </span><br><span class="line">    The `<span class="keyword">for</span><span class="string">&#x27; loop executes a sequence of commands for each member in a</span></span><br><span class="line"><span class="string">    list of items.  If `in WORDS ...;&#x27;</span> is not present, <span class="keyword">then</span> `<span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span><span class="string">&#x27; is</span></span><br><span class="line"><span class="string">    assumed.  For each element in WORDS, NAME is set to that element, and</span></span><br><span class="line"><span class="string">    the COMMANDS are executed.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Exit Status:</span></span><br><span class="line"><span class="string">    Returns the status of the last command executed.</span></span><br></pre></td></tr></table></figure><h3 id="3-2-info-查看任意命令">3.2 info 查看任意命令</h3><p>针对不同的命令，查看帮助文档却要用不同的指令，这显然是很繁琐的。所以，<code>info</code> 提供了简单的查找方式。直接通过 <code>info cmd</code> 即可查看 <code>cmd</code> 的联机手册。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZuf695p5vw7py8urm4h4fZ:~# <span class="built_in">help</span> <span class="built_in">ls</span></span><br><span class="line">-bash: <span class="built_in">help</span>: no <span class="built_in">help</span> topics match `<span class="built_in">ls</span><span class="string">&#x27;.  Try `help help&#x27;</span> or `man -k <span class="built_in">ls</span><span class="string">&#x27; or `info ls&#x27;</span>.</span><br><span class="line">root@iZuf695p5vw7py8urm4h4fZ:~# info <span class="built_in">ls</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><code>help</code> 查看不了 <code>ls</code> 这个外部命令，但是 <code>info ls</code> 却可以直接跳转进 <code>ls</code> 的联机手册。</p></blockquote><ul><li><code>&lt;Space&gt;</code> 查看下一页</li><li><code>&lt;Delete&gt;</code> 查看上一页</li><li><code>q</code> 退出 <code>info</code> 界面</li><li><code>H</code> 查看 <code>info</code> 所有命令</li><li><code>h</code> 进入 <code>info</code> 教程</li></ul><h2 id="4-命令历史">4 命令历史</h2><p>用户输入的命令会被保存到历史列表，文件存放于 <code>~/.bash_history</code> ，下次打开终端 shell 时也会去  <code>~/.bash_history</code> 加载。</p><ul><li>如果当前命令与上一个命令完全一致，不会加入</li><li>以空白字符开始的命令，不会加入（所以，可以通过先键入空格，而后输入命令的方式，使得命令不被记录）</li></ul><h3 id="4-1-history-命令">4.1 history 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> [n]</span><br></pre></td></tr></table></figure><p><code>history</code> 命令查看命令历史列表，<code>n</code> 指定最近 n 条记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> -c <span class="comment"># 清楚历史记录</span></span><br><span class="line"><span class="built_in">history</span> -r <span class="comment"># 从 history 文件加载历史记录</span></span><br><span class="line"><span class="built_in">history</span> -w (<span class="built_in">history</span> -a) <span class="comment"># 将历史记录写入/附加到历史记录文件</span></span><br></pre></td></tr></table></figure><h3 id="4-2-历史记录扩展">4.2 历史记录扩展</h3><table><thead><tr><th>调用历史记录的命令</th><th>作用</th></tr></thead><tbody><tr><td><code>!num</code></td><td>执行编号 num 的历史命令</td></tr><tr><td><code>!!</code></td><td>执行最近一次历史命令，等价于 <code>!-1</code></td></tr><tr><td><code>!str</code></td><td>执行最近一次以 str 开始的命令</td></tr><tr><td><code>!?str</code></td><td>执行最近一次包含 str 的命令</td></tr><tr><td><code>!$</code></td><td>上一条命令的最后一个单词</td></tr><tr><td><code>!*</code></td><td>上一个命令的所有参数</td></tr></tbody></table><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!l</span><br><span class="line"><span class="comment"># 如果最近有 ls 命令，则会执行 ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!?<span class="built_in">dir</span></span><br><span class="line"><span class="comment"># 如果最近有 mkdir 名，则会执行 mkdir</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!$</span><br><span class="line"><span class="comment"># 如果有命令 ls ./ 则会返回 ./</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!*</span><br><span class="line"><span class="comment"># 如果有命令 ls -a 则会返回 -a</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>!</code> 后均无空格</p></blockquote><h2 id="5-自动完成">5 自动完成</h2><p>输入命令的一部分，按 <code>&lt;Tab&gt;</code> 键或 <code>&lt;Ctrl&gt; + I</code> 触发自动完成功能。如果有多个可选项或者没有可选项时会发出提示声表示有歧义。</p><p>例如：下例按下 Tab 键后，会发出提示音，再按一下，则会返回所有可能结果（文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> .bash&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">.bash_history  .bashrc </span><br></pre></td></tr></table></figure><p>例如：按下 Tab 键后，会发出提示音，再按一下，则会返回所有可能结果（命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">ls</span>lsb_releaselscpulsinitramfslslockslsmemlsnslspcilsusblsattrlsblklshwlsipclsloginslsmodlsoflspgpot</span><br></pre></td></tr></table></figure><h2 id="6-命令别名">6 命令别名</h2><h3 id="6-1-alias-查看命令别名">6.1 alias 查看命令别名</h3><p>有时设置一些命令的别名能方便命令的输入。可以使用 <code>alias</code> 查看别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>这说明了输入 <code>l</code> 相当于输入 <code>ls -CF</code> ；输入 <code>la</code> 相当于输入 <code>ls -A</code></p></blockquote><h3 id="6-2-自定义别名">6.2 自定义别名</h3><ul><li>可以进入 <code>~/.bashrc</code> 中修改（永久修改）【推荐单独创建文件 <code>.bash_aliases</code>】</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740996227062.png" alt="./bashrc 文件内容" style="zoom:30%;" /><p>在用户目录下创建文件 <code>.bash_aliases</code> 写入例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_aliases</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd alias</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># history alias</span></span><br><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br></pre></td></tr></table></figure><p>然后 <code>source .bashrc</code> 之后，便可永久保存别名。</p><ul><li>也可以直接命令输入（不会保存）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> &lt;别名&gt;=<span class="string">&#x27;&lt;完整命令&gt;&#x27;</span>  <span class="comment"># = 无空格</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>设置 <code>h</code> 扩展为 <code>history 20</code> ；<code>..</code> 扩展为 <code>cd ..</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> h</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-取消别名与不进行别名扩展">6.3 取消别名与不进行别名扩展</h3><ul><li>取消别名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unalias</span> &lt;别名&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>unalias -a</code> 取消所有别名</p></blockquote><ul><li><code>\</code> 表示不适用别名扩展</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="7-终端组合键">7 终端组合键</h2><h3 id="7-1-终端-shell-组合键">7.1 终端 shell 组合键</h3><table><thead><tr><th>组合键</th><th>含义</th></tr></thead><tbody><tr><td><code>Ctrl + D</code></td><td>EOF 输入结束</td></tr><tr><td><code>Ctrl + C</code></td><td>中断进程</td></tr><tr><td><code>Ctrl + \</code></td><td>退出进程，对应的内存状态保存到 core 文件</td></tr><tr><td><code>Ctrl + Z</code></td><td>发送终端停止信号，前台作业暂停并放入后台</td></tr><tr><td><code>Ctrl + H</code> 或 <code>&lt;Delete&gt;</code></td><td>删除光标前的最后一个字符</td></tr><tr><td><code>Ctrl + W</code></td><td>删除光标前的最后一个单词，以空格为分割</td></tr><tr><td><code>Ctrl + U</code></td><td>删除这一行</td></tr></tbody></table><blockquote><p><code>fg</code> 命令：将后台作业切换到前台执行；<code>bg</code> 命令：将暂停的作业切换到后台执行</p></blockquote><p>使用命令，可以查看这些组合键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">speed 9600 baud; rows 35; columns 130; line = 0;</span><br><span class="line">intr = ^C; quit = ^\; erase = ^?; <span class="built_in">kill</span> = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S;</span><br><span class="line">susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; discard = ^O; min = 1; <span class="keyword">time</span> = 0;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输入 <code>Ctrl + V</code> 再按 <code>Ctrl + </code> 得到字符 <code>^</code></p><h3 id="7-2-bash-组合键">7.2 bash 组合键</h3><p>bash 使用 <code>readline</code> 库新增其他组合键。</p><table><thead><tr><th>快捷键</th><th>含义</th></tr></thead><tbody><tr><td><code>Ctrl + A</code></td><td>光标移动到行首</td></tr><tr><td><code>Ctrl + E</code></td><td>光标移动到行尾</td></tr><tr><td><code>Ctrl + L</code></td><td>清屏并移动光标到左上角，等价于 <code>clear</code> 命令</td></tr><tr><td><code>Ctrl + _</code></td><td>撤回之前的操作</td></tr><tr><td><code>Ctrl + K</code></td><td>剪切光标处到结尾的字符</td></tr><tr><td><code>Ctrl + Y</code></td><td>在光标处粘贴</td></tr></tbody></table><p>配置文件位于 <code>/etc/inputrc</code> ，建议在 <code>~/.inputrc</code> 中配置。</p>]]></content>
    
    
    <summary type="html">本文介绍了在 Linux 系统中如何查找相关命令和命令的帮助文档。如何命名和管理命令的别名以及一些组合键的使用。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="ssh" scheme="https://blog.iskage.online/tags/ssh/"/>
    
    <category term="远程连接" scheme="https://blog.iskage.online/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作系统：ssh 远程连接服务器和基本指令</title>
    <link href="https://blog.iskage.online/posts/e0a5070b.html"/>
    <id>https://blog.iskage.online/posts/e0a5070b.html</id>
    <published>2025-03-03T07:03:00.000Z</published>
    <updated>2025-03-03T07:10:35.419Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux 操作系统概述</h1><p>本文介绍了使用 ssh 进行 Linux 系统服务区的远程访问与一些简单的命令。服务器可以去往各大服务器商购买，或者在本地安装虚拟机，针对 mac 用户 Linux 操作系统的指令大多可以直接使用，windows 系统的 wsl 或 powershell 也满足 Linux 的习惯。</p><h2 id="1-Linux-的远程访问-ssh">1 Linux 的远程访问 ssh</h2><h3 id="1-1-本地生成-ssh-密钥">1.1 本地生成 ssh 密钥</h3><p>在本地用户目录 <code>~</code> 下终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><blockquote><p>会要求设置密码，可以设置也可以不设置，这个密码只是未来使用 ssh 连接时需要输入的。</p></blockquote><p>便会在用户目录下生成文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">├── id_rsa</span><br><span class="line">└── id_rsa.pub</span><br></pre></td></tr></table></figure><p>其中 <code>id_rsa</code> 为私钥，不可泄漏；<code>id_rsa.pub</code> 为公钥，未来将放置在其他主机上的。</p><h3 id="1-2-服务器存储公钥">1.2 服务器存储公钥</h3><p>在需要登陆的服务器用户目录下创建文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">└── authorized_keys</span><br></pre></td></tr></table></figure><p>将本地主机的公钥 <code>id_rsa.pub</code> 内容复制到远程服务器 <code>.ssh/authorized_keys</code> 文件中。</p><h3 id="1-3-登陆远程服务器">1.3 登陆远程服务器</h3><p>此时就可以通过 ssh 建立安全的访问。</p><ul><li>方式一：直接输入远程的 ip 地址</li></ul><p>在本地主机终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh@&lt;ip地址&gt;</span><br></pre></td></tr></table></figure><p>之后即可通过 ssh 登陆。但相对复杂，推荐使用本地配置登陆。</p><ul><li>方式二：自定义配置文件 <code>config</code></li></ul><p>在本地主机的 <code>~/.ssh/</code> 目录下创建配置文件 <code>config</code> ，<code>.ssh/</code> 目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">├── config</span><br><span class="line">├── id_rsa</span><br><span class="line">└── id_rsa.pub</span><br></pre></td></tr></table></figure><p>在 <code>config</code> 文件中写入配置</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># config 文件，以阿里云服务器为例</span><br><span class="line"></span><br><span class="line"># Aliyun Server</span><br><span class="line">Host &lt;别名&gt;</span><br><span class="line">    HostName &lt;公网ip&gt;</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><blockquote><p><code>#</code> 表示注释，<code>Host</code> 后的可以自定义别名，<code>Hostname</code> 后填入服务器的 ip 地址，<code>User</code> 表示想要登陆的远程服务器用户，例如 <code>root</code> 表示直接登陆到管理员用户，<code>Port 22</code> 表示通过端口 22 连接。</p></blockquote><p>以上配置完成后，直接在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;别名&gt;</span><br></pre></td></tr></table></figure><p>即可登陆。</p><h3 id="1-4-known-hosts-文件">1.4 known_hosts 文件</h3><p>有时，当远端服务器也使用了 <code>ssh-keygen</code> 产生密钥时，本地 <code>.ssh/</code> 目录下会有 <code>known_hosts</code> 文件，其保存了远方 ssh 服务器的公钥，确认是否是之前连接的服务器。</p><h3 id="1-5-文件传输-ssh-cat-或-scp">1.5 文件传输 ssh + cat 或 scp</h3><p>当按照上面配置完成了 ssh 和远程服务器别名后，可以进行快捷的文件传输。</p><ul><li>对于小文件，可以直接使用 <code>cat + ssh</code> 的方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/a.txt | ssh &lt;别名&gt; <span class="string">&#x27;cat &gt; /root/file.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>将本地 <code>~/a.txt</code> 文件复制传输到远程服务器 <code>&lt;别名&gt;</code> 的 <code>/root/file.txt</code> 文件。</p><ul><li>对于大文件，可以使用 <code>scp</code> 递归传输文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/localFile &lt;别名&gt;:/root</span><br></pre></td></tr></table></figure><p>将本地的 <code>~/localFile</code> 文件夹传输到远程服务器 <code>&lt;别名&gt;</code> 的 <code>/root</code> 路径下。</p><h2 id="2-Linux-的简单使用">2 Linux 的简单使用</h2><h3 id="2-1-登录后的信息">2.1 登录后的信息</h3><p>每次登陆 Linux 系统后，会显示 <code>motd</code> (Message of the day) 以及上次登陆的时间和地点。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740976579623.png" style="zoom:23%;" /><ul><li><code>last</code> 命令查看当前或指定用户以前的成功登录情况，来源于 <code>/var/log/wtmp</code></li></ul><h3 id="2-2-注销">2.2 注销</h3><p>退出 Linux 操作系统的文本终端，可以使用：</p><ul><li><code>logout</code></li><li><code>exit</code></li><li>组合 <code>Ctrl + D</code> 退出，代表 <code>EOF (End Of File)</code></li></ul><p>如果不希望按下组合键一次就退出，可以设置 <code>IGNOREEOF</code> ，以免误触</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> IGNOREEOF=3 &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>如此，就需要按压 3 次 <code>Ctrl + D</code> 才能退出。如果只按一次，则会出现以下情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@&lt;name&gt;:~# </span><br><span class="line">Use <span class="string">&quot;logout&quot;</span> to leave the shell.</span><br></pre></td></tr></table></figure><blockquote><p>或者进入用户目录的 <code>.bashrc</code> 文件添加一行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 .bashrc 文件，输入 I 进入编辑模式</span></span><br><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc 文件，添加一行</span></span><br><span class="line">IGNOREEOF=3</span><br></pre></td></tr></table></figure><p>键入 <code>esc</code> 退出编辑模式，输入 <code>:wq</code> 保存并退出。然后在终端输入以下指令以永久生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><h3 id="2-3-关机和重启">2.3 关机和重启</h3><p>在命令行可通过【不推荐】</p><ul><li><code>poweroff</code> 立刻关机并断电</li><li><code>halt</code> 立刻关机</li><li><code>reboot</code> 立刻重启</li></ul><p>【推荐】使用 <code>shutdown</code> 命令指定时间进行关机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [OPTIONS...] [TIME] [WALL...]</span><br></pre></td></tr></table></figure><ul><li><code>[TIME]</code> 填入命令执行的时间：例如 <code>+m</code> 或 <code>m</code> 表示 m 分钟后执行；<code>now</code> 表示立马执行；不指定则默认 1 分钟后执行。或者采用 <code>hh:mm</code> 表示在 hh 时 mm 分时刻执行。</li><li><code>WALL...</code> 要发送的消息，可不传递。</li><li><code>[OPTIONS...]</code> 可项的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 查看 shutdown 的帮助信息</span><br><span class="line">--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">2. 关机（默认，可省略）</span><br><span class="line">-P 或 -h 或 --poweroff</span><br><span class="line"></span><br><span class="line">3. 重启</span><br><span class="line">-r 或 --reboot</span><br><span class="line"></span><br><span class="line">4. 取消前面的命令</span><br><span class="line">-c</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r 10  <span class="comment"># 十分钟后重启</span></span><br><span class="line">Reboot scheduled <span class="keyword">for</span> Mon 2025-03-03 14:08:42 CST, use <span class="string">&#x27;shutdown -c&#x27;</span> to cancel.</span><br><span class="line">shutdown -c   <span class="comment"># 取消操作</span></span><br><span class="line"></span><br><span class="line">shutdown   <span class="comment"># 默认 1 分钟后关机并断电</span></span><br><span class="line">shutdown -c   <span class="comment"># 取消操作</span></span><br><span class="line"></span><br><span class="line">shutdown -r now <span class="comment"># 立即重启</span></span><br></pre></td></tr></table></figure><h3 id="2-4-查看系统信息">2.4 查看系统信息</h3><ul><li><code>hostname</code> ：查看主机的名字（主机名存储在文件 <code>/etc/hostname</code> 中）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@&lt;主机名&gt;:~# hostname</span><br><span class="line">&lt;主机名&gt;</span><br></pre></td></tr></table></figure><ul><li><code>uname</code> ：可以查看更多的系统信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-a  : 显示所有信息</span><br><span class="line">-s  : 内核名，例如 Linux 或 Darwin (MacOS)</span><br><span class="line">-r  : 内核发行版本号</span><br><span class="line">-n  : 节点名</span><br><span class="line">-v  : 内核版本</span><br><span class="line">-m  : 主机硬件架构</span><br><span class="line">-o  : 操作系统，结果为 GNU/Linux 等</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982042004.png" alt=""></p><ul><li><code>lsb_release</code> ：查看 LSB (Linux Standard Base) 一些 Linux 版本信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a  : 查看所有信息 </span><br><span class="line">-i  : 查看发行者 ID</span><br><span class="line">-d  : 发行版描述 </span><br><span class="line">-r  : 发行版发行号 </span><br><span class="line">-c  : 发行版代号</span><br><span class="line">-s  : 短格式，不包括前面的头部部分</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982156204.png" alt=""></p><h3 id="2-5-查看用户信息">2.5 查看用户信息</h3><ul><li><code>whoami</code> ：登录用户名</li><li><code>id</code> ：查看当前用户（也可查看其他用户）的用户和组信息</li><li><code>who</code> ：查看当前系统正在登录的用户信息</li><li><code>uptime</code> ：查看系统运行时间和负载等信息</li><li><code>w</code> ：<code>uptime</code> 和 <code>who</code> 结合的功能，还可查看用户在做什么</li><li><code>tty</code> ：查看当前所连接的终端设备文件</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982352680.png" style="zoom:33%;" /><h3 id="2-6-阅读文本文件">2.6 阅读文本文件</h3><ul><li><code>cat</code> ：阅读文本文件，不分页</li><li><code>more</code> ：阅读文本文件，分页</li><li><code>less</code> ：与 <code>more</code> 相似，但功能更多</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">less &lt;file&gt;</span><br><span class="line"></span><br><span class="line">-- 显示一页内容，然后等待用户的输入 --</span><br><span class="line">h    : 显示帮助 </span><br><span class="line">q        : 退出</span><br><span class="line">&lt;Space&gt; or f  : 查看下一页 </span><br><span class="line">b   : 查看上一页</span><br><span class="line">/xxx          : 向前搜索 xxx </span><br><span class="line">n             : 重复上次搜索（方向不变）</span><br><span class="line">?xxx          : 向后搜索 xxx </span><br><span class="line">N             : 重复上次搜索，但是反方向</span><br><span class="line">:n            : 切换到下一个文件 </span><br><span class="line">:p            : 切换到前一个文件</span><br><span class="line">v   : 采用相应的编辑器来编辑本文件</span><br></pre></td></tr></table></figure><h3 id="2-7-文件编辑">2.7 文件编辑</h3><p>例如：<code>vim</code> 或 <code>nano</code></p><p>使用 <code>nano</code> （<code>Meta</code> 键一般为 <code>Alt</code> 键）</p><ul><li><code>Ctrl + O</code> 保存</li><li><code>Ctrl + X</code> 退出，如有修改，会询问是否保存</li><li><code>Ctrl + G</code> 查看帮助</li><li><code>Shift + &lt;- or -&gt;</code> 使用 Shift 加键盘向左/右，可以选定一段文字</li><li><code>Ctrl + K</code> 剪切</li><li><code>Ctrl + U</code> 粘贴</li><li><code>Ctrl + W</code> 搜索文本</li><li><code>Meta + 6</code> 复制</li><li><code>Meta + U</code> 撤销上次操作</li><li><code>Meta + E</code> 恢复上次撤销的操作</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740983326079.png" style="zoom:23%;" />]]></content>
    
    
    <summary type="html">本文介绍了使用 ssh 进行 Linux 系统服务区的远程访问与一些简单的命令。服务器可以去往各大服务器商购买，或者在本地安装虚拟机，针对 mac 用户 Linux 操作系统的指令大多可以直接使用，windows 系统的 wsl 或 powershell 也满足 Linux 的习惯。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="ssh" scheme="https://blog.iskage.online/tags/ssh/"/>
    
    <category term="远程连接" scheme="https://blog.iskage.online/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>递归算法 Recursion</title>
    <link href="https://blog.iskage.online/posts/5f7017e8.html"/>
    <id>https://blog.iskage.online/posts/5f7017e8.html</id>
    <published>2025-03-02T07:43:00.000Z</published>
    <updated>2025-04-06T13:33:47.368Z</updated>
    
    <content type="html"><![CDATA[<h1>递归算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。【建议 star !】</p><hr><p><strong>递归</strong>：通过一个函数在执行过程中一次或者多次调用其本身，或者通过一种数据结构在其表示中依赖于相同类型的结构更小的实例。简而言之：递归就是自己调用自己。</p><p>本文依据四个例子介绍递归算法的原理和如何搭建：</p><ul><li>阶乘函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></li><li>标尺刻度（分形）</li><li>二分查找</li><li>计算机文件目录的嵌套</li></ul><p>除此之外，还有一些常见的递归例子：递归求和、逆置序列、递归产生斐波那契数列、求和谜题等。以及什么是尾递归，如何将尾递归转换为非递归算法。</p><h2 id="1-常见递归案例">1 常见递归案例</h2><h3 id="1-1-阶乘函数">1.1 阶乘函数</h3><p>由阶乘函数的定义，我们可知</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mi>n</mi><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>×</mo><mo>⋯</mo><mo>×</mo><mn>2</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n! = n \times (n-1) \times (n-2) \times \cdots \times 2 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 时，我们规定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0! = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>根据阶乘的定义，可以写出函数的递推形式，如果我们构造了一个函数 <code>factorial()</code> 应该满足</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">factorial(n) = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    factorial(n) = n * factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>于是我们可以得到阶乘函数的递归算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">4</span>))  <span class="comment"># 24</span></span><br></pre></td></tr></table></figure><ul><li>迭代是通过函数的递归实现的，每次进入函数，查看 <code>n</code> 是否为 <code>0</code> ，如果不为零，则返回 <code>n * f(n)</code> 如此反复调用，直到 <code>n = 0</code> 时才真正开始进行计算。</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740813281185.png" style="zoom:50%;" /><h3 id="1-2-标尺刻度（分形）">1.2 标尺刻度（分形）</h3><p>对于一个刻度尺，每刻度之间距离减半时，刻度线长度也减小。例如：0 - 1 cm 的刻度间，假设 0 和 1 刻度线长 4 个单位，于是有 0.5 cm 刻度线长 3 个单位，0.25 cm 刻度线长 2 个单位，以此类推。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740813701382.png" style="zoom:47%;" /><p>我们定义函数 <code>draw_ruler()</code> ，用来模仿这种分形的过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_line</span>(<span class="params">tick_length, tick_label=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制刻度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        tick_length (int): 刻度长度，即 &#x27;-&#x27; 字符个数</span></span><br><span class="line"><span class="string">        tick_label (str, optional): 刻度数，不重要. Defaults to &#x27;&#x27;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    line = <span class="string">&#x27;-&#x27;</span> * tick_length</span><br><span class="line">    <span class="keyword">if</span> tick_label:</span><br><span class="line">        line += <span class="string">&#x27; &#x27;</span> + tick_label</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_interval</span>(<span class="params">center_length</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录分型个数的辅助函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        center_length (int): 负责传入刻度长度给 draw_line 函数，即 &#x27;-&#x27; 字符个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> center_length &gt; <span class="number">0</span>:</span><br><span class="line">        draw_interval(center_length - <span class="number">1</span>)</span><br><span class="line">        draw_line(center_length)</span><br><span class="line">        draw_interval(center_length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_ruler</span>(<span class="params">len_of_ruler, num_scale</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制刻度尺</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        len_of_ruler (int): 刻度尺长度，即最大刻度</span></span><br><span class="line"><span class="string">        num_scale (int): 最大刻度的长度，即最大刻度的 &#x27;-&#x27; 字符个数，决定了分形次数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    draw_line(num_scale, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + len_of_ruler):</span><br><span class="line">        draw_interval(num_scale - <span class="number">1</span>)</span><br><span class="line">        draw_line(num_scale, <span class="built_in">str</span>(j))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">draw_ruler(len_of_ruler=<span class="number">1</span>, num_scale=<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 0</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">--- 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>细节 &amp; 原理</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740900901780.png" alt=""></p><p>每一个 <code>draw_interval(n)</code> 下都嵌套着一个结构为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">draw_interval(n)</span><br><span class="line">├── draw_interval(n-<span class="number">1</span>)  <span class="comment"># 继续嵌套，直到 n = 0</span></span><br><span class="line">│ ├── ...</span><br><span class="line">├──draw_line(n)        <span class="comment"># 真正画刻度的函数 输出 &#x27;-&#x27; 字符</span></span><br><span class="line">└──draw_interval(n-<span class="number">1</span>)</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure><h3 id="1-3-二分查找">1.3 二分查找</h3><p>二分查找是一种高效的查找序列元素的算法。当序列无序时，通过循环遍历的方式查找某一个元素，复杂度为 <code>O(n)</code> 。但当<strong>序列有序</strong>时，可以使用二分查找。</p><ul><li>二分查找的想法</li></ul><p>需要在一个有序序列中查找 <code>x</code> ，首先将序列分半，检查 <code>x</code> 落入哪个区间，例如落入左边，则抛去右边，在左边继续分半查找。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">left = <span class="number">0</span>           <span class="comment"># 最左边下标</span></span><br><span class="line">right = <span class="built_in">len</span>(seq) - <span class="number">1</span>        <span class="comment"># 最右边下标</span></span><br><span class="line"></span><br><span class="line">mid = (left + right) // <span class="number">2</span>   <span class="comment"># 计算中间下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == seq[mid]:</span><br><span class="line">    <span class="comment"># 完成</span></span><br><span class="line"><span class="keyword">elif</span> x &lt; seq[mid]:</span><br><span class="line">    <span class="comment"># 到左半寻找</span></span><br><span class="line">    <span class="comment"># 调用函数，更新参数</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 到右半寻找</span></span><br><span class="line">    <span class="comment"># 调用函数，更新参数</span></span><br></pre></td></tr></table></figure><ul><li>复杂度</li></ul><p>每次递归调用，序列长度为 <code>right - left + 1</code> 。而二分查找每次调用后，传入 <code>mid = (left + right) // 2</code> ，序列长度减半 <code>(right - left + 1) / 2</code> 。于是有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Algorithms end when</mtext><mspace width="1em"/><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo>∼</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{Algorithms end when} \quad \frac{n}{2^k} \sim 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord text"><span class="mord">Algorithms end when</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∼</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">k \sim \log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 为操作数（调用递归次数）。故复杂度为 <code>O(log n)</code></p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, target, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &gt; right:</span><br><span class="line">        <span class="comment"># 全遍历后仍然没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> target == data[mid]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> target &lt; data[mid]:</span><br><span class="line">        <span class="keyword">return</span> binary_search(data, target, left, mid - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_search(data, target, mid + <span class="number">1</span>, right)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">33</span>, <span class="number">37</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(seq, target=<span class="number">22</span>, left=<span class="number">0</span>, right=<span class="built_in">len</span>(seq) - <span class="number">1</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740821735351.png" alt=""></p><h3 id="1-4-文件系统">1.4 文件系统</h3><p>一般主机的文件目录大致为 <code>a/b/c.py</code> 其中 <code>a/</code> <code>b/</code> 表示其为文件夹，而有文件后缀的 <code>c.py</code> 则为文件。下面编写一个递归算法，计算某个目录下所有文件（文件夹）各自的存储大小。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_usage</span>(<span class="params">path</span>)</span><br><span class="line">    Input: 文件路径</span><br><span class="line">    Output: 存储空间总和</span><br><span class="line"></span><br><span class="line">    total = size(path)  <span class="comment"># 当前目录的大小</span></span><br><span class="line">    <span class="keyword">if</span> path 是文件夹:</span><br><span class="line">        <span class="keyword">for</span> child_path <span class="keyword">in</span> path  <span class="comment"># 查看父目录下的子目录</span></span><br><span class="line">            total += disk_usage(child_path)  <span class="comment"># 递归</span></span><br><span class="line"><span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><ul><li><code>os</code> 模块</li></ul><p><code>os.path.getsize(path)</code> 获取 <code>path</code> 路径文件的大小或文件夹本身的大小（针对文件夹，只返回文件夹自身大小，不包含其下文件和其他子文件夹的大小）</p><p><code>os.path.isdir(path)</code> 判断 <code>path</code> 是否是一个合法且存在的路径</p><p><code>os.listdir(path)</code> 返回一个列表，列表元素为 <code>path</code> 路径下所有文件和文件夹的名称</p><p><code>os.path.join(path, filename)</code> 根据传入的字符串组合成一条合法的路径</p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_usage</span>(<span class="params">path</span>):</span><br><span class="line">    total = os.path.getsize(path)  <span class="comment"># 当前目录自身的大小</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">            <span class="comment"># 遍历其下子目录的名称</span></span><br><span class="line">            child_path = os.path.join(path, filename)</span><br><span class="line">            total += disk_usage(child_path)  <span class="comment"># 递归调用 计算子目录的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;  &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total, path))</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.path.getsize(os.getcwd()))</span><br><span class="line"><span class="comment"># 128 代表目录自身的大小，不包含其下子目录</span></span><br><span class="line"></span><br><span class="line">total = disk_usage(os.getcwd())      <span class="comment"># os.getcwd() 获取当前目录路径</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2262 /Users/&lt;username&gt;/dsa-notes/lec3_recursion/code03_recursion.py</span></span><br><span class="line"><span class="string">6326 /Users/&lt;username&gt;/dsa-notes/lec3_recursion/note03_递归.md</span></span><br><span class="line"><span class="string">8716 /Users/&lt;username&gt;/dsa-notes/lec3_recursion  # 父目录</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"><span class="comment"># 8716</span></span><br></pre></td></tr></table></figure><h2 id="2-递归分类">2 递归分类</h2><ul><li>如果一个递归最多调用一次，称之为<strong>线性递归</strong></li><li>如果一个递归可以同时进行两次调用，称之为<strong>二路递归</strong></li><li>如果一个递归可以同时进行三次及以上调用，称之为<strong>多重递归</strong></li></ul><h3 id="2-1-线性递归">2.1 线性递归</h3><p>递归函数内可能有多个递归调用，但函数内必须最多只能执行一次递归调用。例如：</p><ul><li>阶乘的递归式定义</li><li>二分查找</li></ul><blockquote><p>二分查找虽然有两处出现了递归调用，但因为处于 <code>if - else</code> 语句中，实际最多只执行一次，故仍然是线性递归</p></blockquote><h4 id="2-1-1-递归求和">2.1.1 递归求和</h4><p>递归求和和阶乘的实现如出一辙，都是采用递推的方式构建。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LinearSum(A, n):</span><br><span class="line">Input: 序列和求和长度</span><br><span class="line">Output: 序列前 n 项和</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> A[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> LinearSum(A, n - <span class="number">1</span>) + A[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_sum</span>(<span class="params">seq: <span class="built_in">list</span>, n: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> linear_sum(seq, n - <span class="number">1</span>) + seq[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归求前 n 项和</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(linear_sum(seq, <span class="number">3</span>))  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-逆置序列">2.1.2 逆置序列</h4><p>对于输入一个序列，将其第一项和最后一项交换，第二项与倒数第二项交换，以此类推从而得到逆置后的序列。基本想法是每次调用交换首尾，然后剔除首尾后作为新的序列再次调用。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Agorithm ReverseArray(A, i, j):</span><br><span class="line">Input: 序列 A 和首尾下标 i, j (也可任意指定非首尾下标 i, j)</span><br><span class="line">Output: 无输出，因为序列是可变的，函数操作直接对序列进行</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt; j then</span><br><span class="line">交换 A[i] 和 A[j]</span><br><span class="line">ReverseArray(A, i + <span class="number">1</span>, j - <span class="number">1</span>)  <span class="comment"># 剔除首尾后作为新的序列再次调用</span></span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq, i, j</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; j:</span><br><span class="line">        seq[i], seq[j] = seq[j], seq[i]</span><br><span class="line">        reverse(seq, i + <span class="number">1</span>, j - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆置序列</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">reverse(seq, i=<span class="number">0</span>, j=<span class="built_in">len</span>(seq) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"><span class="comment"># [9, 8, 7, 6, 5, 4, 3, 2, 1] 从 seq[0]=1 到 seq[n-1]=9 开始逆序</span></span><br><span class="line"></span><br><span class="line">reverse(seq, i=<span class="number">3</span>, j=<span class="built_in">len</span>(seq) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"><span class="comment"># [9, 8, 7, 1, 2, 3, 4, 5, 6] 从 seq[3]=6 到 seq[n-1]=1 开始逆序</span></span><br></pre></td></tr></table></figure><h3 id="2-2-二路递归">2.2 二路递归</h3><p>当函数内部执行两次递归调用时，即为二路递归。例如：</p><ul><li>标尺刻度</li></ul><h4 id="2-2-1-二路递归求和">2.2.1 二路递归求和</h4><p>基本思想是将序列拆分为两半，分布调用求和再相加。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm BinarySum(A, i, n):</span><br><span class="line">Input: 序列 A 和起始下标 i 和加和长度 n</span><br><span class="line">Output: 从 i 开始的 n 个元素求和</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> A[i]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> BinarySum(A, i, n / <span class="number">2</span>) + BinarySum(A, i + n / <span class="number">2</span>, n / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740892869633.png" alt=""></p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_sum</span>(<span class="params">seq, i, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        half = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> binary_sum(seq, i, half) + binary_sum(seq, i + half, n - half)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二路递归求和</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_sum(seq, i=<span class="number">0</span>, n=<span class="built_in">len</span>(seq)))</span><br><span class="line"><span class="comment"># 55</span></span><br><span class="line"><span class="built_in">print</span>(binary_sum(seq, i=<span class="number">1</span>, n=<span class="built_in">len</span>(seq) - <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 54</span></span><br></pre></td></tr></table></figure><blockquote><p>代码实现并不良好，因为需要手动计算起始下标和长度，没有检查溢出问题</p></blockquote><h4 id="2-2-2-二路递归产生斐波那契数列">2.2.2 二路递归产生斐波那契数列</h4><p>产生递推式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">F_0 = 0,\ F_1 = 1,\ F_{i} = F_{i - 1} + F_{i - 2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 的斐波那契数列，可以尝试使用二路递归方法。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm BinaryFib(k)</span><br><span class="line">Input: 序列下标 k</span><br><span class="line">Output: 第 k 个斐波那契数列值</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> k</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> BinaryFib(k - <span class="number">1</span>) + BinaryFib(k - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_fib</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 【不推荐】 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_fib(k - <span class="number">1</span>) + binary_fib(k - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二路递归产生斐波那契数列 【不推荐】</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(binary_fib(i), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 0 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><blockquote><p>二路递归产生斐波那契数列复杂度为指数级，【不推荐】使用</p></blockquote><p><strong>证明</strong> 记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示 <code>binary_fib(k)</code> 函数调用递归的次数，则有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>3</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⋯</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mi>k</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align} \notagn_0 &amp;= 1 \\ \notagn_1 &amp;= 1 \\ \notagn_2 &amp;= n_1 + n_0 + 1 = 3 \\ \notagn_3 &amp;= n_2 + n_1 + 1 = 5 \\ \notag&amp;\cdots \\n_k &amp;= n_{k-1} + n_{k-2} + 1 \notag\end{align}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9em;vertical-align:-4.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">3</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>于是可知 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 也为斐波那契数列，由斐波那契数列是二阶线性递推，求通项公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo>∼</mo><mo stretchy="false">(</mo><mfrac><mrow><msqrt><mn>5</mn></msqrt><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><msup><mo stretchy="false">)</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">n_k \sim (\frac{\sqrt{5}- 1}{2})^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.383em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 可知操作次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大约为指数类型的量级。指数增长理论上在算法中是无法实现的。（或者可以证明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大约是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">n_{k-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 的 2 倍以上，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo>∼</mo><msup><mn>2</mn><mrow><mi>k</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n_k \sim 2^{k/2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">/2</span></span></span></span></span></span></span></span></span></span></span></span> 也是指数级别）</p><h4 id="2-2-3-线性递归产生斐波那契数列">2.2.3 线性递归产生斐波那契数列</h4><p>改进递归，使用线性递归产生斐波那契数列。基本思想是每次返回一组（2 个）斐波那契数，每次返回的时候直接进行加和（递推）</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LinearFibonacci(k):</span><br><span class="line">Input: 下标 k</span><br><span class="line">Output: 一次返回 <span class="number">2</span> 个斐波那契数</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i, j = LinearFibonacci(k - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> j, i + j</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_fib</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i, j = linear_fib(k - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> j, i + j</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性递归产生斐波那契数列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    front, back = linear_fib(i)</span><br><span class="line">    <span class="built_in">print</span>(back, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><blockquote><p>线性递归每递归一次就能产生一项，故复杂度为 <code>O(n)</code></p></blockquote><h3 id="2-3-多重递归">2.3 多重递归</h3><p>多重递归中的函数可能执行多于两次递归调用。例如：</p><ul><li>文件系统</li></ul><h4 id="2-3-1-求和谜题">2.3.1 求和谜题</h4><p>可以简单理解为找出集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mn>9</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">U = \{1, 2, 3, \cdots, 9 \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">9</span><span class="mclose">}</span></span></span></span> 所有的三元子集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy="false">{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">S = \{a, b, c\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose">}</span></span></span></span> 使得满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a + b = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span> 。基本想法是每次向 <code>S</code> 中添加一个 <code>U</code> 中元素，并删去 <code>U</code> 中对应的元素，并 <code>k - 1</code> 表示 <code>S</code> 还剩 <code>k - 1</code> 个元素。从而得到新的 <code>k, S, U</code> 此时递归调用。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Algorithm PuzzleSolve(k, S, U):</span><br><span class="line">Input: S 为结果集合，U 为选取元素来源，k 为要求的 S 集合大小</span><br><span class="line">Output: 所以满足 a + b = c 的 S = &#123;a, b, c&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> U do:</span><br><span class="line">    <span class="comment"># 从 U 中逐个挑出元素</span></span><br><span class="line">    Add e to the end of S  <span class="comment"># 将 e 添加到序列 S 的末尾</span></span><br><span class="line">    Remove e <span class="keyword">from</span> U        <span class="comment"># 将 e 从集合 U 中移除（标记为已使用）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span> then:               </span><br><span class="line">        <span class="comment"># 如果当前序列长度满足要求</span></span><br><span class="line">        <span class="keyword">if</span> is_solution(S) then:    </span><br><span class="line">            <span class="comment"># 检查 S 是否是谜题的解</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Solution found: &quot;</span> + S)</span><br><span class="line">    <span class="keyword">else</span>:                         </span><br><span class="line">        <span class="comment"># 否则继续递归扩展，递归调用，并传入新参数</span></span><br><span class="line">        PuzzleSolve(k - <span class="number">1</span>, S, U)</span><br><span class="line"></span><br><span class="line">    Remove e <span class="keyword">from</span> the end of S     // 回溯：将 e 从序列 S 的末尾移除</span><br><span class="line">    Add e back to U                // 回溯：将 e 添加回集合 U（标记为未使用）</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_solution</span>(<span class="params">S</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 检查 a + b = c &quot;&quot;&quot;</span></span><br><span class="line">    res = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> S[<span class="number">0</span>] + S[<span class="number">1</span>] == S[<span class="number">2</span>]:</span><br><span class="line">        res = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">puzzle_solve</span>(<span class="params">k, S, U</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 寻找 S &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">list</span>(U):  <span class="comment"># 遍历集合 U 中的每一个元素</span></span><br><span class="line">        S.append(e)  <span class="comment"># 将 e 添加到序列 S 的末尾</span></span><br><span class="line">        U.remove(e)  <span class="comment"># 将 e 从集合 U 中移除</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> is_solution(S):</span><br><span class="line">                <span class="comment"># 检查当前序列 S 是否是谜题的解</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Solution found: &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(S[<span class="number">0</span>], S[<span class="number">1</span>], S[<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 递归调用，继续扩展序列</span></span><br><span class="line">            puzzle_solve(k - <span class="number">1</span>, S, U)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 回溯</span></span><br><span class="line">        S.pop()  <span class="comment"># 将 e 从序列 S 的末尾移除</span></span><br><span class="line">        U.add(e)  <span class="comment"># 将 e 添加回集合 U</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求和谜题</span></span><br><span class="line">U = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">k = <span class="number">3</span></span><br><span class="line">S = []</span><br><span class="line">puzzle_solve(k, S, U)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Solution found: 1 + 2 = 3</span></span><br><span class="line"><span class="string">Solution found: 1 + 3 = 4</span></span><br><span class="line"><span class="string">Solution found: 2 + 1 = 3</span></span><br><span class="line"><span class="string">Solution found: 3 + 1 = 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740897518866.png" alt=""></p><h2 id="3-递归算法的不足">3 递归算法的不足</h2><h3 id="3-1-不断递归带来的复杂度">3.1 不断递归带来的复杂度</h3><ul><li>递归可能会因为不断的调用自身带来复杂度的急剧上升</li></ul><p>例如：二路递归产生斐波那契的例子就展示了递归的误用</p><h3 id="3-2-最大递归深度">3.2 最大递归深度</h3><ul><li>除了复杂度，递归的误用可能会带来无限深度</li></ul><p>例如出现了下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> f(x)</span><br></pre></td></tr></table></figure><p>这种简单的错误会导致递归无限地调用自身，这会迅速耗尽计算资源。所以，使用递归时，往往会传入<strong>更多的参数</strong>，通过参数的变化和添加终止条件实现递归。</p><ul><li>Python 限制了递归的深度，默认递归不得超过 1000 层，如果超过则会报错 <code>RuntimeError</code></li></ul><p>合法的/高效的递归操作，这个限制（1000 层）是完全足够的。例如，二分查找的复杂度为 <code>O(log n)</code> ，如果要这个算法消耗 1000 次递归，则有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>=</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">\log n = 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span> 可以计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mn>1000</mn></msup></mrow><annotation encoding="application/x-tex">n = 2^{1000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span></span></span></span></span></span></span></span></span></span></span></span> 个输入，这个数字显然在现实中是不可能达到的。所以，1000 层限制对于合法的递归算法是完全足够的。</p><p>当然，也可以自定义最大递归深度限制【不推荐】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">old = sys.getrecursionlimit()</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>无论如何，依靠<strong>参数的加入和限制</strong>对递归算法的设计十分重要。</p></blockquote><h2 id="4-消除尾递归">4 消除尾递归</h2><p>递归算法的优点在于利用问题中的重复结构。然而，递归的成本也十分明显。算法必须记录存储每个调用的状态和结果。这对计算机内存造成负担。</p><p>所以，某些情况下，我们希望能够将递归算法变为非递归算法。</p><h3 id="4-1-尾递归">4.1 尾递归</h3><p><strong>定义</strong>：当递归算法进行的递归调用是此算法的最后一步，即递归调用得到的值被立即当作此算法的输出，则此递归为一个尾递归（<strong>递归调用为最后一步 / 递归调用得到的值作为输出</strong>）。</p><ul><li>尾递归必定是一个线性递归</li></ul><p>例如：阶乘函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)  <span class="comment"># 递归调用 factorial() 为算法的输出被 return</span></span><br></pre></td></tr></table></figure><h3 id="4-2-尾递归的非递归算法">4.2 尾递归的非递归算法</h3><p><strong>任何的尾递归均可转写为一个非递归算法</strong></p><h4 id="4-2-1-阶乘函数（非递归）">4.2.1 阶乘函数（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res = n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="comment"># 使用循环逐个相乘</span></span><br><span class="line">        res *= i</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="4-2-2-逆置序列（非递归）">4.2.2 逆置序列（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq, i, j</span>):</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="comment"># 利用下标的循环交换</span></span><br><span class="line">        seq[i], seq[j] = seq[j], seq[i]</span><br><span class="line">        i, j = i + <span class="number">1</span>, j - <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-二分查找（非递归）">4.2.3 二分查找（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, target, left, right</span>):</span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        <span class="comment"># 利用循环从左右向中间查找</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> target == data[mid]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> target &lt; data[mid]:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">简而言之：递归就是自己调用自己。本文依据四个例子介绍递归算法的原理和如何搭建，除此之外，还有一些常见的递归例子：递归求和、逆置序列、递归产生斐波那契数列、求和谜题等。以及什么是尾递归，如何将尾递归转换为非递归算法。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>CIFAR-10 分类问题 (基于 ResNet18 预训练模型)</title>
    <link href="https://blog.iskage.online/posts/24ab2d0a.html"/>
    <id>https://blog.iskage.online/posts/24ab2d0a.html</id>
    <published>2025-03-01T08:32:00.000Z</published>
    <updated>2025-03-01T08:54:08.826Z</updated>
    
    <content type="html"><![CDATA[<h1>CIFAR-10 分类问题 (基于 ResNet18 预训练模型)</h1><p>项目源码存放在 GitHub 库 <a href="https://github.com/isKage/cifar10-classification">isKage/cifar10-classification</a></p><p><code>PyTorch</code> <code>Python</code> <code>torch</code> <code>nn</code> <code>ResNet</code> <code>ResNet18</code> <code>pre-trained</code></p><p>针对 CIFAR-10 分类问题，搭建神经网络：<code>AlexNet</code>、<code>GoogLeNet</code>、<code>ResNet</code>、<code>ResNet18</code>。最后选择预训练后的 <code>ResNet18</code> 进行该问题的训练、验证和测试。包含自定义数据集 <code>Dataset</code> 类、自定义训练、验证和测试函数、自定义结果表格函数等。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/cifar.jpeg" alt="cifar-10"></p><p><code>kaggle: private score = 0.68100, ranked about 71. (just training once as using cpu)</code></p><p><code>device: cpu</code></p><p><strong>项目目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── README.md                   </span><br><span class="line">├── TempData                  <span class="comment"># 取少量图片模拟 CIFAR10 数据集                 </span></span><br><span class="line">│   └── competitions</span><br><span class="line">│       └── cifar-10</span><br><span class="line">├── checkpoints               <span class="comment"># 存放训练完成后的模型参数 model.save() 存放处</span></span><br><span class="line">├── config.py                 <span class="comment"># 默认的配置文件</span></span><br><span class="line">├── data                      <span class="comment"># 自定义的数据集 Dataset 类</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── dataset.py</span><br><span class="line">├── logfile                   <span class="comment"># 记录模型表现 csv 文件的目录</span></span><br><span class="line">├── logs                      <span class="comment"># 存放 tensorboard 文件</span></span><br><span class="line">├── main.py                   <span class="comment"># 主程序: 包含 train, test 等主要函数</span></span><br><span class="line">├── models                    <span class="comment"># 搭建的各种神经网络 `AlexNet`、`GoogLeNet`、`ResNet`、`ResNet18`</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── alexnet.py</span><br><span class="line">│   ├── basic.py</span><br><span class="line">│   ├── googlenet.py</span><br><span class="line">│   ├── resnet.py</span><br><span class="line">│   └── resnet18.py</span><br><span class="line">├── requirements.txt          <span class="comment"># 安装依赖</span></span><br><span class="line">├── result_example.csv        <span class="comment"># 少量数据模拟数据集得到的测试结果</span></span><br><span class="line">└── sampleSubmission.csv      <span class="comment"># 最后生成的可提交 kaggle 的最终测试结果</span></span><br></pre></td></tr></table></figure><h2 id="1-下载至本地">1 下载至本地</h2><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/cifar10-classification.git</span><br></pre></td></tr></table></figure><h2 id="2-安装依赖和数据集">2 安装依赖和数据集</h2><h3 id="2-1-pip-安装依赖">2.1 pip 安装依赖</h3><p>在项目根目录下终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="2-2-kaggle-下载数据集">2.2 kaggle 下载数据集</h3><p>教程见 <a href="https://zhuanlan.zhihu.com/p/25732245405">从 kaggle 下载数据集 (mac &amp; win)</a>。</p><h2 id="3-本地配置-config-py">3 本地配置 <code>config.py</code></h2><p>在 <code>config.py</code> 中配置相关参数。例如数据集路径。相关配置均已配置好，但需要自己配置数据集的位置。<br>在 <code>_parse()</code> 方法中，需修改 cifar 数据集的路径。例如我的配置：<code>cifar-10</code> 文件夹放在用户目录下的 <code>AllData/competitions/</code> 下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> config.real_or_try == <span class="string">&quot;real&quot;</span>:</span><br><span class="line">    <span class="comment"># 如果数据放在用户目录的 &#x27;AllData&#x27; 下则</span></span><br><span class="line">    config.root = os.path.join(config.user_root, <span class="string">&#x27;AllData&#x27;</span>, <span class="string">&#x27;competitions&#x27;</span>, <span class="string">&#x27;cifar-10&#x27;</span>)  <span class="comment"># 【本地设置: 数据目录】</span></span><br><span class="line">    config.res_path = os.path.join(config.working_root, <span class="string">&#x27;sampleSubmission.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 样本数据尝试</span></span><br><span class="line">    config.root = os.path.join(config.working_root, <span class="string">&#x27;TempData&#x27;</span>, <span class="string">&#x27;competitions&#x27;</span>, <span class="string">&#x27;cifar-10&#x27;</span>)</span><br><span class="line">    config.res_path = os.path.join(config.working_root, <span class="string">&#x27;result_example.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-训练">4 训练</h2><blockquote><p>注意，默认的数据集为模拟数据集，故如果想在完整数据集训练，在指定路径后还需传入参数 <code>--real_or_try=real</code><br>，或者直接在 <code>config.py</code> 中<br>修改默认</p></blockquote><h3 id="4-1-解压数据集">4.1 解压数据集</h3><p>在第 3 步设置完成数据集下载的路径后，终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py unzip</span><br></pre></td></tr></table></figure><p>即可解压数据集。</p><h3 id="4-2-训练">4.2 训练</h3><p>使用 <code>fire</code> 库方便的在终端中进行训练、测试过程。可以在 <code>config.py</code> 中输入默认参数。例如：<code>model</code><br>为选择模型，默认使用 <code>&quot;ResNet18&quot;</code> 模型，<br>会自动进行下载，下载的预训练模型参数保存在 <code>checkpoints/</code> 文件夹里。</p><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>可以使用 <code>--&lt;参数名&gt;=参数值</code> 在终端覆盖默认参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python main.py train model=AlexNet      <span class="comment"># 指定 AlexNet 为模型</span></span><br><span class="line">python main.py train rea_or_try=real    <span class="comment"># 使用完整 CIFAR10 数据集，而不是模拟数据集 </span></span><br></pre></td></tr></table></figure><h3 id="4-3-可视化">4.3 可视化</h3><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=./logs  <span class="comment"># http://localhost:6006/</span></span><br></pre></td></tr></table></figure><p>打开浏览器观察训练过程可视化：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740818446605.png" alt=""></p><h2 id="5-测试">5 测试</h2><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>即可得到测试后的结果表格 <code>result_example.csv</code> 或 <code>sampleSubmission.csv</code> （取决与使用的是模拟数据集还是完整的数据集）。</p><p>注意，测试完成后终端输入一下指令，对结果表格按照 <code>id</code> 进行排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py sort_csv</span><br></pre></td></tr></table></figure><p>最后可以将 <code>sampleSubmission.csv</code> 上传到 kaggle <a href="https://www.kaggle.com/competitions/cifar-10">CIFAR-10 competition</a> 。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740818596562.png" style="zoom:50%;" /><h2 id="6-友链">6 友链</h2><ol><li>关注我的知乎账号 <a href="https://www.zhihu.com/people/--55-97-8-41">Zhuhu</a> 不错过我的笔记更新。</li><li>我会在个人博客 <a href="https://blog.iskage.online/">isKage`Blog</a> 更新相关项目和学习资料。</li></ol>]]></content>
    
    
    <summary type="html">本文介绍如何读取 CIFAR-10 数据集，搭建 ResNet 神经网络，模型训练和验证。可前往 GitHub 库下载项目源码。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
</feed>
