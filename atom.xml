<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isKage`Blog</title>
  
  <subtitle>Welcome to isKage Blog :)</subtitle>
  <link href="https://blog.iskage.online/atom.xml" rel="self"/>
  
  <link href="https://blog.iskage.online/"/>
  <updated>2025-02-07T07:52:19.762Z</updated>
  <id>https://blog.iskage.online/</id>
  
  <author>
    <name>isKage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL 自学笔记（3）运算符与 SQL 的正则表达式</title>
    <link href="https://blog.iskage.online/posts/a7d82995.html"/>
    <id>https://blog.iskage.online/posts/a7d82995.html</id>
    <published>2025-02-07T07:51:00.000Z</published>
    <updated>2025-02-07T07:52:19.762Z</updated>
    
    <content type="html"><![CDATA[<p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理</p><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1 算术运算符"></a>1 算术运算符</h2><p>包括：<code>+, -, *, /, %</code> 加、减、乘、除、取模运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a <span class="operator">+</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">-</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">*</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">/</span> b; <span class="comment">-- or SELECT a DIV b;</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">%</span> b; <span class="comment">-- or SELECT a MOD b;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-加减运算"><a href="#1-1-加减运算" class="headerlink" title="1.1 加减运算 + -"></a>1.1 加减运算 <code>+ -</code></h3><ul><li><p><code>int + int = int</code> <code>float + float = float</code> 但 <code>int + float = float</code></p></li><li><p>只针对数值型计算，若为字符串，则先转化，若转换失败，则按照 <code>0</code> 计算</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">1.2</span>, <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="number">4</span>, <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">1.2</span> <span class="operator">|</span> <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="number">4</span> <span class="operator">|</span> <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;4&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="number">3</span> <span class="operator">|</span> <span class="comment">-- &#x27;a&#x27; 转换失败，按照 0 计算</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">101.2</span> <span class="operator">|</span>       <span class="number">7</span> <span class="operator">|</span>         <span class="number">7</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-2-乘除运算"><a href="#1-2-乘除运算" class="headerlink" title="1.2 乘除运算 * /"></a>1.2 乘除运算 <code>* /</code></h3><ul><li><code>int * int = int</code> <code>int * float = float</code> 而 <code>/</code> 除法最后一定是 <code>float</code> 类型结果</li><li><code>number / 0 = NULL</code> 除以 <code>0</code> 则为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1</span>, <span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span>, <span class="number">100</span> <span class="operator">/</span> <span class="number">1</span>, <span class="number">100</span> DIV <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">/</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">100</span> DIV <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span>     <span class="number">100.0</span> <span class="operator">|</span> <span class="number">100.0000</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-3-取模运算"><a href="#1-3-取模运算" class="headerlink" title="1.3 取模运算 %"></a>1.3 取模运算 <code>%</code></h3><ul><li><code>A % B</code> 表示 <code>A</code> 除以 <code>B</code> 的余数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">20</span>, <span class="number">100</span> <span class="operator">%</span> <span class="number">99</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">20</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2 比较运算符"></a>2 比较运算符</h2><p>比较结果为<strong>真</strong>返回<code>1</code> </p><p>比较结果为<strong>假</strong>返回<code>0</code> </p><p><strong>其他情况</strong>返回 <code>NULL</code></p><p>包括：<code>=, &lt;=&gt;, &lt;&gt;(!=), &lt;, &lt;=, &gt;, &gt;=</code> 等号、安全等号、不等号、小于、小于等于、大于、大于等于</p><h3 id="2-1-等号比较"><a href="#2-1-等号比较" class="headerlink" title="2.1 等号比较 ="></a>2.1 等号比较 <code>=</code></h3><p>判断等号两边的值、字符串或表达式是否相等，如果相等则返回 <code>1</code>，不相等则返回 <code>0</code></p><ul><li>字符串与字符串比较，值与值比较</li><li>若为字符串与值比较，则将字符串转换为值 <code>int = str -&gt; int = int(str)</code> 注意：转换失败则为 <code>0</code></li><li>有一个为 <code>NULL</code> 则返回 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span>, <span class="number">2</span> <span class="operator">=</span> <span class="number">3</span>, <span class="number">2</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bc&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bc&#x27;</span>, <span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> <span class="comment">-- &#x27;a&#x27; 转换失败则为 0</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-2-安全等号-lt-gt"><a href="#2-2-安全等号-lt-gt" class="headerlink" title="2.2 安全等号 &lt;=&gt;"></a>2.2 安全等号 <code>&lt;=&gt;</code></h3><p><code>&lt;=&gt;</code> 会把 <code>NULL</code> 当作一个特殊的元素，参与比较，不再返回 <code>NULL</code> 。其他返回结果与等于运算符相同。</p><ul><li>安全等号 <code>&lt;=&gt;</code> 两边的操作数的值都为<code>NULL</code> 时，返回的结果为 <code>1</code> 。</li><li>安全等号 <code>&lt;=&gt;</code> 一边为 <code>NULL</code> ，一边不为 <code>NULL</code> 时，返回 <code>0</code> 。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-3-不等于比较-or-lt-gt"><a href="#2-3-不等于比较-or-lt-gt" class="headerlink" title="2.3 不等于比较 != or &lt;&gt;"></a>2.3 不等于比较 <code>!= or &lt;&gt;</code></h3><p>判断等号两边的值、字符串或表达式是否不相等，如果不相等则返回 <code>1</code>，相等则返回 <code>0</code></p><ul><li>与等号比较类似，面对 <code>NULL</code> 无论比较结果如何，最后均返回 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">2</span>, <span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span>, <span class="number">2</span> <span class="operator">!=</span> <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bc&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;bc&#x27;</span>, <span class="number">0</span> <span class="operator">!=</span><span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="string">&#x27;2&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">!=</span><span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-4-大于小于-gt-lt-gt-lt"><a href="#2-4-大于小于-gt-lt-gt-lt" class="headerlink" title="2.4 大于小于 &gt;, &lt;, &gt;=, &lt;="></a>2.4 大于小于 <code>&gt;, &lt;, &gt;=, &lt;=</code></h3><p>性质和等于 <code>=</code>，不等于 <code>!= or &lt;&gt;</code> 相同</p><ul><li>比较结果为<strong>真</strong>返回<code>1</code> 比较结果为<strong>假</strong>返回<code>0</code> <strong>其他情况</strong>返回 <code>NULL</code></li><li>面对 <code>NULL</code> 无论比较结果如何，最后均返回 <code>NULL</code></li></ul><h2 id="3-其他类型运算符"><a href="#3-其他类型运算符" class="headerlink" title="3 其他类型运算符"></a>3 其他类型运算符</h2><h3 id="3-1-空运算符-ISNULL-IS-NULL"><a href="#3-1-空运算符-ISNULL-IS-NULL" class="headerlink" title="3.1 空运算符 ISNULL, IS NULL"></a>3.1 空运算符 <code>ISNULL, IS NULL</code></h3><p>是否为 <code>NULL</code> ，如果为 <code>NULL</code> 则返回 <code>1</code> ，否则返回 <code>0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>, ISNULL(<span class="keyword">NULL</span>), ISNULL(<span class="string">&#x27;a&#x27;</span>), <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span> ISNULL(<span class="keyword">NULL</span>) <span class="operator">|</span> ISNULL(<span class="string">&#x27;a&#x27;</span>) <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>结合之前的安全等号，从表中寻找 <code>NULL</code> 有如下方法 （注：等号，不等号，大小于符号无法处理空值问题）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> ISNULL(commission_pct);</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">=</span> <span class="keyword">NULL</span>; <span class="comment">-- 查询失败</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738900575560.png" alt=""></p><h3 id="3-2-非空运算符-IS-NOT-NULL"><a href="#3-2-非空运算符-IS-NOT-NULL" class="headerlink" title="3.2 非空运算符 IS NOT NULL"></a>3.2 非空运算符 <code>IS NOT NULL</code></h3><p>是否为 <code>NULL</code> ，如果为 <code>NULL</code> 则返回 <code>0</code> ，否则返回 <code>1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>, <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>, <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-最小值运算符-LEAST"><a href="#3-3-最小值运算符-LEAST" class="headerlink" title="3.3 最小值运算符 LEAST()"></a>3.3 最小值运算符 <code>LEAST()</code></h3><p>返回 <code>LEAST(a1, a2, ..., ai, ..., an)</code> 中的最小值</p><ul><li>当 <code>ai</code> 是 <code>int</code> 或者 <code>float</code> 时，<code>LEAST</code> 将返回其中最小的值</li><li>当 <code>ai</code> 为 <code>str</code> 时，返回字母表中顺序最靠前的字符</li><li>当列表中有 <code>NULL</code> 时，返回值为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> LEAST(<span class="number">1</span>, <span class="number">2</span>), LEAST(<span class="number">1.2</span>, <span class="number">3</span>), LEAST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>), LEAST(<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> LEAST(<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> LEAST(<span class="number">1.2</span>, <span class="number">3</span>) <span class="operator">|</span> LEAST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>) <span class="operator">|</span> LEAST(<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>           <span class="number">1.2</span> <span class="operator">|</span> ac               <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-4-最大值运算符-GREATEST"><a href="#3-4-最大值运算符-GREATEST" class="headerlink" title="3.4 最大值运算符 GREATEST()"></a>3.4 最大值运算符 <code>GREATEST()</code></h3><p>返回 <code>GREATEST(a1, a2, ..., ai, ..., an)</code> 中的最大值</p><ul><li>当 <code>ai</code> 是 <code>int</code> 或者 <code>float</code> 时，<code>GREATEST</code> 将返回其中最大的值</li><li>当 <code>ai</code> 为 <code>str</code> 时，返回字母表中顺序最靠后的字符</li><li>当列表中有 <code>NULL</code> 时，返回值为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> GREATEST(<span class="number">1</span>, <span class="number">2</span>), GREATEST(<span class="number">1.2</span>, <span class="number">3</span>), GREATEST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>), GREATEST(<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> GREATEST(<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> GREATEST(<span class="number">1.2</span>, <span class="number">3</span>) <span class="operator">|</span> GREATEST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>) <span class="operator">|</span> GREATEST(<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span>              <span class="number">2</span> <span class="operator">|</span>              <span class="number">3.0</span> <span class="operator">|</span> b                   <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-5-判断是否区间中的值-BETWEEN-AND"><a href="#3-5-判断是否区间中的值-BETWEEN-AND" class="headerlink" title="3.5 判断是否区间中的值 BETWEEN ... AND ..."></a>3.5 判断是否区间中的值 <code>BETWEEN ... AND ...</code></h3><p>寻找位于 <code>[a, b]</code> 中与否，即大于等于 <code>a</code> 小于等于 <code>b</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">BETWEEN</span> a <span class="keyword">AND</span> b;</span><br></pre></td></tr></table></figure><p>例如，是则为 <code>1</code> 否则返回 <code>0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">5</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span>, <span class="number">0.4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">6</span>, <span class="string">&#x27;x&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">0.4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">6</span> <span class="operator">|</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;z&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span>                   <span class="number">0</span> <span class="operator">|</span>                       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>完整的查表运用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">2500</span> <span class="keyword">AND</span> <span class="number">3500</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738901321018.png" alt=""></p><h3 id="3-6-属于运算符-IN"><a href="#3-6-属于运算符-IN" class="headerlink" title="3.6 属于运算符 IN"></a>3.6 属于运算符 <code>IN</code></h3><p>判断元素是否属于列表中，类似的，只要存在 <code>NULL</code> 则返回值为 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>                 <span class="number">1</span> <span class="operator">|</span>            <span class="keyword">NULL</span> <span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-7-不属于运算符-NOT-IN"><a href="#3-7-不属于运算符-NOT-IN" class="headerlink" title="3.7 不属于运算符 NOT IN"></a>3.7 不属于运算符 <code>NOT IN</code></h3><p>判断元素是否不属于列表，类似的，只要存在 <code>NULL</code> 则返回值为 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>), <span class="keyword">NULL</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-8-模糊匹配-LIKE"><a href="#3-8-模糊匹配-LIKE" class="headerlink" title="3.8 模糊匹配 LIKE"></a>3.8 模糊匹配 <code>LIKE</code></h3><p>模糊匹配<u>字符串</u>，如果满足条件则返回 <code>1</code> ，否则返回 <code>0</code> 。同样，遇 <code>NULL</code> 则 <code>NULL</code></p><ul><li>通配符：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;%&#x27;</span> <span class="comment">-- 匹配 0 个或多个字符。</span></span><br><span class="line"><span class="string">&#x27;_&#x27;</span> <span class="comment">-- 只能匹配一个字符。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;  <span class="comment">-- 匹配 first_name 字段以 S 开头的字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738903197390.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;  <span class="comment">-- 匹配 last_name 字段形如 &#x27;一个字母 + o&#x27; 开头的字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738903166457.png" alt=""></p><h3 id="3-9-利用-ESCAPE-处理特殊字符"><a href="#3-9-利用-ESCAPE-处理特殊字符" class="headerlink" title="3.9 利用 ESCAPE 处理特殊字符"></a>3.9 利用 <code>ESCAPE</code> 处理特殊字符</h3><p>当需要查询的元素中包含特殊字符，如 <code>%, _, $</code> 等。可以使用 <code>\</code> 或其他字符（除 <code>\</code> 其他字符需要 <code>ESCAPE</code> 指明为转义字符）处理。</p><ul><li>例如：我们需要查询形如 <code>增长50%左右</code> ，即匹配以任意字符开头，接着是 <code>50%</code>，最后是任意字符的字符串。所以可以采取 <code>&#39;%50\%%&#39;</code> 或 <code>&#39;%50$%%&#39; ESCAPE &#39;$&#39;</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;IT$_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;$&#x27;</span>;  <span class="comment">-- 指定 &#x27;$&#x27; 为转义字符，&#x27;$&#x27; 后的 &#x27;_&#x27; 为普通字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;IT@_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;@&#x27;</span>;  <span class="comment">-- 指定 &#x27;@&#x27; 为转义字符，&#x27;@&#x27; 后的 &#x27;_&#x27; 为普通字符</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> job_id  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> IT_PROG <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4 逻辑运算符"></a>4 逻辑运算符</h2><p>逻辑运算符的返回结果为 <code>1, 0, NULL</code></p><p>逻辑运算符大多符合直觉，并不复杂</p><h3 id="4-1-非-运算符-NOT-或"><a href="#4-1-非-运算符-NOT-或" class="headerlink" title="4.1 非 运算符 NOT 或 !"></a>4.1 非 运算符 <code>NOT</code> 或 <code>!</code></h3><ul><li><code>!0 -&gt; 1</code> 值为0时返回1</li><li><code>!非0 -&gt; 0</code> 值为非0值时返回0</li><li><code>!NULL -&gt; NULL</code> 值为NULL时，返回NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NOT</span> <span class="number">1</span>, <span class="keyword">NOT</span> <span class="number">0</span>, <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>), <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span>, <span class="keyword">NOT NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>) <span class="operator">|</span> <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-2-与-运算符-AND-或-amp-amp"><a href="#4-2-与-运算符-AND-或-amp-amp" class="headerlink" title="4.2 与 运算符 AND 或 &amp;&amp;"></a>4.2 与 运算符 <code>AND</code> 或 <code>&amp;&amp;</code></h3><ul><li><p><code>非0非NULL &amp;&amp; 非0非NULL -&gt; 1</code> 所有值均为非0值，并且都不为NULL时，返回1</p></li><li><p><code>0 &amp;&amp; ... -&gt; 0</code>一个值或者多个值为0时则返回0</p></li><li><p><code>NULL &amp;&amp; ... -&gt; NULL</code>否则返回NULL</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>例如：查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;=</span><span class="number">10000</span></span><br><span class="line">  <span class="keyword">AND</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%MAN%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738906355775.png" alt=""></p><h3 id="4-3-或-运算符-OR-或"><a href="#4-3-或-运算符-OR-或" class="headerlink" title="4.3 或 运算符 OR 或 ||"></a>4.3 或 运算符 <code>OR</code> 或 <code>||</code></h3><ul><li><code>非0非NULL || 非NULL -&gt; 1</code> 值都不为NULL，并且任何一个值为非0值时，则返回1</li><li><code>0 || 0 -&gt; 0</code> 否则返回0；</li><li><code>非0非NULL || NULL -&gt; 1</code> 当一个值为NULL，并且另一个值为非0值时，返回1，否则为NULL</li><li><code>NULL || NULL</code> 当两个值都为NULL时，返回NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">3</span>, <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span>, <span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">NULL</span>, <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>         <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">2</span> warnings (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>AND</code> 的优先级高于 <code>OR</code> ，先处理与逻辑，再考虑或逻辑</p></blockquote><h3 id="4-4-异或-运算符-XOR"><a href="#4-4-异或-运算符-XOR" class="headerlink" title="4.4 异或 运算符 XOR"></a>4.4 异或 运算符 <code>XOR</code></h3><ul><li>存在 <code>NULL</code>时，则返回 <code>NULL</code></li><li>都<code>非0非NULL</code>，则返回 <code>0</code></li><li><code>0 XOR 0 -&gt; 0</code> 都 <code>0</code> 则返回 <code>0</code></li><li>一个为 <code>0</code>，另一个 <code>非0非NULL</code> ，则返回 <code>1</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> XOR <span class="number">1</span>, <span class="number">2</span> XOR <span class="number">3</span>, <span class="number">0</span> XOR <span class="number">0</span>, <span class="number">0</span> XOR <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> XOR <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span> XOR <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">0</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5 位运算符"></a>5 位运算符</h2><p>位运算符会先将操作数变成<strong>二进制数</strong>，然后进行位运算，最后将计算结果从二进制变回<strong>十进制数</strong></p><p>位运算在所有语言中均类似，不过多介绍。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&amp;</span> b;   <span class="comment">-- 按位与</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">|</span> b;   <span class="comment">-- 按位或</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">^</span> b;   <span class="comment">-- 按位异或</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">~</span> a;     <span class="comment">-- 按位取反</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&gt;&gt;</span> <span class="number">2</span>;  <span class="comment">-- 按位右移</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&lt;&lt;</span> <span class="number">2</span>;  <span class="comment">-- 按位左移</span></span><br></pre></td></tr></table></figure><h2 id="6-优先级"><a href="#6-优先级" class="headerlink" title="6 优先级"></a>6 优先级</h2><p>优先级越高，越先运算</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738911612091.png" alt="优先级由高到低 1-&gt;8"></p><blockquote><p>建议使用多个计算式，均使用 <code>()</code> </p></blockquote><h2 id="7-正则表达式"><a href="#7-正则表达式" class="headerlink" title="7 正则表达式"></a>7 正则表达式</h2><p>正则表达式在各种语言中均类似，下面介绍 <code>SQL</code> 语言中 <code>REGEXP</code> 的使用</p><h3 id="7-1-REGEXP-的使用"><a href="#7-1-REGEXP-的使用" class="headerlink" title="7.1 REGEXP 的使用"></a>7.1 <code>REGEXP</code> 的使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 REGEXP 匹配条件(正则表达式);</span><br></pre></td></tr></table></figure><h3 id="7-2-常见正则表达式"><a href="#7-2-常见正则表达式" class="headerlink" title="7.2 常见正则表达式"></a>7.2 常见正则表达式</h3><h4 id="7-2-1-匹配起始字符"><a href="#7-2-1-匹配起始字符" class="headerlink" title="7.2.1 匹配起始字符 ^"></a>7.2.1 匹配起始字符 <code>^</code></h4><ul><li>表达式 <code>^K</code> 以 <code>K</code> 起始的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^K&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912114205.png" alt=""></p><h4 id="7-2-2-匹配结尾字符"><a href="#7-2-2-匹配结尾字符" class="headerlink" title="7.2.2 匹配结尾字符 $"></a>7.2.2 匹配结尾字符 <code>$</code></h4><ul><li>表达式 <code>t$</code> 以 <code>t</code> 结尾的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> first_name REGEXP <span class="string">&#x27;t$&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912256452.png" alt=""></p><h4 id="7-2-3-匹配单个字符"><a href="#7-2-3-匹配单个字符" class="headerlink" title="7.2.3 匹配单个字符 ."></a>7.2.3 匹配单个字符 <code>.</code></h4><ul><li>表达式 <code>a.b</code> 包含字母 <code>a</code> 和 <code>b</code> 且 <code>a</code> 和 <code>b</code> 之间只有一个字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;a.b&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912435878.png" alt=""></p><h4 id="7-2-4-匹配多个字符"><a href="#7-2-4-匹配多个字符" class="headerlink" title="7.2.4 匹配多个字符 + *"></a>7.2.4 匹配多个字符 <code>+</code> <code>*</code></h4><ul><li>表达式 <code>ba+</code> 包含字符串 <code>...ba...</code> 其中 <code>+</code> 要求多个 <code>a</code></li></ul><blockquote><p><code>+</code> 要求 <strong>1次或多次</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^ba+&#x27;</span>; <span class="comment">-- 包含 ba... ^b 要求必须以 b 开头</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912757500.png" alt=""></p><ul><li>表达式 <code>b*an</code> 包含 <code>...b...an</code> 其中 <code>*</code> 要求多个 <code>b</code></li></ul><blockquote><p><code>*</code> 要求 <strong>0次或多次</strong></p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913126980.png" alt=""></p><h4 id="7-2-5-匹配特定字符串-39-39"><a href="#7-2-5-匹配特定字符串-39-39" class="headerlink" title="7.2.5 匹配特定字符串 &#39;&#39;"></a>7.2.5 匹配特定字符串 <code>&#39;&#39;</code></h4><ul><li>表达式 <code>&#39;un&#39;</code> 包含 <code>un</code> 即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;un&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注：可以使用逻辑运算符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;un|am&#x27;</span>;  <span class="comment">-- 包含 un 或 am</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913338905.png" alt=""></p><h4 id="7-2-6-匹配集合中任一元素"><a href="#7-2-6-匹配集合中任一元素" class="headerlink" title="7.2.6 匹配集合中任一元素 []"></a>7.2.6 匹配集合中任一元素 <code>[]</code></h4><ul><li>表达式 <code>[orz]</code> 包含<code>o</code> <code>r</code> <code>z</code> 任一一个即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;[orz]&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913543623.png" alt=""></p><h4 id="7-2-7-匹配完全由集合外的元素构成"><a href="#7-2-7-匹配完全由集合外的元素构成" class="headerlink" title="7.2.7 匹配完全由集合外的元素构成 [^]"></a>7.2.7 匹配完全由集合外的元素构成 <code>[^]</code></h4><ul><li>表达式 <code>[^A-Y]</code> 表示只有当元素是有A-Y以外的元素构成时才被查询到。注意：大小写敏感。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email REGEXP <span class="string">&#x27;[^A-Y]&#x27;</span>; <span class="comment">-- 查询存在 小写字母 或 Z</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738914108381.png" alt=""></p><h4 id="7-2-8-使用-n-或者-n-m-来指定字符串连续出现的次数"><a href="#7-2-8-使用-n-或者-n-m-来指定字符串连续出现的次数" class="headerlink" title="7.2.8 使用 {n,} 或者 {n,m} 来指定字符串连续出现的次数"></a>7.2.8 使用 <code>&#123;n,&#125;</code> 或者 <code>&#123;n,m&#125;</code> 来指定字符串连续出现的次数</h4><ul><li>表达式 <code>a&#123;2,&#125;</code> 表示字母 <code>a</code> 连续出现至少2次</li><li>表达式 <code>a&#123;2,4&#125;</code> 表示字母 <code>a</code> 连续出现最少2次，最多不能超过4次</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary REGEXP <span class="string">&#x27;0&#123;2,3&#125;&#x27;</span>; <span class="comment">-- 连续 2-3 个 0</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738914541747.png" alt=""></p>]]></content>
    
    
    <summary type="html">本文详细介绍 数据库查询语言 SQL 的各种运算符：算术、比较、逻辑、位，以及正则表达式在查询语言中的应用</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（2）SELECT 语句</title>
    <link href="https://blog.iskage.online/posts/151eef00.html"/>
    <id>https://blog.iskage.online/posts/151eef00.html</id>
    <published>2025-02-06T09:52:00.000Z</published>
    <updated>2025-02-06T09:54:37.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h2><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理</p><h2 id="1-SQL-语言"><a href="#1-SQL-语言" class="headerlink" title="1 SQL 语言"></a>1 SQL 语言</h2><h3 id="1-1-书写规则"><a href="#1-1-书写规则" class="headerlink" title="1.1 书写规则"></a>1.1 书写规则</h3><ul><li>一行或多行</li><li>以 <code>;</code> 分隔</li><li>字符串型 和 日期时间类型 的数据使用 <code>&#39;&#39;</code> 表示</li><li>列的别名使用 <code>&quot;&quot;</code> 表示</li><li>建议关键字、函数名大写</li></ul><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p>单行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注释文字 (MySQL特有)</span><br><span class="line"><span class="comment">-- 注释文字</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释文字 */</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数据导入-运行-sql文件"><a href="#1-3-数据导入-运行-sql文件" class="headerlink" title="1.3 数据导入 (运行.sql文件)"></a>1.3 数据导入 (运行<code>.sql</code>文件)</h3><p>登陆 <code>MySQL</code> 后，输入指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source xx.sql  <span class="comment">-- 输入路径</span></span><br></pre></td></tr></table></figure><p>在学习语句前，先下载 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/docs/mydb.sql">mydb.sql 文件</a> ，之后使用数据导入的方式，运行 <code>mydb.sql</code> 创建数据库 <code>atguigudb</code> 以便后续操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source .<span class="operator">/</span>xxx<span class="operator">/</span>mydb.sql  <span class="comment">-- mac 电脑</span></span><br><span class="line">mysql<span class="operator">&gt;</span> source C:\Users\Username\xxx\mydb.sql  <span class="comment">-- windows 电脑</span></span><br></pre></td></tr></table></figure><blockquote><p>该文件来自 <a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a></p></blockquote><h2 id="2-基本-SELECT-语句"><a href="#2-基本-SELECT-语句" class="headerlink" title="2 基本 SELECT 语句"></a>2 基本 SELECT 语句</h2><blockquote><p>首先先进入刚刚创建的数据库 <code>atguigudb</code> </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> USE atguigudb;</span><br></pre></td></tr></table></figure><h3 id="2-1-SELECT-…-FROM-…"><a href="#2-1-SELECT-…-FROM-…" class="headerlink" title="2.1 SELECT … FROM …"></a>2.1 SELECT … FROM …</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 选择哪些列</span><br><span class="line"><span class="keyword">FROM</span> 从哪个表中选择</span><br></pre></td></tr></table></figure><ul><li>选择所有列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>选择表中特定的列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-2-列的别名"><a href="#2-2-列的别名" class="headerlink" title="2.2 列的别名"></a>2.2 列的别名</h3><p>可以在列名后紧跟别名，也可以使用关键字 <code>AS</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id emp_id,</span><br><span class="line">    last_name <span class="keyword">AS</span> lname,</span><br><span class="line">    department_id &quot;dept_id&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738834180268.png" alt=""></p><p>也可以对整列进行计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id emp_id,</span><br><span class="line">    salary <span class="operator">*</span> <span class="number">12</span> &quot;annual salary&quot;  <span class="comment">-- 对 salary 整列计算</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-3-去除重复行"><a href="#2-3-去除重复行" class="headerlink" title="2.3 去除重复行"></a>2.3 去除重复行</h3><p>默认情况不会去除重复行</p><p>在 <code>SELECT</code> 语句中增加关键字 <code>DISTINCT</code> 即可返回去除重复行后的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 12 rows</span></span><br></pre></td></tr></table></figure><blockquote><p>注：若 <code>DISTINCT</code> 后存在多个字段，只要两行之间有某个字段不同，则不认为重复</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 74 rows</span></span><br></pre></td></tr></table></figure><p>例如：对 <code>department_id, salary</code> 去重，虽然部门只有 <code>12</code> 个，但因为 <code>salary</code> 仍有一些不同，故认为并不重复。</p><h3 id="2-4-空值-null-参与计算"><a href="#2-4-空值-null-参与计算" class="headerlink" title="2.4 空值 null 参与计算"></a>2.4 空值 <code>null</code> 参与计算</h3><p>遇到 <code>null</code> 值，运算的结果都为 <code>null</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, salary &quot;月工资&quot;, salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> commission_pct) <span class="operator">*</span> <span class="number">12</span> &quot;年工资&quot;, commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738834695370.png" alt=""></p><h3 id="2-5-着重号-解决关键字冲突"><a href="#2-5-着重号-解决关键字冲突" class="headerlink" title="2.5 着重号 ``  解决关键字冲突"></a>2.5 着重号 <code>`` </code> 解决关键字冲突</h3><p>如果不得不使用关键字命名，则可以使用 <code>`` </code> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">order</span>;</span><br><span class="line"><span class="comment">-- 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">order</span>`;</span><br><span class="line"><span class="comment">-- 正确</span></span><br></pre></td></tr></table></figure><h3 id="2-6-增加常值列"><a href="#2-6-增加常值列" class="headerlink" title="2.6 增加常值列"></a>2.6 增加常值列</h3><p>增加一列命名为 <code>temp_const</code> （字符串用 <code>&#39;&#39;</code>）用数字 <code>123</code> 填充</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">123</span> <span class="keyword">AS</span> <span class="string">&#x27;temp_const&#x27;</span>, employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738835171143.png" alt=""></p><h2 id="3-查询表结构"><a href="#3-查询表结构" class="headerlink" title="3 查询表结构"></a>3 查询表结构</h2><p>使用 <code>DESCRIBE</code> 或 <code>DESC</code> 命令，查询表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field          <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date      <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary         <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-WHERE-过滤条件"><a href="#4-WHERE-过滤条件" class="headerlink" title="4 WHERE 过滤条件"></a>4 <code>WHERE</code> 过滤条件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;King&#x27;</span> <span class="keyword">and</span> first_name <span class="operator">=</span> <span class="string">&#x27;Steven&#x27;</span>; <span class="comment">-- 过滤条件</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">90</span>; <span class="comment">-- 过滤条件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文详细介绍 SELECT 语句的基本使用</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Conda 创建虚拟环境全流程</title>
    <link href="https://blog.iskage.online/posts/2c3265b7.html"/>
    <id>https://blog.iskage.online/posts/2c3265b7.html</id>
    <published>2025-02-06T04:11:00.000Z</published>
    <updated>2025-02-06T04:14:46.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载-Miniconda">1 下载 Miniconda</h2><p>前往<a href="https://www.anaconda.com/download">官网 https://www.anaconda.com/download</a>下载，需要提交邮箱，验证下载。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738812320257.png" alt=""></p><p>提交成功后，滑至底部，选择 [Miniconda Installers] ，因为它相比 [Anaconda] 更为精简。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/976615dc8f3b26708fe5dd4d932c3b4d_720.png" alt=""></p><blockquote><p>注：需要提前下载 <code>Python</code> ，可前去 <a href="https://www.python.org/downloads/">Python 官网</a> 下载</p></blockquote><h2 id="2-安装-Miniconda">2 安装 Miniconda</h2><p>先点击 [Next] ，而后点击 [I Agree] ，而后选择 [All Users] ，这将为电脑的所有用户安装【推荐】，然后选择 [Next]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/91d3b0a80dc3f5f623c41fb89a44a4f7.png" alt=""></p><p>之后，选择安装路径，可以根据自己的情况来，但要记住安装路径，因为之后要添加【环境变量】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/12b49c1abc490ecd4ca7a9fe63c6436f_720.png" alt=""></p><p>之后，三项【全部勾选】后安装即可。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f6f67e69c09729405b20ae42d4cbf2c2_720.png" alt=""></p><h2 id="3-配置环境变量">3 配置环境变量</h2><p>右键 [此电脑] ，选择 [属性] ，打开 [系统] 窗口，点击 [高级系统设置]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4ba1d54ca6830505fae9a8bc721ad076_720.png" alt=""></p><p>打开 [系统属性] ，选择 [高级] 选项，点击 [环境变量] 在 [环境变量] 窗口，选择 [path] 点击 [编辑] ，在 [编辑环境变量] 窗口中，将 Miniconda 如图所示配置。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/bf764dcc6b2bd4b546cf7fa43530c07e.png" alt=""></p><p>配置【三个路径】一般默认情况为，根据之前安装时的具体路径选择</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\miniconda3</span><br><span class="line">C:\ProgramData\miniconda3\Scripts</span><br><span class="line">C:\ProgramData\miniconda3\Library\bin</span><br></pre></td></tr></table></figure><blockquote><p>注：一定要点击确认，进行保存</p></blockquote><h2 id="4-Conda-的使用">4 Conda 的使用</h2><p>首先检查是否已经成功配置，在命令行/终端中输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; conda -V</span><br><span class="line">conda <span class="number">24.11</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>如果输出版本号，则说明环境配置成功，可正常使用</p><h2 id="5-创建环境">5 创建环境</h2><p>创建虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名 python=<span class="number">3.12</span></span><br></pre></td></tr></table></figure><p><code>环境名</code> 可自己定义，<code>python=x.x</code> 可省略</p><blockquote><p>注：必须在全局已经下载安装了 <code>Python</code></p></blockquote><h2 id="6-激活环境">6 激活环境</h2><p>激活已经创建的虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>退出激活的虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h2 id="7-常见问题：Run-‘conda-init’-before-‘conda-activate’">7 常见问题：Run ‘conda init’ before ‘conda activate’</h2><p>当执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>时会遇到报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CondaError: Run <span class="string">&#x27;conda init&#x27;</span> before <span class="string">&#x27;conda activate&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>解决方法</p></blockquote><p>使用【管理员身份】打开【终端】，执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init</span><br></pre></td></tr></table></figure><p>然后回到重新执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><blockquote><p>如若仍然失败，则检查是否为下文的常见问题：无法加载文件 profile.ps1</p></blockquote><h2 id="8-常见问题：无法加载文件-profile-ps1">8 常见问题：无法加载文件 profile.ps1</h2><p>如果【已经使用管理员身份执行完】命令 <code>conda init</code> ，在重新打开终端时出现以下报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">. : 无法加载文件 C:\Users\Username\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=<span class="number">135170</span> 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:<span class="number">1</span> 字符: <span class="number">3</span></span><br><span class="line">+ . <span class="string">&#x27;C:\Users\15056\Documents\WindowsPowerShell\profile.ps1&#x27;</span></span><br><span class="line">+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>则可以【使用管理员身份】打开终端，执行以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Set</span>-ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure><p>而后关闭终端，重新打开</p><p>如果此时命令行前显示 <code>(base)</code> 则说明配置完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\...</span><br></pre></td></tr></table></figure><p>此时使用，即可成功激活虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><h2 id="9-其他-conda-命令">9 其他 conda 命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs  <span class="comment"># 显示所有环境信息</span></span><br><span class="line">conda remove -n 环境名  <span class="comment"># 根据环境名删除虚拟环境</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用 Miniconda 更为轻便的搭建虚拟环境，包括了 下载、安装、环境变量配置、使用与常见问题收录</summary>
    
    
    
    <category term="conda" scheme="https://blog.iskage.online/categories/conda/"/>
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="conda" scheme="https://blog.iskage.online/tags/conda/"/>
    
    <category term="虚拟环境" scheme="https://blog.iskage.online/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（1）如何安装 MySQL</title>
    <link href="https://blog.iskage.online/posts/8b09a768.html"/>
    <id>https://blog.iskage.online/posts/8b09a768.html</id>
    <published>2025-02-05T07:42:00.000Z</published>
    <updated>2025-02-06T09:53:21.759Z</updated>
    
    <content type="html"><![CDATA[<h1>详细教程：如何安装 MySQL</h1><p>MySQL 是数据库管理系统 DSMS 之一，本文介绍如何 <strong>下载、安装、配置、登陆、使用</strong> MySQL</p><h2 id="1-下载">1 下载</h2><ol><li>前往官网：<a href="https://www.mysql.com">https://www.mysql.com</a></li><li>点击 - <a href="https://www.mysql.com/downloads/">Downloads</a></li></ol><p>点击 - <a href="https://dev.mysql.com/downloads/">MySQL Community (GPL) Downloads</a></p><p>社区版免费，且功能近似，适合学习使用。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738735763767.png" alt=""></p><ol start="3"><li>点击 - <a href="https://dev.mysql.com/downloads/mysql/">MySQL Community Server</a></li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738735912017.png" alt=""></p><ol start="4"><li>选择版本</li></ol><p>推荐使用 <code>8.0.x</code> 版本，相比旧版本 <code>5.0.x</code> 更为完善。点击 - <a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">Go to Download Page</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738736158523.png" alt=""></p><p>选择 <code>.msi</code> 的安装程序。选择图中的程序下载，配有图形化安装流程，支持离线安装。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738736235034.png" alt=""></p><blockquote><p>注：下载需要注册 ORACLE 甲骨文公司账户</p></blockquote><h2 id="2-安装">2 安装</h2><ol><li>找到文件 <code>mysql-installer-community-8.0.41.0.msi</code> ，双击进入安装。</li><li>在 [Choosing a Setup Type] - 窗口中选择 自定义安装 [Custom]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/6fb510a37d115e06be126a4e7bde91eb.png" alt=""></p><ol start="3"><li>在 [Select Products] 窗口中，选择产品。从左边选择想要安装的产品，而后显示在右边。</li></ol><blockquote><p>注：如想自定义安装路径，见后。</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/0dddb331420bff1755778e44b880e51b_720.png" alt=""></p><p>自定义安装路径，则需要选择产品，点击 [Advanced Options]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/ba921bd680af66e88223a0b7e3720285_720.png" alt=""></p><ol start="4"><li>在 [Installation] 窗口，点击 [Execute] 开始安装</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f32f54e134c74322b24711806c2996ce_720.png" alt=""></p><p>安装完成点击 [Next]</p><ol start="5"><li>在 [Product Configuration] 窗口，开始配置，点击 [Next]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/29078465616e9aff29a15b4119d4f07a_720.png" alt=""></p><p>保持默认即可，点击 [Next]</p><p>[Config Type] 为主机类型，[Port: 3306] 为端口号</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/9bcda347f6bbca58df8843f38c178a78_720.png" alt=""></p><ol start="6"><li>在 [Authentication Method] 窗口，可以设置授权方式。默认，直接点击 [Next]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f1754354d7e0302717a9c1fc4c528c02_720.png" alt=""></p><ol start="7"><li>在 [Accounts and Roles] 界面设置管理员密码。用于登陆 MySQL 服务</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/dfb3117e767af332e6b2822ff27a0654_720.png" alt=""></p><ol start="8"><li>在 [Windows Service] 界面设置 [服务] ，保持默认即可。</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/d3129dd2ba331425f9e7892a0b81b087_720.png" alt=""></p><ol start="9"><li>在 [Server File Permissions] 中授权，保持默认即可</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/33bcd45652a5178ddd35788211bbfc93_720.png" alt=""></p><ol start="10"><li>在 [Apply Configuration] 点击 [Execute] 执行之前的配置</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/79ce3831a4322e41691869175c54a604_720.png" alt=""></p><p>点击 [Finish] 完成配置</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/e7357753070eaa02ec50024aa28556a2_720.png" alt=""></p><ol start="11"><li>完成安装</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/40579a68dcdadf9f09e6c3c517e83525_720.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/494e644125931e21cf86124bb5e9d67c.png" alt=""></p><h2 id="3-环境变量">3 环境变量</h2><p>没有配置 MySQL 到环境变量中，终端无法运行 MySQL 命令。</p><ol><li>右键 [此电脑] ，选择 [属性]</li><li>打开 [系统] 窗口，点击 [高级系统设置]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4ba1d54ca6830505fae9a8bc721ad076_720.png" alt=""></p><ol start="3"><li>打开 [系统属性] ，选择 [高级] 选项，点击 [环境变量]</li><li>在 [环境变量] 窗口，选择 [path]</li><li>点击 [编辑] ，在 [编辑环境变量] 窗口中，将 MySQL 的 bin 目录添加进去，使用分号 <code>;</code> 划分</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/3648923a3ca1b07903f3e18b967dd1f9.png" alt=""></p><p>输入 MySQL 的 bin 目录 (根据自己的目录输入)，如果没有更改默认下载路径，则一般为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 8.0\bin</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/e1c8475465d768bc72da4b2b085ae4a1.png" alt=""></p><ol start="6"><li>点击 [确认] ，回到终端尝试使用 MySQL 指令</li></ol><p>检查是否成功，输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> mysql <span class="operator">-</span>V</span><br></pre></td></tr></table></figure><p>返回版本信息则代表成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server <span class="number">8.0</span>\bin\mysql.exe  Ver <span class="number">8.0</span><span class="number">.41</span> <span class="keyword">for</span> Win64 <span class="keyword">on</span> x86_64 (MySQL Community Server <span class="operator">-</span> GPL)</span><br></pre></td></tr></table></figure><h2 id="4-查看服务">4 查看服务</h2><p>需要启动服务，才能登陆 MySQL 并连接数据库。在之前配置时，已经默认服务启动。</p><p>可以检查一下：右键 [此电脑] 点击 [管理] ，双击 [服务和应用程序] ，双击 [服务] ，找到 MySQL 的服务 （默认情况下为 <code>MySQL80</code>）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/c94326af2e1953a05b2a0a087f366e8c_720.png" alt=""></p><p>也可以使用终端实现。右键 [终端]/[命令行工具] 使用 <strong>以管理员身份运行</strong> ，而后使用如下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务 MySQL80 为 MySQL 的服务名</span><br><span class="line"><span class="operator">&gt;</span> net <span class="keyword">start</span> MySQL80</span><br><span class="line"></span><br><span class="line"># 停止服务 MySQL80 为 MySQL 的服务名</span><br><span class="line"><span class="operator">&gt;</span> net stop MySQL80</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4639db1363ba088fad5f91904369a021_720.png" alt=""></p><h2 id="5-登陆-MySQL">5 登陆 MySQL</h2><p>打开 [终端] 输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h 主机名 <span class="operator">-</span>P 端口名 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p密码</span><br></pre></td></tr></table></figure><p>一般而言 主机名为 <code>localhost</code> ，端口名为 <code>3306</code> ，用户名为 <code>root</code> ，密码和 <code>-p</code> 之间不能有空格。</p><p>推荐使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>进行登陆，之后输入密码即可登陆。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><p>登陆成功后为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">8</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.41</span> MySQL Community Server <span class="operator">-</span> GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2025</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-简单尝试">6 简单尝试</h2><ol><li>查看已有数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;  </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名</span><br></pre></td></tr></table></figure><ol start="3"><li>删除数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><ol start="4"><li>进入数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><ol start="5"><li>查看数据库下所有数据表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_test <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> tb1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><ol start="6"><li>创建表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>不能为空/允许为空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>, <span class="comment">-- 不能为空</span></span><br><span class="line">    age <span class="type">int</span> <span class="keyword">null</span>         <span class="comment">-- 可以为空</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>默认值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">3</span>        <span class="comment">-- 设置默认为3</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>主键</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span>,       <span class="comment">-- 不能为空，不能重复</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>一般设置，主键+自增 <code>标准</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ol start="7"><li>删除表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><ol start="8"><li>展示表信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">16</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文详细介绍如何 下载、安装、配置、登陆、使用 MySQL</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch 搭建神经网络 目录</title>
    <link href="https://blog.iskage.online/posts/8a1b9ca7.html"/>
    <id>https://blog.iskage.online/posts/8a1b9ca7.html</id>
    <published>2025-02-05T07:30:00.000Z</published>
    <updated>2025-02-05T03:36:26.053Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主自学 Pytorch 整理的笔记。点击链接即可前往对应文章查看。更多信息，可前往本人的<a href="https://github.com/isKage/iskage.github.io">Github库</a>中查询。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>Pytorch 官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>Pytorch 官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="./3f7272cd.html">1 下载 Pytorch 和数据处理</a></p><p><a href="./ae1c954d.html">2 网络搭建</a></p><p><a href="./119f3166.html">3 损失函数 反向传播 优化器</a></p><p><a href="./bd02f045.html">4 网络调用和保存</a></p><p><a href="./2d229fe6.html">5 完整模型训练</a></p></div>]]></content>
    
    
    <summary type="html">利用 Pytorch 搭建神经网络，已更新完全</summary>
    
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/categories/Pytorch/"/>
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch 搭建神经网络（5）完整模型训练</title>
    <link href="https://blog.iskage.online/posts/2d229fe6.html"/>
    <id>https://blog.iskage.online/posts/2d229fe6.html</id>
    <published>2025-02-05T07:27:10.000Z</published>
    <updated>2025-02-05T03:32:21.233Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch (CIFAR10)</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-Structure">1. Structure</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8882617716.png" alt=""></p><h2 id="2-Code">2 Code</h2><h3 id="train-model-py">train_model.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建神经网络(output_features=10)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证网络正确性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    classification = Classification10Class()</span><br><span class="line">    <span class="comment"># 按照batch_size=64，channel=3，size=32*32输入，即64张图片，RGB颜色通道，32*32的大小输入</span></span><br><span class="line">    inputs = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    ouputs = classification(inputs)</span><br><span class="line">    <span class="built_in">print</span>(ouputs.shape)</span><br></pre></td></tr></table></figure><h3 id="train-py"><a href="http://train.py">train.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Dataset &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------第 &#123;&#125; 轮训练开始----------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br></pre></td></tr></table></figure><h3 id="output">output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----------第 1 轮训练开始----------</span><br><span class="line">训练次数: 100, loss: 2.2914345264434814</span><br><span class="line">训练次数: 200, loss: 2.2848589420318604</span><br><span class="line">训练次数: 300, loss: 2.2572102546691895</span><br><span class="line">训练次数: 400, loss: 2.1692259311676025</span><br><span class="line">训练次数: 500, loss: 2.0409679412841797</span><br><span class="line">训练次数: 600, loss: 2.0187602043151855</span><br><span class="line">训练次数: 700, loss: 2.009617567062378</span><br><span class="line">测试集loss: 313.149169921875</span><br><span class="line">----------第 2 轮训练开始----------</span><br><span class="line">训练次数: 800, loss: 1.878823161125183</span><br><span class="line">训练次数: 900, loss: 1.8439174890518188</span><br><span class="line">训练次数: 1000, loss: 1.9330165386199951</span><br><span class="line">训练次数: 1100, loss: 1.9703041315078735</span><br><span class="line">训练次数: 1200, loss: 1.7066203355789185</span><br><span class="line">训练次数: 1300, loss: 1.668871521949768</span><br><span class="line">训练次数: 1400, loss: 1.7355754375457764</span><br><span class="line">训练次数: 1500, loss: 1.7841742038726807</span><br><span class="line">测试集loss: 309.877685546875</span><br><span class="line">----------第 3 轮训练开始----------</span><br><span class="line">训练次数: 1600, loss: 1.7344536781311035</span><br><span class="line">训练次数: 1700, loss: 1.621435284614563</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3-Visualization-Save">3 Visualization &amp; Save</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Dataset &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(</span><br><span class="line">                tag=<span class="string">&quot;train_loss (every 100): &quot;</span>,</span><br><span class="line">                scalar_value=loss.item(),</span><br><span class="line">                global_step=total_train_step,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 测试集loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_loss (every epoch): &quot;</span>,</span><br><span class="line">        scalar_value=total_test_loss,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">    torch.save(classification, <span class="string">&quot;./models_cifar/classification_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103240716.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103319943.png" style="zoom:80%;"/><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103407633.png" style="zoom:80%;" /><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88103503420.png" style="zoom:80%;" /></p><h2 id="4-Full-Code">4 Full Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; CIFAR Classification &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train_model <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 准备数据集</span></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># print(&quot;训练数据集长度为 &#123;&#125;&quot;.format(train_data_size))</span></span><br><span class="line"><span class="comment"># print(&quot;测试数据集长度为 &#123;&#125;&quot;.format(test_data_size))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_dataloader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=<span class="number">64</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 搭建神经网络 (from train_model.py import *)</span></span><br><span class="line">classification = Classification10Class()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 优化器</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">optimizer = torch.optim.SGD(</span><br><span class="line">    params=classification.parameters(),</span><br><span class="line">    lr=learning_rate,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数 == epoch</span></span><br><span class="line">epochs = <span class="number">10</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 开始训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤</span></span><br><span class="line">    classification.train()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        <span class="comment"># 输入输出</span></span><br><span class="line">        images, targets = data</span><br><span class="line">        outputs = classification(images)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新参数</span></span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(</span><br><span class="line">                tag=<span class="string">&quot;train_loss (every 100 steps)&quot;</span>,</span><br><span class="line">                scalar_value=loss.item(),</span><br><span class="line">                global_step=total_train_step,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">    classification.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">    total_accuracy = <span class="number">0</span>  <span class="comment"># 分类问题正确率</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            images, targets = data</span><br><span class="line">            outputs = classification(images)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 正确率</span></span><br><span class="line">            accuracy = (outputs.argmax(axis=<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在测试集上的损失</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_loss (every epoch)&quot;</span>,</span><br><span class="line">        scalar_value=total_test_loss,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在测试集上的正确率</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的正确率: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_accuracy / test_data_size))</span><br><span class="line">    writer.add_scalar(</span><br><span class="line">        tag=<span class="string">&quot;test_accuracy (every epoch)&quot;</span>,</span><br><span class="line">        scalar_value=total_accuracy / test_data_size,</span><br><span class="line">        global_step=epoch,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">    torch.save(classification, <span class="string">&quot;./models_cifar/classification_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line">    <span class="comment"># torch.save(classification.state_dict(), &quot;./models_cifar/classification_&#123;&#125;.pth&quot;.format(epoch)) # 推荐</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h2 id="5-GPU">5 GPU</h2><h3 id="1-Google-Colab">1. Google Colab</h3><ul><li>Google Colab: <a href="https://colab.research.google.com/">https://colab.research.google.com/</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110119717.png" alt=""></p><ul><li>配置</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110154640.png" alt=""></p><ul><li>cpu 大约42sgpu 大约8s</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88110318142.png" alt=""></p><h3 id="2-Method-1-cuda">2. Method 1: .cuda()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; GPU &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    model_name = model_name.cuda()  <span class="comment"># GPU</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    loss_fn = loss_fn.cuda()  <span class="comment"># GPU</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    images = images.cuda()</span><br><span class="line">    targets = targets.cuda()</span><br></pre></td></tr></table></figure><h3 id="3-Method-2-to-device">3. Method 2: .to(device)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">model_name = model_name.to(device)</span><br><span class="line">loss_fn = loss_fn.to(device)</span><br><span class="line">images = images.to(device)</span><br><span class="line">targets = targets.to(device)</span><br></pre></td></tr></table></figure><h2 id="6-Validation-and-Test">6 Validation and Test</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">image_path = <span class="string">&quot;./image/dog.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载图片并转化类型</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">image = image.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">    torchvision.transforms.ToTensor(),</span><br><span class="line">])</span><br><span class="line">image = transform(image)  <span class="comment"># torch.Size([3, 32, 32])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 加载神经网络(因为是方式1, 所以要申明网络模型)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. load参数</span></span><br><span class="line">model = torch.load(<span class="string">&quot;./models_cifar/classification_gpu_29.pth&quot;</span>, map_location=torch.device(<span class="string">&#x27;cpu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 测试</span></span><br><span class="line">image = torch.reshape(image, (<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    outputs = model(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(outputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.argmax(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88114418117.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240808%E4%B8%8A%E5%8D%88114552561.png" alt=""></p>]]></content>
    
    
    <summary type="html">利用 Pytorch 搭建神经网络：完整的搭建，训练过程，以 CIFAR10 数据集为例</summary>
    
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/categories/Pytorch/"/>
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch 搭建神经网络（4）网络调用和保存</title>
    <link href="https://blog.iskage.online/posts/bd02f045.html"/>
    <id>https://blog.iskage.online/posts/bd02f045.html</id>
    <published>2025-02-05T07:27:06.000Z</published>
    <updated>2025-02-05T03:24:18.280Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-torchvision-models">1 torchvision.models</h2><p>有关图像处理的模型</p><p>torchvision.models: <a href="https://pytorch.org/vision/0.9/models.html">https://pytorch.org/vision/0.9/models.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8860250011.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8861010016.png" alt=""></p><h2 id="2-Example-Classification-VGG">2 Example: Classification VGG</h2><h3 id="1-Download-ImageNet">1. Download ImageNet</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8861138161.png" alt=""></p><p>too large</p><h3 id="2-Download-the-model">2. Download the model</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8862514836.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgg16_pretrained_false = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16_pretrained_true = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_true)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8862722432.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model: out_features=<span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="3-Add-Layers">3. Add Layers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 增加层 &quot;&quot;&quot;</span></span><br><span class="line">vgg16_pretrained_true.classifier.add_module(</span><br><span class="line">    name=<span class="string">&quot;add_linear&quot;</span>,  <span class="comment"># 增加新的层名</span></span><br><span class="line">    module=nn.Linear(</span><br><span class="line">        in_features=<span class="number">1000</span>,</span><br><span class="line">        out_features=<span class="number">10</span>,</span><br><span class="line">    ),  <span class="comment"># 增加新的层</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_true)  <span class="comment"># out_features=10</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8863539832.png" alt=""></p><h3 id="4-Modify-Layers">4. Modify Layers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 修改层 &quot;&quot;&quot;</span></span><br><span class="line">vgg16_pretrained_false.classifier[<span class="number">6</span>] = nn.Linear(</span><br><span class="line">    in_features=<span class="number">1000</span>,</span><br><span class="line">    out_features=<span class="number">10</span>,</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(vgg16_pretrained_false)  <span class="comment"># out_features=10</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240806%E4%B8%8B%E5%8D%8863840763.png" alt=""></p><h2 id="3-Save-Load-Models">3 Save &amp; Load Models</h2><h3 id="1-Save">1. Save</h3><h4 id="Method-1">Method 1</h4><ul><li>save()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. save method 1: save -&gt; structure + parameters</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">torch.save(vgg16, <span class="string">&quot;./models/vgg16_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Method-2-Recommend">Method 2 (Recommend)</h4><ul><li>save(model.state_dict())</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2. save method 2: save as dict -&gt; parameters (better)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">torch.save(vgg16.state_dict(), <span class="string">&quot;./models/vgg16_method2.pth&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-Load">2. Load</h3><h4 id="Method-1-2">Method 1</h4><ul><li>load()</li></ul><p>structure + parameters</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># load method 1:</span></span><br><span class="line">model1 = torch.load(<span class="string">&quot;./models/vgg16_method1.pth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(model1)</span><br></pre></td></tr></table></figure><h4 id="Method-2-Recommend-2">Method 2 (Recommend)</h4><ul><li>load_state_dict()</li></ul><p>parameters -&gt; models</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># load method 2:</span></span><br><span class="line">vgg16 = torchvision.models.vgg16()</span><br><span class="line">model2_param_dict = torch.load(<span class="string">&quot;./models/vgg16_method2.pth&quot;</span>)  <span class="comment"># parameters&#x27; dict</span></span><br><span class="line">vgg16.load_state_dict(model2_param_dict)</span><br><span class="line"><span class="built_in">print</span>(vgg16)</span><br></pre></td></tr></table></figure><h3 id="3-Some-Errors">3. Some Errors</h3><ul><li>save the model with method 1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; python_file_name: model_save.py &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNet</span>(nn.Module):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">super</span>(MyNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">      x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">my_net = MyNet()</span><br><span class="line">torch.save(my_net, <span class="string">&quot;my_net_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>load the model in another python file</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">error</span></span><br><span class="line"><span class="string">model = torch.load(&quot;my_net_method1.pth&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model_save <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">model = torch.load(<span class="string">&quot;my_net_method1.pth&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用 Pytorch 搭建神经网络：调用其他网络，保存自己的网络</summary>
    
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/categories/Pytorch/"/>
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch 搭建神经网络（3）损失函数 反向传播 优化器</title>
    <link href="https://blog.iskage.online/posts/119f3166.html"/>
    <id>https://blog.iskage.online/posts/119f3166.html</id>
    <published>2025-02-05T07:27:03.000Z</published>
    <updated>2025-02-05T03:21:53.096Z</updated>
    
    <content type="html"><![CDATA[<h1>Loss Backward Optimizer 损失函数 反向传播 优化器</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-Loss-Function">1 Loss Function</h2><h3 id="1-Loss-Functions">1. Loss Functions</h3><p><a href="https://pytorch.org/docs/1.8.1/nn.html#loss-functions">https://pytorch.org/docs/1.8.1/nn.html#loss-functions</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8834542085.png" alt=""></p><h3 id="2-Some-Loss-Functions">2. Some Loss Functions</h3><h4 id="L1Loss">L1Loss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8835511919.png" alt=""></p><ul><li>examples</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> L1Loss</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">target = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">target = torch.reshape(target, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss_sum = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)  <span class="comment"># tensor(2.)</span></span><br><span class="line">loss_mean = L1Loss(reduction=<span class="string">&#x27;mean&#x27;</span>)  <span class="comment"># tensor(0.6667)</span></span><br><span class="line">res_sum = loss_sum(<span class="built_in">input</span>, target)</span><br><span class="line">res_mean = loss_mean(<span class="built_in">input</span>, target)</span><br><span class="line"><span class="built_in">print</span>(res_sum)</span><br><span class="line"><span class="built_in">print</span>(res_mean)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input -&gt; (N, *)</span><br><span class="line">target -&gt; (N, *)</span><br></pre></td></tr></table></figure><h4 id="MSELoss">MSELoss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8835620468.png" alt=""></p><ul><li>example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MSELoss</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">target = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">target = torch.reshape(target, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = MSELoss()</span><br><span class="line">res = loss(<span class="built_in">input</span>, target)  <span class="comment"># tensor(1.3333)</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input -&gt; (N, *)</span><br><span class="line">target -&gt; (N, *)</span><br></pre></td></tr></table></figure><h4 id="CrossEntropyLoss">CrossEntropyLoss</h4><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8840106382.png" alt=""></p><ul><li>example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> CrossEntropyLoss</span><br><span class="line"></span><br><span class="line">input_predict = torch.tensor([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 模型返回了对3个种类的概率预测</span></span><br><span class="line">target = torch.tensor([<span class="number">1</span>])   <span class="comment"># 实际属于第1+1种，返回1</span></span><br><span class="line"></span><br><span class="line">input_predict = torch.reshape(input_predict, (<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">loss = CrossEntropyLoss()</span><br><span class="line">res = loss(input_predict, target)  <span class="comment"># tensor(1.1019)</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><ul><li>input &amp; target</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input  -&gt; (N, C)    最后得到的各个种类的概率</span><br><span class="line">target -&gt; (N)      实际属于哪一种</span><br><span class="line"></span><br><span class="line">output -&gt; 返回标量: If reduction is &#x27;none&#x27;, then the same size as the target: (N) </span><br><span class="line"></span><br><span class="line"># C = number of classes</span><br></pre></td></tr></table></figure><h3 id="3-Loss-of-CIFAR10">3. Loss of CIFAR10</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cifar</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Cifar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model1 = Sequential(</span><br><span class="line">            Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;测试&#x27;&#x27;&#x27;</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    outputs = my_net(imgs)</span><br><span class="line">    <span class="comment"># print(outputs)  # [p0, p1, ..., p9]  每张图片的类的预测的概率</span></span><br><span class="line">    <span class="comment"># print(targets)  # [t0, t1, ..., t63] 真实每张图片对应的类标号</span></span><br><span class="line"></span><br><span class="line">    res_loss = loss(outputs, targets)</span><br><span class="line">    <span class="built_in">print</span>(res_loss)   <span class="comment"># tensor(2.2994, grad_fn=&lt;NllLossBackward0&gt;) 误差</span></span><br></pre></td></tr></table></figure><h2 id="2-Backward">2 Backward</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; network &#x27;&#x27;&#x27;</span></span><br><span class="line">    imgs, targets = data</span><br><span class="line">    outputs = my_net(imgs)</span><br><span class="line">    <span class="comment"># print(outputs)  # [p0, p1, ..., p9]  每张图片的类的预测的概率</span></span><br><span class="line">    <span class="comment"># print(targets)  # [t0, t1, ..., t63] 真实每张图片对应的类标号</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; loss function &#x27;&#x27;&#x27;</span></span><br><span class="line">    res_loss = loss(outputs, targets)</span><br><span class="line">    <span class="comment"># print(res_loss)   # tensor(2.2994, grad_fn=&lt;NllLossBackward0&gt;) 误差</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; backward &#x27;&#x27;&#x27;</span></span><br><span class="line">    res_loss.backward()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8843712009.png" alt=""></p><h2 id="3-Optimizer">3 Optimizer</h2><p>Pytorch Docs: <a href="https://pytorch.org/docs/1.8.1/optim.html">https://pytorch.org/docs/1.8.1/optim.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240805%E4%B8%8B%E5%8D%8844003825.png" alt=""></p><h3 id="1-Basical-Usage">1. Basical Usage</h3><ol><li>Constructing it</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; 参数parameters和学习率lr(learning rate)是必须传入的，其他由特定算法决定 &#x27;&#x27;&#x27;</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">optimizer = optim.Adam([var1, var2], lr=<span class="number">0.0001</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>Taking an optimization step</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">input</span>, target <span class="keyword">in</span> dataset:</span><br><span class="line">  <span class="comment"># 清零</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 模型训练</span></span><br><span class="line">    output = model(<span class="built_in">input</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 损失函数</span></span><br><span class="line">    loss = loss_fn(output, target)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 优化器更新参数</span></span><br><span class="line">    optimizer.step()</span><br></pre></td></tr></table></figure><h2 id="4-完整网络代码-Full-Example-for-NN">4 完整网络代码 Full  Example for NN</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 加载数据 &#x27;&#x27;&#x27;</span></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(</span><br><span class="line">    root=<span class="string">&quot;./dataset&quot;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    download=<span class="literal">False</span>,</span><br><span class="line">    transform=torchvision.transforms.ToTensor()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cifar</span>(nn.Module):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 创建网络 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Cifar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model1 = Sequential(</span><br><span class="line">            Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(in_features=<span class="number">64</span> * <span class="number">4</span> * <span class="number">4</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 实例化网络 选择损失函数 优化器 &#x27;&#x27;&#x27;</span></span><br><span class="line">my_net = Cifar()</span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optim = torch.optim.SGD(my_net.parameters(), lr=<span class="number">0.01</span>)  <span class="comment"># 随机梯度下降</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 开始训练 &#x27;&#x27;&#x27;</span></span><br><span class="line">epochs = <span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    <span class="comment"># 每次训练起始损失</span></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; network &#x27;&#x27;&#x27;</span></span><br><span class="line">        imgs, targets = data</span><br><span class="line">        outputs = my_net(imgs)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; loss function &#x27;&#x27;&#x27;</span></span><br><span class="line">        res_loss = loss(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; zero_grad &#x27;&#x27;&#x27;</span></span><br><span class="line">        optim.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; backward &#x27;&#x27;&#x27;</span></span><br><span class="line">        res_loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; optim_step updated &#x27;&#x27;&#x27;</span></span><br><span class="line">        optim.step()</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; each epoch loss sum &#x27;&#x27;&#x27;</span></span><br><span class="line">        running_loss += res_loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;every epoch, the loss is: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(running_loss))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">360.25927734375</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">354.6569519042969</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">336.74420166015625</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">319.4207458496094</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">310.6980285644531</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">302.37701416015625</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">292.7424011230469</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>every epoch, the loss <span class="keyword">is</span>: <span class="number">284.93902587890625</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用 Pytorch 搭建神经网络：完整的网络</summary>
    
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/categories/Pytorch/"/>
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch 搭建神经网络（2）网络搭建</title>
    <link href="https://blog.iskage.online/posts/ae1c954d.html"/>
    <id>https://blog.iskage.online/posts/ae1c954d.html</id>
    <published>2025-02-05T07:27:01.000Z</published>
    <updated>2025-02-05T03:19:43.786Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch 搭建网络</h1><p>官方文档 中文 <a href="https://www.pytorchtutorial.com/docs/">https://www.pytorchtutorial.com/docs/</a></p><p>官方文档 <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h2 id="1-神经网络">1 神经网络</h2><p>官方文档：<a href="https://pytorch.org/docs/1.8.1/nn.html">https://pytorch.org/docs/1.8.1/nn.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%8893656667.png" alt=""></p><h2 id="2-Containers框架">2 Containers框架</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%8893741302.png" alt=""></p><ul><li>官方示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Model, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">20</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.conv1(x))<span class="comment"># 卷积conv1、非线性relu</span></span><br><span class="line">        <span class="keyword">return</span> F.relu(<span class="variable language_">self</span>.conv2(x))<span class="comment"># 卷积conv2、非线性relu</span></span><br></pre></td></tr></table></figure><ul><li>简单尝试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModel, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_model = MyModel()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output = my_model(x)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h2 id="3-stride-padding">3 stride &amp; padding</h2><p><strong>torch.nn.functional.conv2d</strong></p><h3 id="1-stride">1. stride</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入图像 5x5 每个数字表示颜色</span></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积核 3x3</span></span><br><span class="line">kernel = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为torch.nn.functional.conv2d默认输入为4维的，所以转化</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="built_in">input</span>.shape[<span class="number">0</span>], <span class="built_in">input</span>.shape[<span class="number">1</span>]))</span><br><span class="line">kernel = torch.reshape(kernel, (<span class="number">1</span>, <span class="number">1</span>, kernel.shape[<span class="number">0</span>], kernel.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) → Tensor</span></span><br><span class="line"><span class="string">input: 就是输入数据集</span></span><br><span class="line"><span class="string">weight: 卷积核</span></span><br><span class="line"><span class="string">stride: 卷积核每次移动的步数</span></span><br><span class="line"><span class="string">padding: 对输入图像的填充</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">output_stride1 = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(output_stride1)</span><br><span class="line"></span><br><span class="line">output_stride2 = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(output_stride2)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88101819072.png" alt=""></p><h3 id="2-padding">2. padding</h3><p>对输入图像的填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output_padding1 = F.conv2d(<span class="built_in">input</span>, kernel, padding=<span class="number">1</span>, stride=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(output_padding1)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102514146.png" alt=""></p><h2 id="4-卷积层">4 卷积层</h2><h3 id="1-Convolution">1. Convolution</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102701065.png" alt=""></p><h3 id="2-调用和参数">2. 调用和参数</h3><ul><li>调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">torch</span>.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, groups=<span class="number">1</span>, bias=<span class="literal">True</span>, padding_mode=<span class="string">&#x27;zeros&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_channels: 输入</span></span><br><span class="line">- in_channels (<span class="built_in">int</span>) – Number of channels <span class="keyword">in</span> the <span class="built_in">input</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># out_channels: 输出</span></span><br><span class="line">- out_channels (<span class="built_in">int</span>) – Number of channels produced by the convolution</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel_size: 卷积核的大小</span></span><br><span class="line">- kernel_size (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>) – Size of the convolving kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># stride: 步数</span></span><br><span class="line">- stride (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Stride of the convolution. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding: 填充层数</span></span><br><span class="line">- padding (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Zero-padding added to both sides of the <span class="built_in">input</span>. Default: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding_mode: 填充方式</span></span><br><span class="line">- padding_mode (string, optional) – <span class="string">&#x27;zeros&#x27;</span>, <span class="string">&#x27;reflect&#x27;</span>, <span class="string">&#x27;replicate&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;circular&#x27;</span>. Default: <span class="string">&#x27;zeros&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dilation: 卷积核中元素的对应位置</span></span><br><span class="line">- dilation (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – Spacing between kernel elements. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">- groups (<span class="built_in">int</span>, optional) – Number of blocked connections <span class="keyword">from</span> <span class="built_in">input</span> channels to output channels. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">- bias (<span class="built_in">bool</span>, optional) – If <span class="literal">True</span>, adds a learnable bias to the output. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li>dilation</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738725222605.png" alt=""></p><h3 id="3-简单原理">3. 简单原理</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88103543577.png" alt=""></p><ul><li>in_channels &amp; out_channels</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88104218535.png" alt=""></p><h3 id="4-示例代码">4. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                       download=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">my_net = Net()</span><br><span class="line"><span class="built_in">print</span>(my_net)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络结构</span></span><br><span class="line">Net(</span><br><span class="line">  (conv1): Conv2d(<span class="number">3</span>, <span class="number">6</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在tensorboard展示</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;./logs_conv&quot;</span>)</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line">my_net = Net()</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    output = my_net(imgs)</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line">    <span class="comment"># writer.add_images(&quot;output&quot;, output, step)  # torch.Size([64, 6, 30, 30]) output的channel=6，报错</span></span><br><span class="line">    output = torch.reshape(output, (-<span class="number">1</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line">    step += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果希望卷积后，通道变多，但尺寸不变，则需要填充padding，公式</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><h2 id="5-池化层">5 池化层</h2><h3 id="1-Pooling">1. Pooling</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8830453528.png" alt=""></p><h3 id="2-调用和参数-2">2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.MaxPool2d(kernel_size, stride=<span class="literal">None</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, return_indices=<span class="literal">False</span>, ceil_mode=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取最大值的窗口</span></span><br><span class="line">- kernel_size – the size of the window to take a <span class="built_in">max</span> over</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向纵向的步长，default = kernel_size</span></span><br><span class="line">- stride – the stride of the window. Default value <span class="keyword">is</span> kernel_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充图像边缘</span></span><br><span class="line">- padding – implicit zero padding to be added on both sides</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空洞</span></span><br><span class="line">- dilation – a parameter that controls the stride of elements <span class="keyword">in</span> the window</span><br><span class="line"></span><br><span class="line">- return_indices – <span class="keyword">if</span> <span class="literal">True</span>, will <span class="keyword">return</span> the <span class="built_in">max</span> indices along <span class="keyword">with</span> the outputs. Useful <span class="keyword">for</span> torch.nn.MaxUnpool2d later</span><br><span class="line"></span><br><span class="line"><span class="comment"># floor向下取整 ceil向上取整，例如ceil_mode = True，保留超出部分</span></span><br><span class="line">- ceil_mode – when <span class="literal">True</span>, will use ceil instead of floor to compute the output shape</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8832249522.png" alt=""></p><ul><li>注意输入的input和输出output均为</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(N, C, H, W)  <span class="comment"># (batch_size层数, Channel通道数, Height高, Width宽)</span></span><br></pre></td></tr></table></figure><ul><li>注意池化不可对long操作，故</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 转为float</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码">3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1层，1通道，5x5大小，-1表示自动计算</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MaxPoolNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MaxPoolNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.maxpool1 = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.maxpool1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = MaxPoolNet()</span><br><span class="line">output = my_net(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line">&gt;&gt; tensor([[[[<span class="number">3.</span>, <span class="number">2.</span>],</span><br><span class="line">             [<span class="number">5.</span>, <span class="number">1.</span>]]]])</span><br></pre></td></tr></table></figure><h2 id="6-非线性激活（激活函数）">6 非线性激活（激活函数）</h2><h3 id="1-Non-linear-Activations">1. Non-linear Activations</h3><p>relu, sigmoid…</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8835228634.png" alt=""></p><h3 id="2-调用和参数-3">2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否内存拷贝</span></span><br><span class="line">inplace – can optionally do the operation <span class="keyword">in</span>-place. Default: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">ReLu(<span class="built_in">input</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">&gt;&gt; <span class="built_in">input</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">output = ReLu(<span class="built_in">input</span>, inplace = <span class="literal">False</span>)</span><br><span class="line">&gt;&gt; <span class="built_in">input</span> = -<span class="number">1</span></span><br><span class="line">&gt;&gt; output = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码-2">3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, -<span class="number">0.5</span>],</span><br><span class="line">    [-<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonLinearActivationsRelu</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(NonLinearActivationsRelu, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.relu1 = ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.relu1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = NonLinearActivationsRelu()</span><br><span class="line">output = my_net(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br><span class="line">&gt;&gt; tensor([[ <span class="number">1.0000</span>, -<span class="number">0.5000</span>],</span><br><span class="line">           [-<span class="number">1.0000</span>,  <span class="number">3.0000</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line">&gt;&gt; tensor([[<span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">           [<span class="number">0.</span>, <span class="number">3.</span>]])</span><br></pre></td></tr></table></figure><h2 id="7-正则化层">7 正则化层</h2><h3 id="1-Normalization">1. Normalization</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8840656515.png" alt=""></p><h3 id="2-调用和参数-4">2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.BatchNorm2d(num_features, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">- num_features – C <span class="keyword">from</span> an expected <span class="built_in">input</span> of size (N,C,H,W)</span><br><span class="line"></span><br><span class="line">- eps – a value added to the denominator <span class="keyword">for</span> numerical stability. Default: <span class="number">1e-5</span></span><br><span class="line"></span><br><span class="line">- momentum – the value used <span class="keyword">for</span> the running_mean <span class="keyword">and</span> running_var computation. Can be <span class="built_in">set</span> to <span class="literal">None</span> <span class="keyword">for</span> cumulative moving average (i.e. simple average). Default: <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">- affine – a boolean value that when <span class="built_in">set</span> to <span class="literal">True</span>, this module has learnable affine parameters. Default: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">- track_running_stats – a boolean value that when <span class="built_in">set</span> to <span class="literal">True</span>, this module tracks the running mean <span class="keyword">and</span> variance, <span class="keyword">and</span> when <span class="built_in">set</span> to <span class="literal">False</span>, this module does <span class="keyword">not</span> track such statistics, <span class="keyword">and</span> initializes statistics buffers running_mean <span class="keyword">and</span> running_var <span class="keyword">as</span> <span class="literal">None</span>. When these buffers are <span class="literal">None</span>, this module always uses batch statistics. <span class="keyword">in</span> both training <span class="keyword">and</span> <span class="built_in">eval</span> modes. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">input</span> - (N, C, H, W)</span><br><span class="line">- output - (N, C, H, W)</span><br></pre></td></tr></table></figure><h3 id="3-示例代码-3">3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># With Learnable Parameters</span></span><br><span class="line">m = nn.BatchNorm2d(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># Without Learnable Parameters</span></span><br><span class="line">m = nn.BatchNorm2d(<span class="number">100</span>, affine=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">20</span>, <span class="number">100</span>, <span class="number">35</span>, <span class="number">45</span>)</span><br><span class="line">output = m(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure><h2 id="8-线性层">8 线性层</h2><h3 id="1-Linear">1. Linear</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8841333231.png" alt=""></p><h3 id="2-调用和参数-5">2. 调用和参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Linear(in_features, out_features, bias=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入层的神经元个数</span></span><br><span class="line">- in_features – size of each <span class="built_in">input</span> sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出层的神经元个数</span></span><br><span class="line">- out_features – size of each output sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否 w_i*x_i 后加上 b_i</span></span><br><span class="line">- bias – If <span class="built_in">set</span> to <span class="literal">False</span>, the layer will <span class="keyword">not</span> learn an additive bias. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="3-示例代码-4">3. 示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;./dataset&quot;</span>, train=<span class="literal">False</span>, download=<span class="literal">False</span>,</span><br><span class="line">                                       transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearLayers</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LinearLayers, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.linear1 = Linear(in_features=<span class="number">64</span> * <span class="number">3</span> * <span class="number">32</span> * <span class="number">32</span>, out_features=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="variable language_">self</span>.linear1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_net = LinearLayers()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    <span class="comment"># print(imgs.shape)  # torch.Size([64, 3, 32, 32])  64一组，3个通道，32x32图片</span></span><br><span class="line">    <span class="comment"># output = torch.reshape(imgs, (1, 1, 1, -1))  # 每64个图片平铺为一个一维向量</span></span><br><span class="line">    <span class="comment"># output = my_net(output)  # torch.Size([1, 1, 1, 10])</span></span><br><span class="line"></span><br><span class="line">    output = torch.flatten(imgs)  <span class="comment"># torch.Size([196608])</span></span><br><span class="line">    output = my_net(output)  <span class="comment"># torch.Size([10])</span></span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure><h2 id="9-pytorch提供的模型">9 pytorch提供的模型</h2><p><a href="https://pytorch.org/docs/1.8.1/nn.html">https://pytorch.org/docs/1.8.1/nn.html</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8843352338.png" alt=""></p><h2 id="10-Sequential">10 Sequential</h2><h3 id="1-Sequential简化">1. Sequential简化</h3><p>torch.nn -&gt; container -&gt; Sequential</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Sequential(*args)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example of using Sequential</span></span><br><span class="line">model = nn.Sequential(</span><br><span class="line">          nn.Conv2d(<span class="number">1</span>,<span class="number">20</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU(),</span><br><span class="line">          nn.Conv2d(<span class="number">20</span>,<span class="number">64</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of using Sequential with OrderedDict</span></span><br><span class="line">model = nn.Sequential(OrderedDict([</span><br><span class="line">          (<span class="string">&#x27;conv1&#x27;</span>, nn.Conv2d(<span class="number">1</span>,<span class="number">20</span>,<span class="number">5</span>)),</span><br><span class="line">          (<span class="string">&#x27;relu1&#x27;</span>, nn.ReLU()),</span><br><span class="line">          (<span class="string">&#x27;conv2&#x27;</span>, nn.Conv2d(<span class="number">20</span>,<span class="number">64</span>,<span class="number">5</span>)),</span><br><span class="line">          (<span class="string">&#x27;relu2&#x27;</span>, nn.ReLU())</span><br><span class="line">        ]))</span><br></pre></td></tr></table></figure><h3 id="2-案例：CIFAR分类">2. 案例：CIFAR分类</h3><ul><li>CIFAR Model 结构</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/Structure-of-CIFAR10-quick-model.png" alt="Structure-of-CIFAR10-quick-model"></p><ul><li>Note: 计算padding和stride</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><ul><li>tensorboard可视化结构</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x_test = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs_cifar&quot;</span>)</span><br><span class="line">writer.add_graph(cifar_net, x_test)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8850621811.png" alt=""></p>]]></content>
    
    
    <summary type="html">利用 Pytorch 搭建神经网络：搭建网络和基础知识</summary>
    
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/categories/Pytorch/"/>
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch 搭建神经网络（1）下载 Pytorch 和数据处理</title>
    <link href="https://blog.iskage.online/posts/3f7272cd.html"/>
    <id>https://blog.iskage.online/posts/3f7272cd.html</id>
    <published>2025-02-05T07:27:00.000Z</published>
    <updated>2025-02-05T03:19:50.037Z</updated>
    
    <content type="html"><![CDATA[<h1>下载Pytorch和数据处理</h1><h2 id="0-创建环境并下载Pytorch">0 创建环境并下载Pytorch</h2><p>官网：<a href="https://pytorch.org">https://pytorch.org</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8A%E5%8D%88110530197.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch::pytorch torchvision torchaudio -c pytorch</span><br></pre></td></tr></table></figure><h2 id="1-加载数据">1 加载数据</h2><h3 id="1-Dataset">1. Dataset</h3><p>提取数据并获取label</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root_dir = root_dir</span><br><span class="line">        <span class="variable language_">self</span>.label_dir = label_dir</span><br><span class="line">        <span class="variable language_">self</span>.path = os.path.join(<span class="variable language_">self</span>.root_dir, <span class="variable language_">self</span>.label_dir)</span><br><span class="line">        <span class="variable language_">self</span>.img_path = os.listdir(<span class="variable language_">self</span>.path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_name = <span class="variable language_">self</span>.img_path[index]</span><br><span class="line">        img_item_path = os.path.join(<span class="variable language_">self</span>.root_dir, <span class="variable language_">self</span>.label_dir, img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        label = <span class="variable language_">self</span>.label_dir</span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">&#x27;dataset/train&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 蚂蚁数据集</span></span><br><span class="line">ants_label_dir = <span class="string">&#x27;ants_image&#x27;</span></span><br><span class="line">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蜜蜂数据集</span></span><br><span class="line">bees_label_dir = <span class="string">&#x27;bees_image&#x27;</span></span><br><span class="line">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整合 简单的拼接，按照谁在前整合后仍然在前的原则</span></span><br><span class="line">train_dataset = ants_dataset + bees_dataset</span><br></pre></td></tr></table></figure><p>常见数据集形式</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88122404428.png" alt=""></p><h3 id="2-Dataloader">2. Dataloader</h3><p>为后面的网络提供不同的数据形式（打包）</p><h2 id="2-TensorBoard">2 TensorBoard</h2><h3 id="1-尝试">1. 尝试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;y=x&#x27;</span>, i, i)  <span class="comment"># 第一个是标题，第二个是y轴，第三个是x轴</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=文件夹名</span><br><span class="line">tensorboard --logdir=logs</span><br><span class="line"><span class="comment"># 改端口</span></span><br><span class="line">tensorboard --logdir=logs --port=<span class="number">6007</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88123602383.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88123851459.png" alt=""></p><h3 id="2-训练集练习">2. 训练集练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line">image_path1 = <span class="string">&#x27;dataset/train/ants_image/0013035.jpg&#x27;</span></span><br><span class="line">image_PIL1 = Image.<span class="built_in">open</span>(image_path1)</span><br><span class="line">image_array1 = np.array(image_PIL1)</span><br><span class="line"></span><br><span class="line">image_path2 = <span class="string">&#x27;dataset/train/ants_image/5650366_e22b7e1065.jpg&#x27;</span></span><br><span class="line">image_PIL2 = Image.<span class="built_in">open</span>(image_path2)</span><br><span class="line">image_array2 = np.array(image_PIL2)</span><br><span class="line"></span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, image_array1, <span class="number">1</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line">writer.add_image(<span class="string">&quot;test&quot;</span>, image_array2, <span class="number">2</span>, dataformats=<span class="string">&#x27;HWC&#x27;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%88125438974.png" alt=""></p><h2 id="3-Transforms">3 Transforms</h2><blockquote><p>[!NOTE]</p><p>torchvision的模块之一：Transforms</p></blockquote><h3 id="1-ToTensor">1. ToTensor</h3><ol><li>transforms.ToTensor将&quot;PIL Image&quot;和&quot;numpy.ndarray&quot;转化为tensor类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&#x27;dataset/train/ants_image/5650366_e22b7e1065.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PIL Image 类型</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"><span class="built_in">print</span>(img)</span><br><span class="line">&gt;&gt; &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x375 at <span class="number">0x13B2D7970</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.ndarray 类型</span></span><br><span class="line">cv_img = cv2.imread(img_path)</span><br><span class="line"><span class="built_in">print</span>(cv_img)</span><br><span class="line">&gt;&gt; [[[<span class="number">106</span> <span class="number">119</span>  <span class="number">97</span>]</span><br><span class="line">    [<span class="number">106</span> <span class="number">119</span>  <span class="number">97</span>]</span><br><span class="line">    [<span class="number">107</span> <span class="number">120</span>  <span class="number">98</span>]</span><br><span class="line">    ...</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]</span><br><span class="line">    [<span class="number">110</span> <span class="number">115</span> <span class="number">116</span>]]]</span><br><span class="line"></span><br><span class="line">tensor_trans = transforms.ToTensor()</span><br><span class="line">tensor_img = tensor_trans(img)</span><br><span class="line"><span class="built_in">print</span>(tensor_img)</span><br><span class="line">&gt;&gt; tensor([[[<span class="number">0.3804</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3412</span>, <span class="number">0.3373</span>, <span class="number">0.3333</span>],</span><br><span class="line">           [<span class="number">0.3765</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3529</span>, <span class="number">0.3490</span>, <span class="number">0.3451</span>],</span><br><span class="line">           [<span class="number">0.3804</span>, <span class="number">0.3804</span>, <span class="number">0.3843</span>,  ..., <span class="number">0.3725</span>, <span class="number">0.3686</span>, <span class="number">0.3647</span>],</span><br><span class="line">           ...,</span><br><span class="line">           [<span class="number">0.5608</span>, <span class="number">0.5608</span>, <span class="number">0.5647</span>,  ..., <span class="number">0.4392</span>, <span class="number">0.4392</span>, <span class="number">0.4392</span>],</span><br><span class="line">           [<span class="number">0.5412</span>, <span class="number">0.5529</span>, <span class="number">0.5608</span>,  ..., <span class="number">0.4353</span>, <span class="number">0.4353</span>, <span class="number">0.4353</span>],</span><br><span class="line">           [<span class="number">0.5333</span>, <span class="number">0.5412</span>, <span class="number">0.5608</span>,  ..., <span class="number">0.4314</span>, <span class="number">0.4314</span>, <span class="number">0.4314</span>]]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-transforms使用">2. transforms使用</h3><p>Note：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__call__函数的作用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, use</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__call__函数：&quot;</span> + use)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self, use</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;一般函数：&quot;</span> + use)</span><br><span class="line"></span><br><span class="line">person = Person()</span><br><span class="line">person(<span class="string">&quot;call能直接利用类名括号调用&quot;</span>)</span><br><span class="line">person.func(<span class="string">&quot;必须使用.func方式&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-torchvision数据集">4 torchvision数据集</h2><p>torchvision.dataset</p><p>查看官方文档：<a href="https://pytorch.org/">https://pytorch.org/</a></p><p>0.9版本：<a href="https://pytorch.org/vision/0.9/">https://pytorch.org/vision/0.9/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%8850535594.png" alt=""></p><h3 id="1-尝试使用">1. 尝试使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transforms = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor(),  <span class="comment"># 转为tensor类型</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">True</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">img, target = test_set[0]</span></span><br><span class="line"><span class="string">print(img)  # &lt;PIL.Image.Image image mode=RGB size=32x32 at 0x14433FCA0&gt;</span></span><br><span class="line"><span class="string">print(target)  # 3</span></span><br><span class="line"><span class="string">print(test_set.classes[target])  # cat</span></span><br><span class="line"><span class="string">img.show()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(log_dir=<span class="string">&#x27;./logs_cifar&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img, target = test_set[i]</span><br><span class="line">    writer.add_image(<span class="string">&#x27;test_set&#x27;</span>, img, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><h3 id="2-数据集的下载">2. 数据集的下载</h3><p>进入数据集的源码（CIFAR10），查看url即为下载链接</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240729%E4%B8%8B%E5%8D%8853613373.png" alt=""></p><h2 id="5-Dataloader">5 Dataloader</h2><p>官方文档：<a href="https://pytorch.org/docs/1.8.1/data.html?highlight=dataloader#torch.utils.data.DataLoader">https://pytorch.org/docs/1.8.1/data.html?highlight=dataloader#torch.utils.data.DataLoader</a></p><h3 id="1-batch-size">1. batch_size</h3><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240730%E4%B8%8A%E5%8D%8894027575.png" alt=""></p><h3 id="2-shuffle">2. shuffle</h3><p>shuffle打乱顺序</p><h3 id="3-代码">3. 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transforms = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor(),  <span class="comment"># 转为tensor类型</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, transform=dataset_transforms, download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. batch_size=64 每次取4个数据进行打包：test_set[0-63]=dataset[0-63]打包</span></span><br><span class="line"><span class="string">2. shuffle打乱顺序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;dataloader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        writer.add_images(<span class="string">&#x27;Epoch: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(epoch), imgs, step)</span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用 Pytorch 搭建神经网络：数据处理和下载</summary>
    
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/categories/Pytorch/"/>
    
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学 笔记目录</title>
    <link href="https://blog.iskage.online/posts/73f9c55d.html"/>
    <id>https://blog.iskage.online/posts/73f9c55d.html</id>
    <published>2025-01-21T06:18:00.000Z</published>
    <updated>2025-01-20T08:10:36.076Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>文章为博主根据复旦大学本科课程《微观经济学》整理的课程笔记。点击链接即可前往对应文章查看，笔记以pdf的格式展示。更多信息，可前往本人的<a href="https://github.com/isKage/iskage.github.io">Github库</a>中查询。或者直接右键下载。</strong></p></div><div class="note danger flat"><p><strong>转载请注明出处，要求见文末</strong></p></div><p>课程书籍为罗伯特·S·平狄克/鲁宾菲尔德编写，中国人民大学出版社出版的<a href="https://book.douban.com/subject/4039368/">《微观经济学》</a></p><div class="note no-icon flat"><p><strong>笔记目录</strong></p><p><a href="./b1fd752e.html">1 绪论</a></p><p><a href="./ac04a21d.html">2 供给和需求的基本原理</a></p><p><a href="./d039b3c8.html">3 消费者行为</a></p><p><a href="./cd431d80.html">4 个别需求和市场需求</a></p><p><a href="./7bee8e99.html">5 生产</a></p><p><a href="./c4281815.html">6 生产成本</a></p><p><a href="./cfb40b0.html">7 利润的最大化和竞争性供给</a></p><p><a href="./3aba38be.html">8 竞争性市场分析</a></p><p><a href="./c5b9c11f.html">9 市场势力：垄断和买方垄断</a></p><p><a href="./43074da4.html">10 有市场势力的定价</a></p><p><a href="./66ca6135.html">11 垄断竞争和寡头垄断</a></p></div>]]></content>
    
    
    <summary type="html">复旦大学《微观经济学》课程笔记，已更新完全</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(11)垄断竞争和寡头垄断 (完)</title>
    <link href="https://blog.iskage.online/posts/66ca6135.html"/>
    <id>https://blog.iskage.online/posts/66ca6135.html</id>
    <published>2025-01-20T07:27:40.000Z</published>
    <updated>2025-01-20T08:10:45.160Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2012%20Monopolistic%20Competition%20and%20Oligopoly.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第11讲：垄断竞争和寡头垄断 Chapter 12 Monopolistic Competition and Oligopoly</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(10)有市场势力的定价</title>
    <link href="https://blog.iskage.online/posts/43074da4.html"/>
    <id>https://blog.iskage.online/posts/43074da4.html</id>
    <published>2025-01-20T07:27:31.000Z</published>
    <updated>2025-01-20T08:09:18.936Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2011%20Pricing%20with%20Market%20Power.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第10讲：有市场势力的定价 Chapter 11 Pricing with Market Power</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(9)市场势力：垄断和买方垄断</title>
    <link href="https://blog.iskage.online/posts/c5b9c11f.html"/>
    <id>https://blog.iskage.online/posts/c5b9c11f.html</id>
    <published>2025-01-20T07:27:30.000Z</published>
    <updated>2025-01-20T08:08:20.752Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2010%20Market%20Power_%20Monopoly%20and%20Monopsony.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第9讲：市场势力：垄断和买方垄断 Chapter 10 Market Power：Monopoly and Monopsony</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(8)竞争性市场分析</title>
    <link href="https://blog.iskage.online/posts/3aba38be.html"/>
    <id>https://blog.iskage.online/posts/3aba38be.html</id>
    <published>2025-01-20T07:27:24.000Z</published>
    <updated>2025-01-20T08:06:26.104Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2009%20Competitive%20Markets.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第8讲：竞争性市场分析 Chapter 09 Competitive Markets</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(7)利润的最大化和竞争性供给</title>
    <link href="https://blog.iskage.online/posts/cfb40b0.html"/>
    <id>https://blog.iskage.online/posts/cfb40b0.html</id>
    <published>2025-01-20T07:27:20.000Z</published>
    <updated>2025-01-20T08:05:54.625Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2008%20Max%20Profit%20and%20Competetive%20Supply.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第7讲：利润的最大化和竞争性供给 Chapter Chapter 08 Max Profit and Competetive Supply</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(6)生产成本</title>
    <link href="https://blog.iskage.online/posts/c4281815.html"/>
    <id>https://blog.iskage.online/posts/c4281815.html</id>
    <published>2025-01-20T07:27:11.000Z</published>
    <updated>2025-01-20T08:02:03.558Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2007%20Costs%20of%20Production.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第6讲：生产成本 Chapter 07 Costs of Production</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(5)生产</title>
    <link href="https://blog.iskage.online/posts/7bee8e99.html"/>
    <id>https://blog.iskage.online/posts/7bee8e99.html</id>
    <published>2025-01-20T07:27:10.000Z</published>
    <updated>2025-01-20T08:00:23.315Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2006%20Production.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第5讲：生产 Chapter 06 Production</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(4)个别需求和市场需求</title>
    <link href="https://blog.iskage.online/posts/cd431d80.html"/>
    <id>https://blog.iskage.online/posts/cd431d80.html</id>
    <published>2025-01-20T07:27:04.000Z</published>
    <updated>2025-01-20T07:58:15.685Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2004%20Demand%20.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第4讲：个别需求和市场需求 Chapter 04 Demand</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学(3)消费者行为</title>
    <link href="https://blog.iskage.online/posts/d039b3c8.html"/>
    <id>https://blog.iskage.online/posts/d039b3c8.html</id>
    <published>2025-01-20T07:27:03.000Z</published>
    <updated>2025-01-20T07:56:36.875Z</updated>
    
    <content type="html"><![CDATA[<div class="note success flat"><p><strong>返回<a href="./73f9c55d.html">笔记目录</a></strong></p></div><div class="note info flat"><p>因为文件数据存储在<strong>中国香港地区</strong>，所以加载需要少量时间。如长时间无法加载，可考虑使用<s>VPN代理</s>。</p></div>  <div id="pdf-container" style="position: relative;">    <iframe id="pdf-frame" src="https://oss.iskage.online/pdfs/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/Chapter%2003%20Consumer%20Behaviors%20.pdf#toolbar=0" width="100%" height="600px" allowfullscreen></iframe>    <button id="fullscreen-btn" class="fullscreen-btn" style="position: absolute; top: 10px; right: 10px; z-index: 10;">全屏模式</button>  </div>  <script src="/js/pdf-viewer.js"></script>  ]]></content>
    
    
    <summary type="html">《微观经济学》（平狄克）课程第3讲：消费者行为 Chapter 03 Consumer Behaviors</summary>
    
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/categories/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
    
    <category term="微观经济学" scheme="https://blog.iskage.online/tags/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
</feed>
