<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isKage`Blog</title>
  
  <subtitle>Welcome to isKage Blog :)</subtitle>
  <link href="https://blog.iskage.online/atom.xml" rel="self"/>
  
  <link href="https://blog.iskage.online/"/>
  <updated>2025-02-19T11:27:07.880Z</updated>
  <id>https://blog.iskage.online/</id>
  
  <author>
    <name>isKage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL 自学笔记（9）创建和管理数据库和数据表</title>
    <link href="https://blog.iskage.online/posts/4bd5b58e.html"/>
    <id>https://blog.iskage.online/posts/4bd5b58e.html</id>
    <published>2025-02-19T07:43:00.000Z</published>
    <updated>2025-02-19T11:27:07.880Z</updated>
    
    <content type="html"><![CDATA[<h1>创建和管理数据库和数据表</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>存储和管理数据需要我们创建并管理数据库以及数据库中的各种表。本文介绍如何创建和管理数据库、数据表。包括了数据库的创建、管理；数据表的创建、修改、命名和删除。</p><h2 id="1-数据管理">1 数据管理</h2><p>对数据进行管理，首先要存储数据。一般按照 <code>创建数据库 -&gt; 选择字段 -&gt; 创建数据表 -&gt; 存储数据</code> 的方式进行管理。</p><h3 id="1-1-命名规则">1.1 命名规则</h3><ul><li>数据库名、表名不得超过 <code>30</code> 个字符，变量名不得超过 <code>29</code> 个字符</li><li>只含 <code>A-Z</code> <code>a-z</code> <code>0-9</code> 共 63 个字符</li><li>名中不要包含 <code>空格</code></li><li>同一个 MySQL 软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>不要使用关键字，不得不使用时使用 <code>``</code> 框选</li></ul><h3 id="1-2-MySQL-中的数据类型">1.2 MySQL 中的数据类型</h3><table><thead><tr><th>数据类型类别</th><th>数据类型</th><th>关键字/特点</th><th>描述</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code></td><td>1字节，有符号范围：-128到127，无符号范围：0到255</td><td>非常小的整数</td></tr><tr><td></td><td><code>SMALLINT</code></td><td>2字节，有符号范围：-32768到32767，无符号范围：0到65535</td><td>小整数</td></tr><tr><td></td><td><code>MEDIUMINT</code></td><td>3字节，有符号范围：-8388608到8388607，无符号范围：0到16777215</td><td>中等大小的整数</td></tr><tr><td></td><td><code>INT</code></td><td>4字节，有符号范围：-2147483648到2147483647，无符号范围：0到4294967295</td><td>标准整数</td></tr><tr><td></td><td><code>BIGINT</code></td><td>8字节，有符号范围：-2^63到2^63-1，无符号范围：0到2^64-1</td><td>大整数</td></tr><tr><td>浮点数类型</td><td><code>FLOAT</code></td><td>4字节，单精度浮点数</td><td>单精度浮点数，精度约为7位小数</td></tr><tr><td></td><td><code>DOUBLE</code></td><td>8字节，双精度浮点数</td><td>双精度浮点数，精度约为15位小数</td></tr><tr><td></td><td><code>DECIMAL(M, D)</code></td><td>定点数，M为总位数，D为小数位数</td><td>精确小数，适用于财务计算</td></tr><tr><td>日期时间类型</td><td><code>DATE</code></td><td>格式：‘YYYY-MM-DD’</td><td>日期值，仅包含日期</td></tr><tr><td></td><td><code>TIME</code></td><td>格式：‘HH:MM:SS’</td><td>时间值，仅包含时间</td></tr><tr><td></td><td><code>DATETIME</code></td><td>格式：‘YYYY-MM-DD HH:MM:SS’</td><td>日期和时间值</td></tr><tr><td></td><td><code>TIMESTAMP</code></td><td>格式：‘YYYY-MM-DD HH:MM:SS’，范围：‘1970-01-01 00:00:01’到’2038-01-19 03:14:07’</td><td>时间戳，自动更新</td></tr><tr><td></td><td><code>YEAR</code></td><td>格式：‘YYYY’</td><td>年份值</td></tr><tr><td>字符串类型</td><td><code>CHAR(M)</code></td><td>固定长度字符串，M为字符数，最大255</td><td>定长字符串，适合存储固定长度的数据</td></tr><tr><td></td><td><code>VARCHAR(M)</code></td><td>可变长度字符串，M为最大字符数，最大65535</td><td>变长字符串，适合存储长度不固定的数据</td></tr><tr><td></td><td><code>TINYTEXT</code></td><td>最大长度255字符</td><td>非常小的文本字符串</td></tr><tr><td></td><td><code>TEXT</code></td><td>最大长度65535字符</td><td>文本字符串</td></tr><tr><td></td><td><code>MEDIUMTEXT</code></td><td>最大长度16777215字符</td><td>中等长度的文本字符串</td></tr><tr><td></td><td><code>LONGTEXT</code></td><td>最大长度4294967295字符</td><td>长文本字符串</td></tr><tr><td></td><td><code>BINARY(M)</code></td><td>固定长度二进制字符串，M为字节数，最大255</td><td>定长二进制字符串</td></tr><tr><td></td><td><code>VARBINARY(M)</code></td><td>可变长度二进制字符串，M为最大字节数，最大65535</td><td>变长二进制字符串</td></tr><tr><td>枚举类型</td><td><code>ENUM('val1', 'val2', ...)</code></td><td>枚举类型，只能存储列出的值之一</td><td>枚举类型，适合存储有限个数的可能值</td></tr><tr><td>集合类型</td><td><code>SET('val1', 'val2', ...)</code></td><td>集合类型，可以存储多个列出的值</td><td>集合类型，适合存储多个可能值</td></tr><tr><td>二进制大对象</td><td><code>TINYBLOB</code></td><td>最大长度255字节</td><td>非常小的二进制对象</td></tr><tr><td></td><td><code>BLOB</code></td><td>最大长度65535字节</td><td>二进制大对象</td></tr><tr><td></td><td><code>MEDIUMBLOB</code></td><td>最大长度16777215字节</td><td>中等大小的二进制对象</td></tr><tr><td></td><td><code>LONGBLOB</code></td><td>最大长度4294967295字节</td><td>长二进制对象</td></tr><tr><td>空间数据类型</td><td><code>GEOMETRY</code></td><td>空间数据类型，存储几何对象</td><td>几何对象</td></tr><tr><td></td><td><code>POINT</code></td><td>点类型</td><td>二维平面上的点</td></tr><tr><td></td><td><code>LINESTRING</code></td><td>线类型</td><td>二维平面上的线</td></tr><tr><td></td><td><code>POLYGON</code></td><td>多边形类型</td><td>二维平面上的多边形</td></tr><tr><td></td><td><code>MULTIPOINT</code></td><td>多点类型</td><td>多个点的集合</td></tr><tr><td></td><td><code>MULTILINESTRING</code></td><td>多线类型</td><td>多条线的集合</td></tr><tr><td></td><td><code>MULTIPOLYGON</code></td><td>多多边形类型</td><td>多个多边形的集合</td></tr><tr><td></td><td><code>GEOMETRYCOLLECTION</code></td><td>几何集合类型</td><td>多个几何对象的集合</td></tr><tr><td>JSON类型</td><td><code>JSON</code></td><td>存储JSON格式数据</td><td>用于存储JSON格式的数据</td></tr></tbody></table><blockquote><p>以上由 <a href="https://www.deepseek.com/">DeepSeek 总结</a> ，并不重要，现实使用时可以查询官方文档。</p></blockquote><h2 id="2-创建和管理数据库">2 创建和管理数据库</h2><h3 id="2-1-创建数据库">2.1 创建数据库</h3><ul><li>方法1： 直接创建，完全默认</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><ul><li>方法2：创建数据库并指定字符集</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名 <span class="keyword">CHARACTER SET</span> 字符集;</span><br></pre></td></tr></table></figure><p>可以指定数据库的字符集（如 <code>utf8mb4</code> ），确保数据存储时使用正确的编码。</p><ul><li>方法3【推荐】：先判断是否已经存在，不存在则创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>注意：数据库不能改名！</p><p>如果需要重命名，则需要：创建新数据库；复制原数据库数据导入新库；删除旧库。</p></blockquote><h3 id="2-2-使用数据库">2.2 使用数据库</h3><ul><li>查看所有数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><ul><li>查看当前使用的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><blockquote><p>未使用数据库时返回 <code>NULL</code></p></blockquote><ul><li>查看数据库的所有表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">FROM</span> 数据库名];</span><br></pre></td></tr></table></figure><blockquote><p>若省略 <code>FROM 数据库名</code> 则查看当前使用的数据库</p></blockquote><ul><li>查看数据库创建时的相关信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739872321265.png" alt=""></p><ul><li>使用某个数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>因为数据表均存储在不同数据库下，所以在对表操作前，必须先指定使用某个数据库。</p></blockquote><h3 id="2-3-更改字符集">2.3 更改字符集</h3><p>虽然更改数据库名理论上是不可行，不推荐的。但修改字符集非常简单，只需一行指令即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="keyword">CHARACTER SET</span> 字符集; <span class="comment">-- e.g. : gbk, utf8</span></span><br></pre></td></tr></table></figure><h3 id="2-4-删除数据库">2.4 删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>IF EXISTS</code> 先判断是否存在，存在则删除。可以省略，但【不推荐】。</p></blockquote><h2 id="3-创建表">3 创建表</h2><p>在数据库创建完成后，进入/使用指定的数据库，而后就可以开始创建和管理数据表。</p><h3 id="3-1-CREATE-TABLE-创建新的数据表">3.1 <code>CREATE TABLE</code> 创建新的数据表</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名</span><br><span class="line">(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">...</span><br><span class="line">[表约束条件]</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- [] 表示可省略</span></span><br></pre></td></tr></table></figure><p>例如：不做约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp</span><br><span class="line">(</span><br><span class="line">    emp_id   <span class="type">INT</span>,</span><br><span class="line">    emp_name <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="comment">-- 20 为长度</span></span><br><span class="line">    salary   <span class="keyword">DOUBLE</span>,</span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们可以查看一下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739873501483.png" alt=""></p><p>例如：增加约束条件，指定自增性质，指定表的主键【推荐指定主键】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> dept</span><br><span class="line">(</span><br><span class="line">    dept_id   <span class="type">INT</span> AUTO_INCREMENT, <span class="comment">-- 增加约束条件: 自增</span></span><br><span class="line">    dept_name <span class="type">VARCHAR</span>(<span class="number">14</span>),</span><br><span class="line">    location  <span class="type">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (dept_id)         <span class="comment">-- 表的约束条件: 指定 deptno 为主键</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>同样，我们可以查看一下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> dept;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739873713040.png" alt=""></p><h3 id="3-2-AS-其他表名-创建表同时导入数据">3.2 <code>AS 其他表名</code> 创建表同时导入数据</h3><p>使用 <code>CREATE TABLE 新表 AS 其他表的数据</code> 在创建新表的同时，插入数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 新表</span><br><span class="line">(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">...</span><br><span class="line">[表约束条件]</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 其他表</span><br><span class="line">[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><blockquote><p>其中，指定新表属性和字段的 <code>(字段1, ..., 表约束条件])</code> 部分可以省略。如果不省略，则要满足后面填充数据时的匹配。即 <code>SELECT</code> 语句找出的数据和新表的列要一一对应。</p></blockquote><p>例如：选取数据库 <code>atguigudb</code> 的 <code>employees</code> 表中收入高于 13000 的员工的部分信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp_high_salary</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.last_name, e.department_name, e.salary, e.hire_date</span><br><span class="line"><span class="keyword">FROM</span> atguigudb.employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;</span> <span class="number">13000</span>;</span><br></pre></td></tr></table></figure><p>查看这个新表的信息，继承了表的信息（执行  <code>DESC emp_high_salary;</code> ）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739874352421.png" alt=""></p><p>查看具体表的内容，发现已经填充了数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> test.emp_high_salary;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739874466224.png" alt=""></p><h3 id="3-3-查看数据表结构">3.3 查看数据表结构</h3><p>除了上面的采用 <code>DESC</code> 的方式查看表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><p>也可以采用 <code>SHOW CREATE TABLE</code> 查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> 表名;</span><br></pre></td></tr></table></figure><blockquote><p><code>SHOW CREATE TABLE</code> 查看的表结构更为详细</p></blockquote><h2 id="4-修改表">4 修改表</h2><p>使用 <code>ALTER TABLE</code> 语句修改表的结构</p><h3 id="4-1-新增一列-ADD">4.1 新增一列 ADD</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line"><span class="keyword">ADD</span> 字段名 字段类型 </span><br><span class="line">[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名];</span><br><span class="line"><span class="comment">-- [] 代表可选</span></span><br><span class="line"><span class="comment">-- A|B 代表或者, A 或 B</span></span><br></pre></td></tr></table></figure><p>例如：在表 emp 中新增一列 job_id 使得其在字段 salary 的后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp</span><br><span class="line">    <span class="keyword">ADD</span> job_id <span class="type">varchar</span>(<span class="number">15</span>)</span><br><span class="line">        AFTER salary;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739937896250.png" alt=""></p><h3 id="4-2-修改一列-MODIFY">4.2 修改一列 MODIFY</h3><p>可以修改列的 <code>数据类型</code> <code>长度</code> <code>默认值</code> <code>位置</code></p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line">MODIFY 字段名<span class="number">1</span> 字段类型 [<span class="keyword">DEFAULT</span> 默认值] </span><br><span class="line">[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>例如：修改表 emp_high_salary 的 salary 的数据类型和默认值，并放置在 last_name 后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_high_salary</span><br><span class="line">    MODIFY salary <span class="keyword">double</span>(<span class="number">9</span>, <span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1000</span></span><br><span class="line">        AFTER last_name;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739938248613.png" alt=""></p><blockquote><p>默认值的修改只对以后存储的新数据有影响</p></blockquote><h3 id="4-3-对列重命名-CHANGE">4.3 对列重命名 CHANGE</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line">CHANGE 列名 新列名 新数据类型;</span><br></pre></td></tr></table></figure><p>例如：将表 emp_high_salary 的 department_name 改为 dept_name</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_high_salary</span><br><span class="line">    CHANGE department_name dept_name <span class="type">varchar</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739938432301.png" alt=""></p><h3 id="4-4-删除某列-DROP">4.4 删除某列 DROP</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line"><span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>例如：删除之前在表 emp 中新增的 job_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp</span><br><span class="line">    <span class="keyword">DROP</span> job_id;</span><br></pre></td></tr></table></figure><h2 id="5-重命名表">5 重命名表</h2><h3 id="5-1-RENAME-方法">5.1 RENAME 方法</h3><p>使用 <code>RENAME ... TO</code> 方法重命名表，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 旧表名</span><br><span class="line"><span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure><p>例如：更改表 emp 为新名字 employee_info</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> emp</span><br><span class="line">    <span class="keyword">TO</span> employee_info;</span><br></pre></td></tr></table></figure><h3 id="5-2-ALTER-RENAME-方法">5.2 ALTER RENAME 方法</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> 旧表名</span><br><span class="line">    RENAME [<span class="keyword">TO</span>] 新表名;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> employee_info</span><br><span class="line">    RENAME emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-删除表">6 删除表</h2><p>当当前表与其他表没有关联时，例如没有外键链接时，可以直接删除。格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></table></figure><p>例如：删除之前常见的 emp_high_salary 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp_high_salary;</span><br></pre></td></tr></table></figure><h2 id="7-清空表内数据">7 清空表内数据</h2><p>只是删除表内的数据，并不删除表结构。</p><h3 id="7-1-TRUNCATE-语句">7.1 TRUNCATE 语句</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="7-2-DELETE-语句">7.2 DELETE 语句</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="7-3-是否回滚-ROLLBACK">7.3 是否回滚 ROLLBACK</h3><p><code>DELETE</code> 支持回滚 <code>ROLLBACK</code> ，而 <code>TRUNCATE</code> 不支持。</p><p>例如：先查看原始表内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>使用 <code>DELETE</code> 删除，然后回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开始事务，暂不提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><blockquote><p><code>START TRANSACTION;</code> ：它标志着一个事务的开始。在事务中，可以执行多个 SQL 语句。在事务结束之前，所有的修改都不会真正生效，直到显式地提交事务（<code>COMMIT;</code>）或回滚事务（<code>ROLLBACK;</code>）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DELETE 删除</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="comment">-- 查看结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary; <span class="comment">-- 查看结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>此时 <code>ROLLBACK;</code> 回滚事务结束，结果被提交给数据库，数据完成所有操作，显示最终结果。</p></blockquote><ul><li>但是 <code>TRUNCATE</code> 不支持回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> emp_high_salary;</span><br><span class="line"><span class="comment">-- 执行后，表中所有数据被清空，无法回滚</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>清除数据而已，表结构仍然存在</p></blockquote><h2 id="8-注意事项">8 注意事项</h2><ul><li><p>在第 6 和第 7 部分：删除表和清除表数据需要十分谨慎。【建议先备份】然后进行删除。</p></li><li><p>除此之外，为了避免误操作，<code>MySQL8.0</code> 推出了 <strong>DDL（Data Definition Language）原子化</strong> ，即操作要么成功要么失败，绝对不会出现部分成功的情况。</p></li></ul><p>例如：在删除表时，如果 <code>表1</code> 存在，而 <code>表2</code> 不存在。此时同时删除 <code>表1</code> 和 <code>表2</code> 的操作会完全失败，不会出现 <code>表1</code> 被删除了，而 <code>表2</code> 不存在报错的情况。</p>]]></content>
    
    
    <summary type="html">本文介绍如何创建和管理数据库、数据表。包括了数据库的创建、管理；数据表的创建、修改、命名和删除。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（8）子查询</title>
    <link href="https://blog.iskage.online/posts/73aff18a.html"/>
    <id>https://blog.iskage.online/posts/73aff18a.html</id>
    <published>2025-02-17T07:43:00.000Z</published>
    <updated>2025-02-19T11:27:03.023Z</updated>
    
    <content type="html"><![CDATA[<h1>子查询</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询。</p><h2 id="1-子查询的基本使用">1 子查询的基本使用</h2><ul><li>例子引入：查询工资大于 Abel 的员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 之前所学：自连接</span></span><br><span class="line"><span class="keyword">SELECT</span> e2.last_name, e2.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e1,</span><br><span class="line">     employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> e1.salary <span class="operator">&lt;</span> e2.salary;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-1-基本格式">1.1 基本格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件   </span><br><span class="line">            (<span class="keyword">SELECT</span> 列名</span><br><span class="line">             <span class="keyword">FROM</span> 表名</span><br><span class="line">             <span class="keyword">WHERE</span> 条件);</span><br></pre></td></tr></table></figure><h3 id="1-2-子查询分类">1.2 子查询分类</h3><h4 id="1-2-1-单行子查询-vs-多行子查询">1.2.1 单行子查询 vs 多行子查询</h4><ul><li>查询的结果返回一条还是多条记录，将子查询分为<strong>单行子查询</strong>和<strong>多行子查询</strong></li></ul><h4 id="1-2-2-相关子查询-vs-不相关子查询">1.2.2 相关子查询 vs 不相关子查询</h4><ul><li><p><strong>不相关子查询</strong>：子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做不相关子查询。</p></li><li><p><strong>相关子查询</strong>：如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p></li></ul><h2 id="2-单行子查询">2 单行子查询</h2><h3 id="2-1-常见案例">2.1 常见案例</h3><p>常见条件：<code>=, &gt;, &gt;=, &lt;=, &lt;&gt;</code> ，要求子查询返回的是唯一一个结果</p><ul><li>例如：上述的查询工资大于 Abel 的员工</li><li>例如：多条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多条件</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (<span class="keyword">SELECT</span> job_id</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">103</span>)</span><br><span class="line">  <span class="keyword">AND</span> salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778436446.png" alt=""></p><blockquote><p>【注意】当使用简单比较符时，单行子查询返回的结果必须唯一，如此才能比较。例如：若子查询查询到的 <code>job_id</code> 有多个，则无法比较。</p></blockquote><ul><li>例如：利用单行函数返回工资最少的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">                <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><h3 id="2-2-HAVING-中的子查询">2.2 HAVING 中的子查询</h3><p>子查询优先执行，得到子查询的结果后返回给主句的 <code>WHERE</code> 或 <code>HAVING</code> 充当过滤条件的一部分。</p><ul><li>例如：查询最低工资大于部门 <code>department_id = 50</code> 的最低工资的部门</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span></span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">        <span class="keyword">FROM</span> employees</span><br><span class="line">        <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779142944.png" alt=""></p><blockquote><p><code>GROUP BY ... HAVING ...</code> 用于分组查询，见<a href="https://blog.iskage.online/posts/b266e599.html#3-GROUP-BY-%E2%80%A6-HAVING-%E6%9C%89%E7%BA%A6%E6%9D%9F%E7%9A%84%E5%88%86%E7%BB%84">聚合函数</a>章节笔记。</p></blockquote><h3 id="2-3-CASE-中的子查询">2.3 CASE 中的子查询</h3><ul><li>例如：若员工的 <code>department_id</code> 与 <code>location_id</code> 为 1800 的 <code>department_id</code> 相同，则 <code>location</code> 为 ‘Canada’ ，其余则为 ‘USA’</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       last_name,</span><br><span class="line">       <span class="keyword">CASE</span> department_id</span><br><span class="line">           <span class="keyword">WHEN</span></span><br><span class="line">               (<span class="keyword">SELECT</span> department_id</span><br><span class="line">                <span class="keyword">FROM</span> departments</span><br><span class="line">                <span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1800</span>)</span><br><span class="line">               <span class="keyword">THEN</span> <span class="string">&#x27;Canada&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;USA&#x27;</span> <span class="keyword">END</span> location</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779580573.png" alt=""></p><blockquote><p><code>CASE WHEN</code> 根据不同条件返回不同结果，见<a href="https://blog.iskage.online/posts/35d72c0b.html#4-3-%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C">单行函数</a>章节笔记。</p></blockquote><h3 id="2-4-子查询中的空值问题">2.4 子查询中的空值问题</h3><p>如果子查询查不到结果，并不会报错，只是返回空。</p><ul><li>例如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span></span><br><span class="line">      (<span class="keyword">SELECT</span> salary</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Nobody&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779760433.png" alt=""></p><h3 id="2-5-常见错误：返回多行">2.5 常见错误：返回多行</h3><p>使用单行子查询，返回的结果确实多行，则会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br></pre></td></tr></table></figure><blockquote><p>单行比较符，需要比较的两者是唯一值，不可以一个值与多个值比较</p></blockquote><h2 id="3-多行子查询">3 多行子查询</h2><h3 id="3-1-案例引入">3.1 案例引入</h3><ul><li>例如：查询与 141 号或 174 号员工的 <code>manager_id</code> 和 <code>department_id</code> 相同的其他员工的 <code>employee_id</code> <code>manager_id</code> 和 <code>department_id</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 不成对比较，逐个增加条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> manager_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>))</span><br><span class="line">  <span class="keyword">AND</span> department_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> department_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>))</span><br><span class="line">  <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 2. 当作一个集合进行比较</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (manager_id, department_id) <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>))</span><br><span class="line">  <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778806369.png" alt=""></p><p>【补充】可以查看一下具体的条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778790765.png" alt=""></p><h3 id="3-2-常见多行比较操作符">3.2 常见多行比较操作符</h3><table><thead><tr><th style="text-align:left">操作符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>IN</code></td><td>等于列表中任意一个即可</td></tr><tr><td style="text-align:left"><code>ANY</code></td><td>和子查询返回的某个值比较</td></tr><tr><td style="text-align:left"><code>ALL</code></td><td>和子查询返回的所有值比较</td></tr><tr><td style="text-align:left"><code>SOME</code></td><td>和 ANY 相同</td></tr></tbody></table><h3 id="3-3-示例">3.3 示例</h3><h4 id="3-3-1-ANY-和-ALL">3.3.1 ANY 和 ALL</h4><ul><li><code>ANY</code> ：返回其 <code>job_id</code> 中比 <code>job_id</code> 为 <code>IT_PROG</code> 部门<strong>任一</strong>工资低的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ANY</span></span><br><span class="line">      (<span class="keyword">SELECT</span> e.salary</span><br><span class="line">       <span class="keyword">FROM</span> employees e</span><br><span class="line">       <span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> e.job_id <span class="operator">!=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780719982.png" alt=""></p><blockquote><p>子查询会返回很多行数据（不同的 <code>salary</code>）但我们需要找到的是只要比子查询的结果任意一个低即可，类似于 <code>&lt; MAX()</code></p></blockquote><ul><li><code>ALL</code> ：返回其 <code>job_id</code> 中比 <code>job_id</code> 为 <code>IT_PROG</code> 部门<strong>任意</strong>工资低的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ALL</span></span><br><span class="line">      (<span class="keyword">SELECT</span> e.salary</span><br><span class="line">       <span class="keyword">FROM</span> employees e</span><br><span class="line">       <span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> e.job_id <span class="operator">!=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780740500.png" alt=""></p><blockquote><p>子查询会返回很多行数据（不同的 <code>salary</code>）但我们需要找到的是比子查询的结果任意都低，类似于 <code>&lt; MIN()</code></p></blockquote><p>观察一下子查询的条件返回的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- condition</span></span><br><span class="line"><span class="keyword">SELECT</span> e.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780820060.png" alt=""></p><p>最大为 9000 ，最小为 4200 ：在使用 ANY 时，小于 9000 即可；但在使用 ALL 时，却需要小于 4200 。这就是二者明显的不同。</p><h4 id="3-3-2-FROM-后嵌套查询分组语句">3.3.2 FROM 后嵌套查询分组语句</h4><ul><li>查询平均工资最低的部门 id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法 1: 直接使用 MIN</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(avg_sal)</span><br><span class="line">                      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">                            <span class="keyword">FROM</span> employees</span><br><span class="line">                            <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) dept_avg_sal);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法 2: 使用 ALL 间接表达最小</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&lt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">                           <span class="keyword">FROM</span> employees</span><br><span class="line">                           <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id);</span><br></pre></td></tr></table></figure><blockquote><p><code>GROUP BY</code> 和单行函数联合使用，返回多行结果</p></blockquote><h2 id="4-相关子查询">4 相关子查询</h2><h3 id="4-1-相关子查询的例子">4.1 相关子查询的例子</h3><p>例如：查询员工信息，筛选条件为其工资要大于他所在部门的平均工资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span></span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> department_id <span class="operator">=</span> e.department_id)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>如此，每次查一行数据时，就会执行子查询计算 <code>department_id</code> 等于当前行的平均工资，再返回给 WHERE 子句进行判断，决定是否查询这一行。</p><h3 id="4-2-FROM-后使用子查询">4.2 FROM 后使用子查询</h3><p>同样是上面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary, e1.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1,</span><br><span class="line">     (<span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary) dept_avg_sal</span><br><span class="line">      <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.department_id <span class="operator">=</span> e2.department_id</span><br><span class="line">  <span class="keyword">AND</span> e1.salary <span class="operator">&gt;</span> e2.dept_avg_sal</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>FROM 后使用子查询，相当于创造了一张虚拟表，一定要使用 <code>()</code> 和别名。</p><h3 id="4-3-ORDER-BY-后使用子查询">4.3 ORDER BY 后使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">SELECT</span> d.department_name</span><br><span class="line">          <span class="keyword">FROM</span> departments d</span><br><span class="line">          <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure><h3 id="4-4-EXISTS-与-NOT-EXISTS">4.4  EXISTS 与 NOT EXISTS</h3><p><code>EXISTS</code> ：检查在子查询中是否存在满足条件的行。逐行查询时：</p><ul><li><p>如果在子查询中<strong>不存在</strong>满足条件的行：条件返回 <code>FALSE</code> 。继续在子查询中查找</p></li><li><p>如果在子查询中<strong>存在</strong>满足条件的行：条件返回 <code>TRUE</code> 。不在子查询中继续查找</p></li></ul><p><code>NOT EXISTS</code> 则相反。</p><p>例如：返回是公司管理者，即查找是否有 <code>manager_id</code> 等于这个员工的 <code>employee.id</code></p><p>【方法一】EXISTS</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">              <span class="keyword">FROM</span> employees e2</span><br><span class="line">              <span class="keyword">WHERE</span> e2.manager_id <span class="operator">=</span></span><br><span class="line">                    e1.employee_id);</span><br></pre></td></tr></table></figure><blockquote><p>注意：EXISTS 返回的是 True 和 False</p></blockquote><p>【方法二】自连接</p><p>或者使用自连接，即创造一个虚拟表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e1.employee_id, e1.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line">         <span class="keyword">JOIN</span> employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.employee_id <span class="operator">=</span> e2.manager_id;</span><br></pre></td></tr></table></figure><blockquote><p>【推荐】：相比子查询，自连接更为高效</p></blockquote><p>【方法三】多行子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> manager_id</span><br><span class="line">       <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><h3 id="4-5-相关子查询去更新与更新">4.5 相关子查询去更新与更新</h3><h4 id="4-5-1-相关更新">4.5.1 相关更新</h4><p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p><ul><li>先增加一个字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> employees</span><br><span class="line">    <span class="keyword">ADD</span>(department_name <span class="type">VARCHAR</span>(<span class="number">50</span>));</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field           <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date       <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary          <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct  <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id      <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_name <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span> <span class="comment">-- 新增字段</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>然后更新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees e</span><br><span class="line"><span class="keyword">SET</span> department_name <span class="operator">=</span></span><br><span class="line">        (<span class="keyword">SELECT</span> department_name</span><br><span class="line">         <span class="keyword">FROM</span> departments d</span><br><span class="line">         <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739783513615.png" alt=""></p><h4 id="4-5-2-相关删除">4.5.2 相关删除</h4><p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名<span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> 列名</span><br><span class="line">       <span class="keyword">FROM</span> 表名<span class="number">2</span></span><br><span class="line">       <span class="keyword">WHERE</span> 条件);</span><br></pre></td></tr></table></figure><blockquote><p><code>IN</code> 也可以是其他操作符</p></blockquote>]]></content>
    
    
    <summary type="html">子查询指一个查询语句嵌套在另一个查询语句内部的查询。包括了单行子查询和多行子查询；相关子查询与不相关子查询。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>conda 创建虚拟环境常见问题：虚拟环境路径错误</title>
    <link href="https://blog.iskage.online/posts/90e61ddb.html"/>
    <id>https://blog.iskage.online/posts/90e61ddb.html</id>
    <published>2025-02-16T01:11:00.000Z</published>
    <updated>2025-02-15T07:45:28.961Z</updated>
    
    <content type="html"><![CDATA[<h1>conda 创建虚拟环境常见问题：环境路径错误</h1><h2 id="1-下载、安装、配置-conda">1 下载、安装、配置 conda</h2><p>利用 conda 更为轻便的搭建虚拟环境，包括了 下载、安装、环境变量配置、使用与常见问题收录。见 <a href="https://zhuanlan.zhihu.com/p/21629604277">conda 创建虚拟环境全流程</a> 。（或者<a href="https://blog.iskage.online/posts/2c3265b7.html">博客链接</a>）</p><h2 id="2-问题：虚拟环境路径与-conda-安装路径不同">2 问题：虚拟环境路径与 conda 安装路径不同</h2><p>在安装过程中，如果自定义了安装路径，例如：将 conda 安装在了 D 盘，则会发现：在利用 conda 创建环境时，虚拟环境的路径仍然位于系统盘 C 盘。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739602431664.png" alt=""></p><p>下面，全流程详细介绍如何解决：</p><h2 id="3-首先检查环境变量">3 首先检查环境变量</h2><h3 id="3-1-检查环境变量">3.1 检查环境变量</h3><p>在 <code>命令行提示符</code> （注意：不是 PowerShell） 里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> conda</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/2f1701e249a2b80d6f4f3d54c71c5461.png" alt=""></p><h3 id="3-2-补充环境变量">3.2 补充环境变量</h3><p>注意：如果没有出现上图的结果，则需要补充到环境变量：</p><ul><li>右键【此电脑】，选择【属性】</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/81a20737e9394766099cdbd96e84b381_720.png" alt="、"></p><ul><li>选择【高级系统设置】，然后点击【环境变量】，双击【PATH】后【新建】添加 4 个路径</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...\miniconda3</span><br><span class="line">...\miniconda3\Scripts</span><br><span class="line">...\miniconda3\Library\bin</span><br><span class="line">...\miniconda3\condabin</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/eac2e32e0bf670ebee8acafd1433ff57_720.png" alt=""></p><h2 id="4-修改-condarc-文件">4 修改 <code>.condarc</code> 文件</h2><h3 id="4-1-condarc-文件配置">4.1 .condarc 文件配置</h3><p>来到 conda 安装路径，例如我的路径： <code>D:\ProgramData\miniconda3</code> 。找到 <code>.condarc</code> 文件，右键以记事本格式打开。</p><blockquote><p>【推荐】使用 vscode 打开，比较容易找到 <code>.condarc</code> 文件</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4938895f665d67b146c44c063e40f41e.png" alt=""></p><h3 id="4-2-添加虚拟环境安装路径">4.2 添加虚拟环境安装路径</h3><p>将 conda 安装路径下的 <code>envs</code> 文件夹路径填入 <code>.condarc</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">envs <span class="built_in">dirs</span>:</span><br><span class="line">- D://ProgramData//miniconda3//envs</span><br></pre></td></tr></table></figure><blockquote><p>【注意】根据自己的安装路径填写；格式要正确，注意缩进；使用 <code>//</code> 分隔各目录，不要使用 <code>\</code></p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/df786b1cfa768f744046426e730bfb35_720.png" alt=""></p><p>保存退出后还须设置权限。</p><h3 id="4-3-设置-envs-文件夹权限">4.3 设置 <code>envs</code> 文件夹权限</h3><ul><li>右键【envs】文件夹，选择【属性】</li><li>选择【安全】，点击【编辑】</li><li>选中【Users(用户名\Users)】，选中运行所有权限，如图所示</li><li>点击【确认】，确保修改被保存</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/144df84f90add26fad392113d15fa132_720.png" alt=""></p><p>此时，已经配置完成。现在使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名 [python=3.12]</span><br><span class="line"><span class="comment"># [] 表示可选</span></span><br></pre></td></tr></table></figure><p>可以正常创建环境，且虚拟环境的安装位置也处于指定目录下：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/5e449048e3545b0cbb378928c2995c04.png" alt=""></p><blockquote><p>但是使用一些集成开发环境 IDEA 时，可能会出现无法识别“环境名”的问题</p><p>【注意】只是识别不出环境名，直接指定环境下的 <code>python.exe</code> 等文件同样可以配置成功，只是无法显示环境名。具体案例和解决方法见下：</p></blockquote><h2 id="5-问题：集成开发环境-IDEA-无法识别环境名称">5 问题：集成开发环境 IDEA 无法识别环境名称</h2><h3 id="5-1-Vscode-可以直接指定，无问题">5.1 Vscode 可以直接指定，无问题</h3><p>例如：利用终端命令 <code>conda create -n dl</code> 创建了名为 <code>dl</code> 的环境，然后查看 dl 可执行文件的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/5e449048e3545b0cbb378928c2995c04.png" alt=""></p><p>然后在 vscode 中【选择内核】里选择 【Python 解释器】添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ProgramData\miniconda3\envs\dl\python.exe  <span class="comment"># 替换自己的路径</span></span><br></pre></td></tr></table></figure><p>即可成功。</p><h3 id="5-2-PyCharm-无法识别环境名">5.2 PyCharm 无法识别环境名</h3><h4 id="5-2-1-直接指定可执行文件">5.2.1 直接指定可执行文件</h4><p>按照上述相同方法，同样可以将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ProgramData\miniconda3\envs\dl\python.exe  <span class="comment"># 替换自己的路径</span></span><br></pre></td></tr></table></figure><p>可执行文件 <code>.exe</code> 添加到 PyCharm 的 【Python 解释器】中，同样可以正常使用，只是环境名 <code>dl</code> 可能无法显示。此时可能显示为类似 <code>Python 3.12.8(1)</code> 的名字，带来不方便。</p><blockquote><p>【注意】可以【正常使用！！！】，只是环境名无法显示</p></blockquote><h4 id="5-2-2-利用-PyCharm-创建虚拟环境">5.2.2 利用 PyCharm 创建虚拟环境</h4><p>为了避免这个窘境，可以选择让 PyCharm 使用我们下载的 conda 创建虚拟环境</p><blockquote><p>因为之前的配置，我们只要选定 conda ，PyCharm 创建的虚拟环境仍然在我们指定的路径中。相比让 PyCharm 自主下载 conda 后创建环境，更好管理。</p></blockquote><ul><li>选择【添加 Python 解释器】(【Python Interpreter】)，点击【增加本地解释器】(【Add Local Interpreter】)</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/fa371f66893a913f888bc66856267d76.png" alt=""></p><ul><li>选择创建环境【Generate new】，选择【Conda】，自己选定 Python 版本【Python version】，设置环境名【Name】。</li><li><strong>重点</strong> ：选择已经安装好的的 conda 路径【Path to conda】，填入 conda 安装路径的 <code>Scripts\conda.exe</code> 文件即可。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/95f4e6cb3cbb8ac0497d4a28c0365f17.png" alt=""></p><p>之后 PyCharm 会通过我们安装的 conda 进行创建，新环境也会安装在之前配置的路径中，方便后续管理。而且，此时环境名也可以自动被 PyCharm 识别。</p>]]></content>
    
    
    <summary type="html">利用 conda 更为轻便的搭建虚拟环境，但会出现新建环境与 conda 的安装路径不同的问题，此时需要修改 .condarc 文件</summary>
    
    
    
    <category term="conda" scheme="https://blog.iskage.online/categories/conda/"/>
    
    
    <category term="conda" scheme="https://blog.iskage.online/tags/conda/"/>
    
    <category term="虚拟环境" scheme="https://blog.iskage.online/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（7）：向量化 广播机制 基本索引与切片</title>
    <link href="https://blog.iskage.online/posts/2271b16b.html"/>
    <id>https://blog.iskage.online/posts/2271b16b.html</id>
    <published>2025-02-14T16:32:00.000Z</published>
    <updated>2025-02-15T03:12:56.414Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（7）向量化与广播机制与基本索引与切片</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><h2 id="1-向量化">1 向量化</h2><p>向量化计算是一种特殊的并行计算方式。</p><ul><li>向量化计算：对不同的数据执行同样的一个或一批指令，或者把指令应用到一个数组或向量上，从而将多次循环操作变成一次计算。</li></ul><blockquote><p>例如：当计算乘积加和时，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup><mo>⋅</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_1, a_2, ..., a_n]^T \cdot [x_1, x_2, \cdots, x_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 替代 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><msub><mi>a</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n\ a_i x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 可以极大地提高计算效率。</p></blockquote><p>在 Python 中，<code>for</code> 循环是一种及其低效的计算方法，我们往往希望能通过向量化运算并行计算。</p><ul><li>例如：利用 <code>for</code> 循环和直接向量相加，耗时差距大约数百倍</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 循环完成加法操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_with_for</span>(<span class="params">x, y</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(x, y):</span><br><span class="line">        result.append(i + j)</span><br><span class="line">    <span class="keyword">return</span> torch.tensor(result)</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">100</span>)</span><br><span class="line">y = torch.randn(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">%timeit -n <span class="number">100</span> sum_with_for(x, y)  <span class="comment"># for 循环</span></span><br><span class="line">%timeit -n <span class="number">100</span> (x + y) <span class="comment"># 向量化计算</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739517601343.png" alt=""></p><p>综上可知，在进行计算时尽可能使用向量化计算，避免使用 <code>for</code> 循环。</p><h2 id="2-广播机制">2 广播机制</h2><p>广播法则（broadcast）：快速执行向量化计算的同时不会占用额外的内存 / 显存。</p><h3 id="2-1-NumPy-中的广播法则">2.1 NumPy 中的广播法则</h3><ul><li><ol><li>广播后形状一致：所有输入数组都与形状 (shape) 最大的数组看齐，形状不足的部分在前面加 1 补齐</li></ol></li><li><ol start="2"><li>存在相同大小的维度：两个数组要么在某一个维度的尺寸一致，要么其中一个数组在该维度的尺寸为 1 ，否则不符合广播法则的要求</li></ol></li><li><ol start="3"><li>通过复制补齐：如果输入数组的某个维度的尺寸为 1 ，那么计算时沿此维度复制扩充成目标的形状大小</li></ol></li></ul><h3 id="2-2-Pytorch-实现广播">2.2 Pytorch 实现广播</h3><p>PyTorch 支持自动广播法则，也可以手动设置：</p><ul><li><p><code>unsqueeze</code> <code>view</code> <code>tensor[None]</code> ： 为数据某一维度补 1 ，实现广播法则 1</p></li><li><p><code>expand</code> <code>expand_as</code> 重复数组：实现广播法则 3 (该操作不会复制整个数组，因此不会占用额外的空间)</p></li></ul><blockquote><p>【注意】<code>repeat</code> 可以实现与 <code>expand</code> 类似的功能： <code>expand</code> 是在已经存在的 Tensor 上创建一个新维度复制数据。故 <code>repeat</code> 会占用额外的空间</p></blockquote><h3 id="2-3-具体使用">2.3 具体使用</h3><h4 id="2-3-1-自动广播法则">2.3.1 自动广播法则</h4><p>以 <code>a = torch.ones(3, 2); b = torch.zeros(2, 3, 1)</code> 为例计算 <code>a + b</code> 的自动广播过程：</p><ul><li>第一步（法则 1）</li></ul><p>a 是 2 维的，b 是 3 维的。所以先在较小的 a 前面补 1 个维度 <code>a.unsqueeze(0) -&gt; a.shape = (1, 3, 2)</code></p><ul><li>第二步（法则 2）</li></ul><p>此时 <code>a.shape = (1, 3, 2)</code> 而 <code>b.shape = (2, 3, 1)</code> 二者在第二个维度形状一样，都为 3 。满足法则 2，存在相同形状的维度，可以进行广播</p><ul><li>第三步（法则 3）</li></ul><p>a 和 b 在第一和第三个维度的形状不一样， 利用广播法则扩展，按照最大的形状复杂。最终变为 <code>a.shape = b.shape = (2, 3, 2)</code> 即，a 在第一个维度复制，b 在第三个维度复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">(a + b).shape</span><br><span class="line"><span class="comment"># torch.Size([2, 3, 2])</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-详细计算">2.3.2 详细计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">b = torch.tensor([[[-<span class="number">1</span>], [-<span class="number">2</span>], [-<span class="number">3</span>]], [[-<span class="number">4</span>], [-<span class="number">5</span>], [-<span class="number">6</span>]]])</span><br><span class="line">a.shape, b.shape</span><br><span class="line"><span class="comment"># (torch.Size([3, 2]), torch.Size([2, 3, 1]))</span></span><br></pre></td></tr></table></figure><p>加和使用自动广播机制得到结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[[ 0,  1],</span></span><br><span class="line"><span class="string">         [ 1,  2],</span></span><br><span class="line"><span class="string">         [ 2,  3]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-3, -2],</span></span><br><span class="line"><span class="string">         [-2, -1],</span></span><br><span class="line"><span class="string">         [-1,  0]]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>具体 <code>a</code> 的广播结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a =</span><br><span class="line">[</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">].shape = (<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># -(broadcast)-&gt; </span></span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>具体 <code>b</code> 的广播结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">b = </span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">1</span>],</span><br><span class="line">        [-<span class="number">2</span>],</span><br><span class="line">        [-<span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">4</span>],</span><br><span class="line">        [-<span class="number">5</span>],</span><br><span class="line">        [-<span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># -(broadcast)-&gt; </span></span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">1</span>, -<span class="number">1</span>],</span><br><span class="line">        [-<span class="number">2</span>, -<span class="number">2</span>],</span><br><span class="line">        [-<span class="number">3</span>, -<span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">4</span>, -<span class="number">4</span>],</span><br><span class="line">        [-<span class="number">5</span>, -<span class="number">5</span>],</span><br><span class="line">        [-<span class="number">6</span>, -<span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>所以计算过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a + b =</span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span> - <span class="number">1</span>, <span class="number">2</span> - <span class="number">1</span>],</span><br><span class="line">        [<span class="number">3</span> - <span class="number">2</span>, <span class="number">4</span> - <span class="number">2</span>],</span><br><span class="line">        [<span class="number">5</span> - <span class="number">3</span>, <span class="number">6</span> - <span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span> - <span class="number">4</span>, <span class="number">2</span> - <span class="number">4</span>],</span><br><span class="line">        [<span class="number">3</span> - <span class="number">5</span>, <span class="number">4</span> - <span class="number">5</span>],</span><br><span class="line">        [<span class="number">5</span> - <span class="number">6</span>, <span class="number">6</span> - <span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-3-repeat-复制占用额外空间">2.3.3 repeat 复制占用额外空间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较 expand 和 repeat 的内存占用情况</span></span><br><span class="line">a = torch.ones(<span class="number">1</span>, <span class="number">3</span>) <span class="comment"># shape = (1, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(a.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 3 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expand 不额外占用内存，只返回一个新的视图</span></span><br><span class="line">b = a.expand(<span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># shape = (3, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(b.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 3 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># repeat 复制了原始张量</span></span><br><span class="line">c = a.repeat(<span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># shape = (3, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(c.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 27 &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-手动广播">2.3.4 手动广播</h4><p>可以先扩展成相同维度数，再扩展成相同形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动广播</span></span><br><span class="line">a = torch.ones(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. unsqueeze + expand</span></span><br><span class="line">a.unsqueeze(<span class="number">0</span>).expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. view + expand</span></span><br><span class="line">a.view(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>).expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. None + expand 【推荐】</span></span><br><span class="line">a[<span class="literal">None</span>, :, :].expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="3-基本索引与切片">3 基本索引与切片</h2><p>Pytorch 的基本索引与切片与 Numpy 类似，例如：</p><ul><li><code>元组序列</code> ：在索引中直接使用一个元组序列对 Tensor 中数据的具体位置进行定位，也可以直接使用数字，即去除元组括号</li><li><code>切片对象</code> ：切片形如<code>[start:end:step]</code>，对一个维度进行全选时可以直接使用 <code>:</code></li><li><code>...</code> ：在索引中常用省略号来代表一个或多个维度的切片</li><li><code>None</code> ：表示增加一个维度</li></ul><h3 id="3-1-元组序列">3.1 元组序列</h3><p>使用 <code>tensor[x, x, x]</code> 或 <code>tensor[(x, x, x)]</code> 索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = torch.Tensor([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)]).view(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">[ 0.,  1.,  2.,  3.],</span></span><br><span class="line"><span class="string">[ 4.,  5.,  6.,  7.],</span></span><br><span class="line"><span class="string">[ 8.,  9., 10., 11.]],</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">    [12., 13., 14., 15.],</span></span><br><span class="line"><span class="string">    [16., 17., 18., 19.],</span></span><br><span class="line"><span class="string">    [20., 21., 22., 23.]</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取位置 [0, 1, 2] 的元素 </span></span><br><span class="line"><span class="comment"># 等价于 a[(0, 1, 2)]</span></span><br><span class="line">a[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor(6.)</span></span><br><span class="line"><span class="string"># (第一维度形状 2 的第 0 个, 第二维度形状 3 的第 1 个, 第三维度形状 4 的第 2 个) 所以为 6.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第三个维度全取</span></span><br><span class="line"><span class="comment"># 等价于 a[(1, 1)]，a[(1, 1, )]，a[1, 1]</span></span><br><span class="line">a[<span class="number">1</span>, <span class="number">1</span>, :]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([16., 17., 18., 19.])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-和-运算符">3.2 <code>...</code> 和 <code>:</code> 运算符</h3><ul><li><code>:</code> ：使用格式 <code>[start:end:step]</code> 。单独使用 <code>:</code> 代表这个维度全取，<code>start</code> 和 <code>end</code> 为空分别表示从头开始和一直到结束，<code>step</code> 的默认值是 1</li><li><code>...</code> ：用于省略任意多个维度，可以用在切片的中间，也可以用在首尾</li></ul><h4 id="3-2-1-运算符代表全取">3.2.1 <code>:</code> 运算符代表全取</h4><p>常见格式 <code>tensor[:, :, start:end:step]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">64</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br><span class="line"></span><br><span class="line">a[:, :, <span class="number">0</span>:<span class="number">224</span>:<span class="number">4</span>, :].shape <span class="comment"># 第一、二、四维度全取，第三个维度取 0 到 223 间隔 4 个一取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略 start 和 end 代表整个维度</span></span><br><span class="line">a[:, :, ::<span class="number">4</span>, :].shape  <span class="comment"># 第一、二、四维度全取，第三个维度间隔 4 个一取，从开始取到结尾</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">均为</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 56, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-代替多个维度">3.2.2 <code>...</code> 代替多个维度</h4><p>若 <code>a.shape = (64, 3, 224, 224)</code> 使用 <code>a[..., ::4, :]</code> 代表第一、二维度均取，相当于用 <code>a[:, :, ::4, :]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 ... 代替一个或多个维度，建议一个索引中只使用一次</span></span><br><span class="line"></span><br><span class="line">a[..., ::<span class="number">4</span>, :].shape <span class="comment"># 第一、二维度都取，用 ... 替代了 :, :,</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 56, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>【建议】<code>...</code> 在一个索引里只出现一次，否则会出现难以匹配</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a[..., ::<span class="number">4</span>, ...].shape  <span class="comment"># 如果将最后一个维度也改为 ... 那么在匹配维度时将混乱出错</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 224, 56])  此处第一个 ... 代表了第一、二、三维度，而第二个 ... 没有匹配</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-None-索引">3.3 None 索引</h3><p><code>None</code> 索引可以简单地理解为维度的扩展，在广播法则用于补充维度。即相当于 <code>unsqueeze()</code> 函数。不过与 <code>unsqueeze()</code> 相比，使用 <code>None</code> 可以更为直观，因为它直接在索引中表示了扩展的维度。</p><blockquote><p>简单而言，【推荐】使用 <code>None</code> 来扩展维度</p></blockquote><ul><li>增加一个维度</li></ul><p>在增加一个维度时，<code>None</code> 的优势并不明显</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.unsqueeze(<span class="number">0</span>).shape)  <span class="comment"># 使用 unsqueeze 在第 0 位置补充维度</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="literal">None</span>, ...].shape)  <span class="comment"># 直接指定 0 号位置补充维度 (... 代表后面所有维度)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 224, 224])</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 224, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>增加多个维度</li></ul><p>如果要增加多个维度，则需要多次 <code>unsqueeze()</code> 并且每次还要计算索引位置，十分复杂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为 [1, 3, 1, 3, 1, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">0</span>) <span class="comment"># [1, 3, 3, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">2</span>) <span class="comment"># [1, 3, 1, 3, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">4</span>) <span class="comment"># [1, 3, 1, 3, 1, 3]</span></span><br><span class="line"></span><br><span class="line">x.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 1, 3, 1, 3])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>若使用 <code>None</code> 直接指定维度位置，则方便很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为 [1, 3, 1, 3, 1, 3]</span></span><br><span class="line">x = x[<span class="literal">None</span>, :, <span class="literal">None</span>, :, <span class="literal">None</span>, :]</span><br><span class="line"></span><br><span class="line">x.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 1, 3, 1, 3])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-综合使用">3.4 综合使用</h3><p>【案例】计算批量 <code>batch_size = 16</code> 的样本的矩阵乘法： <code>[256, 1] @ [1, 256]</code> 最后应该得到 <code>shape = [16, 256, 256]</code> （其中 <code>@</code> 代表矩阵乘法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">16</span> * <span class="number">256</span>).view(<span class="number">16</span>, <span class="number">256</span>)</span><br><span class="line">a.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([16, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-1-手动扩展并计算">3.4.1 手动扩展并计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b = a.unsqueeze(<span class="number">1</span>)  <span class="comment"># b.shape = [16, 1, 256]</span></span><br><span class="line">c = b.transpose(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># c.shape = [16, 256, 1]</span></span><br><span class="line"><span class="built_in">print</span>((b @ c).shape)</span><br><span class="line"><span class="built_in">print</span>((c @ b).shape)  </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个 [16, 1, 256] @ [16, 256, 1] 得到的是 torch.Size([16, 1, 1])</span></span><br><span class="line"><span class="string">第二个 [16, 256, 1] @ [16, 1, 256] 得到的是 torch.Size([16, 256, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这很符合我们平常的矩阵计算原则，但不是我们希望看到的，因为相乘的顺序直接导致了结果形状的不同。</p><h4 id="3-4-2-自动广播技术">3.4.2 自动广播技术</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b = a[:, <span class="literal">None</span>, :]  <span class="comment"># b.shape = [16, 1, 256]</span></span><br><span class="line">c = a[:, :, <span class="literal">None</span>]  <span class="comment"># c.shape = [16, 256, 1]</span></span><br><span class="line"><span class="built_in">print</span>((b * c).shape)</span><br><span class="line"><span class="built_in">print</span>((c * b).shape)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">两个结果均为</span></span><br><span class="line"><span class="string">torch.Size([16, 256, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>通过广播机制：形如 <code>[16, 1, 256]</code> 与 <code>[16, 256, 1]</code> 相乘时，首先因为通过 <code>None</code> 扩展了，故维度相同（<em>满足法则一</em>）；其次存在有形状的维度，第一个维度均为 <code>16</code> （<em>满足法则二</em>）；最后相乘时，对形状 <code>1</code> 进行复制，复制到 <code>256</code> 再与同维度的数相乘（<em>使用法则三</em>）</p><p>所以，通过广播机制，得到的结果是相同的，无需考虑顺序问题【推荐】</p><blockquote><p>Pytorch 的张量 Tensor 在进行乘法时：</p><ul><li>维度、形状不同：检查是否能进行广播，从而计算</li><li>维度、形状均相同：直接进行逐元素计算，例如：</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 补充：逐元素计算</span></span><br><span class="line">a = torch.arange(<span class="number">16</span> * <span class="number">256</span>).view(<span class="number">16</span>, <span class="number">256</span>)  <span class="comment"># a.shape = [16, 256]</span></span><br><span class="line"></span><br><span class="line">(a * a).shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">和 a 相同，仍然是 </span></span><br><span class="line"><span class="string">[16, 256]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">向量化计算能显著提高计算效率，本文介绍 Pytorch 中对向量化的实现，包括了广播机制、基本的索引与切片。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（6）：GPU 加速：CUDA 的使用</title>
    <link href="https://blog.iskage.online/posts/a6d6e67c.html"/>
    <id>https://blog.iskage.online/posts/a6d6e67c.html</id>
    <published>2025-02-13T16:32:00.000Z</published>
    <updated>2025-02-13T12:25:55.958Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（6）GPU 加速：CUDA 的使用</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><p>使用 GPU 加速技术，可以大幅减少训练时间。Pytorch 中的 <code>Tensor</code> 张量和 <code>nn.Module</code> 类就分为 CPU 和 GPU 两种版本。一般使用 <code>.cuda()</code> 和 <code>.to(device)</code> 方法实现从 CPU 迁移到 GPU ，从设备迁移到设备。</p><blockquote><p>但 <code>Tensor</code> 和 <code>nn.Module</code> 使用 <code>.cuda()</code> 方法时返回的对象不同。</p><ul><li><code>Tensor.cuda()</code> 返回一个新对象，即拷贝了一份张量到 GPU ，之前的张量仍然储存在 CPU</li><li><code>nn.Module</code> 实例化后的 <code>module</code> 使用 <code>module.cuda()</code> 直接将所有数据推送到 GPU 不备份自己，即 <code>module.cuda()</code> 与 <code>module = module.cuda()</code> 等价</li></ul></blockquote><blockquote><p><code>.to(device)</code> 可以更灵活地在不同设备上迁移</p></blockquote><h2 id="1-cuda-方法">1 .cuda() 方法</h2><h3 id="1-1-张量-cuda-返回新的对象">1.1 张量 .cuda() 返回新的对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():  <span class="comment"># 检查 CUDA 是否可用</span></span><br><span class="line">    t_cuda = t.cuda()  <span class="comment"># 将张量 t 移动到 CUDA 设备</span></span><br><span class="line">    <span class="built_in">print</span>(t.is_cuda)</span><br><span class="line">    <span class="built_in">print</span>(t_cuda.is_cuda)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">False</span></span><br><span class="line">   <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p><code>.cuda()</code> 等价于 <code>.cuda(0)</code>  or <code>.cuda(device=0)</code> 迁移到第 0 块 GPU 上</p></blockquote><h3 id="1-2-module-cuda-返回自己">1.2 module.cuda() 返回自己</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">module = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    module.cuda(device=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(module.weight.is_cuda)  <span class="comment"># True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>迁移到 GPU 本质都是对张量 Tensor 做变换，所以对于模型 module ，也是其权重等参数进行迁移</p></blockquote><h2 id="2-to-device-方法">2 .to(device) 方法</h2><p><code>.to(device)</code> 方法可以指定设备</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.to方法，将 Tensor 转移至第 0 块GPU上</span></span><br><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    t_cuda = t.to(<span class="string">&#x27;cuda:0&#x27;</span>)  <span class="comment"># device: &#x27;cuda:0&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(t_cuda.is_cuda)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="3-损失函数迁移到-GPU">3 损失函数迁移到 GPU</h2><p>大部分的损失函数都属于 <code>nn.Module</code> ，在使用 GPU 时，建议使用 <code>.cuda</code> 或 <code>.to</code> 迁移到 GPU 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    <span class="comment"># 以交叉熵损失函数为例</span></span><br><span class="line">    criterion = torch.nn.CrossEntropyLoss(weight=torch.Tensor([<span class="number">1</span>, <span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 张量 Tensor 迁移到 GPU</span></span><br><span class="line">    inputs = torch.randn(<span class="number">4</span>, <span class="number">2</span>).cuda()</span><br><span class="line">    target = torch.Tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]).long().cuda()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># loss = criterion(input, target)  # 报错：计算损失函数的参数为迁移到 GPU</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正确：迁移损失函数</span></span><br><span class="line">    criterion.cuda()</span><br><span class="line">    loss = criterion(inputs, target)</span><br><span class="line">    <span class="built_in">print</span>(criterion._buffers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: OrderedDict([(<span class="string">&#x27;weight&#x27;</span>, tensor([<span class="number">1.</span>, <span class="number">3.</span>], device=<span class="string">&#x27;cuda:0&#x27;</span>))])</span><br></pre></td></tr></table></figure><h2 id="4-torch-cuda-device-指定默认设备">4 torch.cuda.device() 指定默认设备</h2><p>使用 <code>torch.cuda.device()</code> 指定默认设备，则不需要每次调用 <code>.cuda</code> 或 <code>.to</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定默认使用GPU &quot;cuda:0&quot;</span></span><br><span class="line"><span class="keyword">with</span> torch.cuda.device(<span class="number">0</span>):</span><br><span class="line">    <span class="comment"># 在 GPU 上构建Tensor</span></span><br><span class="line">    a = torch.cuda.FloatTensor(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 Tensor 转移至 GPU</span></span><br><span class="line">    b = torch.FloatTensor(<span class="number">2</span>, <span class="number">3</span>).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a.get_device)</span><br><span class="line">    <span class="built_in">print</span>(b.get_device)</span><br><span class="line"></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c.get_device)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C70C59CC0</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C04443930</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C04441360</span>&gt;</span><br></pre></td></tr></table></figure><p>或者使用 <code>torch.set_default_tensor_type()</code> 方法，指定张量类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">torch.set_default_tensor_type(<span class="string">&#x27;torch.cuda.FloatTensor&#x27;</span>) <span class="comment"># 指定默认 Tensor 的类型为GPU上的FloatTensor</span></span><br><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a.is_cuda)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">torch.set_default_tensor_type(<span class="string">&#x27;torch.FloatTensor&#x27;</span>) <span class="comment"># 恢复默认</span></span><br></pre></td></tr></table></figure><h2 id="5-多-GPU-操作">5 多 GPU 操作</h2><p>多个 GPU 方便快捷地指定迁移设备。</p><h3 id="5-1-方法一：调用-torch-cuda-set-device">5.1 方法一：调用 <code>torch.cuda.set_device()</code></h3><p>例如：指定先调用 <code>torch.cuda.set_device(1)</code> 指定默认使用 GPU “cuda:1” ，后续的 <code>.cuda()</code> 都无需更改，切换 GPU 只需修改这一行代码</p><h3 id="5-2-方法二：设置环境变量-CUDA-VISIBLE-DEVICES">5.2 方法二：设置环境变量 <code>CUDA_VISIBLE_DEVICES</code></h3><p>例如当 <code>CUDA_VISIBLE_DEVICE=1</code> 时，代表优先使用 GPU “cuda:1” 而不是 GPU “cuda:0” 。此时调用<code>tensor.cuda()</code> 会将Tensor转移至 GPU “cuda:1”</p><p><code>CUDA_VISIBLE_DEVICES</code> 还可以指定多个 GPU 。例如 <code>CUDA_VISIBLE_DEVICES=0,2,3</code> 代表按照 GPU “cuda:0”, “cuda:2”, “cuda:3” 的顺序使用 GPU 。此时 <code>cuda(0)</code> 迁移到 GPU “cuda:0” ，而 <code>.cuda(1)</code> 迁移到 GPU “cuda:2” ，<code>.cuda(2)</code> 迁移到 GPU “cuda:3” 。</p><h3 id="5-3-设置-CUDA-VISIBLE-DEVICES-的方法：">5.3 设置 <code>CUDA_VISIBLE_DEVICES</code> 的方法：</h3><ul><li>法一：命令行中执行 <code>CUDA_VISIBLE_DEVICES=0,1 python main.py</code> 来运行主程序</li><li>法二：程序中编写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="string">&#x27;0,1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>法三：IPython 或者 Jupyter notebook 中（即 <code>.ipynb</code> 文件），则可以使用魔法方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%env CUDA_VISIBLE_DEVICES=<span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="6-CPU-与-GPU-并存">6 CPU 与 GPU 并存</h2><p>考虑到不同电脑可能会有差异，例如当遇到无 GPU 的主机时，容易出现不兼容。（例如：无法迁移到 GPU），所以建议判断是否存在 GPU ，再迁移数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【推荐】如果用户具有 GPU 设备，那么使用GPU，否则使用CPU</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure><p>确定了设备之后，再迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x_to = x.to(device)</span><br><span class="line"><span class="built_in">print</span>(x_to.device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># device(type=&#x27;cuda&#x27;, index=0)</span></span><br></pre></td></tr></table></figure><h2 id="7-张量指定设备">7 张量指定设备</h2><h3 id="7-1-创建张量时指定设备">7.1 创建张量时指定设备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">x_cpu = torch.empty(<span class="number">2</span>, device=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x_cpu, x_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">x_gpu = torch.empty(<span class="number">2</span>, device=device)</span><br><span class="line"><span class="built_in">print</span>(x_gpu, x_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="7-2-new-保留原属性">7.2 new_* 保留原属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># new_*() : 保留原 Tensor 的设备属性</span></span><br><span class="line"></span><br><span class="line">y_cpu = x_cpu.new_full((<span class="number">3</span>, <span class="number">4</span>), <span class="number">9</span>)  <span class="comment"># new_full : 用 9 填充形状 [3, 4] 的张量</span></span><br><span class="line"><span class="built_in">print</span>(y_cpu, y_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">y_gpu = x_gpu.new_zeros(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># new_zeros : 填充 0</span></span><br><span class="line"><span class="built_in">print</span>(y_gpu, y_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="7-3-like-保留原属性">7.3 *_like 保留原属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ones_like或zeros_like可以创建与原Tensor大小类别均相同的新Tensor</span></span><br><span class="line"></span><br><span class="line">z_cpu = torch.ones_like(x_cpu)  <span class="comment"># 大小相同，设备相同</span></span><br><span class="line"><span class="built_in">print</span>(z_cpu, z_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z_gpu = torch.zeros_like(x_gpu)  <span class="comment"># 大小相同，设备相同</span></span><br><span class="line"><span class="built_in">print</span>(z_gpu, z_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用 GPU 加速技术，可以大幅减少训练时间。Pytorch 中的 `Tensor` 张量和 `nn.Module` 类就分为 CPU 和 GPU 两种版本。一般使用 `.cuda()` 和 `.to(device)` 方法实现从 CPU 迁移到 GPU ，从设备迁移到设备。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（5）：可视化工具：TensorBoard</title>
    <link href="https://blog.iskage.online/posts/ef3d3872.html"/>
    <id>https://blog.iskage.online/posts/ef3d3872.html</id>
    <published>2025-02-13T06:32:00.000Z</published>
    <updated>2025-02-13T06:38:55.897Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（5）可视化工具：TensorBoard</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><p>为了更直观地、实时地观察训练过程，使用一些可视化工具实现训练过程的图形化表达，以便直观地展现结果。</p><p>TensorBoard ：只要用户保存的数据遵循相应的格式，TensorBoard 就能读取这些数据，进行可视化。</p><h2 id="1-下载-TensorBoard">1 下载 TensorBoard</h2><p>最新版本的 Pytorch 在下载时已经配置了 TensorBoard 无需特别下载。如果没有下载 TensorBoard 包需要先在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br></pre></td></tr></table></figure><h2 id="2-创建-logger-对象">2 创建 logger 对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter  <span class="comment"># 导入 tensorboard</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建 logger 对象，指定 log 文件的保存路径 log_dir=&#x27;logs&#x27;</span></span><br><span class="line">logger = SummaryWriter(log_dir=<span class="string">&#x27;logs&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>此时已经可以通过执行：<code>tensorboard --logdir=path</code> 来访问可视化界面。</p></li><li><p><code>path</code> 填入 logger 对象文件保存路径 例如此处的 <code>'./logs'</code> 或 <code>'log'</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端输入以查看结果</span></span><br><span class="line">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739386419718.png" alt=""></p><ul><li>打开浏览器，输入 <code>http://localhost:6006/</code> 查看</li></ul><blockquote><p>此时没有加入任何数据和图像，故界面如下</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739386180385.png" alt=""></p><blockquote><p>或者在 notebook 中查看</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%load_ext tensorboard</span><br><span class="line">%tensorboard --logdir=<span class="string">&#x27;logs&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-添加数据-绘制图像">3 添加数据 &amp; 绘制图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_scalar 记录标量</span></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/train&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/test&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739416635199.png" alt=""></p><blockquote><p>如果不中断 <code>tensorboard --logdir=logs</code> 则可以通过刷新网页来查看。或者可以关闭 (<code>CTRL + C</code>) 后重新启动。</p></blockquote><ul><li>结束后，删除之前的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clear any logs from previous runs</span></span><br><span class="line"><span class="built_in">rm</span> -rf ./logs/</span><br></pre></td></tr></table></figure><h2 id="4-下载数据集-MNIST">4 下载数据集 MNIST</h2><p>以 <code>MNIST</code> 手写识别体数据集为例，首先先下载。可以直接调用 <code>torchvision.datasets.MNIST</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))  <span class="comment"># MNIST 是灰度图，单通道</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;./data/&#x27; 指定下载的路径，download=True 表示下载，train=False 表示下载测试集，transform 指定变换</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>, transform=transform)</span><br></pre></td></tr></table></figure><p>如果无法下载可以前往官网手动下载：</p><p>训练集：<a href="https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz">train-images</a>, <a href="https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz">train-labels</a></p><p>测试集：<a href="https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz">t10k-images</a>, <a href="https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz">t10k-labels</a></p><p>然后放入目录 <code>MNIST</code> 下的 <code>raw</code> 文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── MNIST</span><br><span class="line">    └── raw</span><br><span class="line">        ├── t10k-images-idx3-ubyte.gz</span><br><span class="line">        ├── t10k-labels-idx1-ubyte.gz</span><br><span class="line">        ├── train-images-idx3-ubyte.gz</span><br><span class="line">        └── train-labels-idx1-ubyte.gz</span><br></pre></td></tr></table></figure><p>然后再运行之前的下载代码，将 <code>download=False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">False</span>, train=<span class="literal">False</span>, transform=transform)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── MNIST</span><br><span class="line">    └── raw</span><br><span class="line">        ├── t10k-images-idx3-ubyte</span><br><span class="line">        ├── t10k-images-idx3-ubyte.gz</span><br><span class="line">        ├── t10k-labels-idx1-ubyte</span><br><span class="line">        ├── t10k-labels-idx1-ubyte.gz</span><br><span class="line">        ├── train-images-idx3-ubyte</span><br><span class="line">        ├── train-images-idx3-ubyte.gz</span><br><span class="line">        ├── train-labels-idx1-ubyte</span><br><span class="line">        └── train-labels-idx1-ubyte.gz</span><br></pre></td></tr></table></figure><h2 id="5-常用函数">5 常用函数</h2><h3 id="5-1-add-scalar-添加标量">5.1 add_scalar 添加标量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_scalar(<span class="variable language_">self</span>, tag, scalar_value, global_step=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>tag</code> ：标题名</li><li><code>scalar_value</code> ：标量数值</li><li><code>global_step</code> ：迭代批次</li></ul><p>例如：从 [0, 99] 随机产生标量绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_scalar 记录标量</span></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/train&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/test&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br></pre></td></tr></table></figure><h3 id="5-2-add-image-显示图像">5.2 add_image 显示图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))  <span class="comment"># MNIST 是灰度图，单通道</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;./data/&#x27; 指定下载的路径，download=True 表示下载，train=False 表示下载测试集，transform 指定变换</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, shuffle=<span class="literal">True</span>, batch_size=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">images, labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataloader))</span><br><span class="line">grid = torchvision.utils.make_grid(images)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_image 显示图像</span></span><br><span class="line">logger.add_image(<span class="string">&#x27;images&#x27;</span>, grid, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">%load_ext tensorboard</span><br><span class="line">%tensorboard --logdir=<span class="string">&#x27;logs&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739418831074.png" alt=""></p><h3 id="5-3-add-graph-显示网络结构">5.3 add_graph 显示网络结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_size=<span class="number">28</span>, hidden_size=<span class="number">500</span>, num_classes=<span class="number">10</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(input_size, hidden_size)</span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(hidden_size, num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        out = <span class="variable language_">self</span>.relu(out)</span><br><span class="line">        out = <span class="variable language_">self</span>.fc2(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = myModel()</span><br><span class="line">logger.add_graph(model, images)  <span class="comment"># 代入具体的数值计算 torch.Size([16, 1, 28, 28])</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420352341.png" alt=""></p><h3 id="5-4-add-histogram-显示直方图">5.4 add_histogram 显示直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.add_histogram(<span class="string">&#x27;normal&#x27;</span>, np.random.normal(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1000</span>), global_step=<span class="number">1</span>)</span><br><span class="line">logger.add_histogram(<span class="string">&#x27;normal&#x27;</span>, np.random.normal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1000</span>), global_step=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420726898.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420601056.png" alt=""></p><h3 id="5-5-add-embedding-可视化">5.5 add_embedding 可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_embedding 进行 embedding 可视化</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>)  <span class="comment"># PIL Image 对象可以可视化</span></span><br><span class="line">images = dataset.data[:<span class="number">100</span>].<span class="built_in">float</span>()  <span class="comment"># 提取前 100 张图像并转为浮点数类型</span></span><br><span class="line">label = dataset.targets[:<span class="number">100</span>]  <span class="comment"># 提取前 100 张图像的标签</span></span><br><span class="line">features = images.view(<span class="number">100</span>, <span class="number">28</span> * <span class="number">28</span>)  <span class="comment"># 将图像展平为 100 x 784 的矩阵</span></span><br><span class="line">logger.add_embedding(features, metadata=label, label_img=images.unsqueeze(<span class="number">1</span>))  <span class="comment"># 将嵌入数据记录到 TensorBoard</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">为了更直观地、实时地观察训练过程，使用一些可视化工具实现训练过程的图形化表达，以便直观地展现结果。本文以 Tensorboard 为例介绍深度学习里的可视化。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（4）：数据处理 Dataset 和 Dataloader</title>
    <link href="https://blog.iskage.online/posts/bffdebd7.html"/>
    <id>https://blog.iskage.online/posts/bffdebd7.html</id>
    <published>2025-02-12T04:32:00.000Z</published>
    <updated>2025-02-12T04:22:36.431Z</updated>
    
    <content type="html"><![CDATA[<h1>数据处理 Dataset 和 Dataloader</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的数据处理。相比于搭建已知的神经网络，对数据的处理更为复杂困难。【数据处理非常重要且困难！！】</p><p>Pytorch 针对数据处理，提供了两个重要的类 <code>Dataset</code> 和 <code>Dataloader</code></p><h2 id="1-Dataset-类">1 Dataset 类</h2><p>在 PyTorch 中，数据加载可以通过 <code>Dataset</code>类加载。如果要自定义的数据集，需要继承 <code>Dataset</code> 类，并且必须实现：</p><ul><li><code>__getitem__()</code> ：返回一条数据，或一个样本。<code>obj[index]</code> 等价于 <code>obj.__getitem__(index)</code></li><li><code>__len__()</code> ：返回样本量。<code>len(obj)</code> 等价于 <code>obj.__len__()</code></li></ul><h3 id="1-1-准备数据">1.1 准备数据</h3><p>以 <a href="https://www.kaggle.com/competitions/dogs-vs-cats">Kaggle 经典案例 “Dogs vs. Cats”</a> 的数据为例，构造数据集。有关数据下载，可以前往 <a href="https://www.kaggle.com/competitions/dogs-vs-cats/data">Kaggle 比赛官网下载</a> 。但完整数据集太大，可以下载部分图片，或者<a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/cat_dog.zip">点击链接</a>下载我存储的小部分样本。或者去往来我的 GitHub 库中下载 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><p>Kaggle 比赛 “Dogs vs. Cats” 是一个分类问题：判断一张图片是狗还是猫。在该问题中，所有图片都存放在一个文件夹下，可以根据文件名的前缀得到它们的标签值（ <code>dog</code> 或者 <code>cat</code> ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog/</span><br><span class="line">data/cat_dog/</span><br><span class="line">├── cat.13.jpg</span><br><span class="line">├── cat.14.jpg</span><br><span class="line">├── cat.16.jpg</span><br><span class="line">├── cat.18.jpg</span><br><span class="line">├── dog.2.jpg</span><br><span class="line">├── dog.3.jpg</span><br><span class="line">├── dog.4.jpg</span><br><span class="line">└── dog.5.jpg</span><br></pre></td></tr></table></figure><h3 id="1-2-自定义数据集">1.2 自定义数据集</h3><ul><li>导入必要的库：<code>PIL</code> 库用于读取图片，<code>os</code> 库用于给出路径（以免不同电脑路径组合方式不同）</li><li>自定义数据集：继承 <code>torch.utils.data</code> 的 <code>Dataset</code> 类</li><li>编写 <code>__init__</code> 方法：先初始化图片路径，但暂时不读取图片</li><li>编写 <code>__getitem__</code> 方法：真正读取图片，并定义标签，并转为张量</li><li>编写 <code>__len()__</code> 方法：返回样本量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogCat</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root</span>):</span><br><span class="line">        imgs = os.listdir(root)  <span class="comment"># 所有图片前的绝对路径表</span></span><br><span class="line">        <span class="comment"># 不实际加载图片，只指定路径，当调用 __getitem__ 时才读取图片，以节省内存</span></span><br><span class="line">        <span class="variable language_">self</span>.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_path = <span class="variable language_">self</span>.imgs[index]</span><br><span class="line">        <span class="comment"># 标签设置：dog -&gt; 1， cat -&gt; 0</span></span><br><span class="line">        label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> img_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 真正读取图片</span></span><br><span class="line">        pil_img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        array = np.asarray(pil_img)</span><br><span class="line">        data = torch.tensor(array)  <span class="comment"># 转为张量</span></span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.imgs)  <span class="comment"># 返回样本数</span></span><br></pre></td></tr></table></figure><h3 id="1-3-读取数据集">1.3 读取数据集</h3><p>实例化自定义的数据集 <code>DogCat</code> ，因为 <code>__init__(self, root)</code> 初始化方法里需要参数图片存储的文件夹/路径 <code>root</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>)  <span class="comment"># 图片存储在 ./data/cat_dog/ 文件夹内</span></span><br></pre></td></tr></table></figure><h3 id="1-4-读取数据集里的数据">1.4 读取数据集里的数据</h3><p>使用方法 <code>__getitem__</code> 获取真实数据（此处为图片）<code>img</code> 和标签 <code>label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第一个数据，包含标签和图片</span></span><br><span class="line">img, label = dataset[<span class="number">0</span>]  <span class="comment"># 相当于 dataset.__getitem__(0)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># torch.Size([374, 500, 3]) 说明图片已转为张量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(label)</span><br><span class="line"><span class="comment"># 0 说明是 cat</span></span><br></pre></td></tr></table></figure><p>逐个批量读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tensor&#x27;s shape: &#123;&#125;, label: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(img.shape, label))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739264855512.png" alt=""></p><blockquote><p>但是，我们注意到，图片大小形状不一致，且没有进行标准化，所以需要数据预处理</p></blockquote><h2 id="2-torchvision-库">2 torchvision 库</h2><p>Pytorch 的 <code>torchvision</code> 包提供了许多工具用来处理计算机视觉问题。其中 <code>torchvison.transforms</code> 可以方便快速地对图像进行操作。</p><h3 id="2-1-torchvison-transforms-的常见操作">2.1 torchvison.transforms 的常见操作</h3><p>可以去往 <a href="https://pytorch.org/vision/stable/transforms.html">Pytorch 官网</a> 查询具体使用。</p><h4 id="2-1-1-仅支持-PIL-Image">2.1.1 仅支持 PIL Image</h4><ul><li><code>RandomChoice</code> ：在一系列 transforms 操作中随机执行一个操作</li><li><code>RandomOrder</code> ：以随意顺序执行一系列 transforms 操作</li></ul><h4 id="2-1-2-仅支持-Tensor">2.1.2 仅支持 Tensor</h4><ul><li><code>Normalize</code> ：标准化，即减去均值，除以标准差</li><li><code>RandomErasing</code> ：随机擦除 Tensor 中一个矩形区域的像素。</li><li><code>ConvertImageDtype</code> ：将 Tensor 转换为指定的类型，并进行相应的缩放</li></ul><h4 id="2-1-3-PIL-Image-与-Tensor-相互转换">2.1.3  PIL Image 与 Tensor 相互转换</h4><ul><li><code>ToTensor</code> ：将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">H \times W \times C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 形状的 <code>PIL Image</code> 对象转换成形状为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">C \times H \times W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> 的 <code>Tensor</code> 。同时会自动将像素值从 [0, 255] 归一化至 [0, 1] （C 位通道数）</li><li><code>ToPILImage</code> ：将 <code>Tensor</code> 转为 <code>PIL Image</code> 对象</li></ul><h4 id="2-1-4-既支持-PIL-Image-，又支持-Tensor">2.1.4 既支持 PIL Image ，又支持 Tensor</h4><ul><li><code>Resize</code> ：调整图片尺寸</li><li><code>CenterCrop</code> <code>RandomCrop</code> <code>RandomResizedCrop</code> <code>FiveCrop</code> ： 按照不同规则对图像进行裁剪</li><li><code>RandomAffine</code> ：随机进行仿射变换，保持图像中心不变</li><li><code>RandomGrayscale</code> ：随机将图像变为灰度图</li><li><code>RandomHorizontalFlip</code> <code>RandomVerticalFlip</code> <code>RandomRotation</code> ：随机水平翻转、垂直翻转、旋转图像</li></ul><blockquote><p>如果需要对图片进行多个操作，可以通过 <code>transforms.Compose</code> 将这些操作拼接起来。</p></blockquote><blockquote><p>注意，这些操作定义后以对象的形式存在，真正使用时需要调用 <code>__call__</code> 方法。例如，要将图片的大小调整至 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>×</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">10 \times 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span> ，首先应构建操作 <code>trans = Resize((10, 10))</code> ，然后调用 <code>trans(img)</code></p></blockquote><h3 id="2-2-transforms-操作">2.2 transforms 操作</h3><h4 id="2-2-1-定义变化操作序列">2.2.1 定义变化操作序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变换操作</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">224</span>),  <span class="comment"># 缩放图片 (PIL Image), 保持长宽比不变, 使最短边缩放到 224 像素</span></span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从图片中间切出 224x224 的图片</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图片 (PIL Image) 转成 Tensor , 自动归一化至 [0, 1]</span></span><br><span class="line">    transforms.Normalize(mean=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>], std=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>])  <span class="comment"># 标准化至 [-1, 1] , 规定均值和标准差 , 因为图片为 3 维</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="2-2-2-自定义数据集中加入变化与否参数">2.2.2 自定义数据集中加入变化与否参数</h4><p>将有关变换序列参数加入初始化方法里，同时在 <code>__getitem()__</code> 里加入变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加参数 transform 传入变化序列</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogCat</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root, transform=<span class="literal">None</span></span>):</span><br><span class="line">        imgs = os.listdir(root)</span><br><span class="line">        <span class="variable language_">self</span>.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line">        <span class="variable language_">self</span>.transform = transform  <span class="comment"># 初始化 transforms 操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_path = <span class="variable language_">self</span>.imgs[index]</span><br><span class="line">        <span class="comment"># 标签设置：dog -&gt; 1， cat -&gt; 0</span></span><br><span class="line">        label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> img_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 真正读取图片</span></span><br><span class="line">        data = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.transform:</span><br><span class="line">            data = <span class="variable language_">self</span>.transform(data)  <span class="comment"># 直接进行 transform 变化</span></span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.imgs)  <span class="comment"># 返回样本数</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-实例化数据集">2.2.3 实例化数据集</h4><p>传入变化序列 <code>transform=transform</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>, transform=transform)  <span class="comment"># 使用 transform 进行变换</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-展示结果">2.2.4 展示结果</h4><p>可以发现数据格式统一成了我们需要的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    <span class="built_in">print</span>(img.shape, label)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739276735119.png" alt=""></p><blockquote><p>注意：自定义数据集需要考虑到当 <code>transform = None</code> 时的情形。在上述定义的数据集里，当默认<code>transform = None</code> 时不会报错，此时 <code>img</code> 是 <code>PIL Image</code> 对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">no_transform = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>)</span><br><span class="line">img, label = no_transform[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739276821066.png" alt=""></p><h3 id="2-3-torchvision-封装的常见数据集">2.3 torchvision 封装的常见数据集</h3><p><code>torchvision</code> 封装了常用的 dataset ，例如：<code>CIFAR-10</code>、<code>ImageNet</code>、<code>COCO</code>、<code>MNIST</code>、<code>LSUN</code> 等数据集。可以通过诸如 <code>torchvision.datasets.CIFAR10</code> 的命令进行调用，具体使用方法参考<a href="https://pytorch.org/vision/stable/datasets.html">官方文档</a>。</p><h4 id="2-3-1-ImageFolder-结构">2.3.1 ImageFolder 结构</h4><p>常见数据集结构 <code>ImageFolder</code> ：数据集假设所有的图片按文件夹保存，每个文件夹下存储同一个类别的图片，文件夹名为类名。即需要目录结构为：【可将上文的 cat_dog 数据集自主修改为符合 ImageFolder 要求的目录结构】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog_imagefolder/</span><br><span class="line">data/cat_dog_imagefolder/</span><br><span class="line">├── <span class="built_in">cat</span></span><br><span class="line">│   ├── cat.13.jpg</span><br><span class="line">│   ├── cat.14.jpg</span><br><span class="line">│   ├── cat.16.jpg</span><br><span class="line">│   └── cat.18.jpg</span><br><span class="line">└── dog</span><br><span class="line">    ├── dog.2.jpg</span><br><span class="line">    ├── dog.3.jpg</span><br><span class="line">    ├── dog.4.jpg</span><br><span class="line">    └── dog.5.jpg</span><br></pre></td></tr></table></figure><ul><li><code>ImageFolder</code> 类的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ImageFolder(root, transform=<span class="literal">None</span>, target_transform=<span class="literal">None</span>, loader=default_loader, is_valid_file=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">- root</span><br><span class="line">root 路径目录下存放着不同类别的文件夹</span><br><span class="line"></span><br><span class="line">- transform</span><br><span class="line">对 PIL Image 进行相关操作，transform 的输入是使用 loader 读取图片的返回对象 (一般是 PIL Image)</span><br><span class="line"></span><br><span class="line">- target_transform</span><br><span class="line">对 label 的操作</span><br><span class="line"></span><br><span class="line">- loader</span><br><span class="line">指定加载图片的函数，默认操作是读取为 PIL Image 对象</span><br><span class="line"></span><br><span class="line">- is_valid_file</span><br><span class="line">获取图像路径，检查文件的有效性</span><br></pre></td></tr></table></figure><blockquote><p><code>target_transform</code> 对标签的操作默认，则会返回一个字典。形如 <code>&#123;文件夹1名: 0, 文件夹2名: 1, 文件夹3名: 2, ...&#125;</code> 的字典，每个类的文件夹名和数字对应。可以通过 <code>.class_to_idx</code> 查看对应关系。</p></blockquote><h4 id="2-3-2-ImageFolder-创建数据集-Dataset">2.3.2 ImageFolder 创建数据集 Dataset</h4><ul><li>实例化数据集（未指定变换，直接读取 PIL Image）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> ImageFolder</span><br><span class="line">dataset = ImageFolder(<span class="string">&#x27;./data/cat_dog_imagefolder&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取一下标签 <code>label</code> 对应关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset.class_to_idx</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;cat&#x27;: 0, &#x27;dog&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><p>于是我们知道：<code>0</code> 对应 <code>'cat'</code> ，<code>1</code> 对应 <code>'dog'</code></p><ul><li>查看数据集：返回图片路径和对应的标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset.imgs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739278461256.png" alt=""></p><ul><li>查看具体数据（图片）：因为没有进行操作，默认读取的是 PIL Image 对象</li></ul><p><code>dataset[0]</code> 获取数据集第 0 个样本，包括 <code>img</code> 和 <code>label</code> ，其中第 0 个是 <code>img</code> ，第 1 个是 <code>label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset.__getitem__(<span class="number">0</span>)[<span class="number">0</span>]  <span class="comment"># 等价于 dataset[0][0], 获取 img</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739279152983.png" alt=""></p><ul><li>获取标签，返回类别名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 辅助返回类别名，不重要</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_class_by_idx</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">for</span> key_class, val_idx <span class="keyword">in</span> dataset.class_to_idx.items():</span><br><span class="line">        <span class="keyword">if</span> val_idx == idx:</span><br><span class="line">            <span class="keyword">return</span> key_class</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Not found&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签 dataset[0][1]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The label is: &#123;&#125; meaning &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    dataset.__getitem__(<span class="number">0</span>)[<span class="number">1</span>],</span><br><span class="line">    get_class_by_idx(dataset[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; [Out]: The label is: 0 meaning cat &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>【加入变换】：一般情况下，我们会加入变换 transforms</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入变换</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">224</span>),  <span class="comment"># 缩放图片 (PIL Image), 保持长宽比不变, 使最短边缩放到 224 像素</span></span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从图片中间切出 224x224 的图片</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图片 (PIL Image) 转成 Tensor , 自动归一化至 [0, 1]</span></span><br><span class="line">    transforms.Normalize(mean=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>], std=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>])  <span class="comment"># 标准化至 [-1, 1] , 规定均值和标准差 , 因为图片为 3 维</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新构造数据集</span></span><br><span class="line">dataset = ImageFolder(<span class="string">&#x27;./data/cat_dog_imagefolder&#x27;</span>, transform=transform)</span><br></pre></td></tr></table></figure><p>结果：查看图片张量形状，因为神经网络中一般图像的通道数在第一个维度，而 PIL Image 类型通道数在第三个维度，所以变换十分必要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset.__getitem__(<span class="number">0</span>)[<span class="number">0</span>].shape  <span class="comment"># or dataset[0][0].shape</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; [Out]: torch.Size([3, 224, 224]) &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>也正是因为 Tensor 和 PIL Image 对通道数位置要求的不同，二者转换往往需要多一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">to_img = transforms.ToPILImage()</span><br><span class="line">to_img(dataset[<span class="number">0</span>][<span class="number">0</span>] * <span class="number">0.5</span> + <span class="number">0.5</span>)  <span class="comment"># 因为变换指定了均值和方差后进行了归一化，所以要返归一化</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739279681882.png" alt=""></p><h2 id="2-DataLoader-类">2 DataLoader 类</h2><p>在训练神经网络时，一次处理的对象是一个 <code>batch</code> 的数据，同时还需要对一批数据进行打乱顺序和并行加速等操作。为此，PyTorch提供了 <code>DataLoader</code> 实现这些功能。</p><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataLoader(dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">False</span>, sampler=<span class="literal">None</span>,</span><br><span class="line">           batch_sampler=<span class="literal">None</span>, num_workers=<span class="number">0</span>, collate_fn=<span class="literal">None</span>,</span><br><span class="line">           pin_memory=<span class="literal">False</span>, drop_last=<span class="literal">False</span>, timeout=<span class="number">0</span>,</span><br><span class="line">           worker_init_fn=<span class="literal">None</span>, *, prefetch_factor=<span class="number">2</span>,</span><br><span class="line">           persistent_workers=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><code>dataset</code> : 数据集 Dataset 类</li><li><code>batch_size=1</code> :  批量 batch 的大小</li><li><code>shuffle=False</code> : 是否打乱数据顺序</li><li><code>sampler=None</code> : 用于从数据集中抽取样本的采样器，可以自定义采样策略</li><li><code>batch_sampler=None</code> : 定义如何批量抽取样本</li><li><code>num_workers=0</code> : 用多进程加载的进程数，0 代表不使用多进程</li><li><code>collate_fn=None</code> : 多样本拼接 batch 的方法，一般默认</li><li><code>pin_memory=False</code> : 是否将数据保存在 pin memory 区，pin memory 中的数据转移到 GPU 速度更快</li><li><code>drop_last=False</code> : Dataset 中的数据不一定被 batch_size 整除时，若 drop_last 为 True ，则将多出来的数据丢弃</li><li><code>timeout=0</code> : 进程读取数据的最大时间，若超时则丢弃数据</li><li><code>worker_init_fn=None</code> : 每个 worker 的初始化函数（num_workers=0 则无影响）</li><li><code>prefetch_factor=2</code> : 每个 worker 预先加载的样本数</li></ul><h3 id="2-1-Dataloader-的使用">2.1 Dataloader 的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataloader</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">False</span>)  <span class="comment"># 加载 dataset, 批量大小为 3, 打乱顺序, 单进程, 不丢弃最后数据</span></span><br></pre></td></tr></table></figure><ul><li>每个 batch 数据形如 <code>torch.Size([3, 3, 224, 224])</code> ：第一个 3 代表批量 batch 大小，第二个 3 代表图片通道数，最后代表 224x224 的图片大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739329118058.png" alt=""></p><blockquote><p>最后一个批量为 2 是因为图片总共 8 张，而批量按 3 个数据一取，剩余 2 个数据</p></blockquote><ul><li>安装迭代器的方式取数据：dataloader 可以通过迭代器的方式取数据 <code>iter(Dataloader)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataiter = <span class="built_in">iter</span>(dataloader)</span><br><span class="line">imgs, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"><span class="built_in">print</span>(imgs.shape)  <span class="comment"># torch.Size([3, 3, 224, 224])</span></span><br></pre></td></tr></table></figure><blockquote><p>迭代器 <code>iter()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 迭代器补充</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="built_in">iter</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(b)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(b)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h3 id="2-2-自定义-collate-fn-避免读取失败">2.2 自定义 collate_fn 避免读取失败</h3><p>若某个样本无法读取，此时利用 Dataset 类时， <code>__getitem__</code>函数中会抛出异常。</p><ul><li>例如：可手动创建一个新的文件夹，添加一个空文件命名为 <code>dog.fail.jpg</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog_fail/</span><br><span class="line">data/cat_dog_fail/</span><br><span class="line">├── cat.13.jpg</span><br><span class="line">├── cat.14.jpg</span><br><span class="line">├── cat.16.jpg</span><br><span class="line">├── cat.18.jpg</span><br><span class="line">├── dog.2.jpg</span><br><span class="line">├── dog.3.jpg</span><br><span class="line">├── dog.4.jpg</span><br><span class="line">├── dog.5.jpg</span><br><span class="line">└── dog.fail.jpg</span><br></pre></td></tr></table></figure><p>此时如果仍然利用之前自定义的 Dataset 类 <code>DogCat</code> ，则会在后面真正读取数据时报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错 : UnidentifiedImageError: cannot identify image file</span></span><br><span class="line"><span class="comment"># for img, label in dataset:</span></span><br><span class="line"><span class="comment">#     print(img.shape, label)</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-解决方法一：返回-None">2.2.1 解决方法一：返回 None</h4><p>当读取失败时，返回 None ，然后自定义 <code>collate_fn</code> 让 Dataloader 加载时跳过</p><p>定义新的 Dataset 类，继承之前自定义的 <code>DogCat</code> ，尝试使用父类的 <code>__getitem__()</code> ，如果失败则返回 <code>(None, None)</code> 代表 <code>(数据, 标签)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewDogCat</span>(<span class="title class_ inherited__">DogCat</span>):  <span class="comment"># 继承之前自定义的 Dataset 类 DogCat</span></span><br><span class="line">    <span class="comment"># 修改 __getitem__() 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 调用父类读取图片的方法 __getitem__() 等价于 DogCat.__getitem__(self, index)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># 数据=None, 标签=None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>自定义 <code>collate_fn</code> 解决 Dataloader 读取数据异常：collate_fn 的传入参数 batch 是一个列表，形如 <code>[(data1, label1), (data2, label2), ...]</code> 删去里面为空的元祖，然后采用 Dataloader 默认的拼接方式返回最终的批量数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data.dataloader <span class="keyword">import</span> default_collate  <span class="comment"># 导入 Dataloader 默认的拼接方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 collate_fn 函数，删去 None 值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_fail_sample</span>(<span class="params">batch</span>):</span><br><span class="line">    <span class="comment"># batch 是一个 list，每个元素是 dataset 的返回值，形如 (data, label)</span></span><br><span class="line">    batch = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> batch <span class="keyword">if</span> _[<span class="number">0</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]  <span class="comment"># 过滤为 None 的数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(batch) == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> torch.Tensor()  <span class="comment"># 如果整个数据集都是空的</span></span><br><span class="line">    <span class="keyword">return</span> default_collate(batch)  <span class="comment"># 用默认方式拼接过滤后的batch数据</span></span><br></pre></td></tr></table></figure><p>开始读取数据：实例化新的 dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset = NewDogCat(<span class="string">&#x27;data/cat_dog_fail/&#x27;</span>, transform=transform)</span><br><span class="line">dataset[<span class="number">5</span>] <span class="comment"># (None, None) 第 5 个读取了错误的图片</span></span><br></pre></td></tr></table></figure><p>Dataloader 读取数据：批量为 2 ，使用自定义 collate_fn 函数，单进程，打乱顺序，不丢弃最后数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataloader = DataLoader(dataset, <span class="number">2</span>, collate_fn=delete_fail_sample, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739330925980.png" alt=""></p><blockquote><p>此处有 2 个批量不统一：一个是由于有一个图片没有读取成功；另一个是因为总共 9 张图片，无法整除 2</p></blockquote><h4 id="2-2-2-解决方法二：随机读取正常数据-【推荐】">2.2.2 解决方法二：随机读取正常数据 【推荐】</h4><p>不再返回 <code>(None, None)</code> 而是随机返回其他正常数据，这样可以避免因读取失败带来的形状不统一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机读取数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewDogCat</span>(<span class="title class_ inherited__">DogCat</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            new_index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>) - <span class="number">1</span>)  <span class="comment"># 随机返回一张正常数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>[new_index]</span><br></pre></td></tr></table></figure><p>Dataloader 读取数据时不再需要自定义 collate_fn</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = NewDogCat(<span class="string">&#x27;data/cat_dog_fail/&#x27;</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, <span class="number">2</span>, collate_fn=<span class="literal">None</span>, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739331306790.png" alt=""></p><blockquote><p>此处唯一一个不统一形状是由于 9 不能被 2 整除，可以通过丢弃实现 <code>drop_last=True</code>）</p></blockquote><h3 id="2-3-随机采样">2.3 随机采样</h3><p>当 <code>DataLoader</code> 的 <code>shuffle=True</code> 时，会自动调用采样器 <code>RandomSampler</code> 打乱数据。默认的采样器是<code>SequentialSampler</code>，它会按顺序一个一个进行采样。除此之外，<code>WeightedRandomSampler</code> 也是一个很常见的采样器，它会根据每个样本的权重选取数据。</p><p><strong>参数</strong></p><ul><li><p><code>weights</code> ：每个样本的权重，权重越大的样本被选中的概率越大</p></li><li><p><code>num_samples</code> ：选取的样本总数，一般小于总数据量（可以大于）</p></li><li><p><code>replacement</code> （可选）：默认/建议为 True，即允许重复采样同一个数据。当为 True 时，此时就算总样本数不足 <code>num_samples</code> 也会依靠重复取样达到</p></li></ul><p><strong>使用案例</strong></p><ul><li>首先读取数据集，并设置权重列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataset = DogCat(<span class="string">&#x27;data/cat_dog/&#x27;</span>, transform=transform)  <span class="comment"># 总共 8 张图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权重：假设 cat 的图片被取出的概率是 dog 的概率的 2 倍</span></span><br><span class="line">weights = [<span class="number">2</span> <span class="keyword">if</span> label == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> data, label <span class="keyword">in</span> dataset]</span><br><span class="line"><span class="comment"># 两类图片被取出的概率与 weights 的绝对大小无关，只和比值有关</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(weights)</span><br><span class="line"><span class="comment"># [2, 1, 1, 1, 1, 2, 2, 2] -&gt; cat (label=0) 设权重为 2 ; dog (label=1) 设权重为 1</span></span><br></pre></td></tr></table></figure><ul><li>设定取样样本总数为 9（大于总图片数 8）选择 <code>replacement=True</code> 允许重复取样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data.sampler <span class="keyword">import</span> WeightedRandomSampler</span><br><span class="line"></span><br><span class="line">sampler = WeightedRandomSampler(weights=weights, num_samples=<span class="number">9</span>, replacement=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, sampler=sampler)</span><br></pre></td></tr></table></figure><ul><li>结果：<code>cat (label=0)</code> 的数量大约为 <code>dog (label)</code> 的 2 倍</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739333471748.png" alt=""></p><blockquote><p>【注意】注意次数样本数为 9 已经大于总图片数 8，说明当允许重复取样 <code>replacement=True</code> 时可以自行补充样本。同时原来 Dataloader 中的 <code>shuffle</code> 操作也会失效，因为随机取样完全由取样器决定</p></blockquote>]]></content>
    
    
    <summary type="html">Pytorch 针对数据处理，提供了两个重要的类 Dataset 和 Dataloader。本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的数据处理。相比于搭建已知的神经网络，对数据的处理更为复杂困难。【数据处理非常重要且困难！！】</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（7）聚合函数</title>
    <link href="https://blog.iskage.online/posts/b266e599.html"/>
    <id>https://blog.iskage.online/posts/b266e599.html</id>
    <published>2025-02-11T07:43:00.000Z</published>
    <updated>2025-02-19T11:26:58.057Z</updated>
    
    <content type="html"><![CDATA[<h1>聚合函数</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>不同的数据库管理系统 DBMS 的函数使用差异极大，SQL 语言函数的可移植性很差。</p><p>MySQL 提供的内置函数包括<em>单行函数</em>和<em>聚合函数</em>，这章讲解聚合函数。</p><p><strong>聚合函数</strong> ：对一组数据进行操作，输入一组数据的集合，返回结果值</p><h2 id="1-基础聚合函数">1 基础聚合函数</h2><p>对一组数据进行操作，输入一组数据的集合，返回结果值——例如：求一组数据的最大值，平均值，个数等</p><h3 id="1-1-AVG-和-SUM-均值和加和">1.1 AVG 和 SUM 均值和加和</h3><p>对于数值型数据：使用 <code>AVG</code> 求这一列数据的平均值；使用 <code>SUM</code> 求这一列数据的加和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(e.salary) &quot;avg_salary&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(e.salary) &quot;sum_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> avg_salary  <span class="operator">|</span> sum_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682243</span> <span class="operator">|</span>  <span class="number">691400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-2-MIN-和-MAX-最小和最大">1.2 MIN 和 MAX 最小和最大</h3><p>对于数值型数据：使用 <code>MIN</code> 求这一列数据的最小值；使用 <code>MAX</code> 求这一列数据的最大值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.salary) &quot;min_salary&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.salary) &quot;max_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="operator">|</span> min_salary <span class="operator">|</span> max_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2100.00</span> <span class="operator">|</span>   <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于日期数据：使用 <code>MIN</code> 求这一列最早的日期；使用 <code>MAX</code> 求这一列最晚的日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.hire_date) &quot;early_salary&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.hire_date) &quot;late_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> early_salary <span class="operator">|</span> late_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span>   <span class="operator">|</span> <span class="number">2000</span><span class="number">-04</span><span class="number">-21</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于字符串数据： <code>MIN</code> 代表这一列在字符表中最早出现； <code>MAX</code> 代表这一列在字符表中最晚出现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.last_name) &quot;A...&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.last_name) &quot;Z...&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> A... <span class="operator">|</span> Z...    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> Abel <span class="operator">|</span> Zlotkey <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>其他的类型均可使用 <code>MIN</code> 和 <code>MAX</code> ，可以自己尝试</p></blockquote><h3 id="1-3-COUNT-返回记录数">1.3 COUNT 返回记录数</h3><p><code>COUNT(*)</code> 返回表中记录总数，适用于任意数据类型，可以理解为对行计数。</p><blockquote><p>可以使用 <code>WHERE</code>增加限制条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;=</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">58</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><code>COUNT(列名)</code> 返回不为空的行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(e.commission_pct) &quot;commission_pct not null&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="keyword">not null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                      <span class="number">35</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><code>COUNT(*)</code> 会统计值为 <code>NULL</code> 的行，而 <code>COUNT(列名)</code> 不会统计此列值为 <code>NULL</code> 的行</p></blockquote><h2 id="2-GROUP-BY-分组查询">2 GROUP BY 分组查询</h2><p><code>GROUP BY</code> 可以依照某些条件/某列对数据进行分组输出</p><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 函数(列名<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件] <span class="comment">-- 可加限制条件</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名];  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><blockquote><p><code>WHERE 条件</code>  一定紧跟表后，无论是 <code>FROM 表名</code> 还是 <code>FROM 表名1 JOIN 表名2 ON ...</code> ，总之 <code>WHERE</code> 一定在表之后</p></blockquote><h3 id="2-1-以单个列为依据分组">2.1 以单个列为依据分组</h3><ul><li>例：按照 employees.department_id 分组，并连接表 departments 查询部门名。</li></ul><p>展示的列新增 <code>department_name</code> 和平均工资 <code>AVG(e.salary)</code> （此处使用格式化输出，保留 2 位小数，并命名为 “avg_salary_dept”）。采用内连接，去除 <code>NULL</code> ，因为我们要查的是切实存在的部门。<code>GROUP BY</code> 指定按照 <code>e.department_id</code> 分组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id, d.department_name, FORMAT(<span class="built_in">AVG</span>(e.salary), <span class="number">2</span>) &quot;avg_salary_dept&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"># <span class="keyword">WHERE</span> e.department_id <span class="operator">!=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id <span class="comment">-- 按照 employees.department_id 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary_dept <span class="keyword">DESC</span>; <span class="comment">-- 按照 avg_salary_dept 列排序</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739253575646.png" alt=""></p><h3 id="2-2-以多个列为依据分组">2.2 以多个列为依据分组</h3><ul><li>例：按 department_id, job_id 分组，并计算 salary</li></ul><p>简单的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id dept_id, e.job_id, <span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"># <span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id; <span class="comment">-- 按照 department_id, job_id 分组 </span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739253597610.png" alt=""></p><p>如果想要展示部门名，和工作职位名，同样可以多表连接，下面这个例子综合使用之前章节的知识：<code>GROUP BY</code> 依据 <code>e.department_id, e.job_id</code> 分组，<code>AVG</code> 函数分组计算平均薪水；<code>JOIN</code> 连接多表，查询 <code>dept_name</code> 和 <code>job_name</code> 字段并展示；<code>WHERE</code> 紧跟表后添加限制条件，<code>REGEXP</code> 使用正则表达寻找字段 <code>d.department_name</code> 以 <code>S</code> 开头的字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id        dept_id,</span><br><span class="line">       d.department_name      dept_name,</span><br><span class="line">       e.job_id,</span><br><span class="line">       j.job_title            job_name,</span><br><span class="line">       FORMAT(<span class="built_in">AVG</span>(salary), <span class="number">2</span>) avg_salary <span class="comment">-- 分组计算平均薪水</span></span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="comment">-- 多表连接，查询 dept_name 和 job_name</span></span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">         <span class="keyword">JOIN</span> jobs j</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id <span class="keyword">AND</span> e.job_id <span class="operator">=</span> j.job_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_name REGEXP <span class="string">&#x27;^S&#x27;</span> <span class="comment">-- 匹配以 S 开头的字符串</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id, e.job_id <span class="comment">-- 按照 e.department_id, e.job_id 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary <span class="keyword">DESC</span>; <span class="comment">-- 根据 avg_salary 降序</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739254720337.png" alt=""></p><h3 id="2-3-WITH-ROLLUP-添加记录">2.3 WITH ROLLUP 添加记录</h3><p>在 <code>GROUP BY</code> 后加上 <code>WITH ROLLUP</code> 会为结果添加一条记录（行数据）。</p><ul><li>分组依据列返回 <code>NULL</code></li><li>被操作的列，会再次操作，以下面代码为例</li></ul><p>当按照 <code>e.department_id</code> 分组且剔除 <code>e.department_id &lt; 30</code> 行数据后，会对计算完新表的 <code>sum_id</code> 和 <code>avg_salary</code> 再进行一次 <code>SUM</code> 和 <code>AVG</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id      id,</span><br><span class="line">       <span class="built_in">SUM</span>(e.department_id) sum_id,</span><br><span class="line">       <span class="built_in">AVG</span>(e.salary)        avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>; <span class="comment">-- 添加一行数据：再进行一次 SUM(sum_id) AVG(avg_salary) 操作</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739255721920.png" alt=""></p><blockquote><p>【注意】分组时选择查询的表一定要保证查询后数量相同</p><p>【注意】<code>WITH ROLLUP</code> 和 <code>ORDER BY</code> 不能同时使用</p><p>【注意】<code>WHERE</code> 可以在查表时进行约束，但不能对 <code>GROUP BY</code> 分组时进行约束</p></blockquote><h2 id="3-GROUP-BY-…-HAVING-有约束的分组">3 GROUP BY … HAVING 有约束的分组</h2><h3 id="3-1-HAVING-使用聚合函数进行限制">3.1 HAVING 使用聚合函数进行限制</h3><p>在行已经被分组后，且保证查询列中使用了聚合函数：则满足 <code>HAVING 条件</code> 子句中条件的分组将被显示。</p><blockquote><p>注意：<code>HAVING</code> 不能单独使用，必须和 <code>GROUP BY</code> 一起使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 函数(列名<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件] <span class="comment">-- 可加限制条件</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line"><span class="keyword">HAVING</span> 条件 <span class="comment">-- 分组的过滤条件</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名];  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>例：按部门分组，返回最大工资。然后查询这些最大工资大于 10000 的部门 id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) &quot;max_larger_than_10000&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> max_larger_than_10000 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>              <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>              <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span>              <span class="number">14000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span>              <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>              <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span>              <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-2-HAVING-和-WHERE">3.2 HAVING 和 WHERE</h3><blockquote><p>【注意】不可使用 <code>WHERE</code> 对聚合函数进行约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) &quot;max_larger_than_10000&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>  <span class="comment">-- WHERE 后不可加聚合函数</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">1111</span> (HY000): Invalid use <span class="keyword">of</span> <span class="keyword">group</span> <span class="keyword">function</span></span><br></pre></td></tr></table></figure><ul><li><code>WHERE</code> 可以直接使用表中的字段作为筛选条件，但不能使用分组中的聚合函数作为筛选条件</li><li><code>HAVING</code> 必须要与 <code>GROUP BY</code>配合使用，可以把分组中的聚合函数和分组字段作为筛选条件</li><li>多表连接时，<code>WHERE</code> 是先筛选后连接，而 <code>HAVING</code> 是先连接后筛选。所以 <code>WHERE</code> 会效率更高</li></ul><h2 id="4-SELECT-语句【总结】">4 SELECT 语句【总结】</h2><h3 id="4-1-查询的常见格式">4.1 查询的常见格式</h3><p>结合之前章节的知识（<a href="https://blog.iskage.online/posts/151eef00.html">SELECT 语句</a>、<a href="https://blog.iskage.online/posts/a7d82995.html">运算符与 SQL 的正则表达式</a>、<a href="https://blog.iskage.online/posts/c8719e79.html">排序与分页：ORDER BY 子句 和 LIMIT 子句</a>、<a href="https://blog.iskage.online/posts/b4103c0f.html">多表查询</a>、<a href="https://blog.iskage.online/posts/35d72c0b.html">单行函数</a>），我们可以总结常见的 <code>SELECT</code> 语句查询格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式1 : 使用 WHERE 连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span>, 表名<span class="number">2</span>, 表名<span class="number">3</span></span><br><span class="line"><span class="keyword">WHERE</span> 多表的连接条件 (不含聚合函数)</span><br><span class="line"><span class="keyword">AND</span> 条件</span><br><span class="line"><span class="keyword">AND</span> 条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件 (可含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT 起始行数, 行数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式2 : 使用 JOIN 连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span> </span><br><span class="line"><span class="keyword">JOIN</span> 表名<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">JOIN</span> 表名<span class="number">3</span></span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件 (不含聚合函数)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件 (可含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT 起始行数, 行数</span><br></pre></td></tr></table></figure><h3 id="4-2-SELECT-语句的执行顺序">4.2 SELECT 语句的执行顺序</h3><ul><li>关键字必须按照</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ... [<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ...]</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT ..., ...</span><br></pre></td></tr></table></figure><ul><li>SQL 实际执行顺序为</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ... [<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ...]</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">DISTINCT</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT ..., ...</span><br></pre></td></tr></table></figure><p>即：先找到表（<em>FROM</em>） ，然后根据条件过滤（<em>WHERE</em>）得到虚拟的一张表，然后分组（<em>GROUP BY</em>），分组后再依照聚合函数或分组依据的列等条件进行过滤（<em>HAVING</em>），最后锁定需要输出的字段/列（<em>SELECT</em>），去除重复行数据（<em>DISTINCT</em>）排序（<em>ORDER BY</em>）分页（<em>LIMIT</em>）输出。</p>]]></content>
    
    
    <summary type="html">MySQL 提供的内置函数包括单行函数和聚合函数，这章讲解聚合函数。聚合函数对一组数据进行操作，输入一组数据的集合，返回结果值。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（6）单行函数</title>
    <link href="https://blog.iskage.online/posts/35d72c0b.html"/>
    <id>https://blog.iskage.online/posts/35d72c0b.html</id>
    <published>2025-02-10T12:43:00.000Z</published>
    <updated>2025-02-19T11:26:51.954Z</updated>
    
    <content type="html"><![CDATA[<h1>单行函数</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>不同的数据库管理系统 DBMS 的函数使用差异极大，SQL 语言函数的可移植性很差。下面我们介绍的是 SQL 语言的内置函数。</p><p>MySQL 提供的内置函数包括<em>单行函数</em>和<em>聚合函数</em>，这章讲解单行函数。</p><p><strong>单行函数</strong>：对行数据进行操作；输入参数，返回结果；对每行进行操作。</p><h1>1 数值函数</h1><h2 id="1-1-基本数值函数">1.1 基本数值函数</h2><ul><li><code>ABS(x)</code> ：返回 x 的绝对值</li><li><code>SIGN(x)</code> ：返回 x 的符号，正数返回 1 ，负数返回 -1 ， 0 返回 0</li><li><code>PI()</code> ：返回圆周率的值</li><li><code>CEIL(x), CEILING(x)</code> ：返回大于或等于 x 的最小整数</li><li><code>FLOOR(x)</code> ：返回小于或等于 x 的最大整数</li><li><code>LEAST(x1, x2, x3, ...)</code> ：返回列表中的最小值</li><li><code>GREATEST(x1, x2, x3, ...)</code> ：返回列表中的最大值</li><li><code>MOD(x, y)</code> ：返回 x 除以 y 后的余数</li><li><code>RAND()</code> ：返回 0-1 的随机值</li><li><code>RAND(x)</code> ：返回 0-1 的随机值，其中 x 的值用作种子值，相同的X值会产生相同的随机数</li><li><code>ROUND(x)</code> ：返回一个对 x 的值进行四舍五入后，最接近于 x 的整数</li><li><code>ROUND(x, y)</code> ：返回一个对 x 的值进行四舍五入后最接近 x 的值，并保留到小数点后面 y 位</li><li><code>TRUNCATE(x, y)</code> ：返回数字 x 截断为 y 位小数的结果</li><li><code>SQRT(x)</code> ：返回 x 的平方根，当 x 的值为负数时，返回NULL</li><li><code>RADIANS(x)</code> ：将角度转化为弧度，其中参数 x 为角度值</li><li><code>DEGREES(x)</code> ：将弧度转化为角度，其中参数 x 为弧度值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-10</span>),            <span class="comment">-- 10</span></span><br><span class="line">       SIGN(<span class="number">-20</span>),           <span class="comment">-- -1</span></span><br><span class="line">       SIGN(<span class="number">30</span>),            <span class="comment">-- 1</span></span><br><span class="line">       PI(),                <span class="comment">-- 3.141593</span></span><br><span class="line">       <span class="built_in">CEIL</span>(<span class="number">40.2</span>),          <span class="comment">-- 41</span></span><br><span class="line">       <span class="built_in">CEILING</span>(<span class="number">-40.3</span>),      <span class="comment">-- 40</span></span><br><span class="line">       <span class="built_in">FLOOR</span>(<span class="number">50.4</span>),         <span class="comment">-- 50</span></span><br><span class="line">       <span class="built_in">FLOOR</span>(<span class="number">-60.5</span>),        <span class="comment">-- -61</span></span><br><span class="line">       <span class="built_in">MOD</span>(<span class="number">12</span>, <span class="number">5</span>),          <span class="comment">-- 2</span></span><br><span class="line">       RAND(),<span class="comment">-- 0.5452342969786695</span></span><br><span class="line">       RAND(<span class="number">10</span>),            <span class="comment">-- 0.6570515219653505</span></span><br><span class="line">       RAND(<span class="number">10</span>),            <span class="comment">-- 0.6570515219653505</span></span><br><span class="line">       ROUND(<span class="number">12.33</span>),        <span class="comment">-- 12</span></span><br><span class="line">       ROUND(<span class="number">12.348</span>, <span class="number">2</span>),    <span class="comment">-- 12.35</span></span><br><span class="line">       ROUND(<span class="number">12.324</span>, <span class="number">-1</span>),   <span class="comment">-- 10</span></span><br><span class="line">       <span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>, <span class="number">1</span>),  <span class="comment">-- 12.6</span></span><br><span class="line">       <span class="keyword">TRUNCATE</span>(<span class="number">12.66</span>, <span class="number">-1</span>), <span class="comment">-- 10</span></span><br><span class="line">       RADIANS(<span class="number">180</span>),        <span class="comment">-- 3.141592653589793</span></span><br><span class="line">       DEGREES(<span class="number">2</span> <span class="operator">*</span> PI()),   <span class="comment">-- 360</span></span><br><span class="line">       DEGREES(RADIANS(<span class="number">90</span>)); <span class="comment">-- 90</span></span><br></pre></td></tr></table></figure><h2 id="1-2-三角函数">1.2 三角函数</h2><p>以下 x 均为弧度值</p><ul><li><code>SIN(x)</code> ：正弦值</li><li><code>ASIN(x)</code> ：反正弦值，即获取正弦为 x 的弧度，如果 x 的值不在 [-1, 1] ，则返回 NULL</li><li><code>COS(x)</code> ：余弦值</li><li><code>ACOS(x)</code> ：返回 x 的反余弦值，即获取余弦为 x 的弧度，如果 x 的值不在 [-1, 1] ，则返回 NULL</li><li><code>TAN(x)</code> ：正切值</li><li><code>ATAN(x)</code> ：返回 x。的反正切值，即获取正切值为 x 的弧度</li><li><code>ATAN2(m,n)</code> ：返回点 (m, n) 到 (0, 0) 的连线构成的角度的弧度值</li><li><code>COT(x)</code> ：余切值</li></ul><blockquote><p>反三角函数返回的就是角度的弧度值，可以方便的得到角度大小</p></blockquote><p><code>ATAN2(m, n)</code> 函数返回 (m, n) 到 (0, 0) 的连线构成的角度的弧度值。如果使用 <code>ATAN(x)</code> 则会出现报错，例如当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">x=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span> 时，即求点 (1, 0) 到 (0, 0) 的连线构成的角度的弧度值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SIN</span>(RADIANS(<span class="number">30</span>)), <span class="comment">-- sin(π/6) = 0.5</span></span><br><span class="line">       DEGREES(<span class="built_in">ASIN</span>(<span class="number">1</span>)), <span class="comment">-- arcsin(90º) = 1</span></span><br><span class="line">       <span class="built_in">TAN</span>(RADIANS(<span class="number">45</span>)), <span class="comment">-- tan(45º) = tan(π/4) = 1</span></span><br><span class="line">       DEGREES(<span class="built_in">ATAN</span>(<span class="number">1</span>)), <span class="comment">-- arctan(1) = 45º</span></span><br><span class="line">       DEGREES(ATAN2(<span class="number">1</span>, <span class="number">1</span>)); <span class="comment">-- arctan(1) = 45º (1, 1) 与 (0, 0) 的连线角度</span></span><br></pre></td></tr></table></figure><h2 id="1-3-指数与对数">1.3 指数与对数</h2><ul><li><code>POW(x, y), POWER(x, y)</code> ：返回 x 的 y 次方</li><li><code>EXP(X)</code> ：返回 e 的 x 次方，e 为自然对数</li><li><code>LN(x), LOG(x)</code> ：返回以 e 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li><li><code>LOG10(x)</code> ：返回以 10 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li><li><code>LOG2(x)</code> ：返回以 2 为底的 x 的对数，当 x 小于等于 0 时，返回 NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> POW(<span class="number">2</span>, <span class="number">5</span>),  <span class="comment">-- 2^5 = 32</span></span><br><span class="line">       <span class="built_in">POWER</span>(<span class="number">2</span>, <span class="number">4</span>),<span class="comment">-- 2^4 = 16</span></span><br><span class="line">       <span class="built_in">EXP</span>(<span class="number">2</span>),     <span class="comment">-- e^2 = 7.3891</span></span><br><span class="line">       <span class="built_in">LN</span>(<span class="number">10</span>),     <span class="comment">-- ln(10) = 2.303</span></span><br><span class="line">       <span class="built_in">LOG10</span>(<span class="number">10</span>),  <span class="comment">-- log_10(10) = 1</span></span><br><span class="line">       LOG2(<span class="number">4</span>); <span class="comment">-- log_2(2) = 2</span></span><br></pre></td></tr></table></figure><h2 id="1-4-进制转换">1.4 进制转换</h2><ul><li><code>BIN(x)</code> ：返回 x 的二进制编码</li><li><code>HEX(x)</code> ：返回 x 的十六进制编码</li><li><code>OCT(x)</code> ：返回 x 的八进制编码</li><li><code>CONV(x, f1, f2)</code> ：返回 x 从 f1 进制数变成 f2 进制数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">1</span>),  <span class="comment">-- 1</span></span><br><span class="line">       HEX(<span class="number">15</span>), <span class="comment">-- F</span></span><br><span class="line">       OCT(<span class="number">7</span>),  <span class="comment">-- 7</span></span><br><span class="line">       CONV(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>); <span class="comment">-- 1</span></span><br></pre></td></tr></table></figure><h1>2 字符串函数</h1><blockquote><p>MySQL 中，字符串的位置是从 1 开始计数</p></blockquote><ul><li><p><code>ASCII(s)</code> ：返回字符串 s 中的第一个字符的 ASCII 码</p></li><li><p><code>CHAR_LENGTH(s)</code>：返回字符串 <code>s</code> 的字符数，作用与 <code>CHARACTER_LENGTH(s)</code> 相同</p></li><li><p><code>LENGTH(s)</code>：返回字符串 <code>s</code> 的字节数（与字符集有关）</p></li><li><p><code>CONCAT(s1, s2, ..., sn)</code>：将 <code>s1, s2, ..., sn</code> 连接为一个字符串</p></li><li><p><code>CONCAT_WS(x, s1, s2, ..., sn)</code>：用分隔符 <code>x</code> 连接 <code>s1, s2, ..., sn</code>（每个字符串间插入 <code>x</code>）</p></li><li><p><code>INSERT(str, idx, len, replacestr)</code>：从字符串 <code>str</code> 的 <code>idx</code> 位置开始，替换 <code>len</code> 个字符为 <code>replacestr</code></p></li><li><p><code>REPLACE(str, a, b)</code>：将字符串 <code>str</code> 中所有子串 <code>a</code> 替换为 <code>b</code></p></li><li><p><code>UPPER(s)</code> 或 <code>UCASE(s)</code>：将字符串 <code>s</code> 全部转为大写</p></li><li><p><code>LOWER(s)</code> 或 <code>LCASE(s)</code>：将字符串 <code>s</code> 全部转为小写</p></li><li><p><code>LEFT(str, n)</code>：返回字符串 <code>str</code> 最左侧的 <code>n</code> 个字符</p></li><li><p><code>RIGHT(str, n)</code>：返回字符串 <code>str</code> 最右侧的 <code>n</code> 个字符</p></li><li><p><code>LPAD(str, len, pad)</code>：用 <code>pad</code> 从左侧填充 <code>str</code>，直到总长度为 <code>len</code></p></li><li><p><code>RPAD(str, len, pad)</code>：用 <code>pad</code> 从右侧填充 <code>str</code>，直到总长度为 <code>len</code></p></li><li><p><code>LTRIM(s)</code>：去掉字符串 <code>s</code> 左侧的空格</p></li><li><p><code>RTRIM(s)</code>：去掉字符串 <code>s</code> 右侧的空格</p></li><li><p><code>TRIM(s)</code>：去掉字符串 <code>s</code> 开头和结尾的空格</p></li><li><p><code>TRIM(s1 FROM s)</code>：去掉字符串 <code>s</code> 开头和结尾的 <code>s1</code></p></li><li><p><code>TRIM(LEADING s1 FROM s)</code>：去掉字符串 <code>s</code> 开头的 <code>s1</code></p></li><li><p><code>TRIM(TRAILING s1 FROM s)</code>：去掉字符串 <code>s</code> 结尾的 <code>s1</code></p></li><li><p><code>REPEAT(str, n)</code>：返回 <code>str</code> 重复 <code>n</code> 次的结果</p></li><li><p><code>SPACE(n)</code>：返回由 <code>n</code> 个空格组成的字符串</p></li><li><p><code>STRCMP(s1, s2)</code>：比较字符串 <code>s1</code> 和 <code>s2</code> 的 ASCII 码值大小</p></li><li><p><code>SUBSTR(s, index, len)</code>：从 <code>s</code> 的 <code>index</code> 位置截取 <code>len</code> 个字符，作用同 <code>SUBSTRING(s, n, len)</code> 和 <code>MID(s, n, len)</code></p></li><li><p><code>LOCATE(substr, str)</code>：返回 <code>substr</code> 在 <code>str</code> 中首次出现的位置，作用同 <code>POSITION(substr IN str)</code> 和 <code>INSTR(str, substr)</code>（未找到返回 <code>0</code>）</p></li><li><p><code>ELT(m, s1, s2, ..., sn)</code>：返回第 <code>m</code> 个字符串（如 <code>m=1</code> 返回 <code>s1</code>）</p></li><li><p><code>FIELD(s, s1, s2, ..., sn)</code>：返回 <code>s</code> 在列表 <code>s1, s2, ..., sn</code> 中第一次出现的位置</p></li><li><p><code>FIND_IN_SET(s1, s2)</code>：返回 <code>s1</code> 在逗号分隔的字符串 <code>s2</code> 中的位置</p></li><li><p><code>REVERSE(s)</code>：返回 <code>s</code> 反转后的字符串</p></li><li><p><code>NULLIF(value1, value2)</code>：若 <code>value1</code> 与 <code>value2</code> 相等则返回 <code>NULL</code>，否则返回 <code>value1</code></p></li></ul><p>例：<code>FIND_IN_SET(s1, s2)</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIELD(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;msm&#x27;</span>, <span class="string">&#x27;amma&#x27;</span>), <span class="comment">-- 0 : 因为 mm 没有出现在字符串列表中</span></span><br><span class="line">       FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello,mm,amma&#x27;</span>); <span class="comment">-- 2 : 出现在第 2 个，从 1 开始计数</span></span><br></pre></td></tr></table></figure><blockquote><p><code>FIND_IN_SET(s1, s2)</code>：返回 <code>s1</code> 在逗号分隔的字符串 <code>s2</code> 中的位置。<code>s2</code> 是里的元素只能以逗号为间隔</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello,mm,amma&#x27;</span>), <span class="comment">-- 2 : 出现在第 2 个，从 1 开始计数</span></span><br><span class="line">       FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;hello, mm, amma&#x27;</span>); <span class="comment">-- 0 : 因为出现了空格，此时第 2 个是 &#x27;mm &#x27;</span></span><br></pre></td></tr></table></figure><p>例：<code>NULLIF()</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">NULLIF</span>(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>),  <span class="comment">-- 相同返回 NULL</span></span><br><span class="line">       <span class="built_in">NULLIF</span>(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;sql&#x27;</span>);  <span class="comment">-- 不同返回第一个值 mysql</span></span><br></pre></td></tr></table></figure><h1>3 日期和时间函数</h1><h2 id="3-1-获取日期和时间">3.1 获取日期和时间</h2><ul><li><p><code>CURDATE(), CURRENT_DATE()</code> ：返回当前日期，只包含年、月、日</p></li><li><p><code>CURTIME(), CURRENT_TIME()</code> ：返回当前时间，只包含时、分、秒</p></li><li><p><code>NOW()</code> <code>SYSDATE()</code> <code>CURRENT_TIMESTAMP()</code> <code>LOCALTIME()</code> <code>LOCALTIMESTAMP()</code> ：返回当前系统日期和时间</p></li><li><p><code>UTC_DATE()</code> ：返回 UTC（世界标准时间）日期</p></li><li><p><code>UTC_TIME()</code> ：返回UTC（世界标准时间）时间</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CURDATE(),        <span class="comment">-- 2025-02-10</span></span><br><span class="line">       CURTIME(),        <span class="comment">-- 18:15:16</span></span><br><span class="line">       NOW(),            <span class="comment">-- 2025-02-10 18:15:16</span></span><br><span class="line">       <span class="built_in">LOCALTIMESTAMP</span>(), <span class="comment">-- 2025-02-10 18:15:16</span></span><br><span class="line">       UTC_DATE(),       <span class="comment">-- 2025-02-10</span></span><br><span class="line">       UTC_TIME(); <span class="comment">-- 10:15:16</span></span><br></pre></td></tr></table></figure><h2 id="3-2-日期与时间戳的转换">3.2 日期与时间戳的转换</h2><ul><li><code>UNIX_TIMESTAMP()</code> ：以 UNIX 时间戳的形式返回当前时间</li><li><code>UNIX_TIMESTAMP(date)</code> ：将时间 date 以 UNIX 时间戳的形式返回</li><li><code>FROM_UNIXTIME(timestamp)</code> ：将 UNIX 时间戳的时间转换为普通格式的时间</li></ul><blockquote><p>UNIX 时间戳（UNIX Timestamp）是指从 1970 年 1 月 1 日 00:00:00 UTC（协调世界时）开始所经过的秒数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP(now()),                 <span class="comment">-- 1739182869 精确到时分秒</span></span><br><span class="line">       UNIX_TIMESTAMP(CURTIME()),             <span class="comment">-- 1739182869 与第一个相同</span></span><br><span class="line">       UNIX_TIMESTAMP(CURDATE()),             <span class="comment">-- 1739116800 日期转时间戳</span></span><br><span class="line">       UNIX_TIMESTAMP(<span class="string">&#x27;2011-11-11 11:11:11&#x27;</span>), <span class="comment">-- 特定日期时间</span></span><br><span class="line">       FROM_UNIXTIME(<span class="number">1739182869</span>); <span class="comment">-- 2025-02-10 18:21:09</span></span><br></pre></td></tr></table></figure><h2 id="3-3-获取月份、星期、星期数、天数等">3.3 获取月份、星期、星期数、天数等</h2><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739183106529.png" alt=""></p><h2 id="3-4-日期的操作函数">3.4 日期的操作函数</h2><ul><li><code>EXTRACT(type FROM date)</code> ：返回指定日期中特定的部分，type 指定返回的值</li></ul><p>具体的 type 类型可以自行查询</p><h2 id="3-5-日期的格式化与解析">3.5 日期的格式化与解析</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 格式化输出</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%M-%D-%W %H:%i:%s&#x27;</span>);</span><br><span class="line"><span class="comment">-- 2025-February-10th-Monday 18:30:58</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 解析为标准日期形式</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;09/01/2009&#x27;</span>, <span class="string">&#x27;%m/%d/%Y&#x27;</span>),</span><br><span class="line">       STR_TO_DATE(<span class="string">&#x27;20140422154706&#x27;</span>, <span class="string">&#x27;%Y%m%d%H%i%s&#x27;</span>),</span><br><span class="line">       STR_TO_DATE(<span class="string">&#x27;2014-04-22 15:47:06&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure><h1>4 流程控制函数【重要】</h1><p>根据不同的条件，执行不同的处理流程，类似于其他语言中的 <code>if</code> <code>for</code> <code>while</code></p><h2 id="4-1-IF-函数">4.1 <code>IF()</code> 函数</h2><ul><li><code>IF(value, value1, value2)</code> ：如果 <code>value</code> 的值为 <code>TRUE</code> ，返回 <code>value1</code>，否则返回 <code>value2</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IF(<span class="literal">TRUE</span>, <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>);  <span class="comment">-- &#x27;value1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-IFNULL-value1-value2-函数">4.2 <code>IFNULL(value1, value2)</code> 函数</h2><ul><li><code>IFNULL(value1, value2)</code> ：如果 <code>value1</code> 不为 <code>NULL</code>，返回 <code>value1</code>，否则返回 <code>value2</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IFNULL(<span class="keyword">NULL</span>, <span class="string">&#x27;value2&#x27;</span>); <span class="comment">-- NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> IFNULL(<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>); <span class="comment">-- &#x27;value1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-按条件返回结果">4.3 按条件返回结果</h2><ul><li><code>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 [ELSE 结果3] END 列名</code> ：如果 <code>条件1</code> 成立，则返回 <code>结果1</code> ；如果 <code>条件2</code> 成立，则返回 <code>结果2</code> ；如果 <code>条件3</code> 成立，则返回 <code>结果3</code></li></ul><p>格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>,</span><br><span class="line">       列名<span class="number">2</span>,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">           <span class="keyword">WHEN</span> 条件<span class="number">3</span> <span class="keyword">THEN</span> 结果<span class="number">3</span></span><br><span class="line">           <span class="keyword">ELSE</span> 结果<span class="number">4</span> </span><br><span class="line">           <span class="keyword">END</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>例如：按照 <code>salary</code> 给员工增加一个字段 <code>&quot;level of salary&quot;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       salary,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;high&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;average&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> salary <span class="operator">&gt;=</span> <span class="number">8000</span> <span class="keyword">THEN</span> <span class="string">&#x27;low&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;too low&#x27;</span> </span><br><span class="line">           <span class="keyword">END</span> &quot;level of salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739188034628.png" alt=""></p><h2 id="4-4-按数值返回结果">4.4 按数值返回结果</h2><ul><li><code>CASE 列名1 WHEN num1 THEN 结果1 WHEN num2 THEN 结果2 ELSE 结果3 END 列名2</code> ：如果 <code>列名1</code> 这行的值等于 <code>num1</code> 则返回 <code>结果1</code> ；若这行的值等于 <code>num2</code> 则返回 <code>结果2</code> ；否则返回 <code>结果3</code> ，最终存入 <code>列名2</code></li></ul><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>,</span><br><span class="line">       列名<span class="number">2</span>,</span><br><span class="line">       <span class="keyword">CASE</span> 列名<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> 结果<span class="number">3</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> 结果<span class="number">4</span></span><br><span class="line">           <span class="keyword">ELSE</span> 结果<span class="number">5</span> </span><br><span class="line">           <span class="keyword">END</span> 新列名</span><br><span class="line"><span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>例如：按照 <code>region_id</code> 填充 <code>region_name</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：多表连接</span></span><br><span class="line"><span class="keyword">SELECT</span> c.country_name,</span><br><span class="line">       c.region_id,</span><br><span class="line">       r.region_name</span><br><span class="line"><span class="keyword">FROM</span> countries <span class="keyword">AS</span> c</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> regions <span class="keyword">as</span> r</span><br><span class="line">                   <span class="keyword">ON</span> c.region_id <span class="operator">=</span> r.region_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：按数值返回结果 CASE WHEN THEN</span></span><br><span class="line"><span class="keyword">SELECT</span> c.country_name,</span><br><span class="line">       c.region_id,</span><br><span class="line">       <span class="keyword">CASE</span> c.region_id</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;Europe&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;Americas&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">&#x27;Asia&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> <span class="string">&#x27;Middle East and Africa&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;Not find&#x27;</span> </span><br><span class="line">           <span class="keyword">END</span> &quot;region name&quot;</span><br><span class="line"><span class="keyword">FROM</span> countries <span class="keyword">AS</span> c;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739189297048.png" alt=""></p><h2 id="4-5-一些练习">4.5 一些练习</h2><ul><li>计算年工资，考虑到奖金</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       <span class="number">12</span> <span class="operator">*</span> salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> IFNULL(commission_pct, <span class="number">0</span>)) <span class="keyword">AS</span> &quot;annual salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>按照职位调整薪水，同时补充职位全程</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name,</span><br><span class="line">       e.job_id,</span><br><span class="line">       e.salary,</span><br><span class="line">       j.job_title,</span><br><span class="line">       <span class="keyword">CASE</span> e.job_id</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;IT_PROG&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.10</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;ST_CLERK&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.15</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;SA_REP&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.20</span> <span class="operator">*</span> salary</span><br><span class="line">           <span class="keyword">ELSE</span> salary</span><br><span class="line">           <span class="keyword">END</span> &quot;REVISED_SALARY&quot; <span class="comment">-- 按照职位调整薪水</span></span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> jobs <span class="keyword">AS</span> j</span><br><span class="line">                   <span class="keyword">ON</span> e.job_id <span class="operator">=</span> j.job_id; <span class="comment">-- 补充职位全程，多表连接</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739189717705.png" alt=""></p><h1>5 加密与解密函数【数据库安全】</h1><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739190256675.png" alt=""></p><blockquote><p>因为安全性问题，在 <code>MySQL 8.0</code> 版本后 <code>PASSWORD(str)</code> <code>ENCODE()</code> <code>DECODE()</code> 函数均被移除</p></blockquote><h2 id="5-1-MD5-和-SHA-加密">5.1 MD5 和 SHA 加密</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> MD5(<span class="string">&#x27;mysql&#x27;</span>) <span class="keyword">AS</span> &quot;md5 key&quot;; <span class="comment">-- 81c3b080dad537de7e10e0987a4bf52e</span></span><br><span class="line"><span class="keyword">SELECT</span> SHA(<span class="string">&#x27;mysql&#x27;</span>) <span class="keyword">AS</span> &quot;sha key&quot;; <span class="comment">-- f460c882a18c1304d88854e902e11b85d71e7e1b</span></span><br></pre></td></tr></table></figure><h2 id="5-2-加密和解密">5.2 加密和解密</h2><p>使用 <code>AES_ENCRYPT()</code> 和 <code>AES_DECRYPT()</code> 函数实现 <code>ENCODE</code> 和 <code>DECODE</code> 功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> encrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> encrypted_data                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x0F46E6F2FE63CD819E2AD70B1919B9C5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> AES_DECRYPT(AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>), <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> decrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> decrypted_data                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x6D7973716C</span>                   <span class="operator">|</span>  <span class="comment">-- &#x27;mysql&#x27; 的十六进制</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">CAST</span>(AES_DECRYPT(AES_ENCRYPT(<span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;seed&#x27;</span>), <span class="string">&#x27;seed&#x27;</span>) <span class="keyword">AS</span> <span class="type">CHAR</span>) <span class="keyword">AS</span> decrypted_data;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> decrypted_data <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> mysql          <span class="operator">|</span>  <span class="comment">-- CAST() 函数转格式</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>容易得知，<code>AES_ENCRYPT</code> <code>AES_DECRYPT</code> 互为反函数</p></blockquote><h1>6 获取 MySQL 相关信息</h1><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739190639244.png" alt=""></p><ul><li>MySQL 版本号</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> VERSION();</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> VERSION() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8.0</span><span class="number">.31</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>当前数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> DATABASE() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> dbtest1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>当前连接 MySQL 的用户名，返回结果格式为 <code>&quot;主机名@用户名&quot;</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">USER</span>(), <span class="built_in">CURRENT_USER</span>(), <span class="built_in">SYSTEM_USER</span>(), <span class="built_in">SESSION_USER</span>();</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">USER</span>()         <span class="operator">|</span> <span class="built_in">CURRENT_USER</span>() <span class="operator">|</span> <span class="built_in">SYSTEM_USER</span>()  <span class="operator">|</span> <span class="built_in">SESSION_USER</span>() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span> root<span class="variable">@localhost</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>字符集和比较规则</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CHARSET(<span class="string">&#x27;ABC&#x27;</span>), <span class="keyword">COLLATION</span>(<span class="string">&#x27;ABC&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> CHARSET(<span class="string">&#x27;ABC&#x27;</span>) <span class="operator">|</span> <span class="keyword">COLLATION</span>(<span class="string">&#x27;ABC&#x27;</span>)   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> utf8mb4        <span class="operator">|</span> utf8mb4_0900_ai_ci <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1>7 其他函数</h1><ul><li>格式化输出</li></ul><p><code>FORMAT(value, n)</code> ：返回对数字 <code>value</code> 进行格式化后的结果数据，<code>n</code>表示四舍五入保留到小数点后 <code>n</code> 位</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- n &lt;= 0 均表示保留整数</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> FORMAT(<span class="number">1.124</span>, <span class="number">2</span>), FORMAT(<span class="number">10.523</span>, <span class="number">0</span>), FORMAT(<span class="number">100.123</span>, <span class="number">-2</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> FORMAT(<span class="number">1.124</span>, <span class="number">2</span>) <span class="operator">|</span> FORMAT(<span class="number">10.523</span>, <span class="number">0</span>) <span class="operator">|</span> FORMAT(<span class="number">100.123</span>, <span class="number">-2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1.12</span>             <span class="operator">|</span> <span class="number">11</span>                <span class="operator">|</span> <span class="number">100</span>                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------------------+---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>IP 转换</li></ul><p><code>INET_ATON(ipvalue)</code> ：将以点分隔的IP地址转化为一个数字</p><p><code>INET_NTOA(value)</code> ：将数字形式的IP地址转化为以点分隔的IP地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> INET_ATON(<span class="string">&#x27;192.168.1.100&#x27;</span>) &quot;IP - Num&quot;, INET_NTOA(<span class="number">3232235876</span>) &quot;Num - IP&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> IP <span class="operator">-</span> Num   <span class="operator">|</span> Num <span class="operator">-</span> IP      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3232235876</span> <span class="operator">|</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># IP 按照 <span class="number">256</span> 进制计算: <span class="number">192</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">3</span> <span class="operator">+</span> <span class="number">168</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span> <span class="operator">*</span> <span class="number">256</span><span class="operator">^</span><span class="number">1</span> <span class="operator">+</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>重复执行</li></ul><p><code>BENCHMARK(n,expr)</code> ：将表达式 <code>expr</code> 重复执行n次。用于测试 MySQL 处理 <code>expr</code> 表达式所耗费的时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BENCHMARK(<span class="number">1000000</span>, MD5(<span class="string">&#x27;mysql&#x27;</span>)) &quot;Once&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> Once <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.25</span> sec) <span class="comment">-- 0.25 sec</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> BENCHMARK(<span class="number">10000000</span>, MD5(<span class="string">&#x27;mysql&#x27;</span>)) &quot;Many times&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> Many times <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">2.32</span> sec) <span class="comment">-- 2.32 sec</span></span><br></pre></td></tr></table></figure><ul><li>修改编码方式</li></ul><p><code>CONVERT(value USING char_code)</code> ：将 <code>value</code> 所使用的字符编码修改为 <code>char_code</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> CHARSET(<span class="string">&#x27;mysql&#x27;</span>) &quot;Origin&quot;, CHARSET(<span class="keyword">CONVERT</span>(<span class="string">&#x27;mysql&#x27;</span> <span class="keyword">USING</span> <span class="string">&#x27;utf8&#x27;</span>)) &quot;Convert to utf8&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> Origin  <span class="operator">|</span> <span class="keyword">Convert</span> <span class="keyword">to</span> utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> utf8mb4 <span class="operator">|</span> utf8mb3         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MySQL 提供的内置函数包括单行函数和聚合函数，这章讲解单行函数。单行函数：对行数据进行操作；输入参数，返回结果；对每行进行操作。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（3）：利用 torch.nn 便捷搭建神经网络</title>
    <link href="https://blog.iskage.online/posts/e6c3766c.html"/>
    <id>https://blog.iskage.online/posts/e6c3766c.html</id>
    <published>2025-02-10T08:32:00.000Z</published>
    <updated>2025-02-11T08:07:01.712Z</updated>
    
    <content type="html"><![CDATA[<p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的结构和功能，关注实践，理论较少。</p><p><code>nn</code> 模块是 Pytorch 提供的神经网络模块，可以快速便捷地搭建神经网络或神经网络里的各个层（layer）。</p><h1>1 利用 nn.Module 实现全连接层和多层感知机</h1><p>在实际应用中，我们往往继承类 <code>torch.nn.Module</code> ，然后便携自己的网络层。下面以实现全连接层作为简单引入。</p><h2 id="1-1-全连接层">1.1 全连接层</h2><p>全连接层可以简单理解为一个线性层，它接受输入的张量 <code>x.shape = (?, in_features)</code> 并返回结果 <code>y.shape = (?, out_features)</code> ，利用的就是简单的线性组合。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = W x + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mtext>in_features</mtext><mo>×</mo><mtext>out_features</mtext></mrow></msup></mrow><annotation encoding="application/x-tex">W \in \R^{\text{in\_features}\times\text{out\_features}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">in_features</span></span><span class="mbin mtight">×</span><span class="mord text mtight"><span class="mord mtight">out_features</span></span></span></span></span></span></span></span></span></span></span></span></span> 而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mtext>out_features</mtext></msup></mrow><annotation encoding="application/x-tex">b \in \R^{\text{out\_features}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">out_features</span></span></span></span></span></span></span></span></span></span></span></span></span>。</p><blockquote><p>注意：此处的乘是类似矩阵乘法，而【不是逐元素相乘】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 定义线性层 Linear 用来计算 y = W x + b &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Linear</span>(nn.Module):  <span class="comment"># 继承 nn.Module</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, out_features</span>):</span><br><span class="line">        <span class="comment"># in_features 输入的形状，out_features 输出的形状</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()  <span class="comment"># 等价于 nn.Module.__init__(self)</span></span><br><span class="line">        <span class="comment"># nn.Parameter 指定需要网络学习的参数</span></span><br><span class="line">        <span class="variable language_">self</span>.W = nn.Parameter(torch.randn(in_features, out_features))</span><br><span class="line">        <span class="variable language_">self</span>.b = nn.Parameter(torch.randn(out_features))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># 计算 y = xW + b : 利用了广播机制，b 会复制成 y 一般大小，即 (out_features,)</span></span><br><span class="line">        y = x @ <span class="variable language_">self</span>.W + <span class="variable language_">self</span>.b  <span class="comment"># @ 代表矩阵乘法</span></span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><ul><li>需要使用 <code>super()</code> 方法调用父类的 <code>__init__()</code> 方法。或者直接使用 <code>nn.Module.__init__(self)</code></li><li>注意在定义自己的 <code>__init__()</code> 时，需要声明参数。例如这里的 <code>in_features</code> 和 <code>out_features</code></li><li><code>in_features</code> 和 <code>out_features</code> 指定输入输出的形状</li><li><code>nn.Parameter()</code> 指定网络需要学习的参数，用来告诉网络之后需要更新的对象</li><li>注意参数的形状，需要满足 <code>(?, in_features) @ (in_features, out_features) -&gt; (?, out_features)</code> 这类似矩阵乘法，不过此处是张量</li></ul><p>调用上述定义的线性层/全连接层，检查维度是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用上述定义的线性层/全连接层，检查维度</span></span><br><span class="line">linear_layer = Linear(in_features=<span class="number">4</span>, out_features=<span class="number">3</span>)</span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">outputs = linear_layer(inputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 3]) : (2, 4) @ (4, 3) -&gt; (2, 3)</span></span><br></pre></td></tr></table></figure><p>使用 <code>.named_parameters()</code> 方法检查参数 <code>W, b</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, parameter <span class="keyword">in</span> linear_layer.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. It is parameter: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2.&quot;</span>, parameter)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3. The shape is: &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(parameter.shape))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上述检查参数的返回结果</span></span><br><span class="line">[Out]:  <span class="number">1.</span> It <span class="keyword">is</span> parameter: W</span><br><span class="line">        <span class="number">2.</span> Parameter containing:</span><br><span class="line">        tensor([[ <span class="number">1.1711</span>,  <span class="number">0.4335</span>, -<span class="number">1.7343</span>],</span><br><span class="line">                [-<span class="number">1.3360</span>,  <span class="number">0.8871</span>,  <span class="number">0.7680</span>],</span><br><span class="line">                [ <span class="number">0.0571</span>,  <span class="number">0.2240</span>,  <span class="number">0.5520</span>],</span><br><span class="line">                [-<span class="number">0.5788</span>,  <span class="number">0.0177</span>,  <span class="number">0.1318</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">        <span class="number">3.</span> The shape <span class="keyword">is</span>: torch.Size([<span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        <span class="number">1.</span> It <span class="keyword">is</span> parameter: b</span><br><span class="line">        <span class="number">2.</span> Parameter containing:</span><br><span class="line">        tensor([ <span class="number">1.0198</span>, -<span class="number">0.4468</span>,  <span class="number">0.4520</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">        <span class="number">3.</span> The shape <span class="keyword">is</span>: torch.Size([<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="1-2-多层感知机">1.2 多层感知机</h2><p>由多个线性层/全连接层通过某些激活函数构成的网络，称为多层感知机。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739156093597.png" alt=""></p><p>根据上图的网络结构搭建多层感知机：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiPerceptron</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, hidden_features, out_features</span>):</span><br><span class="line">        <span class="comment"># 新增参数：隐藏层神经元个数（形状）</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 直接使用之前定义的线性层/全连接层 Linear</span></span><br><span class="line">        <span class="variable language_">self</span>.layer1 = Linear(in_features, hidden_features) </span><br><span class="line">        <span class="variable language_">self</span>.layer2 = Linear(hidden_features, out_features)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.layer1(x)</span><br><span class="line">        x = torch.sigmoid(x)  <span class="comment"># 使用激活函数，增加非线性因素（此处是逐个元素计算）</span></span><br><span class="line">        y = <span class="variable language_">self</span>.layer2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><ul><li>之前定义的层 Layer 可以在后续重复使用</li><li>注意传入参数，用以确认形状</li></ul><p>调用上述定义的多层感知机，检查维度是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查维度</span></span><br><span class="line">mlp = MultiPerceptron(<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">outputs = mlp(inputs)</span><br><span class="line"><span class="built_in">print</span>(outputs.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 1]) ： (2, 3) @ (3, 4) @ (4, 1) -&gt; (2, 1)</span></span><br></pre></td></tr></table></figure><p>检查参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查参数</span></span><br><span class="line"><span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(name, param.size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># layer1.W torch.Size([3, 4])</span></span><br><span class="line"><span class="comment"># layer1.b torch.Size([4])</span></span><br><span class="line"><span class="comment"># layer2.W torch.Size([4, 1])</span></span><br><span class="line"><span class="comment"># layer2.b torch.Size([1])</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意输入形状】输入的形状一般为 <code>(?, in_features)</code> 其中 <code>?</code> 一般为 <code>batch_size</code> 即样本集个数。</p><p>当输入单一数据时，即只输入一个样本时，需要扩展维度，利用<a href="https://blog.iskage.online/posts/652f5539.html#8-3-%E7%BB%B4%E5%BA%A6%E5%8E%8B%E7%BC%A9%E3%80%81%E6%89%A9%E5%B1%95%E3%80%81%E6%8B%BC%E6%8E%A5-squeeze-unsqueeze-cat">第一章</a>介绍的 <code>unsqueeze()</code> 函数。向前扩展一个维度 <code>tensor.unsqueeze(0)</code> ，例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># batch_size = 1</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>)</span><br><span class="line">x.unsqueeze_(<span class="number">0</span>)  <span class="comment"># 需要向前扩展 1 个维度 （`_` 表示 inplace 操作，直接替换 x）</span></span><br><span class="line">y = mlp(x)</span><br><span class="line"><span class="built_in">print</span>(y.shape)  <span class="comment"># 正确 torch.Size([1, 1])</span></span><br></pre></td></tr></table></figure><p>总结：Pytorch 的 nn 封装了非常多网络层，可以直接前往<a href="https://pytorch.org/docs/stable/nn.html">官方文档</a>查看。下面介绍常见的网络层。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739157306136.png" alt=""></p><h1>2 常见神经网络层</h1><h2 id="2-1-以图像处理为例">2.1 以图像处理为例</h2><p>图像相关层主要包括：卷积层 <code>Conv</code>、池化层 <code>Pool</code> 等。往往还有不同维度图像处理的分类，同时池化方法也有最大池化、均值池化等。</p><blockquote><p>建议先学习卷积的原理，参考课程</p><p>中文，更专业：b站 <a href="https://www.bilibili.com/video/BV1L64y1m7Nh/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【19 卷积层【动手学深度学习v2】】</a></p><p>中文，更易懂：b站 <a href="https://www.bilibili.com/video/BV1K7411W7So/?p=5&amp;share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【【子豪兄】精讲CS231N斯坦福计算机视觉公开课（2020最新）】</a></p><p>英文，更专业：<a href="https://cs231n.stanford.edu/">cs231n</a></p></blockquote><h3 id="2-1-1-卷积层">2.1.1 卷积层</h3><p>图像处理相关的神经网络层，最最重要的就是卷积层。以 <code>Conv2d</code> 为例，介绍里面的参数和使用方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias, padding_mode)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_channels: 输入</span></span><br><span class="line">- in_channels (<span class="built_in">int</span>) – 图片的通道数，例如RGB图片就是 <span class="number">3</span> 通道，灰度图只有 <span class="number">1</span> 通道</span><br><span class="line"></span><br><span class="line"><span class="comment"># out_channels: 输出</span></span><br><span class="line">- out_channels (<span class="built_in">int</span>) – 输出结果的通道数</span><br><span class="line"></span><br><span class="line"><span class="comment"># kernel_size: 卷积核的大小</span></span><br><span class="line">- kernel_size (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>) – 卷积核的大小，只需输入T 则会自动生成一个 (T, T, channels) 大小的卷积核</span><br><span class="line"></span><br><span class="line"><span class="comment"># stride: 步数</span></span><br><span class="line">- stride (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 卷积核每次移动的步数，默认为 <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding: 填充层数</span></span><br><span class="line">- padding (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 填充层数，用以维持图片大小的参数，默认为 <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># padding_mode: 填充方式</span></span><br><span class="line">- padding_mode (string, optional) – 填充方式，一般默认即可，有 <span class="string">&#x27;zeros&#x27;</span>, <span class="string">&#x27;reflect&#x27;</span>, <span class="string">&#x27;replicate&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;circular&#x27;</span> 多种选择，默认为 <span class="string">&#x27;zeros&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dilation: 卷积核中元素的对应位置</span></span><br><span class="line">- dilation (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">tuple</span>, optional) – 默认为 <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># groups: 可选</span></span><br><span class="line">- groups (<span class="built_in">int</span>, optional) – Number of blocked connections <span class="keyword">from</span> <span class="built_in">input</span> channels to output channels. Default: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bias: 可选</span></span><br><span class="line">- bias (<span class="built_in">bool</span>, optional) – 是否增加偏倚项，默认为 <span class="literal">True</span> : If <span class="literal">True</span>, adds a learnable bias to the output. Default: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>如果希望卷积后，通道变多，但尺寸不变，则需要填充 <code>padding</code> ，公式</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88110036714.png" alt=""></p><p>卷积过程的动画展示可参考 <a href="https://github.com/vdumoulin/conv_arithmetic">https://github.com/vdumoulin/conv_arithmetic</a></p><p>原理简单理解【卷积】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88101819072.png" alt=""></p><p>原理简单理解【padding】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240731%E4%B8%8A%E5%8D%88102514146.png" alt=""></p><h3 id="2-1-2-代码：使用卷积层">2.1.2 代码：使用卷积层</h3><p>导入库，进行图片处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.transforms <span class="keyword">import</span> ToTensor, ToPILImage</span><br><span class="line"></span><br><span class="line">to_tensor = ToTensor()  <span class="comment"># img -&gt; Tensor</span></span><br><span class="line">to_pil = ToPILImage()  <span class="comment"># Tensor -&gt; PIL</span></span><br></pre></td></tr></table></figure><p>选择一张图片（图源网络）点此下载 <a href="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena.png">lena’s photo</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example = Image.<span class="built_in">open</span>(<span class="string">&#x27;imgs/lena.png&#x27;</span>)</span><br><span class="line">example <span class="comment"># 可视化输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena.png" alt="lena"></p><p>查看输入图片形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example = to_tensor(example).unsqueeze(<span class="number">0</span>)  <span class="comment"># 补充 batch_size</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Input Size:&quot;</span>,example.size()) <span class="comment"># 查看 input 维度</span></span><br><span class="line"><span class="comment"># Input Size: torch.Size([1, 1, 200, 200])</span></span><br></pre></td></tr></table></figure><p>查看卷积后输出图片形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conv = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">1</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">out = conv(example)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Output Size:&quot;</span>,out.size())</span><br><span class="line"><span class="comment"># Output Size: torch.Size([1, 1, 198, 198])</span></span><br><span class="line"><span class="comment"># 198 = (200 + 2 * 0 - 3 )/1 + 1 = 198</span></span><br></pre></td></tr></table></figure><p>以图片形式输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>))  <span class="comment"># 去除 batch_size 转换为图片输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_conv.png" alt="lena_conv"></p><blockquote><p>拓展：指定卷积核</p></blockquote><p>指定卷积核可以达到不同的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拓展：指定卷积核</span></span><br><span class="line">kernel = torch.tensor([</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>],</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>],</span><br><span class="line">    [<span class="number">1.</span>, <span class="number">0.</span>, -<span class="number">1.</span>]</span><br><span class="line">], dtype=torch.float32)  <span class="comment"># 提取竖直边缘特征</span></span><br><span class="line"></span><br><span class="line">conv = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>), stride=<span class="number">1</span>, padding=<span class="number">0</span>, bias=<span class="literal">False</span>)</span><br><span class="line">conv.weight.data = kernel.view(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># (batch_size, in_channels, height, width)</span></span><br><span class="line"></span><br><span class="line">out = conv(example)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Output Size:&quot;</span>, out.size())  <span class="comment"># torch.Size([1, 1, 198, 198])</span></span><br><span class="line"></span><br><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>))  <span class="comment"># 去除 batch_size 转换为图片输出</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_kernel.png" alt="lena_conv_with_certain_kernel"></p><h3 id="2-1-3-池化层">2.1.3 池化层</h3><p>池化层模糊选取某些特征，某些意义上可以防止过拟合。以最大池化为例，他选取范围内最大值替换整个范围。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.MaxPool2d(kernel_size, stride=<span class="literal">None</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, return_indices=<span class="literal">False</span>, ceil_mode=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取最大值的窗口</span></span><br><span class="line">- kernel_size – the size of the window to take a <span class="built_in">max</span> over</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横向纵向的步长，default = kernel_size</span></span><br><span class="line">- stride – the stride of the window. Default value <span class="keyword">is</span> kernel_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充图像边缘</span></span><br><span class="line">- padding – implicit zero padding to be added on both sides</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空洞</span></span><br><span class="line">- dilation – a parameter that controls the stride of elements <span class="keyword">in</span> the window</span><br><span class="line"></span><br><span class="line">- return_indices – <span class="keyword">if</span> <span class="literal">True</span>, will <span class="keyword">return</span> the <span class="built_in">max</span> indices along <span class="keyword">with</span> the outputs. Useful <span class="keyword">for</span> torch.nn.MaxUnpool2d later</span><br><span class="line"></span><br><span class="line"><span class="comment"># floor向下取整 ceil向上取整，例如ceil_mode = True，保留超出部分</span></span><br><span class="line">- ceil_mode – when <span class="literal">True</span>, will use ceil instead of floor to compute the output shape</span><br></pre></td></tr></table></figure><p>结合下图例理解最大池化原理</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/image-20240804%E4%B8%8B%E5%8D%8832249522.png" alt=""></p><p>代码实现上述案例，进行验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"></span><br><span class="line">inputs = torch.tensor([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, ],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, ],</span><br><span class="line">], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 batch_size，1 通道，5x5 大小，-1 表示自动计算</span></span><br><span class="line">inputs = torch.reshape(inputs, (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络</span></span><br><span class="line">max_pool = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">output = max_pool(inputs)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Out]: tensor([[[[<span class="number">3.</span>, <span class="number">2.</span>],</span><br><span class="line">                 [<span class="number">5.</span>, <span class="number">1.</span>]]]])  <span class="comment"># 确实与手算结果相同</span></span><br></pre></td></tr></table></figure><blockquote><p>根据池化原理，只是做了简单的取值替换，故【没有可学习的参数】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(max_pool.parameters())</span><br><span class="line">[Out]: []</span><br></pre></td></tr></table></figure><h3 id="2-1-4-代码：使用池化层">2.1.4 代码：使用池化层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out = max_pool(example)</span><br><span class="line">to_pil(out.data.squeeze(<span class="number">0</span>)) <span class="comment"># 输出池化后的lena</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/lena_pool.png" alt="lena_max_pool"></p><p>容易发现，经过最大池化后，图片变小，变模糊。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out.shape</span><br><span class="line"><span class="comment"># torch.Size([1, 1, 67, 67])</span></span><br></pre></td></tr></table></figure><h2 id="2-2-其他常见层">2.2 其他常见层</h2><h3 id="2-2-1-线性层-全连接层">2.2.1 线性层/全连接层</h3><p><code>nn.Linear</code> 层提供了类似计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = Wx+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性层</span></span><br><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">linear_out = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">out = linear_out(inputs)</span><br><span class="line">out.shape</span><br><span class="line"><span class="comment"># torch.Size([2, 4]) : (2, 3) @ (3, 4) -&gt; (2, 4) where 2 is batch_size</span></span><br></pre></td></tr></table></figure><p>更多可参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#1-Linear">Pytorch 搭建神经网络（2）网络搭建 - 线性层</a></p><h3 id="2-2-2-批量归一化层">2.2.2 批量归一化层</h3><p><code>nn.BatchNorm1d</code> 层提供对 1 维数据进行归一化，填入的参数为特征数（例如上一个输出的维度）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc = nn.Linear(<span class="number">256</span>, <span class="number">512</span>)</span><br><span class="line">        <span class="variable language_">self</span>.bn = nn.BatchNorm1d(<span class="number">512</span>)  <span class="comment"># 全连接层后接BatchNorm1d</span></span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.bn(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>更多可参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#7-%E6%AD%A3%E5%88%99%E5%8C%96%E5%B1%82">Pytorch 搭建神经网络（2）网络搭建 - 正则化层</a></p><h3 id="2-2-3-Dropout-层">2.2.3 Dropout 层</h3><p><code>nn.Dropout</code> 层用于防止过拟合，按照概率遗弃一些神经元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">784</span>, <span class="number">128</span>)</span><br><span class="line">        <span class="variable language_">self</span>.dropout = nn.Dropout(<span class="number">0.5</span>)  <span class="comment"># 以 0.5 的概率遗弃</span></span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">128</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.dropout(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="2-3-循环神经网络">2.3 循环神经网络</h2><p>PyTorch 中提供了最常用的三种循环神经网络：<code>RNN</code>、<code>LSTM</code> 和 <code>GRU</code> 。</p><p>推荐学习 <a href="https://zh-v2.d2l.ai/chapter_recurrent-neural-networks/index.html">《动手学深度学习》</a> 中关于循环神经网络的知识，十分详细。也可结合李沐老师的讲解[b站连接](【54 循环神经网络 RNN【动手学深度学习v2】】 <a href="https://www.bilibili.com/video/BV1D64y1z7CA/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">https://www.bilibili.com/video/BV1D64y1z7CA/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2</a>)</p><h2 id="3-激活函数">3 激活函数</h2><p>激活函数可以为模型加入非线性性。</p><p>这部分可以参见 <a href="https://blog.iskage.online/posts/ae1c954d.html#6-%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%BF%80%E6%B4%BB%EF%BC%88%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%89">Pytorch 搭建神经网络（2）网络搭建 - 激活函数</a></p><h2 id="4-前馈传播网络的便捷构建">4 前馈传播网络的便捷构建</h2><p>上述的网络结构均为：前一层的输出是下一层的输入。这样的网络结构称为<strong>前馈传播网络</strong>（Feedforward Neural Network，FFN）。</p><p>针对这样的网络结构，可以使用 <code>ModuleList</code> 和 <code>Sequential</code> 来组合各个层。</p><h3 id="4-1-Sequential">4.1 Sequential</h3><p>使用 <code>Sequential</code> 的三种方法：将卷积层、归一化层和激活函数层组合成一个网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法一</span></span><br><span class="line">net1 = nn.Sequential()</span><br><span class="line">net1.add_module(<span class="string">&#x27;conv&#x27;</span>, nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">net1.add_module(<span class="string">&#x27;batchnorm&#x27;</span>, nn.BatchNorm2d(<span class="number">3</span>))</span><br><span class="line">net1.add_module(<span class="string">&#x27;relu&#x27;</span>, nn.ReLU())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net1:&#x27;</span>, net1)</span><br><span class="line"><span class="comment"># net1: Sequential(</span></span><br><span class="line"><span class="comment">#   (conv): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (batchnorm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (relu): ReLU()</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法二</span></span><br><span class="line">net2 = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">    nn.BatchNorm2d(<span class="number">3</span>),</span><br><span class="line">    nn.ReLU()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net2:&#x27;</span>, net2)</span><br><span class="line"><span class="comment"># net2: Sequential(</span></span><br><span class="line"><span class="comment">#   (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (1): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (2): ReLU()</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 法三</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">net3 = nn.Sequential(OrderedDict([</span><br><span class="line">    (<span class="string">&#x27;conv&#x27;</span>, nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)),</span><br><span class="line">    (<span class="string">&#x27;batchnorm&#x27;</span>, nn.BatchNorm2d(<span class="number">3</span>)),</span><br><span class="line">    (<span class="string">&#x27;relu&#x27;</span>, nn.ReLU())</span><br><span class="line">]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;net3:&#x27;</span>, net3)</span><br><span class="line"><span class="comment"># net3: Sequential(</span></span><br><span class="line"><span class="comment">#   (conv): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (batchnorm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"><span class="comment">#   (relu): ReLU()</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure><ul><li>可以根据名字和序号取出对应的层</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">net1.conv</span><br><span class="line"><span class="comment"># Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1))</span></span><br><span class="line"></span><br><span class="line">net2[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)</span></span><br><span class="line"></span><br><span class="line">net3.relu</span><br><span class="line"><span class="comment"># ReLU()</span></span><br></pre></td></tr></table></figure><h3 id="4-2-ModuleList">4.2 ModuleList</h3><p>使用 <code>nn.ModuleList</code> 连接三个层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model_list = nn.ModuleList([nn.Linear(<span class="number">3</span>,<span class="number">4</span>), nn.ReLU(), nn.Linear(<span class="number">4</span>,<span class="number">2</span>)])</span><br><span class="line">inputs = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> model_list:</span><br><span class="line">    inputs = model(inputs)  <span class="comment"># 一步一步执行，相当于前向传播 forward</span></span><br><span class="line">inputs.shape</span><br><span class="line"><span class="comment"># torch.Size([1, 2])</span></span><br></pre></td></tr></table></figure><blockquote><p>不可以直接调用 <code>modellist(inputs)</code> ，因为没有定义前向传播</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputs = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">output = modellist(inputs)  <span class="comment"># 报错，没有定义 forward 函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NotImplementedError: Module [ModuleList] is missing the required &quot;forward&quot; function</span></span><br></pre></td></tr></table></figure><blockquote><p>【不能直接使用 list 类型】必须使用 <code>nn.ModuleList</code> 连接各个层，直接使用 <code>list</code> 类型是无法继承 <code>nn.Module</code> 从而无法被识别</p></blockquote><h2 id="5-损失函数">5 损失函数</h2><p>Pytorch 提供简单计算损失的函数，例如均方误差、交叉熵损失等。</p><ul><li>均方误差损失 <code>nn.MSELoss()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成预测值和真实值</span></span><br><span class="line">y_pred = torch.randn(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">y_real = torch.randn(<span class="number">4</span>).squeeze(-<span class="number">1</span>)  <span class="comment"># 将 y_real 的形状调整为 (4, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 MSE 损失函数</span></span><br><span class="line">mse = nn.MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失</span></span><br><span class="line">loss = mse(y_pred, y_real)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(loss)  <span class="comment"># tensor(1.2719)</span></span><br></pre></td></tr></table></figure><ul><li>交叉熵损失 <code>nn.CrossEntropyLoss()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># batch_size=4，即这一组共 4 个样本，类别为 2</span></span><br><span class="line">score = torch.randn(<span class="number">4</span>, <span class="number">2</span>)  <span class="comment"># 4 个样本，每个样本对应 2 个数值，代表属于第 0 or 1 类的概率</span></span><br><span class="line"><span class="comment"># 假设 4 个样本的真实类为：1, 0, 1, 1 </span></span><br><span class="line">label = torch.Tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]).long()  <span class="comment"># label 必须为 LongTensor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉熵损失 CrossEntropyLoss （常用与计算分类问题的损失）</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">loss = criterion(score, label)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(loss)  <span class="comment"># tensor(0.5944)</span></span><br></pre></td></tr></table></figure><h2 id="6-nn-functional-模块">6 nn.functional 模块</h2><p>使用 <code>nn.Module</code> 实现的层是一个特殊的类，其由 <code>class layer(nn.Module)</code> 定义，会自动提取可学习的参数；使用<code>nn.functional</code>实现的层更像是纯函数，由<code>def function(input)</code>定义。</p><p>也就是说，当这一层无需学习参数时，使用 <code>nn.functional</code> 是合理的。</p><h3 id="6-1-使用-nn-functional-的函数">6.1 使用 nn.functional 的函数</h3><p>以 <code>nn.functional.linear()</code> 为例，其他函数可参考官网 <a href="https://pytorch.org/docs/stable/nn.functional.html">https://pytorch.org/docs/stable/nn.functional.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.functional.linear(<span class="built_in">input</span>, weight, bias=<span class="literal">None</span>) -&gt; Tensor</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">input</span>: (batch_size, in_features)</span><br><span class="line">输入值，需要为 tensor</span><br><span class="line"></span><br><span class="line">- weight: (in_features, out_features)</span><br><span class="line">权重，需要为 tensor</span><br><span class="line"></span><br><span class="line">- bias: (out_features) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line">偏倚，需要为 tensor，或者为空</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">inputs = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 使用 nn.Module</span></span><br><span class="line">model = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">output1 = model(inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 使用 nn.functional</span></span><br><span class="line">output2 = nn.functional.linear(inputs, model.weight, model.bias)  <span class="comment"># 这里使用与 1 相同的参数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output1)</span><br><span class="line"><span class="built_in">print</span>(output2)</span><br><span class="line"><span class="comment"># 二者值完全一样</span></span><br></pre></td></tr></table></figure><h3 id="6-2-nn-Module-和-nn-functional-结合使用">6.2 nn.Module 和 nn.functional 结合使用</h3><ul><li>如果模型具有可学习的参数，最好用 <code>nn.Module</code></li><li>否则既可以使用 <code>nn.functional</code>，也可以使用 <code>nn.Module</code></li></ul><blockquote><p>例如：激活函数、池化层没有可学习参数，可以使用对应的 <code>functional</code> 函数代替。而卷积层、线性层/全连接层需要学习参数，所以使用 <code>nn.Module</code></p><p>【推荐】dropout 虽然无参数学习，但推荐使用 <code>nn.Module</code></p></blockquote><p>例：混合使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 混合使用</span></span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 不需要声明那些没有参数学习的层：池化等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.max_pool2d(F.relu(<span class="variable language_">self</span>.conv1(x)), <span class="number">2</span>)  <span class="comment"># 池化直接写在前向传播里即可</span></span><br><span class="line">        x = F.max_pool2d(F.relu(<span class="variable language_">self</span>.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)  <span class="comment"># 计算池化后的大小</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">x = torch.randn(<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)  <span class="comment"># batch_size=64, channels=3, height=32, width=32</span></span><br><span class="line">model = myNet()</span><br><span class="line">out = model(x)</span><br><span class="line"><span class="built_in">print</span>(out.shape)  <span class="comment"># torch.Size([64, 10])</span></span><br></pre></td></tr></table></figure><h2 id="7-优化器">7 优化器</h2><p>PyTorch 将提供常用的优化方法，这些方法全部封装在 <code>torch.optim</code> 中</p><p>以 [1.2 多层感知机](#1.2 多层感知机) 为例，首先构建网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiPerceptron</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_features, hidden_features, out_features</span>):</span><br><span class="line">        <span class="comment"># 新增参数：隐藏层神经元个数（形状）</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 直接使用之前定义的线性层/全连接层 Linear</span></span><br><span class="line">        <span class="variable language_">self</span>.layer1 = Linear(in_features, hidden_features)</span><br><span class="line">        <span class="variable language_">self</span>.layer2 = Linear(hidden_features, out_features)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.layer1(x)</span><br><span class="line">        x = torch.sigmoid(x)  <span class="comment"># 使用激活函数，增加非线性因素（此处是逐个元素计算）</span></span><br><span class="line">        y = <span class="variable language_">self</span>.layer2(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p>然后实例化网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in_features=3, hidden_features=4, out_features=1</span></span><br><span class="line">mlp = MultiPerceptron(<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>设置优化器和学习率（使用随机梯度下降优化器 SGD）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置优化器和学习率</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为网络设置学习率，使用随机梯度下降优化器 SGD</span></span><br><span class="line">optimizer = optim.SGD(params=mlp.parameters(), lr=learning_rate)  <span class="comment"># 【重点】</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面就是网络的训练过程，这里我们只模仿更新一次</span></span><br><span class="line">optimizer.zero_grad()  <span class="comment"># 梯度清零，因为梯度累计效应</span></span><br><span class="line"></span><br><span class="line">inputs = torch.randn(<span class="number">32</span>, <span class="number">3</span>)  <span class="comment"># batch_size=32, in_features=3</span></span><br><span class="line">output = mlp(inputs)</span><br><span class="line">output.backward(output)  <span class="comment"># fake backward</span></span><br><span class="line"></span><br><span class="line">optimizer.step()  <span class="comment"># 执行优化</span></span><br></pre></td></tr></table></figure><blockquote><p>如果想为不同参数设置不同学习率</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为不同的参数分别设置不同的学习率</span></span><br><span class="line">weight_params = [param <span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters() <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.W&#x27;</span>)]</span><br><span class="line">bias_params = [param <span class="keyword">for</span> name, param <span class="keyword">in</span> mlp.named_parameters() <span class="keyword">if</span> name.endswith(<span class="string">&#x27;.b&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD([</span><br><span class="line">    &#123;<span class="string">&#x27;params&#x27;</span>: bias_params&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;params&#x27;</span>: weight_params, <span class="string">&#x27;lr&#x27;</span>: <span class="number">1e-2</span>&#125;</span><br><span class="line">], lr=<span class="number">1e-5</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的结构和功能，关注实践，理论较少。nn 模块是 Pytorch 提供的神经网络模块，可以快速便捷地搭建神经网络或神经网络里的各个层（layer）。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（5）多表查询</title>
    <link href="https://blog.iskage.online/posts/b4103c0f.html"/>
    <id>https://blog.iskage.online/posts/b4103c0f.html</id>
    <published>2025-02-09T06:43:00.000Z</published>
    <updated>2025-02-19T11:26:45.957Z</updated>
    
    <content type="html"><![CDATA[<h1>多表查询</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>多表查询，关联查询，指对多个表进行查询。</p><blockquote><p>前提：被查询的多表之间存在联系，即存在关键字段、相同字段（例如：外键）</p></blockquote><h1>1 笛卡尔积</h1><h2 id="1-1-错误的查询">1.1 错误的查询</h2><p>如果直接查询，则会出现<strong>笛卡尔积错误</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br><span class="line"># <span class="number">2889</span> <span class="keyword">rows</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(last_name) <span class="keyword">FROM</span> employees;  <span class="comment">-- 107 rows</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(department_name) <span class="keyword">FROM</span> departments;  <span class="comment">-- 27 rows</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">107</span> <span class="operator">*</span> <span class="number">27</span>;  <span class="comment">-- 2889</span></span><br></pre></td></tr></table></figure><p>即将两个表的所有行进行了组合，将所有非重复组合一同输出。</p><h2 id="1-2-笛卡尔积">1.2 笛卡尔积</h2><p><strong>定义</strong>：对于集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding="application/x-tex">A,\ B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 称由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>B</mi></mrow><annotation encoding="application/x-tex">A,\ B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 则称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 的笛卡尔积是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 的所有可能组合。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>=</mo><mrow><mo fence="true">{</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">∣</mi><mtext> </mtext><mi>a</mi><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mtext> </mtext><mi>b</mi><mo>∈</mo><mi>B</mi><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">A \times B = \left\{ (a,\ b)\ |\ a \in A,\ b \in B \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">∣</span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span></p><p>则容易得知新的集合元素个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>A</mi><mi mathvariant="normal">∣</mi><mo>×</mo><mi mathvariant="normal">∣</mi><mi>B</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|A| \times |B|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|\cdot|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span></span></span></span> 表示元素个数。</p><h2 id="1-3-CROSS-JOIN-交叉连接">1.3 <code>CROSS JOIN</code> 交叉连接</h2><p>笛卡尔积也称为<strong>交叉连接</strong>，可以使用 <code>CROSS JOIN</code> <code>INNER JOIN</code> <code>JOIN</code>链接二表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">JOIN</span> departments;</span><br></pre></td></tr></table></figure><blockquote><p>不通过 <code>WHERE</code> 或 <code>ON</code> 添加条件，则会出现笛卡尔积错误</p></blockquote><h2 id="1-4-WHERE-加入链接条件">1.4 <code>WHERE</code> 加入链接条件</h2><p>为了避免笛卡尔积， 可以<strong>在</strong> <code>WHERE</code> 加入有效的连接条件。格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 表<span class="number">1.</span>列名, 表<span class="number">1.</span>列名</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span>, 表<span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> 表<span class="number">1.</span>列名<span class="number">1</span> <span class="operator">=</span> 表<span class="number">2.</span>列名<span class="number">2</span>;  <span class="comment">-- 有效的连接条件</span></span><br></pre></td></tr></table></figure><ul><li>例：根据部门 id 筛选</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">WHERE</span> 加入条件</span><br><span class="line"><span class="keyword">SELECT</span> employees.last_name, departments.department_name, employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br></pre></td></tr></table></figure><blockquote><p>在表中有相同列时，在列名之前加上表名前缀。【推荐使用，方便标注各表各列】</p></blockquote><h1>2 多表查询概念</h1><h2 id="2-1-等值连接-非等值连接">2.1 等值连接 &amp; 非等值连接</h2><h3 id="2-1-1-键的类型">2.1.1 键的类型</h3><blockquote><p>主键 <code>PRI</code> &amp; 唯一标识 <code>UNI</code> &amp; 外键 <code>MUL</code></p></blockquote><p>在SQL中，<code>key</code> 是用于标识表中列的属性，常见的类型包括 <code>PRI</code>、<code>MUL</code> 和 <code>UNI</code>。这些属性描述了列在表中的角色和约束。以下是它们的详细区别：</p><ul><li><code>PRI</code> (Primary Key)：表示该列为表的主键。</li></ul><p>值唯一，不能有重复；不为空；唯一标识；可作为唯一索引；</p><ul><li><code>UNI</code> (Unique Key)：表示该列具有唯一约束。</li></ul><p>值唯一，不能有重复；允许空值；也可作为唯一索引；</p><ul><li><code>MUL</code> (Multiple)：表示该列是外键或普通索引。</li></ul><p>非唯一性，值可以重复；如果该列是外键，它引用另一个表的主键或唯一键；</p><p>使用 <code>DESC</code> 查询表的属性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739081118663.png" alt=""></p><h3 id="2-1-2-等值连接">2.1.2 等值连接</h3><p>一般通过外键寻找另一个表的唯一索引（<code>PRI</code> 或 <code>UNI</code>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据 job_id 外键连接 jobs 表的 job_title</span></span><br><span class="line"><span class="keyword">SELECT</span> employees.last_name, jobs.job_title, employees.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees, jobs</span><br><span class="line"><span class="keyword">WHERE</span> employees.job_id <span class="operator">=</span> jobs.job_id;</span><br></pre></td></tr></table></figure><ul><li>多个条件 <code>AND</code> 连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.last_name, departments.department_name, employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id <span class="keyword">AND</span> departments.department_name <span class="operator">=</span> <span class="string">&#x27;Shipping&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>多个表中有相同列时，必须在列名之前加上表名前缀</li></ul><p>【推荐使用，方便标注各表各列，提高查询效率】</p><ul><li>使用别名可以简化查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e, departments <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><blockquote><p>一但使用了别名，这一个语句中必须使用别名替代</p></blockquote><ul><li>连接多个表</li></ul><p>例如：展示员工 <code>last_name, department_name, city</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, lc.city</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e,</span><br><span class="line">     departments <span class="keyword">as</span> d,</span><br><span class="line">     locations <span class="keyword">as</span> lc</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">  <span class="keyword">AND</span> d.location_id <span class="operator">=</span> lc.location_id;</span><br></pre></td></tr></table></figure><blockquote><p>连接 N 个表，至少需要 N-1 个条件</p></blockquote><h3 id="2-1-3-非等值连接">2.1.3 非等值连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, j.grade_level <span class="keyword">AS</span> GRADE</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e,</span><br><span class="line">     job_grades <span class="keyword">AS</span> j</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="keyword">BETWEEN</span> j.lowest_sal <span class="keyword">AND</span> j.highest_sal  <span class="comment">-- 按工资分档</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;  <span class="comment">-- 按照工资排序</span></span><br></pre></td></tr></table></figure><h2 id="2-2-自连接-非自连接">2.2 自连接 &amp; 非自连接</h2><p>使用别名的方式把 <strong>1</strong> 张表虚拟成 <strong>2</strong> 张表，而后两表可以进行内连接和外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(worker.last_name, <span class="string">&#x27; works for &#x27;</span></span><br><span class="line">           , manager.last_name) <span class="keyword">AS</span> relationship <span class="comment">-- 连接为长字符串</span></span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> worker,</span><br><span class="line">     employees <span class="keyword">AS</span> manager</span><br><span class="line"><span class="keyword">WHERE</span> worker.manager_id <span class="operator">=</span> manager.employee_id;</span><br></pre></td></tr></table></figure><blockquote><p>将 employees 表虚拟为 表 worker 和 manager，然后自连接</p></blockquote><h2 id="2-3-内连接-外连接">2.3 内连接 &amp; 外连接</h2><ul><li>内连接：合并的表存在联系，即存在相同列。结果中<strong>不包含一个表与另一个表不匹配的行</strong></li></ul><p>内连接使用 <code>INNER JOIN</code></p><ul><li>外连接：两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回不满足条件的行</strong></li></ul><p>外连接使用 <code>LEFT JOIN</code> <code>RIGHT JOIN</code>，特别地，对 MySQL 而言全外连接需要使用 <code>UNION</code> 方法</p><blockquote><p>不满足条件的行 —— 相应的列为空 <code>NULL</code></p><p>当返回不满足条件的行来自<u>左表</u>时，则为<u>左外连接</u>，左边的表也称为<u>主表</u> ，右边的表称为<u>从表</u></p><p>当返回不满足条件的行来自<u>右表</u>时，则为<u>右外连接</u>，右边的表也称为<u>主表</u> ，左边的表称为<u>从表</u></p></blockquote><h1>3 多表查询代码</h1><p>使用 <code>SQL99</code> 语法实现</p><h2 id="3-1-基础语法-JOIN-ON">3.1 基础语法 <code>JOIN ON</code></h2><p>标准格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column, </span><br><span class="line">   table2.column,</span><br><span class="line">   table3.column</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2 </span><br><span class="line"><span class="keyword">ON</span> table1 和 table2 的连接条件</span><br><span class="line">    <span class="keyword">JOIN</span> table3 </span><br><span class="line">        <span class="keyword">ON</span> table2 和 table3 的连接条件</span><br></pre></td></tr></table></figure><ul><li>各个条件相互独立</li><li>使用 <code>JOIN</code> <code>CROSS JOIN</code> <code>INNER JOIN</code> 含义相同，均代表内连接</li></ul><p>下面看具体内连接案例：</p><h2 id="3-2-内连接">3.2 内连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column,</span><br><span class="line">       table2.column,</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：查询 <code>last_name, department_name, city</code> 员工为 <code>'Chen'</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, d.department_name, lc.city</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">         <span class="keyword">JOIN</span> locations lc</span><br><span class="line">              <span class="keyword">ON</span> d.location_id <span class="operator">=</span> lc.location_id;</span><br><span class="line"><span class="keyword">WHERE</span> e.last_name <span class="operator">=</span> <span class="string">&#x27;Chen&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;&gt;</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> city    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="operator">|</span> Chen      <span class="operator">|</span> Finance         <span class="operator">|</span> Seattle <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="3-3-外连接">3.3 外连接</h2><h3 id="3-3-1-左外连接-LEFT-JOIN-ON">3.3.1 左外连接 <code>LEFT JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- A 为主表，B 表向 A 表插入</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：<code>employees</code> 表中 <code>Grant</code> 对应 <code>department_id</code> 为 <code>NULL</code> 故在表 <code>departments</code> 检索不到</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.department_id, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                         <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739087518109.png" alt=""></p><h3 id="3-3-2-右外连接-RIGHT-JOIN-ON">3.3.2 右外连接 <code>RIGHT JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- B 为主表，A 表向 B 表插入</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><ul><li>例：<code>employees</code> 表中没有处于 <code>departments</code> 表中 <code>Treasury</code> 部门的，故向 <code>departments</code> 插入时补空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.department_name, e.last_name, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                          <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739087735674.png" alt=""></p><h3 id="3-3-3-满外连接-FULL-JOIN-ON">3.3.3 满外连接 <code>FULL JOIN ON</code></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满外连接的结果 <span class="operator">=</span> 左右表匹配到的数据 <span class="operator">+</span> 左表没有匹配到的数据 <span class="operator">+</span> 右表没有匹配到的数据</span><br></pre></td></tr></table></figure><p>标准语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 互相charity</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 </span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 其他;</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>MySQL</code> 不支持 <code>FULL JOIN</code> ，但可以通过<strong>合并左外连接和右外连接的方式</strong>实现。</p><p>可以简单理解：<code>FULL JOIN &lt;=&gt; LEFT JOIN UNION RIGHT JOIN</code></p></blockquote><h1>4 合并查询结果 <code>UNION</code></h1><p><code>UNION</code> 可以将多个 SELECT 语句得到的结果合并成一个表输出：</p><ul><li>匹配：多个 SELECT 语句得到的结果集列数和数据类型必须相同</li><li>去重与否：使用 <code>UNION</code> 会去除重复数据；使用 <code>UNION ALL</code> 不会去除重复数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]  <span class="comment">-- UNION 或者 UNION ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... <span class="keyword">FROM</span> table2</span><br></pre></td></tr></table></figure><ul><li>例：查询部门编号 <code>department_id &gt; 90</code> 或 邮箱 <code>email</code> 包含 <code>a</code> 的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：使用 WHERE</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line">   <span class="keyword">OR</span> department_id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：使用 UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, email, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&gt;</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h1>5 JOIN 实现的几种关系（总结）</h1><h2 id="5-1-内连接：A-交-B">5.1 内连接：A 交 B</h2><p>A 表与 B 表内连接，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="5-2-左外连接：A-交-A-交-B">5.2 左外连接：A 交 (A 交 B)</h2><p>A 表作为主表，B 表作为从表插入 A ，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A + A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="5-3-右外连接：B-交-A-交-B">5.3 右外连接：B 交 (A 交 B)</h2><p>B 表作为主表，A 表作为从表插入 B ，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>+</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">B + A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件;</span><br></pre></td></tr></table></figure><blockquote><p>左外连接和右外连接本质相同</p></blockquote><h2 id="5-4-WHERE-找出空值-IS-NULL：只属于-A">5.4 WHERE 找出空值 IS NULL：只属于 A</h2><p>A 表作为主表，B 表插入，但去除完美匹配的，即 A 表中与 B 表无关的部分。相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>−</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A - A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.column, B.column</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> B.column <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><ul><li>例：查询 部门表中无员工的部门</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.department_name, d.department_id, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e</span><br><span class="line">                   <span class="keyword">ON</span> d.department_id <span class="operator">=</span> e.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739090941337.png" alt=""></p><h2 id="5-5-UNION-合并：A-并-B">5.5 UNION 合并：A 并 B</h2><p>UNION 可以将多个 SELECT 语句得到的结果合并成一个表输出，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cup B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> B.col <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line">    <span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br></pre></td></tr></table></figure><ul><li>例：两张方法，推荐第一种【先手动去重，再使用 UNION ALL 效率高】</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：利用 WHERE d.department_id IS NULL 手动去重</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：直接使用 UNION 自动去重</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><h2 id="5-6-找出空值后-UNION-合并：对称差">5.6 找出空值后 UNION 合并：对称差</h2><p>查询所有匹配失败的行数据，相当于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi><mo>−</mo><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \cup B - A \cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B</span><br><span class="line"><span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> B.col <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, ... </span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B</span><br><span class="line">    <span class="keyword">ON</span> A.col <span class="operator">=</span> B.col</span><br><span class="line"><span class="keyword">WHERE</span> A.col <span class="keyword">IS</span> <span class="keyword">NULL</span>  <span class="comment">-- 全部加上 IS NULL 判断</span></span><br></pre></td></tr></table></figure><ul><li>例：查询所有失败行数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                   <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line">                    <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739091754343.png" alt=""></p><h1>6 特殊等值连接</h1><h2 id="6-1-自然连接">6.1 自然连接</h2><p><code>NATURAL JOIN</code> 会自动查询两张表中<strong>所有相同的字段</strong>，然后进行等值连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是 SQL99 新语法</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d;</span><br></pre></td></tr></table></figure><blockquote><p>注：自然连接使用 <code>AND</code> 连接各个条件。即只有当所有相同列名的值都相等时，才会放入结果集。</p><p>例如：当表 employees 和表 departments 有相同列 department_id 和 manager_id 时</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 上面自然连接等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line">                  <span class="keyword">AND</span> e.manager_id <span class="operator">=</span> d.manager_id;  <span class="comment">-- 是 AND 而不是 OR</span></span><br></pre></td></tr></table></figure><h2 id="6-2-USING-连接">6.2 USING 连接</h2><p>当有多个同名字段时，<code>USING</code> 可以指定同名字段进行连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,</span><br><span class="line">     departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;  <span class="comment">-- 利用 USING 简化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以简化为</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">USING</span> (department_id);  <span class="comment">-- 指定 department_id</span></span><br></pre></td></tr></table></figure><h2 id="6-3-总结：等值连接的三种写法">6.3 总结：等值连接的三种写法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法一：WHERE 限制条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,</span><br><span class="line">     departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 法二：JOIN ... ON + 条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line">                  </span><br><span class="line"><span class="comment">-- 法三：USING 指定同名字段</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">USING</span> (department_id);  <span class="comment">-- 指定 department_id</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>WHERE</code> 的使用没有限制，目的就是增加约束条件</li><li><code>ON</code> 只能和 <code>JOIN</code> 连用</li><li><code>USING</code> 只能和 <code>JOIN</code>，且要求字段必须同名</li></ul></blockquote>]]></content>
    
    
    <summary type="html">本文详细介绍 数据库查询语言 SQL 的多表查询知识，包括等值连接、自连接、外连接。重点讲解 JOIN ON 语法</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（2）：自动求导 autograd 反向传播 backward 与计算图</title>
    <link href="https://blog.iskage.online/posts/421f3bd1.html"/>
    <id>https://blog.iskage.online/posts/421f3bd1.html</id>
    <published>2025-02-08T10:32:00.000Z</published>
    <updated>2025-02-11T08:06:56.262Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch搭建神经网络（2）自动求导autograd、反向传播backward与计算图</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p><code>torch.autograd</code> 提供了一套自动求导方式，它能够根据前向传播过程自动构建计算图，执行反向传播。</p><h2 id="1-autograd-的数学原理：计算图">1 autograd 的数学原理：计算图</h2><p>计算图原理可以查看 <strong>cs231n</strong> 课程讲解：【计算图的原理非常重要！】或者见<a href="#3">后文分析</a></p><p>英文官网 <a href="https://cs231n.github.io/">https://cs231n.github.io/</a></p><p>b站 课程整理 <a href="https://www.bilibili.com/video/BV1nJ411z7fe?p=8&amp;spm_id_from=333.788.videopod.episodes">BV1nJ411z7fe</a> 【反向传播章节】</p><p>b站 中文讲解 <a href="https://www.bilibili.com/video/BV1K7411W7So?p=4&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【子豪兄】精讲CS231N斯坦福计算机视觉公开课（2020最新）</a></p><h2 id="2-autograd-的使用：requires-grad-backward">2 autograd 的使用：requires_grad &amp; backward</h2><h3 id="2-1-requires-grad-属性">2.1 requires_grad 属性</h3><p>只需要对Tensor增加一个 <code>requires_grad=True</code> 属性，Pytorch就会自动计算 <code>requires_grad=True</code> 属性的 Tensor，并保留计算图，从而快速实现反向传播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Method 1</span></span><br><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2</span></span><br><span class="line">x = torch.rand(<span class="number">2</span>, <span class="number">3</span>).requires_grad_()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 3</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">x.requires_grad = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.requires_grad)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-2-backward-反向传播">2.2 backward 反向传播</h3><p>反向传播函数的使用：其中第一个参数 <code>tensors</code> 传入用于计算梯度的张量，格式和各个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.autograd.backward(tensors, grad_tensors=<span class="literal">None</span>, retain_graph=<span class="literal">None</span>, create_graph=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>tensors</code>：用于计算梯度的Tensor，如<code>torch.autograd.backward(y)</code>，等价于<code>y.backward()</code>。</p></li><li><p><code>grad_tensors</code>：形状与tensors一致，对于<code>y.backward(grad_tensors)</code>，grad_tensors相当于链式法则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow></mfrac><mo>×</mo><mfrac><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">{\mathrm{d}z \over \mathrm{d}x}={\mathrm{d}z \over \mathrm{d}y} \times {\mathrm{d}y \over \mathrm{d}x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3612em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>z</mi></mrow><mrow><mi mathvariant="normal">d</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">{\mathrm{d}z} \over {\mathrm{d}y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3612em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。【结合例子理解见后】</p></li><li><p><code>retain_graph</code>：计算计算图里每一个导数值时需要保留各个变量的值，retain_graph 为 True 时会保存。【结合例子理解见后】</p></li></ul><h4 id="2-2-1-requires-grad-属性的传递">2.2.1 requires_grad 属性的传递</h4><ul><li>例：<code>a</code> 需要求导，<code>b</code> 不需要，<code>c</code> 定义为 <code>a + b</code> 的元素加和</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">c = (a + b).<span class="built_in">sum</span>()  <span class="comment"># c 受 a 的影响，c.requires_grad = True</span></span><br><span class="line"></span><br><span class="line">a.requires_grad, b.requires_grad, c.requires_grad</span><br><span class="line"><span class="comment"># (True, False, True)</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-is-leaf-叶子结点">2.2.2 is_leaf 叶子结点</h4><p>对于计算图中的Tensor而言， <code>is_leaf=True</code> 的Tensor称为Leaf Tensor，也就是计算图中的叶子节点。</p><ul><li><code>requires_grad=False</code> 时，无需求导，故为叶子结点。</li><li>即使 <code>requires_grad=True</code> 但是由用户创建的时，此时它位于计算图的头部（叶子结点），它的梯度会被保留下来。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仍然是上面的例子</span></span><br><span class="line">a.is_leaf, b.is_leaf, c.is_leaf</span><br><span class="line"><span class="comment"># (True, True, False)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-autograd-利用计算图计算导数">2.3 autograd 利用计算图计算导数</h3><p>利用 autograd 计算导数，对于函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">y=x^2e^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span>，它的导函数解析式为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mrow><mi>d</mi><mtext> </mtext><mi>y</mi></mrow><mrow><mi>d</mi><mtext> </mtext><mi>x</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mi>x</mi><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><msup><mi>e</mi><mi>x</mi></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation}\dfrac{d\ y}{d\ x} = 2xe^x + x^2e^x\end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.7787em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2787em;"><span style="top:-3.2787em;"><span class="pstrut" style="height:3.3714em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7787em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2787em;"><span style="top:-3.2787em;"><span class="pstrut" style="height:3.3714em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7787em;"><span></span></span></span></span></span></span></span></span></p><p>定义计算 y 函数和计算解析式导数结果函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autograd 求导</span></span><br><span class="line"><span class="comment"># y = x^2 * e^x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y = x * x * torch.exp(x)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">df</span>(<span class="params">x</span>):</span><br><span class="line">    df = <span class="number">2</span> * x * torch.exp(x) + x * x * torch.exp(x)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><ul><li>例：随机赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = f(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y = </span></span><br><span class="line"><span class="comment"># tensor([[0.1387, 0.4465, 0.4825],</span></span><br><span class="line"><span class="comment">#         [0.1576, 4.1902, 0.5185]], grad_fn=&lt;MulBackward0&gt;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y.backward(gradient=torch.ones(y.size()))  <span class="comment"># 指定 dy/dx = dy/dx * 1 的 dy/dx</span></span><br><span class="line"><span class="comment"># torch.autograd.backward(y, grad_tensors=torch.ones(y.size()))  # 或者</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.grad)  <span class="comment"># 反向传播后才能取到 y 关于 x 的导数（已经代入了此时 x 的值）</span></span><br><span class="line"><span class="comment"># tensor([[-0.4497,  2.1766, -0.2087],</span></span><br><span class="line"><span class="comment">#         [-0.4567, 11.4700, -0.1244]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df(x))   <span class="comment"># 解析求出的导数值</span></span><br><span class="line"><span class="comment"># tensor([[-0.4497,  2.1766, -0.2087],</span></span><br><span class="line"><span class="comment">#         [-0.4567, 11.4700, -0.1244]], grad_fn=&lt;AddBackward0&gt;)</span></span><br></pre></td></tr></table></figure><p><code>x.grad &amp; df(x)</code> 二者是在数值上是一样的</p><h2 id="3-反向传播与计算图-a-id-3-a">3 反向传播与计算图<a id='3'></a></h2><h3 id="3-1-计算图原理：链式法则">3.1 计算图原理：链式法则</h3><p>根据链式法则</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>b</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dz/dy = 1,\ dz/db = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>x</mi><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mi>w</mi></mrow><annotation encoding="application/x-tex">dy/dw = x,\ dy/dx = w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>×</mo><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mn>1</mn><mo>×</mo><mi>w</mi><mo separator="true">,</mo><mtext> </mtext><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>d</mi><mi>z</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>y</mi><mo>×</mo><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mn>1</mn><mo>×</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">dz/dx = dz/dy \times dy/dx = 1 \times w,\ dz/dw = dz/dy \times dy/dw = 1 \times x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></p><p>只要存储结点的导数和值便可通过简单的乘法计算所有导数</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739002830328.png" alt=""></p><p>按照上图构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算图</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">b = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = w * x <span class="comment"># 等价于 y = w.mul(x)</span></span><br><span class="line">z = y + b <span class="comment"># 等价于 z = y.add(b)</span></span><br><span class="line"></span><br><span class="line">x.requires_grad, b.requires_grad, w.requires_grad, y.requires_grad, z.requires_grad</span><br><span class="line"><span class="comment"># (False, True, True, True, True)</span></span><br></pre></td></tr></table></figure><h3 id="3-2-grad-fn-查看反向传播函数">3.2 grad_fn 查看反向传播函数</h3><p><code>grad_fn</code> 可以查看这个结点的函数类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z.grad_fn  <span class="comment"># &lt;AddBackward0 at 0x7f96b951ba90&gt;  Add 加法，因为 z = y + b</span></span><br><span class="line">y.grad_fn  <span class="comment"># &lt;MulBackward0 at 0x7f96b951b400&gt;  Mul 乘法，因为 y = w * x</span></span><br><span class="line"></span><br><span class="line">w.grad_fn, x.grad_fn, b.grad_fn <span class="comment"># (None, None, None) 叶子结点是 grad_fn=None</span></span><br></pre></td></tr></table></figure><p><code>grad_fn.next_functions</code> 获取 grad_fn 的输入，返回上一步的反向传播函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">z.grad_fn.next_functions  <span class="comment"># z 前是 y 和 b</span></span><br><span class="line"><span class="comment"># ((&lt;MulBackward0 at 0x7f96b951b400&gt;, 0),  # y = w * x 是 mul</span></span><br><span class="line"><span class="comment">#  (&lt;AccumulateGrad at 0x7f96b95c6af0&gt;, 0))  # b 是叶子结点，需要求导 AccumulateGrad</span></span><br><span class="line"></span><br><span class="line">y.grad_fn.next_functions  <span class="comment"># y 前是 w 和 x</span></span><br><span class="line"><span class="comment"># ((&lt;AccumulateGrad at 0x7f9678466160&gt;, 0),  # w 是叶子结点，需要求导 AccumulateGrad</span></span><br><span class="line"><span class="comment">#  (None, 0)  # x 是叶子节点，x.requires_grad=False 不需要求导 None</span></span><br></pre></td></tr></table></figure><h3 id="3-3-retain-graph-的使用（仅叶子结点）">3.3 retain_graph 的使用（仅叶子结点）</h3><p>如果不指定 <code>retain_graph=True</code> ，则在反向传播后，会自动清除变量值。</p><p>例如：计算 <code>w.grad</code> w 的梯度时，需要 x 的值 （<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>w</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">dy/dw = x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>）</p><blockquote><p>注意：x.requires_grad=False 不需要求导，故 <code>x.grad</code> 报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z.backward(retain_graph=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="comment"># tensor([1.])  # 确实是我们之前设的 x = torch.ones(1) 相匹配</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再次运行，梯度累加</span></span><br><span class="line">z.backward()</span><br><span class="line"><span class="built_in">print</span>(w.grad)</span><br><span class="line"><span class="comment"># tensor([1.])  # 1 + 1 = 2 累加，所以之前 grad_fn 取名为 AccumulateGrad</span></span><br></pre></td></tr></table></figure><h3 id="3-4-关闭反向传播">3.4 关闭反向传播</h3><p>某一个节点 <code>requires_grad </code>被设置为 <code>True</code> ，那么所有依赖它的节点 <code>requires_grad</code> 都是 <code>True</code>。有时不需要对所有结点都反向传播（求导），从而来节省内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line"></span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = True</span></span><br><span class="line"><span class="comment"># (False, True, True)</span></span><br></pre></td></tr></table></figure><p>下面我们来关闭关于 <code>y</code> 的反向传播</p><ul><li>法一：<code>with torch.no_grad():</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    x = torch.ones(<span class="number">1</span>)</span><br><span class="line">    w = torch.rand(<span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">    y = x * w</span><br><span class="line">    </span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = False</span></span><br><span class="line"><span class="comment"># (False, True, False)</span></span><br></pre></td></tr></table></figure><ul><li>法二：设置默认 <code>torch.set_grad_enabled(False)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">torch.set_grad_enabled(<span class="literal">False</span>) <span class="comment"># 更改默认设置</span></span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">1</span>)</span><br><span class="line">w = torch.rand(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line"></span><br><span class="line">x.requires_grad, w.requires_grad, y.requires_grad  <span class="comment"># y.requires_grad = False</span></span><br><span class="line"><span class="comment"># (False, True, False)</span></span><br><span class="line"></span><br><span class="line">torch.set_grad_enabled(<span class="literal">True</span>) <span class="comment"># 恢复默认设置</span></span><br></pre></td></tr></table></figure><h3 id="3-5-data-从计算图取出Tensor的值">3.5 <code>.data</code> 从计算图取出Tensor的值</h3><p>修改张量的数值，又不影响计算图，使用 <code>tensor.data</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">x_clone = x.data</span><br><span class="line"></span><br><span class="line">x.requires_grad, x_clone.requires_grad  <span class="comment"># x_clone 独立于原来的计算图</span></span><br><span class="line"><span class="comment"># (True, False)</span></span><br></pre></td></tr></table></figure><h3 id="3-6-存储非叶子结点的梯度">3.6 存储非叶子结点的梯度</h3><p>在计算图流程中，非叶子结点求导后其导数值便立刻被清除。可以使用 <code>autograd.grad</code> 或 <code>hook</code> 方法保留</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autograd.grad &amp; hook</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = w * x  <span class="comment"># 非叶子结点</span></span><br><span class="line">z = y.<span class="built_in">sum</span>()  <span class="comment"># 非叶子结点</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z.backward()</span><br><span class="line">x.grad, w.grad, y.grad  <span class="comment"># 非叶子结点 y.grad = None</span></span><br><span class="line"><span class="comment"># (tensor([1.]), tensor([1.]), None)</span></span><br></pre></td></tr></table></figure><blockquote><p>若为叶子结点可以采用 <code>z.backward(retain_graph=True)</code> 的方式</p></blockquote><ul><li>法一：<code>torch.autograd.grad()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 torch.autograd.grad() 直接取梯度</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = x * w</span><br><span class="line">z = y.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">torch.autograd.grad(z, y)  <span class="comment"># z.backward() 并直接取 y.grad()</span></span><br><span class="line"><span class="comment"># (tensor([1.]),)</span></span><br></pre></td></tr></table></figure><ul><li>法二：<code>hook</code></li></ul><p>标准格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hook是一个函数，输入是梯度，不应该有返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variable_hook</span>(<span class="params">grad</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;y.grad：&#x27;</span>, grad)</span><br><span class="line"></span><br><span class="line">x = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line">w = torch.ones(<span class="number">1</span>, requires_grad = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y = x * w</span><br><span class="line"><span class="comment"># 注册hook</span></span><br><span class="line">hook_handle = y.register_hook(variable_hook)</span><br><span class="line"></span><br><span class="line">z = y.<span class="built_in">sum</span>()</span><br><span class="line">z.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除非每次都要使用 hook，否则用完之后记得移除 hook</span></span><br><span class="line">hook_handle.remove()</span><br><span class="line"></span><br><span class="line"><span class="comment"># y.grad： tensor([1.])</span></span><br></pre></td></tr></table></figure><h2 id="4-案例：线性回归">4 案例：线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fake_data</span>(<span class="params">batch_size=<span class="number">16</span></span>):</span><br><span class="line">    <span class="comment"># 产生随机数据：y = 2 * x + 3，加上噪声</span></span><br><span class="line">    x = torch.rand(batch_size, <span class="number">1</span>) * <span class="number">5</span>  <span class="comment"># 扩大一些，以免噪声太明显</span></span><br><span class="line">    y = x * <span class="number">2</span> + <span class="number">3</span> + torch.randn(batch_size, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机数种子，保证结果可复现</span></span><br><span class="line">torch.manual_seed(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">x, y = get_fake_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.scatter(x.squeeze().numpy(), y.squeeze().numpy())</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">w = torch.rand(<span class="number">1</span>, <span class="number">1</span>, requires_grad=<span class="literal">True</span>)  <span class="comment"># w.shape = torch.Size([1, 1]) 因为 [8, 1] * [1, 1] -&gt; [batch_size, 1] 和 y 维度相同</span></span><br><span class="line">b = torch.zeros(<span class="number">1</span>, <span class="number">1</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">losses = np.zeros(<span class="number">200</span>)  <span class="comment"># 存储损失值</span></span><br><span class="line">lr = <span class="number">0.005</span>  <span class="comment"># 学习率</span></span><br><span class="line">EPOCHS = <span class="number">200</span>  <span class="comment"># 迭代次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(EPOCHS):</span><br><span class="line">    x, y = get_fake_data(batch_size=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播 计算损失</span></span><br><span class="line">    y_pred = x.mm(w) + b.expand_as(y)  <span class="comment"># expand_as(y) 是广播机制，即将 b 复制成和 y 相同性质的张量 [1, 1] -&gt; [batch_size, 1]</span></span><br><span class="line">    loss = <span class="number">0.5</span> * (y_pred - y) ** <span class="number">2</span>  <span class="comment"># MSE 均方误差，这是对张量 y 逐元素计算</span></span><br><span class="line">    loss = loss.<span class="built_in">sum</span>()  <span class="comment"># 累和成一个数</span></span><br><span class="line">    losses[epoch] = loss.item()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    loss.backward()</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 取 .data 是因为每一轮是根据随机生成的 batch_size 个点训练，但我们希望存储的是全局参数 w, b &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 故每次依据样本点更新全局参数，而不是改批次的参数 &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    w.data.sub_(lr * w.grad.data)  <span class="comment"># 或者 w.data = w.data - lr * w.grad.data</span></span><br><span class="line">    b.data.sub_(lr * b.grad.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 梯度清零</span></span><br><span class="line">    w.grad.data.zero_()  <span class="comment"># 不清零，梯度会不断累加</span></span><br><span class="line">    b.grad.data.zero_()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> epoch % <span class="number">10</span> == <span class="number">0</span>:  <span class="comment"># 每隔 10 次扔出当前训练情况</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Epoch: &#123;&#125; / &#123;&#125;, Parameters: w is &#123;&#125;, b is &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, EPOCHS, w.item(), b.item(), losses[epoch]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Epoch: &#123;&#125; / &#123;&#125;, Parameters: w is &#123;&#125;, b is &#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(EPOCHS, EPOCHS, w.item(), b.item(), losses[-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739010576001.png" alt=""></p>]]></content>
    
    
    <summary type="html">计算图、前向传播和反向传播是搭建神经网络的重要知识，本文从原理详细介绍了 Pytorch 中对这些流程的实现。最后提供了一个从0编程训练线性回归模型的案例。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（4）排序与分页：ORDER BY 子句 和 LIMIT 子句</title>
    <link href="https://blog.iskage.online/posts/c8719e79.html"/>
    <id>https://blog.iskage.online/posts/c8719e79.html</id>
    <published>2025-02-08T06:43:00.000Z</published>
    <updated>2025-02-19T11:26:39.855Z</updated>
    
    <content type="html"><![CDATA[<h1>排序与分页：ORDER BY 子句 和 LIMIT 子句</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h1>1 排序</h1><p>为了使数据按照设定的规则排序输出，可以使用 <code>ORDER BY</code></p><ul><li><p>使用 <code>ORDER BY 字段名 ASC</code> 表示按照 <code>字段</code> <strong>生序</strong> 展示</p></li><li><p>使用 <code>ORDER BY 字段名 DESC</code> 表示按照 <code>字段</code> <strong>降序</strong> 展示</p></li><li><p><code>ORDER BY</code> 位于  <code>SELECT</code> 语句结尾</p></li></ul><h2 id="1-1-按照某一列排序">1.1 按照某一列排序</h2><ul><li>例如按照 <code>hire_date</code> 升序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date;  # 按照 hire_date 排序输出，默认升序 <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">ASC</span>;  # 按照 hire_date 升序输出</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738994927454.png" alt=""></p><ul><li>按照 <code>hire_date</code> 降序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, email, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span>;  # 按照 hire_date 降序输出</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995009057.png" alt=""></p><ul><li>列别名同样可以使用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, salary <span class="operator">*</span> <span class="number">12</span> <span class="keyword">AS</span> &quot;annual salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &quot;annual salary&quot; <span class="keyword">DESC</span>;  # 按照别名 annual salary 降序</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995074331.png" alt=""></p><h2 id="1-2-按照多列排序">1.2 按照多列排序</h2><p>根据多个列进行数据行排序，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列<span class="number">2</span>, 列<span class="number">4</span>;</span><br></pre></td></tr></table></figure><ul><li>排序依据列可以不在展示列中：即 <code>ORDER BY</code> 后的列可以不是 <code>SELECT</code> 后的列，只要是表中的列即可</li><li>多列排序，按照从左到右的方式排序 <code>ORDER BY</code> 后面的列，只有前面列存在相同元素时，才会参考后一列进行排序：即先按照 <code>列2</code> 排，如果 <code>列2</code> 各异，则完全按照 <code>列2</code> 拍；否则参考 <code>列4</code></li></ul><p>例如：按照部门降序，聘请日期升序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_id, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>, hire_date <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738995708094.png" alt=""></p><h1>2 分页</h1><p>返回特定范围（行）的数据，以免占据页面过多</p><blockquote><p>也可以使用图形化工具，例如 <code>jetBrains</code> 的 <a href="https://www.jetbrains.com.cn/datagrip/"><code>DataGrip</code> 产品</a>。</p></blockquote><p>MySQL 中使用 <code>LIMIT</code> 实现分页，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIMIT 起始行数, 行数  <span class="comment">-- 从 0 开始计数，起始行数可省略，默认为 0</span></span><br></pre></td></tr></table></figure><ul><li><code>LIMIT</code> 语句放在 <code>SELECT</code> 语句结尾</li><li>不同数据库管理系统 DBMS 的语句存在差异</li></ul><p>例如：选取前 5 行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">5</span>;  <span class="comment">-- 前 5 行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">0</span>, <span class="number">5</span>;  <span class="comment">-- [0, 1, 2, 3, 4] 从第 0 行开始往后查 5 行</span></span><br></pre></td></tr></table></figure><p>例如：选取第 11 到第 15 行数据（从 0 计数则是：从第 10 行到第 14 行）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">10</span>, <span class="number">10</span>;  <span class="comment">-- [10, 11, 12, 13, 14] 从 0 计数: 从第 10 行到第 14 行</span></span><br></pre></td></tr></table></figure><blockquote><p><code>MySQL 8.0</code>中可以使用 <code>LIMIT 3 OFFSET 4</code> 等价于 <code>LIMIT 4, 3</code></p></blockquote>]]></content>
    
    
    <summary type="html">本文详细介绍 数据库查询语言 SQL 的 ORDER BY 子句，使数据按照设定的规则排序输出。LIMIT 子句，返回特定范围（行）的数据，以免占据页面过多</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>为搭建神经网络创建虚拟环境全流程：下载 Python，利用 conda 创建虚拟环境，激活与安装 Pytorch</title>
    <link href="https://blog.iskage.online/posts/7d8f6610.html"/>
    <id>https://blog.iskage.online/posts/7d8f6610.html</id>
    <published>2025-02-08T02:27:00.000Z</published>
    <updated>2025-02-11T08:07:16.439Z</updated>
    
    <content type="html"><![CDATA[<h1>1 下载 Python</h1><blockquote><p>注：这一部分已不需要，可以直接使用 conda 下载</p></blockquote><p>MacOS 和 Windows 下载 Python 全流程见 <a href="https://blog.iskage.online/posts/7d46a7ea.html">全平台下载安装 Python 全流程指南：Windows &amp; MacOS</a></p><h1>2 Conda 下载</h1><p>利用 Conda 更好的管理开发环境，全流程见 <a href="https://blog.iskage.online/posts/2c3265b7.html">Conda 创建虚拟环境全流程</a></p><h1>3 创建环境并激活</h1><h2 id="3-1-首先创建环境">3.1 首先创建环境</h2><p>例如我们创建一个环境名为 <code>pytorch</code> 的虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pytorch</span><br></pre></td></tr></table></figure><h2 id="3-2-激活环境">3.2 激活环境</h2><p>而后激活这个环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure><p>激活后会在命令后/终端前显示环境名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(pytorch) Username/@xx %   <span class="comment"># macOS</span></span><br><span class="line">(pytorch) PC C:\xx\xx&gt;     <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure><h2 id="3-3-下载-python-和-pip">3.3 下载 python 和 pip</h2><p>在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pip</span><br></pre></td></tr></table></figure><blockquote><p>注：需要先激活环境。此时 conda 会自动为该环境配置 python 和 pip，为之后使用 pip 下载 torch 作准备。</p></blockquote><h1>4 官网查询下载 Pytorch 命令</h1><p>去往 <a href="https://pytorch.org/">Pytorch 官网</a>，向下滑动找到【Install PyTorch】</p><h2 id="4-1-macOS-安装指令">4.1 macOS 安装指令</h2><p>根据实际情况，选择对应配置，复制代码后在【终端】运行即可。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986071255.png" alt=""></p><ul><li>一定要在【步骤三：创建环境并激活】后执行</li><li>目前 Pytorch 官方已不提供 conda 下载方式，但 conda 的环境管理仍然有效，采用 pip 安装同样可行</li></ul><h2 id="4-2-Windows-安装指令">4.2 Windows 安装指令</h2><p>根据实际情况，选择对应配置，复制代码后在【PowerShell】运行即可。</p><h3 id="4-2-1-安装在-CPU">4.2.1 安装在 CPU</h3><p>选择 CPU 后复制命令</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986244205.png" alt=""></p><h3 id="4-2-2-安装在-GPU">4.2.2 安装在 GPU</h3><p>在命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>则会返回英伟达显卡的 <code>CUDA</code> 版本，根据版本号选择</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/22a53eeea951769ba92e14a70427c89a_720.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738986564831.png" alt=""></p><h1>5 删除环境</h1><p>因为是虚拟环境，删除环境不会对其他配置造成影响，在终端或命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">为了更好的对开发环境进行管理，总是需要配置虚拟环境。本文介绍了如何下载 Python，利用 conda 创建虚拟环境，激活与安装 Pytorch，管理和删除环境。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="conda" scheme="https://blog.iskage.online/tags/conda/"/>
    
    <category term="虚拟环境" scheme="https://blog.iskage.online/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>全平台下载安装 Python 全流程指南：Windows &amp; MacOS</title>
    <link href="https://blog.iskage.online/posts/7d46a7ea.html"/>
    <id>https://blog.iskage.online/posts/7d46a7ea.html</id>
    <published>2025-02-08T01:11:00.000Z</published>
    <updated>2025-02-09T02:05:30.425Z</updated>
    
    <content type="html"><![CDATA[<h1>1 MacOS 系统安装 Python</h1><p>一般而言，macOS 系统默认安装了 Python，可通过打开【终端】/【Terminal】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>此时会显示 <code>Python 3.12.8</code> 则说明已经配置且加入了环境变量。</p><p>如果没有，则需要前往官网下载。</p><h2 id="1-1-官网下载">1.1 官网下载</h2><ul><li>打开 <a href="https://www.python.org/">Python 官方网站</a></li><li>点击顶部菜单<a href="https://www.python.org/downloads/">Downloads</a> 选择 <a href="https://www.python.org/downloads/macos/">macOS</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738982544046.png" alt=""></p><ul><li>向下滑动，选择版本并下载【推荐】选择 Stable Releases，更为稳定</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738982629264.png" alt=""></p><blockquote><p>注：macOS 的安装程序以 <code>.pkg</code> 为后缀，例如如果选择图中版本，下载的文件名应该为 <code>python-3.12.9-macos11.pkg</code></p></blockquote><p>或者直接点击我的 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/python-3.12.9-macos11.pkg">链接</a> 下载版本为 <code>Python 3.12.9</code></p><h2 id="1-2-运行安装包">1.2 运行安装包</h2><ul><li><p>双击下载的 <code>.pkg</code> 文件（如 <code>python-3.12.9-macos11.pkg</code>）</p></li><li><p>macOS 的下载不需要配置，会自动推荐到环境变量，故一直默认即可</p></li></ul><h2 id="1-3-验证是否安装成功">1.3 验证是否安装成功</h2><p>打开【终端】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>此时会显示 <code>Python 3.12.9</code> 则说明成功</p><h1>2 Windows 系统安装 Python</h1><h2 id="2-1-官网下载">2.1 官网下载</h2><ul><li>打开 <a href="https://www.python.org/">Python 官方网站</a></li><li>点击顶部菜单<a href="https://www.python.org/downloads/">Downloads</a> 选择 <a href="https://www.python.org/downloads/windows/">Windows</a></li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738983514762.png" alt=""></p><ul><li>向下滑动，选择版本并下载【推荐】选择 Stable Releases，更为稳定</li></ul><p>注意查看自己的电脑配置，选择合适的安装包，可以前往 <a href="https://support.microsoft.com/zh-cn/topic/%E7%A1%AE%E5%AE%9A%E6%82%A8%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E6%98%AF-32-%E4%BD%8D%E7%89%88%E6%9C%AC%E8%BF%98%E6%98%AF-64-%E4%BD%8D%E7%89%88%E6%9C%AC%E7%9A%84-windows-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1b03ca69-ac5e-4b04-827b-c0c47145944b">微软 Microsoft 官网</a>查询</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738983582659.png" alt=""></p><blockquote><p>Windows 的安装包为可执行文件，以 <code>.exe</code> 为文件后缀</p></blockquote><p>或者直接点击我的 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/python-3.12.9-amd64.exe">链接</a> 下载，版本为 <code>Python 3.12.9</code> 架构为 <code>amd64</code></p><h2 id="2-1-运行安装包">2.1 运行安装包</h2><ul><li>双击下载的 <code>.exe</code> 文件（如 <code>python-3.12.9-amd64.exe</code>）</li></ul><blockquote><p>因为我已经下载安装了 <code>Python 3.12</code> 故后文使用 <code>Python 3.13</code> 展示安装和配置流程，二者的安装和配置没有区别</p></blockquote><ul><li>【注意】一定要勾选 【Add python.exe to PATH】以增加环境变量</li><li>可以直接点击【Install Now】</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/9b2fd9c56f7b91c26f2c6b4c7a82472c_720.png" alt=""></p><blockquote><p>如果需要配置其他可选【Customize installation】：可以配置安装路径，选择性安装一些产品。</p></blockquote><h2 id="2-3-验证是否安装成功">2.3 验证是否安装成功</h2><p>打开【命令提示符 CMD】或 【PowerShell】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><h1>3 在终端使用 Python</h1><p>直接在【Terminal (MacOS)】和【PowerShell (Windows)】输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br></pre></td></tr></table></figure><p>即可进入终端的 <code>Python</code> 编程环境</p><h1>4 创建虚拟环境</h1><p>利用 <code>Conda</code> 创建虚拟环境，可以更好的管理一些包。详细教程见 <a href="https://blog.iskage.online/posts/2c3265b7.html">Conda 创建虚拟环境全流程</a></p><p>或者直接使用 conda 下载，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名</span><br><span class="line">conda activate 环境名</span><br><span class="line">conda install pip</span><br></pre></td></tr></table></figure><p>其中 <code>conda install pip</code> 会自动下载 python 和 pip</p>]]></content>
    
    
    <summary type="html">下载并配置 Python，包括了在 mac 电脑和 Windows 电脑的 下载、安装、环境变量配置、使用与常见问题收录</summary>
    
    
    
    <category term="Python" scheme="https://blog.iskage.online/categories/Python/"/>
    
    
    <category term="虚拟环境" scheme="https://blog.iskage.online/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（1）：Tensor 张量数据结构</title>
    <link href="https://blog.iskage.online/posts/652f5539.html"/>
    <id>https://blog.iskage.online/posts/652f5539.html</id>
    <published>2025-02-07T12:27:00.000Z</published>
    <updated>2025-02-11T08:06:51.152Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（1）Tensor 张量数据结构</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>参考 <a href="https://github.com/zergtant/pytorch-handbook">GitHub 的 pytorch-handbook 项目</a></p><p>参考 <a href="https://www.deepseek.com/">DeepSeek</a> 整理补充</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>首先，检查 <code>Pytorch</code> 是否安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.2</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><p><code>Tensor</code> 是可以理解为一个类似 <code>Numpy</code> 中的高维数组。</p><h2 id="1-创建">1 创建</h2><ul><li><code>torch.Tensor()</code> 分配空间</li></ul><p>生成维度2x3的张量，并未赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.Tensor(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[0., 0., 0.],</span></span><br><span class="line"><span class="comment">#         [0., 0., 0.]])</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.tensor()</code> 需要具体的值进行创建</li></ul><p>输入具体的值，直接生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># dtype 指定类型</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[1., 2., 3.],</span></span><br><span class="line"><span class="comment">#         [4., 5., 6.]])</span></span><br></pre></td></tr></table></figure><ul><li><code>torch.rand()</code> 使用正态分布随机初始化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">z = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[0.1587, 0.9499, 0.1939],</span></span><br><span class="line"><span class="comment">#         [0.9741, 0.9309, 0.7463]])</span></span><br></pre></td></tr></table></figure><h2 id="2-查看形状">2 查看形状</h2><ul><li>调用方法 <code>.shape</code> 或 <code>.size()</code>查看张量形状/维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="comment"># torch.Size([2, 3])</span></span><br></pre></td></tr></table></figure><ul><li>产看具体某个维度数（例如列数）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.size()[<span class="number">1</span>])  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x.size(<span class="number">1</span>))   <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(x.shape[<span class="number">1</span>])  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="3-加法">3 加法</h2><ul><li>使用<code>+</code> 作加法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype=torch.<span class="built_in">float</span>)  <span class="comment"># 或者 torch.ones(2, 3)</span></span><br><span class="line">y = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[2., 3., 4.],</span></span><br><span class="line"><span class="comment">#         [5., 6., 7.]])</span></span><br></pre></td></tr></table></figure><blockquote><p>这种加法不改变 <code>x, y</code> 的值</p></blockquote><ul><li>使用 <code>torch.add(x, y)</code> 作加法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">z = torch.Tensor(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 先分配好一个空间，不赋值</span></span><br><span class="line">torch.add(x, y, out=z)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[2., 3., 4.],</span></span><br><span class="line"><span class="comment">#         [5., 6., 7.]])</span></span><br></pre></td></tr></table></figure><blockquote><p>这种加法不改变 <code>x, y</code> 的值</p></blockquote><ul><li>调用方法 <code>.add()</code> 和 <code>.add_()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(y.add(x))  <span class="comment"># y 不变</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y.add_(x)) <span class="comment"># y 变为 x + y</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><blockquote><p>增加了 <code>_</code> 的方法会进行替换操作</p></blockquote><h2 id="4-索引">4 索引</h2><p>Tensor 的索引操作与 NumPy 类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 索引</span></span><br><span class="line">x = torch.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># tensor([[0.3479, 0.8074, 0.2170],</span></span><br><span class="line"><span class="comment">#         [0.3419, 0.9281, 0.1364]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x[:, <span class="number">1</span>])  <span class="comment"># tensor([0.8074, 0.9281]) # 行全取，列取第一列（从0计数）</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>, :])  <span class="comment"># tensor([0.3419, 0.9281, 0.1364])  # 列全取，行取第一行（从0计数）</span></span><br></pre></td></tr></table></figure><h2 id="5-和-Numpy-的转换">5 和 <code>Numpy</code> 的转换</h2><ul><li><code>torch.Tensor -&gt; numpy.ndarray</code></li></ul><p>使用 <code>.numpy()</code> 方法从Tensor变为numpy.ndarray</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy 相互转换</span></span><br><span class="line">x = torch.ones(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">y = x.numpy()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># tensor([[1., 1., 1.]])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))<span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))  <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>numpy.ndarray -&gt; torch.Tensor</code></li></ul><p>使用 <code>torch.from_numpy()</code> 函数从numpy.ndarray变为Tensor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">y = np.ones((<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">x = torch.from_numpy(y)</span><br><span class="line"><span class="built_in">print</span>(y)        <span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))  <span class="comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># tensor([[1., 1., 1.]], dtype=torch.float64)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>共享内存，通过上面方式转换后，<code>x, y</code> 是共享内存的，tenor改变，numpy.ndarray也改变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># tensor([[1., 1., 1.]])</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># [[1. 1. 1.]]</span></span><br><span class="line">temp = torch.rand(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">x.add_(temp)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># tensor([[1.5567, 1.5514, 1.0607]])</span></span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># [[1.5567319 1.5514015 1.0607271]]</span></span><br></pre></td></tr></table></figure><h2 id="6-零维度张量-标量">6 零维度张量/标量</h2><p>Tensor 数据类型中维度为 <code>0</code> 称为标量（注意，虽然维度为0，但仍然不是 <code>int</code> 或是 <code>float</code> 这些一般 Python 数据类型）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scaler = torch.tensor(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(scaler)          <span class="comment"># tensor(9)</span></span><br><span class="line"><span class="built_in">print</span>(scaler.shape)   <span class="comment"># torch.Size([])</span></span><br></pre></td></tr></table></figure><p>如果想获得一般 Python 数据类型，可以使用方法 <code>.item()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(scaler.item())        <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(scaler.item()))   <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt; 变为 int</span></span><br></pre></td></tr></table></figure><blockquote><p>注意区分 0 维度标量和 1 维度张量</p><p>但是针对 1 维度张量，也可以使用 <code>.item()</code> 方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector = torch.tensor([<span class="number">9</span>])</span><br><span class="line">scaler = torch.tensor(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(vector)  <span class="comment"># tensor([9])</span></span><br><span class="line"><span class="built_in">print</span>(vector.shape)  <span class="comment"># torch.Size([1])</span></span><br><span class="line"><span class="built_in">print</span>(scaler)        <span class="comment"># tensor(9)</span></span><br><span class="line"><span class="built_in">print</span>(scaler.shape)  <span class="comment"># torch.Size([])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对 1 维度张量，也可以使用 `.item()` 方法 </span></span><br><span class="line"><span class="built_in">print</span>(vector.item()) <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(vector.item()))  <span class="comment"># &lt;class &#x27;torch.Tensor&#x27;&gt; 变为 int</span></span><br></pre></td></tr></table></figure><h2 id="7-张量间的复制-detach-clone">7 张量间的复制 <code>.detach()</code> <code>.clone()</code></h2><ul><li><code>.clone()</code> 不共享内存，二者互不影响</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">old = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">new = old.clone()  <span class="comment"># 不共享内存，二者互不影响</span></span><br><span class="line">new[<span class="number">0</span>] = <span class="number">233</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(old)</span><br><span class="line"><span class="comment"># tensor([[1, 2, 3],</span></span><br><span class="line"><span class="comment">#          [4, 5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br></pre></td></tr></table></figure><ul><li><code>.detach()</code> 共享内存，一者变则全变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">old = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">new = old.detach() <span class="comment"># 共享内存，一者变则全变</span></span><br><span class="line">new[<span class="number">0</span>] = <span class="number">233</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(old)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new)</span><br><span class="line"><span class="comment"># tensor([[233, 233, 233],</span></span><br><span class="line"><span class="comment">#         [  4,   5,   6]])</span></span><br></pre></td></tr></table></figure><h2 id="8-维度转变">8 维度转变</h2><p>PyTorch提供了许多维度变换方式：<code>view, reshape, permute, transpose</code></p><h3 id="8-1-维度交换-permute-transpose">8.1 维度交换 <code>permute</code> <code> transpose</code></h3><p>使用 <code>permute</code> <code> transpose</code> 对张量维度进行交换，例如维度为 2x3x4x5 ，希望变为 3x2x5x4，可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment"># .randn 标准正态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># permute</span></span><br><span class="line">new1 = previous.permute((<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>))  <span class="comment"># 填入一个元组，元组里的每个数字对应原来张量的维度序号，新的维度为(第1维度,第0维度,第3维度,第2维度)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># transpose</span></span><br><span class="line">new2 = previous.transpose(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># 第0维度和第1维度交换</span></span><br><span class="line">new2 = new2.transpose(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 第2维度和第3维度交换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new1.shape)  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br><span class="line"><span class="built_in">print</span>(new2.shape)  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br></pre></td></tr></table></figure><h3 id="8-2-维度变换-view-reshape">8.2 维度变换 <code>view</code> <code>reshape</code></h3><ul><li><code>reshape</code> 无要求，可直接使用</li><li><code>view</code>只能用于内存中连续存储的 Tensor</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意总维度要正确：例如 2x3x4x5 = 120 = 6x20</span></span><br><span class="line">new1 = previous.reshape(-<span class="number">1</span>, <span class="number">10</span>)  <span class="comment"># -1 表示自动计算维度，reshape 和 view 均可使用</span></span><br><span class="line">new2 = previous.view(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new1.shape)  <span class="comment"># torch.Size([12, 10])</span></span><br><span class="line"><span class="built_in">print</span>(new2.shape)  <span class="comment"># torch.Size([6, 20])</span></span><br></pre></td></tr></table></figure><blockquote><p>如果经过了 <code>permute</code> <code> transpose</code> 维度交换，则需要先连续化内存，使用 <code>.contiguous()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">previous = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存不连续</span></span><br><span class="line">new = previous.permute((<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>))  <span class="comment"># torch.Size([3, 2, 5, 4])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续化然后变换维度</span></span><br><span class="line">current = new.contiguous().view(<span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># current = new.reshape(6, 20)  # 或者直接 reshape</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(current.shape)  <span class="comment"># torch.Size([6, 20])</span></span><br></pre></td></tr></table></figure><h3 id="8-3-维度压缩、扩展、拼接-squeeze-unsqueeze-cat">8.3 维度压缩、扩展、拼接 <code>squeeze</code> <code>unsqueeze</code> <code>cat</code></h3><ul><li>维度压缩 <code>torch.squeeze()</code></li></ul><p><code>torch.squeeze(input, dim=None)</code> 用于移除张量中大小为1的维度。如果不指定 <code>dim</code>，则会移除所有大小为1的维度；如果指定了 <code>dim</code>，则只会移除该维度（如果该维度大小为1）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">x = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># torch.Size([1, 3, 1, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除所有大小为1的维度</span></span><br><span class="line">y = torch.squeeze(x)</span><br><span class="line"><span class="built_in">print</span>(y.shape)   <span class="comment"># torch.Size([3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只移除第2个维度（索引从0开始）</span></span><br><span class="line">z = torch.squeeze(x, dim=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)  <span class="comment"># torch.Size([1, 3, 2])</span></span><br></pre></td></tr></table></figure><ul><li>维度扩展 <code>torch.unsqueeze()</code></li></ul><p><code>torch.unsqueeze(input, dim)</code> 用于在指定的位置插入一个大小为1的维度。<code>dim</code> 参数指定了新维度插入的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">2</span>)    <span class="comment"># torch.Size([3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第0维插入一个大小为1的维度</span></span><br><span class="line">y = torch.unsqueeze(x, dim=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(y.shape)           <span class="comment"># torch.Size([1, 3, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第1维插入一个大小为1的维度</span></span><br><span class="line">z = torch.unsqueeze(x, dim=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)           <span class="comment"># torch.Size([3, 1, 2])</span></span><br></pre></td></tr></table></figure><ul><li>维度拼接 <code>torch.cat()</code></li></ul><p><code>torch.cat(tensors, dim=d)</code> 用于在指定的维度上拼接多个张量。所有张量在除了 <code>dim=d</code> 维度之外的其它维度上<strong>必须具有相同的形状</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">1</span>, <span class="number">4</span>)       <span class="comment"># dim=1 维度均为 3 故可以在dim=0上拼接</span></span><br><span class="line">y = torch.randn(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第0维上拼接</span></span><br><span class="line">z = torch.cat((x, y), dim=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(z.shape)           <span class="comment"># torch.Size([3, 4])  # 1 + 2 = 3</span></span><br></pre></td></tr></table></figure><h2 id="9-GPU-加速">9 GPU 加速</h2><p>利用 GPU 的并行计算能力能加速模型的计算。Pytorch提供了2种将tensor推至GPU的方法。</p><ul><li><code>.cuda()</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = x.cuda()  <span class="comment"># 将 Tensor 转移到默认的 GPU</span></span><br></pre></td></tr></table></figure><ul><li><code>.to(device)</code> 方法【推荐】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">x = x.to(device)  <span class="comment"># 将 Tensor 转移到指定的设备，如果失败则继续在CPU计算</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> torch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(torch.cuda.is_available)</span><br><span class="line">&lt;function is_available at <span class="number">0x0000024B63F50720</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>device</span><br><span class="line">device(<span class="built_in">type</span>=<span class="string">&#x27;cuda&#x27;</span>, index=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.to(device)</span><br><span class="line">tensor([[-<span class="number">0.1888</span>,  <span class="number">0.0827</span>, -<span class="number">1.2929</span>],</span><br><span class="line">        [ <span class="number">2.1295</span>,  <span class="number">1.6174</span>, -<span class="number">1.4917</span>]], device=<span class="string">&#x27;cuda:0&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Pytorch 神经网络框架，本文介绍 Tensor 张量数据结构，包括：如何创建、对张量的操作和 GPU 加速等。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（3）运算符与 SQL 的正则表达式</title>
    <link href="https://blog.iskage.online/posts/a7d82995.html"/>
    <id>https://blog.iskage.online/posts/a7d82995.html</id>
    <published>2025-02-07T07:51:00.000Z</published>
    <updated>2025-02-19T11:26:34.168Z</updated>
    
    <content type="html"><![CDATA[<h1>运算符与 SQL 的正则表达式</h1><h2 id="本文笔记根据【b站-尚硅谷-宋红康-MySQL-课程】整理。笔记和代码存储在我的-GitHub-库中-github-com-isKage-sql-notes。">本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</h2><h2 id="1-算术运算符">1 算术运算符</h2><p>包括：<code>+, -, *, /, %</code> 加、减、乘、除、取模运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a <span class="operator">+</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">-</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">*</span> b;</span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">/</span> b; <span class="comment">-- or SELECT a DIV b;</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">%</span> b; <span class="comment">-- or SELECT a MOD b;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-加减运算">1.1 加减运算 <code>+ -</code></h3><ul><li><p><code>int + int = int</code> <code>float + float = float</code> 但 <code>int + float = float</code></p></li><li><p>只针对数值型计算，若为字符串，则先转化，若转换失败，则按照 <code>0</code> 计算</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">1.2</span>, <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="number">4</span>, <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">+</span> <span class="number">1.2</span> <span class="operator">|</span> <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="number">4</span> <span class="operator">|</span> <span class="string">&#x27;3&#x27;</span> <span class="operator">+</span> <span class="string">&#x27;4&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">+</span> <span class="number">3</span> <span class="operator">|</span> <span class="comment">-- &#x27;a&#x27; 转换失败，按照 0 计算</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">101.2</span> <span class="operator">|</span>       <span class="number">7</span> <span class="operator">|</span>         <span class="number">7</span> <span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------+-----------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-2-乘除运算">1.2 乘除运算 <code>* /</code></h3><ul><li><code>int * int = int</code> <code>int * float = float</code> 而 <code>/</code> 除法最后一定是 <code>float</code> 类型结果</li><li><code>number / 0 = NULL</code> 除以 <code>0</code> 则为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1</span>, <span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span>, <span class="number">100</span> <span class="operator">/</span> <span class="number">1</span>, <span class="number">100</span> DIV <span class="number">0</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">/</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">100</span> DIV <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span>     <span class="number">100.0</span> <span class="operator">|</span> <span class="number">100.0000</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-3-取模运算">1.3 取模运算 <code>%</code></h3><ul><li><code>A % B</code> 表示 <code>A</code> 除以 <code>B</code> 的余数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">20</span>, <span class="number">100</span> <span class="operator">%</span> <span class="number">99</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">20</span> <span class="operator">|</span> <span class="number">100</span> <span class="operator">%</span> <span class="number">99</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="2-比较运算符">2 比较运算符</h2><p>比较结果为<strong>真</strong>返回<code>1</code></p><p>比较结果为<strong>假</strong>返回<code>0</code></p><p><strong>其他情况</strong>返回 <code>NULL</code></p><p>包括：<code>=, &lt;=&gt;, &lt;&gt;(!=), &lt;, &lt;=, &gt;, &gt;=</code> 等号、安全等号、不等号、小于、小于等于、大于、大于等于</p><h3 id="2-1-等号比较">2.1 等号比较 <code>=</code></h3><p>判断等号两边的值、字符串或表达式是否相等，如果相等则返回 <code>1</code>，不相等则返回 <code>0</code></p><ul><li>字符串与字符串比较，值与值比较</li><li>若为字符串与值比较，则将字符串转换为值 <code>int = str -&gt; int = int(str)</code> 注意：转换失败则为 <code>0</code></li><li>有一个为 <code>NULL</code> 则返回 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span>, <span class="number">2</span> <span class="operator">=</span> <span class="number">3</span>, <span class="number">2</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bc&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bc&#x27;</span>, <span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> <span class="comment">-- &#x27;a&#x27; 转换失败则为 0</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+---------+-------------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-2-安全等号">2.2 安全等号 <code>&lt;=&gt;</code></h3><p><code>&lt;=&gt;</code> 会把 <code>NULL</code> 当作一个特殊的元素，参与比较，不再返回 <code>NULL</code> 。其他返回结果与等于运算符相同。</p><ul><li>安全等号 <code>&lt;=&gt;</code> 两边的操作数的值都为<code>NULL</code> 时，返回的结果为 <code>1</code> 。</li><li>安全等号 <code>&lt;=&gt;</code> 一边为 <code>NULL</code> ，一边不为 <code>NULL</code> 时，返回 <code>0</code> 。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>        <span class="keyword">NULL</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----------+-------------+------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-3-不等于比较-or">2.3 不等于比较 <code>!= or &lt;&gt;</code></h3><p>判断等号两边的值、字符串或表达式是否不相等，如果不相等则返回 <code>1</code>，相等则返回 <code>0</code></p><ul><li>与等号比较类似，面对 <code>NULL</code> 无论比较结果如何，最后均返回 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">2</span>, <span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span>, <span class="number">2</span> <span class="operator">!=</span> <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;bc&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;bc&#x27;</span>, <span class="number">0</span> <span class="operator">!=</span><span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">!=</span> <span class="string">&#x27;2&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">!=</span> <span class="string">&#x27;bc&#x27;</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">!=</span><span class="string">&#x27;a&#x27;</span> <span class="operator">|</span> <span class="string">&#x27;&#x27;</span> <span class="operator">!=</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>            <span class="number">0</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+----------+--------------+---------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="2-4-大于小于">2.4 大于小于 <code>&gt;, &lt;, &gt;=, &lt;=</code></h3><p>性质和等于 <code>=</code>，不等于 <code>!= or &lt;&gt;</code> 相同</p><ul><li>比较结果为<strong>真</strong>返回<code>1</code> 比较结果为<strong>假</strong>返回<code>0</code> <strong>其他情况</strong>返回 <code>NULL</code></li><li>面对 <code>NULL</code> 无论比较结果如何，最后均返回 <code>NULL</code></li></ul><h2 id="3-其他类型运算符">3 其他类型运算符</h2><h3 id="3-1-空运算符-ISNULL-IS-NULL">3.1 空运算符 <code>ISNULL, IS NULL</code></h3><p>是否为 <code>NULL</code> ，如果为 <code>NULL</code> 则返回 <code>1</code> ，否则返回 <code>0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>, ISNULL(<span class="keyword">NULL</span>), ISNULL(<span class="string">&#x27;a&#x27;</span>), <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span> ISNULL(<span class="keyword">NULL</span>) <span class="operator">|</span> ISNULL(<span class="string">&#x27;a&#x27;</span>) <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+--------------+-------------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>结合之前的安全等号，从表中寻找 <code>NULL</code> 有如下方法 （注：等号，不等号，大小于符号无法处理空值问题）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> ISNULL(commission_pct);</span><br><span class="line"><span class="keyword">SELECT</span> email, commission_pct <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> commission_pct <span class="operator">=</span> <span class="keyword">NULL</span>; <span class="comment">-- 查询失败</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738900575560.png" alt=""></p><h3 id="3-2-非空运算符-IS-NOT-NULL">3.2 非空运算符 <code>IS NOT NULL</code></h3><p>是否为 <code>NULL</code> ，如果为 <code>NULL</code> 则返回 <code>0</code> ，否则返回 <code>1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>, <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>, <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">0</span> <span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-最小值运算符-LEAST">3.3 最小值运算符 <code>LEAST()</code></h3><p>返回 <code>LEAST(a1, a2, ..., ai, ..., an)</code> 中的最小值</p><ul><li>当 <code>ai</code> 是 <code>int</code> 或者 <code>float</code> 时，<code>LEAST</code> 将返回其中最小的值</li><li>当 <code>ai</code> 为 <code>str</code> 时，返回字母表中顺序最靠前的字符</li><li>当列表中有 <code>NULL</code> 时，返回值为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> LEAST(<span class="number">1</span>, <span class="number">2</span>), LEAST(<span class="number">1.2</span>, <span class="number">3</span>), LEAST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>), LEAST(<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> LEAST(<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> LEAST(<span class="number">1.2</span>, <span class="number">3</span>) <span class="operator">|</span> LEAST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>) <span class="operator">|</span> LEAST(<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>           <span class="number">1.2</span> <span class="operator">|</span> ac               <span class="operator">|</span>           <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+---------------+------------------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-4-最大值运算符-GREATEST">3.4 最大值运算符 <code>GREATEST()</code></h3><p>返回 <code>GREATEST(a1, a2, ..., ai, ..., an)</code> 中的最大值</p><ul><li>当 <code>ai</code> 是 <code>int</code> 或者 <code>float</code> 时，<code>GREATEST</code> 将返回其中最大的值</li><li>当 <code>ai</code> 为 <code>str</code> 时，返回字母表中顺序最靠后的字符</li><li>当列表中有 <code>NULL</code> 时，返回值为 <code>NULL</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> GREATEST(<span class="number">1</span>, <span class="number">2</span>), GREATEST(<span class="number">1.2</span>, <span class="number">3</span>), GREATEST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>), GREATEST(<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> GREATEST(<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> GREATEST(<span class="number">1.2</span>, <span class="number">3</span>) <span class="operator">|</span> GREATEST(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>) <span class="operator">|</span> GREATEST(<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span>              <span class="number">2</span> <span class="operator">|</span>              <span class="number">3.0</span> <span class="operator">|</span> b                   <span class="operator">|</span>              <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+------------------+---------------------+-------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-5-判断是否区间中的值-BETWEEN-AND">3.5 判断是否区间中的值 <code>BETWEEN ... AND ...</code></h3><p>寻找位于 <code>[a, b]</code> 中与否，即大于等于 <code>a</code> 小于等于 <code>b</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">BETWEEN</span> a <span class="keyword">AND</span> b;</span><br></pre></td></tr></table></figure><p>例如，是则为 <code>1</code> 否则返回 <code>0</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">5</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span>, <span class="number">0.4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">6</span>, <span class="string">&#x27;x&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="operator">|</span> <span class="number">0.4</span> <span class="keyword">BETWEEN</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="number">6</span> <span class="operator">|</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;z&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span>                   <span class="number">0</span> <span class="operator">|</span>                       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------------------+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>完整的查表运用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">2500</span> <span class="keyword">AND</span> <span class="number">3500</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738901321018.png" alt=""></p><h3 id="3-6-属于运算符-IN">3.6 属于运算符 <code>IN</code></h3><p>判断元素是否属于列表中，类似的，只要存在 <code>NULL</code> 则返回值为 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;&#x27;</span>, <span class="number">2</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span>                 <span class="number">1</span> <span class="operator">|</span>            <span class="keyword">NULL</span> <span class="operator">|</span>                  <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------------+-----------------+--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-7-不属于运算符-NOT-IN">3.7 不属于运算符 <code>NOT IN</code></h3><p>判断元素是否不属于列表，类似的，只要存在 <code>NULL</code> 则返回值为 <code>NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>), <span class="keyword">NULL</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>, <span class="number">3</span>) <span class="operator">|</span> <span class="keyword">NULL</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="number">2</span>) <span class="operator">|</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">1</span>, <span class="keyword">NULL</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">1</span> <span class="operator">|</span>               <span class="keyword">NULL</span> <span class="operator">|</span>                 <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------+----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-8-模糊匹配-LIKE">3.8 模糊匹配 <code>LIKE</code></h3><p>模糊匹配<u>字符串</u>，如果满足条件则返回 <code>1</code> ，否则返回 <code>0</code> 。同样，遇 <code>NULL</code> 则 <code>NULL</code></p><ul><li>通配符：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;%&#x27;</span> <span class="comment">-- 匹配 0 个或多个字符。</span></span><br><span class="line"><span class="string">&#x27;_&#x27;</span> <span class="comment">-- 只能匹配一个字符。</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;  <span class="comment">-- 匹配 first_name 字段以 S 开头的字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738903197390.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;  <span class="comment">-- 匹配 last_name 字段形如 &#x27;一个字母 + o&#x27; 开头的字符串</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738903166457.png" alt=""></p><h3 id="3-9-利用-ESCAPE-处理特殊字符">3.9 利用 <code>ESCAPE</code> 处理特殊字符</h3><p>当需要查询的元素中包含特殊字符，如 <code>%, _, $</code> 等。可以使用 <code>\</code> 或其他字符（除 <code>\</code> 其他字符需要 <code>ESCAPE</code> 指明为转义字符）处理。</p><ul><li>例如：我们需要查询形如 <code>增长50%左右</code> ，即匹配以任意字符开头，接着是 <code>50%</code>，最后是任意字符的字符串。所以可以采取 <code>'%50\%%'</code> 或 <code>'%50$%%' ESCAPE '$'</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;IT$_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;$&#x27;</span>;  <span class="comment">-- 指定 &#x27;$&#x27; 为转义字符，&#x27;$&#x27; 后的 &#x27;_&#x27; 为普通字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;IT@_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;@&#x27;</span>;  <span class="comment">-- 指定 &#x27;@&#x27; 为转义字符，&#x27;@&#x27; 后的 &#x27;_&#x27; 为普通字符</span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> job_id  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="operator">|</span> IT_PROG <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-逻辑运算符">4 逻辑运算符</h2><p>逻辑运算符的返回结果为 <code>1, 0, NULL</code></p><p>逻辑运算符大多符合直觉，并不复杂</p><h3 id="4-1-非-运算符-NOT-或">4.1 非 运算符 <code>NOT</code> 或 <code>!</code></h3><ul><li><code>!0 -&gt; 1</code> 值为0时返回1</li><li><code>!非0 -&gt; 0</code> 值为非0值时返回0</li><li><code>!NULL -&gt; NULL</code> 值为NULL时，返回NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NOT</span> <span class="number">1</span>, <span class="keyword">NOT</span> <span class="number">0</span>, <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>), <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span>, <span class="keyword">NOT NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="number">0</span> <span class="operator">|</span> <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>) <span class="operator">|</span> <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span> <span class="operator">|</span> <span class="keyword">NOT NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">0</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span>        <span class="number">0</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+----------+--------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-2-与-运算符-AND-或">4.2 与 运算符 <code>AND</code> 或 <code>&amp;&amp;</code></h3><ul><li><p><code>非0非NULL &amp;&amp; 非0非NULL -&gt; 1</code> 所有值均为非0值，并且都不为NULL时，返回1</p></li><li><p><code>0 &amp;&amp; ... -&gt; 0</code>一个值或者多个值为0时则返回0</p></li><li><p><code>NULL &amp;&amp; ... -&gt; NULL</code>否则返回NULL</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------+------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>例如：查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;=</span><span class="number">10000</span></span><br><span class="line">  <span class="keyword">AND</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%MAN%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738906355775.png" alt=""></p><h3 id="4-3-或-运算符-OR-或">4.3 或 运算符 <code>OR</code> 或 <code>||</code></h3><ul><li><code>非0非NULL || 非NULL -&gt; 1</code> 值都不为NULL，并且任何一个值为非0值时，则返回1</li><li><code>0 || 0 -&gt; 0</code> 否则返回0；</li><li><code>非0非NULL || NULL -&gt; 1</code> 当一个值为NULL，并且另一个值为非0值时，返回1，否则为NULL</li><li><code>NULL || NULL</code> 当两个值都为NULL时，返回NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">3</span>, <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span>, <span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">NULL</span>, <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="keyword">OR</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span>      <span class="keyword">NULL</span> <span class="operator">|</span>         <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------+-----------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">2</span> warnings (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>AND</code> 的优先级高于 <code>OR</code> ，先处理与逻辑，再考虑或逻辑</p></blockquote><h3 id="4-4-异或-运算符-XOR">4.4 异或 运算符 <code>XOR</code></h3><ul><li>存在 <code>NULL</code>时，则返回 <code>NULL</code></li><li>都<code>非0非NULL</code>，则返回 <code>0</code></li><li><code>0 XOR 0 -&gt; 0</code> 都 <code>0</code> 则返回 <code>0</code></li><li>一个为 <code>0</code>，另一个 <code>非0非NULL</code> ，则返回 <code>1</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">NULL</span> XOR <span class="number">1</span>, <span class="number">2</span> XOR <span class="number">3</span>, <span class="number">0</span> XOR <span class="number">0</span>, <span class="number">0</span> XOR <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> XOR <span class="number">1</span> <span class="operator">|</span> <span class="number">2</span> XOR <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">0</span> <span class="operator">|</span> <span class="number">0</span> XOR <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="number">0</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+---------+---------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="5-位运算符">5 位运算符</h2><p>位运算符会先将操作数变成<strong>二进制数</strong>，然后进行位运算，最后将计算结果从二进制变回<strong>十进制数</strong></p><p>位运算在所有语言中均类似，不过多介绍。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&amp;</span> b;   <span class="comment">-- 按位与</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">|</span> b;   <span class="comment">-- 按位或</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">^</span> b;   <span class="comment">-- 按位异或</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">~</span> a;     <span class="comment">-- 按位取反</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&gt;&gt;</span> <span class="number">2</span>;  <span class="comment">-- 按位右移</span></span><br><span class="line"><span class="keyword">SELECT</span> a <span class="operator">&lt;&lt;</span> <span class="number">2</span>;  <span class="comment">-- 按位左移</span></span><br></pre></td></tr></table></figure><h2 id="6-优先级">6 优先级</h2><p>优先级越高，越先运算</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738911612091.png" alt="优先级由高到低 1-&gt;8"></p><blockquote><p>建议使用多个计算式，均使用 <code>()</code></p></blockquote><h2 id="7-正则表达式">7 正则表达式</h2><p>正则表达式在各种语言中均类似，下面介绍 <code>SQL</code> 语言中 <code>REGEXP</code> 的使用</p><h3 id="7-1-REGEXP-的使用">7.1 <code>REGEXP</code> 的使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 列名 REGEXP 匹配条件(正则表达式);</span><br></pre></td></tr></table></figure><h3 id="7-2-常见正则表达式">7.2 常见正则表达式</h3><h4 id="7-2-1-匹配起始字符">7.2.1 匹配起始字符 <code>^</code></h4><ul><li>表达式 <code>^K</code> 以 <code>K</code> 起始的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^K&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912114205.png" alt=""></p><h4 id="7-2-2-匹配结尾字符">7.2.2 匹配结尾字符 <code>$</code></h4><ul><li>表达式 <code>t$</code> 以 <code>t</code> 结尾的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> first_name REGEXP <span class="string">&#x27;t$&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912256452.png" alt=""></p><h4 id="7-2-3-匹配单个字符">7.2.3 匹配单个字符 <code>.</code></h4><ul><li>表达式 <code>a.b</code> 包含字母 <code>a</code> 和 <code>b</code> 且 <code>a</code> 和 <code>b</code> 之间只有一个字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;a.b&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912435878.png" alt=""></p><h4 id="7-2-4-匹配多个字符">7.2.4 匹配多个字符 <code>+</code> <code>*</code></h4><ul><li>表达式 <code>ba+</code> 包含字符串 <code>...ba...</code> 其中 <code>+</code> 要求多个 <code>a</code></li></ul><blockquote><p><code>+</code> 要求 <strong>1次或多次</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;^ba+&#x27;</span>; <span class="comment">-- 包含 ba... ^b 要求必须以 b 开头</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738912757500.png" alt=""></p><ul><li>表达式 <code>b*an</code> 包含 <code>...b...an</code> 其中 <code>*</code> 要求多个 <code>b</code></li></ul><blockquote><p><code>*</code> 要求 <strong>0次或多次</strong></p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913126980.png" alt=""></p><h4 id="7-2-5-匹配特定字符串">7.2.5 匹配特定字符串 <code>''</code></h4><ul><li>表达式 <code>'un'</code> 包含 <code>un</code> 即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;un&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注：可以使用逻辑运算符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;un|am&#x27;</span>;  <span class="comment">-- 包含 un 或 am</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913338905.png" alt=""></p><h4 id="7-2-6-匹配集合中任一元素">7.2.6 匹配集合中任一元素 <code>[]</code></h4><ul><li>表达式 <code>[orz]</code> 包含<code>o</code> <code>r</code> <code>z</code> 任一一个即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name REGEXP <span class="string">&#x27;[orz]&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738913543623.png" alt=""></p><h4 id="7-2-7-匹配完全由集合外的元素构成">7.2.7 匹配完全由集合外的元素构成 <code>[^]</code></h4><ul><li>表达式 <code>[^A-Y]</code> 表示只有当元素是有A-Y以外的元素构成时才被查询到。注意：大小写敏感。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email REGEXP <span class="string">&#x27;[^A-Y]&#x27;</span>; <span class="comment">-- 查询存在 小写字母 或 Z</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738914108381.png" alt=""></p><h4 id="7-2-8-使用-n-或者-n-m-来指定字符串连续出现的次数">7.2.8 使用 <code>&#123;n,&#125;</code> 或者 <code>&#123;n,m&#125;</code> 来指定字符串连续出现的次数</h4><ul><li>表达式 <code>a&#123;2,&#125;</code> 表示字母 <code>a</code> 连续出现至少2次</li><li>表达式 <code>a&#123;2,4&#125;</code> 表示字母 <code>a</code> 连续出现最少2次，最多不能超过4次</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary REGEXP <span class="string">&#x27;0&#123;2,3&#125;&#x27;</span>; <span class="comment">-- 连续 2-3 个 0</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738914541747.png" alt=""></p>]]></content>
    
    
    <summary type="html">本文详细介绍 数据库查询语言 SQL 的各种运算符：算术、比较、逻辑、位，以及正则表达式在查询语言中的应用</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（2）SELECT 语句</title>
    <link href="https://blog.iskage.online/posts/151eef00.html"/>
    <id>https://blog.iskage.online/posts/151eef00.html</id>
    <published>2025-02-06T09:52:00.000Z</published>
    <updated>2025-02-19T11:26:24.401Z</updated>
    
    <content type="html"><![CDATA[<h1>SELECT语句</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h2 id="1-SQL-语言">1 SQL 语言</h2><h3 id="1-1-书写规则">1.1 书写规则</h3><ul><li>一行或多行</li><li>以 <code>;</code> 分隔</li><li>字符串型 和 日期时间类型 的数据使用 <code>''</code> 表示</li><li>列的别名使用 <code>&quot;&quot;</code> 表示</li><li>建议关键字、函数名大写</li></ul><h3 id="1-2-注释">1.2 注释</h3><p>单行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注释文字 (MySQL特有)</span><br><span class="line"><span class="comment">-- 注释文字</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释文字 */</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数据导入-运行-sql文件">1.3 数据导入 (运行<code>.sql</code>文件)</h3><p>登陆 <code>MySQL</code> 后，输入指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source xx.sql  <span class="comment">-- 输入路径</span></span><br></pre></td></tr></table></figure><p>在学习语句前，先下载 <a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/docs/mydb.sql">mydb.sql 文件</a> ，之后使用数据导入的方式，运行 <code>mydb.sql</code> 创建数据库 <code>atguigudb</code> 以便后续操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source .<span class="operator">/</span>xxx<span class="operator">/</span>mydb.sql  <span class="comment">-- mac 电脑</span></span><br><span class="line">mysql<span class="operator">&gt;</span> source C:\Users\Username\xxx\mydb.sql  <span class="comment">-- windows 电脑</span></span><br></pre></td></tr></table></figure><blockquote><p>该文件来自 <a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a></p></blockquote><h2 id="2-基本-SELECT-语句">2 基本 SELECT 语句</h2><blockquote><p>首先先进入刚刚创建的数据库 <code>atguigudb</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> USE atguigudb;</span><br></pre></td></tr></table></figure><h3 id="2-1-SELECT-…-FROM-…">2.1 SELECT … FROM …</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 选择哪些列</span><br><span class="line"><span class="keyword">FROM</span> 从哪个表中选择</span><br></pre></td></tr></table></figure><ul><li>选择所有列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>选择表中特定的列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-2-列的别名">2.2 列的别名</h3><p>可以在列名后紧跟别名，也可以使用关键字 <code>AS</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id emp_id,</span><br><span class="line">    last_name <span class="keyword">AS</span> lname,</span><br><span class="line">    department_id &quot;dept_id&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738834180268.png" alt=""></p><p>也可以对整列进行计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_id emp_id,</span><br><span class="line">    salary <span class="operator">*</span> <span class="number">12</span> &quot;annual salary&quot;  <span class="comment">-- 对 salary 整列计算</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-3-去除重复行">2.3 去除重复行</h3><p>默认情况不会去除重复行</p><p>在 <code>SELECT</code> 语句中增加关键字 <code>DISTINCT</code> 即可返回去除重复行后的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 12 rows</span></span><br></pre></td></tr></table></figure><blockquote><p>注：若 <code>DISTINCT</code> 后存在多个字段，只要两行之间有某个字段不同，则不认为重复</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 74 rows</span></span><br></pre></td></tr></table></figure><p>例如：对 <code>department_id, salary</code> 去重，虽然部门只有 <code>12</code> 个，但因为 <code>salary</code> 仍有一些不同，故认为并不重复。</p><h3 id="2-4-空值-null-参与计算">2.4 空值 <code>null</code> 参与计算</h3><p>遇到 <code>null</code> 值，运算的结果都为 <code>null</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, salary &quot;月工资&quot;, salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> commission_pct) <span class="operator">*</span> <span class="number">12</span> &quot;年工资&quot;, commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738834695370.png" alt=""></p><h3 id="2-5-着重号-解决关键字冲突">2.5 着重号 <code>``</code> 解决关键字冲突</h3><p>如果不得不使用关键字命名，则可以使用 <code>``</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">order</span>;</span><br><span class="line"><span class="comment">-- 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">order</span>`;</span><br><span class="line"><span class="comment">-- 正确</span></span><br></pre></td></tr></table></figure><h3 id="2-6-增加常值列">2.6 增加常值列</h3><p>增加一列命名为 <code>temp_const</code> （字符串用 <code>''</code>）用数字 <code>123</code> 填充</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">123</span> <span class="keyword">AS</span> <span class="string">&#x27;temp_const&#x27;</span>, employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738835171143.png" alt=""></p><h2 id="3-查询表结构">3 查询表结构</h2><p>使用 <code>DESCRIBE</code> 或 <code>DESC</code> 命令，查询表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field          <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date      <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary         <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="4-WHERE-过滤条件">4 <code>WHERE</code> 过滤条件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">where</span> last_name <span class="operator">=</span> <span class="string">&#x27;King&#x27;</span> <span class="keyword">and</span> first_name <span class="operator">=</span> <span class="string">&#x27;Steven&#x27;</span>; <span class="comment">-- 过滤条件</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">90</span>; <span class="comment">-- 过滤条件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文详细介绍 SELECT 语句的基本使用</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>conda 创建虚拟环境全流程</title>
    <link href="https://blog.iskage.online/posts/2c3265b7.html"/>
    <id>https://blog.iskage.online/posts/2c3265b7.html</id>
    <published>2025-02-06T04:11:00.000Z</published>
    <updated>2025-02-15T06:34:23.981Z</updated>
    
    <content type="html"><![CDATA[<h1>conda 创建虚拟环境全流程</h1><h2 id="1-下载-Miniconda">1 下载 Miniconda</h2><p>前往<a href="https://www.anaconda.com/download">官网 https://www.anaconda.com/download</a>下载，需要提交邮箱，验证下载。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738812320257.png" alt=""></p><p>提交成功后，滑至底部，选择 [Miniconda Installers] ，因为它相比 [Anaconda] 更为精简。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/976615dc8f3b26708fe5dd4d932c3b4d_720.png" alt=""></p><blockquote><p>注：需要提前下载 <code>Python</code> ，可前去 <a href="https://www.python.org/downloads/">Python 官网</a> 下载</p></blockquote><h2 id="2-安装-Miniconda">2 安装 Miniconda</h2><p>先点击 [Next] ，而后点击 [I Agree] ，而后选择 [All Users] ，这将为电脑的所有用户安装【推荐】，然后选择 [Next]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/91d3b0a80dc3f5f623c41fb89a44a4f7.png" alt=""></p><p>之后，选择安装路径，可以根据自己的情况来，但要记住安装路径，因为之后要添加【环境变量】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/12b49c1abc490ecd4ca7a9fe63c6436f_720.png" alt=""></p><p>之后，三项【全部勾选】后安装即可。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f6f67e69c09729405b20ae42d4cbf2c2_720.png" alt=""></p><h2 id="3-配置环境变量">3 配置环境变量</h2><p>右键 [此电脑] ，选择 [属性] ，打开 [系统] 窗口，点击 [高级系统设置]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4ba1d54ca6830505fae9a8bc721ad076_720.png" alt=""></p><p>打开 [系统属性] ，选择 [高级] 选项，点击 [环境变量] 在 [环境变量] 窗口，选择 [path] 点击 [编辑] ，在 [编辑环境变量] 窗口中，将 Miniconda 如图所示配置。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/bf764dcc6b2bd4b546cf7fa43530c07e.png" alt=""></p><p>配置【三个路径】一般默认情况为，根据之前安装时的具体路径选择</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\miniconda3</span><br><span class="line">C:\ProgramData\miniconda3\Scripts</span><br><span class="line">C:\ProgramData\miniconda3\Library\bin</span><br></pre></td></tr></table></figure><blockquote><p>注：一定要点击确认，进行保存</p></blockquote><h2 id="4-Conda-的使用">4 Conda 的使用</h2><p>首先检查是否已经成功配置，在命令行/终端中输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; conda -V</span><br><span class="line">conda <span class="number">24.11</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>如果输出版本号，则说明环境配置成功，可正常使用</p><h2 id="5-创建环境">5 创建环境</h2><p>创建虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名 python=<span class="number">3.12</span></span><br></pre></td></tr></table></figure><p><code>环境名</code> 可自己定义，<code>python=x.x</code> 可省略</p><blockquote><p>注：必须在全局已经下载安装了 <code>Python</code></p></blockquote><h2 id="6-激活环境">6 激活环境</h2><p>激活已经创建的虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>退出激活的虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><h2 id="7-常见问题：Run-‘conda-init’-before-‘conda-activate’">7 常见问题：Run ‘conda init’ before ‘conda activate’</h2><p>当执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>时会遇到报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CondaError: Run <span class="string">&#x27;conda init&#x27;</span> before <span class="string">&#x27;conda activate&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>解决方法</p></blockquote><p>使用【管理员身份】打开【终端】，执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init</span><br></pre></td></tr></table></figure><p>然后回到重新执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><blockquote><p>如若仍然失败，则检查是否为下文的常见问题：无法加载文件 profile.ps1</p></blockquote><h2 id="8-常见问题：无法加载文件-profile-ps1">8 常见问题：无法加载文件 profile.ps1</h2><p>如果【已经使用管理员身份执行完】命令 <code>conda init</code> ，在重新打开终端时出现以下报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">. : 无法加载文件 C:\Users\Username\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=<span class="number">135170</span> 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:<span class="number">1</span> 字符: <span class="number">3</span></span><br><span class="line">+ . <span class="string">&#x27;C:\Users\15056\Documents\WindowsPowerShell\profile.ps1&#x27;</span></span><br><span class="line">+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>则可以【使用管理员身份】打开终端，执行以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Set</span>-ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure><p>而后关闭终端，重新打开</p><p>如果此时命令行前显示 <code>(base)</code> 则说明配置完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) PS C:\...</span><br></pre></td></tr></table></figure><p>此时使用，即可成功激活虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><h2 id="9-其他-conda-命令">9 其他 conda 命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs  <span class="comment"># 显示所有环境信息</span></span><br><span class="line">conda remove -n 环境名 --<span class="built_in">all</span>  <span class="comment"># 根据环境名删除虚拟环境，删除环境和所有该环境里安装的包</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">利用 Miniconda 更为轻便的搭建虚拟环境，包括了 下载、安装、环境变量配置、使用与常见问题收录</summary>
    
    
    
    <category term="conda" scheme="https://blog.iskage.online/categories/conda/"/>
    
    
    <category term="conda" scheme="https://blog.iskage.online/tags/conda/"/>
    
    <category term="虚拟环境" scheme="https://blog.iskage.online/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（1）如何安装 MySQL</title>
    <link href="https://blog.iskage.online/posts/8b09a768.html"/>
    <id>https://blog.iskage.online/posts/8b09a768.html</id>
    <published>2025-02-05T07:42:00.000Z</published>
    <updated>2025-02-11T08:08:43.800Z</updated>
    
    <content type="html"><![CDATA[<h1>详细教程：如何安装 MySQL</h1><p>MySQL 是数据库管理系统 DSMS 之一，本文介绍如何 <strong>下载、安装、配置、登陆、使用</strong> MySQL</p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><h2 id="1-下载">1 下载</h2><ol><li>前往官网：<a href="https://www.mysql.com">https://www.mysql.com</a></li><li>点击 - <a href="https://www.mysql.com/downloads/">Downloads</a></li></ol><p>点击 - <a href="https://dev.mysql.com/downloads/">MySQL Community (GPL) Downloads</a></p><p>社区版免费，且功能近似，适合学习使用。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738735763767.png" alt=""></p><ol start="3"><li>点击 - <a href="https://dev.mysql.com/downloads/mysql/">MySQL Community Server</a></li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738735912017.png" alt=""></p><ol start="4"><li>选择版本</li></ol><p>推荐使用 <code>8.0.x</code> 版本，相比旧版本 <code>5.0.x</code> 更为完善。点击 - <a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">Go to Download Page</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738736158523.png" alt=""></p><p>选择 <code>.msi</code> 的安装程序。选择图中的程序下载，配有图形化安装流程，支持离线安装。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1738736235034.png" alt=""></p><blockquote><p>注：下载需要注册 ORACLE 甲骨文公司账户</p></blockquote><h2 id="2-安装">2 安装</h2><ol><li>找到文件 <code>mysql-installer-community-8.0.41.0.msi</code> ，双击进入安装。</li><li>在 [Choosing a Setup Type] - 窗口中选择 自定义安装 [Custom]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/6fb510a37d115e06be126a4e7bde91eb.png" alt=""></p><ol start="3"><li>在 [Select Products] 窗口中，选择产品。从左边选择想要安装的产品，而后显示在右边。</li></ol><blockquote><p>注：如想自定义安装路径，见后。</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/0dddb331420bff1755778e44b880e51b_720.png" alt=""></p><p>自定义安装路径，则需要选择产品，点击 [Advanced Options]</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/ba921bd680af66e88223a0b7e3720285_720.png" alt=""></p><ol start="4"><li>在 [Installation] 窗口，点击 [Execute] 开始安装</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f32f54e134c74322b24711806c2996ce_720.png" alt=""></p><p>安装完成点击 [Next]</p><ol start="5"><li>在 [Product Configuration] 窗口，开始配置，点击 [Next]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/29078465616e9aff29a15b4119d4f07a_720.png" alt=""></p><p>保持默认即可，点击 [Next]</p><p>[Config Type] 为主机类型，[Port: 3306] 为端口号</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/9bcda347f6bbca58df8843f38c178a78_720.png" alt=""></p><ol start="6"><li>在 [Authentication Method] 窗口，可以设置授权方式。默认，直接点击 [Next]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/f1754354d7e0302717a9c1fc4c528c02_720.png" alt=""></p><ol start="7"><li>在 [Accounts and Roles] 界面设置管理员密码。用于登陆 MySQL 服务</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/dfb3117e767af332e6b2822ff27a0654_720.png" alt=""></p><ol start="8"><li>在 [Windows Service] 界面设置 [服务] ，保持默认即可。</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/d3129dd2ba331425f9e7892a0b81b087_720.png" alt=""></p><ol start="9"><li>在 [Server File Permissions] 中授权，保持默认即可</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/33bcd45652a5178ddd35788211bbfc93_720.png" alt=""></p><ol start="10"><li>在 [Apply Configuration] 点击 [Execute] 执行之前的配置</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/79ce3831a4322e41691869175c54a604_720.png" alt=""></p><p>点击 [Finish] 完成配置</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/e7357753070eaa02ec50024aa28556a2_720.png" alt=""></p><ol start="11"><li>完成安装</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/40579a68dcdadf9f09e6c3c517e83525_720.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/494e644125931e21cf86124bb5e9d67c.png" alt=""></p><h2 id="3-环境变量">3 环境变量</h2><p>没有配置 MySQL 到环境变量中，终端无法运行 MySQL 命令。</p><ol><li>右键 [此电脑] ，选择 [属性]</li><li>打开 [系统] 窗口，点击 [高级系统设置]</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4ba1d54ca6830505fae9a8bc721ad076_720.png" alt=""></p><ol start="3"><li>打开 [系统属性] ，选择 [高级] 选项，点击 [环境变量]</li><li>在 [环境变量] 窗口，选择 [path]</li><li>点击 [编辑] ，在 [编辑环境变量] 窗口中，将 MySQL 的 bin 目录添加进去，使用分号 <code>;</code> 划分</li></ol><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/3648923a3ca1b07903f3e18b967dd1f9.png" alt=""></p><p>输入 MySQL 的 bin 目录 (根据自己的目录输入)，如果没有更改默认下载路径，则一般为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 8.0\bin</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/e1c8475465d768bc72da4b2b085ae4a1.png" alt=""></p><ol start="6"><li>点击 [确认] ，回到终端尝试使用 MySQL 指令</li></ol><p>检查是否成功，输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> mysql <span class="operator">-</span>V</span><br></pre></td></tr></table></figure><p>返回版本信息则代表成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server <span class="number">8.0</span>\bin\mysql.exe  Ver <span class="number">8.0</span><span class="number">.41</span> <span class="keyword">for</span> Win64 <span class="keyword">on</span> x86_64 (MySQL Community Server <span class="operator">-</span> GPL)</span><br></pre></td></tr></table></figure><h2 id="4-查看服务">4 查看服务</h2><p>需要启动服务，才能登陆 MySQL 并连接数据库。在之前配置时，已经默认服务启动。</p><p>可以检查一下：右键 [此电脑] 点击 [管理] ，双击 [服务和应用程序] ，双击 [服务] ，找到 MySQL 的服务 （默认情况下为 <code>MySQL80</code>）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/c94326af2e1953a05b2a0a087f366e8c_720.png" alt=""></p><p>也可以使用终端实现。右键 [终端]/[命令行工具] 使用 <strong>以管理员身份运行</strong> ，而后使用如下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务 MySQL80 为 MySQL 的服务名</span><br><span class="line"><span class="operator">&gt;</span> net <span class="keyword">start</span> MySQL80</span><br><span class="line"></span><br><span class="line"># 停止服务 MySQL80 为 MySQL 的服务名</span><br><span class="line"><span class="operator">&gt;</span> net stop MySQL80</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4639db1363ba088fad5f91904369a021_720.png" alt=""></p><h2 id="5-登陆-MySQL">5 登陆 MySQL</h2><p>打开 [终端] 输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h 主机名 <span class="operator">-</span>P 端口名 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p密码</span><br></pre></td></tr></table></figure><p>一般而言 主机名为 <code>localhost</code> ，端口名为 <code>3306</code> ，用户名为 <code>root</code> ，密码和 <code>-p</code> 之间不能有空格。</p><p>推荐使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>进行登陆，之后输入密码即可登陆。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><p>登陆成功后为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">8</span></span><br><span class="line">Server version: <span class="number">8.0</span><span class="number">.41</span> MySQL Community Server <span class="operator">-</span> GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2025</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-简单尝试">6 简单尝试</h2><ol><li>查看已有数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名 <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_general_ci;  </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名</span><br></pre></td></tr></table></figure><ol start="3"><li>删除数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure><ol start="4"><li>进入数据库:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><ol start="5"><li>查看数据库下所有数据表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_test <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br><span class="line"><span class="operator">|</span> tb1            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------+</span></span><br></pre></td></tr></table></figure><ol start="6"><li>创建表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> 表名(</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型,</span><br><span class="line">  列名 类型</span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>e.g.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>不能为空/允许为空</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>, <span class="comment">-- 不能为空</span></span><br><span class="line">    age <span class="type">int</span> <span class="keyword">null</span>         <span class="comment">-- 可以为空</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>默认值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">default</span> <span class="number">3</span>        <span class="comment">-- 设置默认为3</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>主键</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span>,       <span class="comment">-- 不能为空，不能重复</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ul><li>一般设置，主键+自增 <code>标准</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> tb1(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary key</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><ol start="7"><li>删除表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><ol start="8"><li>展示表信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> tb1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">16</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文详细介绍如何 下载、安装、配置、登陆、使用 MySQL</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
