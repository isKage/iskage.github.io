<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isKage`Blog</title>
  
  <subtitle>Welcome :)</subtitle>
  <link href="https://blog.iskage.online/atom.xml" rel="self"/>
  
  <link href="https://blog.iskage.online/"/>
  <updated>2025-03-05T02:52:17.715Z</updated>
  <id>https://blog.iskage.online/</id>
  
  <author>
    <name>isKage</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 操作系统：命令帮助和快捷使用</title>
    <link href="https://blog.iskage.online/posts/50fa0735.html"/>
    <id>https://blog.iskage.online/posts/50fa0735.html</id>
    <published>2025-03-05T02:03:00.000Z</published>
    <updated>2025-03-05T02:52:17.715Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux 命令帮助和快捷使用</h1><h2 id="1-命令格式和选项">1 命令格式和选项</h2><h3 id="1-1-命令格式">1.1 命令格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@linux: ~$ ...</span><br></pre></td></tr></table></figure><ul><li><code>user</code> 表示当前用户</li><li><code>linux</code> 表示主机名</li><li><code>～</code> 表示当前目录，<code>~</code> 表示用户 home 目录</li><li><code>$</code> 表示用户类型，<code>$</code> 表示普通用户，<code>#</code> 表示 root 用户</li></ul><p>命令：一般一行一个命令，也允许多行，使用 <code>\</code> 表示这一行命令没有结束，多行的命令以 <code>&gt;</code> 起始。</p><p>命令格式：一般命令包括了三个部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [options] arguments</span><br></pre></td></tr></table></figure><ul><li><code>command</code> 代表命令，可以是别名、shell 内置命令、外部命令、shell 函数等</li><li><code>options</code> 代表选项，命令执行时要使用的可选的属性或者功能</li><li><code>arguments</code> 代表参数，是命令作用的对象，0 个或者多个</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="built_in">rm</span> -r ~/documents/doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># rm       是命令</span></span><br><span class="line"><span class="comment"># -r   是选项</span></span><br><span class="line"><span class="comment"># ~/documents/doc 是参数，即被执行的对象</span></span><br></pre></td></tr></table></figure><h3 id="1-2-命令格式：选项-options">1.2 命令格式：选项 [options]</h3><p>选项根据连字符 <code>-</code> 个数分为<strong>短选项</strong>和<strong>长选项</strong>：</p><ul><li>短选项：以 <code>-</code> 开始，紧跟单个字符。当选项无须参数时，可以合并单字符。</li><li>长选项：以 <code>--</code> 开始，紧跟单词。后跟参数采用 <code>--option=value</code> 等号前后都不能有空格。</li></ul><blockquote><p><em>几乎</em>所有命令都有 <code>--help</code> 和 <code>--version</code> 选项。</p></blockquote><h2 id="2-联机手册-man-命令">2 联机手册 man 命令</h2><p>对于外部命令，我们需要查看帮助文档。</p><ul><li>软件文档：一般存放在 <code>/usr/share/doc</code> 中，可通过 <code>less</code>、<code>zless</code> （查看压缩过的文本文件）和 <code>web</code> 浏览器（查看html文件）查看。</li><li><code>man</code> 命令查看联机手册，采用 <code>less</code> 分页查看。</li></ul><p>联机手册可以理解为一些命令的帮助文档，一般包含了：</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740989011537.png" style="zoom:33%;" /><ul><li><code>man cmd</code> ：查看名字为 cmd 的联机手册</li><li><code>whatis cmd</code> ：在索引库中查找命令名与 cmd 匹配的条目，并且仅仅显示这些条目的一句话的 NAME 信息</li><li><code>apropos cmd</code> ：在索引库中，基于命令名以及 NAME 部分的内容，查找与 cmd 匹配的条目，仅仅显示 NAME 信息</li></ul><h3 id="2-1-已知命令使用-man-查看帮助">2.1 已知命令使用 man 查看帮助</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man cmd  <span class="comment"># 查看 cmd 命令的联机手册 </span></span><br></pre></td></tr></table></figure><ul><li><code>-f</code> 查看名字匹配的命令的 NAME 部分的内容（whatis 提供类似更全面的功能）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -f <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">whatis <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> (1)               - list directory contents</span><br></pre></td></tr></table></figure><ul><li><code>-k</code> 搜索 NAME 部分，列出匹配的命令（apropos 提供类似更全面的功能）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man -k <span class="string">&#x27;list directory contents&#x27;</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">apropos –r <span class="string">&#x27;list directory contents&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740990211922.png" style="zoom:50%;" /><h3 id="2-2-whatis-通过匹配查找命令">2.2 whatis 通过匹配查找命令</h3><ul><li><code>whatis</code> 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whatis [options] name</span><br><span class="line"></span><br><span class="line">-e, --exact  : 采用精确匹配，默认</span><br><span class="line">-r, --regex  : 正则表达式匹配，命令名部分匹配</span><br><span class="line">-w, --wildcard   : 通配符匹配</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whatis -e <span class="built_in">ls</span>     <span class="comment"># 精确匹配 ls 与 man -f ls 等价</span></span><br><span class="line"></span><br><span class="line">whatis -r mkdi   <span class="comment"># 部分匹配，包含 mkdi 即可，会查找出 mkdir</span></span><br><span class="line"></span><br><span class="line">whatis -w <span class="string">&#x27;m*dir&#x27;</span><span class="comment"># 匹配 m 开始，dir 结束的命令</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740990706834.png" style="zoom:50%;" /><h3 id="2-3-apropos-通过-NAME-匹配命令">2.3 apropos 通过 NAME 匹配命令</h3><ul><li><code>apropos</code> 命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apropos [OPTION] keywords</span><br><span class="line"></span><br><span class="line">-r, --regex         : 默认，采用正则表达式，模糊匹配</span><br><span class="line">-e, --exact    : 采用精确匹配</span><br><span class="line">-w, --wildcard : 采用通配符匹配</span><br><span class="line">-a, --and : 匹配所有的关键字，缺省匹配任意一个</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apropos -r <span class="string">&#x27;list directory contents&#x27;</span></span><br><span class="line"></span><br><span class="line">apropos -e <span class="string">&#x27;list directory contents on&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740991383960.png" style="zoom:50%;" /><h2 id="3-内置命令帮助">3 内置命令帮助</h2><h3 id="3-1-help-查看内置命令帮助">3.1 help 查看内置命令帮助</h3><p><strong>外部命令</strong>：可独立运行的可执行程序</p><ul><li>例如 <code>ls</code> 可执行程序位于 <code>/usr/bin/ls</code></li></ul><p><strong>内置命令</strong>：当前正在执行的终端 shell 所提供的命令</p><ul><li><code>help</code> 内置命令可查看 shell 内置命令相应的帮助信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> [options] [arguments]</span><br><span class="line"></span><br><span class="line">-s : 仅查看语法</span><br><span class="line">-m : 以联机手册形式查看，即采用 less 分页方式查看帮助文档</span><br><span class="line"></span><br><span class="line">[arguments] 可以指定特定的命令</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> -s <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 </span></span><br><span class="line"><span class="built_in">cd</span>: <span class="built_in">cd</span> [-L|[-P [-e]] [-@]] [<span class="built_in">dir</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> <span class="keyword">for</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="keyword">for</span>: <span class="keyword">for</span> NAME [<span class="keyword">in</span> WORDS ... ] ; <span class="keyword">do</span> COMMANDS; <span class="keyword">done</span></span><br><span class="line">    Execute commands <span class="keyword">for</span> each member <span class="keyword">in</span> a list.</span><br><span class="line">    </span><br><span class="line">    The `<span class="keyword">for</span><span class="string">&#x27; loop executes a sequence of commands for each member in a</span></span><br><span class="line"><span class="string">    list of items.  If `in WORDS ...;&#x27;</span> is not present, <span class="keyword">then</span> `<span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span><span class="string">&#x27; is</span></span><br><span class="line"><span class="string">    assumed.  For each element in WORDS, NAME is set to that element, and</span></span><br><span class="line"><span class="string">    the COMMANDS are executed.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Exit Status:</span></span><br><span class="line"><span class="string">    Returns the status of the last command executed.</span></span><br></pre></td></tr></table></figure><h3 id="3-2-info-查看任意命令">3.2 info 查看任意命令</h3><p>针对不同的命令，查看帮助文档却要用不同的指令，这显然是很繁琐的。所以，<code>info</code> 提供了简单的查找方式。直接通过 <code>info cmd</code> 即可查看 <code>cmd</code> 的联机手册。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZuf695p5vw7py8urm4h4fZ:~# <span class="built_in">help</span> <span class="built_in">ls</span></span><br><span class="line">-bash: <span class="built_in">help</span>: no <span class="built_in">help</span> topics match `<span class="built_in">ls</span><span class="string">&#x27;.  Try `help help&#x27;</span> or `man -k <span class="built_in">ls</span><span class="string">&#x27; or `info ls&#x27;</span>.</span><br><span class="line">root@iZuf695p5vw7py8urm4h4fZ:~# info <span class="built_in">ls</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><code>help</code> 查看不了 <code>ls</code> 这个外部命令，但是 <code>info ls</code> 却可以直接跳转进 <code>ls</code> 的联机手册。</p></blockquote><ul><li><code>&lt;Space&gt;</code> 查看下一页</li><li><code>&lt;Delete&gt;</code> 查看上一页</li><li><code>q</code> 退出 <code>info</code> 界面</li><li><code>H</code> 查看 <code>info</code> 所有命令</li><li><code>h</code> 进入 <code>info</code> 教程</li></ul><h2 id="4-命令历史">4 命令历史</h2><p>用户输入的命令会被保存到历史列表，文件存放于 <code>~/.bash_history</code> ，下次打开终端 shell 时也会去  <code>~/.bash_history</code> 加载。</p><ul><li>如果当前命令与上一个命令完全一致，不会加入</li><li>以空白字符开始的命令，不会加入（所以，可以通过先键入空格，而后输入命令的方式，使得命令不被记录）</li></ul><h3 id="4-1-history-命令">4.1 history 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> [n]</span><br></pre></td></tr></table></figure><p><code>history</code> 命令查看命令历史列表，<code>n</code> 指定最近 n 条记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> -c <span class="comment"># 清楚历史记录</span></span><br><span class="line"><span class="built_in">history</span> -r <span class="comment"># 从 history 文件加载历史记录</span></span><br><span class="line"><span class="built_in">history</span> -w (<span class="built_in">history</span> -a) <span class="comment"># 将历史记录写入/附加到历史记录文件</span></span><br></pre></td></tr></table></figure><h3 id="4-2-历史记录扩展">4.2 历史记录扩展</h3><table><thead><tr><th>调用历史记录的命令</th><th>作用</th></tr></thead><tbody><tr><td><code>!num</code></td><td>执行编号 num 的历史命令</td></tr><tr><td><code>!!</code></td><td>执行最近一次历史命令，等价于 <code>!-1</code></td></tr><tr><td><code>!str</code></td><td>执行最近一次以 str 开始的命令</td></tr><tr><td><code>!?str</code></td><td>执行最近一次包含 str 的命令</td></tr><tr><td><code>!$</code></td><td>上一条命令的最后一个单词</td></tr><tr><td><code>!*</code></td><td>上一个命令的所有参数</td></tr></tbody></table><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!l</span><br><span class="line"><span class="comment"># 如果最近有 ls 命令，则会执行 ls</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!?<span class="built_in">dir</span></span><br><span class="line"><span class="comment"># 如果最近有 mkdir 名，则会执行 mkdir</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!$</span><br><span class="line"><span class="comment"># 如果有命令 ls ./ 则会返回 ./</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!*</span><br><span class="line"><span class="comment"># 如果有命令 ls -a 则会返回 -a</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 <code>!</code> 后均无空格</p></blockquote><h2 id="5-自动完成">5 自动完成</h2><p>输入命令的一部分，按 <code>&lt;Tab&gt;</code> 键或 <code>&lt;Ctrl&gt; + I</code> 触发自动完成功能。如果有多个可选项或者没有可选项时会发出提示声表示有歧义。</p><p>例如：下例按下 Tab 键后，会发出提示音，再按一下，则会返回所有可能结果（文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> .bash&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">.bash_history  .bashrc </span><br></pre></td></tr></table></figure><p>例如：按下 Tab 键后，会发出提示音，再按一下，则会返回所有可能结果（命令）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">ls</span>lsb_releaselscpulsinitramfslslockslsmemlsnslspcilsusblsattrlsblklshwlsipclsloginslsmodlsoflspgpot</span><br></pre></td></tr></table></figure><h2 id="6-命令别名">6 命令别名</h2><h3 id="6-1-alias-查看命令别名">6.1 alias 查看命令别名</h3><p>有时设置一些命令的别名能方便命令的输入。可以使用 <code>alias</code> 查看别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>这说明了输入 <code>l</code> 相当于输入 <code>ls -CF</code> ；输入 <code>la</code> 相当于输入 <code>ls -A</code></p></blockquote><h3 id="6-2-自定义别名">6.2 自定义别名</h3><ul><li>可以进入 <code>~/.bashrc</code> 中修改（永久修改）【推荐单独创建文件 <code>.bash_aliases</code>】</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740996227062.png" alt="./bashrc 文件内容" style="zoom:30%;" /><p>在用户目录下创建文件 <code>.bash_aliases</code> 写入例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_aliases</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd alias</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># history alias</span></span><br><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br></pre></td></tr></table></figure><p>然后 <code>source .bashrc</code> 之后，便可永久保存别名。</p><ul><li>也可以直接命令输入（不会保存）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> &lt;别名&gt;=<span class="string">&#x27;&lt;完整命令&gt;&#x27;</span>  <span class="comment"># = 无空格</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>设置 <code>h</code> 扩展为 <code>history 20</code> ；<code>..</code> 扩展为 <code>cd ..</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> h</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> h=<span class="string">&#x27;history 20&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-取消别名与不进行别名扩展">6.3 取消别名与不进行别名扩展</h3><ul><li>取消别名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unalias</span> &lt;别名&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>unalias -a</code> 取消所有别名</p></blockquote><ul><li><code>\</code> 表示不适用别名扩展</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="7-终端组合键">7 终端组合键</h2><h3 id="7-1-终端-shell-组合键">7.1 终端 shell 组合键</h3><table><thead><tr><th>组合键</th><th>含义</th></tr></thead><tbody><tr><td><code>Ctrl + D</code></td><td>EOF 输入结束</td></tr><tr><td><code>Ctrl + C</code></td><td>中断进程</td></tr><tr><td><code>Ctrl + \</code></td><td>退出进程，对应的内存状态保存到 core 文件</td></tr><tr><td><code>Ctrl + Z</code></td><td>发送终端停止信号，前台作业暂停并放入后台</td></tr><tr><td><code>Ctrl + H</code> 或 <code>&lt;Delete&gt;</code></td><td>删除光标前的最后一个字符</td></tr><tr><td><code>Ctrl + W</code></td><td>删除光标前的最后一个单词，以空格为分割</td></tr><tr><td><code>Ctrl + U</code></td><td>删除这一行</td></tr></tbody></table><blockquote><p><code>fg</code> 命令：将后台作业切换到前台执行；<code>bg</code> 命令：将暂停的作业切换到后台执行</p></blockquote><p>使用命令，可以查看这些组合键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">speed 9600 baud; rows 35; columns 130; line = 0;</span><br><span class="line">intr = ^C; quit = ^\; erase = ^?; <span class="built_in">kill</span> = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S;</span><br><span class="line">susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; discard = ^O; min = 1; <span class="keyword">time</span> = 0;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>输入 <code>Ctrl + V</code> 再按 <code>Ctrl + </code> 得到字符 <code>^</code></p><h3 id="7-2-bash-组合键">7.2 bash 组合键</h3><p>bash 使用 <code>readline</code> 库新增其他组合键。</p><table><thead><tr><th>快捷键</th><th>含义</th></tr></thead><tbody><tr><td><code>Ctrl + A</code></td><td>光标移动到行首</td></tr><tr><td><code>Ctrl + E</code></td><td>光标移动到行尾</td></tr><tr><td><code>Ctrl + L</code></td><td>清屏并移动光标到左上角，等价于 <code>clear</code> 命令</td></tr><tr><td><code>Ctrl + _</code></td><td>撤回之前的操作</td></tr><tr><td><code>Ctrl + K</code></td><td>剪切光标处到结尾的字符</td></tr><tr><td><code>Ctrl + Y</code></td><td>在光标处粘贴</td></tr></tbody></table><p>配置文件位于 <code>/etc/inputrc</code> ，建议在 <code>~/.inputrc</code> 中配置。</p>]]></content>
    
    
    <summary type="html">本文介绍了在 Linux 系统中如何查找相关命令和命令的帮助文档。如何命名和管理命令的别名以及一些组合键的使用。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="ssh" scheme="https://blog.iskage.online/tags/ssh/"/>
    
    <category term="远程连接" scheme="https://blog.iskage.online/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作系统：ssh 远程连接服务器和基本指令</title>
    <link href="https://blog.iskage.online/posts/e0a5070b.html"/>
    <id>https://blog.iskage.online/posts/e0a5070b.html</id>
    <published>2025-03-03T07:03:00.000Z</published>
    <updated>2025-03-03T07:10:35.419Z</updated>
    
    <content type="html"><![CDATA[<h1>Linux 操作系统概述</h1><p>本文介绍了使用 ssh 进行 Linux 系统服务区的远程访问与一些简单的命令。服务器可以去往各大服务器商购买，或者在本地安装虚拟机，针对 mac 用户 Linux 操作系统的指令大多可以直接使用，windows 系统的 wsl 或 powershell 也满足 Linux 的习惯。</p><h2 id="1-Linux-的远程访问-ssh">1 Linux 的远程访问 ssh</h2><h3 id="1-1-本地生成-ssh-密钥">1.1 本地生成 ssh 密钥</h3><p>在本地用户目录 <code>~</code> 下终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><blockquote><p>会要求设置密码，可以设置也可以不设置，这个密码只是未来使用 ssh 连接时需要输入的。</p></blockquote><p>便会在用户目录下生成文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">├── id_rsa</span><br><span class="line">└── id_rsa.pub</span><br></pre></td></tr></table></figure><p>其中 <code>id_rsa</code> 为私钥，不可泄漏；<code>id_rsa.pub</code> 为公钥，未来将放置在其他主机上的。</p><h3 id="1-2-服务器存储公钥">1.2 服务器存储公钥</h3><p>在需要登陆的服务器用户目录下创建文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">└── authorized_keys</span><br></pre></td></tr></table></figure><p>将本地主机的公钥 <code>id_rsa.pub</code> 内容复制到远程服务器 <code>.ssh/authorized_keys</code> 文件中。</p><h3 id="1-3-登陆远程服务器">1.3 登陆远程服务器</h3><p>此时就可以通过 ssh 建立安全的访问。</p><ul><li>方式一：直接输入远程的 ip 地址</li></ul><p>在本地主机终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh@&lt;ip地址&gt;</span><br></pre></td></tr></table></figure><p>之后即可通过 ssh 登陆。但相对复杂，推荐使用本地配置登陆。</p><ul><li>方式二：自定义配置文件 <code>config</code></li></ul><p>在本地主机的 <code>~/.ssh/</code> 目录下创建配置文件 <code>config</code> ，<code>.ssh/</code> 目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.ssh</span><br><span class="line">├── config</span><br><span class="line">├── id_rsa</span><br><span class="line">└── id_rsa.pub</span><br></pre></td></tr></table></figure><p>在 <code>config</code> 文件中写入配置</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># config 文件，以阿里云服务器为例</span><br><span class="line"></span><br><span class="line"># Aliyun Server</span><br><span class="line">Host &lt;别名&gt;</span><br><span class="line">    HostName &lt;公网ip&gt;</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><blockquote><p><code>#</code> 表示注释，<code>Host</code> 后的可以自定义别名，<code>Hostname</code> 后填入服务器的 ip 地址，<code>User</code> 表示想要登陆的远程服务器用户，例如 <code>root</code> 表示直接登陆到管理员用户，<code>Port 22</code> 表示通过端口 22 连接。</p></blockquote><p>以上配置完成后，直接在终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;别名&gt;</span><br></pre></td></tr></table></figure><p>即可登陆。</p><h3 id="1-4-known-hosts-文件">1.4 known_hosts 文件</h3><p>有时，当远端服务器也使用了 <code>ssh-keygen</code> 产生密钥时，本地 <code>.ssh/</code> 目录下会有 <code>known_hosts</code> 文件，其保存了远方 ssh 服务器的公钥，确认是否是之前连接的服务器。</p><h3 id="1-5-文件传输-ssh-cat-或-scp">1.5 文件传输 ssh + cat 或 scp</h3><p>当按照上面配置完成了 ssh 和远程服务器别名后，可以进行快捷的文件传输。</p><ul><li>对于小文件，可以直接使用 <code>cat + ssh</code> 的方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/a.txt | ssh &lt;别名&gt; <span class="string">&#x27;cat &gt; /root/file.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>将本地 <code>~/a.txt</code> 文件复制传输到远程服务器 <code>&lt;别名&gt;</code> 的 <code>/root/file.txt</code> 文件。</p><ul><li>对于大文件，可以使用 <code>scp</code> 递归传输文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/localFile &lt;别名&gt;:/root</span><br></pre></td></tr></table></figure><p>将本地的 <code>~/localFile</code> 文件夹传输到远程服务器 <code>&lt;别名&gt;</code> 的 <code>/root</code> 路径下。</p><h2 id="2-Linux-的简单使用">2 Linux 的简单使用</h2><h3 id="2-1-登录后的信息">2.1 登录后的信息</h3><p>每次登陆 Linux 系统后，会显示 <code>motd</code> (Message of the day) 以及上次登陆的时间和地点。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740976579623.png" style="zoom:23%;" /><ul><li><code>last</code> 命令查看当前或指定用户以前的成功登录情况，来源于 <code>/var/log/wtmp</code></li></ul><h3 id="2-2-注销">2.2 注销</h3><p>退出 Linux 操作系统的文本终端，可以使用：</p><ul><li><code>logout</code></li><li><code>exit</code></li><li>组合 <code>Ctrl + D</code> 退出，代表 <code>EOF (End Of File)</code></li></ul><p>如果不希望按下组合键一次就退出，可以设置 <code>IGNOREEOF</code> ，以免误触</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> IGNOREEOF=3 &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>如此，就需要按压 3 次 <code>Ctrl + D</code> 才能退出。如果只按一次，则会出现以下情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@&lt;name&gt;:~# </span><br><span class="line">Use <span class="string">&quot;logout&quot;</span> to leave the shell.</span><br></pre></td></tr></table></figure><blockquote><p>或者进入用户目录的 <code>.bashrc</code> 文件添加一行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 .bashrc 文件，输入 I 进入编辑模式</span></span><br><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bashrc 文件，添加一行</span></span><br><span class="line">IGNOREEOF=3</span><br></pre></td></tr></table></figure><p>键入 <code>esc</code> 退出编辑模式，输入 <code>:wq</code> 保存并退出。然后在终端输入以下指令以永久生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><h3 id="2-3-关机和重启">2.3 关机和重启</h3><p>在命令行可通过【不推荐】</p><ul><li><code>poweroff</code> 立刻关机并断电</li><li><code>halt</code> 立刻关机</li><li><code>reboot</code> 立刻重启</li></ul><p>【推荐】使用 <code>shutdown</code> 命令指定时间进行关机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [OPTIONS...] [TIME] [WALL...]</span><br></pre></td></tr></table></figure><ul><li><code>[TIME]</code> 填入命令执行的时间：例如 <code>+m</code> 或 <code>m</code> 表示 m 分钟后执行；<code>now</code> 表示立马执行；不指定则默认 1 分钟后执行。或者采用 <code>hh:mm</code> 表示在 hh 时 mm 分时刻执行。</li><li><code>WALL...</code> 要发送的消息，可不传递。</li><li><code>[OPTIONS...]</code> 可项的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 查看 shutdown 的帮助信息</span><br><span class="line">--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">2. 关机（默认，可省略）</span><br><span class="line">-P 或 -h 或 --poweroff</span><br><span class="line"></span><br><span class="line">3. 重启</span><br><span class="line">-r 或 --reboot</span><br><span class="line"></span><br><span class="line">4. 取消前面的命令</span><br><span class="line">-c</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r 10  <span class="comment"># 十分钟后重启</span></span><br><span class="line">Reboot scheduled <span class="keyword">for</span> Mon 2025-03-03 14:08:42 CST, use <span class="string">&#x27;shutdown -c&#x27;</span> to cancel.</span><br><span class="line">shutdown -c   <span class="comment"># 取消操作</span></span><br><span class="line"></span><br><span class="line">shutdown   <span class="comment"># 默认 1 分钟后关机并断电</span></span><br><span class="line">shutdown -c   <span class="comment"># 取消操作</span></span><br><span class="line"></span><br><span class="line">shutdown -r now <span class="comment"># 立即重启</span></span><br></pre></td></tr></table></figure><h3 id="2-4-查看系统信息">2.4 查看系统信息</h3><ul><li><code>hostname</code> ：查看主机的名字（主机名存储在文件 <code>/etc/hostname</code> 中）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@&lt;主机名&gt;:~# hostname</span><br><span class="line">&lt;主机名&gt;</span><br></pre></td></tr></table></figure><ul><li><code>uname</code> ：可以查看更多的系统信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-a  : 显示所有信息</span><br><span class="line">-s  : 内核名，例如 Linux 或 Darwin (MacOS)</span><br><span class="line">-r  : 内核发行版本号</span><br><span class="line">-n  : 节点名</span><br><span class="line">-v  : 内核版本</span><br><span class="line">-m  : 主机硬件架构</span><br><span class="line">-o  : 操作系统，结果为 GNU/Linux 等</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982042004.png" alt=""></p><ul><li><code>lsb_release</code> ：查看 LSB (Linux Standard Base) 一些 Linux 版本信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a  : 查看所有信息 </span><br><span class="line">-i  : 查看发行者 ID</span><br><span class="line">-d  : 发行版描述 </span><br><span class="line">-r  : 发行版发行号 </span><br><span class="line">-c  : 发行版代号</span><br><span class="line">-s  : 短格式，不包括前面的头部部分</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982156204.png" alt=""></p><h3 id="2-5-查看用户信息">2.5 查看用户信息</h3><ul><li><code>whoami</code> ：登录用户名</li><li><code>id</code> ：查看当前用户（也可查看其他用户）的用户和组信息</li><li><code>who</code> ：查看当前系统正在登录的用户信息</li><li><code>uptime</code> ：查看系统运行时间和负载等信息</li><li><code>w</code> ：<code>uptime</code> 和 <code>who</code> 结合的功能，还可查看用户在做什么</li><li><code>tty</code> ：查看当前所连接的终端设备文件</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740982352680.png" style="zoom:33%;" /><h3 id="2-6-阅读文本文件">2.6 阅读文本文件</h3><ul><li><code>cat</code> ：阅读文本文件，不分页</li><li><code>more</code> ：阅读文本文件，分页</li><li><code>less</code> ：与 <code>more</code> 相似，但功能更多</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">less &lt;file&gt;</span><br><span class="line"></span><br><span class="line">-- 显示一页内容，然后等待用户的输入 --</span><br><span class="line">h    : 显示帮助 </span><br><span class="line">q        : 退出</span><br><span class="line">&lt;Space&gt; or f  : 查看下一页 </span><br><span class="line">b   : 查看上一页</span><br><span class="line">/xxx          : 向前搜索 xxx </span><br><span class="line">n             : 重复上次搜索（方向不变）</span><br><span class="line">?xxx          : 向后搜索 xxx </span><br><span class="line">N             : 重复上次搜索，但是反方向</span><br><span class="line">:n            : 切换到下一个文件 </span><br><span class="line">:p            : 切换到前一个文件</span><br><span class="line">v   : 采用相应的编辑器来编辑本文件</span><br></pre></td></tr></table></figure><h3 id="2-7-文件编辑">2.7 文件编辑</h3><p>例如：<code>vim</code> 或 <code>nano</code></p><p>使用 <code>nano</code> （<code>Meta</code> 键一般为 <code>Alt</code> 键）</p><ul><li><code>Ctrl + O</code> 保存</li><li><code>Ctrl + X</code> 退出，如有修改，会询问是否保存</li><li><code>Ctrl + G</code> 查看帮助</li><li><code>Shift + &lt;- or -&gt;</code> 使用 Shift 加键盘向左/右，可以选定一段文字</li><li><code>Ctrl + K</code> 剪切</li><li><code>Ctrl + U</code> 粘贴</li><li><code>Ctrl + W</code> 搜索文本</li><li><code>Meta + 6</code> 复制</li><li><code>Meta + U</code> 撤销上次操作</li><li><code>Meta + E</code> 恢复上次撤销的操作</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740983326079.png" style="zoom:23%;" />]]></content>
    
    
    <summary type="html">本文介绍了使用 ssh 进行 Linux 系统服务区的远程访问与一些简单的命令。服务器可以去往各大服务器商购买，或者在本地安装虚拟机，针对 mac 用户 Linux 操作系统的指令大多可以直接使用，windows 系统的 wsl 或 powershell 也满足 Linux 的习惯。</summary>
    
    
    
    <category term="Linux 操作系统" scheme="https://blog.iskage.online/categories/Linux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://blog.iskage.online/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://blog.iskage.online/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="服务器" scheme="https://blog.iskage.online/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="ssh" scheme="https://blog.iskage.online/tags/ssh/"/>
    
    <category term="远程连接" scheme="https://blog.iskage.online/tags/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>递归算法</title>
    <link href="https://blog.iskage.online/posts/5f7017e8.html"/>
    <id>https://blog.iskage.online/posts/5f7017e8.html</id>
    <published>2025-03-02T07:43:00.000Z</published>
    <updated>2025-03-02T07:36:06.653Z</updated>
    
    <content type="html"><![CDATA[<h1>递归算法</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><p><strong>递归</strong>：通过一个函数在执行过程中一次或者多次调用其本身，或者通过一种数据结构在其表示中依赖于相同类型的结构更小的实例。简而言之：递归就是自己调用自己。</p><p>本文依据四个例子介绍递归算法的原理和如何搭建：</p><ul><li>阶乘函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></li><li>标尺刻度（分形）</li><li>二分查找</li><li>计算机文件目录的嵌套</li></ul><p>除此之外，还有一些常见的递归例子：递归求和、逆置序列、递归产生斐波那契数列、求和谜题等。以及什么是尾递归，如何将尾递归转换为非递归算法。</p><h2 id="1-常见递归案例">1 常见递归案例</h2><h3 id="1-1-阶乘函数">1.1 阶乘函数</h3><p>由阶乘函数的定义，我们可知</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mi>n</mi><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>×</mo><mo>⋯</mo><mo>×</mo><mn>2</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n! = n \times (n-1) \times (n-2) \times \cdots \times 2 \times 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 时，我们规定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0! = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>根据阶乘的定义，可以写出函数的递推形式，如果我们构造了一个函数 <code>factorial()</code> 应该满足</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">factorial(n) = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    factorial(n) = n * factorial(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>于是我们可以得到阶乘函数的递归算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factorial(<span class="number">4</span>))  <span class="comment"># 24</span></span><br></pre></td></tr></table></figure><ul><li>迭代是通过函数的递归实现的，每次进入函数，查看 <code>n</code> 是否为 <code>0</code> ，如果不为零，则返回 <code>n * f(n)</code> 如此反复调用，直到 <code>n = 0</code> 时才真正开始进行计算。</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740813281185.png" style="zoom:50%;" /><h3 id="1-2-标尺刻度（分形）">1.2 标尺刻度（分形）</h3><p>对于一个刻度尺，每刻度之间距离减半时，刻度线长度也减小。例如：0 - 1 cm 的刻度间，假设 0 和 1 刻度线长 4 个单位，于是有 0.5 cm 刻度线长 3 个单位，0.25 cm 刻度线长 2 个单位，以此类推。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740813701382.png" style="zoom:47%;" /><p>我们定义函数 <code>draw_ruler()</code> ，用来模仿这种分形的过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">draw_line</span>(<span class="params">tick_length, tick_label=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制刻度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        tick_length (int): 刻度长度，即 &#x27;-&#x27; 字符个数</span></span><br><span class="line"><span class="string">        tick_label (str, optional): 刻度数，不重要. Defaults to &#x27;&#x27;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    line = <span class="string">&#x27;-&#x27;</span> * tick_length</span><br><span class="line">    <span class="keyword">if</span> tick_label:</span><br><span class="line">        line += <span class="string">&#x27; &#x27;</span> + tick_label</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_interval</span>(<span class="params">center_length</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;记录分型个数的辅助函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        center_length (int): 负责传入刻度长度给 draw_line 函数，即 &#x27;-&#x27; 字符个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> center_length &gt; <span class="number">0</span>:</span><br><span class="line">        draw_interval(center_length - <span class="number">1</span>)</span><br><span class="line">        draw_line(center_length)</span><br><span class="line">        draw_interval(center_length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_ruler</span>(<span class="params">len_of_ruler, num_scale</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制刻度尺</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        len_of_ruler (int): 刻度尺长度，即最大刻度</span></span><br><span class="line"><span class="string">        num_scale (int): 最大刻度的长度，即最大刻度的 &#x27;-&#x27; 字符个数，决定了分形次数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    draw_line(num_scale, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> + len_of_ruler):</span><br><span class="line">        draw_interval(num_scale - <span class="number">1</span>)</span><br><span class="line">        draw_line(num_scale, <span class="built_in">str</span>(j))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">draw_ruler(len_of_ruler=<span class="number">1</span>, num_scale=<span class="number">3</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- 0</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">--</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">--- 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>细节 &amp; 原理</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740900901780.png" alt=""></p><p>每一个 <code>draw_interval(n)</code> 下都嵌套着一个结构为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">draw_interval(n)</span><br><span class="line">├── draw_interval(n-<span class="number">1</span>)  <span class="comment"># 继续嵌套，直到 n = 0</span></span><br><span class="line">│ ├── ...</span><br><span class="line">├──draw_line(n)        <span class="comment"># 真正画刻度的函数 输出 &#x27;-&#x27; 字符</span></span><br><span class="line">└──draw_interval(n-<span class="number">1</span>)</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure><h3 id="1-3-二分查找">1.3 二分查找</h3><p>二分查找是一种高效的查找序列元素的算法。当序列无序时，通过循环遍历的方式查找某一个元素，复杂度为 <code>O(n)</code> 。但当<strong>序列有序</strong>时，可以使用二分查找。</p><ul><li>二分查找的想法</li></ul><p>需要在一个有序序列中查找 <code>x</code> ，首先将序列分半，检查 <code>x</code> 落入哪个区间，例如落入左边，则抛去右边，在左边继续分半查找。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">left = <span class="number">0</span>           <span class="comment"># 最左边下标</span></span><br><span class="line">right = <span class="built_in">len</span>(seq) - <span class="number">1</span>        <span class="comment"># 最右边下标</span></span><br><span class="line"></span><br><span class="line">mid = (left + right) // <span class="number">2</span>   <span class="comment"># 计算中间下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == seq[mid]:</span><br><span class="line">    <span class="comment"># 完成</span></span><br><span class="line"><span class="keyword">elif</span> x &lt; seq[mid]:</span><br><span class="line">    <span class="comment"># 到左半寻找</span></span><br><span class="line">    <span class="comment"># 调用函数，更新参数</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 到右半寻找</span></span><br><span class="line">    <span class="comment"># 调用函数，更新参数</span></span><br></pre></td></tr></table></figure><ul><li>复杂度</li></ul><p>每次递归调用，序列长度为 <code>right - left + 1</code> 。而二分查找每次调用后，传入 <code>mid = (left + right) // 2</code> ，序列长度减半 <code>(right - left + 1) / 2</code> 。于是有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Algorithms end when</mtext><mspace width="1em"/><mfrac><mi>n</mi><msup><mn>2</mn><mi>k</mi></msup></mfrac><mo>∼</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\text{Algorithms end when} \quad \frac{n}{2^k} \sim 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord text"><span class="mord">Algorithms end when</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∼</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">k \sim \log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 为操作数（调用递归次数）。故复杂度为 <code>O(log n)</code></p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, target, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &gt; right:</span><br><span class="line">        <span class="comment"># 全遍历后仍然没找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> target == data[mid]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> target &lt; data[mid]:</span><br><span class="line">        <span class="keyword">return</span> binary_search(data, target, left, mid - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_search(data, target, mid + <span class="number">1</span>, right)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">33</span>, <span class="number">37</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_search(seq, target=<span class="number">22</span>, left=<span class="number">0</span>, right=<span class="built_in">len</span>(seq) - <span class="number">1</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740821735351.png" alt=""></p><h3 id="1-4-文件系统">1.4 文件系统</h3><p>一般主机的文件目录大致为 <code>a/b/c.py</code> 其中 <code>a/</code> <code>b/</code> 表示其为文件夹，而有文件后缀的 <code>c.py</code> 则为文件。下面编写一个递归算法，计算某个目录下所有文件（文件夹）各自的存储大小。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_usage</span>(<span class="params">path</span>)</span><br><span class="line">    Input: 文件路径</span><br><span class="line">    Output: 存储空间总和</span><br><span class="line"></span><br><span class="line">    total = size(path)  <span class="comment"># 当前目录的大小</span></span><br><span class="line">    <span class="keyword">if</span> path 是文件夹:</span><br><span class="line">        <span class="keyword">for</span> child_path <span class="keyword">in</span> path  <span class="comment"># 查看父目录下的子目录</span></span><br><span class="line">            total += disk_usage(child_path)  <span class="comment"># 递归</span></span><br><span class="line"><span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><ul><li><code>os</code> 模块</li></ul><p><code>os.path.getsize(path)</code> 获取 <code>path</code> 路径文件的大小或文件夹本身的大小（针对文件夹，只返回文件夹自身大小，不包含其下文件和其他子文件夹的大小）</p><p><code>os.path.isdir(path)</code> 判断 <code>path</code> 是否是一个合法且存在的路径</p><p><code>os.listdir(path)</code> 返回一个列表，列表元素为 <code>path</code> 路径下所有文件和文件夹的名称</p><p><code>os.path.join(path, filename)</code> 根据传入的字符串组合成一条合法的路径</p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disk_usage</span>(<span class="params">path</span>):</span><br><span class="line">    total = os.path.getsize(path)  <span class="comment"># 当前目录自身的大小</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">            <span class="comment"># 遍历其下子目录的名称</span></span><br><span class="line">            child_path = os.path.join(path, filename)</span><br><span class="line">            total += disk_usage(child_path)  <span class="comment"># 递归调用 计算子目录的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;  &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total, path))</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(os.path.getsize(os.getcwd()))</span><br><span class="line"><span class="comment"># 128 代表目录自身的大小，不包含其下子目录</span></span><br><span class="line"></span><br><span class="line">total = disk_usage(os.getcwd())      <span class="comment"># os.getcwd() 获取当前目录路径</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2262 /Users/&lt;username&gt;/dsa-notes/lec3_recursion/code03_recursion.py</span></span><br><span class="line"><span class="string">6326 /Users/&lt;username&gt;/dsa-notes/lec3_recursion/note03_递归.md</span></span><br><span class="line"><span class="string">8716 /Users/&lt;username&gt;/dsa-notes/lec3_recursion  # 父目录</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"><span class="comment"># 8716</span></span><br></pre></td></tr></table></figure><h2 id="2-递归分类">2 递归分类</h2><ul><li>如果一个递归最多调用一次，称之为<strong>线性递归</strong></li><li>如果一个递归可以同时进行两次调用，称之为<strong>二路递归</strong></li><li>如果一个递归可以同时进行三次及以上调用，称之为<strong>多重递归</strong></li></ul><h3 id="2-1-线性递归">2.1 线性递归</h3><p>递归函数内可能有多个递归调用，但函数内必须最多只能执行一次递归调用。例如：</p><ul><li>阶乘的递归式定义</li><li>二分查找</li></ul><blockquote><p>二分查找虽然有两处出现了递归调用，但因为处于 <code>if - else</code> 语句中，实际最多只执行一次，故仍然是线性递归</p></blockquote><h4 id="2-1-1-递归求和">2.1.1 递归求和</h4><p>递归求和和阶乘的实现如出一辙，都是采用递推的方式构建。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LinearSum(A, n):</span><br><span class="line">Input: 序列和求和长度</span><br><span class="line">Output: 序列前 n 项和</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> A[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> LinearSum(A, n - <span class="number">1</span>) + A[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_sum</span>(<span class="params">seq: <span class="built_in">list</span>, n: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> linear_sum(seq, n - <span class="number">1</span>) + seq[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归求前 n 项和</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(linear_sum(seq, <span class="number">3</span>))  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-逆置序列">2.1.2 逆置序列</h4><p>对于输入一个序列，将其第一项和最后一项交换，第二项与倒数第二项交换，以此类推从而得到逆置后的序列。基本想法是每次调用交换首尾，然后剔除首尾后作为新的序列再次调用。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Agorithm ReverseArray(A, i, j):</span><br><span class="line">Input: 序列 A 和首尾下标 i, j (也可任意指定非首尾下标 i, j)</span><br><span class="line">Output: 无输出，因为序列是可变的，函数操作直接对序列进行</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt; j then</span><br><span class="line">交换 A[i] 和 A[j]</span><br><span class="line">ReverseArray(A, i + <span class="number">1</span>, j - <span class="number">1</span>)  <span class="comment"># 剔除首尾后作为新的序列再次调用</span></span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq, i, j</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; j:</span><br><span class="line">        seq[i], seq[j] = seq[j], seq[i]</span><br><span class="line">        reverse(seq, i + <span class="number">1</span>, j - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆置序列</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">reverse(seq, i=<span class="number">0</span>, j=<span class="built_in">len</span>(seq) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"><span class="comment"># [9, 8, 7, 6, 5, 4, 3, 2, 1] 从 seq[0]=1 到 seq[n-1]=9 开始逆序</span></span><br><span class="line"></span><br><span class="line">reverse(seq, i=<span class="number">3</span>, j=<span class="built_in">len</span>(seq) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(seq)</span><br><span class="line"><span class="comment"># [9, 8, 7, 1, 2, 3, 4, 5, 6] 从 seq[3]=6 到 seq[n-1]=1 开始逆序</span></span><br></pre></td></tr></table></figure><h3 id="2-2-二路递归">2.2 二路递归</h3><p>当函数内部执行两次递归调用时，即为二路递归。例如：</p><ul><li>标尺刻度</li></ul><h4 id="2-2-1-二路递归求和">2.2.1 二路递归求和</h4><p>基本思想是将序列拆分为两半，分布调用求和再相加。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm BinarySum(A, i, n):</span><br><span class="line">Input: 序列 A 和起始下标 i 和加和长度 n</span><br><span class="line">Output: 从 i 开始的 n 个元素求和</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> A[i]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> BinarySum(A, i, n / <span class="number">2</span>) + BinarySum(A, i + n / <span class="number">2</span>, n / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740892869633.png" alt=""></p><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_sum</span>(<span class="params">seq, i, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        half = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> binary_sum(seq, i, half) + binary_sum(seq, i + half, n - half)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二路递归求和</span></span><br><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(binary_sum(seq, i=<span class="number">0</span>, n=<span class="built_in">len</span>(seq)))</span><br><span class="line"><span class="comment"># 55</span></span><br><span class="line"><span class="built_in">print</span>(binary_sum(seq, i=<span class="number">1</span>, n=<span class="built_in">len</span>(seq) - <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 54</span></span><br></pre></td></tr></table></figure><blockquote><p>代码实现并不良好，因为需要手动计算起始下标和长度，没有检查溢出问题</p></blockquote><h4 id="2-2-2-二路递归产生斐波那契数列">2.2.2 二路递归产生斐波那契数列</h4><p>产生递推式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><msub><mi>F</mi><mi>i</mi></msub><mo>=</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">F_0 = 0,\ F_1 = 1,\ F_{i} = F_{i - 1} + F_{i - 2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 的斐波那契数列，可以尝试使用二路递归方法。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Algorithm BinaryFib(k)</span><br><span class="line">Input: 序列下标 k</span><br><span class="line">Output: 第 k 个斐波那契数列值</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> k</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> BinaryFib(k - <span class="number">1</span>) + BinaryFib(k - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_fib</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 【不推荐】 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">or</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_fib(k - <span class="number">1</span>) + binary_fib(k - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二路递归产生斐波那契数列 【不推荐】</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(binary_fib(i), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 0 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><blockquote><p>二路递归产生斐波那契数列复杂度为指数级，【不推荐】使用</p></blockquote><p><strong>证明</strong> 记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示 <code>binary_fib(k)</code> 函数调用递归的次数，则有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mn>3</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo>=</mo><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⋯</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>n</mi><mi>k</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align} \notagn_0 &amp;= 1 \\ \notagn_1 &amp;= 1 \\ \notagn_2 &amp;= n_1 + n_0 + 1 = 3 \\ \notagn_3 &amp;= n_2 + n_1 + 1 = 5 \\ \notag&amp;\cdots \\n_k &amp;= n_{k-1} + n_{k-2} + 1 \notag\end{align}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9em;vertical-align:-4.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">3</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>于是可知 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 也为斐波那契数列，由斐波那契数列是二阶线性递推，求通项公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo>∼</mo><mo stretchy="false">(</mo><mfrac><mrow><msqrt><mn>5</mn></msqrt><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><msup><mo stretchy="false">)</mo><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">n_k \sim (\frac{\sqrt{5}- 1}{2})^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.383em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 可知操作次数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大约为指数类型的量级。指数增长理论上在算法中是无法实现的。（或者可以证明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">n_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 大约是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">n_{k-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 的 2 倍以上，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo>∼</mo><msup><mn>2</mn><mrow><mi>k</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n_k \sim 2^{k/2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mtight">/2</span></span></span></span></span></span></span></span></span></span></span></span> 也是指数级别）</p><h4 id="2-2-3-线性递归产生斐波那契数列">2.2.3 线性递归产生斐波那契数列</h4><p>改进递归，使用线性递归产生斐波那契数列。基本思想是每次返回一组（2 个）斐波那契数，每次返回的时候直接进行加和（递推）</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Algorithm LinearFibonacci(k):</span><br><span class="line">Input: 下标 k</span><br><span class="line">Output: 一次返回 <span class="number">2</span> 个斐波那契数</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">1</span> then</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i, j = LinearFibonacci(k - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> j, i + j</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_fib</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i, j = linear_fib(k - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> j, i + j</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性递归产生斐波那契数列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    front, back = linear_fib(i)</span><br><span class="line">    <span class="built_in">print</span>(back, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 1 1 2 3 5 8 13 21 34</span></span><br></pre></td></tr></table></figure><blockquote><p>线性递归每递归一次就能产生一项，故复杂度为 <code>O(n)</code></p></blockquote><h3 id="2-3-多重递归">2.3 多重递归</h3><p>多重递归中的函数可能执行多于两次递归调用。例如：</p><ul><li>文件系统</li></ul><h4 id="2-3-1-求和谜题">2.3.1 求和谜题</h4><p>可以简单理解为找出集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mn>9</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">U = \{1, 2, 3, \cdots, 9 \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">9</span><span class="mclose">}</span></span></span></span> 所有的三元子集 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy="false">{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">S = \{a, b, c\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose">}</span></span></span></span> 使得满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a + b = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span> 。基本想法是每次向 <code>S</code> 中添加一个 <code>U</code> 中元素，并删去 <code>U</code> 中对应的元素，并 <code>k - 1</code> 表示 <code>S</code> 还剩 <code>k - 1</code> 个元素。从而得到新的 <code>k, S, U</code> 此时递归调用。</p><ul><li>伪代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Algorithm PuzzleSolve(k, S, U):</span><br><span class="line">Input: S 为结果集合，U 为选取元素来源，k 为要求的 S 集合大小</span><br><span class="line">Output: 所以满足 a + b = c 的 S = &#123;a, b, c&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> U do:</span><br><span class="line">    <span class="comment"># 从 U 中逐个挑出元素</span></span><br><span class="line">    Add e to the end of S  <span class="comment"># 将 e 添加到序列 S 的末尾</span></span><br><span class="line">    Remove e <span class="keyword">from</span> U        <span class="comment"># 将 e 从集合 U 中移除（标记为已使用）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">1</span> then:               </span><br><span class="line">        <span class="comment"># 如果当前序列长度满足要求</span></span><br><span class="line">        <span class="keyword">if</span> is_solution(S) then:    </span><br><span class="line">            <span class="comment"># 检查 S 是否是谜题的解</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Solution found: &quot;</span> + S)</span><br><span class="line">    <span class="keyword">else</span>:                         </span><br><span class="line">        <span class="comment"># 否则继续递归扩展，递归调用，并传入新参数</span></span><br><span class="line">        PuzzleSolve(k - <span class="number">1</span>, S, U)</span><br><span class="line"></span><br><span class="line">    Remove e <span class="keyword">from</span> the end of S     // 回溯：将 e 从序列 S 的末尾移除</span><br><span class="line">    Add e back to U                // 回溯：将 e 添加回集合 U（标记为未使用）</span><br></pre></td></tr></table></figure><ul><li>算法代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_solution</span>(<span class="params">S</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 检查 a + b = c &quot;&quot;&quot;</span></span><br><span class="line">    res = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> S[<span class="number">0</span>] + S[<span class="number">1</span>] == S[<span class="number">2</span>]:</span><br><span class="line">        res = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">puzzle_solve</span>(<span class="params">k, S, U</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 寻找 S &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">list</span>(U):  <span class="comment"># 遍历集合 U 中的每一个元素</span></span><br><span class="line">        S.append(e)  <span class="comment"># 将 e 添加到序列 S 的末尾</span></span><br><span class="line">        U.remove(e)  <span class="comment"># 将 e 从集合 U 中移除</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> is_solution(S):</span><br><span class="line">                <span class="comment"># 检查当前序列 S 是否是谜题的解</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Solution found: &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(S[<span class="number">0</span>], S[<span class="number">1</span>], S[<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 递归调用，继续扩展序列</span></span><br><span class="line">            puzzle_solve(k - <span class="number">1</span>, S, U)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 回溯</span></span><br><span class="line">        S.pop()  <span class="comment"># 将 e 从序列 S 的末尾移除</span></span><br><span class="line">        U.add(e)  <span class="comment"># 将 e 添加回集合 U</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求和谜题</span></span><br><span class="line">U = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">k = <span class="number">3</span></span><br><span class="line">S = []</span><br><span class="line">puzzle_solve(k, S, U)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Solution found: 1 + 2 = 3</span></span><br><span class="line"><span class="string">Solution found: 1 + 3 = 4</span></span><br><span class="line"><span class="string">Solution found: 2 + 1 = 3</span></span><br><span class="line"><span class="string">Solution found: 3 + 1 = 4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740897518866.png" alt=""></p><h2 id="3-递归算法的不足">3 递归算法的不足</h2><h3 id="3-1-不断递归带来的复杂度">3.1 不断递归带来的复杂度</h3><ul><li>递归可能会因为不断的调用自身带来复杂度的急剧上升</li></ul><p>例如：二路递归产生斐波那契的例子就展示了递归的误用</p><h3 id="3-2-最大递归深度">3.2 最大递归深度</h3><ul><li>除了复杂度，递归的误用可能会带来无限深度</li></ul><p>例如出现了下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> f(x)</span><br></pre></td></tr></table></figure><p>这种简单的错误会导致递归无限地调用自身，这会迅速耗尽计算资源。所以，使用递归时，往往会传入<strong>更多的参数</strong>，通过参数的变化和添加终止条件实现递归。</p><ul><li>Python 限制了递归的深度，默认递归不得超过 1000 层，如果超过则会报错 <code>RuntimeError</code></li></ul><p>合法的/高效的递归操作，这个限制（1000 层）是完全足够的。例如，二分查找的复杂度为 <code>O(log n)</code> ，如果要这个算法消耗 1000 次递归，则有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>=</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">\log n = 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span> 可以计算出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mn>1000</mn></msup></mrow><annotation encoding="application/x-tex">n = 2^{1000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1000</span></span></span></span></span></span></span></span></span></span></span></span> 个输入，这个数字显然在现实中是不可能达到的。所以，1000 层限制对于合法的递归算法是完全足够的。</p><p>当然，也可以自定义最大递归深度限制【不推荐】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">old = sys.getrecursionlimit()</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure><blockquote><p>无论如何，依靠<strong>参数的加入和限制</strong>对递归算法的设计十分重要。</p></blockquote><h2 id="4-消除尾递归">4 消除尾递归</h2><p>递归算法的优点在于利用问题中的重复结构。然而，递归的成本也十分明显。算法必须记录存储每个调用的状态和结果。这对计算机内存造成负担。</p><p>所以，某些情况下，我们希望能够将递归算法变为非递归算法。</p><h3 id="4-1-尾递归">4.1 尾递归</h3><p><strong>定义</strong>：当递归算法进行的递归调用是此算法的最后一步，即递归调用得到的值被立即当作此算法的输出，则此递归为一个尾递归（<strong>递归调用为最后一步 / 递归调用得到的值作为输出</strong>）。</p><ul><li>尾递归必定是一个线性递归</li></ul><p>例如：阶乘函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)  <span class="comment"># 递归调用 factorial() 为算法的输出被 return</span></span><br></pre></td></tr></table></figure><h3 id="4-2-尾递归的非递归算法">4.2 尾递归的非递归算法</h3><p><strong>任何的尾递归均可转写为一个非递归算法</strong></p><h4 id="4-2-1-阶乘函数（非递归）">4.2.1 阶乘函数（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res = n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="comment"># 使用循环逐个相乘</span></span><br><span class="line">        res *= i</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="4-2-2-逆置序列（非递归）">4.2.2 逆置序列（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">seq, i, j</span>):</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="comment"># 利用下标的循环交换</span></span><br><span class="line">        seq[i], seq[j] = seq[j], seq[i]</span><br><span class="line">        i, j = i + <span class="number">1</span>, j - <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-二分查找（非递归）">4.2.3 二分查找（非递归）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">data, target, left, right</span>):</span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        <span class="comment"># 利用循环从左右向中间查找</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> target == data[mid]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> target &lt; data[mid]:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">简而言之：递归就是自己调用自己。本文依据四个例子介绍递归算法的原理和如何搭建，除此之外，还有一些常见的递归例子：递归求和、逆置序列、递归产生斐波那契数列、求和谜题等。以及什么是尾递归，如何将尾递归转换为非递归算法。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>CIFAR-10 分类问题 (基于 ResNet18 预训练模型)</title>
    <link href="https://blog.iskage.online/posts/24ab2d0a.html"/>
    <id>https://blog.iskage.online/posts/24ab2d0a.html</id>
    <published>2025-03-01T08:32:00.000Z</published>
    <updated>2025-03-01T08:54:08.826Z</updated>
    
    <content type="html"><![CDATA[<h1>CIFAR-10 分类问题 (基于 ResNet18 预训练模型)</h1><p>项目源码存放在 GitHub 库 <a href="https://github.com/isKage/cifar10-classification">isKage/cifar10-classification</a></p><p><code>PyTorch</code> <code>Python</code> <code>torch</code> <code>nn</code> <code>ResNet</code> <code>ResNet18</code> <code>pre-trained</code></p><p>针对 CIFAR-10 分类问题，搭建神经网络：<code>AlexNet</code>、<code>GoogLeNet</code>、<code>ResNet</code>、<code>ResNet18</code>。最后选择预训练后的 <code>ResNet18</code> 进行该问题的训练、验证和测试。包含自定义数据集 <code>Dataset</code> 类、自定义训练、验证和测试函数、自定义结果表格函数等。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/cifar.jpeg" alt="cifar-10"></p><p><code>kaggle: private score = 0.68100, ranked about 71. (just training once as using cpu)</code></p><p><code>device: cpu</code></p><p><strong>项目目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── README.md                   </span><br><span class="line">├── TempData                  <span class="comment"># 取少量图片模拟 CIFAR10 数据集                 </span></span><br><span class="line">│   └── competitions</span><br><span class="line">│       └── cifar-10</span><br><span class="line">├── checkpoints               <span class="comment"># 存放训练完成后的模型参数 model.save() 存放处</span></span><br><span class="line">├── config.py                 <span class="comment"># 默认的配置文件</span></span><br><span class="line">├── data                      <span class="comment"># 自定义的数据集 Dataset 类</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── dataset.py</span><br><span class="line">├── logfile                   <span class="comment"># 记录模型表现 csv 文件的目录</span></span><br><span class="line">├── logs                      <span class="comment"># 存放 tensorboard 文件</span></span><br><span class="line">├── main.py                   <span class="comment"># 主程序: 包含 train, test 等主要函数</span></span><br><span class="line">├── models                    <span class="comment"># 搭建的各种神经网络 `AlexNet`、`GoogLeNet`、`ResNet`、`ResNet18`</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── alexnet.py</span><br><span class="line">│   ├── basic.py</span><br><span class="line">│   ├── googlenet.py</span><br><span class="line">│   ├── resnet.py</span><br><span class="line">│   └── resnet18.py</span><br><span class="line">├── requirements.txt          <span class="comment"># 安装依赖</span></span><br><span class="line">├── result_example.csv        <span class="comment"># 少量数据模拟数据集得到的测试结果</span></span><br><span class="line">└── sampleSubmission.csv      <span class="comment"># 最后生成的可提交 kaggle 的最终测试结果</span></span><br></pre></td></tr></table></figure><h2 id="1-下载至本地">1 下载至本地</h2><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/cifar10-classification.git</span><br></pre></td></tr></table></figure><h2 id="2-安装依赖和数据集">2 安装依赖和数据集</h2><h3 id="2-1-pip-安装依赖">2.1 pip 安装依赖</h3><p>在项目根目录下终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="2-2-kaggle-下载数据集">2.2 kaggle 下载数据集</h3><p>教程见 <a href="https://zhuanlan.zhihu.com/p/25732245405">从 kaggle 下载数据集 (mac &amp; win)</a>。</p><h2 id="3-本地配置-config-py">3 本地配置 <code>config.py</code></h2><p>在 <code>config.py</code> 中配置相关参数。例如数据集路径。相关配置均已配置好，但需要自己配置数据集的位置。<br>在 <code>_parse()</code> 方法中，需修改 cifar 数据集的路径。例如我的配置：<code>cifar-10</code> 文件夹放在用户目录下的 <code>AllData/competitions/</code> 下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> config.real_or_try == <span class="string">&quot;real&quot;</span>:</span><br><span class="line">    <span class="comment"># 如果数据放在用户目录的 &#x27;AllData&#x27; 下则</span></span><br><span class="line">    config.root = os.path.join(config.user_root, <span class="string">&#x27;AllData&#x27;</span>, <span class="string">&#x27;competitions&#x27;</span>, <span class="string">&#x27;cifar-10&#x27;</span>)  <span class="comment"># 【本地设置: 数据目录】</span></span><br><span class="line">    config.res_path = os.path.join(config.working_root, <span class="string">&#x27;sampleSubmission.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 样本数据尝试</span></span><br><span class="line">    config.root = os.path.join(config.working_root, <span class="string">&#x27;TempData&#x27;</span>, <span class="string">&#x27;competitions&#x27;</span>, <span class="string">&#x27;cifar-10&#x27;</span>)</span><br><span class="line">    config.res_path = os.path.join(config.working_root, <span class="string">&#x27;result_example.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-训练">4 训练</h2><blockquote><p>注意，默认的数据集为模拟数据集，故如果想在完整数据集训练，在指定路径后还需传入参数 <code>--real_or_try=real</code><br>，或者直接在 <code>config.py</code> 中<br>修改默认</p></blockquote><h3 id="4-1-解压数据集">4.1 解压数据集</h3><p>在第 3 步设置完成数据集下载的路径后，终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py unzip</span><br></pre></td></tr></table></figure><p>即可解压数据集。</p><h3 id="4-2-训练">4.2 训练</h3><p>使用 <code>fire</code> 库方便的在终端中进行训练、测试过程。可以在 <code>config.py</code> 中输入默认参数。例如：<code>model</code><br>为选择模型，默认使用 <code>&quot;ResNet18&quot;</code> 模型，<br>会自动进行下载，下载的预训练模型参数保存在 <code>checkpoints/</code> 文件夹里。</p><p>在终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>可以使用 <code>--&lt;参数名&gt;=参数值</code> 在终端覆盖默认参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python main.py train model=AlexNet      <span class="comment"># 指定 AlexNet 为模型</span></span><br><span class="line">python main.py train rea_or_try=real    <span class="comment"># 使用完整 CIFAR10 数据集，而不是模拟数据集 </span></span><br></pre></td></tr></table></figure><h3 id="4-3-可视化">4.3 可视化</h3><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=./logs  <span class="comment"># http://localhost:6006/</span></span><br></pre></td></tr></table></figure><p>打开浏览器观察训练过程可视化：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740818446605.png" alt=""></p><h2 id="5-测试">5 测试</h2><p>终端运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>即可得到测试后的结果表格 <code>result_example.csv</code> 或 <code>sampleSubmission.csv</code> （取决与使用的是模拟数据集还是完整的数据集）。</p><p>注意，测试完成后终端输入一下指令，对结果表格按照 <code>id</code> 进行排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py sort_csv</span><br></pre></td></tr></table></figure><p>最后可以将 <code>sampleSubmission.csv</code> 上传到 kaggle <a href="https://www.kaggle.com/competitions/cifar-10">CIFAR-10 competition</a> 。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740818596562.png" style="zoom:50%;" /><h2 id="6-友链">6 友链</h2><ol><li>关注我的知乎账号 <a href="https://www.zhihu.com/people/--55-97-8-41">Zhuhu</a> 不错过我的笔记更新。</li><li>我会在个人博客 <a href="https://blog.iskage.online/">isKage`Blog</a> 更新相关项目和学习资料。</li></ol>]]></content>
    
    
    <summary type="html">本文介绍如何读取 CIFAR-10 数据集，搭建 ResNet 神经网络，模型训练和验证。可前往 GitHub 库下载项目源码。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (2) R 语言入门：常见对象和数据的输入输出</title>
    <link href="https://blog.iskage.online/posts/a6f8df4a.html"/>
    <id>https://blog.iskage.online/posts/a6f8df4a.html</id>
    <published>2025-02-27T07:43:00.000Z</published>
    <updated>2025-02-27T09:25:33.069Z</updated>
    
    <content type="html"><![CDATA[<h1>R 语言入门 (1)</h1><h2 id="1-常见对象">1 常见对象</h2><h3 id="1-1-向量-vector">1.1 向量 vector</h3><p>最简单的数据结构就是由一串相同类型的元素等构成的向量 <code>vector</code></p><ul><li>标量为长度是 <code>1</code> 的向量</li></ul><h4 id="1-1-1-c-函数">1.1.1 <code>c()</code> 函数</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">0.3</span><span class="punctuation">,</span> <span class="number">0.6</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="literal">TRUE</span><span class="punctuation">,</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="built_in">T</span><span class="punctuation">,</span> <span class="built_in">F</span><span class="punctuation">)</span>  <span class="comment"># T is TRUE, F is FALSE</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】R 语言只有 <code>TRUE</code> 和 <code>T</code> 以及 <code>FALSE</code> 和 <code>F</code></p></blockquote><h4 id="1-1-2-rep-函数">1.1.2 <code>rep()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span>x<span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">1</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># x 表示数据元素</span></span><br><span class="line"><span class="comment"># times 表示重复次数，可以是向量</span></span><br><span class="line"><span class="comment"># length.out 表示总长度，运行截断</span></span><br><span class="line"><span class="comment"># each 每个元素重复次数，不能为向量</span></span><br></pre></td></tr></table></figure><blockquote><p>先执行 <code>each</code> 复制单个元素，后执行 <code>times</code> 复制整个向量</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">)</span> <span class="comment"># times = 2</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">)</span><span class="punctuation">)</span> <span class="comment"># times = (1, 2, 3, 4)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> len <span class="operator">=</span> <span class="number">10</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">4</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> each <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">rep</span><span class="punctuation">(</span><span class="string">&quot;hello&quot;</span><span class="punctuation">,</span> times <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】<code>each = x</code> 等价于 <code>times = c(x, x, ...)</code></p></blockquote><h4 id="1-1-3-seq-函数">1.1.3 <code>seq()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">seq<span class="punctuation">(</span>from <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> to <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="punctuation">(</span><span class="punctuation">(</span>to <span class="operator">-</span> from<span class="punctuation">)</span> <span class="operator">/</span> <span class="punctuation">(</span>length.out <span class="operator">-</span> <span class="number">1</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="literal">NULL</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line"><span class="comment"># from 起始数字</span></span><br><span class="line"><span class="comment"># to 终止数字</span></span><br><span class="line"><span class="comment"># by 步长，默认均匀分布</span></span><br><span class="line"><span class="comment"># len 长度</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq<span class="punctuation">(</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> length.out <span class="operator">=</span> <span class="number">11</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> by <span class="operator">=</span> <span class="number">2</span><span class="punctuation">)</span></span><br><span class="line">seq<span class="punctuation">(</span><span class="number">17</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740635933658.png" alt="QQ_1740635933658" style="zoom:50%;" /><h3 id="1-2-矩阵-matrix">1.2 矩阵 matrix</h3><p>R 语言的矩阵是</p><ul><li><p>有维度（dimension）属性的向量</p></li><li><p>所有元素属于相同类型</p></li></ul><h4 id="1-2-1-matrix-函数">1.2.1 <code>matrix()</code> 函数</h4><p><strong>格式</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix<span class="punctuation">(</span><span class="literal">NA</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># NA 第一个参数为传入的数据</span></span><br><span class="line"><span class="comment"># nrow 行数</span></span><br><span class="line"><span class="comment"># ncol 列数</span></span><br><span class="line"><span class="comment"># byrow 是否按照行排列</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">6</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">matrix<span class="punctuation">(</span><span class="number">1</span><span class="operator">:</span><span class="number">6</span><span class="punctuation">,</span> nrow <span class="operator">=</span> <span class="number">2</span><span class="punctuation">,</span> ncol <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> byrow <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636318797.png" style="zoom:50%;" /><h4 id="1-2-2-cbind-rbind-函数">1.2.2 <code>cbind()</code> <code>rbind()</code> 函数</h4><p>将向量按行/列组合成矩阵</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">6</span><span class="punctuation">)</span></span><br><span class="line">cbind<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">)</span></span><br><span class="line">rbind<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636694142.png" style="zoom:50%;" /><h3 id="1-3-数据框-data-frame">1.3 数据框 data frame</h3><ul><li><p>矩阵 <code>Matrix</code> 中只能是<strong>同一种类型</strong>的元素，一般是数值型</p></li><li><p>数据框 <code>Data Frame</code> 不同列可以是<strong>不同数据类型</strong></p></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">5</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">11</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">,</span> <span class="number">12</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">weight <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4.4</span><span class="punctuation">,</span> <span class="number">5.3</span><span class="punctuation">,</span> <span class="number">7.2</span><span class="punctuation">,</span> <span class="number">5.2</span><span class="punctuation">,</span> <span class="number">8.5</span><span class="punctuation">,</span> <span class="number">7.3</span><span class="punctuation">,</span> <span class="number">6.0</span><span class="punctuation">,</span> <span class="number">10.4</span><span class="punctuation">,</span> <span class="number">10.2</span><span class="punctuation">,</span> <span class="number">6.1</span><span class="punctuation">)</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span> <span class="string">&quot;M&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">df <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>age<span class="punctuation">,</span> weight<span class="punctuation">,</span> gender<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">dim</span><span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">nrow<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br><span class="line">ncol<span class="punctuation">(</span>df<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740636915047.png" style="zoom:50%;" /><blockquote><p><code>dim</code> <code>nrow</code> <code>ncol</code> 函数也可用于矩阵 <code>matrix</code> 类型</p></blockquote><h3 id="1-4-列表-list">1.4 列表 list</h3><ul><li><code>List</code> 是一个广义的 “向量”</li><li>每个位置上是任意的R对象，甚至是一个列表</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">list</span><span class="punctuation">(</span>member <span class="operator">=</span> <span class="number">3</span><span class="punctuation">,</span> <span class="built_in">names</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Jerry&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Lily&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740637915471.png" style="zoom:50%;" /><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">names</span><span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># x 列表元素的别名</span></span><br><span class="line">x<span class="operator">$</span>member  <span class="comment"># 取 x 列表的 member</span></span><br><span class="line"><span class="built_in">length</span><span class="punctuation">(</span>x<span class="punctuation">)</span>  <span class="comment"># 取列表长</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740638021720.png" style="zoom:50%;" /><blockquote><p>使用 <code>$</code> 取列表的某一位置的数据</p></blockquote><h3 id="1-5-因子-factors">1.5 因子 factors</h3><p>因子是一种特殊的向量：映射到整数编码，并记录所有可能的类别（称为<strong>水平，levels</strong>）。</p><p>使用 <code>factor()</code> 函数创建因子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：性别数据</span></span><br><span class="line">gender <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">,</span> <span class="string">&quot;女&quot;</span><span class="punctuation">,</span> <span class="string">&quot;男&quot;</span><span class="punctuation">)</span></span><br><span class="line">gender_factor <span class="operator">&lt;-</span> factor<span class="punctuation">(</span>gender<span class="punctuation">)</span></span><br><span class="line">gender_factor</span><br><span class="line"></span><br><span class="line">levels<span class="punctuation">(</span>gender_factor<span class="punctuation">)</span> <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;male&quot;</span><span class="punctuation">,</span> <span class="string">&quot;female&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">gender_factor</span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639382068.png" style="zoom:50%;" /><h3 id="1-6-对象的判断和转换">1.6 对象的判断和转换</h3><h4 id="1-6-1-强制转换">1.6.1 强制转换</h4><p>把 R 对象从一种类型强制转化成另一个类型</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> 1<span class="operator">:</span><span class="number">6</span></span><br><span class="line"><span class="built_in">as.logical</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.character</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639618782.png" style="zoom:50%;" /><ul><li>如果转换失败，则返回 <code>NA</code></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">,</span> <span class="string">&quot;c&quot;</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.logical</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">as.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740639731257.png" style="zoom:50%;" /><h4 id="1-6-2-判断">1.6.2 判断</h4><ul><li><code>NA</code> ：缺失数据 not available</li><li><code>NaN</code> ：无意义的数 not a number</li></ul><p><strong>格式</strong>：使用函数判断</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个元素分别判断</span></span><br><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.nan</span><span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">,</span> <span class="operator">-</span><span class="number">1</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.na</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="built_in">is.nan</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sqrt</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740640084551.png" style="zoom:50%;" /><blockquote><p>特殊的数字计算 <code>Inf</code> 无穷的计算</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Inf</span> <span class="operator">+</span> <span class="punctuation">(</span><span class="operator">-</span><span class="literal">Inf</span><span class="punctuation">)</span>  <span class="comment"># NaN</span></span><br></pre></td></tr></table></figure><h2 id="2-数据的输入">2 数据的输入</h2><h3 id="2-1-外部数据类型">2.1 外部数据类型</h3><ul><li>文本文件</li></ul><p>例如 <code>.txt</code> <code>.csv</code> <code>.dat</code> 文件</p><ul><li>其他文件</li></ul><p>例如 <code>.xls</code> <code>.xlsx</code> (Excel) 、 <code>.sas7bdat</code> (SAS)、 <code>.sav</code> (SPSS)、<code>.dta</code> (Stata)、<code>.RData</code> ® 和 <code>.dat</code> 文件</p><blockquote><p>先进行转化再读取，或用专门的程序包</p></blockquote><h3 id="2-2-文本数据读取">2.2 文本数据读取</h3><p>读取文本数据常见的函数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="string">&quot;example.csv&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-3-read-table-函数">2.3 <code>read.table()</code> 函数</h3><p><strong>参数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="built_in">quote</span> <span class="operator">=</span> <span class="string">&quot;\&quot;&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">           dec <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> numerals <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;allow.loss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;warn.loss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;no.loss&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">           row.names<span class="punctuation">,</span> col.names<span class="punctuation">,</span> as.is <span class="operator">=</span> <span class="operator">!</span>stringsAsFactors<span class="punctuation">,</span> tryLogical <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">           na.strings <span class="operator">=</span> <span class="string">&quot;NA&quot;</span><span class="punctuation">,</span> colClasses <span class="operator">=</span> <span class="literal">NA</span><span class="punctuation">,</span> nrows <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">           skip <span class="operator">=</span> <span class="number">0</span><span class="punctuation">,</span> check.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> fill <span class="operator">=</span> <span class="operator">!</span>blank.lines.skip<span class="punctuation">,</span></span><br><span class="line">           strip.white <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> blank.lines.skip <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">           comment.char <span class="operator">=</span> <span class="string">&quot;#&quot;</span><span class="punctuation">,</span></span><br><span class="line">           allowEscapes <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> flush <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">           stringsAsFactors <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span></span><br><span class="line">           fileEncoding <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> encoding <span class="operator">=</span> <span class="string">&quot;unknown&quot;</span><span class="punctuation">,</span> text<span class="punctuation">,</span> skipNul <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- file: 文件名路径, 字符串形式</span><br><span class="line">- header: 表示文件第一行是否含有列名</span><br><span class="line">- sep: 分隔符, 字符串, 表示各列按照 sep 指定的符号分隔</span><br><span class="line">- nrows: 表示读取数据部分的最大行数</span><br><span class="line">- skip: 表示跳过一定的行数后开始读取</span><br><span class="line">- comment.char: 注释标记, 此符号右边的所有内容都会被忽略</span><br><span class="line">- row.names: 将某一列设置为行名</span><br><span class="line">- col.names: 将某一行设置为列名</span><br></pre></td></tr></table></figure><p>例如：读取下面的 <code>grade.txt</code> 文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------</span><br><span class="line">%%% grade of class A, year 2020</span><br><span class="line">Name ID Grade GPA Gender</span><br><span class="line">&quot;Xiao Ming&quot; 133001 100 4 F</span><br><span class="line">&quot;Xiao Hong&quot; 133023 90 3.7 M</span><br><span class="line">&quot;Xiao Wan&quot; 133099 85 3.2 M</span><br><span class="line">&quot;Song Hui&quot; 133020 80 3.5 M</span><br><span class="line">&quot;Song Yi&quot; 133019 100 4 M</span><br><span class="line">&quot;Donald Trump&quot; 133012 88 3.7 M</span><br><span class="line">&quot;Clinton Hilary&quot; 133014 90 3.7 F%%% retake</span><br><span class="line">&quot;Obama BH&quot; 133010 &quot;&quot; &quot;&quot; M%%% Fail</span><br><span class="line">------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t <span class="operator">&lt;-</span> read.table<span class="punctuation">(</span></span><br><span class="line">    file <span class="operator">=</span> <span class="string">&quot;./grade.txt&quot;</span><span class="punctuation">,</span> <span class="comment"># 文件路径</span></span><br><span class="line">    header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> <span class="comment"># 第一行为列名</span></span><br><span class="line">    sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span> <span class="comment"># 按照空格分割</span></span><br><span class="line">    comment.char <span class="operator">=</span> <span class="string">&quot;%&quot;</span><span class="punctuation">,</span> <span class="comment"># % 为注释</span></span><br><span class="line">    skip <span class="operator">=</span> <span class="number">1</span><span class="punctuation">,</span> <span class="comment"># 跳过一行</span></span><br><span class="line">    nrows <span class="operator">=</span> <span class="number">8</span><span class="punctuation">,</span> <span class="comment"># 跳过一行后读 8 行</span></span><br><span class="line">    row.names <span class="operator">=</span> <span class="number">2</span> <span class="comment"># 第 2 列设为行名</span></span><br><span class="line"><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> t</span><br><span class="line">                 Name Grade GPA Gender</span><br><span class="line"><span class="number">133001</span>      Xiao Ming   <span class="number">100</span> <span class="number">4.0</span>      <span class="built_in">F</span></span><br><span class="line"><span class="number">133023</span>      Xiao Hong    <span class="number">90</span> <span class="number">3.7</span>      M</span><br><span class="line"><span class="number">133099</span>       Xiao Wan    <span class="number">85</span> <span class="number">3.2</span>      M</span><br><span class="line"><span class="number">133020</span>       Song Hui    <span class="number">80</span> <span class="number">3.5</span>      M</span><br><span class="line"><span class="number">133019</span>        Song Yi   <span class="number">100</span> <span class="number">4.0</span>      M</span><br><span class="line"><span class="number">133012</span>   Donald Trump    <span class="number">88</span> <span class="number">3.7</span>      M</span><br><span class="line"><span class="number">133014</span> Clinton Hilary    <span class="number">90</span> <span class="number">3.7</span>      <span class="built_in">F</span></span><br><span class="line"><span class="number">133010</span>       Obama BH    <span class="literal">NA</span>  <span class="literal">NA</span>      M</span><br></pre></td></tr></table></figure><blockquote><p>其他读取函数类似，只是参数默认值不同，可以相互替代</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.csv<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;,&quot;</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br><span class="line">read.delim<span class="punctuation">(</span>file<span class="punctuation">,</span> header <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span> ...<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>对于一些常规的文本文件，可直接使用默认参数。例如：</p><ul><li>标准的 <code>.txt</code> 数据文件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;A&quot;, 1, 10.1</span><br><span class="line">&quot;B&quot;, 2, 20.5</span><br><span class="line">&quot;C&quot;, 4, 1031.1</span><br></pre></td></tr></table></figure><ul><li>标准的 <code>.csv</code> 文件</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a,b,c</span><br><span class="line">1,2,3</span><br><span class="line">4,5,6</span><br><span class="line">7,8,9</span><br></pre></td></tr></table></figure><p>可以直接使用</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read.table<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line">read.csv<span class="punctuation">(</span><span class="string">&quot;example.csv&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-4-scan-函数">2.4 <code>scan()</code> 函数</h3><p><code>scan()</code> 函数更灵活，可以读进不规则的数值文档，得到一个向量或者列表</p><ul><li>需要 <code>what</code> 参数指定变量类型，得到一个<code>列表</code></li></ul><p>例如：针对下面的 <code>.txt</code> 文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">M 65 168</span><br><span class="line">M 70 172</span><br><span class="line">F 54 156</span><br><span class="line">F 58 163</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定第一列字符，第二、三列为数值</span></span><br><span class="line">scan<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">,</span> what <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定每一列的名称</span></span><br><span class="line">scan<span class="punctuation">(</span><span class="string">&quot;example.txt&quot;</span><span class="punctuation">,</span> what <span class="operator">=</span> <span class="built_in">list</span><span class="punctuation">(</span><span class="string">&quot;gender&quot;</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;weight&quot;</span> <span class="operator">=</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="string">&quot;height&quot;</span> <span class="operator">=</span> numeric<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740646352843.png" style="zoom:50%;" /><ul><li><code>scan()</code> 函数还可以读取不规则长度的数值文档，得到一个<code>向量</code></li></ul><p>例如：对于数值文档 <code>example2.txt</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2 3 4</span><br><span class="line">5 6 7 8 9</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> scan<span class="punctuation">(</span><span class="string">&quot;example2.txt&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line">Read <span class="number">9</span> items</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="2-5-read-fwf-函数">2.5 <code>read.fwf()</code> 函数</h3><p>读取文件中一些固定宽度数据，例如可以指定每一列的宽度为几，函数便会按照提前设置的宽度读取数据</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># M65168</span></span><br><span class="line"><span class="comment"># M70172</span></span><br><span class="line"><span class="comment"># F54156</span></span><br><span class="line"><span class="comment"># F58163</span></span><br><span class="line"></span><br><span class="line">t <span class="operator">&lt;-</span> read.fwf<span class="punctuation">(</span></span><br><span class="line">    file <span class="operator">=</span> <span class="string">&quot;example3.txt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    widths <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">    col.names <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;gender&quot;</span><span class="punctuation">,</span> <span class="string">&quot;weight&quot;</span><span class="punctuation">,</span> <span class="string">&quot;height&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">)</span> <span class="comment"># 指定每一列宽度分别为 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> t</span><br><span class="line">  gender weight height</span><br><span class="line"><span class="number">1</span>      M     <span class="number">65</span>    <span class="number">168</span></span><br><span class="line"><span class="number">2</span>      M     <span class="number">70</span>    <span class="number">172</span></span><br><span class="line"><span class="number">3</span>      <span class="built_in">F</span>     <span class="number">54</span>    <span class="number">156</span></span><br><span class="line"><span class="number">4</span>      <span class="built_in">F</span>     <span class="number">58</span>    <span class="number">163</span></span><br></pre></td></tr></table></figure><h3 id="2-6-读取-excel-数据">2.6 读取 excel 数据</h3><ul><li>转换为 <code>csv</code> 文件读取</li><li>复制后使用 <code>read.delim(&quot;clipboard&quot;)</code> 从<code>剪切板</code>中读取</li><li>使用程序包读取</li></ul><p>常用程序包 <code>readxl</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;readxl&quot;</span><span class="punctuation">)</span></span><br><span class="line">library<span class="punctuation">(</span><span class="string">&quot;readxl&quot;</span><span class="punctuation">)</span></span><br><span class="line">t <span class="operator">&lt;-</span> read_excel<span class="punctuation">(</span><span class="string">&quot;example.xlsx&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="2-7-读取网页-url-和-readLines-函数">2.7 读取网页 <code>url()</code> 和 <code>readLines()</code> 函数</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">con <span class="operator">&lt;-</span> url<span class="punctuation">(</span><span class="string">&quot;https://www.baidu.com/&quot;</span><span class="punctuation">)</span></span><br><span class="line">x <span class="operator">&lt;-</span> readLines<span class="punctuation">(</span>con<span class="punctuation">)</span></span><br><span class="line">head<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="3-数据的输出">3 数据的输出</h2><h3 id="3-1-write-table-函数">3.1 <code>write.table()</code> 函数</h3><p><strong>参数</strong></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write.table<span class="punctuation">(</span>x<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> append <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">,</span> <span class="built_in">quote</span> <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> sep <span class="operator">=</span> <span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">            eol <span class="operator">=</span> <span class="string">&quot;\n&quot;</span><span class="punctuation">,</span> na <span class="operator">=</span> <span class="string">&quot;NA&quot;</span><span class="punctuation">,</span> dec <span class="operator">=</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span></span><br><span class="line">            col.names <span class="operator">=</span> <span class="literal">TRUE</span><span class="punctuation">,</span> qmethod <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;escape&quot;</span><span class="punctuation">,</span> <span class="string">&quot;double&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span></span><br><span class="line">            fileEncoding <span class="operator">=</span> <span class="string">&quot;&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;将 x 写入文件 file 中&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># sep: 各列分割符号</span></span><br><span class="line"><span class="comment"># quote = TRUE: 字符和因子列就会被 &quot;&quot; 所包裹</span></span><br><span class="line"><span class="comment"># eol: 尾行分隔符</span></span><br><span class="line"><span class="comment"># na: 缺失值字符串</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据框 d</span></span><br><span class="line">d <span class="operator">&lt;-</span> data.frame<span class="punctuation">(</span>obs <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span><span class="punctuation">,</span> treat <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;A&quot;</span><span class="punctuation">,</span> <span class="string">&quot;B&quot;</span><span class="punctuation">,</span> <span class="string">&quot;A&quot;</span><span class="punctuation">)</span><span class="punctuation">,</span> weight <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">2.3</span><span class="punctuation">,</span> <span class="literal">NA</span><span class="punctuation">,</span> <span class="number">9</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为简单文本 txt</span></span><br><span class="line">write.table<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.txt&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 保存为 , 分割文本</span></span><br><span class="line">write.csv<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.csv&quot;</span><span class="punctuation">,</span> row.names <span class="operator">=</span> <span class="literal">FALSE</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># 保存为 .RData 格式文件</span></span><br><span class="line">save<span class="punctuation">(</span>d<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;./lec02/foo.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文详细介绍了 R 语言常见的对象类型，包括向量、矩阵、数据框等。同时介绍了如何读取数据和输出数据，包括 read.table 函数等。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>搭建神经网络 PyTorch 实战：MNIST 手写数字集分类问题训练全流程</title>
    <link href="https://blog.iskage.online/posts/6dd74203.html"/>
    <id>https://blog.iskage.online/posts/6dd74203.html</id>
    <published>2025-02-26T12:32:00.000Z</published>
    <updated>2025-02-26T10:40:06.548Z</updated>
    
    <content type="html"><![CDATA[<h1>MNIST 手写数字集分类问题：基于 AlexNet 神经网络</h1><p><code>Python</code> <code>PyTorch</code> <code>MNIST</code> <code>Dataset</code> <code>Dataloarder</code> <code>Tensorboard</code></p><p>本文介绍如何读取 MNIST 数据集，搭建 AlexNet 简单卷积神经网络，模型训练和验证。模型在验证集的准确率大约 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>95</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">95\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">95%</span></span></span></span> 。</p><p>已开源在 <a href="https://github.com/isKage/mnist-classification">GitHub库</a></p><p>使用 <code>git</code> 下载。进入空目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/mnist-classification.git</span><br></pre></td></tr></table></figure><ul><li>PyTorch 的安装和环境配置可见 <a href="https://zhuanlan.zhihu.com/p/22230632892">zhihu</a></li><li>安装指定依赖：【进入 <code>requirements.txt</code> 根目录下安装】</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="0-本地配置-config-py">0 本地配置 <a href="http://config.py">config.py</a></h2><p>在根目录下创建 <code>config.py</code> 文件写入本地配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultConfig</span>:</span><br><span class="line">    model = <span class="string">&#x27;Classification10Class&#x27;</span></span><br><span class="line">    root = <span class="string">&#x27;&lt;路径&gt;/AllData/datasets/hojjatk/mnist-dataset&#x27;</span></span><br><span class="line">    logdir = <span class="string">&#x27;./logs&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取最新模型参数</span></span><br><span class="line">    param_path = <span class="string">&#x27;./checkpoints/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.listdir(param_path):</span><br><span class="line">        load_model_path = <span class="literal">None</span>  <span class="comment"># 加载预训练的模型的路径，为None代表不加载</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        load_model_path = os.path.join(</span><br><span class="line">            param_path,</span><br><span class="line">            <span class="built_in">sorted</span>(</span><br><span class="line">                os.listdir(param_path),</span><br><span class="line">                key=<span class="keyword">lambda</span> x: datetime.strptime(</span><br><span class="line">                    x.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.pth&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )[-<span class="number">1</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    lr = <span class="number">0.03</span></span><br><span class="line">    max_epochs = <span class="number">1</span>  <span class="comment"># 暂时不调参，只训练一次</span></span><br><span class="line">    batch_size = <span class="number">64</span></span><br><span class="line">    num_workers = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    print_feq = <span class="number">100</span>  <span class="comment"># 输出频率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        gpu = <span class="literal">True</span></span><br><span class="line">        device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gpu = <span class="literal">False</span></span><br><span class="line">        device = torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据字典kwargs 更新 config 参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, k):</span><br><span class="line">                warnings.warn(<span class="string">&quot;Warning: opt has not attribute %s&quot;</span> % k)</span><br><span class="line">            <span class="built_in">setattr</span>(<span class="variable language_">self</span>, k, v)</span><br><span class="line"></span><br><span class="line">        config.device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span>) <span class="keyword">if</span> config.gpu <span class="keyword">else</span> torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;User config:&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="variable language_">self</span>.__class__.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(k, <span class="built_in">getattr</span>(<span class="variable language_">self</span>, k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = DefaultConfig()</span><br></pre></td></tr></table></figure><h2 id="1-读取-MNIST-数据集">1 读取 MNIST 数据集</h2><p>直接使用 <code>torchvision.datasets.MNIST</code> 会出现网络问题，难以下载。<br>可以先前往 <a href="https://www.kaggle.com/datasets/hojjatk/mnist-dataset">kaggle</a> 下载。<br>使用 kaggle 命令下载教程可见 <a href="https://zhuanlan.zhihu.com/p/25732245405">从 Kaggle 下载数据集（mac 和 win 端）</a>。</p><p>然后自定义 <code>get_data.py</code> 的 <code>getData</code> 函数读取数据集。其中 <code>config</code> 为本地配置（包含了一些参数和文件路径）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getData</span>(<span class="params">root=config.root, batch_size=config.batch_size</span>):</span><br><span class="line">    <span class="comment"># 1. 准备数据集</span></span><br><span class="line">    train_dataset = torchvision.datasets.MNIST(</span><br><span class="line">        root=root,</span><br><span class="line">        train=<span class="literal">True</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(),</span><br><span class="line">        download=<span class="literal">False</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    test_dataset = torchvision.datasets.MNIST(</span><br><span class="line">        root=root,</span><br><span class="line">        train=<span class="literal">False</span>,</span><br><span class="line">        transform=torchvision.transforms.ToTensor(),</span><br><span class="line">        download=<span class="literal">False</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 获取数据集长度</span></span><br><span class="line">    train_data_size = <span class="built_in">len</span>(train_dataset)</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_dataset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练数据集长度为 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试数据集长度为 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 利用DataLoader加载数据集</span></span><br><span class="line">    train_dataloader = DataLoader(</span><br><span class="line">        dataset=train_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    test_dataloader = DataLoader(</span><br><span class="line">        dataset=test_dataset,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_dataset, test_dataset, train_dataloader, test_dataloader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train_dataset, test_dataset, train_dataloader, test_dataloader = getData()</span><br><span class="line">    img, label = train_dataset[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(img.shape)</span><br><span class="line">    <span class="built_in">print</span>(label)</span><br></pre></td></tr></table></figure><h2 id="2-搭建网络">2 搭建网络</h2><p>MNIST 数据集较为简单，使用简单的 AlexNet 卷积神经网络即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicModule</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作为基类，继承 nn.Module 但增加了模型保存和加载功能 save and load</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="built_in">str</span>(<span class="built_in">type</span>(<span class="variable language_">self</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, model_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据模型路径加载模型</span></span><br><span class="line"><span class="string">        :param model_path: 模型路径</span></span><br><span class="line"><span class="string">        :return: 模型</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.load_state_dict(torch.load(model_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, filename=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        保存模型，默认使用 &quot;模型名字 + 时间&quot; 作为文件名，也可以自定义</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            filename = <span class="string">&#x27;checkpoints/&#x27;</span> + <span class="variable language_">self</span>.model_name + <span class="string">&#x27;_&#x27;</span> + time.strftime(<span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span>) + <span class="string">&#x27;.pth&#x27;</span></span><br><span class="line">        torch.save(<span class="variable language_">self</span>.state_dict(), filename)</span><br><span class="line">        <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Classification10Class</span>(<span class="title class_ inherited__">BasicModule</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Classification10Class, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="string">&#x27;Classification10Class&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.module = nn.Sequential(</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">16</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">32</span>, out_channels=<span class="number">64</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">3</span> * <span class="number">3</span>, out_features=<span class="number">64</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span>, out_features=<span class="number">10</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.module(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证网络正确性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    classification = Classification10Class()</span><br><span class="line">    <span class="comment"># 按照batch_size=64，channel=1，size=28 * 28输入</span></span><br><span class="line">    inputs = torch.ones((<span class="number">64</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">    outputs = classification(inputs)</span><br><span class="line">    <span class="built_in">print</span>(outputs.shape)</span><br></pre></td></tr></table></figure><h2 id="3-主程序">3 主程序</h2><p>主程序 <code>main.py</code> 包含了训练、验证和写入 tensorboard 可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> get_data <span class="keyword">import</span> getData</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    config._parse(kwargs)</span><br><span class="line">    classification = <span class="built_in">getattr</span>(models, config.model)()</span><br><span class="line">    classification.to(config.device)</span><br><span class="line"></span><br><span class="line">    train_dataset, test_dataset, train_dataloader, test_dataloader = getData()</span><br><span class="line">    test_data_size = <span class="built_in">len</span>(test_dataset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 损失函数</span></span><br><span class="line">    loss_fn = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 优化器</span></span><br><span class="line">    learning_rate = <span class="number">0.01</span></span><br><span class="line">    optimizer = torch.optim.SGD(</span><br><span class="line">        params=classification.parameters(),</span><br><span class="line">        lr=config.lr,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7. 设置训练网络的参数</span></span><br><span class="line">    total_train_step = <span class="number">0</span>  <span class="comment"># 训练次数</span></span><br><span class="line">    total_test_step = <span class="number">0</span>  <span class="comment"># 测试次数 == epoch</span></span><br><span class="line">    epochs = config.max_epochs  <span class="comment"># 训练迭代次数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加tensorboard可视化</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;./logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8. 开始训练</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;------------- 第 &#123;&#125; 轮训练开始 -------------&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练步骤</span></span><br><span class="line">        classification.train()</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">            <span class="comment"># 输入输出</span></span><br><span class="line">            images, targets = data</span><br><span class="line">            images, targets = images.to(config.device), targets.to(config.device)</span><br><span class="line"></span><br><span class="line">            outputs = classification(images)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 损失函数</span></span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 清零梯度</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 反向传播</span></span><br><span class="line">            loss.backward()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新参数</span></span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            total_train_step += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> total_train_step % config.print_feq == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;训练次数: &#123;&#125;, loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">                writer.add_scalar(</span><br><span class="line">                    tag=<span class="string">&quot;train_loss (every 100 steps)&quot;</span>,</span><br><span class="line">                    scalar_value=loss.item(),</span><br><span class="line">                    global_step=total_train_step,</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 测试步骤(不更新参数)</span></span><br><span class="line">        classification.<span class="built_in">eval</span>()</span><br><span class="line">        total_test_loss = <span class="number">0</span>  <span class="comment"># 测试集损失累积</span></span><br><span class="line">        total_accuracy = <span class="number">0</span>  <span class="comment"># 分类问题正确率</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">                images, targets = data</span><br><span class="line">                images, targets = images.to(config.device), targets.to(config.device)</span><br><span class="line"></span><br><span class="line">                outputs = classification(images)</span><br><span class="line"></span><br><span class="line">                loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">                total_test_loss += loss.item()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 正确率</span></span><br><span class="line">                accuracy = (outputs.argmax(axis=<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">                total_accuracy += accuracy</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在测试集上的损失</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的 loss: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">        writer.add_scalar(</span><br><span class="line">            tag=<span class="string">&quot;test_loss (every epoch)&quot;</span>,</span><br><span class="line">            scalar_value=total_test_loss,</span><br><span class="line">            global_step=epoch,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在测试集上的正确率</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 在测试集上的正确率: &#123;&#125; #####&quot;</span>.<span class="built_in">format</span>(total_accuracy / test_data_size))</span><br><span class="line">        writer.add_scalar(</span><br><span class="line">            tag=<span class="string">&quot;test_accuracy (every epoch)&quot;</span>,</span><br><span class="line">            scalar_value=total_accuracy / test_data_size,</span><br><span class="line">            global_step=epoch,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存每次训练的模型</span></span><br><span class="line">        classification.save()  <span class="comment"># 保存</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;##### 模型成功保存 #####&quot;</span>)</span><br><span class="line"></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line">    fire.Fire()</span><br></pre></td></tr></table></figure><h2 id="4-运行程序">4 运行程序</h2><p>使用 <code>fire</code> 包，从而实现终端训练。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>即可运行主程序的 <code>train</code> 函数。</p>]]></content>
    
    
    <summary type="html">本文介绍如何读取 MNIST 数据集，搭建 AlexNet 简单卷积神经网络，模型训练和验证。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>算法分析：原子操作与时间复杂度</title>
    <link href="https://blog.iskage.online/posts/45784f54.html"/>
    <id>https://blog.iskage.online/posts/45784f54.html</id>
    <published>2025-02-26T11:43:00.000Z</published>
    <updated>2025-02-26T10:12:31.180Z</updated>
    
    <content type="html"><![CDATA[<h1>算法分析：原子操作与时间复杂度</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><p>研究算法运行的时间非常重要，我们往往关注：</p><ol><li>算法运行时间与输入大小的关系</li><li>往往考虑最差的情况</li></ol><h2 id="1-实验研究">1 实验研究</h2><p>如果算法是准确的，且已经可以正常运行。可以采用最简单的方法检验时间，即直接计算算法执行的时间差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># run algorithm</span></span><br><span class="line"><span class="comment"># 算法执行</span></span><br><span class="line"></span><br><span class="line">end = time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(end - start)</span><br></pre></td></tr></table></figure><p>显然这种方法简单，但缺点明显【不推荐使用】：</p><ul><li>比较不同算法时，要控制硬件等条件相同</li><li>算法的输入可能并不够，例如对于巨量数据输入，每次都测试显然是不明智的</li><li>这个方法必须要求算法能过成功运行</li></ul><h2 id="2-原子操作">2 原子操作</h2><h3 id="2-1-伪代码">2.1 伪代码</h3><p>所以为了解决上面的问题，我们往往分析伪代码，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Algorithm method (arg [, arg, ...])</span><br><span class="line">Input: ...</span><br><span class="line">    Output: ...</span><br><span class="line">    <span class="comment"># 一些操作</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>不关注代码能否执行，只用于评价算法的好坏。</p><h3 id="2-2-原子操作">2.2 原子操作</h3><p>原子操作是算法进行的一些基本运算：</p><ul><li>在伪代码中可被识别出来（无须算法成立即可进行评价）</li><li>很大程度上独立于编程语言而存在（即适用于各种环境）</li><li>执行时间为常数（基本单元，与输入大小 <code>n</code> 无关）</li></ul><p>按照原子操作的观点，我们可以根据操作总时间与输入大小的关系，评价一个算法的好坏。即寻找某种函数关系：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t = f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> 为算法执行的时间，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 为算法输入的大小。下面是常见的函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span> 形式。</p><h2 id="3-常见函数">3 常见函数</h2><h3 id="3-1-常见-7-个函数">3.1 常见 7 个函数</h3><p>算法分析里常见的 7 个函数为：</p><ul><li>常数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">f(n) = C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>这表明，无论算法输入的大小 <code>n</code> 如何变化，算法所有原子操作的执行时间总和大约为一个常数。这是算法分析里最好的情况，表示这个算法非常的迅速。</p><ul><li>对数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，这里的对数底数并不重要。</p><ul><li>线性函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，添加常数系数不影响，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">C \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 等价于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 。</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = n \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>注意，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 是一个比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 更小的函数，可以理解为</p><p>\lim_\limits{n \to \infty} \frac{\log n}{n} = 0</p><ul><li>二次函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">f(n) = n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>常见的输入大小为 <code>n</code> 却要执行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 次的算法为两层 <code>for</code> 循环（嵌套循环）。</p><ul><li>三次函数和其他多项式</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo>×</mo><mi>n</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>×</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>d</mi></msub><mo>×</mo><msup><mi>n</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">f(n) = a_0 + a_1 \times n + a_2 \times n^2 + \cdots + a_d \times n^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></p><p>与二次函数类似，这一类问题的操作数满足一个多项式函数。</p><ul><li>指数函数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">f(n) = b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 为某一个常数，指数增长非常迅速。</p><h3 id="3-2-比较增长率">3.2 比较增长率</h3><p>一般而言，我们希望</p><ul><li>数据结构的操作运行时间与常数函数或对数函数成正比</li><li>算法以线性函数或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 函数运行</li><li>运行时间与二次、三次函数相关的难以应对大规模输入数据的情形</li><li>指数函数则完全不可行</li></ul><p>使用双对数刻度画出这 7 个函数的图像，即可直观地体悟它们的增长速度。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740560780545.png" alt=""></p><blockquote><p>双对数刻度：指的是对坐标轴刻度进行放缩，按照 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>10</mn><mn>1</mn></msup><mo separator="true">,</mo><msup><mn>10</mn><mn>2</mn></msup><mo separator="true">,</mo><msup><mn>10</mn><mn>3</mn></msup><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">10^1, 10^2, 10^3, \cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span> 的数值等距标注刻度。</p></blockquote><h2 id="4-渐进分析">4 渐进分析</h2><p>实际分析中，我们不用求出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的确切表达。只需知道算法操作时间与哪个形式的函数成正比即可。</p><h3 id="4-1-大-O-符号">4.1 大 O 符号</h3><p><strong>定义</strong>：令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>:</mo><mi mathvariant="double-struck">N</mi><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">f(n),\ g(n): \N \to \R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">R</span></span></span></span> 的函数，如果对任意常数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">c &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ，都存在整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 \geq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 使得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mtext>when  </mtext><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">f(n) \leq c \cdot g(n),\quad \text{when}\ \ n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">when</span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>成立，则称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span> 。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740564008502.png" alt="QQ_1740564008502" style="zoom:50%;" /><p>例如：对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">f(n) = 3n+5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span> 我们寻找 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>5</mn><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mo>⋅</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n) = 3n+5 \leq c\cdot g(n) = c \cdot n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 不难发现，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><mo stretchy="false">[</mo><mfrac><mn>5</mn><mrow><mi>c</mi><mo>−</mo><mn>3</mn></mrow></mfrac><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>:</mo><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq [\frac{5}{c-3}] + 1 := n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2484em;vertical-align:-0.4033em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mbin mtight">−</span><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) \leq c\cdot g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。所以可知  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。</p><h3 id="4-2-大-O-的性质">4.2 大 O 的性质</h3><p>大 O 符号能让我们忽略那些常量因子和低阶项。常见的有</p><ul><li>多项式保留最高阶即可</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo>×</mo><mi>n</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><mo>×</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>d</mi></msub><mo>×</mo><msup><mi>n</mi><mi>d</mi></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mi>d</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(a_0 + a_1 \times n + a_2 \times n^2 + \cdots + a_d \times n^d) = O(n^d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 增长的更快</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n + \log n) = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 + n \log n) = O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 次方求和</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mtext> </mtext><msup><mi>i</mi><mi>k</mi></msup><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum\limits_{i=1}^n \ i^k = O(n^{k+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>指数项含有常数</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>b</mi><mrow><mi>n</mi><mo>+</mo><mi>c</mi></mrow></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>b</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(b^{n+c}) = O(b^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0713em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>b</mi><mrow><mi>n</mi><mo>+</mo><mi>c</mi></mrow></msup><mo>=</mo><msup><mi>b</mi><mi>c</mi></msup><mo>⋅</mo><msup><mi>b</mi><mi>n</mi></msup><mo>:</mo><mo>=</mo><mi>C</mi><mo>⋅</mo><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">b^{n+c} = b^c \cdot b^{n} := C\cdot b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7713em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>但需要注意的是，不可以更换底数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>。</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740563935444.png" alt=""></p><h2 id="5-算法分析实例">5 算法分析实例</h2><h3 id="5-1-寻找最大数">5.1 寻找最大数</h3><p>输入一个列表，输出列表中的最大值。列表的长度可以理解为输入大小 <code>n</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_max</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; # 寻找最大数 # &quot;&quot;&quot;</span></span><br><span class="line">    biggest = data[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> val &gt; biggest:</span><br><span class="line">            biggest = val</span><br><span class="line">    <span class="keyword">return</span> biggest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(find_max(data))</span><br></pre></td></tr></table></figure><p>一层循环，所以大约执行 n 次。其他操作均为常数次，故这个算法时间复杂度为 <code>O(n)</code></p><h3 id="5-2-计算前缀平均值">5.2 计算前缀平均值</h3><p>输入一个列表，计算前 <code>i</code> 个数字的平均值。列表的长度可以理解为输入大小 <code>n</code> 。</p><h4 id="5-2-1-二次算法">5.2.1 二次算法</h4><p>整个列表循环一层，然后在循环中再次循环加和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_average1</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 计算前缀平均值 二次算法 &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    ave = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">            total += data[j]</span><br><span class="line">        ave.append(total / (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> ave</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(prefix_average1(data))</span><br></pre></td></tr></table></figure><p>第二层循环执行 i + 1 次，而 i 在第一层循环里从 0 到 n - 1 ，故整个算法操作次数大约为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{i=0}^{n-1}\ (i+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2537em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 省略低阶项，大致为 <code>O(n^2)</code></p><h4 id="5-2-2-线性算法">5.2.2 线性算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prefix_average2</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 计算前缀平均值 线性算法 &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(data)</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    ave = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total += data[i]</span><br><span class="line">        ave.append(total / (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> ave</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(prefix_average2(data))</span><br></pre></td></tr></table></figure><p>如此只有一层循环，大致为 <code>O(n)</code></p><h3 id="5-3-三集不相交">5.3 三集不相交</h3><p>输入三个序列 <code>A, B, C</code> ，输出是否存在交集。如果存在交集，则返回 <code>True</code> 否则返回 <code>False</code></p><h4 id="5-3-1-三层循环">5.3.1 三层循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disjoint1</span>(<span class="params">A, B, C</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 三集不相交 三层循环 O(n^3) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">                <span class="keyword">if</span> a == b == c:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">B = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">C = [<span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(disjoint1(A, B, C))</span><br></pre></td></tr></table></figure><p>显然，使用了三层循环。复杂度大致为 <code>O(n^3)</code> 。（准确而言应该为三个集合大小的乘积，但本质一样）</p><h4 id="5-3-2-循环中加入判断">5.3.2 循环中加入判断</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">disjoint2</span>(<span class="params">A, B, C</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 三集不相交 循环中加入判断 O(n^3) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> B:</span><br><span class="line">            <span class="keyword">if</span> a == b:</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> C:</span><br><span class="line">                    <span class="keyword">if</span> a == c:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">B = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br><span class="line">C = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(disjoint2(A, B, C))</span><br></pre></td></tr></table></figure><p>仍然为 <code>O(n^3)</code> 例如上面的例子，当 <code>A, B, C</code> 的相同元素在最后时，不得不完全遍历。</p><h3 id="5-4-元素唯一性">5.4 元素唯一性</h3><p>给定一个长为 <code>n</code> 的序列，判断是否元素互不相同，是则为 <code>True</code></p><h4 id="5-4-1-简单的迭代">5.4.1 简单的迭代</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique1</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 元素唯一性 简单迭代 O(n^2) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> data[i] == data[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(unique1(data))</span><br></pre></td></tr></table></figure><p>与 5.2.1 节 计算前缀平均值的二次算法类似，复杂度为 <code>O(n^2)</code></p><h4 id="5-4-2-先排序">5.4.2 先排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique2</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;元素唯一性 先排序 O(n * log n)&quot;&quot;&quot;</span></span><br><span class="line">    temp = <span class="built_in">sorted</span>(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(temp)):</span><br><span class="line">        <span class="keyword">if</span> temp[i] == temp[i - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(unique2(data))</span><br></pre></td></tr></table></figure><p>循环执行了 n 次，Python 内置的 sorted 方法执行了 log n 次，故最后的复杂度为 <code>O(n * log n)</code></p>]]></content>
    
    
    <summary type="html">研究算法运行的时间非常重要，我们往往关注：算法运行时间与输入大小的关系以及最差的情况。本文介绍大 O 符号和一些算法分析实例。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（9）数据处理：增删改</title>
    <link href="https://blog.iskage.online/posts/51c8092d.html"/>
    <id>https://blog.iskage.online/posts/51c8092d.html</id>
    <published>2025-02-25T09:43:00.000Z</published>
    <updated>2025-02-25T09:05:52.236Z</updated>
    
    <content type="html"><![CDATA[<h1>数据处理：增删改</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">b站尚硅谷宋红康 MySQL 课程</a>整理。</p><hr><p><a href="https://zhuanlan.zhihu.com/column/c_1864781236800720896">之前章节</a>介绍了如何查询数据，本章介绍数据处理里另外三个基本操作：增加、删除、更改数据库数据。</p><h2 id="1-增加数据">1 增加数据</h2><p>使用 <code>INSERT INTO</code> 语句向数据表里插入数据。</p><h3 id="1-1-VALUES-方法">1.1 <code>VALUES</code> 方法</h3><ul><li>按照列名默认顺序插入数据</li></ul><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2, ...);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据，默认顺序</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;IT&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入空值</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><ul><li>指定列名插入</li></ul><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line">(列名<span class="number">1</span>, 列名<span class="number">2</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2);</span><br></pre></td></tr></table></figure><blockquote><p>指定列名进行插入，顺序默认，未插入的列按照创建表时的默认值填充。</p></blockquote><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line">(dept_name, location)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;MKT&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> dept_id <span class="operator">|</span> dept_name <span class="operator">|</span> location <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> IT        <span class="operator">|</span> Shanghai <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> <span class="keyword">NULL</span>      <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> MKT       <span class="operator">|</span> Beijing  <span class="operator">|</span>  <span class="comment">-- dept_id 是创建时的主键，默认安装数字递增</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><ul><li>插入多条数据</li></ul><p>以上两个方法都可以通过使用 <code>,</code> 分隔的方式插入多条数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2, ...),</span><br><span class="line">   (val1, val2, ...),</span><br><span class="line">   ...</span><br><span class="line">   (val1, val2, ...);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (val1, val2),</span><br><span class="line">       (val1, val2),</span><br><span class="line">       ...</span><br><span class="line">       (val1, val2);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;SALE&#x27;</span>, <span class="string">&#x27;Guangzhou&#x27;</span>),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;FINA&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>),</span><br><span class="line">       (<span class="number">6</span>, <span class="string">&#x27;MANA&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> dept(dept_id, dept_name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;IT&#x27;</span>),</span><br><span class="line">       (<span class="number">8</span>, <span class="string">&#x27;ACCT&#x27;</span>),</span><br><span class="line">       (<span class="number">9</span>, <span class="string">&#x27;LAW&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740470744341.png" alt=""></p><blockquote><p><code>VALUES</code> 关键字等价于 <code>VALUE</code> 关键字</p><p>字符和日期类型数据写在 <code>' '</code> 内</p></blockquote><h3 id="1-2-将查询结果增加到表中">1.2 将查询结果增加到表中</h3><p>使用 <code>INSERT</code> 语句和 <code>SELECT</code> 语句的组合实现先查询后增加。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 目标表</span><br><span class="line">(列名<span class="number">1</span>, 列名<span class="number">2</span>, ...)  <span class="comment">-- 可选</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">列名<span class="number">1</span>, 列名<span class="number">2</span>, ...  <span class="comment">-- 或者选择一些列</span></span><br><span class="line"><span class="keyword">FROM</span> 被查询的表</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>不需要 <code>VALUES</code> 子句，但是需要查询结果与 INSERT 目标表列相对应</li></ul><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> dept</span><br><span class="line">    (dept_name, location)</span><br><span class="line"><span class="keyword">SELECT</span> dept_name,</span><br><span class="line">       location</span><br><span class="line"><span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740471589785.png" alt=""></p><h2 id="2-更新数据">2 更新数据</h2><p><code>UPDATE</code> 语句对数据表数据进行修改。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> 列名<span class="number">1</span><span class="operator">=</span>val1, 列名<span class="number">2</span><span class="operator">=</span>val2, ...</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>如果需要备份/回滚，提取设置</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> AUTOCOMMIT <span class="operator">=</span> <span class="literal">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UPDATE 语句 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;  <span class="comment">-- ROLLBACK 后，更新结果被撤回</span></span><br></pre></td></tr></table></figure><p>例如：更新 dept_id = 3 的 dept_name 为 IT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> dept</span><br><span class="line"><span class="keyword">SET</span> dept_name <span class="operator">=</span> <span class="string">&#x27;IT&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>如果不加入 <code>WHERE</code> 语句的条件，则会对整列进行修改。</li></ul><blockquote><p>【注意】对主键、外键更新时需要先确认是否正确。例如修改后的外键并不存在，则会报错！</p></blockquote><ul><li>更新的表达式也可以使用列名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> a <span class="operator">+</span> <span class="number">100</span>  <span class="comment">-- 例如</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="3-删除数据">3 删除数据</h2><p>使用 <code>DELETE</code> 语句删除一行数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件;  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>如果不加入条件，则会清空表中数据（表仍然存在）</li></ul><p>例如：删除 id 为 10 的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>【注意】同样地，删除主键和外键都会带来问题，需要先处理关联表之间的联系，再进行删除。</p></blockquote><h2 id="4-计算列">4 计算列</h2><p>类似与 Excel 表格，由几列计算得到另一列。这样被计算得到的列称为计算列。在 <code>MySQL 8.0</code> 中，支持在 <code>CREATE</code> 和 <code>ALTER</code> 语句中定义计算列。</p><p>例如：创建一个新表，定义唯一主键 <code>id</code> ，以及用于计算的 <code>a</code> 和 <code>b</code> 两列。以及计算列 <code>c</code> 其中 <code>c = a + b</code> 即 c 列的数据由 a 列数据与 b 列数据相加得到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> calculate</span><br><span class="line">(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    a  <span class="type">INT</span>,</span><br><span class="line">    b  <span class="type">INT</span>,</span><br><span class="line">    c  <span class="type">INT</span> GENERATED ALWAYS <span class="keyword">AS</span> (a <span class="operator">+</span> b) VIRTUAL,</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>插入数据前，需要先创建表。使用计算列的前提是，必须在表的定义中指明哪一列计算列、如何计算得到。可以在创建 <code>CREATE</code> 时指明，也可以在后续修改表 <code>ALTER</code> 时指明。</p></blockquote><p>在表和计算列被定义好后，使用 <code>INSERT</code> 语句插入数据，MySQL 会自动进行计算填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> calculate</span><br><span class="line">    (a, b)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">100</span>, <span class="number">200</span>),</span><br><span class="line">       (<span class="number">120</span>, <span class="number">310</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740473410739.png" alt=""></p><p>更新数据时，同样会自动更新计算结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> calculate</span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> <span class="number">-100</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740473493702.png" alt=""></p><blockquote><p>但是不能对计算列进行修改数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> calculate</span><br><span class="line"><span class="keyword">SET</span> c <span class="operator">=</span> <span class="number">-100</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">3105</span> (HY000): The <span class="keyword">value</span> specified <span class="keyword">for</span> generated <span class="keyword">column</span> <span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> <span class="keyword">table</span> <span class="string">&#x27;calculate&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本章介绍数据处理里另外三个基本操作：增加、删除、更改数据库数据。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>搭建神经网络 PyTorch 实战：猫狗分类问题训练全流程</title>
    <link href="https://blog.iskage.online/posts/c89b028f.html"/>
    <id>https://blog.iskage.online/posts/c89b028f.html</id>
    <published>2025-02-25T05:32:00.000Z</published>
    <updated>2025-02-25T05:19:35.740Z</updated>
    
    <content type="html"><![CDATA[<h1>搭建神经网络 PyTorch 实战: 猫狗分类问题训练全流程</h1><p>根据之前的知识 <a href="https://zhuanlan.zhihu.com/column/c_1864780737208799232">专栏：PyTorch 教程</a>，本文将一步一步详细介绍如何获取数据，自定义数据集，搭建神经网络，训练、验证和测试结果的全流程。针对的问题是 kaggle 经典竞赛：猫狗二分类问题（<a href="https://www.kaggle.com/competitions/dog-vs-cat-classification">dog-vs-cat-classification</a>）</p><p>相关代码均已开源在我的 Github 库 <a href="https://github.com/isKage/dog-vs-cat-classification">https://github.com/isKage/dog-vs-cat-classification</a> 。【注意】代码只是用于介绍搭建网络、训练模型，实际参考网络效果极差，不建议使用。文章根据 <a href="https://github.com/chenyuntc/pytorch-book">深度学习框架PyTorch：入门与实践 (陈云) </a> 整理。</p><p>注意数据集较大，如果想要训练出结果需要 GPU。如果只是学习如何训练搭建网络等流程，可以自己在根目录下创建 <code>AllData</code> 文件夹，模拟数据集文件结构放入部分图片。</p><p>如果想直接运行我的 Github 代码，还可以阅读 <a href="https://github.com/isKage/dog-vs-cat-classification/blob/main/README.md">README.md</a> 文档。</p><h2 id="0-项目目录">0 项目目录</h2><p>如果直接下载我的 Github 源码。进入一个空目录后，打开终端输入【或者跟着后文一步一步编写】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/isKage/dog-vs-cat-classification.git</span><br></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AllData  <span class="comment"># 数据集存放</span></span><br><span class="line">├── README.md</span><br><span class="line">├── checkpoints  <span class="comment"># 训练好的模型        【需要自己创建】</span></span><br><span class="line">├── config.py  <span class="comment"># 配置文件，如何创建见下  【需要自己创建】</span></span><br><span class="line">├── data  <span class="comment"># 自定义数据集处理包</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   │   └── dataset.cpython-312.pyc</span><br><span class="line">│   └── dataset.py</span><br><span class="line">├── logs  <span class="comment"># 存放 tensorboard logs 文件 【需要自己创建】</span></span><br><span class="line">├── main.py  <span class="comment"># 主程序</span></span><br><span class="line">├── models  <span class="comment"># 网络模型定义</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── basic.py</span><br><span class="line">│   └── cnn.py</span><br><span class="line">├── notes  <span class="comment"># 一些笔记</span></span><br><span class="line">│   ├── kaggle_download.md</span><br><span class="line">│   └── note06_dog_vs_cat.md</span><br><span class="line">├── requirements.txt  <span class="comment"># 依赖包</span></span><br><span class="line">├── result.csv  <span class="comment"># 预测/测试结果</span></span><br><span class="line">└── utils  <span class="comment"># 一些辅助包</span></span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── visualizer.py  <span class="comment"># 封装可视化功能</span></span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="1-获取数据">1 获取数据</h2><p>从 kaggle 官网下载数据集，可以自定义数据集的统一放置路径，方便未来训练使用。具体教程见：<a href="https://zhuanlan.zhihu.com/p/25732245405">从 Kaggle 下载数据集（mac 和 win 端）</a></p><p>下载后解压，数据集结构大致为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dog-vs-cat-classification</span><br><span class="line">├── dog-vs-cat-classification.zip</span><br><span class="line">├── sample_submission.csv</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   └── <span class="built_in">test</span> <span class="comment"># 测试图片</span></span><br><span class="line">└── train</span><br><span class="line">    └── train  <span class="comment"># 训练图片</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740458311037.png" alt=""></p><h2 id="2-自定义数据集">2 自定义数据集</h2><p>根据如上的数据集文件结构，我们自定义数据集 Dataset 类。相关教程见：<a href="https://zhuanlan.zhihu.com/p/23210343084">数据处理：Dataset 类和 Dataloader 类</a>。</p><p>定义 Python 函数包 <code>data</code> ，结构如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">├── __init__.py  <span class="comment"># 初始化包</span></span><br><span class="line">└── dataset.py  <span class="comment"># 自定义的 dataset 类</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>__init__.py</code> 声明 <code>data</code> 文件夹视为 Python 的程序包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .dataset <span class="keyword">import</span> DogVsCatDataset</span><br></pre></td></tr></table></figure><p>其中 <code>.dataset</code> 指向文件 <code>dataset.py</code> 而 <code>DogVsCatDataset</code> 为我们在 <code>dataset.py</code> 中自定义的类</p><p>如此就可以在其他程序里使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> DogVsCatDataset</span><br></pre></td></tr></table></figure><ul><li><code>dataset.py</code> 中定义读取猫狗分类问题的数据集 Dataset 类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataset.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogVsCatDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载猫狗数据集&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root, trans=<span class="literal">None</span>, mode=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param root: 数据集文件路径</span></span><br><span class="line"><span class="string">        :param trans: 变换操作</span></span><br><span class="line"><span class="string">        :param mode: [&#x27;train&#x27;, &#x27;val&#x27;, &#x27;test&#x27;]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> mode <span class="keyword">in</span> [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;val&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]  <span class="comment"># 判断 mode 是否合法，否则报错</span></span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode != <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="comment"># 训练集和验证集要把猫狗训练数据都获取</span></span><br><span class="line">            root = os.path.join(root, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">            img_dir_dict = [os.path.join(root, <span class="string">&#x27;cats&#x27;</span>, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root, <span class="string">&#x27;cats&#x27;</span>))]</span><br><span class="line">            img_dir_dict += [os.path.join(root, <span class="string">&#x27;dogs&#x27;</span>, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root, <span class="string">&#x27;dogs&#x27;</span>))]</span><br><span class="line">            random.shuffle(img_dir_dict)  <span class="comment"># 猫狗图片打乱</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 测试集路径不同</span></span><br><span class="line">            root = os.path.join(root, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">            img_dir_dict = [os.path.join(root, img_dir) <span class="keyword">for</span> img_dir <span class="keyword">in</span> os.listdir(os.path.join(root))]</span><br><span class="line"></span><br><span class="line">        img_num = <span class="built_in">len</span>(img_dir_dict)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存入图片路径</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict</span><br><span class="line">        <span class="comment"># 划分数据集</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.mode == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict[:<span class="built_in">int</span>(img_num * <span class="number">0.7</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.img_dir_dict = img_dir_dict[<span class="built_in">int</span>(img_num * <span class="number">0.7</span>):]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> trans <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 数据转换操作，测试、验证和训练集的数据转换有所区别</span></span><br><span class="line">            normalize = transforms.Normalize(</span><br><span class="line">                mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], </span><br><span class="line">                std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 测试集 test 和验证集 val 不需要数据增强</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;test&quot;</span> <span class="keyword">or</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;val&quot;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.trans = transforms.Compose([</span><br><span class="line">                    transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                    transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">                    transforms.ToTensor(),</span><br><span class="line">                    normalize</span><br><span class="line">                ])</span><br><span class="line">            <span class="comment"># 训练集 需要数据增强</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.trans = transforms.Compose([</span><br><span class="line">                    transforms.Resize(<span class="number">256</span>),</span><br><span class="line">                    transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">                    transforms.RandomHorizontalFlip(),</span><br><span class="line">                    transforms.ToTensor(),</span><br><span class="line">                    normalize</span><br><span class="line">                ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        真正开始读取数据，对于测试集 test 返回 id，如 100.jpg 返回 100</span></span><br><span class="line"><span class="string">        :param index: 图片下标</span></span><br><span class="line"><span class="string">        :return: 返回张量数据和标签</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        img_path = <span class="variable language_">self</span>.img_dir_dict[index]</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.mode == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">            label = <span class="built_in">int</span>(os.path.basename(img_path).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># dog is 1, cat is 0</span></span><br><span class="line">            label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> os.path.basename(img_path).split(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取图片</span></span><br><span class="line">        data = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        data = <span class="variable language_">self</span>.trans(data)</span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回图片个数</span></span><br><span class="line"><span class="string">        :return: 数据集大小</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.img_dir_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = <span class="string">&quot;../AllData/competitions/dog-vs-cat-classification&quot;</span></span><br><span class="line">    train_dataset = DogVsCatDataset(root, mode=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    test_dataset = DogVsCatDataset(root, mode=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(train_dataset))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(test_dataset))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(os.path.basename(train_dataset.img_dir_dict[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(os.path.basename(test_dataset.img_dir_dict[<span class="number">0</span>]).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="3-搭建网络模型">3 搭建网络模型</h2><p>创建 Python 包 <code>models</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">models</span><br><span class="line">├── __init__.py</span><br><span class="line">├── basic.py</span><br><span class="line">└── cnn.py</span><br></pre></td></tr></table></figure><ul><li>同样地，使用 <code>__init__.py</code> 声明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .cnn <span class="keyword">import</span> AlexNetClassification</span><br></pre></td></tr></table></figure><ul><li>为了方便的保存模型和加载模型，我们定义一个基类，继承 <code>nn.Module</code> 提前添加 <code>save</code> 和 <code>load</code> 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># basic.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicModule</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作为基类，继承 nn.Module 但增加了模型保存和加载功能 save and load</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="built_in">str</span>(<span class="built_in">type</span>(<span class="variable language_">self</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, model_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据模型路径加载模型</span></span><br><span class="line"><span class="string">        :param model_path: 模型路径</span></span><br><span class="line"><span class="string">        :return: 模型</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.load_state_dict(torch.load(model_path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, filename=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        保存模型，默认使用 &quot;模型名字 + 时间&quot; 作为文件名，也可以自定义</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            filename = <span class="string">&#x27;checkpoints/&#x27;</span> + <span class="variable language_">self</span>.model_name + <span class="string">&#x27;_&#x27;</span> + time.strftime(<span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span>) + <span class="string">&#x27;.pth&#x27;</span></span><br><span class="line">        torch.save(<span class="variable language_">self</span>.state_dict(), filename)</span><br><span class="line">        <span class="keyword">return</span> filename</span><br></pre></td></tr></table></figure><ul><li>然后定义真正的网络模型，我们这使用了最传统简单的 AlexNet 网络【故效果不佳，可以前往 kaggle 查看更好的模型】，神经网络搭建教程可见：<a href="https://zhuanlan.zhihu.com/p/22793450207">利用 torch.nn 搭建神经网络</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cnn.py</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .basic <span class="keyword">import</span> BasicModule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AlexNetClassification</span>(<span class="title class_ inherited__">BasicModule</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes=<span class="number">2</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(AlexNetClassification, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model_name = <span class="string">&#x27;CNNClassification&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 特征提取部分</span></span><br><span class="line">        <span class="variable language_">self</span>.features = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">11</span>, stride=<span class="number">4</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">192</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">192</span>, <span class="number">384</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">384</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分类部分</span></span><br><span class="line">        <span class="variable language_">self</span>.classifier = nn.Sequential(</span><br><span class="line">            nn.Dropout(),</span><br><span class="line">            nn.Linear(<span class="number">256</span> * <span class="number">6</span> * <span class="number">6</span>, <span class="number">4096</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Dropout(),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, num_classes),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.features(x)</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)</span><br><span class="line">        x = <span class="variable language_">self</span>.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h2 id="4-可视化插件">4 可视化插件</h2><p>为了方便直观地观测训练过程，我们可以提前自定义一个可视化的 Python 包，如上一样的套路</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">utils</span><br><span class="line">├── __init__.py</span><br><span class="line">└── visualizer.py</span><br></pre></td></tr></table></figure><ul><li><code>__init__py</code>  声明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="keyword">from</span> .visualizer <span class="keyword">import</span> Visualizer</span><br></pre></td></tr></table></figure><ul><li><code>visualizer.py</code> 中封装可视化的类，这里使用的是 Tensorboard ，具体教程可见：<a href="https://zhuanlan.zhihu.com/p/23467081773">可视化工具：Tensorboard</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visualizer</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    封装了基本的 TensorBoard 操作。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, log_dir</span>):</span><br><span class="line">        <span class="comment"># 初始化 TensorBoard SummaryWriter</span></span><br><span class="line">        <span class="variable language_">self</span>.writer = SummaryWriter(log_dir=log_dir)</span><br><span class="line">        <span class="variable language_">self</span>.index = &#123;&#125;  <span class="comment"># 用于追踪图表的点</span></span><br><span class="line">        <span class="variable language_">self</span>.log_text = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 用于记录日志信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reinit</span>(<span class="params">self, log_dir, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        重新初始化 TensorBoard writer，并设置新的日志目录。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.writer = SummaryWriter(log_dir=log_dir)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plot</span>(<span class="params">self, name, y, step=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将标量值记录到 TensorBoard。</span></span><br><span class="line"><span class="string">        例如：plot(&#x27;loss&#x27;, 1.00)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(name, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_scalar(name, y, step)</span><br><span class="line">        <span class="variable language_">self</span>.index[name] = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">img</span>(<span class="params">self, name, img_, step=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将图像记录到 TensorBoard。</span></span><br><span class="line"><span class="string">        img_ 应该是一个张量（例如，torch.Tensor）。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(name, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_images(name, img_, step)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">self, info, step=<span class="literal">None</span>, win=<span class="string">&#x27;log_text&#x27;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        记录信息为文本（可选）。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            step = <span class="variable language_">self</span>.index.get(win, <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.log_text += (<span class="string">&#x27;[&#123;time&#125;] &#123;info&#125; &lt;br&gt;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            time=time.strftime(<span class="string">&#x27;%m%d_%H%M%S&#x27;</span>),</span><br><span class="line">            info=info))</span><br><span class="line">        <span class="variable language_">self</span>.writer.add_text(win, <span class="variable language_">self</span>.log_text, step)</span><br><span class="line">        <span class="variable language_">self</span>.index[win] = step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        允许访问其他 TensorBoard writer 的函数。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(<span class="variable language_">self</span>.writer, name)</span><br></pre></td></tr></table></figure><blockquote><p>使用 tensorboard ：下载 tensorboard ，程序完成后使用命令开启</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=./logs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740458248881.png" alt=""></p><h2 id="5-config-本地配置和-fire-包">5 config 本地配置和 fire 包</h2><h3 id="5-1-config-本地配置">5.1 config 本地配置</h3><p>创建 <code>config.py</code> 用于提取写好训练的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultConfig</span>:</span><br><span class="line">    model = <span class="string">&#x27;AlexNetClassification&#x27;</span></span><br><span class="line">    root = <span class="string">&#x27;./AllData/competitions/dog-vs-cat-classification&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取最新的文件</span></span><br><span class="line">    param_path = <span class="string">&#x27;./checkpoints/&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.listdir(param_path):</span><br><span class="line">        load_model_path = <span class="literal">None</span>  <span class="comment"># 加载预训练的模型的路径，为None代表不加载</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        load_model_path = os.path.join(</span><br><span class="line">            param_path,</span><br><span class="line">            <span class="built_in">sorted</span>(</span><br><span class="line">                os.listdir(param_path),</span><br><span class="line">                key=<span class="keyword">lambda</span> x: datetime.strptime(</span><br><span class="line">                    x.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;.pth&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;%Y-%m-%d%H%M%S&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )[-<span class="number">1</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        use_gpu = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        use_gpu = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    num_workers = <span class="number">0</span></span><br><span class="line">    print_freq = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    max_epochs = <span class="number">10</span></span><br><span class="line">    lr = <span class="number">0.003</span></span><br><span class="line">    lr_decay = <span class="number">0.5</span>  <span class="comment"># when val_loss increase, lr = lr*lr_decay</span></span><br><span class="line">    weight_decay = <span class="number">0e-5</span>  <span class="comment"># 损失函数</span></span><br><span class="line"></span><br><span class="line">    tensorboard_log_dir = <span class="string">&#x27;./logs&#x27;</span></span><br><span class="line"></span><br><span class="line">    result_file = <span class="string">&#x27;result.csv&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据字典kwargs 更新 config参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, k):</span><br><span class="line">                warnings.warn(<span class="string">&quot;Warning: opt has not attribute %s&quot;</span> % k)</span><br><span class="line">            <span class="built_in">setattr</span>(<span class="variable language_">self</span>, k, v)</span><br><span class="line"></span><br><span class="line">        config.device = torch.device(<span class="string">&#x27;cuda:0&#x27;</span>) <span class="keyword">if</span> config.use_gpu <span class="keyword">else</span> torch.device(<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;user config:&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="variable language_">self</span>.__class__.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(k, <span class="built_in">getattr</span>(<span class="variable language_">self</span>, k))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = DefaultConfig()</span><br></pre></td></tr></table></figure><h3 id="5-2-fire-包">5.2 fire 包</h3><p><code>fire</code> 包能够在终端直接进行传参和训练。先下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fire</span><br></pre></td></tr></table></figure><p>而后当主程序 <code>main.py</code> 中定义了训练、测试、验证函数时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">val</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>于是可以在终端中使用如下方法进行训练和传入参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train --参数1=&lt;param&gt; --参数2=&lt;param&gt;</span><br></pre></td></tr></table></figure><h2 id="6-主程序">6 主程序</h2><h3 id="6-1-训练和验证函数">6.1 训练和验证函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> DogVsCatDataset</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> Visualizer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="comment"># 根据命令行参数更新配置</span></span><br><span class="line">    config._parse(kwargs)</span><br><span class="line">    vis = Visualizer(log_dir=config.tensorboard_log_dir)  <span class="comment"># 使用 TensorBoard</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># step1: 模型</span></span><br><span class="line">    model = <span class="built_in">getattr</span>(models, config.model)()</span><br><span class="line">    model.to(config.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step2: 数据</span></span><br><span class="line">    train_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;train&quot;</span>)</span><br><span class="line">    val_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;val&quot;</span>)</span><br><span class="line">    train_dataloader = DataLoader(train_data, config.batch_size, shuffle=<span class="literal">True</span>, num_workers=config.num_workers)</span><br><span class="line">    val_dataloader = DataLoader(val_data, config.batch_size, shuffle=<span class="literal">False</span>, num_workers=config.num_workers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># step3: 目标函数和优化器</span></span><br><span class="line">    criterion = torch.nn.CrossEntropyLoss()</span><br><span class="line">    lr = config.lr</span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr=lr, weight_decay=config.weight_decay)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化误差</span></span><br><span class="line">    previous_loss = <span class="number">1e10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(config.max_epochs):</span><br><span class="line">        epoch_loss = <span class="number">0</span>  <span class="comment"># 记录当前 epoch 的平均损失</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ii, (data, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_dataloader):</span><br><span class="line">            <span class="comment"># 训练模型参数</span></span><br><span class="line">            inputs = data.to(config.device)</span><br><span class="line">            target = label.to(config.device)</span><br><span class="line"></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            score = model(inputs)</span><br><span class="line">            loss = criterion(score, target)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            epoch_loss += loss.item()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录损失到 TensorBoard</span></span><br><span class="line">            <span class="keyword">if</span> (ii + <span class="number">1</span>) % config.print_freq == <span class="number">0</span>:</span><br><span class="line">                vis.plot(<span class="string">&#x27;loss&#x27;</span>, loss.item(), step=epoch * <span class="built_in">len</span>(train_dataloader) + ii)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        model.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在每个 epoch 结束后验证模型</span></span><br><span class="line">        val_accuracy = val(model, val_dataloader)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Validation Accuracy: <span class="subst">&#123;val_accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        vis.plot(<span class="string">&#x27;val_accuracy&#x27;</span>, val_accuracy, step=epoch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录训练日志</span></span><br><span class="line">        vis.log(</span><br><span class="line">            <span class="string">f&quot;epoch:<span class="subst">&#123;epoch&#125;</span>, lr:<span class="subst">&#123;lr&#125;</span>, loss:<span class="subst">&#123;epoch_loss / <span class="built_in">len</span>(train_dataloader):<span class="number">.4</span>f&#125;</span>, val_accuracy:<span class="subst">&#123;val_accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新学习率</span></span><br><span class="line">        <span class="keyword">if</span> epoch_loss / <span class="built_in">len</span>(train_dataloader) &gt; previous_loss:</span><br><span class="line">            lr = lr * config.lr_decay</span><br><span class="line">            <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">                param_group[<span class="string">&#x27;lr&#x27;</span>] = lr</span><br><span class="line"></span><br><span class="line">        previous_loss = epoch_loss / <span class="built_in">len</span>(train_dataloader)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">val</span>(<span class="params">model, dataloader</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算模型在验证集上的准确率等信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii, (val_input, label) <span class="keyword">in</span> tqdm(<span class="built_in">enumerate</span>(dataloader)):</span><br><span class="line">        val_input = val_input.to(config.device)</span><br><span class="line">        label = label.to(config.device)</span><br><span class="line">        score = model(val_input)</span><br><span class="line">        _, predicted = score.<span class="built_in">max</span>(<span class="number">1</span>)</span><br><span class="line">        total += label.size(<span class="number">0</span>)</span><br><span class="line">        correct += (predicted == label).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    model.train()</span><br><span class="line">    accuracy = <span class="number">100.</span> * correct / total</span><br><span class="line">    <span class="keyword">return</span> accuracy</span><br></pre></td></tr></table></figure><h3 id="6-2-测试和写入结果函数">6.2 测试和写入结果函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    config._parse(kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># configure model</span></span><br><span class="line">    model = <span class="built_in">getattr</span>(models, config.model)().<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">if</span> config.load_model_path:</span><br><span class="line">        model.load(config.load_model_path)</span><br><span class="line"></span><br><span class="line">    model.to(config.device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data</span></span><br><span class="line">    test_data = DogVsCatDataset(config.root, mode=<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    test_dataloader = DataLoader(test_data, batch_size=config.batch_size, shuffle=<span class="literal">False</span>, num_workers=config.num_workers)</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> ii, (data, path) <span class="keyword">in</span> tqdm(<span class="built_in">enumerate</span>(test_dataloader)):</span><br><span class="line">        inputs = data.to(config.device)</span><br><span class="line">        score = model(inputs)</span><br><span class="line"></span><br><span class="line">        predicted_label = score.<span class="built_in">max</span>(dim=<span class="number">1</span>)[<span class="number">1</span>].detach().tolist()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果你要保存为 id, label 的格式，修改为：</span></span><br><span class="line">        batch_results = [(path_.item(), label_) <span class="keyword">for</span> path_, label_ <span class="keyword">in</span> <span class="built_in">zip</span>(path, predicted_label)]</span><br><span class="line"></span><br><span class="line">        results += batch_results</span><br><span class="line"></span><br><span class="line">    write_csv(results, config.result_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_csv</span>(<span class="params">results, file_name</span>):</span><br><span class="line">    <span class="keyword">import</span> csv</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        writer.writerow([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;label&#x27;</span>])</span><br><span class="line">        writer.writerows(results)</span><br></pre></td></tr></table></figure><p>最后使用 fire 包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line">    fire.Fire()</span><br></pre></td></tr></table></figure><h2 id="7-训练和预测过程">7 训练和预测过程</h2><h3 id="7-1-开始训练">7.1 开始训练</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py train</span><br></pre></td></tr></table></figure><p>一定要先定义好参数和数据集路径。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/47ef5337feb656be8b726fe2cdcf8f6f_720.png" alt=""></p><h3 id="7-2-测试">7.2 测试</h3><p>在上面训练结束后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="7-3-结果">7.3 结果</h3><p>得到结果，写入了 <code>result.csv</code> ，之后可以提交到 kaggle</p>]]></content>
    
    
    <summary type="html">本文将一步一步详细介绍如何获取数据，自定义数据集，搭建神经网络，训练、验证和测试结果的全流程。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>从 Kaggle 下载数据集（mac 和 win 端）</title>
    <link href="https://blog.iskage.online/posts/86ecc33b.html"/>
    <id>https://blog.iskage.online/posts/86ecc33b.html</id>
    <published>2025-02-23T02:27:00.000Z</published>
    <updated>2025-02-22T09:56:27.594Z</updated>
    
    <content type="html"><![CDATA[<h1>从 Kaggle 下载数据集</h1><p>Kaggle 是全球最大的数据科学社区，里面具有丰富的数据集和相关教程代码，是所有数据科学相关专业和从业人员必须熟悉的网站。</p><p>本文介绍如何使用终端/命令行工具从 Kaggle 下载数据（mac 和 win 系统）。官网地址 <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p><hr><h2 id="1-注册-kaggle-账户">1 注册 kaggle 账户</h2><p>进入官网地址 <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215562957.png" alt=""></p><p>点击【Register】注册</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215612893.png" alt=""></p><p>可以选择 Google 账户登陆（【推荐】），或换邮箱注册。</p><h2 id="2-下载-API-Token">2 下载 API Token</h2><p>点击右侧头像，选择【Settings】，找到【API】，点击【Create New Token】</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740215710310.png" alt=""></p><p>点击后会下载一个 <code>kaggle.json</code> 文件，保存好这个文件，等会使用。</p><h2 id="3-安装-kaggle-包">3 安装 kaggle 包</h2><p>新建虚拟环境，并在虚拟环境中下载安装 kaggle 包</p><blockquote><p>虚拟环境是可选，但推荐在虚拟环境中操作，有利于后续管理。有关如何搭建虚拟环境可见教程 <a href="https://zhuanlan.zhihu.com/p/21629604277">Conda 创建虚拟环境全流程</a></p></blockquote><p>使用 <code>pip</code> 下载，在终端中（激活环境后）输入，然后回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install kaggle</span><br></pre></td></tr></table></figure><p>完成后可以继续输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions list</span><br></pre></td></tr></table></figure><p>此时应该无法正常使用 kaggle ，需要我们去往用户目录下配置。</p><h2 id="4-配置-kaggle">4 配置 <code>.kaggle</code></h2><h3 id="4-1-MacOS-系统">4.1 MacOS 系统</h3><p>对于 mac 系统，前往用户目录下。一般为 <code>~</code> 或 <code>/Users/&lt;你的用户名&gt;</code> ，在终端 (Terminal) 中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><blockquote><p>一般默认打开终端就已经是位于用户目录下</p></blockquote><p>此时显示如下，表示成功进入用户目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;你的用户名&gt;@MacBook ~ % </span><br></pre></td></tr></table></figure><p>然后再输入如下指令，就可以打开文件夹 <code>.kaggle</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .kaggle</span><br></pre></td></tr></table></figure><p>此时再把第二步下载的 API Token 文件 <code>kaggle.json</code> 移入 <code>.kaggle</code> 文件夹。</p><blockquote><p>对于 mac 用户打开用户目录比较复杂。<code>open 文件夹名</code> 指令能直接以资源管理器的方式打开。</p><p>与此同时，mac 还会默认隐藏一些文件夹，例如这里的 <code>.kaggle</code> ，可以在进入目录之后，同时按下键盘的 <code>cmd + shift + .</code> 就可以查看隐藏的文件和文件夹。</p></blockquote><ul><li>此时便可以正常使用 kaggle</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions list</span><br></pre></td></tr></table></figure><blockquote><p>如果实在虚拟环境中 pip 安装的 kaggle ，需要激活虚拟环境才能正常使用。</p></blockquote><h3 id="4-2-Windows-系统">4.2 Windows 系统</h3><p>Windows 系统操作与 mac 相同，而且寻找用户文件夹更为简单。（类似地，【推荐】在虚拟环境里操作）</p><ul><li>如果使用 PowerShell 终端的话，指令相同，只是用户目录一般为</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\&lt;你的用户名&gt;</span><br></pre></td></tr></table></figure><p>然后打开文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer .kaggle</span><br></pre></td></tr></table></figure><p>相同地，将 <code>kaggle.json</code> 文件移入 <code>.kaggle</code> 文件夹。</p><ul><li>或者直接点击【C 盘】，点击【Users】，进入【&lt;你的用户名&gt;】，找到【.kaggle】文件夹实行与上面相同的操作。Windows 电脑一般不会隐藏文件。</li></ul><h2 id="5-配置-kaggle-数据集下载路径">5 配置 kaggle 数据集下载路径</h2><p>我们希望数据能下载在同一处文件夹内，方便以后程序的读取，而不用每次都在不同的地方下载数据，这会造成电脑存储空间的浪费。</p><p>这一步操作 mac 和 win 系统没有区别，只是路径的书写要注意。</p><ul><li>打开【.kaggle】文件夹内的【kaggle.json】文件进行编辑。</li></ul><p>原始 <code>kaggle.json</code> 文件默认为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此时在文件中添加一行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># mac</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/用户名/AllData&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># win</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密钥&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\AllData&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如此以后所有的数据都会下载在 <code>/Users/用户名/AllData</code> AllData 文件夹里。（win 可以存放在 D 盘，注意要使用两个反斜杠 <code>\\</code> ）</p><h2 id="6-从-kaggle-官网下载数据">6 从 kaggle 官网下载数据</h2><p>在上面都配置好后，可以前往 kaggle 官网下载数据。下面以猫狗分类竞赛数据集为例，地址 <a href="https://www.kaggle.com/competitions/dog-vs-cat-classification/data">dog-vs-cat-classification</a></p><ul><li>找到【Data】界面，然后向下翻找 kaggle 命令</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740217509899.png" alt=""></p><p>例如此处输入如下，就可以正常下载了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kaggle competitions download -c dog-vs-cat-classification</span><br></pre></td></tr></table></figure><p>下载完成后去往我们设置的 AllData 文件夹查看数据集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AllData</span><br><span class="line">└── competitions</span><br><span class="line">    └── dog-vs-cat-classification</span><br><span class="line">        └── dog-vs-cat-classification.zip</span><br></pre></td></tr></table></figure><p>会得到一个 <code>.zip</code> 文件，解压后即为数据集。</p>]]></content>
    
    
    <summary type="html">本文介绍如何使用终端/命令行工具从 Kaggle 下载数据（mac 和 win 系统）。包括教学如何下载、安装和配置 kaggle。</summary>
    
    
    
    <category term="Kaggle" scheme="https://blog.iskage.online/categories/Kaggle/"/>
    
    
    <category term="conda" scheme="https://blog.iskage.online/tags/conda/"/>
    
    <category term="虚拟环境" scheme="https://blog.iskage.online/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="kaggle" scheme="https://blog.iskage.online/tags/kaggle/"/>
    
    <category term="数据集" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python 面向对象程序设计</title>
    <link href="https://blog.iskage.online/posts/e3ce1591.html"/>
    <id>https://blog.iskage.online/posts/e3ce1591.html</id>
    <published>2025-02-22T07:43:00.000Z</published>
    <updated>2025-02-26T10:11:06.256Z</updated>
    
    <content type="html"><![CDATA[<h1>Python 面向对象编程</h1><p>根据教材 <a href="https://book.douban.com/subject/30323938/">《数据结构与算法 Python 实现》</a> 整理，<br>代码和笔记可前往我的 Github 库下载 <a href="https://github.com/isKage/dsa-notes">isKage/dsa-notes</a> 。</p><hr><h2 id="1-类定义">1 类定义</h2><p>类是面向对象程序设计中抽象的主要方法。下面以创建 <code>CreditCard</code> 类作为例子讲解面向对象如何定义类。</p><h3 id="1-1-例：CreditCard-类">1.1 例：CreditCard 类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;有关一个用户的信用卡&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, customer, bank, acnt, limit</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化一个信用卡实例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            customer (str): 用户名</span></span><br><span class="line"><span class="string">            bank (str): 银行名</span></span><br><span class="line"><span class="string">            acnt (str): 用户账户ID</span></span><br><span class="line"><span class="string">            limit (float): 信用卡限额</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._customer = customer</span><br><span class="line">        <span class="variable language_">self</span>._bank = bank</span><br><span class="line">        <span class="variable language_">self</span>._acnt = acnt</span><br><span class="line">        <span class="variable language_">self</span>._limit = limit</span><br><span class="line">        <span class="variable language_">self</span>._balance = <span class="number">0.</span>  <span class="comment"># 初始账户额度为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_customer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回用户名&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._customer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bank</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回银行名&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._bank</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_acnt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回账户ID&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._acnt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_limit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回额度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._limit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回是否能继续提款，即检查是否超出额度</span></span><br><span class="line"><span class="string">        :param price: 希望提取的额度</span></span><br><span class="line"><span class="string">        :return: True 如果加上目前所用额度没有超出限度，否则 False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._balance + price &gt; <span class="variable language_">self</span>._limit:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._balance += price</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_payment</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用现金抵消了部分信用卡贷款&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._balance -= amount</span><br></pre></td></tr></table></figure><h4 id="1-1-2-self-标识符">1.1.2 <code>self</code> 标识符</h4><p><code>self</code> 代表了一个实例，可以理解为对象自己。同时，<code>self</code> 也确定了调用方法时作用的对象。例如 <code>obj.get_customer()</code> 表示对实例化后的对象 <code>obj</code> 调用方法 <code>get_customer()</code> 。</p><h4 id="1-1-3-init-方法">1.1.3 <code>__init__()</code> 方法</h4><p>在面向对象编程中，我们称位于类定义 <code>class</code> 之中的各种函数 <code>def</code> 为方法。而 <code>__init__()</code> 称为初始化方法，它是当实例化对象时首先被执行的。在这个例子中，参数除了对象自己 <code>self</code> ，也包含了 <code>customer, bank, acnt, limit</code> 这些都是初始化时需要传入的。</p><h4 id="1-1-4-其他方法">1.1.4 其他方法</h4><p>类似于初始化方法，其他的函数也是接受参数，返回结果。例如：<code>charge()</code> 方法，使用 <code>obj.charge(100)</code> 表示对于对象 <code>obj</code> ，传入参数 <code>price = 100</code> ，然后返回一个结果。</p><h4 id="1-1-5-变量名">1.1.5 <code>_</code> 变量名</h4><p>在数据成员名称中的前加下划线，比如 <code>_balance</code> ，表明它被设计为非公有的（nonpublic）。类的用户不应该直接访问这样的成员。可以提供类似于 <code>get_balance</code> 的访问函数，以提供拥有只读访问特性的类的用户。</p><h3 id="1-2-实例化">1.2 实例化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc = CreditCard(customer=<span class="string">&quot;John Doe&quot;</span>, bank=<span class="string">&quot;Nation Bank&quot;</span>, acnt=<span class="string">&quot;123 456 789&quot;</span>, limit=<span class="number">1000.</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>cc = CreditCard()</code> 并传入初始化参数的方式实例化对象。此时就可以对对象 <code>cc</code> 进行操作，调用方法。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740044330309.png" alt=""></p><h3 id="1-3-错误检查">1.3 错误检查</h3><p><code>CreditCard</code> 类的实现方法不够稳健：</p><ul><li>例如：没有明确地检查参数的类型，如果用户创建了一个类似于 <code>visa.charge('candy)</code> 的调用，代码可能会崩溃。所以应该设计一些抛出异常。</li><li>例如：逻辑错误的。如果允许用户收取一个类似于 <code>visa.charge(-300)</code> 的负价格，这将导致用户的余额变少，这是不和逻辑的</li></ul><p>所以，这个例子只是介绍面向对象编程时，定义类、实例化和调用方法的基础知识。之后需要不断完善。</p><h3 id="1-4-对类进行测试">1.4 对类进行测试</h3><p>一般对类的定义会单独放在一个 <code>.py</code> 文件中，那么我们需要对类进行检查，测试其是否合理，是否报错。但是，如果通过 <code>from ... import ...</code> 的方法导入主程序测试显然不是我们希望的。所以，我们可以在定义类的 <code>.py</code> 文件下使用 <code>if __name__ = '__main__':</code> 的方法。</p><ul><li><code>if __name__ = '__main__':</code> ：这个判断表示，只有当当前文件以主程序的方式运行时，<code>if</code> 语句后面的内容才运行。这样可以避免在 <code>from ... import ...</code> 代入类时，连带运行 <code>if</code> 语句后的测试语句。</li></ul><p>例如：在当前目录下创建文件夹 <code>utils</code> 内部放置文件 <code>cc.py</code> ，在 <code>cc.py</code> 书写类的定义，于是可以代入类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.cc <span class="keyword">import</span> CreditCard</span><br><span class="line"></span><br><span class="line">cc_new = CreditCard(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Bank1&quot;</span>, <span class="string">&quot;123 456 789&quot;</span>, <span class="number">3010.</span>)</span><br></pre></td></tr></table></figure><p>而在文件 <code>./utils/cc.py</code> 中就可以书写 <code>if __name__ = '__main__':</code> 的测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>: ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    wallet = []</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Bank1&quot;</span>, <span class="string">&quot;123 456 789&quot;</span>, <span class="number">3010.</span>))</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Bank2&quot;</span>, <span class="string">&quot;456 123 789&quot;</span>, <span class="number">6210.</span>))</span><br><span class="line">    wallet.append(CreditCard(<span class="string">&quot;Ann&quot;</span>, <span class="string">&quot;Bank3&quot;</span>, <span class="string">&quot;789 456 123&quot;</span>, <span class="number">4010.</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">0</span>].charge(<span class="number">1000.</span>))</span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">1</span>].charge(<span class="number">2000.</span>))</span><br><span class="line">    <span class="built_in">print</span>(wallet[<span class="number">2</span>].charge(<span class="number">5000.</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> account <span class="keyword">in</span> wallet:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Customer: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_customer()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Balance: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_balance()))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> account.get_balance() &gt; <span class="number">100.</span>:</span><br><span class="line">            account.make_payment(<span class="number">100.</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;New Balance: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(account.get_balance()))</span><br></pre></td></tr></table></figure><h2 id="2-运算符重载">2 运算符重载</h2><h3 id="2-1-介绍">2.1 介绍</h3><p>Python 的内置类为许多操作提供了自然的语义。比如，<code>a + b</code> 可以是数值相加，也可以是字符串相连。</p><p>默认情况下，对于新的类来说，<code>+</code> 操作符是未定义的，可通过<strong>操作符重载</strong>来定义它。例如：在类的定义里定义方法 <code>__add__()</code> 即可定义 <code>+</code> 的含义。</p><p>以 <code>a + b</code> 为例，其中 <code>a</code> 和 <code>b</code> 均为字符串，则 <code>a + b</code> 能成立是因为 Python 内置类 <code>字符串</code> 定义了方法 <code>__add__()</code> 将其表达为字符串相连，于是 <code>a + b</code> 才会正常使用。类似地，自定义类时也可以去重载这些运算符，下面是常见的重载：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740048941341.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740048963901.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740049031958.png" alt=""></p><h3 id="2-2-例：多维向量类">2.2 例：多维向量类</h3><p>下面通过定义向量，来解释如何自定义重载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多维向量&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, d</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;d 维度向量&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._coords = [<span class="number">0</span>] * d  <span class="comment"># 初始化 d 维向量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取维度: 重载 len(a)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>._coords)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第 k 个维度的值: 重载 a[k]&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._coords[k]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, k, v</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置第 k 个维度的值为 v: 重载 a[k] = v&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._coords[k] = v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义向量加法: 重载 a + b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) != <span class="built_in">len</span>(other):  <span class="comment"># 此处可以直接使用重载后的定义</span></span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Dimensions must be the same!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        result = Vector(<span class="built_in">len</span>(<span class="variable language_">self</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            result[i] = <span class="variable language_">self</span>[i] + other[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;定义向量减法: 重载 a - b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="variable language_">self</span>) != <span class="built_in">len</span>(other):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Dimensions must be the same!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        result = Vector(<span class="built_in">len</span>(<span class="variable language_">self</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            result[i] = <span class="variable language_">self</span>[i] - other[i]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断向量坐标是否相等: 重载 a == b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._coords == other._coords</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断向量坐标是否不相等: 重载 a != b&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> <span class="variable language_">self</span> == other  <span class="comment"># 等价于 self.__eq__(other) 直接使用重载后的定义</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;以字符串的形式展现这个向量类: 重载 str(a) 或 a 可以以字符串形式展示&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;&#x27;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>._coords)[<span class="number">1</span>:-<span class="number">1</span>] + <span class="string">&#x27;&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>以上的方法各个方法都重载了一些运算符，具体解释见代码注释。</p><h3 id="2-3-补：自定义-Python-的包">2.3 补：自定义 Python 的包</h3><p>在上面引入类时，我们使用了 <code>from utils.cc import CreditCard</code> ，这并不规范。我们可以将类定义写入一个 python 文件，然后统一放在文件夹 utils 中，并且再写一个 <code>__init__.py</code> 文件将 utils 文件夹整个变成一个标准的 python 包，目录结构见下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./utils</span><br><span class="line">├── __init__.py</span><br><span class="line">├── cc.py</span><br><span class="line">└── vector.py</span><br></pre></td></tr></table></figure><p>然后在 <code>__init__.py</code> 文件中写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> .cc <span class="keyword">import</span> CreditCard</span><br><span class="line"><span class="keyword">from</span> .vector <span class="keyword">import</span> Vector</span><br></pre></td></tr></table></figure><p>如此便可在其他文件中直接引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> CreditCard, Vector</span><br></pre></td></tr></table></figure><h2 id="3-迭代器">3 迭代器</h2><h3 id="3-1-介绍">3.1 介绍</h3><p>集合迭代器（iterator）提供了一个关键功能：它支持一个名为 <code>__next__</code> 的特殊方法，如果集合有下一个元素，该方法返回该元素，否则产生一个 <code>StopIteration</code> 异常来表明没有下一个元素。</p><p>Python 为实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法的的类提供了一个自动的迭代器，每次调用 <code>__next__</code> 方法时便会索引递增。例如，下面的 <code>SquenceIterator</code> 类。</p><h3 id="3-2-例：SequenceIterator-类">3.2 例：SequenceIterator 类</h3><blockquote><p>【注意】迭代器的实现必须要求【已经实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法】</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SequenceIterator</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;为已经定义了__len__和__getitem__的对象实现迭代器方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seq</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器初始化&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._seq = seq</span><br><span class="line">        <span class="variable language_">self</span>._k = -<span class="number">1</span>  <span class="comment"># 只有迭代器调用时才从 0 开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._k &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>._seq):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>._seq[<span class="variable language_">self</span>._k]  <span class="comment"># 返回向前一步后的值</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;一般__iter__方法都要返回自己，一种书写规范&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br></pre></td></tr></table></figure><h3 id="3-3-练习：实现一个类模拟-Python-的-Range">3.3 练习：实现一个类模拟 Python 的 Range</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;模拟Python的Range类: range(start, stop, step)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start, stop=<span class="literal">None</span>, step=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param self: 对象自身</span></span><br><span class="line"><span class="string">        :param start: 起始数字</span></span><br><span class="line"><span class="string">        :param stop: 终止数字</span></span><br><span class="line"><span class="string">        :param step: 每步跨度</span></span><br><span class="line"><span class="string">        :return: Range类</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> step == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;step can not be zero&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> stop <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 应对输入 Range(n), 则当作 Range(0, n) 处理</span></span><br><span class="line">            start = <span class="number">0</span></span><br><span class="line">            stop = start</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算真实长度，应对有余数的情形</span></span><br><span class="line">        <span class="variable language_">self</span>._length = <span class="built_in">max</span>(<span class="number">0</span>, (stop - start + step - <span class="number">1</span>) // step)</span><br><span class="line">        <span class="comment"># 考虑到已经计算长度，故无需记录 stop</span></span><br><span class="line">        <span class="variable language_">self</span>._start = start</span><br><span class="line">        <span class="variable language_">self</span>._step = step</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;取数值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            index += <span class="variable language_">self</span>._length  <span class="comment"># 从后向前取</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index &gt;= <span class="variable language_">self</span>._length <span class="keyword">or</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;index out of range&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._start + index * <span class="variable language_">self</span>._step</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;只是以列表的形式展示，不重要。因为Range是模仿Python的range功能&quot;&quot;&quot;</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> Range(<span class="variable language_">self</span>._start, <span class="variable language_">self</span>._length):</span><br><span class="line">            result += <span class="built_in">str</span>(<span class="variable language_">self</span>._start + i * <span class="variable language_">self</span>._step) + <span class="string">&quot;, &quot;</span></span><br><span class="line">        result = <span class="string">&quot;[&quot;</span> + result[:-<span class="number">2</span>] + <span class="string">&quot;]&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="4-继承">4 继承</h2><h3 id="4-1-介绍">4.1 介绍</h3><p><strong>继承</strong>技术允许基于一个现有的类作为起点定义新的类。在面向对象的术语中，通常描述现有的类为基类 (base class)、父类 (parent class) 或者超类 (superclass)，而称新定义的类为子类 (subclass 或者 child class)</p><p>子类可以覆盖父类方法，也可以在父类的基础上扩展方法。</p><p>下面以第一节中定义的 <code>CreditCard</code> 类为父类，定义新的子类 <code>PredatoryCreditCard</code> 。</p><h3 id="4-2-例：PredatoryCreditCard-子类">4.2 例：PredatoryCreditCard 子类</h3><p>我们希望实现的新功能：</p><ul><li>当尝试收费由于超过信用卡额度被拒绝时，将会收取 5 美元的费用</li><li>将有一个对未清余额按月收取利息的机制，即基于参数年利率 <code>apr</code> 计算利息</li></ul><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740131659710.png" style="zoom:35%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;继承父类，扩展方法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, customer, bank, acnt, limit, apr</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        继承父类，常见新的一个账户</span></span><br><span class="line"><span class="string">        :param customer: 用户名</span></span><br><span class="line"><span class="string">        :param bank: 银行名</span></span><br><span class="line"><span class="string">        :param acnt: 账户ID</span></span><br><span class="line"><span class="string">        :param limit: 额度限制</span></span><br><span class="line"><span class="string">        :param apr: 年利率，用以计算利息</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(customer, bank, acnt, limit)  <span class="comment"># 调用父类的初始化方法 __init__</span></span><br><span class="line">        <span class="variable language_">self</span>._apr = apr</span><br><span class="line">        <span class="comment"># self._balance 在调用父类初始化时也已经赋值 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆盖父类的charge方法，添加扣除手续费功能&quot;&quot;&quot;</span></span><br><span class="line">        success = <span class="built_in">super</span>().charge(price)  <span class="comment"># 调用父类方法，检查是否仍在限额内</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="variable language_">self</span>._balance += <span class="number">5</span>  <span class="comment"># 如果失败收取 5 元手续费，贷款 balance 提高</span></span><br><span class="line">        <span class="keyword">return</span> success  <span class="comment"># 返回结果 True or False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_month</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;收取每月利息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._balance &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 月贴现因子，apr 为年利率，故除以 12 年化</span></span><br><span class="line">            monthly_factor = <span class="built_in">pow</span>(<span class="number">1</span> + <span class="variable language_">self</span>._apr, <span class="number">1</span> / <span class="number">12</span>)</span><br><span class="line">            <span class="variable language_">self</span>._balance *= monthly_factor</span><br></pre></td></tr></table></figure><h4 id="4-2-1-继承语法">4.2.1 继承语法</h4><p>定义子类 B 继承父类 A 时，采用下面的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-初始化语句">4.2.2 初始化语句</h4><p>在子类中首先需要调用父类的初始化语句和传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, param1, param2, sub_param</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">super</span>().__init__(param1, param2)  <span class="comment"># 调用父类的初始化方法 __init__</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.sub_param = sub_param  <span class="comment"># 子类的参数</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-调用父类方法">4.2.3 调用父类方法</h4><p>在子类中调用父类方法，使用 <code>super()</code> 代替父类对象。例如：在使用父类的方法 <code>charge()</code> 时，直接采用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>().charge(param1)  <span class="comment"># 传入相应参数</span></span><br></pre></td></tr></table></figure><blockquote><p>【注意】在子类中，我们直接调用了父类的受保护数据 <code>_balance</code> (以 <code>_</code> 开头的数据视为受保护数据)，这不是最好的方法。只是在这里，我们需要在子类中修改 balance ，但如果调用 <code>get_balance</code> 方法是无法修改 balance 的，所以只好直接修改 <code>._balance</code> 。</p><p>【改进】不过可以在父类中定义非公有/受保护的方法 <code>_set_balance()</code> 让子类能使用它改变 <code>._balance</code> 而外界则不使用这个方法。如此可以做到子类使用父类方法改变父类受保护数据，而不是直接在父类数据上改变。</p></blockquote><h3 id="4-3-例：迭代数列的类的层次">4.3 例：迭代数列的类的层次</h3><p>Progression 类的分层如图。我们希望之后定义的各种数列均以 Progression 类为父类。</p><ul><li>Progression 类产生 <code>0, 1, 2, ...</code> 的无穷数列。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740193477222.png" alt=""></p><h4 id="4-3-1-父类：Progression-类">4.3.1 父类：Progression 类</h4><ul><li>定义 <code>__next__, __iter__</code> 方法，实现 <code>next(obj)</code> 的方法迭代，同时也支持 <code>for i in obj</code>  的方法</li><li>定义 <code>_advance</code> 方法，为更新提供了非公有方法，为未来子类不同的更新形式提供方法</li><li>定义 <code>print_progression</code> 方法，方便以字符串的方式展示当前值的后 n 位数值，以序列的形式展示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Progression</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义普适的数列父类</span></span><br><span class="line"><span class="string">    默认产生 0, 1, 2, ... 的无穷数列</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化记录起始默认值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        非公有方法，用于更新 self._current</span></span><br><span class="line"><span class="string">        为后续子类覆盖提供方法，子类不同的数列需要覆写不同的更新方法</span></span><br><span class="line"><span class="string">        父类默认的更新方式为 += 1</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代下一个值，或抛出异常 StopIteration&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._current <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="variable language_">self</span>._current</span><br><span class="line">            <span class="variable language_">self</span>._advance()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        习惯于 iter 与 next 合并使用</span></span><br><span class="line"><span class="string">        By convention, an iterator must return itself as an iterator.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_progression</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印当前值之后的 n 个值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(<span class="built_in">str</span>(<span class="built_in">next</span>(<span class="variable language_">self</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)))</span><br></pre></td></tr></table></figure><blockquote><p>注意此个例子，使用 <code>for i in obj</code> 会进入无穷序列。</p></blockquote><h4 id="4-3-2-子类：等差数列类">4.3.2 子类：等差数列类</h4><p>我们希望等差数列 ArithmeticProgression 类产生等差数列，只需要继承父类后，覆写 <code>_advance</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArithmeticProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;继承基础数列类，定义等差数列类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, increment=<span class="number">1</span>, start=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化等差数列</span></span><br><span class="line"><span class="string">        :param increment: 公差</span></span><br><span class="line"><span class="string">        :param start: 首项</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(start)</span><br><span class="line">        <span class="variable language_">self</span>._increment = increment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写新更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current += <span class="variable language_">self</span>._increment</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aprog1 = ArithmeticProgression(<span class="number">4</span>)</span><br><span class="line">aprog2 = ArithmeticProgression(<span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">aprog1.print_progression(<span class="number">7</span>)</span><br><span class="line">aprog2.print_progression(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0 4 8 12 16 20 24</span></span><br><span class="line"><span class="string">1 5 9 13 17 21 25</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-3-子类：等比数列类">4.3.3 子类：等比数列类</h4><p>类似地定义等比数列 GeometricProgression 类，需要注意首选不能为 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeometricProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;等比数列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base=<span class="number">2</span>, start=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化等比数列</span></span><br><span class="line"><span class="string">        :param base: 公比，默认为 2</span></span><br><span class="line"><span class="string">        :param start: 首项，不可为 0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(start)</span><br><span class="line">        <span class="variable language_">self</span>._base = base</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._current *= <span class="variable language_">self</span>._base</span><br></pre></td></tr></table></figure><h4 id="4-3-4-子类：斐波那契数列类">4.3.4 子类：斐波那契数列类</h4><p>定义斐波那契数列 FibonacciProgression 类。除了提供父类需要的参数首项和自己的参数第二项，还需要增加一个非公有参数记录相邻两项的差 <code>_prev</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FibonacciProgression</span>(<span class="title class_ inherited__">Progression</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;斐波那契数列&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, first=<span class="number">0</span>, second=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化，提供第一第二项</span></span><br><span class="line"><span class="string">        :param first: 第一项，作为参数传给父类的 start</span></span><br><span class="line"><span class="string">        :param second: 第二项</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(first)</span><br><span class="line">        <span class="variable language_">self</span>._prev = second - first</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆写更新规则&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>._prev, <span class="variable language_">self</span>._current = <span class="variable language_">self</span>._current, <span class="variable language_">self</span>._prev + <span class="variable language_">self</span>._current</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fcprog1 = FibonacciProgression()</span><br><span class="line">fcprog2 = FibonacciProgression(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fcprog1.print_progression(<span class="number">7</span>)</span><br><span class="line">fcprog2.print_progression(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0 1 1 2 3 5 8</span></span><br><span class="line"><span class="string">1 1 2 3 5 8 13</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-抽象基类">4.4 抽象基类</h3><p><strong>抽象基类</strong>：一个类的唯一目的是作为继承的基类。其中被继承的我们称之为抽象基类，而其他的类则为具体的类。</p><ul><li>一般而言，抽象类不能直接实例化，而具体的类可以被实例化。</li><li>理论上之前的例子中， Progression 类虽然严格来说是具体的类，但我们希望把它设计为一个抽象基类。</li></ul><h4 id="4-4-1-abc-模块">4.4.1 <code>abc</code> 模块</h4><p>Python 的 <code>abc</code> 模块提供了正式的抽象基类的定义，例如我们定义一个抽象基类 Sequence</p><ul><li>其一，我们不需要这个抽象基类 Sequence 提供 <code>__len__</code> 和 <code>__getitem__</code> 的具体实现，这两个方法的实现由继承它的子类完成。</li><li>其二，我们希望这个基类能完成功能：通过整数查看序列元素，所以要具体实现 <code>__contains__</code> <code>index</code> 和 <code>count</code> 方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sequence</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;抽象基类 Sequence&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回序列长度，由子类实现&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, j</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回第 j 位置的值，由子类实现&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查看 val 是否在序列中，返回 True or False&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回 val 在序列中的下标&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                <span class="keyword">return</span> j</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Value not found&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计数多少值等于 val&quot;&quot;&quot;</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>)):</span><br><span class="line">            <span class="keyword">if</span> val == <span class="variable language_">self</span>[j]:</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure><blockquote><p>这一类与 Python 的 collections 模块的 <code>collections.abc.Sequence</code> 类似。</p><p>因为采用抽象定义，故类 <code>Sequence</code> 不能被实例化。</p></blockquote><ul><li><p>继承 <code>abc.ABC</code> 类，表明这是一个抽象基类，只能被继承不可被实例化。</p></li><li><p>上述的修饰器 <code>@abstractmethod</code> 表名这个方法必须由子类实现，抽象基类无需实现。</p></li></ul><h4 id="4-4-2-collections-模块">4.4.2 <code>collections</code> 模块</h4><p>使用 <code>abc</code> 模块定义过于复杂，可以直接使用 Python 的 <code>collections</code> 模块，它已经封装了常见的抽象基类。</p><ul><li>例如在第 3.3 节实现的 Range 类，已经实现了 <code>__len__</code> 和 <code>__getitem__</code> 方法，但没有实现抽象基类中的<code>__contains__</code> <code>index</code> 和 <code>count</code> 方法。</li><li>而这与 <code>collections.abc.Sequence</code> 类相匹配，可以让我们定义的 <code>Range</code> 类继承 <code>collections.abc.Sequence</code> 类，从覆写 <code>__len__</code> 和 <code>__getitem__</code> ，同时也依靠父类实现 contains、index 和 count 方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> <span class="type">Sequence</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写 Range 的定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>(<span class="title class_ inherited__">Sequence</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><blockquote><p>【注意】在 <code>Python3.x</code> 版本后 <code>collections</code> 相关抽象基类被移动到了 <code>collections.abc</code> 中。故使用时应导入 <code>from collections.abc import Sequence</code></p></blockquote><p>【结果测试】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    r = NewRange(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">in</span> r)  <span class="comment"># 判断 4 是否在序列中 __contains__ 方法</span></span><br><span class="line">    <span class="built_in">print</span>(r.index(<span class="number">0</span>))  <span class="comment"># 返回下标 index 方法</span></span><br><span class="line">    <span class="built_in">print</span>(r.count(<span class="number">1</span>))  <span class="comment"># 查看多少值等于 1</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>其实采用之前我们自定义的 <code>Sequence</code> 抽象基类也可以达到相同目的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sequence</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>(<span class="title class_ inherited__">Sequence</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="5-命名空间和面对对象">5 命名空间和面对对象</h2><h3 id="5-1-实例和类的命名空间">5.1 实例和类的命名空间</h3><p>以 CreditCard 类和 PredatoryCreditCard 类为例，展示出其类命名空间和实例命名空间如下：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740205039504.png" alt=""></p><h3 id="5-2-类数据成员">5.2 类数据成员</h3><p><strong>类级别的数据成员</strong>：一些值（如常量）被一个类的所有实例共享</p><ul><li>在这种情况下，在每个实例的命名空间中存储这个值就会造成不必要的浪费。所以使用如下格式定义这样的类数据成员。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    OVER_LIMIT_FEE = <span class="number">5</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">charge</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;覆盖父类的charge方法，添加扣除手续费功能&quot;&quot;&quot;</span></span><br><span class="line">        success = <span class="built_in">super</span>().charge(price)  <span class="comment"># 调用父类方法，检查是否仍在限额内</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="comment"># 使用 PredatoryCreditCard.OVER_LIMIT_FEE 方式调用类数据成员</span></span><br><span class="line">            <span class="variable language_">self</span>._balance += PredatoryCreditCard.OVER_LIMIT_FEE</span><br><span class="line">        <span class="keyword">return</span> success  <span class="comment"># 返回结果 True or False</span></span><br></pre></td></tr></table></figure><h3 id="5-3-嵌套类">5.3 嵌套类</h3><p><strong>嵌套类</strong>：在一个类的定义里定义另一个类。需要注意的是，二者只是嵌套关系，没有继承关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h3 id="5-4-字典和-slots-声明">5.4 字典和 <code>__slots__</code> 声明</h3><p>Python 提供了一种直接的机制来表示实例命名空间：类定义必须提供一个名为 <code>__slots__</code> 的类级别的成员分配给一个固定的字符串序列。例如，在 <code>CreditCard</code> 类中，声明如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCard</span>:</span><br><span class="line">    __slots__ = <span class="string">&#x27;_customer&#x27;</span>, <span class="string">&#x27;_bank&#x27;</span>, <span class="string">&#x27;_acnt&#x27;</span>, <span class="string">&#x27;_limit&#x27;</span>, <span class="string">&#x27;_balance&#x27;</span></span><br></pre></td></tr></table></figure><p>当子类继承时，只需要声明子类新增的实例即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PredatoryCreditCard</span>(<span class="title class_ inherited__">CreditCard</span>):</span><br><span class="line">    __slots__ = <span class="string">&#x27;_apr&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="6-深拷贝和浅拷贝">6 深拷贝和浅拷贝</h2><h3 id="6-1-直接赋值复制">6.1 直接赋值复制</h3><p>当使用 <code>a = b</code> 时，Python 在做的只是拷贝了一个别名，或者说是一个地址。</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206027790.png" alt=""></p><p>当遇到不可变类型时还不会出现问题，一旦二者指向的是可变类型，例如列表。则会出现一方变，整体变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 1. 简单赋值，复制了地址 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1. 简单赋值，复制了地址&quot;</span>)</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a</span><br><span class="line">b.append(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="6-2-浅拷贝">6.2 浅拷贝</h3><p>例如：列表中写入颜色对象。 <code>warmtones</code> 表示现有的颜色列表。希望创建一个新的 <code>palette</code> 列表，复制一份 <code>warmtones</code> 列表。但是对 <code>palette</code> 不希望影响到 <code>warmtones</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 2. 浅拷贝，简历了新地址，但仍然指向同一不可变数据 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2. 浅拷贝，简历了新地址，但仍然指向同一不可变数据&quot;</span>)</span><br><span class="line">warmtones = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">palette = <span class="built_in">list</span>(warmtones)  <span class="comment"># 浅拷贝</span></span><br><span class="line">palette[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(warmtones)  <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(palette)  <span class="comment"># [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206762911.png" alt=""></p><p>这比直接赋值更好，即复制了一份可变数据类型 (list) ，但指向的不可变数据仍然相同。例如：<code>warmtones[0]</code>  和 <code>palette[0]</code> 为实例 <code>_red</code> 的别名，实际指向相同。</p><h3 id="6-3-深拷贝">6.3 深拷贝</h3><p>我们希望让 <code>warmtones</code> 和 <code>palette</code> 之间完全没有关联，就可以使用 <code>copy.deepcopy()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 3. 深拷贝，完全拷贝一份 &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3. 深拷贝，完全拷贝一份&quot;</span>)</span><br><span class="line">warmtones = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">palette = copy.deepcopy(warmtones)  <span class="comment"># 深拷贝</span></span><br><span class="line">palette[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(warmtones)  <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(palette)  <span class="comment"># [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740206987932.png" alt=""></p>]]></content>
    
    
    <summary type="html">本文介绍了 Python 中的面向对象编程技术。包括了类的定义、运算符重载、迭代器、继承、命名空间和面向对象、深拷贝与浅拷贝。重点结合了各种代码案例进行分析。</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.iskage.online/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="数据结构" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法设计" scheme="https://blog.iskage.online/tags/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="面向对象" scheme="https://blog.iskage.online/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>统计软件 R 语言学习笔记 (1) R 语言基本介绍</title>
    <link href="https://blog.iskage.online/posts/d4da4a15.html"/>
    <id>https://blog.iskage.online/posts/d4da4a15.html</id>
    <published>2025-02-20T07:43:00.000Z</published>
    <updated>2025-02-20T08:42:07.092Z</updated>
    
    <content type="html"><![CDATA[<h1>R 语言基本介绍</h1><p>代码和笔记可以前往我的 Github 库里下载。<a href="https://github.com/isKage/r-notes">isKage/r-notes</a></p><hr><p>本文介绍如何下载 R 语言和软件 RStudio 以及 R 语言的基本语法、R 的程序包、R 的对象。具体介绍了如何下载包、管理包、加载包和删除包，以及对象的命名和删除方法，和对象的属性和类别。</p><h2 id="1-下载安装-R">1 下载安装 R</h2><p>官网地址 <a href="https://cran.r-project.org/">https://cran.r-project.org/</a></p><blockquote><p>不可含有中文路径</p></blockquote><h2 id="2-安装-RStudio">2 安装 RStudio</h2><p>官网地址 <a href="https://posit.co/downloads/">https://posit.co/downloads/</a></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740033669420.png" alt=""></p><h2 id="3-基本语法">3 基本语法</h2><h3 id="3-1-常见符号">3.1 常见符号</h3><ul><li><code>&gt;</code> ：命令或运算提示符</li><li><code>+</code> ：续行符</li><li>多条语句之间用 <code>;</code> 或者回车符分隔</li><li>多个语句可以用 <code>&#123;&#125;</code> 组合</li><li>以 <code>#</code> 开始为注释部分</li><li>向上，向下键可以浏览以前输入过的命令</li><li>赋值符：<code>=</code> <code>&lt;-</code>  <code>-&gt;</code></li></ul><p>赋值符号例：下面三个等价</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span> <span class="operator">-&gt;</span> sales;</span><br><span class="line">sales <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span>;</span><br><span class="line">sales <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">58</span><span class="punctuation">,</span> <span class="number">105</span><span class="punctuation">,</span> <span class="number">88</span><span class="punctuation">,</span> <span class="number">118</span><span class="punctuation">,</span> <span class="number">117</span><span class="punctuation">,</span> <span class="number">137</span><span class="punctuation">,</span> <span class="number">157</span><span class="punctuation">,</span> <span class="number">169</span><span class="punctuation">,</span> <span class="number">149</span><span class="punctuation">,</span> <span class="number">202</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-帮助文档">3.2 帮助文档</h3><ul><li>查看<strong>函数</strong>的帮助文档</li></ul><p><code>help(func)</code> 或者 <code>?func</code> 从而打开帮助文档。</p><ul><li>查看<strong>运算符和关键字</strong>的帮助文档</li></ul><p><code>help('')</code> 或者 <code>?''</code> 从而打开帮助文档，但要使用引号。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">help<span class="punctuation">(</span>cor<span class="punctuation">)</span>;</span><br><span class="line"><span class="operator">?</span>cor;</span><br><span class="line"></span><br><span class="line">help<span class="punctuation">(</span><span class="string">&quot;+&quot;</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="operator">?</span><span class="string">&#x27;+&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740033121414.png" alt=""></p><ul><li>Description ：函数的描述</li><li>Usage ：函数的具体形式/格式</li><li>Arguments ：函数的输入参数</li><li>Value ： 输出值</li><li>Examples ：【使用样例】</li></ul><h3 id="3-3-工作目录">3.3 工作目录</h3><p><strong>工作目录</strong> ：读取外部文件和保存结果到外部文件的默认目录。使用 <code>getwd()</code> 查看和 <code>setwd()</code> 设置。例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> getwd<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;/Users/username&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> setwd<span class="punctuation">(</span><span class="string">&quot;/Users/username/Desktop/code/r/r-notes&quot;</span><span class="punctuation">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> getwd<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;/Users/username/Desktop/code/r/r-notes&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-工作空间">3.4 工作空间</h3><h4 id="3-4-1-工作空间">3.4.1 工作空间</h4><p><strong>工作空间</strong>是 R 语言中当前会话的环境，它包含了所有用户定义的变量、函数、数据框、列表等对象。</p><ul><li>查看工作空间：可以使用<code>ls()</code>函数查看当前工作空间中的所有对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><ul><li>删除对象：可以使用<code>rm()</code>函数从工作空间中删除对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><ul><li>清空工作空间：可以使用<code>rm(list = ls())</code>清空所有对象。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-RData-文件">3.4.2 .RData 文件</h4><p><code>.RData</code> 文件是 R 语言中用于保存和加载工作空间的文件格式。</p><ul><li>保存工作空间：使用 <code>save.image()</code> 函数可以将当前工作空间保存到 <code>.RData</code> 文件中。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save.image<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>默认情况下，R 会将工作空间保存到名为 <code>.RData</code> 的文件中。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save.image<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 保存到默认的 .RData 文件</span></span><br></pre></td></tr></table></figure><ul><li>加载工作空间：使用 <code>load()</code> 函数可以从 <code>.RData</code> 文件中加载保存的工作空间。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>加载后，工作空间中的所有对象会恢复到当前会话中。</p><ul><li>选择性保存：可以使用 <code>save()</code> 函数选择性地保存特定对象到 <code>.RData</code> 文件中。</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save<span class="punctuation">(</span>object1<span class="punctuation">,</span> object2<span class="punctuation">,</span> file <span class="operator">=</span> <span class="string">&quot;my_data.RData&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h4 id="3-4-3-示例">3.4.3 示例</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一些对象</span></span><br><span class="line">x <span class="operator">&lt;-</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">)</span></span><br><span class="line">y <span class="operator">&lt;-</span> rnorm<span class="punctuation">(</span><span class="number">10</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作空间</span></span><br><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存工作空间到文件</span></span><br><span class="line">save.image<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作空间中的对象</span></span><br><span class="line">rm<span class="punctuation">(</span>x<span class="punctuation">,</span> y<span class="punctuation">,</span> df<span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载工作空间</span></span><br><span class="line">load<span class="punctuation">(</span><span class="string">&quot;my_workspace.RData&quot;</span><span class="punctuation">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看工作空间</span></span><br><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="4-R-的程序包-Packages">4 R 的程序包 Packages</h2><p>R程序包是多个函数的集合，具有详细的说明和示例。每个程序包包括R函数，数据，帮助文件，描述文件等。</p><h3 id="4-1-R-程序包分类">4.1 R 程序包分类</h3><p>R 包可以分为以下几类：</p><ul><li>基础包：随R安装自带的包</li><li>推荐包：通常随R一起安装，但不是核心包</li><li>第三方包：由社区或开发者贡献的包，需要通过CRAN、GitHub等平台安装</li></ul><h3 id="4-2-安装-R-包">4.2 安装 R 包</h3><h4 id="4-2-1-从-CRAN-安装">4.2.1 从 CRAN 安装</h4><p>CRAN 是 R 包的官方仓库。使用 <code>install.packages()</code> 函数安装</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;dplyr&quot;</span><span class="punctuation">)</span>  <span class="comment"># 安装dplyr包</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-从-GitHub-安装">4.2.2 从 GitHub 安装</h4><p>一些开发者会将包发布在 GitHub 上，可以使用 <code>devtools</code> 包安装：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages<span class="punctuation">(</span><span class="string">&quot;devtools&quot;</span><span class="punctuation">)</span>  <span class="comment"># 安装 devtools 包</span></span><br><span class="line"></span><br><span class="line">devtools<span class="operator">::</span>install_github<span class="punctuation">(</span><span class="string">&quot;tidyverse/dplyr&quot;</span><span class="punctuation">)</span>  <span class="comment"># 从 GitHub 安装 dplyr</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-本地安装">4.2.3 本地安装</h4><p>从 CRAN 上下载 <code>.zip</code> 文件，然后在 RStudio 中选择：【Tools】-&gt;【Install Packages …】-&gt;【Install from】后选择下载的 <code>.zip</code> 文件。</p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1740035683185.png" style="zoom:50%;" /><h3 id="4-3-加载和使用-R-包">4.3 加载和使用 R 包</h3><p>安装包后，需要使用 <code>library()</code> 或 <code>require()</code> 函数加载包</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>dplyr<span class="punctuation">)</span>  <span class="comment"># 加载dplyr包</span></span><br><span class="line">require<span class="punctuation">(</span>ggplot2<span class="punctuation">)</span>  <span class="comment"># 加载ggplot2包</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>library()</code>：加载包，如果包未安装会报错。</li><li><code>require()</code>：尝试加载包，如果包未安装会返回<code>FALSE</code>，但不会报错。</li></ul></blockquote><ul><li>查看所有已安装的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">installed.packages<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>查看当前加载的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><ul><li>更新已安装的包：</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update.packages<span class="punctuation">(</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="4-4-卸载-R-包">4.4 卸载 R 包</h3><p>使用 <code>remove.packages()</code> 函数卸载包</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remove.packages<span class="punctuation">(</span><span class="string">&quot;dplyr&quot;</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h2 id="5-R-的对象-Objects">5 R 的对象 Objects</h2><p>在 R 中，所有的数据集、函数、函数结果等，均统称为 “对象”（Object）</p><h3 id="5-1-对象的命名">5.1 对象的命名</h3><ul><li>区分大小写</li><li>由 <code>A-Z</code> <code>a-z</code> <code>0-9</code> <code>_</code> <code>.</code> 组成名字</li><li>对象名要以字母或者 <code>.</code> 开始</li><li>如果以 <code>.</code> 开头，后面不能跟数字</li><li>尽量避免使用保留名</li></ul><h3 id="5-2-查看与移除对象">5.2 查看与移除对象</h3><ul><li>使用 <code>ls()</code> 查看当前所有对象</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 查看当前工作空间所有对象</span></span><br><span class="line"></span><br><span class="line">ls<span class="punctuation">(</span>pat <span class="operator">=</span> <span class="string">&quot;m&quot;</span><span class="punctuation">)</span>  <span class="comment"># 名字包含 m 的所有对象</span></span><br><span class="line">ls<span class="punctuation">(</span>pat <span class="operator">=</span> <span class="string">&quot;^m&quot;</span><span class="punctuation">)</span>  <span class="comment"># 名字以 m 开头的所有对象</span></span><br><span class="line">ls.str<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 展示所有对象的详细信息</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>rm()</code> 删除对象</li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm<span class="punctuation">(</span><span class="punctuation">)</span>  <span class="comment"># 可以填入对象名</span></span><br><span class="line"></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> <span class="built_in">c</span><span class="punctuation">(</span><span class="string">&quot;x&quot;</span><span class="punctuation">,</span> <span class="string">&quot;y&quot;</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 删除对象 x 和 y</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span>  <span class="comment"># 删除所有对象</span></span><br></pre></td></tr></table></figure><blockquote><p>【推荐】在每个脚本文件 <code>.R</code> 都在文件开始设置工作路径和清空对象</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setwd<span class="punctuation">(</span><span class="string">&quot;&quot;</span><span class="punctuation">)</span>;  <span class="comment"># 填入路径</span></span><br><span class="line">rm<span class="punctuation">(</span><span class="built_in">list</span> <span class="operator">=</span> ls<span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">)</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-对象的属性-Attribute-与类别-Class">5.3 对象的属性 Attribute 与类别  Class</h3><h4 id="5-3-1-使用-mode-判断对象的属性">5.3.1 使用 <code>mode()</code> 判断对象的属性</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> x <span class="operator">&lt;-</span> 1;</span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;numeric&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.integer</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">is.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> y <span class="operator">&lt;-</span> <span class="built_in">is.numeric</span><span class="punctuation">(</span>x<span class="punctuation">)</span></span><br><span class="line"><span class="operator">&gt;</span> mode<span class="punctuation">(</span>y<span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span> <span class="string">&quot;logical&quot;</span></span><br></pre></td></tr></table></figure><p>或者使用 <code>is.numeric(); is.logical(); is.character; is.complex()</code> 进行判断。</p><h4 id="5-3-2-使用-class-判断对象的类别">5.3.2 使用 <code>class()</code> 判断对象的类别</h4><p>常见的类型：</p><ul><li>向量 vector</li><li>矩阵 matrix</li><li>数组 array</li><li>数据框 dataframe</li><li>列表 list</li></ul>]]></content>
    
    
    <summary type="html">本文介绍如何下载 R 语言和软件 RStudio 以及 R 语言的基本语法、R 的程序包、R 的对象。具体介绍了如何下载包、管理包、加载包和删除包，以及对象的命名和删除方法，和对象的属性和类别。</summary>
    
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/categories/R-%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R 语言" scheme="https://blog.iskage.online/tags/R-%E8%AF%AD%E8%A8%80/"/>
    
    <category term="统计软件" scheme="https://blog.iskage.online/tags/%E7%BB%9F%E8%AE%A1%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="R programming" scheme="https://blog.iskage.online/tags/R-programming/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（9）创建和管理数据库和数据表</title>
    <link href="https://blog.iskage.online/posts/4bd5b58e.html"/>
    <id>https://blog.iskage.online/posts/4bd5b58e.html</id>
    <published>2025-02-19T07:43:00.000Z</published>
    <updated>2025-02-19T11:27:30.685Z</updated>
    
    <content type="html"><![CDATA[<h1>创建和管理数据库和数据表</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>存储和管理数据需要我们创建并管理数据库以及数据库中的各种表。本文介绍如何创建和管理数据库、数据表。包括了数据库的创建、管理；数据表的创建、修改、命名和删除。</p><h2 id="1-数据管理">1 数据管理</h2><p>对数据进行管理，首先要存储数据。一般按照 <code>创建数据库 -&gt; 选择字段 -&gt; 创建数据表 -&gt; 存储数据</code> 的方式进行管理。</p><h3 id="1-1-命名规则">1.1 命名规则</h3><ul><li>数据库名、表名不得超过 <code>30</code> 个字符，变量名不得超过 <code>29</code> 个字符</li><li>只含 <code>A-Z</code> <code>a-z</code> <code>0-9</code> 共 63 个字符</li><li>名中不要包含 <code>空格</code></li><li>同一个 MySQL 软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>不要使用关键字，不得不使用时使用 <code>``</code> 框选</li></ul><h3 id="1-2-MySQL-中的数据类型">1.2 MySQL 中的数据类型</h3><table><thead><tr><th>数据类型类别</th><th>数据类型</th><th>关键字/特点</th><th>描述</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code></td><td>1字节，有符号范围：-128到127，无符号范围：0到255</td><td>非常小的整数</td></tr><tr><td></td><td><code>SMALLINT</code></td><td>2字节，有符号范围：-32768到32767，无符号范围：0到65535</td><td>小整数</td></tr><tr><td></td><td><code>MEDIUMINT</code></td><td>3字节，有符号范围：-8388608到8388607，无符号范围：0到16777215</td><td>中等大小的整数</td></tr><tr><td></td><td><code>INT</code></td><td>4字节，有符号范围：-2147483648到2147483647，无符号范围：0到4294967295</td><td>标准整数</td></tr><tr><td></td><td><code>BIGINT</code></td><td>8字节，有符号范围：-2^63到2^63-1，无符号范围：0到2^64-1</td><td>大整数</td></tr><tr><td>浮点数类型</td><td><code>FLOAT</code></td><td>4字节，单精度浮点数</td><td>单精度浮点数，精度约为7位小数</td></tr><tr><td></td><td><code>DOUBLE</code></td><td>8字节，双精度浮点数</td><td>双精度浮点数，精度约为15位小数</td></tr><tr><td></td><td><code>DECIMAL(M, D)</code></td><td>定点数，M为总位数，D为小数位数</td><td>精确小数，适用于财务计算</td></tr><tr><td>日期时间类型</td><td><code>DATE</code></td><td>格式：‘YYYY-MM-DD’</td><td>日期值，仅包含日期</td></tr><tr><td></td><td><code>TIME</code></td><td>格式：‘HH:MM:SS’</td><td>时间值，仅包含时间</td></tr><tr><td></td><td><code>DATETIME</code></td><td>格式：‘YYYY-MM-DD HH:MM:SS’</td><td>日期和时间值</td></tr><tr><td></td><td><code>TIMESTAMP</code></td><td>格式：‘YYYY-MM-DD HH:MM:SS’，范围：‘1970-01-01 00:00:01’到’2038-01-19 03:14:07’</td><td>时间戳，自动更新</td></tr><tr><td></td><td><code>YEAR</code></td><td>格式：‘YYYY’</td><td>年份值</td></tr><tr><td>字符串类型</td><td><code>CHAR(M)</code></td><td>固定长度字符串，M为字符数，最大255</td><td>定长字符串，适合存储固定长度的数据</td></tr><tr><td></td><td><code>VARCHAR(M)</code></td><td>可变长度字符串，M为最大字符数，最大65535</td><td>变长字符串，适合存储长度不固定的数据</td></tr><tr><td></td><td><code>TINYTEXT</code></td><td>最大长度255字符</td><td>非常小的文本字符串</td></tr><tr><td></td><td><code>TEXT</code></td><td>最大长度65535字符</td><td>文本字符串</td></tr><tr><td></td><td><code>MEDIUMTEXT</code></td><td>最大长度16777215字符</td><td>中等长度的文本字符串</td></tr><tr><td></td><td><code>LONGTEXT</code></td><td>最大长度4294967295字符</td><td>长文本字符串</td></tr><tr><td></td><td><code>BINARY(M)</code></td><td>固定长度二进制字符串，M为字节数，最大255</td><td>定长二进制字符串</td></tr><tr><td></td><td><code>VARBINARY(M)</code></td><td>可变长度二进制字符串，M为最大字节数，最大65535</td><td>变长二进制字符串</td></tr><tr><td>枚举类型</td><td><code>ENUM('val1', 'val2', ...)</code></td><td>枚举类型，只能存储列出的值之一</td><td>枚举类型，适合存储有限个数的可能值</td></tr><tr><td>集合类型</td><td><code>SET('val1', 'val2', ...)</code></td><td>集合类型，可以存储多个列出的值</td><td>集合类型，适合存储多个可能值</td></tr><tr><td>二进制大对象</td><td><code>TINYBLOB</code></td><td>最大长度255字节</td><td>非常小的二进制对象</td></tr><tr><td></td><td><code>BLOB</code></td><td>最大长度65535字节</td><td>二进制大对象</td></tr><tr><td></td><td><code>MEDIUMBLOB</code></td><td>最大长度16777215字节</td><td>中等大小的二进制对象</td></tr><tr><td></td><td><code>LONGBLOB</code></td><td>最大长度4294967295字节</td><td>长二进制对象</td></tr><tr><td>空间数据类型</td><td><code>GEOMETRY</code></td><td>空间数据类型，存储几何对象</td><td>几何对象</td></tr><tr><td></td><td><code>POINT</code></td><td>点类型</td><td>二维平面上的点</td></tr><tr><td></td><td><code>LINESTRING</code></td><td>线类型</td><td>二维平面上的线</td></tr><tr><td></td><td><code>POLYGON</code></td><td>多边形类型</td><td>二维平面上的多边形</td></tr><tr><td></td><td><code>MULTIPOINT</code></td><td>多点类型</td><td>多个点的集合</td></tr><tr><td></td><td><code>MULTILINESTRING</code></td><td>多线类型</td><td>多条线的集合</td></tr><tr><td></td><td><code>MULTIPOLYGON</code></td><td>多多边形类型</td><td>多个多边形的集合</td></tr><tr><td></td><td><code>GEOMETRYCOLLECTION</code></td><td>几何集合类型</td><td>多个几何对象的集合</td></tr><tr><td>JSON类型</td><td><code>JSON</code></td><td>存储JSON格式数据</td><td>用于存储JSON格式的数据</td></tr></tbody></table><blockquote><p>以上由 <a href="https://www.deepseek.com/">DeepSeek 总结</a> ，并不重要，现实使用时可以查询官方文档。</p></blockquote><h2 id="2-创建和管理数据库">2 创建和管理数据库</h2><h3 id="2-1-创建数据库">2.1 创建数据库</h3><ul><li>方法1： 直接创建，完全默认</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><ul><li>方法2：创建数据库并指定字符集</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名 <span class="keyword">CHARACTER SET</span> 字符集;</span><br></pre></td></tr></table></figure><p>可以指定数据库的字符集（如 <code>utf8mb4</code> ），确保数据存储时使用正确的编码。</p><ul><li>方法3【推荐】：先判断是否已经存在，不存在则创建数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>注意：数据库不能改名！</p><p>如果需要重命名，则需要：创建新数据库；复制原数据库数据导入新库；删除旧库。</p></blockquote><h3 id="2-2-使用数据库">2.2 使用数据库</h3><ul><li>查看所有数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><ul><li>查看当前使用的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><blockquote><p>未使用数据库时返回 <code>NULL</code></p></blockquote><ul><li>查看数据库的所有表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES [<span class="keyword">FROM</span> 数据库名];</span><br></pre></td></tr></table></figure><blockquote><p>若省略 <code>FROM 数据库名</code> 则查看当前使用的数据库</p></blockquote><ul><li>查看数据库创建时的相关信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739872321265.png" alt=""></p><ul><li>使用某个数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>因为数据表均存储在不同数据库下，所以在对表操作前，必须先指定使用某个数据库。</p></blockquote><h3 id="2-3-更改字符集">2.3 更改字符集</h3><p>虽然更改数据库名理论上是不可行，不推荐的。但修改字符集非常简单，只需一行指令即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="keyword">CHARACTER SET</span> 字符集; <span class="comment">-- e.g. : gbk, utf8</span></span><br></pre></td></tr></table></figure><h3 id="2-4-删除数据库">2.4 删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>IF EXISTS</code> 先判断是否存在，存在则删除。可以省略，但【不推荐】。</p></blockquote><h2 id="3-创建表">3 创建表</h2><p>在数据库创建完成后，进入/使用指定的数据库，而后就可以开始创建和管理数据表。</p><h3 id="3-1-CREATE-TABLE-创建新的数据表">3.1 <code>CREATE TABLE</code> 创建新的数据表</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名</span><br><span class="line">(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">...</span><br><span class="line">[表约束条件]</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- [] 表示可省略</span></span><br></pre></td></tr></table></figure><p>例如：不做约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp</span><br><span class="line">(</span><br><span class="line">    emp_id   <span class="type">INT</span>,</span><br><span class="line">    emp_name <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="comment">-- 20 为长度</span></span><br><span class="line">    salary   <span class="keyword">DOUBLE</span>,</span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们可以查看一下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739873501483.png" alt=""></p><p>例如：增加约束条件，指定自增性质，指定表的主键【推荐指定主键】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> dept</span><br><span class="line">(</span><br><span class="line">    dept_id   <span class="type">INT</span> AUTO_INCREMENT, <span class="comment">-- 增加约束条件: 自增</span></span><br><span class="line">    dept_name <span class="type">VARCHAR</span>(<span class="number">14</span>),</span><br><span class="line">    location  <span class="type">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line">    <span class="keyword">PRIMARY KEY</span> (dept_id)         <span class="comment">-- 表的约束条件: 指定 deptno 为主键</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>同样，我们可以查看一下表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> dept;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739873713040.png" alt=""></p><h3 id="3-2-AS-其他表名-创建表同时导入数据">3.2 <code>AS 其他表名</code> 创建表同时导入数据</h3><p>使用 <code>CREATE TABLE 新表 AS 其他表的数据</code> 在创建新表的同时，插入数据。</p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 新表</span><br><span class="line">(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">...</span><br><span class="line">[表约束条件]</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 其他表</span><br><span class="line">[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><blockquote><p>其中，指定新表属性和字段的 <code>(字段1, ..., 表约束条件])</code> 部分可以省略。如果不省略，则要满足后面填充数据时的匹配。即 <code>SELECT</code> 语句找出的数据和新表的列要一一对应。</p></blockquote><p>例如：选取数据库 <code>atguigudb</code> 的 <code>employees</code> 表中收入高于 13000 的员工的部分信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> emp_high_salary</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.last_name, e.department_name, e.salary, e.hire_date</span><br><span class="line"><span class="keyword">FROM</span> atguigudb.employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;</span> <span class="number">13000</span>;</span><br></pre></td></tr></table></figure><p>查看这个新表的信息，继承了表的信息（执行  <code>DESC emp_high_salary;</code> ）</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739874352421.png" alt=""></p><p>查看具体表的内容，发现已经填充了数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> test.emp_high_salary;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739874466224.png" alt=""></p><h3 id="3-3-查看数据表结构">3.3 查看数据表结构</h3><p>除了上面的采用 <code>DESC</code> 的方式查看表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><p>也可以采用 <code>SHOW CREATE TABLE</code> 查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> 表名;</span><br></pre></td></tr></table></figure><blockquote><p><code>SHOW CREATE TABLE</code> 查看的表结构更为详细</p></blockquote><h2 id="4-修改表">4 修改表</h2><p>使用 <code>ALTER TABLE</code> 语句修改表的结构</p><h3 id="4-1-新增一列-ADD">4.1 新增一列 ADD</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line"><span class="keyword">ADD</span> 字段名 字段类型 </span><br><span class="line">[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名];</span><br><span class="line"><span class="comment">-- [] 代表可选</span></span><br><span class="line"><span class="comment">-- A|B 代表或者, A 或 B</span></span><br></pre></td></tr></table></figure><p>例如：在表 emp 中新增一列 job_id 使得其在字段 salary 的后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp</span><br><span class="line">    <span class="keyword">ADD</span> job_id <span class="type">varchar</span>(<span class="number">15</span>)</span><br><span class="line">        AFTER salary;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739937896250.png" alt=""></p><h3 id="4-2-修改一列-MODIFY">4.2 修改一列 MODIFY</h3><p>可以修改列的 <code>数据类型</code> <code>长度</code> <code>默认值</code> <code>位置</code></p><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line">MODIFY 字段名<span class="number">1</span> 字段类型 [<span class="keyword">DEFAULT</span> 默认值] </span><br><span class="line">[<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>例如：修改表 emp_high_salary 的 salary 的数据类型和默认值，并放置在 last_name 后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_high_salary</span><br><span class="line">    MODIFY salary <span class="keyword">double</span>(<span class="number">9</span>, <span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">1000</span></span><br><span class="line">        AFTER last_name;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739938248613.png" alt=""></p><blockquote><p>默认值的修改只对以后存储的新数据有影响</p></blockquote><h3 id="4-3-对列重命名-CHANGE">4.3 对列重命名 CHANGE</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line">CHANGE 列名 新列名 新数据类型;</span><br></pre></td></tr></table></figure><p>例如：将表 emp_high_salary 的 department_name 改为 dept_name</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp_high_salary</span><br><span class="line">    CHANGE department_name dept_name <span class="type">varchar</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739938432301.png" alt=""></p><h3 id="4-4-删除某列-DROP">4.4 删除某列 DROP</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 </span><br><span class="line"><span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>例如：删除之前在表 emp 中新增的 job_id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> emp</span><br><span class="line">    <span class="keyword">DROP</span> job_id;</span><br></pre></td></tr></table></figure><h2 id="5-重命名表">5 重命名表</h2><h3 id="5-1-RENAME-方法">5.1 RENAME 方法</h3><p>使用 <code>RENAME ... TO</code> 方法重命名表，格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> 旧表名</span><br><span class="line"><span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure><p>例如：更改表 emp 为新名字 employee_info</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> emp</span><br><span class="line">    <span class="keyword">TO</span> employee_info;</span><br></pre></td></tr></table></figure><h3 id="5-2-ALTER-RENAME-方法">5.2 ALTER RENAME 方法</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> 旧表名</span><br><span class="line">    RENAME [<span class="keyword">TO</span>] 新表名;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER table</span> employee_info</span><br><span class="line">    RENAME emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-删除表">6 删除表</h2><p>当当前表与其他表没有关联时，例如没有外键链接时，可以直接删除。格式为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></table></figure><p>例如：删除之前常见的 emp_high_salary 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp_high_salary;</span><br></pre></td></tr></table></figure><h2 id="7-清空表内数据">7 清空表内数据</h2><p>只是删除表内的数据，并不删除表结构。</p><h3 id="7-1-TRUNCATE-语句">7.1 TRUNCATE 语句</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="7-2-DELETE-语句">7.2 DELETE 语句</h3><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="7-3-是否回滚-ROLLBACK">7.3 是否回滚 ROLLBACK</h3><p><code>DELETE</code> 支持回滚 <code>ROLLBACK</code> ，而 <code>TRUNCATE</code> 不支持。</p><p>例如：先查看原始表内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>使用 <code>DELETE</code> 删除，然后回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开始事务，暂不提交</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><blockquote><p><code>START TRANSACTION;</code> ：它标志着一个事务的开始。在事务中，可以执行多个 SQL 语句。在事务结束之前，所有的修改都不会真正生效，直到显式地提交事务（<code>COMMIT;</code>）或回滚事务（<code>ROLLBACK;</code>）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DELETE 删除</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="comment">-- 查看结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp_high_salary; <span class="comment">-- 查看结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> last_name <span class="operator">|</span> department_name <span class="operator">|</span> salary   <span class="operator">|</span> hire_date  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">100</span> <span class="operator">|</span> King      <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">24000.00</span> <span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">101</span> <span class="operator">|</span> Kochhar   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1989</span><span class="number">-09</span><span class="number">-21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">102</span> <span class="operator">|</span> De Haan   <span class="operator">|</span> Executive       <span class="operator">|</span> <span class="number">17000.00</span> <span class="operator">|</span> <span class="number">1993</span><span class="number">-01</span><span class="number">-13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">145</span> <span class="operator">|</span> Russell   <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">14000.00</span> <span class="operator">|</span> <span class="number">1996</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">146</span> <span class="operator">|</span> Partners  <span class="operator">|</span> Sales           <span class="operator">|</span> <span class="number">13500.00</span> <span class="operator">|</span> <span class="number">1997</span><span class="number">-01</span><span class="number">-05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-----------+-----------------+----------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>此时 <code>ROLLBACK;</code> 回滚事务结束，结果被提交给数据库，数据完成所有操作，显示最终结果。</p></blockquote><ul><li>但是 <code>TRUNCATE</code> 不支持回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> emp_high_salary;</span><br><span class="line"><span class="comment">-- 执行后，表中所有数据被清空，无法回滚</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_high_salary;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>清除数据而已，表结构仍然存在</p></blockquote><h2 id="8-注意事项">8 注意事项</h2><ul><li><p>在第 6 和第 7 部分：删除表和清除表数据需要十分谨慎。【建议先备份】然后进行删除。</p></li><li><p>除此之外，为了避免误操作，<code>MySQL8.0</code> 推出了 <strong>DDL（Data Definition Language）原子化</strong> ，即操作要么成功要么失败，绝对不会出现部分成功的情况。</p></li></ul><p>例如：在删除表时，如果 <code>表1</code> 存在，而 <code>表2</code> 不存在。此时同时删除 <code>表1</code> 和 <code>表2</code> 的操作会完全失败，不会出现 <code>表1</code> 被删除了，而 <code>表2</code> 不存在报错的情况。</p>]]></content>
    
    
    <summary type="html">本文介绍如何创建和管理数据库、数据表。包括了数据库的创建、管理；数据表的创建、修改、命名和删除。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（8）子查询</title>
    <link href="https://blog.iskage.online/posts/73aff18a.html"/>
    <id>https://blog.iskage.online/posts/73aff18a.html</id>
    <published>2025-02-17T07:43:00.000Z</published>
    <updated>2025-02-19T11:27:03.023Z</updated>
    
    <content type="html"><![CDATA[<h1>子查询</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询。</p><h2 id="1-子查询的基本使用">1 子查询的基本使用</h2><ul><li>例子引入：查询工资大于 Abel 的员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 之前所学：自连接</span></span><br><span class="line"><span class="keyword">SELECT</span> e2.last_name, e2.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e1,</span><br><span class="line">     employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> e1.salary <span class="operator">&lt;</span> e2.salary;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="1-1-基本格式">1.1 基本格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件   </span><br><span class="line">            (<span class="keyword">SELECT</span> 列名</span><br><span class="line">             <span class="keyword">FROM</span> 表名</span><br><span class="line">             <span class="keyword">WHERE</span> 条件);</span><br></pre></td></tr></table></figure><h3 id="1-2-子查询分类">1.2 子查询分类</h3><h4 id="1-2-1-单行子查询-vs-多行子查询">1.2.1 单行子查询 vs 多行子查询</h4><ul><li>查询的结果返回一条还是多条记录，将子查询分为<strong>单行子查询</strong>和<strong>多行子查询</strong></li></ul><h4 id="1-2-2-相关子查询-vs-不相关子查询">1.2.2 相关子查询 vs 不相关子查询</h4><ul><li><p><strong>不相关子查询</strong>：子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做不相关子查询。</p></li><li><p><strong>相关子查询</strong>：如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p></li></ul><h2 id="2-单行子查询">2 单行子查询</h2><h3 id="2-1-常见案例">2.1 常见案例</h3><p>常见条件：<code>=, &gt;, &gt;=, &lt;=, &lt;&gt;</code> ，要求子查询返回的是唯一一个结果</p><ul><li>例如：上述的查询工资大于 Abel 的员工</li><li>例如：多条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多条件</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (<span class="keyword">SELECT</span> job_id</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">103</span>)</span><br><span class="line">  <span class="keyword">AND</span> salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> salary</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778436446.png" alt=""></p><blockquote><p>【注意】当使用简单比较符时，单行子查询返回的结果必须唯一，如此才能比较。例如：若子查询查询到的 <code>job_id</code> 有多个，则无法比较。</p></blockquote><ul><li>例如：利用单行函数返回工资最少的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">                <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><h3 id="2-2-HAVING-中的子查询">2.2 HAVING 中的子查询</h3><p>子查询优先执行，得到子查询的结果后返回给主句的 <code>WHERE</code> 或 <code>HAVING</code> 充当过滤条件的一部分。</p><ul><li>例如：查询最低工资大于部门 <code>department_id = 50</code> 的最低工资的部门</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span></span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">        <span class="keyword">FROM</span> employees</span><br><span class="line">        <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779142944.png" alt=""></p><blockquote><p><code>GROUP BY ... HAVING ...</code> 用于分组查询，见<a href="https://blog.iskage.online/posts/b266e599.html#3-GROUP-BY-%E2%80%A6-HAVING-%E6%9C%89%E7%BA%A6%E6%9D%9F%E7%9A%84%E5%88%86%E7%BB%84">聚合函数</a>章节笔记。</p></blockquote><h3 id="2-3-CASE-中的子查询">2.3 CASE 中的子查询</h3><ul><li>例如：若员工的 <code>department_id</code> 与 <code>location_id</code> 为 1800 的 <code>department_id</code> 相同，则 <code>location</code> 为 ‘Canada’ ，其余则为 ‘USA’</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,</span><br><span class="line">       last_name,</span><br><span class="line">       <span class="keyword">CASE</span> department_id</span><br><span class="line">           <span class="keyword">WHEN</span></span><br><span class="line">               (<span class="keyword">SELECT</span> department_id</span><br><span class="line">                <span class="keyword">FROM</span> departments</span><br><span class="line">                <span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1800</span>)</span><br><span class="line">               <span class="keyword">THEN</span> <span class="string">&#x27;Canada&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;USA&#x27;</span> <span class="keyword">END</span> location</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779580573.png" alt=""></p><blockquote><p><code>CASE WHEN</code> 根据不同条件返回不同结果，见<a href="https://blog.iskage.online/posts/35d72c0b.html#4-3-%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C">单行函数</a>章节笔记。</p></blockquote><h3 id="2-4-子查询中的空值问题">2.4 子查询中的空值问题</h3><p>如果子查询查不到结果，并不会报错，只是返回空。</p><ul><li>例如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span></span><br><span class="line">      (<span class="keyword">SELECT</span> salary</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Nobody&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739779760433.png" alt=""></p><h3 id="2-5-常见错误：返回多行">2.5 常见错误：返回多行</h3><p>使用单行子查询，返回的结果确实多行，则会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1242 (21000): Subquery returns more than 1 row</span><br></pre></td></tr></table></figure><blockquote><p>单行比较符，需要比较的两者是唯一值，不可以一个值与多个值比较</p></blockquote><h2 id="3-多行子查询">3 多行子查询</h2><h3 id="3-1-案例引入">3.1 案例引入</h3><ul><li>例如：查询与 141 号或 174 号员工的 <code>manager_id</code> 和 <code>department_id</code> 相同的其他员工的 <code>employee_id</code> <code>manager_id</code> 和 <code>department_id</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 不成对比较，逐个增加条件</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> manager_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>))</span><br><span class="line">  <span class="keyword">AND</span> department_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> department_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>))</span><br><span class="line">  <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">174</span>, <span class="number">141</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 2. 当作一个集合进行比较</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (manager_id, department_id) <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>))</span><br><span class="line">  <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778806369.png" alt=""></p><p>【补充】可以查看一下具体的条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>, <span class="number">174</span>);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739778790765.png" alt=""></p><h3 id="3-2-常见多行比较操作符">3.2 常见多行比较操作符</h3><table><thead><tr><th style="text-align:left">操作符</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>IN</code></td><td>等于列表中任意一个即可</td></tr><tr><td style="text-align:left"><code>ANY</code></td><td>和子查询返回的某个值比较</td></tr><tr><td style="text-align:left"><code>ALL</code></td><td>和子查询返回的所有值比较</td></tr><tr><td style="text-align:left"><code>SOME</code></td><td>和 ANY 相同</td></tr></tbody></table><h3 id="3-3-示例">3.3 示例</h3><h4 id="3-3-1-ANY-和-ALL">3.3.1 ANY 和 ALL</h4><ul><li><code>ANY</code> ：返回其 <code>job_id</code> 中比 <code>job_id</code> 为 <code>IT_PROG</code> 部门<strong>任一</strong>工资低的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ANY</span></span><br><span class="line">      (<span class="keyword">SELECT</span> e.salary</span><br><span class="line">       <span class="keyword">FROM</span> employees e</span><br><span class="line">       <span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> e.job_id <span class="operator">!=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780719982.png" alt=""></p><blockquote><p>子查询会返回很多行数据（不同的 <code>salary</code>）但我们需要找到的是只要比子查询的结果任意一个低即可，类似于 <code>&lt; MAX()</code></p></blockquote><ul><li><code>ALL</code> ：返回其 <code>job_id</code> 中比 <code>job_id</code> 为 <code>IT_PROG</code> 部门<strong>任意</strong>工资低的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.job_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> <span class="keyword">ALL</span></span><br><span class="line">      (<span class="keyword">SELECT</span> e.salary</span><br><span class="line">       <span class="keyword">FROM</span> employees e</span><br><span class="line">       <span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> e.job_id <span class="operator">!=</span> <span class="string">&#x27;IT_PROG&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780740500.png" alt=""></p><blockquote><p>子查询会返回很多行数据（不同的 <code>salary</code>）但我们需要找到的是比子查询的结果任意都低，类似于 <code>&lt; MIN()</code></p></blockquote><p>观察一下子查询的条件返回的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- condition</span></span><br><span class="line"><span class="keyword">SELECT</span> e.salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.job_id <span class="operator">=</span> <span class="string">&#x27;IT_PROG&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739780820060.png" alt=""></p><p>最大为 9000 ，最小为 4200 ：在使用 ANY 时，小于 9000 即可；但在使用 ALL 时，却需要小于 4200 。这就是二者明显的不同。</p><h4 id="3-3-2-FROM-后嵌套查询分组语句">3.3.2 FROM 后嵌套查询分组语句</h4><ul><li>查询平均工资最低的部门 id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法 1: 直接使用 MIN</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(avg_sal)</span><br><span class="line">                      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">                            <span class="keyword">FROM</span> employees</span><br><span class="line">                            <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) dept_avg_sal);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 法 2: 使用 ALL 间接表达最小</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&lt;=</span> <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line">                           <span class="keyword">FROM</span> employees</span><br><span class="line">                           <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id);</span><br></pre></td></tr></table></figure><blockquote><p><code>GROUP BY</code> 和单行函数联合使用，返回多行结果</p></blockquote><h2 id="4-相关子查询">4 相关子查询</h2><h3 id="4-1-相关子查询的例子">4.1 相关子查询的例子</h3><p>例如：查询员工信息，筛选条件为其工资要大于他所在部门的平均工资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, e.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span></span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">       <span class="keyword">FROM</span> employees</span><br><span class="line">       <span class="keyword">WHERE</span> department_id <span class="operator">=</span> e.department_id)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>如此，每次查一行数据时，就会执行子查询计算 <code>department_id</code> 等于当前行的平均工资，再返回给 WHERE 子句进行判断，决定是否查询这一行。</p><h3 id="4-2-FROM-后使用子查询">4.2 FROM 后使用子查询</h3><p>同样是上面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, salary, e1.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1,</span><br><span class="line">     (<span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary) dept_avg_sal</span><br><span class="line">      <span class="keyword">FROM</span> employees</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id) e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.department_id <span class="operator">=</span> e2.department_id</span><br><span class="line">  <span class="keyword">AND</span> e1.salary <span class="operator">&gt;</span> e2.dept_avg_sal</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>FROM 后使用子查询，相当于创造了一张虚拟表，一定要使用 <code>()</code> 和别名。</p><h3 id="4-3-ORDER-BY-后使用子查询">4.3 ORDER BY 后使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">SELECT</span> d.department_name</span><br><span class="line">          <span class="keyword">FROM</span> departments d</span><br><span class="line">          <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure><h3 id="4-4-EXISTS-与-NOT-EXISTS">4.4  EXISTS 与 NOT EXISTS</h3><p><code>EXISTS</code> ：检查在子查询中是否存在满足条件的行。逐行查询时：</p><ul><li><p>如果在子查询中<strong>不存在</strong>满足条件的行：条件返回 <code>FALSE</code> 。继续在子查询中查找</p></li><li><p>如果在子查询中<strong>存在</strong>满足条件的行：条件返回 <code>TRUE</code> 。不在子查询中继续查找</p></li></ul><p><code>NOT EXISTS</code> 则相反。</p><p>例如：返回是公司管理者，即查找是否有 <code>manager_id</code> 等于这个员工的 <code>employee.id</code></p><p>【方法一】EXISTS</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">              <span class="keyword">FROM</span> employees e2</span><br><span class="line">              <span class="keyword">WHERE</span> e2.manager_id <span class="operator">=</span></span><br><span class="line">                    e1.employee_id);</span><br></pre></td></tr></table></figure><blockquote><p>注意：EXISTS 返回的是 True 和 False</p></blockquote><p>【方法二】自连接</p><p>或者使用自连接，即创造一个虚拟表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> e1.employee_id, e1.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line">         <span class="keyword">JOIN</span> employees e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.employee_id <span class="operator">=</span> e2.manager_id;</span><br></pre></td></tr></table></figure><blockquote><p>【推荐】：相比子查询，自连接更为高效</p></blockquote><p>【方法三】多行子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> manager_id</span><br><span class="line">       <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><h3 id="4-5-相关子查询去更新与更新">4.5 相关子查询去更新与更新</h3><h4 id="4-5-1-相关更新">4.5.1 相关更新</h4><p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p><ul><li>先增加一个字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> employees</span><br><span class="line">    <span class="keyword">ADD</span>(department_name <span class="type">VARCHAR</span>(<span class="number">50</span>));</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field           <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> employee_id     <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> first_name      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> last_name       <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> email           <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">25</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phone_number    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hire_date       <span class="operator">|</span> <span class="type">date</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> job_id          <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">10</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salary          <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> commission_pct  <span class="operator">|</span> <span class="keyword">double</span>(<span class="number">2</span>,<span class="number">2</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager_id      <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_id   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> department_name <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span> <span class="comment">-- 新增字段</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li>然后更新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees e</span><br><span class="line"><span class="keyword">SET</span> department_name <span class="operator">=</span></span><br><span class="line">        (<span class="keyword">SELECT</span> department_name</span><br><span class="line">         <span class="keyword">FROM</span> departments d</span><br><span class="line">         <span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739783513615.png" alt=""></p><h4 id="4-5-2-相关删除">4.5.2 相关删除</h4><p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名<span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> 列名 <span class="keyword">IN</span></span><br><span class="line">      (<span class="keyword">SELECT</span> 列名</span><br><span class="line">       <span class="keyword">FROM</span> 表名<span class="number">2</span></span><br><span class="line">       <span class="keyword">WHERE</span> 条件);</span><br></pre></td></tr></table></figure><blockquote><p><code>IN</code> 也可以是其他操作符</p></blockquote>]]></content>
    
    
    <summary type="html">子查询指一个查询语句嵌套在另一个查询语句内部的查询。包括了单行子查询和多行子查询；相关子查询与不相关子查询。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>conda 创建虚拟环境常见问题：虚拟环境路径错误</title>
    <link href="https://blog.iskage.online/posts/90e61ddb.html"/>
    <id>https://blog.iskage.online/posts/90e61ddb.html</id>
    <published>2025-02-16T01:11:00.000Z</published>
    <updated>2025-02-15T07:45:28.961Z</updated>
    
    <content type="html"><![CDATA[<h1>conda 创建虚拟环境常见问题：环境路径错误</h1><h2 id="1-下载、安装、配置-conda">1 下载、安装、配置 conda</h2><p>利用 conda 更为轻便的搭建虚拟环境，包括了 下载、安装、环境变量配置、使用与常见问题收录。见 <a href="https://zhuanlan.zhihu.com/p/21629604277">conda 创建虚拟环境全流程</a> 。（或者<a href="https://blog.iskage.online/posts/2c3265b7.html">博客链接</a>）</p><h2 id="2-问题：虚拟环境路径与-conda-安装路径不同">2 问题：虚拟环境路径与 conda 安装路径不同</h2><p>在安装过程中，如果自定义了安装路径，例如：将 conda 安装在了 D 盘，则会发现：在利用 conda 创建环境时，虚拟环境的路径仍然位于系统盘 C 盘。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739602431664.png" alt=""></p><p>下面，全流程详细介绍如何解决：</p><h2 id="3-首先检查环境变量">3 首先检查环境变量</h2><h3 id="3-1-检查环境变量">3.1 检查环境变量</h3><p>在 <code>命令行提示符</code> （注意：不是 PowerShell） 里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">where</span> conda</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/2f1701e249a2b80d6f4f3d54c71c5461.png" alt=""></p><h3 id="3-2-补充环境变量">3.2 补充环境变量</h3><p>注意：如果没有出现上图的结果，则需要补充到环境变量：</p><ul><li>右键【此电脑】，选择【属性】</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/81a20737e9394766099cdbd96e84b381_720.png" alt="、"></p><ul><li>选择【高级系统设置】，然后点击【环境变量】，双击【PATH】后【新建】添加 4 个路径</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...\miniconda3</span><br><span class="line">...\miniconda3\Scripts</span><br><span class="line">...\miniconda3\Library\bin</span><br><span class="line">...\miniconda3\condabin</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/eac2e32e0bf670ebee8acafd1433ff57_720.png" alt=""></p><h2 id="4-修改-condarc-文件">4 修改 <code>.condarc</code> 文件</h2><h3 id="4-1-condarc-文件配置">4.1 .condarc 文件配置</h3><p>来到 conda 安装路径，例如我的路径： <code>D:\ProgramData\miniconda3</code> 。找到 <code>.condarc</code> 文件，右键以记事本格式打开。</p><blockquote><p>【推荐】使用 vscode 打开，比较容易找到 <code>.condarc</code> 文件</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/4938895f665d67b146c44c063e40f41e.png" alt=""></p><h3 id="4-2-添加虚拟环境安装路径">4.2 添加虚拟环境安装路径</h3><p>将 conda 安装路径下的 <code>envs</code> 文件夹路径填入 <code>.condarc</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">envs <span class="built_in">dirs</span>:</span><br><span class="line">- D://ProgramData//miniconda3//envs</span><br></pre></td></tr></table></figure><blockquote><p>【注意】根据自己的安装路径填写；格式要正确，注意缩进；使用 <code>//</code> 分隔各目录，不要使用 <code>\</code></p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/df786b1cfa768f744046426e730bfb35_720.png" alt=""></p><p>保存退出后还须设置权限。</p><h3 id="4-3-设置-envs-文件夹权限">4.3 设置 <code>envs</code> 文件夹权限</h3><ul><li>右键【envs】文件夹，选择【属性】</li><li>选择【安全】，点击【编辑】</li><li>选中【Users(用户名\Users)】，选中运行所有权限，如图所示</li><li>点击【确认】，确保修改被保存</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/144df84f90add26fad392113d15fa132_720.png" alt=""></p><p>此时，已经配置完成。现在使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名 [python=3.12]</span><br><span class="line"><span class="comment"># [] 表示可选</span></span><br></pre></td></tr></table></figure><p>可以正常创建环境，且虚拟环境的安装位置也处于指定目录下：</p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/5e449048e3545b0cbb378928c2995c04.png" alt=""></p><blockquote><p>但是使用一些集成开发环境 IDEA 时，可能会出现无法识别“环境名”的问题</p><p>【注意】只是识别不出环境名，直接指定环境下的 <code>python.exe</code> 等文件同样可以配置成功，只是无法显示环境名。具体案例和解决方法见下：</p></blockquote><h2 id="5-问题：集成开发环境-IDEA-无法识别环境名称">5 问题：集成开发环境 IDEA 无法识别环境名称</h2><h3 id="5-1-Vscode-可以直接指定，无问题">5.1 Vscode 可以直接指定，无问题</h3><p>例如：利用终端命令 <code>conda create -n dl</code> 创建了名为 <code>dl</code> 的环境，然后查看 dl 可执行文件的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/5e449048e3545b0cbb378928c2995c04.png" alt=""></p><p>然后在 vscode 中【选择内核】里选择 【Python 解释器】添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ProgramData\miniconda3\envs\dl\python.exe  <span class="comment"># 替换自己的路径</span></span><br></pre></td></tr></table></figure><p>即可成功。</p><h3 id="5-2-PyCharm-无法识别环境名">5.2 PyCharm 无法识别环境名</h3><h4 id="5-2-1-直接指定可执行文件">5.2.1 直接指定可执行文件</h4><p>按照上述相同方法，同样可以将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ProgramData\miniconda3\envs\dl\python.exe  <span class="comment"># 替换自己的路径</span></span><br></pre></td></tr></table></figure><p>可执行文件 <code>.exe</code> 添加到 PyCharm 的 【Python 解释器】中，同样可以正常使用，只是环境名 <code>dl</code> 可能无法显示。此时可能显示为类似 <code>Python 3.12.8(1)</code> 的名字，带来不方便。</p><blockquote><p>【注意】可以【正常使用！！！】，只是环境名无法显示</p></blockquote><h4 id="5-2-2-利用-PyCharm-创建虚拟环境">5.2.2 利用 PyCharm 创建虚拟环境</h4><p>为了避免这个窘境，可以选择让 PyCharm 使用我们下载的 conda 创建虚拟环境</p><blockquote><p>因为之前的配置，我们只要选定 conda ，PyCharm 创建的虚拟环境仍然在我们指定的路径中。相比让 PyCharm 自主下载 conda 后创建环境，更好管理。</p></blockquote><ul><li>选择【添加 Python 解释器】(【Python Interpreter】)，点击【增加本地解释器】(【Add Local Interpreter】)</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/fa371f66893a913f888bc66856267d76.png" alt=""></p><ul><li>选择创建环境【Generate new】，选择【Conda】，自己选定 Python 版本【Python version】，设置环境名【Name】。</li><li><strong>重点</strong> ：选择已经安装好的的 conda 路径【Path to conda】，填入 conda 安装路径的 <code>Scripts\conda.exe</code> 文件即可。</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/95f4e6cb3cbb8ac0497d4a28c0365f17.png" alt=""></p><p>之后 PyCharm 会通过我们安装的 conda 进行创建，新环境也会安装在之前配置的路径中，方便后续管理。而且，此时环境名也可以自动被 PyCharm 识别。</p>]]></content>
    
    
    <summary type="html">利用 conda 更为轻便的搭建虚拟环境，但会出现新建环境与 conda 的安装路径不同的问题，此时需要修改 .condarc 文件</summary>
    
    
    
    <category term="conda" scheme="https://blog.iskage.online/categories/conda/"/>
    
    
    <category term="conda" scheme="https://blog.iskage.online/tags/conda/"/>
    
    <category term="虚拟环境" scheme="https://blog.iskage.online/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（7）：向量化 广播机制 基本索引与切片</title>
    <link href="https://blog.iskage.online/posts/2271b16b.html"/>
    <id>https://blog.iskage.online/posts/2271b16b.html</id>
    <published>2025-02-14T16:32:00.000Z</published>
    <updated>2025-02-15T03:12:56.414Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（7）向量化与广播机制与基本索引与切片</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><h2 id="1-向量化">1 向量化</h2><p>向量化计算是一种特殊的并行计算方式。</p><ul><li>向量化计算：对不同的数据执行同样的一个或一批指令，或者把指令应用到一个数组或向量上，从而将多次循环操作变成一次计算。</li></ul><blockquote><p>例如：当计算乘积加和时，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup><mo>⋅</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_1, a_2, ..., a_n]^T \cdot [x_1, x_2, \cdots, x_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 替代 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mtext> </mtext><msub><mi>a</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n\ a_i x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 可以极大地提高计算效率。</p></blockquote><p>在 Python 中，<code>for</code> 循环是一种及其低效的计算方法，我们往往希望能通过向量化运算并行计算。</p><ul><li>例如：利用 <code>for</code> 循环和直接向量相加，耗时差距大约数百倍</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 循环完成加法操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_with_for</span>(<span class="params">x, y</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(x, y):</span><br><span class="line">        result.append(i + j)</span><br><span class="line">    <span class="keyword">return</span> torch.tensor(result)</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">100</span>)</span><br><span class="line">y = torch.randn(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">%timeit -n <span class="number">100</span> sum_with_for(x, y)  <span class="comment"># for 循环</span></span><br><span class="line">%timeit -n <span class="number">100</span> (x + y) <span class="comment"># 向量化计算</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739517601343.png" alt=""></p><p>综上可知，在进行计算时尽可能使用向量化计算，避免使用 <code>for</code> 循环。</p><h2 id="2-广播机制">2 广播机制</h2><p>广播法则（broadcast）：快速执行向量化计算的同时不会占用额外的内存 / 显存。</p><h3 id="2-1-NumPy-中的广播法则">2.1 NumPy 中的广播法则</h3><ul><li><ol><li>广播后形状一致：所有输入数组都与形状 (shape) 最大的数组看齐，形状不足的部分在前面加 1 补齐</li></ol></li><li><ol start="2"><li>存在相同大小的维度：两个数组要么在某一个维度的尺寸一致，要么其中一个数组在该维度的尺寸为 1 ，否则不符合广播法则的要求</li></ol></li><li><ol start="3"><li>通过复制补齐：如果输入数组的某个维度的尺寸为 1 ，那么计算时沿此维度复制扩充成目标的形状大小</li></ol></li></ul><h3 id="2-2-Pytorch-实现广播">2.2 Pytorch 实现广播</h3><p>PyTorch 支持自动广播法则，也可以手动设置：</p><ul><li><p><code>unsqueeze</code> <code>view</code> <code>tensor[None]</code> ： 为数据某一维度补 1 ，实现广播法则 1</p></li><li><p><code>expand</code> <code>expand_as</code> 重复数组：实现广播法则 3 (该操作不会复制整个数组，因此不会占用额外的空间)</p></li></ul><blockquote><p>【注意】<code>repeat</code> 可以实现与 <code>expand</code> 类似的功能： <code>expand</code> 是在已经存在的 Tensor 上创建一个新维度复制数据。故 <code>repeat</code> 会占用额外的空间</p></blockquote><h3 id="2-3-具体使用">2.3 具体使用</h3><h4 id="2-3-1-自动广播法则">2.3.1 自动广播法则</h4><p>以 <code>a = torch.ones(3, 2); b = torch.zeros(2, 3, 1)</code> 为例计算 <code>a + b</code> 的自动广播过程：</p><ul><li>第一步（法则 1）</li></ul><p>a 是 2 维的，b 是 3 维的。所以先在较小的 a 前面补 1 个维度 <code>a.unsqueeze(0) -&gt; a.shape = (1, 3, 2)</code></p><ul><li>第二步（法则 2）</li></ul><p>此时 <code>a.shape = (1, 3, 2)</code> 而 <code>b.shape = (2, 3, 1)</code> 二者在第二个维度形状一样，都为 3 。满足法则 2，存在相同形状的维度，可以进行广播</p><ul><li>第三步（法则 3）</li></ul><p>a 和 b 在第一和第三个维度的形状不一样， 利用广播法则扩展，按照最大的形状复杂。最终变为 <code>a.shape = b.shape = (2, 3, 2)</code> 即，a 在第一个维度复制，b 在第三个维度复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">(a + b).shape</span><br><span class="line"><span class="comment"># torch.Size([2, 3, 2])</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-详细计算">2.3.2 详细计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">b = torch.tensor([[[-<span class="number">1</span>], [-<span class="number">2</span>], [-<span class="number">3</span>]], [[-<span class="number">4</span>], [-<span class="number">5</span>], [-<span class="number">6</span>]]])</span><br><span class="line">a.shape, b.shape</span><br><span class="line"><span class="comment"># (torch.Size([3, 2]), torch.Size([2, 3, 1]))</span></span><br></pre></td></tr></table></figure><p>加和使用自动广播机制得到结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[[ 0,  1],</span></span><br><span class="line"><span class="string">         [ 1,  2],</span></span><br><span class="line"><span class="string">         [ 2,  3]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        [[-3, -2],</span></span><br><span class="line"><span class="string">         [-2, -1],</span></span><br><span class="line"><span class="string">         [-1,  0]]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>具体 <code>a</code> 的广播结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a =</span><br><span class="line">[</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">].shape = (<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># -(broadcast)-&gt; </span></span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>具体 <code>b</code> 的广播结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">b = </span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">1</span>],</span><br><span class="line">        [-<span class="number">2</span>],</span><br><span class="line">        [-<span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">4</span>],</span><br><span class="line">        [-<span class="number">5</span>],</span><br><span class="line">        [-<span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># -(broadcast)-&gt; </span></span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">1</span>, -<span class="number">1</span>],</span><br><span class="line">        [-<span class="number">2</span>, -<span class="number">2</span>],</span><br><span class="line">        [-<span class="number">3</span>, -<span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [-<span class="number">4</span>, -<span class="number">4</span>],</span><br><span class="line">        [-<span class="number">5</span>, -<span class="number">5</span>],</span><br><span class="line">        [-<span class="number">6</span>, -<span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>所以计算过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a + b =</span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span> - <span class="number">1</span>, <span class="number">2</span> - <span class="number">1</span>],</span><br><span class="line">        [<span class="number">3</span> - <span class="number">2</span>, <span class="number">4</span> - <span class="number">2</span>],</span><br><span class="line">        [<span class="number">5</span> - <span class="number">3</span>, <span class="number">6</span> - <span class="number">3</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [<span class="number">1</span> - <span class="number">4</span>, <span class="number">2</span> - <span class="number">4</span>],</span><br><span class="line">        [<span class="number">3</span> - <span class="number">5</span>, <span class="number">4</span> - <span class="number">5</span>],</span><br><span class="line">        [<span class="number">5</span> - <span class="number">6</span>, <span class="number">6</span> - <span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">].shape = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="2-3-3-repeat-复制占用额外空间">2.3.3 repeat 复制占用额外空间</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较 expand 和 repeat 的内存占用情况</span></span><br><span class="line">a = torch.ones(<span class="number">1</span>, <span class="number">3</span>) <span class="comment"># shape = (1, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(a.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 3 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expand 不额外占用内存，只返回一个新的视图</span></span><br><span class="line">b = a.expand(<span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># shape = (3, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(b.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 3 &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># repeat 复制了原始张量</span></span><br><span class="line">c = a.repeat(<span class="number">3</span>, <span class="number">3</span>)  <span class="comment"># shape = (3, 3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(c.storage().size()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 27 &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-4-手动广播">2.3.4 手动广播</h4><p>可以先扩展成相同维度数，再扩展成相同形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动广播</span></span><br><span class="line">a = torch.ones(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.zeros(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. unsqueeze + expand</span></span><br><span class="line">a.unsqueeze(<span class="number">0</span>).expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. view + expand</span></span><br><span class="line">a.view(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>).expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. None + expand 【推荐】</span></span><br><span class="line">a[<span class="literal">None</span>, :, :].expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>) + b.expand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="3-基本索引与切片">3 基本索引与切片</h2><p>Pytorch 的基本索引与切片与 Numpy 类似，例如：</p><ul><li><code>元组序列</code> ：在索引中直接使用一个元组序列对 Tensor 中数据的具体位置进行定位，也可以直接使用数字，即去除元组括号</li><li><code>切片对象</code> ：切片形如<code>[start:end:step]</code>，对一个维度进行全选时可以直接使用 <code>:</code></li><li><code>...</code> ：在索引中常用省略号来代表一个或多个维度的切片</li><li><code>None</code> ：表示增加一个维度</li></ul><h3 id="3-1-元组序列">3.1 元组序列</h3><p>使用 <code>tensor[x, x, x]</code> 或 <code>tensor[(x, x, x)]</code> 索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = torch.Tensor([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>)]).view(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">[ 0.,  1.,  2.,  3.],</span></span><br><span class="line"><span class="string">[ 4.,  5.,  6.,  7.],</span></span><br><span class="line"><span class="string">[ 8.,  9., 10., 11.]],</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">    [12., 13., 14., 15.],</span></span><br><span class="line"><span class="string">    [16., 17., 18., 19.],</span></span><br><span class="line"><span class="string">    [20., 21., 22., 23.]</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取位置 [0, 1, 2] 的元素 </span></span><br><span class="line"><span class="comment"># 等价于 a[(0, 1, 2)]</span></span><br><span class="line">a[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor(6.)</span></span><br><span class="line"><span class="string"># (第一维度形状 2 的第 0 个, 第二维度形状 3 的第 1 个, 第三维度形状 4 的第 2 个) 所以为 6.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第三个维度全取</span></span><br><span class="line"><span class="comment"># 等价于 a[(1, 1)]，a[(1, 1, )]，a[1, 1]</span></span><br><span class="line">a[<span class="number">1</span>, <span class="number">1</span>, :]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([16., 17., 18., 19.])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-和-运算符">3.2 <code>...</code> 和 <code>:</code> 运算符</h3><ul><li><code>:</code> ：使用格式 <code>[start:end:step]</code> 。单独使用 <code>:</code> 代表这个维度全取，<code>start</code> 和 <code>end</code> 为空分别表示从头开始和一直到结束，<code>step</code> 的默认值是 1</li><li><code>...</code> ：用于省略任意多个维度，可以用在切片的中间，也可以用在首尾</li></ul><h4 id="3-2-1-运算符代表全取">3.2.1 <code>:</code> 运算符代表全取</h4><p>常见格式 <code>tensor[:, :, start:end:step]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = torch.rand(<span class="number">64</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br><span class="line"></span><br><span class="line">a[:, :, <span class="number">0</span>:<span class="number">224</span>:<span class="number">4</span>, :].shape <span class="comment"># 第一、二、四维度全取，第三个维度取 0 到 223 间隔 4 个一取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略 start 和 end 代表整个维度</span></span><br><span class="line">a[:, :, ::<span class="number">4</span>, :].shape  <span class="comment"># 第一、二、四维度全取，第三个维度间隔 4 个一取，从开始取到结尾</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">均为</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 56, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-代替多个维度">3.2.2 <code>...</code> 代替多个维度</h4><p>若 <code>a.shape = (64, 3, 224, 224)</code> 使用 <code>a[..., ::4, :]</code> 代表第一、二维度均取，相当于用 <code>a[:, :, ::4, :]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 ... 代替一个或多个维度，建议一个索引中只使用一次</span></span><br><span class="line"></span><br><span class="line">a[..., ::<span class="number">4</span>, :].shape <span class="comment"># 第一、二维度都取，用 ... 替代了 :, :,</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 56, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>【建议】<code>...</code> 在一个索引里只出现一次，否则会出现难以匹配</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a[..., ::<span class="number">4</span>, ...].shape  <span class="comment"># 如果将最后一个维度也改为 ... 那么在匹配维度时将混乱出错</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([64, 3, 224, 56])  此处第一个 ... 代表了第一、二、三维度，而第二个 ... 没有匹配</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-None-索引">3.3 None 索引</h3><p><code>None</code> 索引可以简单地理解为维度的扩展，在广播法则用于补充维度。即相当于 <code>unsqueeze()</code> 函数。不过与 <code>unsqueeze()</code> 相比，使用 <code>None</code> 可以更为直观，因为它直接在索引中表示了扩展的维度。</p><blockquote><p>简单而言，【推荐】使用 <code>None</code> 来扩展维度</p></blockquote><ul><li>增加一个维度</li></ul><p>在增加一个维度时，<code>None</code> 的优势并不明显</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.unsqueeze(<span class="number">0</span>).shape)  <span class="comment"># 使用 unsqueeze 在第 0 位置补充维度</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="literal">None</span>, ...].shape)  <span class="comment"># 直接指定 0 号位置补充维度 (... 代表后面所有维度)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 224, 224])</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 224, 224])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ul><li>增加多个维度</li></ul><p>如果要增加多个维度，则需要多次 <code>unsqueeze()</code> 并且每次还要计算索引位置，十分复杂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为 [1, 3, 1, 3, 1, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">0</span>) <span class="comment"># [1, 3, 3, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">2</span>) <span class="comment"># [1, 3, 1, 3, 3]</span></span><br><span class="line">x = x.unsqueeze(<span class="number">4</span>) <span class="comment"># [1, 3, 1, 3, 1, 3]</span></span><br><span class="line"></span><br><span class="line">x.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 1, 3, 1, 3])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>若使用 <code>None</code> 直接指定维度位置，则方便很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变为 [1, 3, 1, 3, 1, 3]</span></span><br><span class="line">x = x[<span class="literal">None</span>, :, <span class="literal">None</span>, :, <span class="literal">None</span>, :]</span><br><span class="line"></span><br><span class="line">x.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([1, 3, 1, 3, 1, 3])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-综合使用">3.4 综合使用</h3><p>【案例】计算批量 <code>batch_size = 16</code> 的样本的矩阵乘法： <code>[256, 1] @ [1, 256]</code> 最后应该得到 <code>shape = [16, 256, 256]</code> （其中 <code>@</code> 代表矩阵乘法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">16</span> * <span class="number">256</span>).view(<span class="number">16</span>, <span class="number">256</span>)</span><br><span class="line">a.shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">torch.Size([16, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-1-手动扩展并计算">3.4.1 手动扩展并计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b = a.unsqueeze(<span class="number">1</span>)  <span class="comment"># b.shape = [16, 1, 256]</span></span><br><span class="line">c = b.transpose(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># c.shape = [16, 256, 1]</span></span><br><span class="line"><span class="built_in">print</span>((b @ c).shape)</span><br><span class="line"><span class="built_in">print</span>((c @ b).shape)  </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个 [16, 1, 256] @ [16, 256, 1] 得到的是 torch.Size([16, 1, 1])</span></span><br><span class="line"><span class="string">第二个 [16, 256, 1] @ [16, 1, 256] 得到的是 torch.Size([16, 256, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这很符合我们平常的矩阵计算原则，但不是我们希望看到的，因为相乘的顺序直接导致了结果形状的不同。</p><h4 id="3-4-2-自动广播技术">3.4.2 自动广播技术</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b = a[:, <span class="literal">None</span>, :]  <span class="comment"># b.shape = [16, 1, 256]</span></span><br><span class="line">c = a[:, :, <span class="literal">None</span>]  <span class="comment"># c.shape = [16, 256, 1]</span></span><br><span class="line"><span class="built_in">print</span>((b * c).shape)</span><br><span class="line"><span class="built_in">print</span>((c * b).shape)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">两个结果均为</span></span><br><span class="line"><span class="string">torch.Size([16, 256, 256])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>通过广播机制：形如 <code>[16, 1, 256]</code> 与 <code>[16, 256, 1]</code> 相乘时，首先因为通过 <code>None</code> 扩展了，故维度相同（<em>满足法则一</em>）；其次存在有形状的维度，第一个维度均为 <code>16</code> （<em>满足法则二</em>）；最后相乘时，对形状 <code>1</code> 进行复制，复制到 <code>256</code> 再与同维度的数相乘（<em>使用法则三</em>）</p><p>所以，通过广播机制，得到的结果是相同的，无需考虑顺序问题【推荐】</p><blockquote><p>Pytorch 的张量 Tensor 在进行乘法时：</p><ul><li>维度、形状不同：检查是否能进行广播，从而计算</li><li>维度、形状均相同：直接进行逐元素计算，例如：</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 补充：逐元素计算</span></span><br><span class="line">a = torch.arange(<span class="number">16</span> * <span class="number">256</span>).view(<span class="number">16</span>, <span class="number">256</span>)  <span class="comment"># a.shape = [16, 256]</span></span><br><span class="line"></span><br><span class="line">(a * a).shape</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">和 a 相同，仍然是 </span></span><br><span class="line"><span class="string">[16, 256]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">向量化计算能显著提高计算效率，本文介绍 Pytorch 中对向量化的实现，包括了广播机制、基本的索引与切片。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（6）：GPU 加速：CUDA 的使用</title>
    <link href="https://blog.iskage.online/posts/a6d6e67c.html"/>
    <id>https://blog.iskage.online/posts/a6d6e67c.html</id>
    <published>2025-02-13T16:32:00.000Z</published>
    <updated>2025-02-13T12:25:55.958Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（6）GPU 加速：CUDA 的使用</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><p>使用 GPU 加速技术，可以大幅减少训练时间。Pytorch 中的 <code>Tensor</code> 张量和 <code>nn.Module</code> 类就分为 CPU 和 GPU 两种版本。一般使用 <code>.cuda()</code> 和 <code>.to(device)</code> 方法实现从 CPU 迁移到 GPU ，从设备迁移到设备。</p><blockquote><p>但 <code>Tensor</code> 和 <code>nn.Module</code> 使用 <code>.cuda()</code> 方法时返回的对象不同。</p><ul><li><code>Tensor.cuda()</code> 返回一个新对象，即拷贝了一份张量到 GPU ，之前的张量仍然储存在 CPU</li><li><code>nn.Module</code> 实例化后的 <code>module</code> 使用 <code>module.cuda()</code> 直接将所有数据推送到 GPU 不备份自己，即 <code>module.cuda()</code> 与 <code>module = module.cuda()</code> 等价</li></ul></blockquote><blockquote><p><code>.to(device)</code> 可以更灵活地在不同设备上迁移</p></blockquote><h2 id="1-cuda-方法">1 .cuda() 方法</h2><h3 id="1-1-张量-cuda-返回新的对象">1.1 张量 .cuda() 返回新的对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():  <span class="comment"># 检查 CUDA 是否可用</span></span><br><span class="line">    t_cuda = t.cuda()  <span class="comment"># 将张量 t 移动到 CUDA 设备</span></span><br><span class="line">    <span class="built_in">print</span>(t.is_cuda)</span><br><span class="line">    <span class="built_in">print</span>(t_cuda.is_cuda)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">False</span></span><br><span class="line">   <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p><code>.cuda()</code> 等价于 <code>.cuda(0)</code>  or <code>.cuda(device=0)</code> 迁移到第 0 块 GPU 上</p></blockquote><h3 id="1-2-module-cuda-返回自己">1.2 module.cuda() 返回自己</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">module = nn.Linear(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    module.cuda(device=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(module.weight.is_cuda)  <span class="comment"># True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>迁移到 GPU 本质都是对张量 Tensor 做变换，所以对于模型 module ，也是其权重等参数进行迁移</p></blockquote><h2 id="2-to-device-方法">2 .to(device) 方法</h2><p><code>.to(device)</code> 方法可以指定设备</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用.to方法，将 Tensor 转移至第 0 块GPU上</span></span><br><span class="line">t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    t_cuda = t.to(<span class="string">&#x27;cuda:0&#x27;</span>)  <span class="comment"># device: &#x27;cuda:0&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(t_cuda.is_cuda)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no CUDA&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="3-损失函数迁移到-GPU">3 损失函数迁移到 GPU</h2><p>大部分的损失函数都属于 <code>nn.Module</code> ，在使用 GPU 时，建议使用 <code>.cuda</code> 或 <code>.to</code> 迁移到 GPU 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    <span class="comment"># 以交叉熵损失函数为例</span></span><br><span class="line">    criterion = torch.nn.CrossEntropyLoss(weight=torch.Tensor([<span class="number">1</span>, <span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 张量 Tensor 迁移到 GPU</span></span><br><span class="line">    inputs = torch.randn(<span class="number">4</span>, <span class="number">2</span>).cuda()</span><br><span class="line">    target = torch.Tensor([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]).long().cuda()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># loss = criterion(input, target)  # 报错：计算损失函数的参数为迁移到 GPU</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正确：迁移损失函数</span></span><br><span class="line">    criterion.cuda()</span><br><span class="line">    loss = criterion(inputs, target)</span><br><span class="line">    <span class="built_in">print</span>(criterion._buffers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Out]: OrderedDict([(<span class="string">&#x27;weight&#x27;</span>, tensor([<span class="number">1.</span>, <span class="number">3.</span>], device=<span class="string">&#x27;cuda:0&#x27;</span>))])</span><br></pre></td></tr></table></figure><h2 id="4-torch-cuda-device-指定默认设备">4 torch.cuda.device() 指定默认设备</h2><p>使用 <code>torch.cuda.device()</code> 指定默认设备，则不需要每次调用 <code>.cuda</code> 或 <code>.to</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定默认使用GPU &quot;cuda:0&quot;</span></span><br><span class="line"><span class="keyword">with</span> torch.cuda.device(<span class="number">0</span>):</span><br><span class="line">    <span class="comment"># 在 GPU 上构建Tensor</span></span><br><span class="line">    a = torch.cuda.FloatTensor(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 Tensor 转移至 GPU</span></span><br><span class="line">    b = torch.FloatTensor(<span class="number">2</span>, <span class="number">3</span>).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(a.get_device)</span><br><span class="line">    <span class="built_in">print</span>(b.get_device)</span><br><span class="line"></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c.get_device)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C70C59CC0</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C04443930</span>&gt;</span><br><span class="line">&lt;built-<span class="keyword">in</span> method get_device of Tensor <span class="built_in">object</span> at <span class="number">0x0000019C04441360</span>&gt;</span><br></pre></td></tr></table></figure><p>或者使用 <code>torch.set_default_tensor_type()</code> 方法，指定张量类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">torch.set_default_tensor_type(<span class="string">&#x27;torch.cuda.FloatTensor&#x27;</span>) <span class="comment"># 指定默认 Tensor 的类型为GPU上的FloatTensor</span></span><br><span class="line">a = torch.ones(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a.is_cuda)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">torch.set_default_tensor_type(<span class="string">&#x27;torch.FloatTensor&#x27;</span>) <span class="comment"># 恢复默认</span></span><br></pre></td></tr></table></figure><h2 id="5-多-GPU-操作">5 多 GPU 操作</h2><p>多个 GPU 方便快捷地指定迁移设备。</p><h3 id="5-1-方法一：调用-torch-cuda-set-device">5.1 方法一：调用 <code>torch.cuda.set_device()</code></h3><p>例如：指定先调用 <code>torch.cuda.set_device(1)</code> 指定默认使用 GPU “cuda:1” ，后续的 <code>.cuda()</code> 都无需更改，切换 GPU 只需修改这一行代码</p><h3 id="5-2-方法二：设置环境变量-CUDA-VISIBLE-DEVICES">5.2 方法二：设置环境变量 <code>CUDA_VISIBLE_DEVICES</code></h3><p>例如当 <code>CUDA_VISIBLE_DEVICE=1</code> 时，代表优先使用 GPU “cuda:1” 而不是 GPU “cuda:0” 。此时调用<code>tensor.cuda()</code> 会将Tensor转移至 GPU “cuda:1”</p><p><code>CUDA_VISIBLE_DEVICES</code> 还可以指定多个 GPU 。例如 <code>CUDA_VISIBLE_DEVICES=0,2,3</code> 代表按照 GPU “cuda:0”, “cuda:2”, “cuda:3” 的顺序使用 GPU 。此时 <code>cuda(0)</code> 迁移到 GPU “cuda:0” ，而 <code>.cuda(1)</code> 迁移到 GPU “cuda:2” ，<code>.cuda(2)</code> 迁移到 GPU “cuda:3” 。</p><h3 id="5-3-设置-CUDA-VISIBLE-DEVICES-的方法：">5.3 设置 <code>CUDA_VISIBLE_DEVICES</code> 的方法：</h3><ul><li>法一：命令行中执行 <code>CUDA_VISIBLE_DEVICES=0,1 python main.py</code> 来运行主程序</li><li>法二：程序中编写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="string">&#x27;0,1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>法三：IPython 或者 Jupyter notebook 中（即 <code>.ipynb</code> 文件），则可以使用魔法方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%env CUDA_VISIBLE_DEVICES=<span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="6-CPU-与-GPU-并存">6 CPU 与 GPU 并存</h2><p>考虑到不同电脑可能会有差异，例如当遇到无 GPU 的主机时，容易出现不兼容。（例如：无法迁移到 GPU），所以建议判断是否存在 GPU ，再迁移数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【推荐】如果用户具有 GPU 设备，那么使用GPU，否则使用CPU</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure><p>确定了设备之后，再迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x_to = x.to(device)</span><br><span class="line"><span class="built_in">print</span>(x_to.device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># device(type=&#x27;cuda&#x27;, index=0)</span></span><br></pre></td></tr></table></figure><h2 id="7-张量指定设备">7 张量指定设备</h2><h3 id="7-1-创建张量时指定设备">7.1 创建张量时指定设备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">x_cpu = torch.empty(<span class="number">2</span>, device=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(x_cpu, x_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">x_gpu = torch.empty(<span class="number">2</span>, device=device)</span><br><span class="line"><span class="built_in">print</span>(x_gpu, x_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="7-2-new-保留原属性">7.2 new_* 保留原属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># new_*() : 保留原 Tensor 的设备属性</span></span><br><span class="line"></span><br><span class="line">y_cpu = x_cpu.new_full((<span class="number">3</span>, <span class="number">4</span>), <span class="number">9</span>)  <span class="comment"># new_full : 用 9 填充形状 [3, 4] 的张量</span></span><br><span class="line"><span class="built_in">print</span>(y_cpu, y_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">y_gpu = x_gpu.new_zeros(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># new_zeros : 填充 0</span></span><br><span class="line"><span class="built_in">print</span>(y_gpu, y_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="7-3-like-保留原属性">7.3 *_like 保留原属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ones_like或zeros_like可以创建与原Tensor大小类别均相同的新Tensor</span></span><br><span class="line"></span><br><span class="line">z_cpu = torch.ones_like(x_cpu)  <span class="comment"># 大小相同，设备相同</span></span><br><span class="line"><span class="built_in">print</span>(z_cpu, z_cpu.is_cuda)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z_gpu = torch.zeros_like(x_gpu)  <span class="comment"># 大小相同，设备相同</span></span><br><span class="line"><span class="built_in">print</span>(z_gpu, z_gpu.is_cuda)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用 GPU 加速技术，可以大幅减少训练时间。Pytorch 中的 `Tensor` 张量和 `nn.Module` 类就分为 CPU 和 GPU 两种版本。一般使用 `.cuda()` 和 `.to(device)` 方法实现从 CPU 迁移到 GPU ，从设备迁移到设备。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（5）：可视化工具：TensorBoard</title>
    <link href="https://blog.iskage.online/posts/ef3d3872.html"/>
    <id>https://blog.iskage.online/posts/ef3d3872.html</id>
    <published>2025-02-13T06:32:00.000Z</published>
    <updated>2025-02-13T06:38:55.897Z</updated>
    
    <content type="html"><![CDATA[<h1>Pytorch 搭建神经网络（5）可视化工具：TensorBoard</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a></p><hr><p>为了更直观地、实时地观察训练过程，使用一些可视化工具实现训练过程的图形化表达，以便直观地展现结果。</p><p>TensorBoard ：只要用户保存的数据遵循相应的格式，TensorBoard 就能读取这些数据，进行可视化。</p><h2 id="1-下载-TensorBoard">1 下载 TensorBoard</h2><p>最新版本的 Pytorch 在下载时已经配置了 TensorBoard 无需特别下载。如果没有下载 TensorBoard 包需要先在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br></pre></td></tr></table></figure><h2 id="2-创建-logger-对象">2 创建 logger 对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter  <span class="comment"># 导入 tensorboard</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建 logger 对象，指定 log 文件的保存路径 log_dir=&#x27;logs&#x27;</span></span><br><span class="line">logger = SummaryWriter(log_dir=<span class="string">&#x27;logs&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>此时已经可以通过执行：<code>tensorboard --logdir=path</code> 来访问可视化界面。</p></li><li><p><code>path</code> 填入 logger 对象文件保存路径 例如此处的 <code>'./logs'</code> 或 <code>'log'</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在终端输入以查看结果</span></span><br><span class="line">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739386419718.png" alt=""></p><ul><li>打开浏览器，输入 <code>http://localhost:6006/</code> 查看</li></ul><blockquote><p>此时没有加入任何数据和图像，故界面如下</p></blockquote><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739386180385.png" alt=""></p><blockquote><p>或者在 notebook 中查看</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%load_ext tensorboard</span><br><span class="line">%tensorboard --logdir=<span class="string">&#x27;logs&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-添加数据-绘制图像">3 添加数据 &amp; 绘制图像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_scalar 记录标量</span></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/train&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/test&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739416635199.png" alt=""></p><blockquote><p>如果不中断 <code>tensorboard --logdir=logs</code> 则可以通过刷新网页来查看。或者可以关闭 (<code>CTRL + C</code>) 后重新启动。</p></blockquote><ul><li>结束后，删除之前的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clear any logs from previous runs</span></span><br><span class="line"><span class="built_in">rm</span> -rf ./logs/</span><br></pre></td></tr></table></figure><h2 id="4-下载数据集-MNIST">4 下载数据集 MNIST</h2><p>以 <code>MNIST</code> 手写识别体数据集为例，首先先下载。可以直接调用 <code>torchvision.datasets.MNIST</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))  <span class="comment"># MNIST 是灰度图，单通道</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;./data/&#x27; 指定下载的路径，download=True 表示下载，train=False 表示下载测试集，transform 指定变换</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>, transform=transform)</span><br></pre></td></tr></table></figure><p>如果无法下载可以前往官网手动下载：</p><p>训练集：<a href="https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz">train-images</a>, <a href="https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz">train-labels</a></p><p>测试集：<a href="https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz">t10k-images</a>, <a href="https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz">t10k-labels</a></p><p>然后放入目录 <code>MNIST</code> 下的 <code>raw</code> 文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── MNIST</span><br><span class="line">    └── raw</span><br><span class="line">        ├── t10k-images-idx3-ubyte.gz</span><br><span class="line">        ├── t10k-labels-idx1-ubyte.gz</span><br><span class="line">        ├── train-images-idx3-ubyte.gz</span><br><span class="line">        └── train-labels-idx1-ubyte.gz</span><br></pre></td></tr></table></figure><p>然后再运行之前的下载代码，将 <code>download=False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">False</span>, train=<span class="literal">False</span>, transform=transform)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data</span><br><span class="line">└── MNIST</span><br><span class="line">    └── raw</span><br><span class="line">        ├── t10k-images-idx3-ubyte</span><br><span class="line">        ├── t10k-images-idx3-ubyte.gz</span><br><span class="line">        ├── t10k-labels-idx1-ubyte</span><br><span class="line">        ├── t10k-labels-idx1-ubyte.gz</span><br><span class="line">        ├── train-images-idx3-ubyte</span><br><span class="line">        ├── train-images-idx3-ubyte.gz</span><br><span class="line">        ├── train-labels-idx1-ubyte</span><br><span class="line">        └── train-labels-idx1-ubyte.gz</span><br></pre></td></tr></table></figure><h2 id="5-常用函数">5 常用函数</h2><h3 id="5-1-add-scalar-添加标量">5.1 add_scalar 添加标量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_scalar(<span class="variable language_">self</span>, tag, scalar_value, global_step=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>tag</code> ：标题名</li><li><code>scalar_value</code> ：标量数值</li><li><code>global_step</code> ：迭代批次</li></ul><p>例如：从 [0, 99] 随机产生标量绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_scalar 记录标量</span></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/train&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br><span class="line">    logger.add_scalar(tag=<span class="string">&#x27;Loss/test&#x27;</span>, scalar_value=np.random.random(), global_step=n_iter)</span><br></pre></td></tr></table></figure><h3 id="5-2-add-image-显示图像">5.2 add_image 显示图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize(mean=(<span class="number">0.5</span>,), std=(<span class="number">0.5</span>,))  <span class="comment"># MNIST 是灰度图，单通道</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;./data/&#x27; 指定下载的路径，download=True 表示下载，train=False 表示下载测试集，transform 指定变换</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, shuffle=<span class="literal">True</span>, batch_size=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">images, labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataloader))</span><br><span class="line">grid = torchvision.utils.make_grid(images)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_image 显示图像</span></span><br><span class="line">logger.add_image(<span class="string">&#x27;images&#x27;</span>, grid, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">%load_ext tensorboard</span><br><span class="line">%tensorboard --logdir=<span class="string">&#x27;logs&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739418831074.png" alt=""></p><h3 id="5-3-add-graph-显示网络结构">5.3 add_graph 显示网络结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_size=<span class="number">28</span>, hidden_size=<span class="number">500</span>, num_classes=<span class="number">10</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(input_size, hidden_size)</span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(hidden_size, num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        out = <span class="variable language_">self</span>.relu(out)</span><br><span class="line">        out = <span class="variable language_">self</span>.fc2(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = myModel()</span><br><span class="line">logger.add_graph(model, images)  <span class="comment"># 代入具体的数值计算 torch.Size([16, 1, 28, 28])</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420352341.png" alt=""></p><h3 id="5-4-add-histogram-显示直方图">5.4 add_histogram 显示直方图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logger.add_histogram(<span class="string">&#x27;normal&#x27;</span>, np.random.normal(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1000</span>), global_step=<span class="number">1</span>)</span><br><span class="line">logger.add_histogram(<span class="string">&#x27;normal&#x27;</span>, np.random.normal(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1000</span>), global_step=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420726898.png" alt=""></p><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739420601056.png" alt=""></p><h3 id="5-5-add-embedding-可视化">5.5 add_embedding 可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 add_embedding 进行 embedding 可视化</span></span><br><span class="line">dataset = datasets.MNIST(<span class="string">&#x27;./data/&#x27;</span>, download=<span class="literal">True</span>, train=<span class="literal">False</span>)  <span class="comment"># PIL Image 对象可以可视化</span></span><br><span class="line">images = dataset.data[:<span class="number">100</span>].<span class="built_in">float</span>()  <span class="comment"># 提取前 100 张图像并转为浮点数类型</span></span><br><span class="line">label = dataset.targets[:<span class="number">100</span>]  <span class="comment"># 提取前 100 张图像的标签</span></span><br><span class="line">features = images.view(<span class="number">100</span>, <span class="number">28</span> * <span class="number">28</span>)  <span class="comment"># 将图像展平为 100 x 784 的矩阵</span></span><br><span class="line">logger.add_embedding(features, metadata=label, label_img=images.unsqueeze(<span class="number">1</span>))  <span class="comment"># 将嵌入数据记录到 TensorBoard</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">为了更直观地、实时地观察训练过程，使用一些可视化工具实现训练过程的图形化表达，以便直观地展现结果。本文以 Tensorboard 为例介绍深度学习里的可视化。</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>深度学习框架 Pytorch 深入学习（4）：数据处理 Dataset 和 Dataloader</title>
    <link href="https://blog.iskage.online/posts/bffdebd7.html"/>
    <id>https://blog.iskage.online/posts/bffdebd7.html</id>
    <published>2025-02-12T04:32:00.000Z</published>
    <updated>2025-02-12T04:22:36.431Z</updated>
    
    <content type="html"><![CDATA[<h1>数据处理 Dataset 和 Dataloader</h1><p>基于<a href="https://book.douban.com/subject/27624483/">《深度学习框架 Pytorch 入门与实践》陈云</a></p><p>参考 <a href="https://github.com/chenyuntc/pytorch-book">Github 的 pytorch-book 项目</a></p><p>笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><hr><p>本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的数据处理。相比于搭建已知的神经网络，对数据的处理更为复杂困难。【数据处理非常重要且困难！！】</p><p>Pytorch 针对数据处理，提供了两个重要的类 <code>Dataset</code> 和 <code>Dataloader</code></p><h2 id="1-Dataset-类">1 Dataset 类</h2><p>在 PyTorch 中，数据加载可以通过 <code>Dataset</code>类加载。如果要自定义的数据集，需要继承 <code>Dataset</code> 类，并且必须实现：</p><ul><li><code>__getitem__()</code> ：返回一条数据，或一个样本。<code>obj[index]</code> 等价于 <code>obj.__getitem__(index)</code></li><li><code>__len__()</code> ：返回样本量。<code>len(obj)</code> 等价于 <code>obj.__len__()</code></li></ul><h3 id="1-1-准备数据">1.1 准备数据</h3><p>以 <a href="https://www.kaggle.com/competitions/dogs-vs-cats">Kaggle 经典案例 “Dogs vs. Cats”</a> 的数据为例，构造数据集。有关数据下载，可以前往 <a href="https://www.kaggle.com/competitions/dogs-vs-cats/data">Kaggle 比赛官网下载</a> 。但完整数据集太大，可以下载部分图片，或者<a href="https://cloud-iskage.oss-cn-shanghai.aliyuncs.com/packages/cat_dog.zip">点击链接</a>下载我存储的小部分样本。或者去往来我的 GitHub 库中下载 <a href="https://github.com/isKage/pytorch-notes">github.com/isKage/pytorch-notes</a>。</p><p>Kaggle 比赛 “Dogs vs. Cats” 是一个分类问题：判断一张图片是狗还是猫。在该问题中，所有图片都存放在一个文件夹下，可以根据文件名的前缀得到它们的标签值（ <code>dog</code> 或者 <code>cat</code> ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog/</span><br><span class="line">data/cat_dog/</span><br><span class="line">├── cat.13.jpg</span><br><span class="line">├── cat.14.jpg</span><br><span class="line">├── cat.16.jpg</span><br><span class="line">├── cat.18.jpg</span><br><span class="line">├── dog.2.jpg</span><br><span class="line">├── dog.3.jpg</span><br><span class="line">├── dog.4.jpg</span><br><span class="line">└── dog.5.jpg</span><br></pre></td></tr></table></figure><h3 id="1-2-自定义数据集">1.2 自定义数据集</h3><ul><li>导入必要的库：<code>PIL</code> 库用于读取图片，<code>os</code> 库用于给出路径（以免不同电脑路径组合方式不同）</li><li>自定义数据集：继承 <code>torch.utils.data</code> 的 <code>Dataset</code> 类</li><li>编写 <code>__init__</code> 方法：先初始化图片路径，但暂时不读取图片</li><li>编写 <code>__getitem__</code> 方法：真正读取图片，并定义标签，并转为张量</li><li>编写 <code>__len()__</code> 方法：返回样本量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogCat</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root</span>):</span><br><span class="line">        imgs = os.listdir(root)  <span class="comment"># 所有图片前的绝对路径表</span></span><br><span class="line">        <span class="comment"># 不实际加载图片，只指定路径，当调用 __getitem__ 时才读取图片，以节省内存</span></span><br><span class="line">        <span class="variable language_">self</span>.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_path = <span class="variable language_">self</span>.imgs[index]</span><br><span class="line">        <span class="comment"># 标签设置：dog -&gt; 1， cat -&gt; 0</span></span><br><span class="line">        label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> img_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 真正读取图片</span></span><br><span class="line">        pil_img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        array = np.asarray(pil_img)</span><br><span class="line">        data = torch.tensor(array)  <span class="comment"># 转为张量</span></span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.imgs)  <span class="comment"># 返回样本数</span></span><br></pre></td></tr></table></figure><h3 id="1-3-读取数据集">1.3 读取数据集</h3><p>实例化自定义的数据集 <code>DogCat</code> ，因为 <code>__init__(self, root)</code> 初始化方法里需要参数图片存储的文件夹/路径 <code>root</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>)  <span class="comment"># 图片存储在 ./data/cat_dog/ 文件夹内</span></span><br></pre></td></tr></table></figure><h3 id="1-4-读取数据集里的数据">1.4 读取数据集里的数据</h3><p>使用方法 <code>__getitem__</code> 获取真实数据（此处为图片）<code>img</code> 和标签 <code>label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取第一个数据，包含标签和图片</span></span><br><span class="line">img, label = dataset[<span class="number">0</span>]  <span class="comment"># 相当于 dataset.__getitem__(0)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># torch.Size([374, 500, 3]) 说明图片已转为张量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(label)</span><br><span class="line"><span class="comment"># 0 说明是 cat</span></span><br></pre></td></tr></table></figure><p>逐个批量读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tensor&#x27;s shape: &#123;&#125;, label: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(img.shape, label))</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739264855512.png" alt=""></p><blockquote><p>但是，我们注意到，图片大小形状不一致，且没有进行标准化，所以需要数据预处理</p></blockquote><h2 id="2-torchvision-库">2 torchvision 库</h2><p>Pytorch 的 <code>torchvision</code> 包提供了许多工具用来处理计算机视觉问题。其中 <code>torchvison.transforms</code> 可以方便快速地对图像进行操作。</p><h3 id="2-1-torchvison-transforms-的常见操作">2.1 torchvison.transforms 的常见操作</h3><p>可以去往 <a href="https://pytorch.org/vision/stable/transforms.html">Pytorch 官网</a> 查询具体使用。</p><h4 id="2-1-1-仅支持-PIL-Image">2.1.1 仅支持 PIL Image</h4><ul><li><code>RandomChoice</code> ：在一系列 transforms 操作中随机执行一个操作</li><li><code>RandomOrder</code> ：以随意顺序执行一系列 transforms 操作</li></ul><h4 id="2-1-2-仅支持-Tensor">2.1.2 仅支持 Tensor</h4><ul><li><code>Normalize</code> ：标准化，即减去均值，除以标准差</li><li><code>RandomErasing</code> ：随机擦除 Tensor 中一个矩形区域的像素。</li><li><code>ConvertImageDtype</code> ：将 Tensor 转换为指定的类型，并进行相应的缩放</li></ul><h4 id="2-1-3-PIL-Image-与-Tensor-相互转换">2.1.3  PIL Image 与 Tensor 相互转换</h4><ul><li><code>ToTensor</code> ：将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo>×</mo><mi>W</mi><mo>×</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">H \times W \times C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span> 形状的 <code>PIL Image</code> 对象转换成形状为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>×</mo><mi>H</mi><mo>×</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">C \times H \times W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> 的 <code>Tensor</code> 。同时会自动将像素值从 [0, 255] 归一化至 [0, 1] （C 位通道数）</li><li><code>ToPILImage</code> ：将 <code>Tensor</code> 转为 <code>PIL Image</code> 对象</li></ul><h4 id="2-1-4-既支持-PIL-Image-，又支持-Tensor">2.1.4 既支持 PIL Image ，又支持 Tensor</h4><ul><li><code>Resize</code> ：调整图片尺寸</li><li><code>CenterCrop</code> <code>RandomCrop</code> <code>RandomResizedCrop</code> <code>FiveCrop</code> ： 按照不同规则对图像进行裁剪</li><li><code>RandomAffine</code> ：随机进行仿射变换，保持图像中心不变</li><li><code>RandomGrayscale</code> ：随机将图像变为灰度图</li><li><code>RandomHorizontalFlip</code> <code>RandomVerticalFlip</code> <code>RandomRotation</code> ：随机水平翻转、垂直翻转、旋转图像</li></ul><blockquote><p>如果需要对图片进行多个操作，可以通过 <code>transforms.Compose</code> 将这些操作拼接起来。</p></blockquote><blockquote><p>注意，这些操作定义后以对象的形式存在，真正使用时需要调用 <code>__call__</code> 方法。例如，要将图片的大小调整至 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>×</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">10 \times 10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span> ，首先应构建操作 <code>trans = Resize((10, 10))</code> ，然后调用 <code>trans(img)</code></p></blockquote><h3 id="2-2-transforms-操作">2.2 transforms 操作</h3><h4 id="2-2-1-定义变化操作序列">2.2.1 定义变化操作序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变换操作</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">224</span>),  <span class="comment"># 缩放图片 (PIL Image), 保持长宽比不变, 使最短边缩放到 224 像素</span></span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从图片中间切出 224x224 的图片</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图片 (PIL Image) 转成 Tensor , 自动归一化至 [0, 1]</span></span><br><span class="line">    transforms.Normalize(mean=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>], std=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>])  <span class="comment"># 标准化至 [-1, 1] , 规定均值和标准差 , 因为图片为 3 维</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="2-2-2-自定义数据集中加入变化与否参数">2.2.2 自定义数据集中加入变化与否参数</h4><p>将有关变换序列参数加入初始化方法里，同时在 <code>__getitem()__</code> 里加入变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加参数 transform 传入变化序列</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DogCat</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root, transform=<span class="literal">None</span></span>):</span><br><span class="line">        imgs = os.listdir(root)</span><br><span class="line">        <span class="variable language_">self</span>.imgs = [os.path.join(root, img) <span class="keyword">for</span> img <span class="keyword">in</span> imgs]</span><br><span class="line">        <span class="variable language_">self</span>.transform = transform  <span class="comment"># 初始化 transforms 操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img_path = <span class="variable language_">self</span>.imgs[index]</span><br><span class="line">        <span class="comment"># 标签设置：dog -&gt; 1， cat -&gt; 0</span></span><br><span class="line">        label = <span class="number">1</span> <span class="keyword">if</span> <span class="string">&#x27;dog&#x27;</span> <span class="keyword">in</span> img_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 真正读取图片</span></span><br><span class="line">        data = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.transform:</span><br><span class="line">            data = <span class="variable language_">self</span>.transform(data)  <span class="comment"># 直接进行 transform 变化</span></span><br><span class="line">        <span class="keyword">return</span> data, label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.imgs)  <span class="comment"># 返回样本数</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-实例化数据集">2.2.3 实例化数据集</h4><p>传入变化序列 <code>transform=transform</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据集</span></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>, transform=transform)  <span class="comment"># 使用 transform 进行变换</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-展示结果">2.2.4 展示结果</h4><p>可以发现数据格式统一成了我们需要的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img, label <span class="keyword">in</span> dataset:</span><br><span class="line">    <span class="built_in">print</span>(img.shape, label)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739276735119.png" alt=""></p><blockquote><p>注意：自定义数据集需要考虑到当 <code>transform = None</code> 时的情形。在上述定义的数据集里，当默认<code>transform = None</code> 时不会报错，此时 <code>img</code> 是 <code>PIL Image</code> 对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">no_transform = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>)</span><br><span class="line">img, label = no_transform[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739276821066.png" alt=""></p><h3 id="2-3-torchvision-封装的常见数据集">2.3 torchvision 封装的常见数据集</h3><p><code>torchvision</code> 封装了常用的 dataset ，例如：<code>CIFAR-10</code>、<code>ImageNet</code>、<code>COCO</code>、<code>MNIST</code>、<code>LSUN</code> 等数据集。可以通过诸如 <code>torchvision.datasets.CIFAR10</code> 的命令进行调用，具体使用方法参考<a href="https://pytorch.org/vision/stable/datasets.html">官方文档</a>。</p><h4 id="2-3-1-ImageFolder-结构">2.3.1 ImageFolder 结构</h4><p>常见数据集结构 <code>ImageFolder</code> ：数据集假设所有的图片按文件夹保存，每个文件夹下存储同一个类别的图片，文件夹名为类名。即需要目录结构为：【可将上文的 cat_dog 数据集自主修改为符合 ImageFolder 要求的目录结构】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog_imagefolder/</span><br><span class="line">data/cat_dog_imagefolder/</span><br><span class="line">├── <span class="built_in">cat</span></span><br><span class="line">│   ├── cat.13.jpg</span><br><span class="line">│   ├── cat.14.jpg</span><br><span class="line">│   ├── cat.16.jpg</span><br><span class="line">│   └── cat.18.jpg</span><br><span class="line">└── dog</span><br><span class="line">    ├── dog.2.jpg</span><br><span class="line">    ├── dog.3.jpg</span><br><span class="line">    ├── dog.4.jpg</span><br><span class="line">    └── dog.5.jpg</span><br></pre></td></tr></table></figure><ul><li><code>ImageFolder</code> 类的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ImageFolder(root, transform=<span class="literal">None</span>, target_transform=<span class="literal">None</span>, loader=default_loader, is_valid_file=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">- root</span><br><span class="line">root 路径目录下存放着不同类别的文件夹</span><br><span class="line"></span><br><span class="line">- transform</span><br><span class="line">对 PIL Image 进行相关操作，transform 的输入是使用 loader 读取图片的返回对象 (一般是 PIL Image)</span><br><span class="line"></span><br><span class="line">- target_transform</span><br><span class="line">对 label 的操作</span><br><span class="line"></span><br><span class="line">- loader</span><br><span class="line">指定加载图片的函数，默认操作是读取为 PIL Image 对象</span><br><span class="line"></span><br><span class="line">- is_valid_file</span><br><span class="line">获取图像路径，检查文件的有效性</span><br></pre></td></tr></table></figure><blockquote><p><code>target_transform</code> 对标签的操作默认，则会返回一个字典。形如 <code>&#123;文件夹1名: 0, 文件夹2名: 1, 文件夹3名: 2, ...&#125;</code> 的字典，每个类的文件夹名和数字对应。可以通过 <code>.class_to_idx</code> 查看对应关系。</p></blockquote><h4 id="2-3-2-ImageFolder-创建数据集-Dataset">2.3.2 ImageFolder 创建数据集 Dataset</h4><ul><li>实例化数据集（未指定变换，直接读取 PIL Image）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> ImageFolder</span><br><span class="line">dataset = ImageFolder(<span class="string">&#x27;./data/cat_dog_imagefolder&#x27;</span>)</span><br></pre></td></tr></table></figure><p>获取一下标签 <code>label</code> 对应关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset.class_to_idx</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;cat&#x27;: 0, &#x27;dog&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><p>于是我们知道：<code>0</code> 对应 <code>'cat'</code> ，<code>1</code> 对应 <code>'dog'</code></p><ul><li>查看数据集：返回图片路径和对应的标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset.imgs</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739278461256.png" alt=""></p><ul><li>查看具体数据（图片）：因为没有进行操作，默认读取的是 PIL Image 对象</li></ul><p><code>dataset[0]</code> 获取数据集第 0 个样本，包括 <code>img</code> 和 <code>label</code> ，其中第 0 个是 <code>img</code> ，第 1 个是 <code>label</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset.__getitem__(<span class="number">0</span>)[<span class="number">0</span>]  <span class="comment"># 等价于 dataset[0][0], 获取 img</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739279152983.png" alt=""></p><ul><li>获取标签，返回类别名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 辅助返回类别名，不重要</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_class_by_idx</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="keyword">for</span> key_class, val_idx <span class="keyword">in</span> dataset.class_to_idx.items():</span><br><span class="line">        <span class="keyword">if</span> val_idx == idx:</span><br><span class="line">            <span class="keyword">return</span> key_class</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Not found&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签 dataset[0][1]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The label is: &#123;&#125; meaning &#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    dataset.__getitem__(<span class="number">0</span>)[<span class="number">1</span>],</span><br><span class="line">    get_class_by_idx(dataset[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; [Out]: The label is: 0 meaning cat &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>【加入变换】：一般情况下，我们会加入变换 transforms</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入变换</span></span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.Resize(<span class="number">224</span>),  <span class="comment"># 缩放图片 (PIL Image), 保持长宽比不变, 使最短边缩放到 224 像素</span></span><br><span class="line">    transforms.CenterCrop(<span class="number">224</span>),  <span class="comment"># 从图片中间切出 224x224 的图片</span></span><br><span class="line">    transforms.ToTensor(),  <span class="comment"># 将图片 (PIL Image) 转成 Tensor , 自动归一化至 [0, 1]</span></span><br><span class="line">    transforms.Normalize(mean=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>], std=[<span class="number">.5</span>, <span class="number">.5</span>, <span class="number">.5</span>])  <span class="comment"># 标准化至 [-1, 1] , 规定均值和标准差 , 因为图片为 3 维</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新构造数据集</span></span><br><span class="line">dataset = ImageFolder(<span class="string">&#x27;./data/cat_dog_imagefolder&#x27;</span>, transform=transform)</span><br></pre></td></tr></table></figure><p>结果：查看图片张量形状，因为神经网络中一般图像的通道数在第一个维度，而 PIL Image 类型通道数在第三个维度，所以变换十分必要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataset.__getitem__(<span class="number">0</span>)[<span class="number">0</span>].shape  <span class="comment"># or dataset[0][0].shape</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; [Out]: torch.Size([3, 224, 224]) &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>也正是因为 Tensor 和 PIL Image 对通道数位置要求的不同，二者转换往往需要多一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">to_img = transforms.ToPILImage()</span><br><span class="line">to_img(dataset[<span class="number">0</span>][<span class="number">0</span>] * <span class="number">0.5</span> + <span class="number">0.5</span>)  <span class="comment"># 因为变换指定了均值和方差后进行了归一化，所以要返归一化</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739279681882.png" alt=""></p><h2 id="2-DataLoader-类">2 DataLoader 类</h2><p>在训练神经网络时，一次处理的对象是一个 <code>batch</code> 的数据，同时还需要对一批数据进行打乱顺序和并行加速等操作。为此，PyTorch提供了 <code>DataLoader</code> 实现这些功能。</p><p><strong>参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataLoader(dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">False</span>, sampler=<span class="literal">None</span>,</span><br><span class="line">           batch_sampler=<span class="literal">None</span>, num_workers=<span class="number">0</span>, collate_fn=<span class="literal">None</span>,</span><br><span class="line">           pin_memory=<span class="literal">False</span>, drop_last=<span class="literal">False</span>, timeout=<span class="number">0</span>,</span><br><span class="line">           worker_init_fn=<span class="literal">None</span>, *, prefetch_factor=<span class="number">2</span>,</span><br><span class="line">           persistent_workers=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><code>dataset</code> : 数据集 Dataset 类</li><li><code>batch_size=1</code> :  批量 batch 的大小</li><li><code>shuffle=False</code> : 是否打乱数据顺序</li><li><code>sampler=None</code> : 用于从数据集中抽取样本的采样器，可以自定义采样策略</li><li><code>batch_sampler=None</code> : 定义如何批量抽取样本</li><li><code>num_workers=0</code> : 用多进程加载的进程数，0 代表不使用多进程</li><li><code>collate_fn=None</code> : 多样本拼接 batch 的方法，一般默认</li><li><code>pin_memory=False</code> : 是否将数据保存在 pin memory 区，pin memory 中的数据转移到 GPU 速度更快</li><li><code>drop_last=False</code> : Dataset 中的数据不一定被 batch_size 整除时，若 drop_last 为 True ，则将多出来的数据丢弃</li><li><code>timeout=0</code> : 进程读取数据的最大时间，若超时则丢弃数据</li><li><code>worker_init_fn=None</code> : 每个 worker 的初始化函数（num_workers=0 则无影响）</li><li><code>prefetch_factor=2</code> : 每个 worker 预先加载的样本数</li></ul><h3 id="2-1-Dataloader-的使用">2.1 Dataloader 的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataloader</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = DogCat(<span class="string">&#x27;./data/cat_dog/&#x27;</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">False</span>)  <span class="comment"># 加载 dataset, 批量大小为 3, 打乱顺序, 单进程, 不丢弃最后数据</span></span><br></pre></td></tr></table></figure><ul><li>每个 batch 数据形如 <code>torch.Size([3, 3, 224, 224])</code> ：第一个 3 代表批量 batch 大小，第二个 3 代表图片通道数，最后代表 224x224 的图片大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739329118058.png" alt=""></p><blockquote><p>最后一个批量为 2 是因为图片总共 8 张，而批量按 3 个数据一取，剩余 2 个数据</p></blockquote><ul><li>安装迭代器的方式取数据：dataloader 可以通过迭代器的方式取数据 <code>iter(Dataloader)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataiter = <span class="built_in">iter</span>(dataloader)</span><br><span class="line">imgs, labels = <span class="built_in">next</span>(dataiter)</span><br><span class="line"><span class="built_in">print</span>(imgs.shape)  <span class="comment"># torch.Size([3, 3, 224, 224])</span></span><br></pre></td></tr></table></figure><blockquote><p>迭代器 <code>iter()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 迭代器补充</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = <span class="built_in">iter</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(b)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(b)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h3 id="2-2-自定义-collate-fn-避免读取失败">2.2 自定义 collate_fn 避免读取失败</h3><p>若某个样本无法读取，此时利用 Dataset 类时， <code>__getitem__</code>函数中会抛出异常。</p><ul><li>例如：可手动创建一个新的文件夹，添加一个空文件命名为 <code>dog.fail.jpg</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree data/cat_dog_fail/</span><br><span class="line">data/cat_dog_fail/</span><br><span class="line">├── cat.13.jpg</span><br><span class="line">├── cat.14.jpg</span><br><span class="line">├── cat.16.jpg</span><br><span class="line">├── cat.18.jpg</span><br><span class="line">├── dog.2.jpg</span><br><span class="line">├── dog.3.jpg</span><br><span class="line">├── dog.4.jpg</span><br><span class="line">├── dog.5.jpg</span><br><span class="line">└── dog.fail.jpg</span><br></pre></td></tr></table></figure><p>此时如果仍然利用之前自定义的 Dataset 类 <code>DogCat</code> ，则会在后面真正读取数据时报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错 : UnidentifiedImageError: cannot identify image file</span></span><br><span class="line"><span class="comment"># for img, label in dataset:</span></span><br><span class="line"><span class="comment">#     print(img.shape, label)</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-解决方法一：返回-None">2.2.1 解决方法一：返回 None</h4><p>当读取失败时，返回 None ，然后自定义 <code>collate_fn</code> 让 Dataloader 加载时跳过</p><p>定义新的 Dataset 类，继承之前自定义的 <code>DogCat</code> ，尝试使用父类的 <code>__getitem__()</code> ，如果失败则返回 <code>(None, None)</code> 代表 <code>(数据, 标签)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NewDogCat</span>(<span class="title class_ inherited__">DogCat</span>):  <span class="comment"># 继承之前自定义的 Dataset 类 DogCat</span></span><br><span class="line">    <span class="comment"># 修改 __getitem__() 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 调用父类读取图片的方法 __getitem__() 等价于 DogCat.__getitem__(self, index)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># 数据=None, 标签=None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>自定义 <code>collate_fn</code> 解决 Dataloader 读取数据异常：collate_fn 的传入参数 batch 是一个列表，形如 <code>[(data1, label1), (data2, label2), ...]</code> 删去里面为空的元祖，然后采用 Dataloader 默认的拼接方式返回最终的批量数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data.dataloader <span class="keyword">import</span> default_collate  <span class="comment"># 导入 Dataloader 默认的拼接方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 collate_fn 函数，删去 None 值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_fail_sample</span>(<span class="params">batch</span>):</span><br><span class="line">    <span class="comment"># batch 是一个 list，每个元素是 dataset 的返回值，形如 (data, label)</span></span><br><span class="line">    batch = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> batch <span class="keyword">if</span> _[<span class="number">0</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]  <span class="comment"># 过滤为 None 的数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(batch) == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> torch.Tensor()  <span class="comment"># 如果整个数据集都是空的</span></span><br><span class="line">    <span class="keyword">return</span> default_collate(batch)  <span class="comment"># 用默认方式拼接过滤后的batch数据</span></span><br></pre></td></tr></table></figure><p>开始读取数据：实例化新的 dataset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset = NewDogCat(<span class="string">&#x27;data/cat_dog_fail/&#x27;</span>, transform=transform)</span><br><span class="line">dataset[<span class="number">5</span>] <span class="comment"># (None, None) 第 5 个读取了错误的图片</span></span><br></pre></td></tr></table></figure><p>Dataloader 读取数据：批量为 2 ，使用自定义 collate_fn 函数，单进程，打乱顺序，不丢弃最后数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataloader = DataLoader(dataset, <span class="number">2</span>, collate_fn=delete_fail_sample, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739330925980.png" alt=""></p><blockquote><p>此处有 2 个批量不统一：一个是由于有一个图片没有读取成功；另一个是因为总共 9 张图片，无法整除 2</p></blockquote><h4 id="2-2-2-解决方法二：随机读取正常数据-【推荐】">2.2.2 解决方法二：随机读取正常数据 【推荐】</h4><p>不再返回 <code>(None, None)</code> 而是随机返回其他正常数据，这样可以避免因读取失败带来的形状不统一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机读取数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewDogCat</span>(<span class="title class_ inherited__">DogCat</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            new_index = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>) - <span class="number">1</span>)  <span class="comment"># 随机返回一张正常数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>[new_index]</span><br></pre></td></tr></table></figure><p>Dataloader 读取数据时不再需要自定义 collate_fn</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataset = NewDogCat(<span class="string">&#x27;data/cat_dog_fail/&#x27;</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, <span class="number">2</span>, collate_fn=<span class="literal">None</span>, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> img_batch, label_batch <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="built_in">print</span>(img_batch.shape, label_batch.shape)</span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739331306790.png" alt=""></p><blockquote><p>此处唯一一个不统一形状是由于 9 不能被 2 整除，可以通过丢弃实现 <code>drop_last=True</code>）</p></blockquote><h3 id="2-3-随机采样">2.3 随机采样</h3><p>当 <code>DataLoader</code> 的 <code>shuffle=True</code> 时，会自动调用采样器 <code>RandomSampler</code> 打乱数据。默认的采样器是<code>SequentialSampler</code>，它会按顺序一个一个进行采样。除此之外，<code>WeightedRandomSampler</code> 也是一个很常见的采样器，它会根据每个样本的权重选取数据。</p><p><strong>参数</strong></p><ul><li><p><code>weights</code> ：每个样本的权重，权重越大的样本被选中的概率越大</p></li><li><p><code>num_samples</code> ：选取的样本总数，一般小于总数据量（可以大于）</p></li><li><p><code>replacement</code> （可选）：默认/建议为 True，即允许重复采样同一个数据。当为 True 时，此时就算总样本数不足 <code>num_samples</code> 也会依靠重复取样达到</p></li></ul><p><strong>使用案例</strong></p><ul><li>首先读取数据集，并设置权重列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataset = DogCat(<span class="string">&#x27;data/cat_dog/&#x27;</span>, transform=transform)  <span class="comment"># 总共 8 张图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权重：假设 cat 的图片被取出的概率是 dog 的概率的 2 倍</span></span><br><span class="line">weights = [<span class="number">2</span> <span class="keyword">if</span> label == <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> data, label <span class="keyword">in</span> dataset]</span><br><span class="line"><span class="comment"># 两类图片被取出的概率与 weights 的绝对大小无关，只和比值有关</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(weights)</span><br><span class="line"><span class="comment"># [2, 1, 1, 1, 1, 2, 2, 2] -&gt; cat (label=0) 设权重为 2 ; dog (label=1) 设权重为 1</span></span><br></pre></td></tr></table></figure><ul><li>设定取样样本总数为 9（大于总图片数 8）选择 <code>replacement=True</code> 允许重复取样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data.sampler <span class="keyword">import</span> WeightedRandomSampler</span><br><span class="line"></span><br><span class="line">sampler = WeightedRandomSampler(weights=weights, num_samples=<span class="number">9</span>, replacement=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, sampler=sampler)</span><br></pre></td></tr></table></figure><ul><li>结果：<code>cat (label=0)</code> 的数量大约为 <code>dog (label)</code> 的 2 倍</li></ul><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739333471748.png" alt=""></p><blockquote><p>【注意】注意次数样本数为 9 已经大于总图片数 8，说明当允许重复取样 <code>replacement=True</code> 时可以自行补充样本。同时原来 Dataloader 中的 <code>shuffle</code> 操作也会失效，因为随机取样完全由取样器决定</p></blockquote>]]></content>
    
    
    <summary type="html">Pytorch 针对数据处理，提供了两个重要的类 Dataset 和 Dataloader。本章主要讲解如何使用 Pytorch 实现深度学习/神经网络里的数据处理。相比于搭建已知的神经网络，对数据的处理更为复杂困难。【数据处理非常重要且困难！！】</summary>
    
    
    
    <category term="深度学习 Pytorch 完整教程" scheme="https://blog.iskage.online/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-Pytorch-%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://blog.iskage.online/tags/Python/"/>
    
    <category term="Pytorch" scheme="https://blog.iskage.online/tags/Pytorch/"/>
    
    <category term="神经网络" scheme="https://blog.iskage.online/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
    <category term="深度学习" scheme="https://blog.iskage.online/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AI" scheme="https://blog.iskage.online/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>SQL 自学笔记（7）聚合函数</title>
    <link href="https://blog.iskage.online/posts/b266e599.html"/>
    <id>https://blog.iskage.online/posts/b266e599.html</id>
    <published>2025-02-11T07:43:00.000Z</published>
    <updated>2025-02-19T11:26:58.057Z</updated>
    
    <content type="html"><![CDATA[<h1>聚合函数</h1><p>本文笔记根据<a href="https://www.bilibili.com/video/BV1iq4y1u7vj/?share_source=copy_web&amp;vd_source=67ce2d561f3b6dc9d7cff375959101a2">【b站 尚硅谷-宋红康 MySQL 课程】</a>整理。笔记和代码存储在我的 GitHub 库中 <a href="https://github.com/isKage/sql-notes">github.com/isKage/sql-notes</a>。</p><hr><p>不同的数据库管理系统 DBMS 的函数使用差异极大，SQL 语言函数的可移植性很差。</p><p>MySQL 提供的内置函数包括<em>单行函数</em>和<em>聚合函数</em>，这章讲解聚合函数。</p><p><strong>聚合函数</strong> ：对一组数据进行操作，输入一组数据的集合，返回结果值</p><h2 id="1-基础聚合函数">1 基础聚合函数</h2><p>对一组数据进行操作，输入一组数据的集合，返回结果值——例如：求一组数据的最大值，平均值，个数等</p><h3 id="1-1-AVG-和-SUM-均值和加和">1.1 AVG 和 SUM 均值和加和</h3><p>对于数值型数据：使用 <code>AVG</code> 求这一列数据的平均值；使用 <code>SUM</code> 求这一列数据的加和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(e.salary) &quot;avg_salary&quot;,</span><br><span class="line">       <span class="built_in">SUM</span>(e.salary) &quot;sum_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> avg_salary  <span class="operator">|</span> sum_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6461.682243</span> <span class="operator">|</span>  <span class="number">691400.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="1-2-MIN-和-MAX-最小和最大">1.2 MIN 和 MAX 最小和最大</h3><p>对于数值型数据：使用 <code>MIN</code> 求这一列数据的最小值；使用 <code>MAX</code> 求这一列数据的最大值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.salary) &quot;min_salary&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.salary) &quot;max_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="operator">|</span> min_salary <span class="operator">|</span> max_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2100.00</span> <span class="operator">|</span>   <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于日期数据：使用 <code>MIN</code> 求这一列最早的日期；使用 <code>MAX</code> 求这一列最晚的日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.hire_date) &quot;early_salary&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.hire_date) &quot;late_salary&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> early_salary <span class="operator">|</span> late_salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1987</span><span class="number">-06</span><span class="number">-17</span>   <span class="operator">|</span> <span class="number">2000</span><span class="number">-04</span><span class="number">-21</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于字符串数据： <code>MIN</code> 代表这一列在字符表中最早出现； <code>MAX</code> 代表这一列在字符表中最晚出现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(e.last_name) &quot;A...&quot;,</span><br><span class="line">       <span class="built_in">MAX</span>(e.last_name) &quot;Z...&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> A... <span class="operator">|</span> Z...    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="operator">|</span> Abel <span class="operator">|</span> Zlotkey <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>其他的类型均可使用 <code>MIN</code> 和 <code>MAX</code> ，可以自己尝试</p></blockquote><h3 id="1-3-COUNT-返回记录数">1.3 COUNT 返回记录数</h3><p><code>COUNT(*)</code> 返回表中记录总数，适用于任意数据类型，可以理解为对行计数。</p><blockquote><p>可以使用 <code>WHERE</code>增加限制条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="operator">&gt;=</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">58</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><code>COUNT(列名)</code> 返回不为空的行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(e.commission_pct) &quot;commission_pct not null&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> commission_pct <span class="keyword">not null</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span>                      <span class="number">35</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><code>COUNT(*)</code> 会统计值为 <code>NULL</code> 的行，而 <code>COUNT(列名)</code> 不会统计此列值为 <code>NULL</code> 的行</p></blockquote><h2 id="2-GROUP-BY-分组查询">2 GROUP BY 分组查询</h2><p><code>GROUP BY</code> 可以依照某些条件/某列对数据进行分组输出</p><p>格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 函数(列名<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件] <span class="comment">-- 可加限制条件</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名];  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><blockquote><p><code>WHERE 条件</code>  一定紧跟表后，无论是 <code>FROM 表名</code> 还是 <code>FROM 表名1 JOIN 表名2 ON ...</code> ，总之 <code>WHERE</code> 一定在表之后</p></blockquote><h3 id="2-1-以单个列为依据分组">2.1 以单个列为依据分组</h3><ul><li>例：按照 employees.department_id 分组，并连接表 departments 查询部门名。</li></ul><p>展示的列新增 <code>department_name</code> 和平均工资 <code>AVG(e.salary)</code> （此处使用格式化输出，保留 2 位小数，并命名为 “avg_salary_dept”）。采用内连接，去除 <code>NULL</code> ，因为我们要查的是切实存在的部门。<code>GROUP BY</code> 指定按照 <code>e.department_id</code> 分组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id, d.department_name, FORMAT(<span class="built_in">AVG</span>(e.salary), <span class="number">2</span>) &quot;avg_salary_dept&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"># <span class="keyword">WHERE</span> e.department_id <span class="operator">!=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id <span class="comment">-- 按照 employees.department_id 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary_dept <span class="keyword">DESC</span>; <span class="comment">-- 按照 avg_salary_dept 列排序</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739253575646.png" alt=""></p><h3 id="2-2-以多个列为依据分组">2.2 以多个列为依据分组</h3><ul><li>例：按 department_id, job_id 分组，并计算 salary</li></ul><p>简单的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id dept_id, e.job_id, <span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"># <span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id; <span class="comment">-- 按照 department_id, job_id 分组 </span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739253597610.png" alt=""></p><p>如果想要展示部门名，和工作职位名，同样可以多表连接，下面这个例子综合使用之前章节的知识：<code>GROUP BY</code> 依据 <code>e.department_id, e.job_id</code> 分组，<code>AVG</code> 函数分组计算平均薪水；<code>JOIN</code> 连接多表，查询 <code>dept_name</code> 和 <code>job_name</code> 字段并展示；<code>WHERE</code> 紧跟表后添加限制条件，<code>REGEXP</code> 使用正则表达寻找字段 <code>d.department_name</code> 以 <code>S</code> 开头的字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id        dept_id,</span><br><span class="line">       d.department_name      dept_name,</span><br><span class="line">       e.job_id,</span><br><span class="line">       j.job_title            job_name,</span><br><span class="line">       FORMAT(<span class="built_in">AVG</span>(salary), <span class="number">2</span>) avg_salary <span class="comment">-- 分组计算平均薪水</span></span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line">         <span class="comment">-- 多表连接，查询 dept_name 和 job_name</span></span><br><span class="line">         <span class="keyword">JOIN</span> departments d</span><br><span class="line">         <span class="keyword">JOIN</span> jobs j</span><br><span class="line">              <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id <span class="keyword">AND</span> e.job_id <span class="operator">=</span> j.job_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_name REGEXP <span class="string">&#x27;^S&#x27;</span> <span class="comment">-- 匹配以 S 开头的字符串</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id, e.job_id <span class="comment">-- 按照 e.department_id, e.job_id 分组</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_salary <span class="keyword">DESC</span>; <span class="comment">-- 根据 avg_salary 降序</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739254720337.png" alt=""></p><h3 id="2-3-WITH-ROLLUP-添加记录">2.3 WITH ROLLUP 添加记录</h3><p>在 <code>GROUP BY</code> 后加上 <code>WITH ROLLUP</code> 会为结果添加一条记录（行数据）。</p><ul><li>分组依据列返回 <code>NULL</code></li><li>被操作的列，会再次操作，以下面代码为例</li></ul><p>当按照 <code>e.department_id</code> 分组且剔除 <code>e.department_id &lt; 30</code> 行数据后，会对计算完新表的 <code>sum_id</code> 和 <code>avg_salary</code> 再进行一次 <code>SUM</code> 和 <code>AVG</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.department_id      id,</span><br><span class="line">       <span class="built_in">SUM</span>(e.department_id) sum_id,</span><br><span class="line">       <span class="built_in">AVG</span>(e.salary)        avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.department_id</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>; <span class="comment">-- 添加一行数据：再进行一次 SUM(sum_id) AVG(avg_salary) 操作</span></span><br></pre></td></tr></table></figure><p><img src="https://blog-iskage.oss-cn-hangzhou.aliyuncs.com/images/QQ_1739255721920.png" alt=""></p><blockquote><p>【注意】分组时选择查询的表一定要保证查询后数量相同</p><p>【注意】<code>WITH ROLLUP</code> 和 <code>ORDER BY</code> 不能同时使用</p><p>【注意】<code>WHERE</code> 可以在查表时进行约束，但不能对 <code>GROUP BY</code> 分组时进行约束</p></blockquote><h2 id="3-GROUP-BY-…-HAVING-有约束的分组">3 GROUP BY … HAVING 有约束的分组</h2><h3 id="3-1-HAVING-使用聚合函数进行限制">3.1 HAVING 使用聚合函数进行限制</h3><p>在行已经被分组后，且保证查询列中使用了聚合函数：则满足 <code>HAVING 条件</code> 子句中条件的分组将被显示。</p><blockquote><p>注意：<code>HAVING</code> 不能单独使用，必须和 <code>GROUP BY</code> 一起使用</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 函数(列名<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件] <span class="comment">-- 可加限制条件</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名</span><br><span class="line"><span class="keyword">HAVING</span> 条件 <span class="comment">-- 分组的过滤条件</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名];  <span class="comment">-- 可选</span></span><br></pre></td></tr></table></figure><ul><li>例：按部门分组，返回最大工资。然后查询这些最大工资大于 10000 的部门 id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) &quot;max_larger_than_10000&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> department_id <span class="operator">|</span> max_larger_than_10000 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span>              <span class="number">13000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">30</span> <span class="operator">|</span>              <span class="number">11000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">80</span> <span class="operator">|</span>              <span class="number">14000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">90</span> <span class="operator">|</span>              <span class="number">24000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">100</span> <span class="operator">|</span>              <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">110</span> <span class="operator">|</span>              <span class="number">12000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-2-HAVING-和-WHERE">3.2 HAVING 和 WHERE</h3><blockquote><p>【注意】不可使用 <code>WHERE</code> 对聚合函数进行约束</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary) &quot;max_larger_than_10000&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>  <span class="comment">-- WHERE 后不可加聚合函数</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">1111</span> (HY000): Invalid use <span class="keyword">of</span> <span class="keyword">group</span> <span class="keyword">function</span></span><br></pre></td></tr></table></figure><ul><li><code>WHERE</code> 可以直接使用表中的字段作为筛选条件，但不能使用分组中的聚合函数作为筛选条件</li><li><code>HAVING</code> 必须要与 <code>GROUP BY</code>配合使用，可以把分组中的聚合函数和分组字段作为筛选条件</li><li>多表连接时，<code>WHERE</code> 是先筛选后连接，而 <code>HAVING</code> 是先连接后筛选。所以 <code>WHERE</code> 会效率更高</li></ul><h2 id="4-SELECT-语句【总结】">4 SELECT 语句【总结】</h2><h3 id="4-1-查询的常见格式">4.1 查询的常见格式</h3><p>结合之前章节的知识（<a href="https://blog.iskage.online/posts/151eef00.html">SELECT 语句</a>、<a href="https://blog.iskage.online/posts/a7d82995.html">运算符与 SQL 的正则表达式</a>、<a href="https://blog.iskage.online/posts/c8719e79.html">排序与分页：ORDER BY 子句 和 LIMIT 子句</a>、<a href="https://blog.iskage.online/posts/b4103c0f.html">多表查询</a>、<a href="https://blog.iskage.online/posts/35d72c0b.html">单行函数</a>），我们可以总结常见的 <code>SELECT</code> 语句查询格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式1 : 使用 WHERE 连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span>, 表名<span class="number">2</span>, 表名<span class="number">3</span></span><br><span class="line"><span class="keyword">WHERE</span> 多表的连接条件 (不含聚合函数)</span><br><span class="line"><span class="keyword">AND</span> 条件</span><br><span class="line"><span class="keyword">AND</span> 条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件 (可含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT 起始行数, 行数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式2 : 使用 JOIN 连接</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>, 列名<span class="number">2</span>, 列名<span class="number">3</span>, ...</span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="number">1</span> </span><br><span class="line"><span class="keyword">JOIN</span> 表名<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">JOIN</span> 表名<span class="number">3</span></span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件 (不含聚合函数)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名, 列名, ...</span><br><span class="line"><span class="keyword">HAVING</span> 过滤条件 (可含聚合函数)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名 <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT 起始行数, 行数</span><br></pre></td></tr></table></figure><h3 id="4-2-SELECT-语句的执行顺序">4.2 SELECT 语句的执行顺序</h3><ul><li>关键字必须按照</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="keyword">FROM</span> ... [<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ...]</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT ..., ...</span><br></pre></td></tr></table></figure><ul><li>SQL 实际执行顺序为</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ... [<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ...]</span><br><span class="line"><span class="keyword">WHERE</span> ...</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="keyword">HAVING</span> ...</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">DISTINCT</span> ...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span>[<span class="keyword">DESC</span>]</span><br><span class="line">LIMIT ..., ...</span><br></pre></td></tr></table></figure><p>即：先找到表（<em>FROM</em>） ，然后根据条件过滤（<em>WHERE</em>）得到虚拟的一张表，然后分组（<em>GROUP BY</em>），分组后再依照聚合函数或分组依据的列等条件进行过滤（<em>HAVING</em>），最后锁定需要输出的字段/列（<em>SELECT</em>），去除重复行数据（<em>DISTINCT</em>）排序（<em>ORDER BY</em>）分页（<em>LIMIT</em>）输出。</p>]]></content>
    
    
    <summary type="html">MySQL 提供的内置函数包括单行函数和聚合函数，这章讲解聚合函数。聚合函数对一组数据进行操作，输入一组数据的集合，返回结果值。</summary>
    
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://blog.iskage.online/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://blog.iskage.online/tags/SQL/"/>
    
    <category term="数据库" scheme="https://blog.iskage.online/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
